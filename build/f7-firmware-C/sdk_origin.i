#define __STDC__ 1
#define __STDC_VERSION__ 201710L
#define __STDC_UTF_16__ 1
#define __STDC_UTF_32__ 1
#define __STDC_HOSTED__ 1
#define __GNUC__ 10
#define __GNUC_MINOR__ 3
#define __GNUC_PATCHLEVEL__ 1
#define __VERSION__ "10.3.1 20210824 (release)"
#define __ATOMIC_RELAXED 0
#define __ATOMIC_SEQ_CST 5
#define __ATOMIC_ACQUIRE 2
#define __ATOMIC_RELEASE 3
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_CONSUME 1
#define __OPTIMIZE_SIZE__ 1
#define __OPTIMIZE__ 1
#define __NO_MATH_ERRNO__ 1
#define __FINITE_MATH_ONLY__ 0
#define __SIZEOF_INT__ 4
#define __SIZEOF_LONG__ 4
#define __SIZEOF_LONG_LONG__ 8
#define __SIZEOF_SHORT__ 2
#define __SIZEOF_FLOAT__ 4
#define __SIZEOF_DOUBLE__ 8
#define __SIZEOF_LONG_DOUBLE__ 8
#define __SIZEOF_SIZE_T__ 4
#define __CHAR_BIT__ 8
#define __BIGGEST_ALIGNMENT__ 8
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_PDP_ENDIAN__ 3412
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __SIZEOF_POINTER__ 4
#define __SIZE_TYPE__ unsigned int
#define __PTRDIFF_TYPE__ int
#define __WCHAR_TYPE__ unsigned int
#define __WINT_TYPE__ unsigned int
#define __INTMAX_TYPE__ long long int
#define __UINTMAX_TYPE__ long long unsigned int
#define __CHAR16_TYPE__ short unsigned int
#define __CHAR32_TYPE__ long unsigned int
#define __SIG_ATOMIC_TYPE__ int
#define __INT8_TYPE__ signed char
#define __INT16_TYPE__ short int
#define __INT32_TYPE__ long int
#define __INT64_TYPE__ long long int
#define __UINT8_TYPE__ unsigned char
#define __UINT16_TYPE__ short unsigned int
#define __UINT32_TYPE__ long unsigned int
#define __UINT64_TYPE__ long long unsigned int
#define __INT_LEAST8_TYPE__ signed char
#define __INT_LEAST16_TYPE__ short int
#define __INT_LEAST32_TYPE__ long int
#define __INT_LEAST64_TYPE__ long long int
#define __UINT_LEAST8_TYPE__ unsigned char
#define __UINT_LEAST16_TYPE__ short unsigned int
#define __UINT_LEAST32_TYPE__ long unsigned int
#define __UINT_LEAST64_TYPE__ long long unsigned int
#define __INT_FAST8_TYPE__ int
#define __INT_FAST16_TYPE__ int
#define __INT_FAST32_TYPE__ int
#define __INT_FAST64_TYPE__ long long int
#define __UINT_FAST8_TYPE__ unsigned int
#define __UINT_FAST16_TYPE__ unsigned int
#define __UINT_FAST32_TYPE__ unsigned int
#define __UINT_FAST64_TYPE__ long long unsigned int
#define __INTPTR_TYPE__ int
#define __UINTPTR_TYPE__ unsigned int
#define __GXX_ABI_VERSION 1014
#define __SCHAR_MAX__ 0x7f
#define __SHRT_MAX__ 0x7fff
#define __INT_MAX__ 0x7fffffff
#define __LONG_MAX__ 0x7fffffffL
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __WCHAR_MAX__ 0xffffffffU
#define __WCHAR_MIN__ 0U
#define __WINT_MAX__ 0xffffffffU
#define __WINT_MIN__ 0U
#define __PTRDIFF_MAX__ 0x7fffffff
#define __SIZE_MAX__ 0xffffffffU
#define __SCHAR_WIDTH__ 8
#define __SHRT_WIDTH__ 16
#define __INT_WIDTH__ 32
#define __LONG_WIDTH__ 32
#define __LONG_LONG_WIDTH__ 64
#define __WCHAR_WIDTH__ 32
#define __WINT_WIDTH__ 32
#define __PTRDIFF_WIDTH__ 32
#define __SIZE_WIDTH__ 32
#define __INTMAX_MAX__ 0x7fffffffffffffffLL
#define __INTMAX_C(c) c ## LL
#define __UINTMAX_MAX__ 0xffffffffffffffffULL
#define __UINTMAX_C(c) c ## ULL
#define __INTMAX_WIDTH__ 64
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __SIG_ATOMIC_WIDTH__ 32
#define __INT8_MAX__ 0x7f
#define __INT16_MAX__ 0x7fff
#define __INT32_MAX__ 0x7fffffffL
#define __INT64_MAX__ 0x7fffffffffffffffLL
#define __UINT8_MAX__ 0xff
#define __UINT16_MAX__ 0xffff
#define __UINT32_MAX__ 0xffffffffUL
#define __UINT64_MAX__ 0xffffffffffffffffULL
#define __INT_LEAST8_MAX__ 0x7f
#define __INT8_C(c) c
#define __INT_LEAST8_WIDTH__ 8
#define __INT_LEAST16_MAX__ 0x7fff
#define __INT16_C(c) c
#define __INT_LEAST16_WIDTH__ 16
#define __INT_LEAST32_MAX__ 0x7fffffffL
#define __INT32_C(c) c ## L
#define __INT_LEAST32_WIDTH__ 32
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffLL
#define __INT64_C(c) c ## LL
#define __INT_LEAST64_WIDTH__ 64
#define __UINT_LEAST8_MAX__ 0xff
#define __UINT8_C(c) c
#define __UINT_LEAST16_MAX__ 0xffff
#define __UINT16_C(c) c
#define __UINT_LEAST32_MAX__ 0xffffffffUL
#define __UINT32_C(c) c ## UL
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffULL
#define __UINT64_C(c) c ## ULL
#define __INT_FAST8_MAX__ 0x7fffffff
#define __INT_FAST8_WIDTH__ 32
#define __INT_FAST16_MAX__ 0x7fffffff
#define __INT_FAST16_WIDTH__ 32
#define __INT_FAST32_MAX__ 0x7fffffff
#define __INT_FAST32_WIDTH__ 32
#define __INT_FAST64_MAX__ 0x7fffffffffffffffLL
#define __INT_FAST64_WIDTH__ 64
#define __UINT_FAST8_MAX__ 0xffffffffU
#define __UINT_FAST16_MAX__ 0xffffffffU
#define __UINT_FAST32_MAX__ 0xffffffffU
#define __UINT_FAST64_MAX__ 0xffffffffffffffffULL
#define __INTPTR_MAX__ 0x7fffffff
#define __INTPTR_WIDTH__ 32
#define __UINTPTR_MAX__ 0xffffffffU
#define __GCC_IEC_559 0
#define __GCC_IEC_559_COMPLEX 0
#define __FLT_EVAL_METHOD__ 0
#define __FLT_EVAL_METHOD_TS_18661_3__ 0
#define __DEC_EVAL_METHOD__ 2
#define __FLT_RADIX__ 2
#define __FLT_MANT_DIG__ 24
#define __FLT_DIG__ 6
#define __FLT_MIN_EXP__ (-125)
#define __FLT_MIN_10_EXP__ (-37)
#define __FLT_MAX_EXP__ 128
#define __FLT_MAX_10_EXP__ 38
#define __FLT_DECIMAL_DIG__ 9
#define __FLT_MAX__ 3.4028234663852886e+38F
#define __FLT_NORM_MAX__ 3.4028234663852886e+38F
#define __FLT_MIN__ 1.1754943508222875e-38F
#define __FLT_EPSILON__ 1.1920928955078125e-7F
#define __FLT_DENORM_MIN__ 1.4012984643248171e-45F
#define __FLT_HAS_DENORM__ 1
#define __FLT_HAS_INFINITY__ 1
#define __FLT_HAS_QUIET_NAN__ 1
#define __FP_FAST_FMAF 1
#define __DBL_MANT_DIG__ 53
#define __DBL_DIG__ 15
#define __DBL_MIN_EXP__ (-1021)
#define __DBL_MIN_10_EXP__ (-307)
#define __DBL_MAX_EXP__ 1024
#define __DBL_MAX_10_EXP__ 308
#define __DBL_DECIMAL_DIG__ 17
#define __DBL_MAX__ ((double)1.7976931348623157e+308L)
#define __DBL_NORM_MAX__ ((double)1.7976931348623157e+308L)
#define __DBL_MIN__ ((double)2.2250738585072014e-308L)
#define __DBL_EPSILON__ ((double)2.2204460492503131e-16L)
#define __DBL_DENORM_MIN__ ((double)4.9406564584124654e-324L)
#define __DBL_HAS_DENORM__ 1
#define __DBL_HAS_INFINITY__ 1
#define __DBL_HAS_QUIET_NAN__ 1
#define __LDBL_MANT_DIG__ 53
#define __LDBL_DIG__ 15
#define __LDBL_MIN_EXP__ (-1021)
#define __LDBL_MIN_10_EXP__ (-307)
#define __LDBL_MAX_EXP__ 1024
#define __LDBL_MAX_10_EXP__ 308
#define __DECIMAL_DIG__ 17
#define __LDBL_DECIMAL_DIG__ 17
#define __LDBL_MAX__ 1.7976931348623157e+308L
#define __LDBL_NORM_MAX__ 1.7976931348623157e+308L
#define __LDBL_MIN__ 2.2250738585072014e-308L
#define __LDBL_EPSILON__ 2.2204460492503131e-16L
#define __LDBL_DENORM_MIN__ 4.9406564584124654e-324L
#define __LDBL_HAS_DENORM__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __LDBL_HAS_QUIET_NAN__ 1
#define __FLT32_MANT_DIG__ 24
#define __FLT32_DIG__ 6
#define __FLT32_MIN_EXP__ (-125)
#define __FLT32_MIN_10_EXP__ (-37)
#define __FLT32_MAX_EXP__ 128
#define __FLT32_MAX_10_EXP__ 38
#define __FLT32_DECIMAL_DIG__ 9
#define __FLT32_MAX__ 3.4028234663852886e+38F32
#define __FLT32_NORM_MAX__ 3.4028234663852886e+38F32
#define __FLT32_MIN__ 1.1754943508222875e-38F32
#define __FLT32_EPSILON__ 1.1920928955078125e-7F32
#define __FLT32_DENORM_MIN__ 1.4012984643248171e-45F32
#define __FLT32_HAS_DENORM__ 1
#define __FLT32_HAS_INFINITY__ 1
#define __FLT32_HAS_QUIET_NAN__ 1
#define __FP_FAST_FMAF32 1
#define __FLT64_MANT_DIG__ 53
#define __FLT64_DIG__ 15
#define __FLT64_MIN_EXP__ (-1021)
#define __FLT64_MIN_10_EXP__ (-307)
#define __FLT64_MAX_EXP__ 1024
#define __FLT64_MAX_10_EXP__ 308
#define __FLT64_DECIMAL_DIG__ 17
#define __FLT64_MAX__ 1.7976931348623157e+308F64
#define __FLT64_NORM_MAX__ 1.7976931348623157e+308F64
#define __FLT64_MIN__ 2.2250738585072014e-308F64
#define __FLT64_EPSILON__ 2.2204460492503131e-16F64
#define __FLT64_DENORM_MIN__ 4.9406564584124654e-324F64
#define __FLT64_HAS_DENORM__ 1
#define __FLT64_HAS_INFINITY__ 1
#define __FLT64_HAS_QUIET_NAN__ 1
#define __FLT32X_MANT_DIG__ 53
#define __FLT32X_DIG__ 15
#define __FLT32X_MIN_EXP__ (-1021)
#define __FLT32X_MIN_10_EXP__ (-307)
#define __FLT32X_MAX_EXP__ 1024
#define __FLT32X_MAX_10_EXP__ 308
#define __FLT32X_DECIMAL_DIG__ 17
#define __FLT32X_MAX__ 1.7976931348623157e+308F32x
#define __FLT32X_NORM_MAX__ 1.7976931348623157e+308F32x
#define __FLT32X_MIN__ 2.2250738585072014e-308F32x
#define __FLT32X_EPSILON__ 2.2204460492503131e-16F32x
#define __FLT32X_DENORM_MIN__ 4.9406564584124654e-324F32x
#define __FLT32X_HAS_DENORM__ 1
#define __FLT32X_HAS_INFINITY__ 1
#define __FLT32X_HAS_QUIET_NAN__ 1
#define __SFRACT_FBIT__ 7
#define __SFRACT_IBIT__ 0
#define __SFRACT_MIN__ (-0.5HR-0.5HR)
#define __SFRACT_MAX__ 0X7FP-7HR
#define __SFRACT_EPSILON__ 0x1P-7HR
#define __USFRACT_FBIT__ 8
#define __USFRACT_IBIT__ 0
#define __USFRACT_MIN__ 0.0UHR
#define __USFRACT_MAX__ 0XFFP-8UHR
#define __USFRACT_EPSILON__ 0x1P-8UHR
#define __FRACT_FBIT__ 15
#define __FRACT_IBIT__ 0
#define __FRACT_MIN__ (-0.5R-0.5R)
#define __FRACT_MAX__ 0X7FFFP-15R
#define __FRACT_EPSILON__ 0x1P-15R
#define __UFRACT_FBIT__ 16
#define __UFRACT_IBIT__ 0
#define __UFRACT_MIN__ 0.0UR
#define __UFRACT_MAX__ 0XFFFFP-16UR
#define __UFRACT_EPSILON__ 0x1P-16UR
#define __LFRACT_FBIT__ 31
#define __LFRACT_IBIT__ 0
#define __LFRACT_MIN__ (-0.5LR-0.5LR)
#define __LFRACT_MAX__ 0X7FFFFFFFP-31LR
#define __LFRACT_EPSILON__ 0x1P-31LR
#define __ULFRACT_FBIT__ 32
#define __ULFRACT_IBIT__ 0
#define __ULFRACT_MIN__ 0.0ULR
#define __ULFRACT_MAX__ 0XFFFFFFFFP-32ULR
#define __ULFRACT_EPSILON__ 0x1P-32ULR
#define __LLFRACT_FBIT__ 63
#define __LLFRACT_IBIT__ 0
#define __LLFRACT_MIN__ (-0.5LLR-0.5LLR)
#define __LLFRACT_MAX__ 0X7FFFFFFFFFFFFFFFP-63LLR
#define __LLFRACT_EPSILON__ 0x1P-63LLR
#define __ULLFRACT_FBIT__ 64
#define __ULLFRACT_IBIT__ 0
#define __ULLFRACT_MIN__ 0.0ULLR
#define __ULLFRACT_MAX__ 0XFFFFFFFFFFFFFFFFP-64ULLR
#define __ULLFRACT_EPSILON__ 0x1P-64ULLR
#define __SACCUM_FBIT__ 7
#define __SACCUM_IBIT__ 8
#define __SACCUM_MIN__ (-0X1P7HK-0X1P7HK)
#define __SACCUM_MAX__ 0X7FFFP-7HK
#define __SACCUM_EPSILON__ 0x1P-7HK
#define __USACCUM_FBIT__ 8
#define __USACCUM_IBIT__ 8
#define __USACCUM_MIN__ 0.0UHK
#define __USACCUM_MAX__ 0XFFFFP-8UHK
#define __USACCUM_EPSILON__ 0x1P-8UHK
#define __ACCUM_FBIT__ 15
#define __ACCUM_IBIT__ 16
#define __ACCUM_MIN__ (-0X1P15K-0X1P15K)
#define __ACCUM_MAX__ 0X7FFFFFFFP-15K
#define __ACCUM_EPSILON__ 0x1P-15K
#define __UACCUM_FBIT__ 16
#define __UACCUM_IBIT__ 16
#define __UACCUM_MIN__ 0.0UK
#define __UACCUM_MAX__ 0XFFFFFFFFP-16UK
#define __UACCUM_EPSILON__ 0x1P-16UK
#define __LACCUM_FBIT__ 31
#define __LACCUM_IBIT__ 32
#define __LACCUM_MIN__ (-0X1P31LK-0X1P31LK)
#define __LACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LK
#define __LACCUM_EPSILON__ 0x1P-31LK
#define __ULACCUM_FBIT__ 32
#define __ULACCUM_IBIT__ 32
#define __ULACCUM_MIN__ 0.0ULK
#define __ULACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULK
#define __ULACCUM_EPSILON__ 0x1P-32ULK
#define __LLACCUM_FBIT__ 31
#define __LLACCUM_IBIT__ 32
#define __LLACCUM_MIN__ (-0X1P31LLK-0X1P31LLK)
#define __LLACCUM_MAX__ 0X7FFFFFFFFFFFFFFFP-31LLK
#define __LLACCUM_EPSILON__ 0x1P-31LLK
#define __ULLACCUM_FBIT__ 32
#define __ULLACCUM_IBIT__ 32
#define __ULLACCUM_MIN__ 0.0ULLK
#define __ULLACCUM_MAX__ 0XFFFFFFFFFFFFFFFFP-32ULLK
#define __ULLACCUM_EPSILON__ 0x1P-32ULLK
#define __QQ_FBIT__ 7
#define __QQ_IBIT__ 0
#define __HQ_FBIT__ 15
#define __HQ_IBIT__ 0
#define __SQ_FBIT__ 31
#define __SQ_IBIT__ 0
#define __DQ_FBIT__ 63
#define __DQ_IBIT__ 0
#define __TQ_FBIT__ 127
#define __TQ_IBIT__ 0
#define __UQQ_FBIT__ 8
#define __UQQ_IBIT__ 0
#define __UHQ_FBIT__ 16
#define __UHQ_IBIT__ 0
#define __USQ_FBIT__ 32
#define __USQ_IBIT__ 0
#define __UDQ_FBIT__ 64
#define __UDQ_IBIT__ 0
#define __UTQ_FBIT__ 128
#define __UTQ_IBIT__ 0
#define __HA_FBIT__ 7
#define __HA_IBIT__ 8
#define __SA_FBIT__ 15
#define __SA_IBIT__ 16
#define __DA_FBIT__ 31
#define __DA_IBIT__ 32
#define __TA_FBIT__ 63
#define __TA_IBIT__ 64
#define __UHA_FBIT__ 8
#define __UHA_IBIT__ 8
#define __USA_FBIT__ 16
#define __USA_IBIT__ 16
#define __UDA_FBIT__ 32
#define __UDA_IBIT__ 32
#define __UTA_FBIT__ 64
#define __UTA_IBIT__ 64
#define __REGISTER_PREFIX__ 
#define __USER_LABEL_PREFIX__ 
#define __GNUC_STDC_INLINE__ 1
#define __CHAR_UNSIGNED__ 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __GCC_ATOMIC_LLONG_LOCK_FREE 1
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define __HAVE_SPECULATION_SAFE_VALUE 1
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __SIZEOF_WCHAR_T__ 4
#define __SIZEOF_WINT_T__ 4
#define __SIZEOF_PTRDIFF_T__ 4
#define __ARM_FEATURE_DSP 1
#define __ARM_FEATURE_QBIT 1
#define __ARM_FEATURE_SAT 1
#undef __ARM_FEATURE_CRYPTO
#define __ARM_FEATURE_UNALIGNED 1
#undef __ARM_FEATURE_QRDMX
#undef __ARM_FEATURE_CRC32
#undef __ARM_FEATURE_DOTPROD
#undef __ARM_FEATURE_COMPLEX
#define __ARM_32BIT_STATE 1
#undef __ARM_FEATURE_MVE
#undef __ARM_FEATURE_CMSE
#undef __ARM_FEATURE_LDREX
#define __ARM_FEATURE_LDREX 7
#define __ARM_FEATURE_CLZ 1
#undef __ARM_FEATURE_NUMERIC_MAXMIN
#define __ARM_FEATURE_SIMD32 1
#define __ARM_SIZEOF_MINIMAL_ENUM 1
#define __ARM_SIZEOF_WCHAR_T 4
#undef __ARM_ARCH_PROFILE
#define __ARM_ARCH_PROFILE 77
#define __arm__ 1
#undef __ARM_ARCH
#define __ARM_ARCH 7
#define __APCS_32__ 1
#define __GCC_ASM_FLAG_OUTPUTS__ 1
#define __thumb__ 1
#define __thumb2__ 1
#define __THUMBEL__ 1
#undef __ARM_ARCH_ISA_THUMB
#define __ARM_ARCH_ISA_THUMB 2
#define __ARMEL__ 1
#define __VFP_FP__ 1
#undef __ARM_FP
#define __ARM_FP 4
#undef __ARM_FP16_FORMAT_IEEE
#undef __ARM_FP16_FORMAT_ALTERNATIVE
#undef __ARM_FP16_ARGS
#undef __ARM_FEATURE_FP16_SCALAR_ARITHMETIC
#undef __ARM_FEATURE_FP16_VECTOR_ARITHMETIC
#undef __ARM_FEATURE_FP16_FML
#define __ARM_FEATURE_FMA 1
#undef __ARM_NEON__
#undef __ARM_NEON
#undef __ARM_NEON_FP
#define __THUMB_INTERWORK__ 1
#define __ARM_ARCH_7EM__ 1
#define __ARM_PCS_VFP 1
#define __ARM_EABI__ 1
#undef __FDPIC__
#define __ARM_ARCH_EXT_IDIV__ 1
#define __ARM_FEATURE_IDIV 1
#define __ARM_ASM_SYNTAX_UNIFIED__ 1
#undef __ARM_FEATURE_COPROC
#define __ARM_FEATURE_COPROC 15
#undef __ARM_FEATURE_CDE
#undef __ARM_FEATURE_CDE_COPROC
#undef __ARM_FEATURE_MATMUL_INT8
#undef __ARM_FEATURE_BF16_SCALAR_ARITHMETIC
#undef __ARM_FEATURE_BF16_VECTOR_ARITHMETIC
#undef __ARM_BF16_FORMAT_ALTERNATIVE
#define __GXX_TYPEINFO_EQUALITY_INLINE 0
#define __ELF__ 1
#define __USES_INITFINI__ 1
#define _GNU_SOURCE 1
#define M_MEMORY_FULL(x) abort()
#define STM32WB 1
#define STM32WB55xx 1
#define USE_FULL_ASSERT 1
#define USE_FULL_LL_DRIVER 1
#define HAVE_FREERTOS 1
#define USB_PMASIZE 0x400
#define LFS_CONFIG lfs_config.h
#define PB_ENABLE_MALLOC 1
#define FURI_NDEBUG 1
#define NDEBUG 1
#define _Static_assert(x,y) 
#define __asm__(x) 
#define __attribute__(x) 
#define restrict 
#define _Noreturn 
#define __restrict 
#define __extension__ 
#define __inline inline
#define __inline__ inline
       
#define OWH_TIMING_A 9
#define OWH_TIMING_B 64
#define OWH_TIMING_C 64
#define OWH_TIMING_D 14
#define OWH_TIMING_E 9
#define OWH_TIMING_F 55
#define OWH_TIMING_G 0
#define OWH_TIMING_H 480
#define OWH_TIMING_I 70
#define OWH_TIMING_J 410
#define OWH_WRITE_1_DRIVE OWH_TIMING_A
#define OWH_WRITE_1_RELEASE OWH_TIMING_B
#define OWH_WRITE_0_DRIVE OWH_TIMING_C
#define OWH_WRITE_0_RELEASE OWH_TIMING_D
#define OWH_READ_DRIVE 3
#define OWH_READ_RELEASE OWH_TIMING_E
#define OWH_READ_DELAY_POST OWH_TIMING_F
#define OWH_RESET_DELAY_PRE OWH_TIMING_G
#define OWH_RESET_DRIVE OWH_TIMING_H
#define OWH_RESET_RELEASE OWH_TIMING_I
#define OWH_RESET_DELAY_POST OWH_TIMING_J
       
#define _STDINT_H 
#define _MACHINE__DEFAULT_TYPES_H 
#define _SYS_FEATURES_H 
#define _NEWLIB_VERSION_H__ 1
#define _NEWLIB_VERSION "4.1.0"
#define __NEWLIB__ 4
#define __NEWLIB_MINOR__ 1
#define __NEWLIB_PATCHLEVEL__ 0
#define __GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
#define __GNUC_PREREQ__(ma,mi) __GNUC_PREREQ(ma, mi)
#undef _ATFILE_SOURCE
#define _ATFILE_SOURCE 1
#undef _DEFAULT_SOURCE
#define _DEFAULT_SOURCE 1
#undef _ISOC99_SOURCE
#define _ISOC99_SOURCE 1
#undef _ISOC11_SOURCE
#define _ISOC11_SOURCE 1
#undef _POSIX_SOURCE
#define _POSIX_SOURCE 1
#undef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200809L
#undef _XOPEN_SOURCE
#define _XOPEN_SOURCE 700
#undef _XOPEN_SOURCE_EXTENDED
#define _XOPEN_SOURCE_EXTENDED 1
#undef _POSIX_SOURCE
#define _POSIX_SOURCE 1
#undef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200809L
#undef _ATFILE_SOURCE
#define _ATFILE_SOURCE 1
#define __ATFILE_VISIBLE 1
#define __BSD_VISIBLE 1
#define __GNU_VISIBLE 1
#define __ISO_C_VISIBLE 2011
#define __LARGEFILE_VISIBLE 1
#define __MISC_VISIBLE 1
#define __POSIX_VISIBLE 200809
#define __SVID_VISIBLE 1
#define __XSI_VISIBLE 700
#define __SSP_FORTIFY_LEVEL 0
#define __EXP(x) __ ##x ##__
#define __have_longlong64 1
#define __have_long32 1
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
#define ___int8_t_defined 1
typedef short int __int16_t;
typedef short unsigned int __uint16_t;
#define ___int16_t_defined 1
typedef long int __int32_t;
typedef long unsigned int __uint32_t;
#define ___int32_t_defined 1
typedef long long int __int64_t;
typedef long long unsigned int __uint64_t;
#define ___int64_t_defined 1
typedef signed char __int_least8_t;
typedef unsigned char __uint_least8_t;
#define ___int_least8_t_defined 1
typedef short int __int_least16_t;
typedef short unsigned int __uint_least16_t;
#define ___int_least16_t_defined 1
typedef long int __int_least32_t;
typedef long unsigned int __uint_least32_t;
#define ___int_least32_t_defined 1
typedef long long int __int_least64_t;
typedef long long unsigned int __uint_least64_t;
#define ___int_least64_t_defined 1
typedef long long int __intmax_t;
typedef long long unsigned int __uintmax_t;
typedef int __intptr_t;
typedef unsigned int __uintptr_t;
#undef __EXP
#define _SYS__INTSUP_H 
#define __STDINT_EXP(x) __ ##x ##__
       
       
       
       
       
       
       
       
#undef signed
#undef unsigned
#undef char
#undef short
#undef int
#undef __int20
#undef __int20__
#undef long
#define signed +0
#define unsigned +0
#define char +0
#define short +1
#define __int20 +2
#define __int20__ +2
#define int +2
#define long +4
#define _INTPTR_EQ_INT 
#define _INT32_EQ_LONG 
#define __INT8 "hh"
#define __INT16 "h"
#define __INT32 "l"
#define __INT64 "ll"
#define __FAST8 
#define __FAST16 
#define __FAST32 
#define __FAST64 "ll"
#define __LEAST8 "hh"
#define __LEAST16 "h"
#define __LEAST32 "l"
#define __LEAST64 "ll"
#undef signed
#undef unsigned
#undef char
#undef short
#undef int
#undef long
       
       
       
       
       
#undef __int20
       
#undef __int20__
       
       
#define _SYS__STDINT_H 
typedef __int8_t int8_t ;
#define _INT8_T_DECLARED 
typedef __uint8_t uint8_t ;
#define _UINT8_T_DECLARED 
#define __int8_t_defined 1
typedef __int16_t int16_t ;
#define _INT16_T_DECLARED 
typedef __uint16_t uint16_t ;
#define _UINT16_T_DECLARED 
#define __int16_t_defined 1
typedef __int32_t int32_t ;
#define _INT32_T_DECLARED 
typedef __uint32_t uint32_t ;
#define _UINT32_T_DECLARED 
#define __int32_t_defined 1
typedef __int64_t int64_t ;
#define _INT64_T_DECLARED 
typedef __uint64_t uint64_t ;
#define _UINT64_T_DECLARED 
#define __int64_t_defined 1
typedef __intmax_t intmax_t;
#define _INTMAX_T_DECLARED 
typedef __uintmax_t uintmax_t;
#define _UINTMAX_T_DECLARED 
typedef __intptr_t intptr_t;
#define _INTPTR_T_DECLARED 
typedef __uintptr_t uintptr_t;
#define _UINTPTR_T_DECLARED 
typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;
#define __int_least8_t_defined 1
typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;
#define __int_least16_t_defined 1
typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;
#define __int_least32_t_defined 1
typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
#define __int_least64_t_defined 1
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
#define __int_fast8_t_defined 1
  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
#define __int_fast16_t_defined 1
  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
#define __int_fast32_t_defined 1
  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
#define __int_fast64_t_defined 1
#define INTPTR_MIN (-__INTPTR_MAX__ - 1)
#define INTPTR_MAX (__INTPTR_MAX__)
#define UINTPTR_MAX (__UINTPTR_MAX__)
#define INT8_MIN (-__INT8_MAX__ - 1)
#define INT8_MAX (__INT8_MAX__)
#define UINT8_MAX (__UINT8_MAX__)
#define INT_LEAST8_MIN (-__INT_LEAST8_MAX__ - 1)
#define INT_LEAST8_MAX (__INT_LEAST8_MAX__)
#define UINT_LEAST8_MAX (__UINT_LEAST8_MAX__)
#define INT16_MIN (-__INT16_MAX__ - 1)
#define INT16_MAX (__INT16_MAX__)
#define UINT16_MAX (__UINT16_MAX__)
#define INT_LEAST16_MIN (-__INT_LEAST16_MAX__ - 1)
#define INT_LEAST16_MAX (__INT_LEAST16_MAX__)
#define UINT_LEAST16_MAX (__UINT_LEAST16_MAX__)
#define INT32_MIN (-__INT32_MAX__ - 1)
#define INT32_MAX (__INT32_MAX__)
#define UINT32_MAX (__UINT32_MAX__)
#define INT_LEAST32_MIN (-__INT_LEAST32_MAX__ - 1)
#define INT_LEAST32_MAX (__INT_LEAST32_MAX__)
#define UINT_LEAST32_MAX (__UINT_LEAST32_MAX__)
#define INT64_MIN (-__INT64_MAX__ - 1)
#define INT64_MAX (__INT64_MAX__)
#define UINT64_MAX (__UINT64_MAX__)
#define INT_LEAST64_MIN (-__INT_LEAST64_MAX__ - 1)
#define INT_LEAST64_MAX (__INT_LEAST64_MAX__)
#define UINT_LEAST64_MAX (__UINT_LEAST64_MAX__)
#define INT_FAST8_MIN (-__INT_FAST8_MAX__ - 1)
#define INT_FAST8_MAX (__INT_FAST8_MAX__)
#define UINT_FAST8_MAX (__UINT_FAST8_MAX__)
#define INT_FAST16_MIN (-__INT_FAST16_MAX__ - 1)
#define INT_FAST16_MAX (__INT_FAST16_MAX__)
#define UINT_FAST16_MAX (__UINT_FAST16_MAX__)
#define INT_FAST32_MIN (-__INT_FAST32_MAX__ - 1)
#define INT_FAST32_MAX (__INT_FAST32_MAX__)
#define UINT_FAST32_MAX (__UINT_FAST32_MAX__)
#define INT_FAST64_MIN (-__INT_FAST64_MAX__ - 1)
#define INT_FAST64_MAX (__INT_FAST64_MAX__)
#define UINT_FAST64_MAX (__UINT_FAST64_MAX__)
#define INTMAX_MAX (__INTMAX_MAX__)
#define INTMAX_MIN (-INTMAX_MAX - 1)
#define UINTMAX_MAX (__UINTMAX_MAX__)
#define SIZE_MAX (__SIZE_MAX__)
#define SIG_ATOMIC_MIN (-__STDINT_EXP(INT_MAX) - 1)
#define SIG_ATOMIC_MAX (__STDINT_EXP(INT_MAX))
#define PTRDIFF_MAX (__PTRDIFF_MAX__)
#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)
#define WCHAR_MIN (__WCHAR_MIN__)
#define WCHAR_MAX (__WCHAR_MAX__)
#define WINT_MAX (__WINT_MAX__)
#define WINT_MIN (__WINT_MIN__)
#define INT8_C(x) __INT8_C(x)
#define UINT8_C(x) __UINT8_C(x)
#define INT16_C(x) __INT16_C(x)
#define UINT16_C(x) __UINT16_C(x)
#define INT32_C(x) __INT32_C(x)
#define UINT32_C(x) __UINT32_C(x)
#define INT64_C(x) __INT64_C(x)
#define UINT64_C(x) __UINT64_C(x)
#define INTMAX_C(x) __INTMAX_C(x)
#define UINTMAX_C(x) __UINTMAX_C(x)
#define _GCC_WRAP_STDINT_H 
#define _STDBOOL_H 
#define bool _Bool
#define true 1
#define false 0
#define __bool_true_false_are_defined 1
       
#define STM32WBxx_LL_GPIO_H 
#define __STM32WBxx_H 
#define __STM32WBxx_CMSIS_VERSION_MAIN (0x01U)
#define __STM32WBxx_CMSIS_VERSION_SUB1 (0x0AU)
#define __STM32WBxx_CMSIS_VERSION_SUB2 (0x01U)
#define __STM32WBxx_CMSIS_VERSION_RC (0x00U)
#define __STM32WBxx_CMSIS_DEVICE_VERSION ((__STM32WBxx_CMSIS_VERSION_MAIN << 24) |(__STM32WBxx_CMSIS_VERSION_SUB1 << 16) |(__STM32WBxx_CMSIS_VERSION_SUB2 << 8 ) |(__STM32WBxx_CMSIS_VERSION_RC))
#define __STM32WB55xx_H 
#define __CM4_REV 1U
#define __MPU_PRESENT 1U
#define __VTOR_PRESENT 1U
#define __NVIC_PRIO_BITS 4U
#define __Vendor_SysTickConfig 0U
#define __FPU_PRESENT 1U
typedef enum
{
  NonMaskableInt_IRQn = -14,
  HardFault_IRQn = -13,
  MemoryManagement_IRQn = -12,
  BusFault_IRQn = -11,
  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,
  WWDG_IRQn = 0,
  PVD_PVM_IRQn = 1,
  TAMP_STAMP_LSECSS_IRQn = 2,
  RTC_WKUP_IRQn = 3,
  FLASH_IRQn = 4,
  RCC_IRQn = 5,
  EXTI0_IRQn = 6,
  EXTI1_IRQn = 7,
  EXTI2_IRQn = 8,
  EXTI3_IRQn = 9,
  EXTI4_IRQn = 10,
  DMA1_Channel1_IRQn = 11,
  DMA1_Channel2_IRQn = 12,
  DMA1_Channel3_IRQn = 13,
  DMA1_Channel4_IRQn = 14,
  DMA1_Channel5_IRQn = 15,
  DMA1_Channel6_IRQn = 16,
  DMA1_Channel7_IRQn = 17,
  ADC1_IRQn = 18,
  USB_HP_IRQn = 19,
  USB_LP_IRQn = 20,
  C2SEV_PWR_C2H_IRQn = 21,
  COMP_IRQn = 22,
  EXTI9_5_IRQn = 23,
  TIM1_BRK_IRQn = 24,
  TIM1_UP_TIM16_IRQn = 25,
  TIM1_TRG_COM_TIM17_IRQn = 26,
  TIM1_CC_IRQn = 27,
  TIM2_IRQn = 28,
  PKA_IRQn = 29,
  I2C1_EV_IRQn = 30,
  I2C1_ER_IRQn = 31,
  I2C3_EV_IRQn = 32,
  I2C3_ER_IRQn = 33,
  SPI1_IRQn = 34,
  SPI2_IRQn = 35,
  USART1_IRQn = 36,
  LPUART1_IRQn = 37,
  SAI1_IRQn = 38,
  TSC_IRQn = 39,
  EXTI15_10_IRQn = 40,
  RTC_Alarm_IRQn = 41,
  CRS_IRQn = 42,
  PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn = 43,
  IPCC_C1_RX_IRQn = 44,
  IPCC_C1_TX_IRQn = 45,
  HSEM_IRQn = 46,
  LPTIM1_IRQn = 47,
  LPTIM2_IRQn = 48,
  LCD_IRQn = 49,
  QUADSPI_IRQn = 50,
  AES1_IRQn = 51,
  AES2_IRQn = 52,
  RNG_IRQn = 53,
  FPU_IRQn = 54,
  DMA2_Channel1_IRQn = 55,
  DMA2_Channel2_IRQn = 56,
  DMA2_Channel3_IRQn = 57,
  DMA2_Channel4_IRQn = 58,
  DMA2_Channel5_IRQn = 59,
  DMA2_Channel6_IRQn = 60,
  DMA2_Channel7_IRQn = 61,
  DMAMUX1_OVR_IRQn = 62
} IRQn_Type;
#define __CORE_CM4_H_GENERIC 
#define __CMSIS_VERSION_H 
#define __CM_CMSIS_VERSION_MAIN ( 5U)
#define __CM_CMSIS_VERSION_SUB ( 3U)
#define __CM_CMSIS_VERSION ((__CM_CMSIS_VERSION_MAIN << 16U) | __CM_CMSIS_VERSION_SUB )
#define __CM4_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)
#define __CM4_CMSIS_VERSION_SUB (__CM_CMSIS_VERSION_SUB)
#define __CM4_CMSIS_VERSION ((__CM4_CMSIS_VERSION_MAIN << 16U) | __CM4_CMSIS_VERSION_SUB )
#define __CORTEX_M (4U)
#define __FPU_USED 1U
#define __CMSIS_COMPILER_H 
#define __CMSIS_GCC_H 
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#define __ASM __asm
#define __INLINE inline
#define __STATIC_INLINE static inline
#define __STATIC_FORCEINLINE __attribute__((always_inline)) static inline
#define __NO_RETURN __attribute__((__noreturn__))
#define __USED __attribute__((used))
#define __WEAK __attribute__((weak))
#define __PACKED __attribute__((packed, aligned(1)))
#define __PACKED_STRUCT struct __attribute__((packed, aligned(1)))
#define __PACKED_UNION union __attribute__((packed, aligned(1)))
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct T_UINT32 { uint32_t v; };
#pragma GCC diagnostic pop
#define __UNALIGNED_UINT32(x) (((struct T_UINT32 *)(x))->v)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct T_UINT16_WRITE { uint16_t v; };
#pragma GCC diagnostic pop
#define __UNALIGNED_UINT16_WRITE(addr,val) (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct T_UINT16_READ { uint16_t v; };
#pragma GCC diagnostic pop
#define __UNALIGNED_UINT16_READ(addr) (((const struct T_UINT16_READ *)(const void *)(addr))->v)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct T_UINT32_WRITE { uint32_t v; };
#pragma GCC diagnostic pop
#define __UNALIGNED_UINT32_WRITE(addr,val) (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct T_UINT32_READ { uint32_t v; };
#pragma GCC diagnostic pop
#define __UNALIGNED_UINT32_READ(addr) (((const struct T_UINT32_READ *)(const void *)(addr))->v)
#define __ALIGNED(x) __attribute__((aligned(x)))
#define __RESTRICT __restrict
#define __COMPILER_BARRIER() __ASM volatile("":::"memory")
 static inline void __cmsis_start(void)
{
  extern void _start(void) ;
  typedef struct {
    uint32_t const* src;
    uint32_t* dest;
    uint32_t wlen;
  } __copy_table_t;
  typedef struct {
    uint32_t* dest;
    uint32_t wlen;
  } __zero_table_t;
  extern const __copy_table_t __copy_table_start__;
  extern const __copy_table_t __copy_table_end__;
  extern const __zero_table_t __zero_table_start__;
  extern const __zero_table_t __zero_table_end__;
  for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable) {
    for(uint32_t i=0u; i<pTable->wlen; ++i) {
      pTable->dest[i] = pTable->src[i];
    }
  }
  for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable) {
    for(uint32_t i=0u; i<pTable->wlen; ++i) {
      pTable->dest[i] = 0u;
    }
  }
  _start();
}
#define __PROGRAM_START __cmsis_start
#define __INITIAL_SP __StackTop
#define __STACK_LIMIT __StackLimit
#define __VECTOR_TABLE __Vectors
#define __VECTOR_TABLE_ATTRIBUTE __attribute((used, section(".vectors")))
 static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}
 static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}
 static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;
  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}
 static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
}
 static inline uint32_t __get_IPSR(void)
{
  uint32_t result;
  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}
 static inline uint32_t __get_APSR(void)
{
  uint32_t result;
  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}
 static inline uint32_t __get_xPSR(void)
{
  uint32_t result;
  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}
 static inline uint32_t __get_PSP(void)
{
  uint32_t result;
  __asm volatile ("MRS %0, psp" : "=r" (result) );
  return(result);
}
 static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
}
 static inline uint32_t __get_MSP(void)
{
  uint32_t result;
  __asm volatile ("MRS %0, msp" : "=r" (result) );
  return(result);
}
 static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
}
 static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;
  __asm volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  return(result);
}
 static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
 static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}
 static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}
 static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;
  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}
 static inline void __set_BASEPRI(uint32_t basePri)
{
  __asm volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
}
 static inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
}
 static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;
  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}
 static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
 static inline uint32_t __get_FPSCR(void)
{
  return __builtin_arm_get_fpscr();
}
 static inline void __set_FPSCR(uint32_t fpscr)
{
  __builtin_arm_set_fpscr(fpscr);
}
#define __CMSIS_GCC_OUT_REG(r) "=r" (r)
#define __CMSIS_GCC_RW_REG(r) "+r" (r)
#define __CMSIS_GCC_USE_REG(r) "r" (r)
#define __NOP() __ASM volatile ("nop")
#define __WFI() __ASM volatile ("wfi")
#define __WFE() __ASM volatile ("wfe")
#define __SEV() __ASM volatile ("sev")
 static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}
 static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}
 static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}
 static inline uint32_t __REV(uint32_t value)
{
  return __builtin_bswap32(value);
}
 static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;
  __asm volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return result;
}
 static inline int16_t __REVSH(int16_t value)
{
  return (int16_t)__builtin_bswap16(value);
}
 static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
}
#define __BKPT(value) __ASM volatile ("bkpt "#value)
 static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;
   __asm volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  return result;
}
 static inline uint8_t __CLZ(uint32_t value)
{
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
}
 static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;
   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
   return ((uint8_t) result);
}
 static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;
   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
   return ((uint16_t) result);
}
 static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;
   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
 static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;
   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
 static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;
   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
 static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;
   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}
 static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
#define __SSAT(ARG1,ARG2) __extension__ ({ int32_t __RES, __ARG1 = (ARG1); __ASM ("ssat %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
#define __USAT(ARG1,ARG2) __extension__ ({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("usat %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
 static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;
  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
 static inline uint8_t __LDRBT(volatile uint8_t *ptr)
{
    uint32_t result;
   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return ((uint8_t) result);
}
 static inline uint16_t __LDRHT(volatile uint16_t *ptr)
{
    uint32_t result;
   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
   return ((uint16_t) result);
}
 static inline uint32_t __LDRT(volatile uint32_t *ptr)
{
    uint32_t result;
   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return(result);
}
 static inline void __STRBT(uint8_t value, volatile uint8_t *ptr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
 static inline void __STRHT(uint16_t value, volatile uint16_t *ptr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
 static inline void __STRT(uint32_t value, volatile uint32_t *ptr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
}
 static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;
  __asm volatile ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
#define __SSAT16(ARG1,ARG2) ({ int32_t __RES, __ARG1 = (ARG1); __ASM ("ssat16 %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
#define __USAT16(ARG1,ARG2) ({ uint32_t __RES, __ARG1 = (ARG1); __ASM ("usat16 %0, %1, %2" : "=r" (__RES) : "I" (ARG2), "r" (__ARG1) ); __RES; })
 static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;
  __asm volatile ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}
 static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;
  __asm volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}
 static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;
  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
 static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;
  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
 static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
  return(llr.w64);
}
 static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
  return(llr.w64);
}
 static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;
  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
 static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;
  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
 static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
  return(llr.w64);
}
 static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
  return(llr.w64);
}
 static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;
  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;
  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
 static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;
  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
#define __PKHBT(ARG1,ARG2,ARG3) ( ((((uint32_t)(ARG1)) ) & 0x0000FFFFUL) | ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL) )
#define __PKHTB(ARG1,ARG2,ARG3) ( ((((uint32_t)(ARG1)) ) & 0xFFFF0000UL) | ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL) )
 static inline int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;
 __asm volatile ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}
#pragma GCC diagnostic pop
#define __CORE_CM4_H_DEPENDANT 
#define __I volatile const
#define __O volatile
#define __IO volatile
#define __IM volatile const
#define __OM volatile
#define __IOM volatile
typedef union
{
  struct
  {
    uint32_t _reserved0:16;
    uint32_t GE:4;
    uint32_t _reserved1:7;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} APSR_Type;
#define APSR_N_Pos 31U
#define APSR_N_Msk (1UL << APSR_N_Pos)
#define APSR_Z_Pos 30U
#define APSR_Z_Msk (1UL << APSR_Z_Pos)
#define APSR_C_Pos 29U
#define APSR_C_Msk (1UL << APSR_C_Pos)
#define APSR_V_Pos 28U
#define APSR_V_Msk (1UL << APSR_V_Pos)
#define APSR_Q_Pos 27U
#define APSR_Q_Msk (1UL << APSR_Q_Pos)
#define APSR_GE_Pos 16U
#define APSR_GE_Msk (0xFUL << APSR_GE_Pos)
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:23;
  } b;
  uint32_t w;
} IPSR_Type;
#define IPSR_ISR_Pos 0U
#define IPSR_ISR_Msk (0x1FFUL )
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:1;
    uint32_t ICI_IT_1:6;
    uint32_t GE:4;
    uint32_t _reserved1:4;
    uint32_t T:1;
    uint32_t ICI_IT_2:2;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} xPSR_Type;
#define xPSR_N_Pos 31U
#define xPSR_N_Msk (1UL << xPSR_N_Pos)
#define xPSR_Z_Pos 30U
#define xPSR_Z_Msk (1UL << xPSR_Z_Pos)
#define xPSR_C_Pos 29U
#define xPSR_C_Msk (1UL << xPSR_C_Pos)
#define xPSR_V_Pos 28U
#define xPSR_V_Msk (1UL << xPSR_V_Pos)
#define xPSR_Q_Pos 27U
#define xPSR_Q_Msk (1UL << xPSR_Q_Pos)
#define xPSR_ICI_IT_2_Pos 25U
#define xPSR_ICI_IT_2_Msk (3UL << xPSR_ICI_IT_2_Pos)
#define xPSR_T_Pos 24U
#define xPSR_T_Msk (1UL << xPSR_T_Pos)
#define xPSR_GE_Pos 16U
#define xPSR_GE_Msk (0xFUL << xPSR_GE_Pos)
#define xPSR_ICI_IT_1_Pos 10U
#define xPSR_ICI_IT_1_Msk (0x3FUL << xPSR_ICI_IT_1_Pos)
#define xPSR_ISR_Pos 0U
#define xPSR_ISR_Msk (0x1FFUL )
typedef union
{
  struct
  {
    uint32_t nPRIV:1;
    uint32_t SPSEL:1;
    uint32_t FPCA:1;
    uint32_t _reserved0:29;
  } b;
  uint32_t w;
} CONTROL_Type;
#define CONTROL_FPCA_Pos 2U
#define CONTROL_FPCA_Msk (1UL << CONTROL_FPCA_Pos)
#define CONTROL_SPSEL_Pos 1U
#define CONTROL_SPSEL_Msk (1UL << CONTROL_SPSEL_Pos)
#define CONTROL_nPRIV_Pos 0U
#define CONTROL_nPRIV_Msk (1UL )
typedef struct
{
  volatile uint32_t ISER[8U];
        uint32_t RESERVED0[24U];
  volatile uint32_t ICER[8U];
        uint32_t RESERVED1[24U];
  volatile uint32_t ISPR[8U];
        uint32_t RESERVED2[24U];
  volatile uint32_t ICPR[8U];
        uint32_t RESERVED3[24U];
  volatile uint32_t IABR[8U];
        uint32_t RESERVED4[56U];
  volatile uint8_t IP[240U];
        uint32_t RESERVED5[644U];
  volatile uint32_t STIR;
} NVIC_Type;
#define NVIC_STIR_INTID_Pos 0U
#define NVIC_STIR_INTID_Msk (0x1FFUL )
typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHP[12U];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t PFR[2U];
  volatile const uint32_t DFR;
  volatile const uint32_t ADR;
  volatile const uint32_t MMFR[4U];
  volatile const uint32_t ISAR[5U];
        uint32_t RESERVED0[5U];
  volatile uint32_t CPACR;
} SCB_Type;
#define SCB_CPUID_IMPLEMENTER_Pos 24U
#define SCB_CPUID_IMPLEMENTER_Msk (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)
#define SCB_CPUID_VARIANT_Pos 20U
#define SCB_CPUID_VARIANT_Msk (0xFUL << SCB_CPUID_VARIANT_Pos)
#define SCB_CPUID_ARCHITECTURE_Pos 16U
#define SCB_CPUID_ARCHITECTURE_Msk (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)
#define SCB_CPUID_PARTNO_Pos 4U
#define SCB_CPUID_PARTNO_Msk (0xFFFUL << SCB_CPUID_PARTNO_Pos)
#define SCB_CPUID_REVISION_Pos 0U
#define SCB_CPUID_REVISION_Msk (0xFUL )
#define SCB_ICSR_NMIPENDSET_Pos 31U
#define SCB_ICSR_NMIPENDSET_Msk (1UL << SCB_ICSR_NMIPENDSET_Pos)
#define SCB_ICSR_PENDSVSET_Pos 28U
#define SCB_ICSR_PENDSVSET_Msk (1UL << SCB_ICSR_PENDSVSET_Pos)
#define SCB_ICSR_PENDSVCLR_Pos 27U
#define SCB_ICSR_PENDSVCLR_Msk (1UL << SCB_ICSR_PENDSVCLR_Pos)
#define SCB_ICSR_PENDSTSET_Pos 26U
#define SCB_ICSR_PENDSTSET_Msk (1UL << SCB_ICSR_PENDSTSET_Pos)
#define SCB_ICSR_PENDSTCLR_Pos 25U
#define SCB_ICSR_PENDSTCLR_Msk (1UL << SCB_ICSR_PENDSTCLR_Pos)
#define SCB_ICSR_ISRPREEMPT_Pos 23U
#define SCB_ICSR_ISRPREEMPT_Msk (1UL << SCB_ICSR_ISRPREEMPT_Pos)
#define SCB_ICSR_ISRPENDING_Pos 22U
#define SCB_ICSR_ISRPENDING_Msk (1UL << SCB_ICSR_ISRPENDING_Pos)
#define SCB_ICSR_VECTPENDING_Pos 12U
#define SCB_ICSR_VECTPENDING_Msk (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)
#define SCB_ICSR_RETTOBASE_Pos 11U
#define SCB_ICSR_RETTOBASE_Msk (1UL << SCB_ICSR_RETTOBASE_Pos)
#define SCB_ICSR_VECTACTIVE_Pos 0U
#define SCB_ICSR_VECTACTIVE_Msk (0x1FFUL )
#define SCB_VTOR_TBLOFF_Pos 7U
#define SCB_VTOR_TBLOFF_Msk (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)
#define SCB_AIRCR_VECTKEY_Pos 16U
#define SCB_AIRCR_VECTKEY_Msk (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)
#define SCB_AIRCR_VECTKEYSTAT_Pos 16U
#define SCB_AIRCR_VECTKEYSTAT_Msk (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)
#define SCB_AIRCR_ENDIANESS_Pos 15U
#define SCB_AIRCR_ENDIANESS_Msk (1UL << SCB_AIRCR_ENDIANESS_Pos)
#define SCB_AIRCR_PRIGROUP_Pos 8U
#define SCB_AIRCR_PRIGROUP_Msk (7UL << SCB_AIRCR_PRIGROUP_Pos)
#define SCB_AIRCR_SYSRESETREQ_Pos 2U
#define SCB_AIRCR_SYSRESETREQ_Msk (1UL << SCB_AIRCR_SYSRESETREQ_Pos)
#define SCB_AIRCR_VECTCLRACTIVE_Pos 1U
#define SCB_AIRCR_VECTCLRACTIVE_Msk (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)
#define SCB_AIRCR_VECTRESET_Pos 0U
#define SCB_AIRCR_VECTRESET_Msk (1UL )
#define SCB_SCR_SEVONPEND_Pos 4U
#define SCB_SCR_SEVONPEND_Msk (1UL << SCB_SCR_SEVONPEND_Pos)
#define SCB_SCR_SLEEPDEEP_Pos 2U
#define SCB_SCR_SLEEPDEEP_Msk (1UL << SCB_SCR_SLEEPDEEP_Pos)
#define SCB_SCR_SLEEPONEXIT_Pos 1U
#define SCB_SCR_SLEEPONEXIT_Msk (1UL << SCB_SCR_SLEEPONEXIT_Pos)
#define SCB_CCR_STKALIGN_Pos 9U
#define SCB_CCR_STKALIGN_Msk (1UL << SCB_CCR_STKALIGN_Pos)
#define SCB_CCR_BFHFNMIGN_Pos 8U
#define SCB_CCR_BFHFNMIGN_Msk (1UL << SCB_CCR_BFHFNMIGN_Pos)
#define SCB_CCR_DIV_0_TRP_Pos 4U
#define SCB_CCR_DIV_0_TRP_Msk (1UL << SCB_CCR_DIV_0_TRP_Pos)
#define SCB_CCR_UNALIGN_TRP_Pos 3U
#define SCB_CCR_UNALIGN_TRP_Msk (1UL << SCB_CCR_UNALIGN_TRP_Pos)
#define SCB_CCR_USERSETMPEND_Pos 1U
#define SCB_CCR_USERSETMPEND_Msk (1UL << SCB_CCR_USERSETMPEND_Pos)
#define SCB_CCR_NONBASETHRDENA_Pos 0U
#define SCB_CCR_NONBASETHRDENA_Msk (1UL )
#define SCB_SHCSR_USGFAULTENA_Pos 18U
#define SCB_SHCSR_USGFAULTENA_Msk (1UL << SCB_SHCSR_USGFAULTENA_Pos)
#define SCB_SHCSR_BUSFAULTENA_Pos 17U
#define SCB_SHCSR_BUSFAULTENA_Msk (1UL << SCB_SHCSR_BUSFAULTENA_Pos)
#define SCB_SHCSR_MEMFAULTENA_Pos 16U
#define SCB_SHCSR_MEMFAULTENA_Msk (1UL << SCB_SHCSR_MEMFAULTENA_Pos)
#define SCB_SHCSR_SVCALLPENDED_Pos 15U
#define SCB_SHCSR_SVCALLPENDED_Msk (1UL << SCB_SHCSR_SVCALLPENDED_Pos)
#define SCB_SHCSR_BUSFAULTPENDED_Pos 14U
#define SCB_SHCSR_BUSFAULTPENDED_Msk (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)
#define SCB_SHCSR_MEMFAULTPENDED_Pos 13U
#define SCB_SHCSR_MEMFAULTPENDED_Msk (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)
#define SCB_SHCSR_USGFAULTPENDED_Pos 12U
#define SCB_SHCSR_USGFAULTPENDED_Msk (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)
#define SCB_SHCSR_SYSTICKACT_Pos 11U
#define SCB_SHCSR_SYSTICKACT_Msk (1UL << SCB_SHCSR_SYSTICKACT_Pos)
#define SCB_SHCSR_PENDSVACT_Pos 10U
#define SCB_SHCSR_PENDSVACT_Msk (1UL << SCB_SHCSR_PENDSVACT_Pos)
#define SCB_SHCSR_MONITORACT_Pos 8U
#define SCB_SHCSR_MONITORACT_Msk (1UL << SCB_SHCSR_MONITORACT_Pos)
#define SCB_SHCSR_SVCALLACT_Pos 7U
#define SCB_SHCSR_SVCALLACT_Msk (1UL << SCB_SHCSR_SVCALLACT_Pos)
#define SCB_SHCSR_USGFAULTACT_Pos 3U
#define SCB_SHCSR_USGFAULTACT_Msk (1UL << SCB_SHCSR_USGFAULTACT_Pos)
#define SCB_SHCSR_BUSFAULTACT_Pos 1U
#define SCB_SHCSR_BUSFAULTACT_Msk (1UL << SCB_SHCSR_BUSFAULTACT_Pos)
#define SCB_SHCSR_MEMFAULTACT_Pos 0U
#define SCB_SHCSR_MEMFAULTACT_Msk (1UL )
#define SCB_CFSR_USGFAULTSR_Pos 16U
#define SCB_CFSR_USGFAULTSR_Msk (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)
#define SCB_CFSR_BUSFAULTSR_Pos 8U
#define SCB_CFSR_BUSFAULTSR_Msk (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)
#define SCB_CFSR_MEMFAULTSR_Pos 0U
#define SCB_CFSR_MEMFAULTSR_Msk (0xFFUL )
#define SCB_CFSR_MMARVALID_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 7U)
#define SCB_CFSR_MMARVALID_Msk (1UL << SCB_CFSR_MMARVALID_Pos)
#define SCB_CFSR_MLSPERR_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 5U)
#define SCB_CFSR_MLSPERR_Msk (1UL << SCB_CFSR_MLSPERR_Pos)
#define SCB_CFSR_MSTKERR_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 4U)
#define SCB_CFSR_MSTKERR_Msk (1UL << SCB_CFSR_MSTKERR_Pos)
#define SCB_CFSR_MUNSTKERR_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 3U)
#define SCB_CFSR_MUNSTKERR_Msk (1UL << SCB_CFSR_MUNSTKERR_Pos)
#define SCB_CFSR_DACCVIOL_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 1U)
#define SCB_CFSR_DACCVIOL_Msk (1UL << SCB_CFSR_DACCVIOL_Pos)
#define SCB_CFSR_IACCVIOL_Pos (SCB_SHCSR_MEMFAULTACT_Pos + 0U)
#define SCB_CFSR_IACCVIOL_Msk (1UL )
#define SCB_CFSR_BFARVALID_Pos (SCB_CFSR_BUSFAULTSR_Pos + 7U)
#define SCB_CFSR_BFARVALID_Msk (1UL << SCB_CFSR_BFARVALID_Pos)
#define SCB_CFSR_LSPERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 5U)
#define SCB_CFSR_LSPERR_Msk (1UL << SCB_CFSR_LSPERR_Pos)
#define SCB_CFSR_STKERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 4U)
#define SCB_CFSR_STKERR_Msk (1UL << SCB_CFSR_STKERR_Pos)
#define SCB_CFSR_UNSTKERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 3U)
#define SCB_CFSR_UNSTKERR_Msk (1UL << SCB_CFSR_UNSTKERR_Pos)
#define SCB_CFSR_IMPRECISERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 2U)
#define SCB_CFSR_IMPRECISERR_Msk (1UL << SCB_CFSR_IMPRECISERR_Pos)
#define SCB_CFSR_PRECISERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 1U)
#define SCB_CFSR_PRECISERR_Msk (1UL << SCB_CFSR_PRECISERR_Pos)
#define SCB_CFSR_IBUSERR_Pos (SCB_CFSR_BUSFAULTSR_Pos + 0U)
#define SCB_CFSR_IBUSERR_Msk (1UL << SCB_CFSR_IBUSERR_Pos)
#define SCB_CFSR_DIVBYZERO_Pos (SCB_CFSR_USGFAULTSR_Pos + 9U)
#define SCB_CFSR_DIVBYZERO_Msk (1UL << SCB_CFSR_DIVBYZERO_Pos)
#define SCB_CFSR_UNALIGNED_Pos (SCB_CFSR_USGFAULTSR_Pos + 8U)
#define SCB_CFSR_UNALIGNED_Msk (1UL << SCB_CFSR_UNALIGNED_Pos)
#define SCB_CFSR_NOCP_Pos (SCB_CFSR_USGFAULTSR_Pos + 3U)
#define SCB_CFSR_NOCP_Msk (1UL << SCB_CFSR_NOCP_Pos)
#define SCB_CFSR_INVPC_Pos (SCB_CFSR_USGFAULTSR_Pos + 2U)
#define SCB_CFSR_INVPC_Msk (1UL << SCB_CFSR_INVPC_Pos)
#define SCB_CFSR_INVSTATE_Pos (SCB_CFSR_USGFAULTSR_Pos + 1U)
#define SCB_CFSR_INVSTATE_Msk (1UL << SCB_CFSR_INVSTATE_Pos)
#define SCB_CFSR_UNDEFINSTR_Pos (SCB_CFSR_USGFAULTSR_Pos + 0U)
#define SCB_CFSR_UNDEFINSTR_Msk (1UL << SCB_CFSR_UNDEFINSTR_Pos)
#define SCB_HFSR_DEBUGEVT_Pos 31U
#define SCB_HFSR_DEBUGEVT_Msk (1UL << SCB_HFSR_DEBUGEVT_Pos)
#define SCB_HFSR_FORCED_Pos 30U
#define SCB_HFSR_FORCED_Msk (1UL << SCB_HFSR_FORCED_Pos)
#define SCB_HFSR_VECTTBL_Pos 1U
#define SCB_HFSR_VECTTBL_Msk (1UL << SCB_HFSR_VECTTBL_Pos)
#define SCB_DFSR_EXTERNAL_Pos 4U
#define SCB_DFSR_EXTERNAL_Msk (1UL << SCB_DFSR_EXTERNAL_Pos)
#define SCB_DFSR_VCATCH_Pos 3U
#define SCB_DFSR_VCATCH_Msk (1UL << SCB_DFSR_VCATCH_Pos)
#define SCB_DFSR_DWTTRAP_Pos 2U
#define SCB_DFSR_DWTTRAP_Msk (1UL << SCB_DFSR_DWTTRAP_Pos)
#define SCB_DFSR_BKPT_Pos 1U
#define SCB_DFSR_BKPT_Msk (1UL << SCB_DFSR_BKPT_Pos)
#define SCB_DFSR_HALTED_Pos 0U
#define SCB_DFSR_HALTED_Msk (1UL )
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const uint32_t ICTR;
  volatile uint32_t ACTLR;
} SCnSCB_Type;
#define SCnSCB_ICTR_INTLINESNUM_Pos 0U
#define SCnSCB_ICTR_INTLINESNUM_Msk (0xFUL )
#define SCnSCB_ACTLR_DISOOFP_Pos 9U
#define SCnSCB_ACTLR_DISOOFP_Msk (1UL << SCnSCB_ACTLR_DISOOFP_Pos)
#define SCnSCB_ACTLR_DISFPCA_Pos 8U
#define SCnSCB_ACTLR_DISFPCA_Msk (1UL << SCnSCB_ACTLR_DISFPCA_Pos)
#define SCnSCB_ACTLR_DISFOLD_Pos 2U
#define SCnSCB_ACTLR_DISFOLD_Msk (1UL << SCnSCB_ACTLR_DISFOLD_Pos)
#define SCnSCB_ACTLR_DISDEFWBUF_Pos 1U
#define SCnSCB_ACTLR_DISDEFWBUF_Msk (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)
#define SCnSCB_ACTLR_DISMCYCINT_Pos 0U
#define SCnSCB_ACTLR_DISMCYCINT_Msk (1UL )
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;
#define SysTick_CTRL_COUNTFLAG_Pos 16U
#define SysTick_CTRL_COUNTFLAG_Msk (1UL << SysTick_CTRL_COUNTFLAG_Pos)
#define SysTick_CTRL_CLKSOURCE_Pos 2U
#define SysTick_CTRL_CLKSOURCE_Msk (1UL << SysTick_CTRL_CLKSOURCE_Pos)
#define SysTick_CTRL_TICKINT_Pos 1U
#define SysTick_CTRL_TICKINT_Msk (1UL << SysTick_CTRL_TICKINT_Pos)
#define SysTick_CTRL_ENABLE_Pos 0U
#define SysTick_CTRL_ENABLE_Msk (1UL )
#define SysTick_LOAD_RELOAD_Pos 0U
#define SysTick_LOAD_RELOAD_Msk (0xFFFFFFUL )
#define SysTick_VAL_CURRENT_Pos 0U
#define SysTick_VAL_CURRENT_Msk (0xFFFFFFUL )
#define SysTick_CALIB_NOREF_Pos 31U
#define SysTick_CALIB_NOREF_Msk (1UL << SysTick_CALIB_NOREF_Pos)
#define SysTick_CALIB_SKEW_Pos 30U
#define SysTick_CALIB_SKEW_Msk (1UL << SysTick_CALIB_SKEW_Pos)
#define SysTick_CALIB_TENMS_Pos 0U
#define SysTick_CALIB_TENMS_Msk (0xFFFFFFUL )
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32U];
        uint32_t RESERVED0[864U];
  volatile uint32_t TER;
        uint32_t RESERVED1[15U];
  volatile uint32_t TPR;
        uint32_t RESERVED2[15U];
  volatile uint32_t TCR;
        uint32_t RESERVED3[32U];
        uint32_t RESERVED4[43U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
        uint32_t RESERVED5[6U];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;
#define ITM_TPR_PRIVMASK_Pos 0U
#define ITM_TPR_PRIVMASK_Msk (0xFFFFFFFFUL )
#define ITM_TCR_BUSY_Pos 23U
#define ITM_TCR_BUSY_Msk (1UL << ITM_TCR_BUSY_Pos)
#define ITM_TCR_TraceBusID_Pos 16U
#define ITM_TCR_TraceBusID_Msk (0x7FUL << ITM_TCR_TraceBusID_Pos)
#define ITM_TCR_GTSFREQ_Pos 10U
#define ITM_TCR_GTSFREQ_Msk (3UL << ITM_TCR_GTSFREQ_Pos)
#define ITM_TCR_TSPrescale_Pos 8U
#define ITM_TCR_TSPrescale_Msk (3UL << ITM_TCR_TSPrescale_Pos)
#define ITM_TCR_SWOENA_Pos 4U
#define ITM_TCR_SWOENA_Msk (1UL << ITM_TCR_SWOENA_Pos)
#define ITM_TCR_DWTENA_Pos 3U
#define ITM_TCR_DWTENA_Msk (1UL << ITM_TCR_DWTENA_Pos)
#define ITM_TCR_SYNCENA_Pos 2U
#define ITM_TCR_SYNCENA_Msk (1UL << ITM_TCR_SYNCENA_Pos)
#define ITM_TCR_TSENA_Pos 1U
#define ITM_TCR_TSENA_Msk (1UL << ITM_TCR_TSENA_Pos)
#define ITM_TCR_ITMENA_Pos 0U
#define ITM_TCR_ITMENA_Msk (1UL )
#define ITM_LSR_ByteAcc_Pos 2U
#define ITM_LSR_ByteAcc_Msk (1UL << ITM_LSR_ByteAcc_Pos)
#define ITM_LSR_Access_Pos 1U
#define ITM_LSR_Access_Msk (1UL << ITM_LSR_Access_Pos)
#define ITM_LSR_Present_Pos 0U
#define ITM_LSR_Present_Msk (1UL )
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t CYCCNT;
  volatile uint32_t CPICNT;
  volatile uint32_t EXCCNT;
  volatile uint32_t SLEEPCNT;
  volatile uint32_t LSUCNT;
  volatile uint32_t FOLDCNT;
  volatile const uint32_t PCSR;
  volatile uint32_t COMP0;
  volatile uint32_t MASK0;
  volatile uint32_t FUNCTION0;
        uint32_t RESERVED0[1U];
  volatile uint32_t COMP1;
  volatile uint32_t MASK1;
  volatile uint32_t FUNCTION1;
        uint32_t RESERVED1[1U];
  volatile uint32_t COMP2;
  volatile uint32_t MASK2;
  volatile uint32_t FUNCTION2;
        uint32_t RESERVED2[1U];
  volatile uint32_t COMP3;
  volatile uint32_t MASK3;
  volatile uint32_t FUNCTION3;
} DWT_Type;
#define DWT_CTRL_NUMCOMP_Pos 28U
#define DWT_CTRL_NUMCOMP_Msk (0xFUL << DWT_CTRL_NUMCOMP_Pos)
#define DWT_CTRL_NOTRCPKT_Pos 27U
#define DWT_CTRL_NOTRCPKT_Msk (0x1UL << DWT_CTRL_NOTRCPKT_Pos)
#define DWT_CTRL_NOEXTTRIG_Pos 26U
#define DWT_CTRL_NOEXTTRIG_Msk (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)
#define DWT_CTRL_NOCYCCNT_Pos 25U
#define DWT_CTRL_NOCYCCNT_Msk (0x1UL << DWT_CTRL_NOCYCCNT_Pos)
#define DWT_CTRL_NOPRFCNT_Pos 24U
#define DWT_CTRL_NOPRFCNT_Msk (0x1UL << DWT_CTRL_NOPRFCNT_Pos)
#define DWT_CTRL_CYCEVTENA_Pos 22U
#define DWT_CTRL_CYCEVTENA_Msk (0x1UL << DWT_CTRL_CYCEVTENA_Pos)
#define DWT_CTRL_FOLDEVTENA_Pos 21U
#define DWT_CTRL_FOLDEVTENA_Msk (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)
#define DWT_CTRL_LSUEVTENA_Pos 20U
#define DWT_CTRL_LSUEVTENA_Msk (0x1UL << DWT_CTRL_LSUEVTENA_Pos)
#define DWT_CTRL_SLEEPEVTENA_Pos 19U
#define DWT_CTRL_SLEEPEVTENA_Msk (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)
#define DWT_CTRL_EXCEVTENA_Pos 18U
#define DWT_CTRL_EXCEVTENA_Msk (0x1UL << DWT_CTRL_EXCEVTENA_Pos)
#define DWT_CTRL_CPIEVTENA_Pos 17U
#define DWT_CTRL_CPIEVTENA_Msk (0x1UL << DWT_CTRL_CPIEVTENA_Pos)
#define DWT_CTRL_EXCTRCENA_Pos 16U
#define DWT_CTRL_EXCTRCENA_Msk (0x1UL << DWT_CTRL_EXCTRCENA_Pos)
#define DWT_CTRL_PCSAMPLENA_Pos 12U
#define DWT_CTRL_PCSAMPLENA_Msk (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)
#define DWT_CTRL_SYNCTAP_Pos 10U
#define DWT_CTRL_SYNCTAP_Msk (0x3UL << DWT_CTRL_SYNCTAP_Pos)
#define DWT_CTRL_CYCTAP_Pos 9U
#define DWT_CTRL_CYCTAP_Msk (0x1UL << DWT_CTRL_CYCTAP_Pos)
#define DWT_CTRL_POSTINIT_Pos 5U
#define DWT_CTRL_POSTINIT_Msk (0xFUL << DWT_CTRL_POSTINIT_Pos)
#define DWT_CTRL_POSTPRESET_Pos 1U
#define DWT_CTRL_POSTPRESET_Msk (0xFUL << DWT_CTRL_POSTPRESET_Pos)
#define DWT_CTRL_CYCCNTENA_Pos 0U
#define DWT_CTRL_CYCCNTENA_Msk (0x1UL )
#define DWT_CPICNT_CPICNT_Pos 0U
#define DWT_CPICNT_CPICNT_Msk (0xFFUL )
#define DWT_EXCCNT_EXCCNT_Pos 0U
#define DWT_EXCCNT_EXCCNT_Msk (0xFFUL )
#define DWT_SLEEPCNT_SLEEPCNT_Pos 0U
#define DWT_SLEEPCNT_SLEEPCNT_Msk (0xFFUL )
#define DWT_LSUCNT_LSUCNT_Pos 0U
#define DWT_LSUCNT_LSUCNT_Msk (0xFFUL )
#define DWT_FOLDCNT_FOLDCNT_Pos 0U
#define DWT_FOLDCNT_FOLDCNT_Msk (0xFFUL )
#define DWT_MASK_MASK_Pos 0U
#define DWT_MASK_MASK_Msk (0x1FUL )
#define DWT_FUNCTION_MATCHED_Pos 24U
#define DWT_FUNCTION_MATCHED_Msk (0x1UL << DWT_FUNCTION_MATCHED_Pos)
#define DWT_FUNCTION_DATAVADDR1_Pos 16U
#define DWT_FUNCTION_DATAVADDR1_Msk (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)
#define DWT_FUNCTION_DATAVADDR0_Pos 12U
#define DWT_FUNCTION_DATAVADDR0_Msk (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)
#define DWT_FUNCTION_DATAVSIZE_Pos 10U
#define DWT_FUNCTION_DATAVSIZE_Msk (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)
#define DWT_FUNCTION_LNK1ENA_Pos 9U
#define DWT_FUNCTION_LNK1ENA_Msk (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)
#define DWT_FUNCTION_DATAVMATCH_Pos 8U
#define DWT_FUNCTION_DATAVMATCH_Msk (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)
#define DWT_FUNCTION_CYCMATCH_Pos 7U
#define DWT_FUNCTION_CYCMATCH_Msk (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)
#define DWT_FUNCTION_EMITRANGE_Pos 5U
#define DWT_FUNCTION_EMITRANGE_Msk (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)
#define DWT_FUNCTION_FUNCTION_Pos 0U
#define DWT_FUNCTION_FUNCTION_Msk (0xFUL )
typedef struct
{
  volatile const uint32_t SSPSR;
  volatile uint32_t CSPSR;
        uint32_t RESERVED0[2U];
  volatile uint32_t ACPR;
        uint32_t RESERVED1[55U];
  volatile uint32_t SPPR;
        uint32_t RESERVED2[131U];
  volatile const uint32_t FFSR;
  volatile uint32_t FFCR;
  volatile const uint32_t FSCR;
        uint32_t RESERVED3[759U];
  volatile const uint32_t TRIGGER;
  volatile const uint32_t FIFO0;
  volatile const uint32_t ITATBCTR2;
        uint32_t RESERVED4[1U];
  volatile const uint32_t ITATBCTR0;
  volatile const uint32_t FIFO1;
  volatile uint32_t ITCTRL;
        uint32_t RESERVED5[39U];
  volatile uint32_t CLAIMSET;
  volatile uint32_t CLAIMCLR;
        uint32_t RESERVED7[8U];
  volatile const uint32_t DEVID;
  volatile const uint32_t DEVTYPE;
} TPI_Type;
#define TPI_ACPR_PRESCALER_Pos 0U
#define TPI_ACPR_PRESCALER_Msk (0x1FFFUL )
#define TPI_SPPR_TXMODE_Pos 0U
#define TPI_SPPR_TXMODE_Msk (0x3UL )
#define TPI_FFSR_FtNonStop_Pos 3U
#define TPI_FFSR_FtNonStop_Msk (0x1UL << TPI_FFSR_FtNonStop_Pos)
#define TPI_FFSR_TCPresent_Pos 2U
#define TPI_FFSR_TCPresent_Msk (0x1UL << TPI_FFSR_TCPresent_Pos)
#define TPI_FFSR_FtStopped_Pos 1U
#define TPI_FFSR_FtStopped_Msk (0x1UL << TPI_FFSR_FtStopped_Pos)
#define TPI_FFSR_FlInProg_Pos 0U
#define TPI_FFSR_FlInProg_Msk (0x1UL )
#define TPI_FFCR_TrigIn_Pos 8U
#define TPI_FFCR_TrigIn_Msk (0x1UL << TPI_FFCR_TrigIn_Pos)
#define TPI_FFCR_EnFCont_Pos 1U
#define TPI_FFCR_EnFCont_Msk (0x1UL << TPI_FFCR_EnFCont_Pos)
#define TPI_TRIGGER_TRIGGER_Pos 0U
#define TPI_TRIGGER_TRIGGER_Msk (0x1UL )
#define TPI_FIFO0_ITM_ATVALID_Pos 29U
#define TPI_FIFO0_ITM_ATVALID_Msk (0x1UL << TPI_FIFO0_ITM_ATVALID_Pos)
#define TPI_FIFO0_ITM_bytecount_Pos 27U
#define TPI_FIFO0_ITM_bytecount_Msk (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)
#define TPI_FIFO0_ETM_ATVALID_Pos 26U
#define TPI_FIFO0_ETM_ATVALID_Msk (0x1UL << TPI_FIFO0_ETM_ATVALID_Pos)
#define TPI_FIFO0_ETM_bytecount_Pos 24U
#define TPI_FIFO0_ETM_bytecount_Msk (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)
#define TPI_FIFO0_ETM2_Pos 16U
#define TPI_FIFO0_ETM2_Msk (0xFFUL << TPI_FIFO0_ETM2_Pos)
#define TPI_FIFO0_ETM1_Pos 8U
#define TPI_FIFO0_ETM1_Msk (0xFFUL << TPI_FIFO0_ETM1_Pos)
#define TPI_FIFO0_ETM0_Pos 0U
#define TPI_FIFO0_ETM0_Msk (0xFFUL )
#define TPI_ITATBCTR2_ATREADY2_Pos 0U
#define TPI_ITATBCTR2_ATREADY2_Msk (0x1UL )
#define TPI_ITATBCTR2_ATREADY1_Pos 0U
#define TPI_ITATBCTR2_ATREADY1_Msk (0x1UL )
#define TPI_FIFO1_ITM_ATVALID_Pos 29U
#define TPI_FIFO1_ITM_ATVALID_Msk (0x1UL << TPI_FIFO1_ITM_ATVALID_Pos)
#define TPI_FIFO1_ITM_bytecount_Pos 27U
#define TPI_FIFO1_ITM_bytecount_Msk (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)
#define TPI_FIFO1_ETM_ATVALID_Pos 26U
#define TPI_FIFO1_ETM_ATVALID_Msk (0x1UL << TPI_FIFO1_ETM_ATVALID_Pos)
#define TPI_FIFO1_ETM_bytecount_Pos 24U
#define TPI_FIFO1_ETM_bytecount_Msk (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)
#define TPI_FIFO1_ITM2_Pos 16U
#define TPI_FIFO1_ITM2_Msk (0xFFUL << TPI_FIFO1_ITM2_Pos)
#define TPI_FIFO1_ITM1_Pos 8U
#define TPI_FIFO1_ITM1_Msk (0xFFUL << TPI_FIFO1_ITM1_Pos)
#define TPI_FIFO1_ITM0_Pos 0U
#define TPI_FIFO1_ITM0_Msk (0xFFUL )
#define TPI_ITATBCTR0_ATREADY2_Pos 0U
#define TPI_ITATBCTR0_ATREADY2_Msk (0x1UL )
#define TPI_ITATBCTR0_ATREADY1_Pos 0U
#define TPI_ITATBCTR0_ATREADY1_Msk (0x1UL )
#define TPI_ITCTRL_Mode_Pos 0U
#define TPI_ITCTRL_Mode_Msk (0x3UL )
#define TPI_DEVID_NRZVALID_Pos 11U
#define TPI_DEVID_NRZVALID_Msk (0x1UL << TPI_DEVID_NRZVALID_Pos)
#define TPI_DEVID_MANCVALID_Pos 10U
#define TPI_DEVID_MANCVALID_Msk (0x1UL << TPI_DEVID_MANCVALID_Pos)
#define TPI_DEVID_PTINVALID_Pos 9U
#define TPI_DEVID_PTINVALID_Msk (0x1UL << TPI_DEVID_PTINVALID_Pos)
#define TPI_DEVID_MinBufSz_Pos 6U
#define TPI_DEVID_MinBufSz_Msk (0x7UL << TPI_DEVID_MinBufSz_Pos)
#define TPI_DEVID_AsynClkIn_Pos 5U
#define TPI_DEVID_AsynClkIn_Msk (0x1UL << TPI_DEVID_AsynClkIn_Pos)
#define TPI_DEVID_NrTraceInput_Pos 0U
#define TPI_DEVID_NrTraceInput_Msk (0x1FUL )
#define TPI_DEVTYPE_SubType_Pos 4U
#define TPI_DEVTYPE_SubType_Msk (0xFUL )
#define TPI_DEVTYPE_MajorType_Pos 0U
#define TPI_DEVTYPE_MajorType_Msk (0xFUL << TPI_DEVTYPE_MajorType_Pos)
typedef struct
{
  volatile const uint32_t TYPE;
  volatile uint32_t CTRL;
  volatile uint32_t RNR;
  volatile uint32_t RBAR;
  volatile uint32_t RASR;
  volatile uint32_t RBAR_A1;
  volatile uint32_t RASR_A1;
  volatile uint32_t RBAR_A2;
  volatile uint32_t RASR_A2;
  volatile uint32_t RBAR_A3;
  volatile uint32_t RASR_A3;
} MPU_Type;
#define MPU_TYPE_RALIASES 4U
#define MPU_TYPE_IREGION_Pos 16U
#define MPU_TYPE_IREGION_Msk (0xFFUL << MPU_TYPE_IREGION_Pos)
#define MPU_TYPE_DREGION_Pos 8U
#define MPU_TYPE_DREGION_Msk (0xFFUL << MPU_TYPE_DREGION_Pos)
#define MPU_TYPE_SEPARATE_Pos 0U
#define MPU_TYPE_SEPARATE_Msk (1UL )
#define MPU_CTRL_PRIVDEFENA_Pos 2U
#define MPU_CTRL_PRIVDEFENA_Msk (1UL << MPU_CTRL_PRIVDEFENA_Pos)
#define MPU_CTRL_HFNMIENA_Pos 1U
#define MPU_CTRL_HFNMIENA_Msk (1UL << MPU_CTRL_HFNMIENA_Pos)
#define MPU_CTRL_ENABLE_Pos 0U
#define MPU_CTRL_ENABLE_Msk (1UL )
#define MPU_RNR_REGION_Pos 0U
#define MPU_RNR_REGION_Msk (0xFFUL )
#define MPU_RBAR_ADDR_Pos 5U
#define MPU_RBAR_ADDR_Msk (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)
#define MPU_RBAR_VALID_Pos 4U
#define MPU_RBAR_VALID_Msk (1UL << MPU_RBAR_VALID_Pos)
#define MPU_RBAR_REGION_Pos 0U
#define MPU_RBAR_REGION_Msk (0xFUL )
#define MPU_RASR_ATTRS_Pos 16U
#define MPU_RASR_ATTRS_Msk (0xFFFFUL << MPU_RASR_ATTRS_Pos)
#define MPU_RASR_XN_Pos 28U
#define MPU_RASR_XN_Msk (1UL << MPU_RASR_XN_Pos)
#define MPU_RASR_AP_Pos 24U
#define MPU_RASR_AP_Msk (0x7UL << MPU_RASR_AP_Pos)
#define MPU_RASR_TEX_Pos 19U
#define MPU_RASR_TEX_Msk (0x7UL << MPU_RASR_TEX_Pos)
#define MPU_RASR_S_Pos 18U
#define MPU_RASR_S_Msk (1UL << MPU_RASR_S_Pos)
#define MPU_RASR_C_Pos 17U
#define MPU_RASR_C_Msk (1UL << MPU_RASR_C_Pos)
#define MPU_RASR_B_Pos 16U
#define MPU_RASR_B_Msk (1UL << MPU_RASR_B_Pos)
#define MPU_RASR_SRD_Pos 8U
#define MPU_RASR_SRD_Msk (0xFFUL << MPU_RASR_SRD_Pos)
#define MPU_RASR_SIZE_Pos 1U
#define MPU_RASR_SIZE_Msk (0x1FUL << MPU_RASR_SIZE_Pos)
#define MPU_RASR_ENABLE_Pos 0U
#define MPU_RASR_ENABLE_Msk (1UL )
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
} FPU_Type;
#define FPU_FPCCR_ASPEN_Pos 31U
#define FPU_FPCCR_ASPEN_Msk (1UL << FPU_FPCCR_ASPEN_Pos)
#define FPU_FPCCR_LSPEN_Pos 30U
#define FPU_FPCCR_LSPEN_Msk (1UL << FPU_FPCCR_LSPEN_Pos)
#define FPU_FPCCR_MONRDY_Pos 8U
#define FPU_FPCCR_MONRDY_Msk (1UL << FPU_FPCCR_MONRDY_Pos)
#define FPU_FPCCR_BFRDY_Pos 6U
#define FPU_FPCCR_BFRDY_Msk (1UL << FPU_FPCCR_BFRDY_Pos)
#define FPU_FPCCR_MMRDY_Pos 5U
#define FPU_FPCCR_MMRDY_Msk (1UL << FPU_FPCCR_MMRDY_Pos)
#define FPU_FPCCR_HFRDY_Pos 4U
#define FPU_FPCCR_HFRDY_Msk (1UL << FPU_FPCCR_HFRDY_Pos)
#define FPU_FPCCR_THREAD_Pos 3U
#define FPU_FPCCR_THREAD_Msk (1UL << FPU_FPCCR_THREAD_Pos)
#define FPU_FPCCR_USER_Pos 1U
#define FPU_FPCCR_USER_Msk (1UL << FPU_FPCCR_USER_Pos)
#define FPU_FPCCR_LSPACT_Pos 0U
#define FPU_FPCCR_LSPACT_Msk (1UL )
#define FPU_FPCAR_ADDRESS_Pos 3U
#define FPU_FPCAR_ADDRESS_Msk (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)
#define FPU_FPDSCR_AHP_Pos 26U
#define FPU_FPDSCR_AHP_Msk (1UL << FPU_FPDSCR_AHP_Pos)
#define FPU_FPDSCR_DN_Pos 25U
#define FPU_FPDSCR_DN_Msk (1UL << FPU_FPDSCR_DN_Pos)
#define FPU_FPDSCR_FZ_Pos 24U
#define FPU_FPDSCR_FZ_Msk (1UL << FPU_FPDSCR_FZ_Pos)
#define FPU_FPDSCR_RMode_Pos 22U
#define FPU_FPDSCR_RMode_Msk (3UL << FPU_FPDSCR_RMode_Pos)
#define FPU_MVFR0_FP_rounding_modes_Pos 28U
#define FPU_MVFR0_FP_rounding_modes_Msk (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)
#define FPU_MVFR0_Short_vectors_Pos 24U
#define FPU_MVFR0_Short_vectors_Msk (0xFUL << FPU_MVFR0_Short_vectors_Pos)
#define FPU_MVFR0_Square_root_Pos 20U
#define FPU_MVFR0_Square_root_Msk (0xFUL << FPU_MVFR0_Square_root_Pos)
#define FPU_MVFR0_Divide_Pos 16U
#define FPU_MVFR0_Divide_Msk (0xFUL << FPU_MVFR0_Divide_Pos)
#define FPU_MVFR0_FP_excep_trapping_Pos 12U
#define FPU_MVFR0_FP_excep_trapping_Msk (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)
#define FPU_MVFR0_Double_precision_Pos 8U
#define FPU_MVFR0_Double_precision_Msk (0xFUL << FPU_MVFR0_Double_precision_Pos)
#define FPU_MVFR0_Single_precision_Pos 4U
#define FPU_MVFR0_Single_precision_Msk (0xFUL << FPU_MVFR0_Single_precision_Pos)
#define FPU_MVFR0_A_SIMD_registers_Pos 0U
#define FPU_MVFR0_A_SIMD_registers_Msk (0xFUL )
#define FPU_MVFR1_FP_fused_MAC_Pos 28U
#define FPU_MVFR1_FP_fused_MAC_Msk (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)
#define FPU_MVFR1_FP_HPFP_Pos 24U
#define FPU_MVFR1_FP_HPFP_Msk (0xFUL << FPU_MVFR1_FP_HPFP_Pos)
#define FPU_MVFR1_D_NaN_mode_Pos 4U
#define FPU_MVFR1_D_NaN_mode_Msk (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)
#define FPU_MVFR1_FtZ_mode_Pos 0U
#define FPU_MVFR1_FtZ_mode_Msk (0xFUL )
#define FPU_MVFR2_VFP_Misc_Pos 4U
#define FPU_MVFR2_VFP_Misc_Msk (0xFUL << FPU_MVFR2_VFP_Misc_Pos)
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;
#define CoreDebug_DHCSR_DBGKEY_Pos 16U
#define CoreDebug_DHCSR_DBGKEY_Msk (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)
#define CoreDebug_DHCSR_S_RESET_ST_Pos 25U
#define CoreDebug_DHCSR_S_RESET_ST_Msk (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)
#define CoreDebug_DHCSR_S_RETIRE_ST_Pos 24U
#define CoreDebug_DHCSR_S_RETIRE_ST_Msk (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)
#define CoreDebug_DHCSR_S_LOCKUP_Pos 19U
#define CoreDebug_DHCSR_S_LOCKUP_Msk (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)
#define CoreDebug_DHCSR_S_SLEEP_Pos 18U
#define CoreDebug_DHCSR_S_SLEEP_Msk (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)
#define CoreDebug_DHCSR_S_HALT_Pos 17U
#define CoreDebug_DHCSR_S_HALT_Msk (1UL << CoreDebug_DHCSR_S_HALT_Pos)
#define CoreDebug_DHCSR_S_REGRDY_Pos 16U
#define CoreDebug_DHCSR_S_REGRDY_Msk (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)
#define CoreDebug_DHCSR_C_SNAPSTALL_Pos 5U
#define CoreDebug_DHCSR_C_SNAPSTALL_Msk (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)
#define CoreDebug_DHCSR_C_MASKINTS_Pos 3U
#define CoreDebug_DHCSR_C_MASKINTS_Msk (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)
#define CoreDebug_DHCSR_C_STEP_Pos 2U
#define CoreDebug_DHCSR_C_STEP_Msk (1UL << CoreDebug_DHCSR_C_STEP_Pos)
#define CoreDebug_DHCSR_C_HALT_Pos 1U
#define CoreDebug_DHCSR_C_HALT_Msk (1UL << CoreDebug_DHCSR_C_HALT_Pos)
#define CoreDebug_DHCSR_C_DEBUGEN_Pos 0U
#define CoreDebug_DHCSR_C_DEBUGEN_Msk (1UL )
#define CoreDebug_DCRSR_REGWnR_Pos 16U
#define CoreDebug_DCRSR_REGWnR_Msk (1UL << CoreDebug_DCRSR_REGWnR_Pos)
#define CoreDebug_DCRSR_REGSEL_Pos 0U
#define CoreDebug_DCRSR_REGSEL_Msk (0x1FUL )
#define CoreDebug_DEMCR_TRCENA_Pos 24U
#define CoreDebug_DEMCR_TRCENA_Msk (1UL << CoreDebug_DEMCR_TRCENA_Pos)
#define CoreDebug_DEMCR_MON_REQ_Pos 19U
#define CoreDebug_DEMCR_MON_REQ_Msk (1UL << CoreDebug_DEMCR_MON_REQ_Pos)
#define CoreDebug_DEMCR_MON_STEP_Pos 18U
#define CoreDebug_DEMCR_MON_STEP_Msk (1UL << CoreDebug_DEMCR_MON_STEP_Pos)
#define CoreDebug_DEMCR_MON_PEND_Pos 17U
#define CoreDebug_DEMCR_MON_PEND_Msk (1UL << CoreDebug_DEMCR_MON_PEND_Pos)
#define CoreDebug_DEMCR_MON_EN_Pos 16U
#define CoreDebug_DEMCR_MON_EN_Msk (1UL << CoreDebug_DEMCR_MON_EN_Pos)
#define CoreDebug_DEMCR_VC_HARDERR_Pos 10U
#define CoreDebug_DEMCR_VC_HARDERR_Msk (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)
#define CoreDebug_DEMCR_VC_INTERR_Pos 9U
#define CoreDebug_DEMCR_VC_INTERR_Msk (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)
#define CoreDebug_DEMCR_VC_BUSERR_Pos 8U
#define CoreDebug_DEMCR_VC_BUSERR_Msk (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)
#define CoreDebug_DEMCR_VC_STATERR_Pos 7U
#define CoreDebug_DEMCR_VC_STATERR_Msk (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)
#define CoreDebug_DEMCR_VC_CHKERR_Pos 6U
#define CoreDebug_DEMCR_VC_CHKERR_Msk (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)
#define CoreDebug_DEMCR_VC_NOCPERR_Pos 5U
#define CoreDebug_DEMCR_VC_NOCPERR_Msk (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)
#define CoreDebug_DEMCR_VC_MMERR_Pos 4U
#define CoreDebug_DEMCR_VC_MMERR_Msk (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)
#define CoreDebug_DEMCR_VC_CORERESET_Pos 0U
#define CoreDebug_DEMCR_VC_CORERESET_Msk (1UL )
#define _VAL2FLD(field,value) (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
#define _FLD2VAL(field,value) (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
#define SCS_BASE (0xE000E000UL)
#define ITM_BASE (0xE0000000UL)
#define DWT_BASE (0xE0001000UL)
#define TPI_BASE (0xE0040000UL)
#define CoreDebug_BASE (0xE000EDF0UL)
#define SysTick_BASE (SCS_BASE + 0x0010UL)
#define NVIC_BASE (SCS_BASE + 0x0100UL)
#define SCB_BASE (SCS_BASE + 0x0D00UL)
#define SCnSCB ((SCnSCB_Type *) SCS_BASE )
#define SCB ((SCB_Type *) SCB_BASE )
#define SysTick ((SysTick_Type *) SysTick_BASE )
#define NVIC ((NVIC_Type *) NVIC_BASE )
#define ITM ((ITM_Type *) ITM_BASE )
#define DWT ((DWT_Type *) DWT_BASE )
#define TPI ((TPI_Type *) TPI_BASE )
#define CoreDebug ((CoreDebug_Type *) CoreDebug_BASE)
#define MPU_BASE (SCS_BASE + 0x0D90UL)
#define MPU ((MPU_Type *) MPU_BASE )
#define FPU_BASE (SCS_BASE + 0x0F30UL)
#define FPU ((FPU_Type *) FPU_BASE )
#define NVIC_SetPriorityGrouping __NVIC_SetPriorityGrouping
#define NVIC_GetPriorityGrouping __NVIC_GetPriorityGrouping
#define NVIC_EnableIRQ __NVIC_EnableIRQ
#define NVIC_GetEnableIRQ __NVIC_GetEnableIRQ
#define NVIC_DisableIRQ __NVIC_DisableIRQ
#define NVIC_GetPendingIRQ __NVIC_GetPendingIRQ
#define NVIC_SetPendingIRQ __NVIC_SetPendingIRQ
#define NVIC_ClearPendingIRQ __NVIC_ClearPendingIRQ
#define NVIC_GetActive __NVIC_GetActive
#define NVIC_SetPriority __NVIC_SetPriority
#define NVIC_GetPriority __NVIC_GetPriority
#define NVIC_SystemReset __NVIC_SystemReset
#define NVIC_SetVector __NVIC_SetVector
#define NVIC_GetVector __NVIC_GetVector
#define NVIC_USER_IRQ_OFFSET 16
#define EXC_RETURN_HANDLER (0xFFFFFFF1UL)
#define EXC_RETURN_THREAD_MSP (0xFFFFFFF9UL)
#define EXC_RETURN_THREAD_PSP (0xFFFFFFFDUL)
#define EXC_RETURN_HANDLER_FPU (0xFFFFFFE1UL)
#define EXC_RETURN_THREAD_MSP_FPU (0xFFFFFFE9UL)
#define EXC_RETURN_THREAD_PSP_FPU (0xFFFFFFEDUL)
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  reg_value = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U) |
                (PriorityGroupTmp << 8U) );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = reg_value;
}
static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
}
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __asm volatile("":::"memory");
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __asm volatile("":::"memory");
  }
}
static inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
static inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __DSB();
    __ISB();
  }
}
static inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
static inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
static inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
static inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - 4U)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 4U)) & (uint32_t)0xFFUL);
  }
}
static inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] >> (8U - 4U)));
  }
  else
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - 4U)));
  }
}
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4U)) ? (uint32_t)(4U) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4U)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4U));
  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(4U)) ? (uint32_t)(4U) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(4U)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(4U));
  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}
static inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t vectors = (uint32_t )((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  (* (int *) (vectors + ((int32_t)IRQn + 16) * 4)) = vector;
}
static inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
  uint32_t vectors = (uint32_t )((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  return (uint32_t)(* (int *) (vectors + ((int32_t)IRQn + 16) * 4));
}
 static inline void __NVIC_SystemReset(void)
{
  __DSB();
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = (uint32_t)((0x5FAUL << 16U) |
                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
                            (1UL << 2U) );
  __DSB();
  for(;;)
  {
    __asm volatile ("nop");
  }
}
#define ARM_MPU_ARMV7_H 
#define ARM_MPU_REGION_SIZE_32B ((uint8_t)0x04U)
#define ARM_MPU_REGION_SIZE_64B ((uint8_t)0x05U)
#define ARM_MPU_REGION_SIZE_128B ((uint8_t)0x06U)
#define ARM_MPU_REGION_SIZE_256B ((uint8_t)0x07U)
#define ARM_MPU_REGION_SIZE_512B ((uint8_t)0x08U)
#define ARM_MPU_REGION_SIZE_1KB ((uint8_t)0x09U)
#define ARM_MPU_REGION_SIZE_2KB ((uint8_t)0x0AU)
#define ARM_MPU_REGION_SIZE_4KB ((uint8_t)0x0BU)
#define ARM_MPU_REGION_SIZE_8KB ((uint8_t)0x0CU)
#define ARM_MPU_REGION_SIZE_16KB ((uint8_t)0x0DU)
#define ARM_MPU_REGION_SIZE_32KB ((uint8_t)0x0EU)
#define ARM_MPU_REGION_SIZE_64KB ((uint8_t)0x0FU)
#define ARM_MPU_REGION_SIZE_128KB ((uint8_t)0x10U)
#define ARM_MPU_REGION_SIZE_256KB ((uint8_t)0x11U)
#define ARM_MPU_REGION_SIZE_512KB ((uint8_t)0x12U)
#define ARM_MPU_REGION_SIZE_1MB ((uint8_t)0x13U)
#define ARM_MPU_REGION_SIZE_2MB ((uint8_t)0x14U)
#define ARM_MPU_REGION_SIZE_4MB ((uint8_t)0x15U)
#define ARM_MPU_REGION_SIZE_8MB ((uint8_t)0x16U)
#define ARM_MPU_REGION_SIZE_16MB ((uint8_t)0x17U)
#define ARM_MPU_REGION_SIZE_32MB ((uint8_t)0x18U)
#define ARM_MPU_REGION_SIZE_64MB ((uint8_t)0x19U)
#define ARM_MPU_REGION_SIZE_128MB ((uint8_t)0x1AU)
#define ARM_MPU_REGION_SIZE_256MB ((uint8_t)0x1BU)
#define ARM_MPU_REGION_SIZE_512MB ((uint8_t)0x1CU)
#define ARM_MPU_REGION_SIZE_1GB ((uint8_t)0x1DU)
#define ARM_MPU_REGION_SIZE_2GB ((uint8_t)0x1EU)
#define ARM_MPU_REGION_SIZE_4GB ((uint8_t)0x1FU)
#define ARM_MPU_AP_NONE 0U
#define ARM_MPU_AP_PRIV 1U
#define ARM_MPU_AP_URO 2U
#define ARM_MPU_AP_FULL 3U
#define ARM_MPU_AP_PRO 5U
#define ARM_MPU_AP_RO 6U
#define ARM_MPU_RBAR(Region,BaseAddress) (((BaseAddress) & MPU_RBAR_ADDR_Msk) | ((Region) & MPU_RBAR_REGION_Msk) | (MPU_RBAR_VALID_Msk))
#define ARM_MPU_ACCESS_(TypeExtField,IsShareable,IsCacheable,IsBufferable) ((((TypeExtField) << MPU_RASR_TEX_Pos) & MPU_RASR_TEX_Msk) | (((IsShareable) << MPU_RASR_S_Pos) & MPU_RASR_S_Msk) | (((IsCacheable) << MPU_RASR_C_Pos) & MPU_RASR_C_Msk) | (((IsBufferable) << MPU_RASR_B_Pos) & MPU_RASR_B_Msk))
#define ARM_MPU_RASR_EX(DisableExec,AccessPermission,AccessAttributes,SubRegionDisable,Size) ((((DisableExec) << MPU_RASR_XN_Pos) & MPU_RASR_XN_Msk) | (((AccessPermission) << MPU_RASR_AP_Pos) & MPU_RASR_AP_Msk) | (((AccessAttributes) & (MPU_RASR_TEX_Msk | MPU_RASR_S_Msk | MPU_RASR_C_Msk | MPU_RASR_B_Msk))) | (((SubRegionDisable) << MPU_RASR_SRD_Pos) & MPU_RASR_SRD_Msk) | (((Size) << MPU_RASR_SIZE_Pos) & MPU_RASR_SIZE_Msk) | (((MPU_RASR_ENABLE_Msk))))
#define ARM_MPU_RASR(DisableExec,AccessPermission,TypeExtField,IsShareable,IsCacheable,IsBufferable,SubRegionDisable,Size) ARM_MPU_RASR_EX(DisableExec, AccessPermission, ARM_MPU_ACCESS_(TypeExtField, IsShareable, IsCacheable, IsBufferable), SubRegionDisable, Size)
#define ARM_MPU_ACCESS_ORDERED ARM_MPU_ACCESS_(0U, 1U, 0U, 0U)
#define ARM_MPU_ACCESS_DEVICE(IsShareable) ((IsShareable) ? ARM_MPU_ACCESS_(0U, 1U, 0U, 1U) : ARM_MPU_ACCESS_(2U, 0U, 0U, 0U))
#define ARM_MPU_ACCESS_NORMAL(OuterCp,InnerCp,IsShareable) ARM_MPU_ACCESS_((4U | (OuterCp)), IsShareable, ((InnerCp) & 2U), ((InnerCp) & 1U))
#define ARM_MPU_CACHEP_NOCACHE 0U
#define ARM_MPU_CACHEP_WB_WRA 1U
#define ARM_MPU_CACHEP_WT_NWA 2U
#define ARM_MPU_CACHEP_WB_NWA 3U
typedef struct {
  uint32_t RBAR;
  uint32_t RASR;
} ARM_MPU_Region_t;
static inline void ARM_MPU_Enable(uint32_t MPU_Control)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = MPU_Control | (1UL );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR |= (1UL << 16U);
  __DSB();
  __ISB();
}
static inline void ARM_MPU_Disable(void)
{
  __DMB();
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR &= ~(1UL << 16U);
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL &= ~(1UL );
}
static inline void ARM_MPU_ClrRegion(uint32_t rnr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = 0U;
}
static inline void ARM_MPU_SetRegion(uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}
static inline void ARM_MPU_SetRegionEx(uint32_t rnr, uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}
static inline void ARM_MPU_OrderedMemcpy(volatile uint32_t* dst, const uint32_t* src, uint32_t len)
{
  uint32_t i;
  for (i = 0U; i < len; ++i)
  {
    dst[i] = src[i];
  }
}
static inline void ARM_MPU_Load(ARM_MPU_Region_t const* table, uint32_t cnt)
{
  const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
  while (cnt > 4U) {
    ARM_MPU_OrderedMemcpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), 4U*rowWordSize);
    table += 4U;
    cnt -= 4U;
  }
  ARM_MPU_OrderedMemcpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), cnt*rowWordSize);
}
static inline uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;
  mvfr0 = ((FPU_Type *) ((0xE000E000UL) + 0x0F30UL) )->MVFR0;
  if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x020U)
  {
    return 1U;
  }
  else
  {
    return 0U;
  }
}
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);
  }
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)(ticks - 1UL);
  __NVIC_SetPriority (SysTick_IRQn, (1UL << 4U) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL << 1U) |
                   (1UL );
  return (0UL);
}
extern volatile int32_t ITM_RxBuffer;
#define ITM_RXBUFFER_EMPTY ((int32_t)0x5AA55AA5U)
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&
      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL ) != 0UL) )
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
    {
      __asm volatile ("nop");
    }
    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;
  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);
  }
  return (ch);
}
static inline int32_t ITM_CheckChar (void)
{
  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
  {
    return (0);
  }
  else
  {
    return (1);
  }
}
#define __SYSTEM_STM32WBXX_H 
extern uint32_t SystemCoreClock;
extern const uint32_t AHBPrescTable[16];
extern const uint32_t APBPrescTable[8];
extern const uint32_t MSIRangeTable[16];
extern const uint32_t SmpsPrescalerTable[4][6];
extern void SystemInit(void);
extern void SystemCoreClockUpdate(void);
typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t IER;
  volatile uint32_t CR;
  volatile uint32_t CFGR;
  volatile uint32_t CFGR2;
  volatile uint32_t SMPR1;
  volatile uint32_t SMPR2;
       uint32_t RESERVED1;
  volatile uint32_t TR1;
  volatile uint32_t TR2;
  volatile uint32_t TR3;
       uint32_t RESERVED2;
  volatile uint32_t SQR1;
  volatile uint32_t SQR2;
  volatile uint32_t SQR3;
  volatile uint32_t SQR4;
  volatile uint32_t DR;
       uint32_t RESERVED3;
       uint32_t RESERVED4;
  volatile uint32_t JSQR;
       uint32_t RESERVED5[4];
  volatile uint32_t OFR1;
  volatile uint32_t OFR2;
  volatile uint32_t OFR3;
  volatile uint32_t OFR4;
       uint32_t RESERVED6[4];
  volatile uint32_t JDR1;
  volatile uint32_t JDR2;
  volatile uint32_t JDR3;
  volatile uint32_t JDR4;
       uint32_t RESERVED7[4];
  volatile uint32_t AWD2CR;
  volatile uint32_t AWD3CR;
       uint32_t RESERVED8;
       uint32_t RESERVED9;
  volatile uint32_t DIFSEL;
  volatile uint32_t CALFACT;
} ADC_TypeDef;
typedef struct
{
  uint32_t RESERVED1;
  uint32_t RESERVED2;
  volatile uint32_t CCR;
  uint32_t RESERVED3;
} ADC_Common_TypeDef;
typedef struct
{
  volatile uint32_t CSR;
} COMP_TypeDef;
typedef struct
{
  volatile uint32_t CSR;
} COMP_Common_TypeDef;
typedef struct
{
  volatile uint32_t DR;
  volatile uint32_t IDR;
  volatile uint32_t CR;
       uint32_t RESERVED2;
  volatile uint32_t INIT;
  volatile uint32_t POL;
} CRC_TypeDef;
typedef struct
{
  volatile uint32_t IDCODE;
  volatile uint32_t CR;
  uint32_t RESERVED1[13];
  volatile uint32_t APB1FZR1;
  volatile uint32_t C2APB1FZR1;
  volatile uint32_t APB1FZR2;
  volatile uint32_t C2APB1FZR2;
  volatile uint32_t APB2FZR;
  volatile uint32_t C2APB2FZR;
} DBGMCU_TypeDef;
typedef struct
{
  volatile uint32_t CCR;
  volatile uint32_t CNDTR;
  volatile uint32_t CPAR;
  volatile uint32_t CMAR;
  uint32_t RESERVED;
} DMA_Channel_TypeDef;
typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t IFCR;
} DMA_TypeDef;
typedef struct
{
  volatile uint32_t CCR;
}DMAMUX_Channel_TypeDef;
typedef struct
{
  volatile uint32_t CSR;
  volatile uint32_t CFR;
}DMAMUX_ChannelStatus_TypeDef;
typedef struct
{
  volatile uint32_t RGCR;
}DMAMUX_RequestGen_TypeDef;
typedef struct
{
  volatile uint32_t RGSR;
  volatile uint32_t RGCFR;
}DMAMUX_RequestGenStatus_TypeDef;
typedef struct
{
  volatile uint32_t ACR;
  volatile uint32_t RESERVED;
  volatile uint32_t KEYR;
  volatile uint32_t OPTKEYR;
  volatile uint32_t SR;
  volatile uint32_t CR;
  volatile uint32_t ECCR;
  uint32_t RESERVED1;
  volatile uint32_t OPTR;
  volatile uint32_t PCROP1ASR;
  volatile uint32_t PCROP1AER;
  volatile uint32_t WRP1AR;
  volatile uint32_t WRP1BR;
  volatile uint32_t PCROP1BSR;
  volatile uint32_t PCROP1BER;
  volatile uint32_t IPCCBR;
  uint32_t RESERVED2[7];
  volatile uint32_t C2ACR;
  volatile uint32_t C2SR;
  volatile uint32_t C2CR;
  uint32_t RESERVED3[6];
  volatile uint32_t SFR;
  volatile uint32_t SRRVR;
} FLASH_TypeDef;
typedef struct
{
  volatile uint32_t MODER;
  volatile uint32_t OTYPER;
  volatile uint32_t OSPEEDR;
  volatile uint32_t PUPDR;
  volatile uint32_t IDR;
  volatile uint32_t ODR;
  volatile uint32_t BSRR;
  volatile uint32_t LCKR;
  volatile uint32_t AFR[2];
  volatile uint32_t BRR;
} GPIO_TypeDef;
typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t OAR1;
  volatile uint32_t OAR2;
  volatile uint32_t TIMINGR;
  volatile uint32_t TIMEOUTR;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t PECR;
  volatile uint32_t RXDR;
  volatile uint32_t TXDR;
} I2C_TypeDef;
typedef struct
{
  volatile uint32_t KR;
  volatile uint32_t PR;
  volatile uint32_t RLR;
  volatile uint32_t SR;
  volatile uint32_t WINR;
} IWDG_TypeDef;
typedef struct
{
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t IER;
  volatile uint32_t CFGR;
  volatile uint32_t CR;
  volatile uint32_t CMP;
  volatile uint32_t ARR;
  volatile uint32_t CNT;
  volatile uint32_t OR;
} LPTIM_TypeDef;
typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t CR3;
  volatile uint32_t CR4;
  volatile uint32_t SR1;
  volatile uint32_t SR2;
  volatile uint32_t SCR;
  volatile uint32_t CR5;
  volatile uint32_t PUCRA;
  volatile uint32_t PDCRA;
  volatile uint32_t PUCRB;
  volatile uint32_t PDCRB;
  volatile uint32_t PUCRC;
  volatile uint32_t PDCRC;
  volatile uint32_t PUCRD;
  volatile uint32_t PDCRD;
  volatile uint32_t PUCRE;
  volatile uint32_t PDCRE;
       uint32_t RESERVED0[4];
  volatile uint32_t PUCRH;
  volatile uint32_t PDCRH;
       uint32_t RESERVED1[8];
  volatile uint32_t C2CR1;
  volatile uint32_t C2CR3;
  volatile uint32_t EXTSCR;
} PWR_TypeDef;
typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t DCR;
  volatile uint32_t SR;
  volatile uint32_t FCR;
  volatile uint32_t DLR;
  volatile uint32_t CCR;
  volatile uint32_t AR;
  volatile uint32_t ABR;
  volatile uint32_t DR;
  volatile uint32_t PSMKR;
  volatile uint32_t PSMAR;
  volatile uint32_t PIR;
  volatile uint32_t LPTR;
} QUADSPI_TypeDef;
typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t ICSCR;
  volatile uint32_t CFGR;
  volatile uint32_t PLLCFGR;
  volatile uint32_t PLLSAI1CFGR;
uint32_t RESERVED0;
  volatile uint32_t CIER;
  volatile uint32_t CIFR;
  volatile uint32_t CICR;
  volatile uint32_t SMPSCR;
  volatile uint32_t AHB1RSTR;
  volatile uint32_t AHB2RSTR;
  volatile uint32_t AHB3RSTR;
uint32_t RESERVED1;
  volatile uint32_t APB1RSTR1;
  volatile uint32_t APB1RSTR2;
  volatile uint32_t APB2RSTR;
  volatile uint32_t APB3RSTR;
  volatile uint32_t AHB1ENR;
  volatile uint32_t AHB2ENR;
  volatile uint32_t AHB3ENR;
uint32_t RESERVED2;
  volatile uint32_t APB1ENR1;
  volatile uint32_t APB1ENR2;
  volatile uint32_t APB2ENR;
uint32_t RESERVED3;
  volatile uint32_t AHB1SMENR;
  volatile uint32_t AHB2SMENR;
  volatile uint32_t AHB3SMENR;
uint32_t RESERVED4;
  volatile uint32_t APB1SMENR1;
  volatile uint32_t APB1SMENR2;
  volatile uint32_t APB2SMENR;
uint32_t RESERVED5;
  volatile uint32_t CCIPR;
uint32_t RESERVED6;
  volatile uint32_t BDCR;
  volatile uint32_t CSR;
  volatile uint32_t CRRCR;
  volatile uint32_t HSECR;
uint32_t RESERVED7[26];
  volatile uint32_t EXTCFGR;
uint32_t RESERVED8[15];
  volatile uint32_t C2AHB1ENR;
  volatile uint32_t C2AHB2ENR;
  volatile uint32_t C2AHB3ENR;
uint32_t RESERVED9;
  volatile uint32_t C2APB1ENR1;
  volatile uint32_t C2APB1ENR2;
  volatile uint32_t C2APB2ENR;
  volatile uint32_t C2APB3ENR;
  volatile uint32_t C2AHB1SMENR;
  volatile uint32_t C2AHB2SMENR;
  volatile uint32_t C2AHB3SMENR;
uint32_t RESERVED10;
  volatile uint32_t C2APB1SMENR1;
  volatile uint32_t C2APB1SMENR2;
  volatile uint32_t C2APB2SMENR;
  volatile uint32_t C2APB3SMENR;
} RCC_TypeDef;
typedef struct
{
  volatile uint32_t TR;
  volatile uint32_t DR;
  volatile uint32_t CR;
  volatile uint32_t ISR;
  volatile uint32_t PRER;
  volatile uint32_t WUTR;
       uint32_t RESERVED;
  volatile uint32_t ALRMAR;
  volatile uint32_t ALRMBR;
  volatile uint32_t WPR;
  volatile uint32_t SSR;
  volatile uint32_t SHIFTR;
  volatile uint32_t TSTR;
  volatile uint32_t TSDR;
  volatile uint32_t TSSSR;
  volatile uint32_t CALR;
  volatile uint32_t TAMPCR;
  volatile uint32_t ALRMASSR;
  volatile uint32_t ALRMBSSR;
  volatile uint32_t OR;
  volatile uint32_t BKP0R;
  volatile uint32_t BKP1R;
  volatile uint32_t BKP2R;
  volatile uint32_t BKP3R;
  volatile uint32_t BKP4R;
  volatile uint32_t BKP5R;
  volatile uint32_t BKP6R;
  volatile uint32_t BKP7R;
  volatile uint32_t BKP8R;
  volatile uint32_t BKP9R;
  volatile uint32_t BKP10R;
  volatile uint32_t BKP11R;
  volatile uint32_t BKP12R;
  volatile uint32_t BKP13R;
  volatile uint32_t BKP14R;
  volatile uint32_t BKP15R;
  volatile uint32_t BKP16R;
  volatile uint32_t BKP17R;
  volatile uint32_t BKP18R;
  volatile uint32_t BKP19R;
} RTC_TypeDef;
typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t SR;
  volatile uint32_t DR;
  volatile uint32_t CRCPR;
  volatile uint32_t RXCRCR;
  volatile uint32_t TXCRCR;
} SPI_TypeDef;
typedef struct
{
  volatile uint32_t MEMRMP;
  volatile uint32_t CFGR1;
  volatile uint32_t EXTICR[4];
  volatile uint32_t SCSR;
  volatile uint32_t CFGR2;
  volatile uint32_t SWPR1;
  volatile uint32_t SKR;
  volatile uint32_t SWPR2;
       uint32_t RESERVED1[53];
  volatile uint32_t IMR1;
  volatile uint32_t IMR2;
  volatile uint32_t C2IMR1;
  volatile uint32_t C2IMR2;
  volatile uint32_t SIPCR;
} SYSCFG_TypeDef;
typedef struct
{
  volatile uint32_t CSR;
  volatile uint32_t CCR;
} VREFBUF_TypeDef;
typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t SMCR;
  volatile uint32_t DIER;
  volatile uint32_t SR;
  volatile uint32_t EGR;
  volatile uint32_t CCMR1;
  volatile uint32_t CCMR2;
  volatile uint32_t CCER;
  volatile uint32_t CNT;
  volatile uint32_t PSC;
  volatile uint32_t ARR;
  volatile uint32_t RCR;
  volatile uint32_t CCR1;
  volatile uint32_t CCR2;
  volatile uint32_t CCR3;
  volatile uint32_t CCR4;
  volatile uint32_t BDTR;
  volatile uint32_t DCR;
  volatile uint32_t DMAR;
  volatile uint32_t OR;
  volatile uint32_t CCMR3;
  volatile uint32_t CCR5;
  volatile uint32_t CCR6;
  volatile uint32_t AF1;
  volatile uint32_t AF2;
} TIM_TypeDef;
typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t CR3;
  volatile uint32_t BRR;
  volatile uint32_t GTPR;
  volatile uint32_t RTOR;
  volatile uint32_t RQR;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
  volatile uint32_t RDR;
  volatile uint32_t TDR;
  volatile uint32_t PRESC;
} USART_TypeDef;
typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFR;
  volatile uint32_t SR;
} WWDG_TypeDef;
typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t DINR;
  volatile uint32_t DOUTR;
  volatile uint32_t KEYR0;
  volatile uint32_t KEYR1;
  volatile uint32_t KEYR2;
  volatile uint32_t KEYR3;
  volatile uint32_t IVR0;
  volatile uint32_t IVR1;
  volatile uint32_t IVR2;
  volatile uint32_t IVR3;
  volatile uint32_t KEYR4;
  volatile uint32_t KEYR5;
  volatile uint32_t KEYR6;
  volatile uint32_t KEYR7;
  volatile uint32_t SUSP0R;
  volatile uint32_t SUSP1R;
  volatile uint32_t SUSP2R;
  volatile uint32_t SUSP3R;
  volatile uint32_t SUSP4R;
  volatile uint32_t SUSP5R;
  volatile uint32_t SUSP6R;
  volatile uint32_t SUSP7R;
} AES_TypeDef;
typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t DR;
} RNG_TypeDef;
typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t IER;
  volatile uint32_t ICR;
  volatile uint32_t ISR;
  volatile uint32_t IOHCR;
  uint32_t RESERVED1;
  volatile uint32_t IOASCR;
  uint32_t RESERVED2;
  volatile uint32_t IOSCR;
  uint32_t RESERVED3;
  volatile uint32_t IOCCR;
  uint32_t RESERVED4;
  volatile uint32_t IOGCSR;
  volatile uint32_t IOGXCR[7];
} TSC_TypeDef;
typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t FCR;
  volatile uint32_t SR;
  volatile uint32_t CLR;
  uint32_t RESERVED;
  volatile uint32_t RAM[16];
} LCD_TypeDef;
typedef struct
{
  volatile uint16_t EP0R;
  volatile uint16_t RESERVED0;
  volatile uint16_t EP1R;
  volatile uint16_t RESERVED1;
  volatile uint16_t EP2R;
  volatile uint16_t RESERVED2;
  volatile uint16_t EP3R;
  volatile uint16_t RESERVED3;
  volatile uint16_t EP4R;
  volatile uint16_t RESERVED4;
  volatile uint16_t EP5R;
  volatile uint16_t RESERVED5;
  volatile uint16_t EP6R;
  volatile uint16_t RESERVED6;
  volatile uint16_t EP7R;
  volatile uint16_t RESERVED7[17];
  volatile uint16_t CNTR;
  volatile uint16_t RESERVED8;
  volatile uint16_t ISTR;
  volatile uint16_t RESERVED9;
  volatile uint16_t FNR;
  volatile uint16_t RESERVEDA;
  volatile uint16_t DADDR;
  volatile uint16_t RESERVEDB;
  volatile uint16_t BTABLE;
  volatile uint16_t RESERVEDC;
  volatile uint16_t LPMCSR;
  volatile uint16_t RESERVEDD;
  volatile uint16_t BCDR;
  volatile uint16_t RESERVEDE;
} USB_TypeDef;
typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t CFGR;
  volatile uint32_t ISR;
  volatile uint32_t ICR;
} CRS_TypeDef;
typedef struct
{
  volatile uint32_t C1CR;
  volatile uint32_t C1MR ;
  volatile uint32_t C1SCR;
  volatile uint32_t C1TOC2SR;
  volatile uint32_t C2CR;
  volatile uint32_t C2MR ;
  volatile uint32_t C2SCR;
  volatile uint32_t C2TOC1SR;
} IPCC_TypeDef;
typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t MR;
  volatile uint32_t SCR;
  volatile uint32_t SR;
} IPCC_CommonTypeDef;
typedef struct
{
  volatile uint32_t RTSR1;
  volatile uint32_t FTSR1;
  volatile uint32_t SWIER1;
  volatile uint32_t PR1;
  volatile uint32_t RESERVED1[4];
  volatile uint32_t RTSR2;
  volatile uint32_t FTSR2;
  volatile uint32_t SWIER2;
  volatile uint32_t PR2;
  volatile uint32_t RESERVED2[4];
  volatile uint32_t RESERVED3[8];
  volatile uint32_t RESERVED4[8];
  volatile uint32_t IMR1;
  volatile uint32_t EMR1;
  volatile uint32_t RESERVED5[2];
  volatile uint32_t IMR2;
  volatile uint32_t EMR2;
  volatile uint32_t RESERVED8[10];
  volatile uint32_t C2IMR1;
  volatile uint32_t C2EMR1;
  volatile uint32_t RESERVED9[2];
  volatile uint32_t C2IMR2;
  volatile uint32_t C2EMR2;
}EXTI_TypeDef;
typedef struct
{
  volatile uint32_t GCR;
  uint32_t RESERVED[16];
  volatile uint32_t PDMCR;
  volatile uint32_t PDMDLY;
} SAI_TypeDef;
typedef struct
{
  volatile uint32_t CR1;
  volatile uint32_t CR2;
  volatile uint32_t FRCR;
  volatile uint32_t SLOTR;
  volatile uint32_t IMR;
  volatile uint32_t SR;
  volatile uint32_t CLRFR;
  volatile uint32_t DR;
} SAI_Block_TypeDef;
typedef struct
{
  volatile uint32_t CR;
  volatile uint32_t SR;
  volatile uint32_t CLRFR;
  uint32_t Reserved1[253];
  volatile uint32_t RAM[894];
} PKA_TypeDef;
typedef struct
{
  volatile uint32_t R[32];
  volatile uint32_t RLR[32];
  volatile uint32_t C1IER;
  volatile uint32_t C1ICR;
  volatile uint32_t C1ISR;
  volatile uint32_t C1MISR;
  volatile uint32_t C2IER;
  volatile uint32_t C2ICR;
  volatile uint32_t C2ISR;
  volatile uint32_t C2MISR;
   uint32_t Reserved[8];
  volatile uint32_t CR;
  volatile uint32_t KEYR;
} HSEM_TypeDef;
typedef struct
{
  volatile uint32_t IER;
  volatile uint32_t ICR;
  volatile uint32_t ISR;
  volatile uint32_t MISR;
} HSEM_Common_TypeDef;
#define FLASH_BASE (0x08000000UL)
#define SRAM_BASE (0x20000000UL)
#define PERIPH_BASE (0x40000000UL)
#define SYSTEM_MEMORY_BASE (0x1FFF0000UL)
#define OTP_AREA_BASE (0x1FFF7000UL)
#define OPTION_BYTE_BASE (0x1FFF8000UL)
#define ENGI_BYTE_BASE (0x1FFF7400UL)
#define SRAM1_BASE SRAM_BASE
#define SRAM2A_BASE (SRAM_BASE + 0x00030000UL)
#define SRAM2B_BASE (SRAM_BASE + 0x00038000UL)
#define FLASH_SIZE (((uint32_t)(*((uint16_t *)FLASHSIZE_BASE)) & (0x07FFUL)) << 10U)
#define SRAM1_SIZE 0x00030000UL
#define SRAM2A_SIZE 0x00008000UL
#define SRAM2B_SIZE 0x00008000UL
#define SRAM1_END_ADDR (0x2002FFFFUL)
#define SRAM2A_END_ADDR (0x20037FFFUL)
#define SRAM2B_END_ADDR (0x2003FFFFUL)
#define SYSTEM_MEMORY_END_ADDR (0x1FFF6FFFUL)
#define OTP_AREA_END_ADDR (0x1FFF73FFUL)
#define OPTION_BYTE_END_ADDR (0x1FFF8FFFUL)
#define ENGI_BYTE_END_ADDR (0x1FFF7FFFUL)
#define APB1PERIPH_BASE PERIPH_BASE
#define APB2PERIPH_BASE (PERIPH_BASE + 0x00010000UL)
#define AHB1PERIPH_BASE (PERIPH_BASE + 0x00020000UL)
#define AHB2PERIPH_BASE (PERIPH_BASE + 0x08000000UL)
#define AHB4PERIPH_BASE (PERIPH_BASE + 0x18000000UL)
#define APB3PERIPH_BASE (PERIPH_BASE + 0x20000000UL)
#define AHB3PERIPH_BASE (PERIPH_BASE + 0x50000000UL)
#define TIM2_BASE (APB1PERIPH_BASE + 0x00000000UL)
#define LCD_BASE (APB1PERIPH_BASE + 0x00002400UL)
#define RTC_BASE (APB1PERIPH_BASE + 0x00002800UL)
#define WWDG_BASE (APB1PERIPH_BASE + 0x00002C00UL)
#define IWDG_BASE (APB1PERIPH_BASE + 0x00003000UL)
#define SPI2_BASE (APB1PERIPH_BASE + 0x00003800UL)
#define I2C1_BASE (APB1PERIPH_BASE + 0x00005400UL)
#define I2C3_BASE (APB1PERIPH_BASE + 0x00005C00UL)
#define CRS_BASE (APB1PERIPH_BASE + 0x00006000UL)
#define USB1_BASE (APB1PERIPH_BASE + 0x00006800UL)
#define USB1_PMAADDR (APB1PERIPH_BASE + 0x00006C00UL)
#define LPTIM1_BASE (APB1PERIPH_BASE + 0x00007C00UL)
#define LPUART1_BASE (APB1PERIPH_BASE + 0x00008000UL)
#define LPTIM2_BASE (APB1PERIPH_BASE + 0x00009400UL)
#define SYSCFG_BASE (APB2PERIPH_BASE + 0x00000000UL)
#define VREFBUF_BASE (APB2PERIPH_BASE + 0x00000030UL)
#define COMP1_BASE (APB2PERIPH_BASE + 0x00000200UL)
#define COMP2_BASE (APB2PERIPH_BASE + 0x00000204UL)
#define TIM1_BASE (APB2PERIPH_BASE + 0x00002C00UL)
#define SPI1_BASE (APB2PERIPH_BASE + 0x00003000UL)
#define USART1_BASE (APB2PERIPH_BASE + 0x00003800UL)
#define TIM16_BASE (APB2PERIPH_BASE + 0x00004400UL)
#define TIM17_BASE (APB2PERIPH_BASE + 0x00004800UL)
#define SAI1_BASE (APB2PERIPH_BASE + 0x00005400UL)
#define SAI1_Block_A_BASE (SAI1_BASE + 0x0000004UL)
#define SAI1_Block_B_BASE (SAI1_BASE + 0x0000024UL)
#define DMA1_BASE (AHB1PERIPH_BASE + 0x00000000UL)
#define DMA2_BASE (AHB1PERIPH_BASE + 0x00000400UL)
#define DMAMUX1_BASE (AHB1PERIPH_BASE + 0x00000800UL)
#define CRC_BASE (AHB1PERIPH_BASE + 0x00003000UL)
#define TSC_BASE (AHB1PERIPH_BASE + 0x00004000UL)
#define DMA1_Channel1_BASE (DMA1_BASE + 0x00000008UL)
#define DMA1_Channel2_BASE (DMA1_BASE + 0x0000001CUL)
#define DMA1_Channel3_BASE (DMA1_BASE + 0x00000030UL)
#define DMA1_Channel4_BASE (DMA1_BASE + 0x00000044UL)
#define DMA1_Channel5_BASE (DMA1_BASE + 0x00000058UL)
#define DMA1_Channel6_BASE (DMA1_BASE + 0x0000006CUL)
#define DMA1_Channel7_BASE (DMA1_BASE + 0x00000080UL)
#define DMA2_Channel1_BASE (DMA2_BASE + 0x00000008UL)
#define DMA2_Channel2_BASE (DMA2_BASE + 0x0000001CUL)
#define DMA2_Channel3_BASE (DMA2_BASE + 0x00000030UL)
#define DMA2_Channel4_BASE (DMA2_BASE + 0x00000044UL)
#define DMA2_Channel5_BASE (DMA2_BASE + 0x00000058UL)
#define DMA2_Channel6_BASE (DMA2_BASE + 0x0000006CUL)
#define DMA2_Channel7_BASE (DMA2_BASE + 0x00000080UL)
#define DMAMUX1_Channel0_BASE (DMAMUX1_BASE)
#define DMAMUX1_Channel1_BASE (DMAMUX1_BASE + 0x00000004UL)
#define DMAMUX1_Channel2_BASE (DMAMUX1_BASE + 0x00000008UL)
#define DMAMUX1_Channel3_BASE (DMAMUX1_BASE + 0x0000000CUL)
#define DMAMUX1_Channel4_BASE (DMAMUX1_BASE + 0x00000010UL)
#define DMAMUX1_Channel5_BASE (DMAMUX1_BASE + 0x00000014UL)
#define DMAMUX1_Channel6_BASE (DMAMUX1_BASE + 0x00000018UL)
#define DMAMUX1_Channel7_BASE (DMAMUX1_BASE + 0x0000001CUL)
#define DMAMUX1_Channel8_BASE (DMAMUX1_BASE + 0x00000020UL)
#define DMAMUX1_Channel9_BASE (DMAMUX1_BASE + 0x00000024UL)
#define DMAMUX1_Channel10_BASE (DMAMUX1_BASE + 0x00000028UL)
#define DMAMUX1_Channel11_BASE (DMAMUX1_BASE + 0x0000002CUL)
#define DMAMUX1_Channel12_BASE (DMAMUX1_BASE + 0x00000030UL)
#define DMAMUX1_Channel13_BASE (DMAMUX1_BASE + 0x00000034UL)
#define DMAMUX1_RequestGenerator0_BASE (DMAMUX1_BASE + 0x00000100UL)
#define DMAMUX1_RequestGenerator1_BASE (DMAMUX1_BASE + 0x00000104UL)
#define DMAMUX1_RequestGenerator2_BASE (DMAMUX1_BASE + 0x00000108UL)
#define DMAMUX1_RequestGenerator3_BASE (DMAMUX1_BASE + 0x0000010CUL)
#define DMAMUX1_ChannelStatus_BASE (DMAMUX1_BASE + 0x00000080UL)
#define DMAMUX1_RequestGenStatus_BASE (DMAMUX1_BASE + 0x00000140UL)
#define IOPORT_BASE (AHB2PERIPH_BASE + 0x00000000UL)
#define GPIOA_BASE (IOPORT_BASE + 0x00000000UL)
#define GPIOB_BASE (IOPORT_BASE + 0x00000400UL)
#define GPIOC_BASE (IOPORT_BASE + 0x00000800UL)
#define GPIOD_BASE (IOPORT_BASE + 0x00000C00UL)
#define GPIOE_BASE (IOPORT_BASE + 0x00001000UL)
#define GPIOH_BASE (IOPORT_BASE + 0x00001C00UL)
#define ADC1_BASE (AHB2PERIPH_BASE + 0x08040000UL)
#define ADC1_COMMON_BASE (AHB2PERIPH_BASE + 0x08040300UL)
#define AES1_BASE (AHB2PERIPH_BASE + 0x08060000UL)
#define RCC_BASE (AHB4PERIPH_BASE + 0x00000000UL)
#define PWR_BASE (AHB4PERIPH_BASE + 0x00000400UL)
#define EXTI_BASE (AHB4PERIPH_BASE + 0x00000800UL)
#define IPCC_BASE (AHB4PERIPH_BASE + 0x00000C00UL)
#define RNG_BASE (AHB4PERIPH_BASE + 0x00001000UL)
#define HSEM_BASE (AHB4PERIPH_BASE + 0x00001400UL)
#define AES2_BASE (AHB4PERIPH_BASE + 0x00001800UL)
#define PKA_BASE (AHB4PERIPH_BASE + 0x00002000UL)
#define FLASH_REG_BASE (AHB4PERIPH_BASE + 0x00004000UL)
#define DBGMCU_BASE (0xE0042000UL)
#define QUADSPI_BASE (AHB3PERIPH_BASE + 0x00000000UL)
#define QUADSPI_R_BASE (AHB3PERIPH_BASE + 0x10001000UL)
#define PACKAGE_BASE ((uint32_t)0x1FFF7500UL)
#define UID64_BASE ((uint32_t)0x1FFF7580UL)
#define UID_BASE ((uint32_t)0x1FFF7590UL)
#define FLASHSIZE_BASE ((uint32_t)0x1FFF75E0UL)
#define TIM2 ((TIM_TypeDef *) TIM2_BASE)
#define LCD ((LCD_TypeDef *) LCD_BASE)
#define RTC ((RTC_TypeDef *) RTC_BASE)
#define WWDG ((WWDG_TypeDef *) WWDG_BASE)
#define IWDG ((IWDG_TypeDef *) IWDG_BASE)
#define SPI2 ((SPI_TypeDef *) SPI2_BASE)
#define I2C1 ((I2C_TypeDef *) I2C1_BASE)
#define I2C3 ((I2C_TypeDef *) I2C3_BASE)
#define USB ((USB_TypeDef *) USB1_BASE)
#define CRS ((CRS_TypeDef *) CRS_BASE)
#define LPTIM1 ((LPTIM_TypeDef *) LPTIM1_BASE)
#define LPUART1 ((USART_TypeDef *) LPUART1_BASE)
#define LPTIM2 ((LPTIM_TypeDef *) LPTIM2_BASE)
#define SYSCFG ((SYSCFG_TypeDef *) SYSCFG_BASE)
#define VREFBUF ((VREFBUF_TypeDef *) VREFBUF_BASE)
#define COMP1 ((COMP_TypeDef *) COMP1_BASE)
#define COMP2 ((COMP_TypeDef *) COMP2_BASE)
#define COMP12_COMMON ((COMP_Common_TypeDef *) COMP2_BASE)
#define TIM1 ((TIM_TypeDef *) TIM1_BASE)
#define SPI1 ((SPI_TypeDef *) SPI1_BASE)
#define USART1 ((USART_TypeDef *) USART1_BASE)
#define TIM16 ((TIM_TypeDef *) TIM16_BASE)
#define TIM17 ((TIM_TypeDef *) TIM17_BASE)
#define SAI1 ((SAI_TypeDef *) SAI1_BASE)
#define SAI1_Block_A ((SAI_Block_TypeDef *)SAI1_Block_A_BASE)
#define SAI1_Block_B ((SAI_Block_TypeDef *)SAI1_Block_B_BASE)
#define DMA1 ((DMA_TypeDef *) DMA1_BASE)
#define DMA1_Channel1 ((DMA_Channel_TypeDef *) DMA1_Channel1_BASE)
#define DMA1_Channel2 ((DMA_Channel_TypeDef *) DMA1_Channel2_BASE)
#define DMA1_Channel3 ((DMA_Channel_TypeDef *) DMA1_Channel3_BASE)
#define DMA1_Channel4 ((DMA_Channel_TypeDef *) DMA1_Channel4_BASE)
#define DMA1_Channel5 ((DMA_Channel_TypeDef *) DMA1_Channel5_BASE)
#define DMA1_Channel6 ((DMA_Channel_TypeDef *) DMA1_Channel6_BASE)
#define DMA1_Channel7 ((DMA_Channel_TypeDef *) DMA1_Channel7_BASE)
#define DMA2 ((DMA_TypeDef *) DMA2_BASE)
#define DMA2_Channel1 ((DMA_Channel_TypeDef *) DMA2_Channel1_BASE)
#define DMA2_Channel2 ((DMA_Channel_TypeDef *) DMA2_Channel2_BASE)
#define DMA2_Channel3 ((DMA_Channel_TypeDef *) DMA2_Channel3_BASE)
#define DMA2_Channel4 ((DMA_Channel_TypeDef *) DMA2_Channel4_BASE)
#define DMA2_Channel5 ((DMA_Channel_TypeDef *) DMA2_Channel5_BASE)
#define DMA2_Channel6 ((DMA_Channel_TypeDef *) DMA2_Channel6_BASE)
#define DMA2_Channel7 ((DMA_Channel_TypeDef *) DMA2_Channel7_BASE)
#define DMAMUX1 ((DMAMUX_Channel_TypeDef *) DMAMUX1_BASE)
#define DMAMUX1_Channel0 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel0_BASE)
#define DMAMUX1_Channel1 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel1_BASE)
#define DMAMUX1_Channel2 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel2_BASE)
#define DMAMUX1_Channel3 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel3_BASE)
#define DMAMUX1_Channel4 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel4_BASE)
#define DMAMUX1_Channel5 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel5_BASE)
#define DMAMUX1_Channel6 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel6_BASE)
#define DMAMUX1_Channel7 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel7_BASE)
#define DMAMUX1_Channel8 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel8_BASE)
#define DMAMUX1_Channel9 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel9_BASE)
#define DMAMUX1_Channel10 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel10_BASE)
#define DMAMUX1_Channel11 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel11_BASE)
#define DMAMUX1_Channel12 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel12_BASE)
#define DMAMUX1_Channel13 ((DMAMUX_Channel_TypeDef *) DMAMUX1_Channel13_BASE)
#define DMAMUX1_RequestGenerator0 ((DMAMUX_RequestGen_TypeDef *) DMAMUX1_RequestGenerator0_BASE)
#define DMAMUX1_RequestGenerator1 ((DMAMUX_RequestGen_TypeDef *) DMAMUX1_RequestGenerator1_BASE)
#define DMAMUX1_RequestGenerator2 ((DMAMUX_RequestGen_TypeDef *) DMAMUX1_RequestGenerator2_BASE)
#define DMAMUX1_RequestGenerator3 ((DMAMUX_RequestGen_TypeDef *) DMAMUX1_RequestGenerator3_BASE)
#define DMAMUX1_ChannelStatus ((DMAMUX_ChannelStatus_TypeDef *) DMAMUX1_ChannelStatus_BASE)
#define DMAMUX1_RequestGenStatus ((DMAMUX_RequestGenStatus_TypeDef *) DMAMUX1_RequestGenStatus_BASE)
#define CRC ((CRC_TypeDef *) CRC_BASE)
#define TSC ((TSC_TypeDef *) TSC_BASE)
#define GPIOA ((GPIO_TypeDef *) GPIOA_BASE)
#define GPIOB ((GPIO_TypeDef *) GPIOB_BASE)
#define GPIOC ((GPIO_TypeDef *) GPIOC_BASE)
#define GPIOD ((GPIO_TypeDef *) GPIOD_BASE)
#define GPIOE ((GPIO_TypeDef *) GPIOE_BASE)
#define GPIOH ((GPIO_TypeDef *) GPIOH_BASE)
#define ADC1 ((ADC_TypeDef *) ADC1_BASE)
#define ADC1_COMMON ((ADC_Common_TypeDef *) ADC1_COMMON_BASE)
#define AES1 ((AES_TypeDef *) AES1_BASE)
#define RCC ((RCC_TypeDef *) RCC_BASE)
#define PWR ((PWR_TypeDef *) PWR_BASE)
#define EXTI ((EXTI_TypeDef *) EXTI_BASE)
#define IPCC ((IPCC_TypeDef *) IPCC_BASE)
#define IPCC_C1 ((IPCC_CommonTypeDef *) IPCC_BASE)
#define IPCC_C2 ((IPCC_CommonTypeDef *) (IPCC_BASE + 0x10U))
#define RNG ((RNG_TypeDef *) RNG_BASE)
#define HSEM ((HSEM_TypeDef *) HSEM_BASE)
#define HSEM_COMMON ((HSEM_Common_TypeDef *) (HSEM_BASE + 0x100U))
#define AES2 ((AES_TypeDef *) AES2_BASE)
#define PKA ((PKA_TypeDef *) PKA_BASE)
#define FLASH ((FLASH_TypeDef *) FLASH_REG_BASE)
#define QUADSPI ((QUADSPI_TypeDef *) QUADSPI_R_BASE)
#define DBGMCU ((DBGMCU_TypeDef *) DBGMCU_BASE)
#define LSI_STARTUP_TIME 130U
#define ADC_SUPPORT_5_MSPS 
#define ADC_ISR_ADRDY_Pos (0U)
#define ADC_ISR_ADRDY_Msk (0x1UL << ADC_ISR_ADRDY_Pos)
#define ADC_ISR_ADRDY ADC_ISR_ADRDY_Msk
#define ADC_ISR_EOSMP_Pos (1U)
#define ADC_ISR_EOSMP_Msk (0x1UL << ADC_ISR_EOSMP_Pos)
#define ADC_ISR_EOSMP ADC_ISR_EOSMP_Msk
#define ADC_ISR_EOC_Pos (2U)
#define ADC_ISR_EOC_Msk (0x1UL << ADC_ISR_EOC_Pos)
#define ADC_ISR_EOC ADC_ISR_EOC_Msk
#define ADC_ISR_EOS_Pos (3U)
#define ADC_ISR_EOS_Msk (0x1UL << ADC_ISR_EOS_Pos)
#define ADC_ISR_EOS ADC_ISR_EOS_Msk
#define ADC_ISR_OVR_Pos (4U)
#define ADC_ISR_OVR_Msk (0x1UL << ADC_ISR_OVR_Pos)
#define ADC_ISR_OVR ADC_ISR_OVR_Msk
#define ADC_ISR_JEOC_Pos (5U)
#define ADC_ISR_JEOC_Msk (0x1UL << ADC_ISR_JEOC_Pos)
#define ADC_ISR_JEOC ADC_ISR_JEOC_Msk
#define ADC_ISR_JEOS_Pos (6U)
#define ADC_ISR_JEOS_Msk (0x1UL << ADC_ISR_JEOS_Pos)
#define ADC_ISR_JEOS ADC_ISR_JEOS_Msk
#define ADC_ISR_AWD1_Pos (7U)
#define ADC_ISR_AWD1_Msk (0x1UL << ADC_ISR_AWD1_Pos)
#define ADC_ISR_AWD1 ADC_ISR_AWD1_Msk
#define ADC_ISR_AWD2_Pos (8U)
#define ADC_ISR_AWD2_Msk (0x1UL << ADC_ISR_AWD2_Pos)
#define ADC_ISR_AWD2 ADC_ISR_AWD2_Msk
#define ADC_ISR_AWD3_Pos (9U)
#define ADC_ISR_AWD3_Msk (0x1UL << ADC_ISR_AWD3_Pos)
#define ADC_ISR_AWD3 ADC_ISR_AWD3_Msk
#define ADC_ISR_JQOVF_Pos (10U)
#define ADC_ISR_JQOVF_Msk (0x1UL << ADC_ISR_JQOVF_Pos)
#define ADC_ISR_JQOVF ADC_ISR_JQOVF_Msk
#define ADC_IER_ADRDYIE_Pos (0U)
#define ADC_IER_ADRDYIE_Msk (0x1UL << ADC_IER_ADRDYIE_Pos)
#define ADC_IER_ADRDYIE ADC_IER_ADRDYIE_Msk
#define ADC_IER_EOSMPIE_Pos (1U)
#define ADC_IER_EOSMPIE_Msk (0x1UL << ADC_IER_EOSMPIE_Pos)
#define ADC_IER_EOSMPIE ADC_IER_EOSMPIE_Msk
#define ADC_IER_EOCIE_Pos (2U)
#define ADC_IER_EOCIE_Msk (0x1UL << ADC_IER_EOCIE_Pos)
#define ADC_IER_EOCIE ADC_IER_EOCIE_Msk
#define ADC_IER_EOSIE_Pos (3U)
#define ADC_IER_EOSIE_Msk (0x1UL << ADC_IER_EOSIE_Pos)
#define ADC_IER_EOSIE ADC_IER_EOSIE_Msk
#define ADC_IER_OVRIE_Pos (4U)
#define ADC_IER_OVRIE_Msk (0x1UL << ADC_IER_OVRIE_Pos)
#define ADC_IER_OVRIE ADC_IER_OVRIE_Msk
#define ADC_IER_JEOCIE_Pos (5U)
#define ADC_IER_JEOCIE_Msk (0x1UL << ADC_IER_JEOCIE_Pos)
#define ADC_IER_JEOCIE ADC_IER_JEOCIE_Msk
#define ADC_IER_JEOSIE_Pos (6U)
#define ADC_IER_JEOSIE_Msk (0x1UL << ADC_IER_JEOSIE_Pos)
#define ADC_IER_JEOSIE ADC_IER_JEOSIE_Msk
#define ADC_IER_AWD1IE_Pos (7U)
#define ADC_IER_AWD1IE_Msk (0x1UL << ADC_IER_AWD1IE_Pos)
#define ADC_IER_AWD1IE ADC_IER_AWD1IE_Msk
#define ADC_IER_AWD2IE_Pos (8U)
#define ADC_IER_AWD2IE_Msk (0x1UL << ADC_IER_AWD2IE_Pos)
#define ADC_IER_AWD2IE ADC_IER_AWD2IE_Msk
#define ADC_IER_AWD3IE_Pos (9U)
#define ADC_IER_AWD3IE_Msk (0x1UL << ADC_IER_AWD3IE_Pos)
#define ADC_IER_AWD3IE ADC_IER_AWD3IE_Msk
#define ADC_IER_JQOVFIE_Pos (10U)
#define ADC_IER_JQOVFIE_Msk (0x1UL << ADC_IER_JQOVFIE_Pos)
#define ADC_IER_JQOVFIE ADC_IER_JQOVFIE_Msk
#define ADC_CR_ADEN_Pos (0U)
#define ADC_CR_ADEN_Msk (0x1UL << ADC_CR_ADEN_Pos)
#define ADC_CR_ADEN ADC_CR_ADEN_Msk
#define ADC_CR_ADDIS_Pos (1U)
#define ADC_CR_ADDIS_Msk (0x1UL << ADC_CR_ADDIS_Pos)
#define ADC_CR_ADDIS ADC_CR_ADDIS_Msk
#define ADC_CR_ADSTART_Pos (2U)
#define ADC_CR_ADSTART_Msk (0x1UL << ADC_CR_ADSTART_Pos)
#define ADC_CR_ADSTART ADC_CR_ADSTART_Msk
#define ADC_CR_JADSTART_Pos (3U)
#define ADC_CR_JADSTART_Msk (0x1UL << ADC_CR_JADSTART_Pos)
#define ADC_CR_JADSTART ADC_CR_JADSTART_Msk
#define ADC_CR_ADSTP_Pos (4U)
#define ADC_CR_ADSTP_Msk (0x1UL << ADC_CR_ADSTP_Pos)
#define ADC_CR_ADSTP ADC_CR_ADSTP_Msk
#define ADC_CR_JADSTP_Pos (5U)
#define ADC_CR_JADSTP_Msk (0x1UL << ADC_CR_JADSTP_Pos)
#define ADC_CR_JADSTP ADC_CR_JADSTP_Msk
#define ADC_CR_ADVREGEN_Pos (28U)
#define ADC_CR_ADVREGEN_Msk (0x1UL << ADC_CR_ADVREGEN_Pos)
#define ADC_CR_ADVREGEN ADC_CR_ADVREGEN_Msk
#define ADC_CR_DEEPPWD_Pos (29U)
#define ADC_CR_DEEPPWD_Msk (0x1UL << ADC_CR_DEEPPWD_Pos)
#define ADC_CR_DEEPPWD ADC_CR_DEEPPWD_Msk
#define ADC_CR_ADCALDIF_Pos (30U)
#define ADC_CR_ADCALDIF_Msk (0x1UL << ADC_CR_ADCALDIF_Pos)
#define ADC_CR_ADCALDIF ADC_CR_ADCALDIF_Msk
#define ADC_CR_ADCAL_Pos (31U)
#define ADC_CR_ADCAL_Msk (0x1UL << ADC_CR_ADCAL_Pos)
#define ADC_CR_ADCAL ADC_CR_ADCAL_Msk
#define ADC_CFGR_DMAEN_Pos (0U)
#define ADC_CFGR_DMAEN_Msk (0x1UL << ADC_CFGR_DMAEN_Pos)
#define ADC_CFGR_DMAEN ADC_CFGR_DMAEN_Msk
#define ADC_CFGR_DMACFG_Pos (1U)
#define ADC_CFGR_DMACFG_Msk (0x1UL << ADC_CFGR_DMACFG_Pos)
#define ADC_CFGR_DMACFG ADC_CFGR_DMACFG_Msk
#define ADC_CFGR_RES_Pos (3U)
#define ADC_CFGR_RES_Msk (0x3UL << ADC_CFGR_RES_Pos)
#define ADC_CFGR_RES ADC_CFGR_RES_Msk
#define ADC_CFGR_RES_0 (0x1UL << ADC_CFGR_RES_Pos)
#define ADC_CFGR_RES_1 (0x2UL << ADC_CFGR_RES_Pos)
#define ADC_CFGR_ALIGN_Pos (5U)
#define ADC_CFGR_ALIGN_Msk (0x1UL << ADC_CFGR_ALIGN_Pos)
#define ADC_CFGR_ALIGN ADC_CFGR_ALIGN_Msk
#define ADC_CFGR_EXTSEL_Pos (6U)
#define ADC_CFGR_EXTSEL_Msk (0xFUL << ADC_CFGR_EXTSEL_Pos)
#define ADC_CFGR_EXTSEL ADC_CFGR_EXTSEL_Msk
#define ADC_CFGR_EXTSEL_0 (0x1UL << ADC_CFGR_EXTSEL_Pos)
#define ADC_CFGR_EXTSEL_1 (0x2UL << ADC_CFGR_EXTSEL_Pos)
#define ADC_CFGR_EXTSEL_2 (0x4UL << ADC_CFGR_EXTSEL_Pos)
#define ADC_CFGR_EXTSEL_3 (0x8UL << ADC_CFGR_EXTSEL_Pos)
#define ADC_CFGR_EXTEN_Pos (10U)
#define ADC_CFGR_EXTEN_Msk (0x3UL << ADC_CFGR_EXTEN_Pos)
#define ADC_CFGR_EXTEN ADC_CFGR_EXTEN_Msk
#define ADC_CFGR_EXTEN_0 (0x1UL << ADC_CFGR_EXTEN_Pos)
#define ADC_CFGR_EXTEN_1 (0x2UL << ADC_CFGR_EXTEN_Pos)
#define ADC_CFGR_OVRMOD_Pos (12U)
#define ADC_CFGR_OVRMOD_Msk (0x1UL << ADC_CFGR_OVRMOD_Pos)
#define ADC_CFGR_OVRMOD ADC_CFGR_OVRMOD_Msk
#define ADC_CFGR_CONT_Pos (13U)
#define ADC_CFGR_CONT_Msk (0x1UL << ADC_CFGR_CONT_Pos)
#define ADC_CFGR_CONT ADC_CFGR_CONT_Msk
#define ADC_CFGR_AUTDLY_Pos (14U)
#define ADC_CFGR_AUTDLY_Msk (0x1UL << ADC_CFGR_AUTDLY_Pos)
#define ADC_CFGR_AUTDLY ADC_CFGR_AUTDLY_Msk
#define ADC_CFGR_DISCEN_Pos (16U)
#define ADC_CFGR_DISCEN_Msk (0x1UL << ADC_CFGR_DISCEN_Pos)
#define ADC_CFGR_DISCEN ADC_CFGR_DISCEN_Msk
#define ADC_CFGR_DISCNUM_Pos (17U)
#define ADC_CFGR_DISCNUM_Msk (0x7UL << ADC_CFGR_DISCNUM_Pos)
#define ADC_CFGR_DISCNUM ADC_CFGR_DISCNUM_Msk
#define ADC_CFGR_DISCNUM_0 (0x1UL << ADC_CFGR_DISCNUM_Pos)
#define ADC_CFGR_DISCNUM_1 (0x2UL << ADC_CFGR_DISCNUM_Pos)
#define ADC_CFGR_DISCNUM_2 (0x4UL << ADC_CFGR_DISCNUM_Pos)
#define ADC_CFGR_JDISCEN_Pos (20U)
#define ADC_CFGR_JDISCEN_Msk (0x1UL << ADC_CFGR_JDISCEN_Pos)
#define ADC_CFGR_JDISCEN ADC_CFGR_JDISCEN_Msk
#define ADC_CFGR_JQM_Pos (21U)
#define ADC_CFGR_JQM_Msk (0x1UL << ADC_CFGR_JQM_Pos)
#define ADC_CFGR_JQM ADC_CFGR_JQM_Msk
#define ADC_CFGR_AWD1SGL_Pos (22U)
#define ADC_CFGR_AWD1SGL_Msk (0x1UL << ADC_CFGR_AWD1SGL_Pos)
#define ADC_CFGR_AWD1SGL ADC_CFGR_AWD1SGL_Msk
#define ADC_CFGR_AWD1EN_Pos (23U)
#define ADC_CFGR_AWD1EN_Msk (0x1UL << ADC_CFGR_AWD1EN_Pos)
#define ADC_CFGR_AWD1EN ADC_CFGR_AWD1EN_Msk
#define ADC_CFGR_JAWD1EN_Pos (24U)
#define ADC_CFGR_JAWD1EN_Msk (0x1UL << ADC_CFGR_JAWD1EN_Pos)
#define ADC_CFGR_JAWD1EN ADC_CFGR_JAWD1EN_Msk
#define ADC_CFGR_JAUTO_Pos (25U)
#define ADC_CFGR_JAUTO_Msk (0x1UL << ADC_CFGR_JAUTO_Pos)
#define ADC_CFGR_JAUTO ADC_CFGR_JAUTO_Msk
#define ADC_CFGR_AWD1CH_Pos (26U)
#define ADC_CFGR_AWD1CH_Msk (0x1FUL << ADC_CFGR_AWD1CH_Pos)
#define ADC_CFGR_AWD1CH ADC_CFGR_AWD1CH_Msk
#define ADC_CFGR_AWD1CH_0 (0x01UL << ADC_CFGR_AWD1CH_Pos)
#define ADC_CFGR_AWD1CH_1 (0x02UL << ADC_CFGR_AWD1CH_Pos)
#define ADC_CFGR_AWD1CH_2 (0x04UL << ADC_CFGR_AWD1CH_Pos)
#define ADC_CFGR_AWD1CH_3 (0x08UL << ADC_CFGR_AWD1CH_Pos)
#define ADC_CFGR_AWD1CH_4 (0x10UL << ADC_CFGR_AWD1CH_Pos)
#define ADC_CFGR_JQDIS_Pos (31U)
#define ADC_CFGR_JQDIS_Msk (0x1UL << ADC_CFGR_JQDIS_Pos)
#define ADC_CFGR_JQDIS ADC_CFGR_JQDIS_Msk
#define ADC_CFGR2_ROVSE_Pos (0U)
#define ADC_CFGR2_ROVSE_Msk (0x1UL << ADC_CFGR2_ROVSE_Pos)
#define ADC_CFGR2_ROVSE ADC_CFGR2_ROVSE_Msk
#define ADC_CFGR2_JOVSE_Pos (1U)
#define ADC_CFGR2_JOVSE_Msk (0x1UL << ADC_CFGR2_JOVSE_Pos)
#define ADC_CFGR2_JOVSE ADC_CFGR2_JOVSE_Msk
#define ADC_CFGR2_OVSR_Pos (2U)
#define ADC_CFGR2_OVSR_Msk (0x7UL << ADC_CFGR2_OVSR_Pos)
#define ADC_CFGR2_OVSR ADC_CFGR2_OVSR_Msk
#define ADC_CFGR2_OVSR_0 (0x1UL << ADC_CFGR2_OVSR_Pos)
#define ADC_CFGR2_OVSR_1 (0x2UL << ADC_CFGR2_OVSR_Pos)
#define ADC_CFGR2_OVSR_2 (0x4UL << ADC_CFGR2_OVSR_Pos)
#define ADC_CFGR2_OVSS_Pos (5U)
#define ADC_CFGR2_OVSS_Msk (0xFUL << ADC_CFGR2_OVSS_Pos)
#define ADC_CFGR2_OVSS ADC_CFGR2_OVSS_Msk
#define ADC_CFGR2_OVSS_0 (0x1UL << ADC_CFGR2_OVSS_Pos)
#define ADC_CFGR2_OVSS_1 (0x2UL << ADC_CFGR2_OVSS_Pos)
#define ADC_CFGR2_OVSS_2 (0x4UL << ADC_CFGR2_OVSS_Pos)
#define ADC_CFGR2_OVSS_3 (0x8UL << ADC_CFGR2_OVSS_Pos)
#define ADC_CFGR2_TROVS_Pos (9U)
#define ADC_CFGR2_TROVS_Msk (0x1UL << ADC_CFGR2_TROVS_Pos)
#define ADC_CFGR2_TROVS ADC_CFGR2_TROVS_Msk
#define ADC_CFGR2_ROVSM_Pos (10U)
#define ADC_CFGR2_ROVSM_Msk (0x1UL << ADC_CFGR2_ROVSM_Pos)
#define ADC_CFGR2_ROVSM ADC_CFGR2_ROVSM_Msk
#define ADC_SMPR1_SMP0_Pos (0U)
#define ADC_SMPR1_SMP0_Msk (0x7UL << ADC_SMPR1_SMP0_Pos)
#define ADC_SMPR1_SMP0 ADC_SMPR1_SMP0_Msk
#define ADC_SMPR1_SMP0_0 (0x1UL << ADC_SMPR1_SMP0_Pos)
#define ADC_SMPR1_SMP0_1 (0x2UL << ADC_SMPR1_SMP0_Pos)
#define ADC_SMPR1_SMP0_2 (0x4UL << ADC_SMPR1_SMP0_Pos)
#define ADC_SMPR1_SMP1_Pos (3U)
#define ADC_SMPR1_SMP1_Msk (0x7UL << ADC_SMPR1_SMP1_Pos)
#define ADC_SMPR1_SMP1 ADC_SMPR1_SMP1_Msk
#define ADC_SMPR1_SMP1_0 (0x1UL << ADC_SMPR1_SMP1_Pos)
#define ADC_SMPR1_SMP1_1 (0x2UL << ADC_SMPR1_SMP1_Pos)
#define ADC_SMPR1_SMP1_2 (0x4UL << ADC_SMPR1_SMP1_Pos)
#define ADC_SMPR1_SMP2_Pos (6U)
#define ADC_SMPR1_SMP2_Msk (0x7UL << ADC_SMPR1_SMP2_Pos)
#define ADC_SMPR1_SMP2 ADC_SMPR1_SMP2_Msk
#define ADC_SMPR1_SMP2_0 (0x1UL << ADC_SMPR1_SMP2_Pos)
#define ADC_SMPR1_SMP2_1 (0x2UL << ADC_SMPR1_SMP2_Pos)
#define ADC_SMPR1_SMP2_2 (0x4UL << ADC_SMPR1_SMP2_Pos)
#define ADC_SMPR1_SMP3_Pos (9U)
#define ADC_SMPR1_SMP3_Msk (0x7UL << ADC_SMPR1_SMP3_Pos)
#define ADC_SMPR1_SMP3 ADC_SMPR1_SMP3_Msk
#define ADC_SMPR1_SMP3_0 (0x1UL << ADC_SMPR1_SMP3_Pos)
#define ADC_SMPR1_SMP3_1 (0x2UL << ADC_SMPR1_SMP3_Pos)
#define ADC_SMPR1_SMP3_2 (0x4UL << ADC_SMPR1_SMP3_Pos)
#define ADC_SMPR1_SMP4_Pos (12U)
#define ADC_SMPR1_SMP4_Msk (0x7UL << ADC_SMPR1_SMP4_Pos)
#define ADC_SMPR1_SMP4 ADC_SMPR1_SMP4_Msk
#define ADC_SMPR1_SMP4_0 (0x1UL << ADC_SMPR1_SMP4_Pos)
#define ADC_SMPR1_SMP4_1 (0x2UL << ADC_SMPR1_SMP4_Pos)
#define ADC_SMPR1_SMP4_2 (0x4UL << ADC_SMPR1_SMP4_Pos)
#define ADC_SMPR1_SMP5_Pos (15U)
#define ADC_SMPR1_SMP5_Msk (0x7UL << ADC_SMPR1_SMP5_Pos)
#define ADC_SMPR1_SMP5 ADC_SMPR1_SMP5_Msk
#define ADC_SMPR1_SMP5_0 (0x1UL << ADC_SMPR1_SMP5_Pos)
#define ADC_SMPR1_SMP5_1 (0x2UL << ADC_SMPR1_SMP5_Pos)
#define ADC_SMPR1_SMP5_2 (0x4UL << ADC_SMPR1_SMP5_Pos)
#define ADC_SMPR1_SMP6_Pos (18U)
#define ADC_SMPR1_SMP6_Msk (0x7UL << ADC_SMPR1_SMP6_Pos)
#define ADC_SMPR1_SMP6 ADC_SMPR1_SMP6_Msk
#define ADC_SMPR1_SMP6_0 (0x1UL << ADC_SMPR1_SMP6_Pos)
#define ADC_SMPR1_SMP6_1 (0x2UL << ADC_SMPR1_SMP6_Pos)
#define ADC_SMPR1_SMP6_2 (0x4UL << ADC_SMPR1_SMP6_Pos)
#define ADC_SMPR1_SMP7_Pos (21U)
#define ADC_SMPR1_SMP7_Msk (0x7UL << ADC_SMPR1_SMP7_Pos)
#define ADC_SMPR1_SMP7 ADC_SMPR1_SMP7_Msk
#define ADC_SMPR1_SMP7_0 (0x1UL << ADC_SMPR1_SMP7_Pos)
#define ADC_SMPR1_SMP7_1 (0x2UL << ADC_SMPR1_SMP7_Pos)
#define ADC_SMPR1_SMP7_2 (0x4UL << ADC_SMPR1_SMP7_Pos)
#define ADC_SMPR1_SMP8_Pos (24U)
#define ADC_SMPR1_SMP8_Msk (0x7UL << ADC_SMPR1_SMP8_Pos)
#define ADC_SMPR1_SMP8 ADC_SMPR1_SMP8_Msk
#define ADC_SMPR1_SMP8_0 (0x1UL << ADC_SMPR1_SMP8_Pos)
#define ADC_SMPR1_SMP8_1 (0x2UL << ADC_SMPR1_SMP8_Pos)
#define ADC_SMPR1_SMP8_2 (0x4UL << ADC_SMPR1_SMP8_Pos)
#define ADC_SMPR1_SMP9_Pos (27U)
#define ADC_SMPR1_SMP9_Msk (0x7UL << ADC_SMPR1_SMP9_Pos)
#define ADC_SMPR1_SMP9 ADC_SMPR1_SMP9_Msk
#define ADC_SMPR1_SMP9_0 (0x1UL << ADC_SMPR1_SMP9_Pos)
#define ADC_SMPR1_SMP9_1 (0x2UL << ADC_SMPR1_SMP9_Pos)
#define ADC_SMPR1_SMP9_2 (0x4UL << ADC_SMPR1_SMP9_Pos)
#define ADC_SMPR2_SMP10_Pos (0U)
#define ADC_SMPR2_SMP10_Msk (0x7UL << ADC_SMPR2_SMP10_Pos)
#define ADC_SMPR2_SMP10 ADC_SMPR2_SMP10_Msk
#define ADC_SMPR2_SMP10_0 (0x1UL << ADC_SMPR2_SMP10_Pos)
#define ADC_SMPR2_SMP10_1 (0x2UL << ADC_SMPR2_SMP10_Pos)
#define ADC_SMPR2_SMP10_2 (0x4UL << ADC_SMPR2_SMP10_Pos)
#define ADC_SMPR2_SMP11_Pos (3U)
#define ADC_SMPR2_SMP11_Msk (0x7UL << ADC_SMPR2_SMP11_Pos)
#define ADC_SMPR2_SMP11 ADC_SMPR2_SMP11_Msk
#define ADC_SMPR2_SMP11_0 (0x1UL << ADC_SMPR2_SMP11_Pos)
#define ADC_SMPR2_SMP11_1 (0x2UL << ADC_SMPR2_SMP11_Pos)
#define ADC_SMPR2_SMP11_2 (0x4UL << ADC_SMPR2_SMP11_Pos)
#define ADC_SMPR2_SMP12_Pos (6U)
#define ADC_SMPR2_SMP12_Msk (0x7UL << ADC_SMPR2_SMP12_Pos)
#define ADC_SMPR2_SMP12 ADC_SMPR2_SMP12_Msk
#define ADC_SMPR2_SMP12_0 (0x1UL << ADC_SMPR2_SMP12_Pos)
#define ADC_SMPR2_SMP12_1 (0x2UL << ADC_SMPR2_SMP12_Pos)
#define ADC_SMPR2_SMP12_2 (0x4UL << ADC_SMPR2_SMP12_Pos)
#define ADC_SMPR2_SMP13_Pos (9U)
#define ADC_SMPR2_SMP13_Msk (0x7UL << ADC_SMPR2_SMP13_Pos)
#define ADC_SMPR2_SMP13 ADC_SMPR2_SMP13_Msk
#define ADC_SMPR2_SMP13_0 (0x1UL << ADC_SMPR2_SMP13_Pos)
#define ADC_SMPR2_SMP13_1 (0x2UL << ADC_SMPR2_SMP13_Pos)
#define ADC_SMPR2_SMP13_2 (0x4UL << ADC_SMPR2_SMP13_Pos)
#define ADC_SMPR2_SMP14_Pos (12U)
#define ADC_SMPR2_SMP14_Msk (0x7UL << ADC_SMPR2_SMP14_Pos)
#define ADC_SMPR2_SMP14 ADC_SMPR2_SMP14_Msk
#define ADC_SMPR2_SMP14_0 (0x1UL << ADC_SMPR2_SMP14_Pos)
#define ADC_SMPR2_SMP14_1 (0x2UL << ADC_SMPR2_SMP14_Pos)
#define ADC_SMPR2_SMP14_2 (0x4UL << ADC_SMPR2_SMP14_Pos)
#define ADC_SMPR2_SMP15_Pos (15U)
#define ADC_SMPR2_SMP15_Msk (0x7UL << ADC_SMPR2_SMP15_Pos)
#define ADC_SMPR2_SMP15 ADC_SMPR2_SMP15_Msk
#define ADC_SMPR2_SMP15_0 (0x1UL << ADC_SMPR2_SMP15_Pos)
#define ADC_SMPR2_SMP15_1 (0x2UL << ADC_SMPR2_SMP15_Pos)
#define ADC_SMPR2_SMP15_2 (0x4UL << ADC_SMPR2_SMP15_Pos)
#define ADC_SMPR2_SMP16_Pos (18U)
#define ADC_SMPR2_SMP16_Msk (0x7UL << ADC_SMPR2_SMP16_Pos)
#define ADC_SMPR2_SMP16 ADC_SMPR2_SMP16_Msk
#define ADC_SMPR2_SMP16_0 (0x1UL << ADC_SMPR2_SMP16_Pos)
#define ADC_SMPR2_SMP16_1 (0x2UL << ADC_SMPR2_SMP16_Pos)
#define ADC_SMPR2_SMP16_2 (0x4UL << ADC_SMPR2_SMP16_Pos)
#define ADC_SMPR2_SMP17_Pos (21U)
#define ADC_SMPR2_SMP17_Msk (0x7UL << ADC_SMPR2_SMP17_Pos)
#define ADC_SMPR2_SMP17 ADC_SMPR2_SMP17_Msk
#define ADC_SMPR2_SMP17_0 (0x1UL << ADC_SMPR2_SMP17_Pos)
#define ADC_SMPR2_SMP17_1 (0x2UL << ADC_SMPR2_SMP17_Pos)
#define ADC_SMPR2_SMP17_2 (0x4UL << ADC_SMPR2_SMP17_Pos)
#define ADC_SMPR2_SMP18_Pos (24U)
#define ADC_SMPR2_SMP18_Msk (0x7UL << ADC_SMPR2_SMP18_Pos)
#define ADC_SMPR2_SMP18 ADC_SMPR2_SMP18_Msk
#define ADC_SMPR2_SMP18_0 (0x1UL << ADC_SMPR2_SMP18_Pos)
#define ADC_SMPR2_SMP18_1 (0x2UL << ADC_SMPR2_SMP18_Pos)
#define ADC_SMPR2_SMP18_2 (0x4UL << ADC_SMPR2_SMP18_Pos)
#define ADC_TR1_LT1_Pos (0U)
#define ADC_TR1_LT1_Msk (0xFFFUL << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1 ADC_TR1_LT1_Msk
#define ADC_TR1_LT1_0 (0x001UL << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_1 (0x002UL << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_2 (0x004UL << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_3 (0x008UL << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_4 (0x010UL << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_5 (0x020UL << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_6 (0x040UL << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_7 (0x080UL << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_8 (0x100UL << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_9 (0x200UL << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_10 (0x400UL << ADC_TR1_LT1_Pos)
#define ADC_TR1_LT1_11 (0x800UL << ADC_TR1_LT1_Pos)
#define ADC_TR1_HT1_Pos (16U)
#define ADC_TR1_HT1_Msk (0xFFFUL << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1 ADC_TR1_HT1_Msk
#define ADC_TR1_HT1_0 (0x001UL << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_1 (0x002UL << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_2 (0x004UL << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_3 (0x008UL << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_4 (0x010UL << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_5 (0x020UL << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_6 (0x040UL << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_7 (0x080UL << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_8 (0x100UL << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_9 (0x200UL << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_10 (0x400UL << ADC_TR1_HT1_Pos)
#define ADC_TR1_HT1_11 (0x800UL << ADC_TR1_HT1_Pos)
#define ADC_TR2_LT2_Pos (0U)
#define ADC_TR2_LT2_Msk (0xFFUL << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2 ADC_TR2_LT2_Msk
#define ADC_TR2_LT2_0 (0x01UL << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_1 (0x02UL << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_2 (0x04UL << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_3 (0x08UL << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_4 (0x10UL << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_5 (0x20UL << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_6 (0x40UL << ADC_TR2_LT2_Pos)
#define ADC_TR2_LT2_7 (0x80UL << ADC_TR2_LT2_Pos)
#define ADC_TR2_HT2_Pos (16U)
#define ADC_TR2_HT2_Msk (0xFFUL << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2 ADC_TR2_HT2_Msk
#define ADC_TR2_HT2_0 (0x01UL << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_1 (0x02UL << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_2 (0x04UL << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_3 (0x08UL << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_4 (0x10UL << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_5 (0x20UL << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_6 (0x40UL << ADC_TR2_HT2_Pos)
#define ADC_TR2_HT2_7 (0x80UL << ADC_TR2_HT2_Pos)
#define ADC_TR3_LT3_Pos (0U)
#define ADC_TR3_LT3_Msk (0xFFUL << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3 ADC_TR3_LT3_Msk
#define ADC_TR3_LT3_0 (0x01UL << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_1 (0x02UL << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_2 (0x04UL << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_3 (0x08UL << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_4 (0x10UL << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_5 (0x20UL << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_6 (0x40UL << ADC_TR3_LT3_Pos)
#define ADC_TR3_LT3_7 (0x80UL << ADC_TR3_LT3_Pos)
#define ADC_TR3_HT3_Pos (16U)
#define ADC_TR3_HT3_Msk (0xFFUL << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3 ADC_TR3_HT3_Msk
#define ADC_TR3_HT3_0 (0x01UL << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_1 (0x02UL << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_2 (0x04UL << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_3 (0x08UL << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_4 (0x10UL << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_5 (0x20UL << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_6 (0x40UL << ADC_TR3_HT3_Pos)
#define ADC_TR3_HT3_7 (0x80UL << ADC_TR3_HT3_Pos)
#define ADC_SQR1_L_Pos (0U)
#define ADC_SQR1_L_Msk (0xFUL << ADC_SQR1_L_Pos)
#define ADC_SQR1_L ADC_SQR1_L_Msk
#define ADC_SQR1_L_0 (0x1UL << ADC_SQR1_L_Pos)
#define ADC_SQR1_L_1 (0x2UL << ADC_SQR1_L_Pos)
#define ADC_SQR1_L_2 (0x4UL << ADC_SQR1_L_Pos)
#define ADC_SQR1_L_3 (0x8UL << ADC_SQR1_L_Pos)
#define ADC_SQR1_SQ1_Pos (6U)
#define ADC_SQR1_SQ1_Msk (0x1FUL << ADC_SQR1_SQ1_Pos)
#define ADC_SQR1_SQ1 ADC_SQR1_SQ1_Msk
#define ADC_SQR1_SQ1_0 (0x01UL << ADC_SQR1_SQ1_Pos)
#define ADC_SQR1_SQ1_1 (0x02UL << ADC_SQR1_SQ1_Pos)
#define ADC_SQR1_SQ1_2 (0x04UL << ADC_SQR1_SQ1_Pos)
#define ADC_SQR1_SQ1_3 (0x08UL << ADC_SQR1_SQ1_Pos)
#define ADC_SQR1_SQ1_4 (0x10UL << ADC_SQR1_SQ1_Pos)
#define ADC_SQR1_SQ2_Pos (12U)
#define ADC_SQR1_SQ2_Msk (0x1FUL << ADC_SQR1_SQ2_Pos)
#define ADC_SQR1_SQ2 ADC_SQR1_SQ2_Msk
#define ADC_SQR1_SQ2_0 (0x01UL << ADC_SQR1_SQ2_Pos)
#define ADC_SQR1_SQ2_1 (0x02UL << ADC_SQR1_SQ2_Pos)
#define ADC_SQR1_SQ2_2 (0x04UL << ADC_SQR1_SQ2_Pos)
#define ADC_SQR1_SQ2_3 (0x08UL << ADC_SQR1_SQ2_Pos)
#define ADC_SQR1_SQ2_4 (0x10UL << ADC_SQR1_SQ2_Pos)
#define ADC_SQR1_SQ3_Pos (18U)
#define ADC_SQR1_SQ3_Msk (0x1FUL << ADC_SQR1_SQ3_Pos)
#define ADC_SQR1_SQ3 ADC_SQR1_SQ3_Msk
#define ADC_SQR1_SQ3_0 (0x01UL << ADC_SQR1_SQ3_Pos)
#define ADC_SQR1_SQ3_1 (0x02UL << ADC_SQR1_SQ3_Pos)
#define ADC_SQR1_SQ3_2 (0x04UL << ADC_SQR1_SQ3_Pos)
#define ADC_SQR1_SQ3_3 (0x08UL << ADC_SQR1_SQ3_Pos)
#define ADC_SQR1_SQ3_4 (0x10UL << ADC_SQR1_SQ3_Pos)
#define ADC_SQR1_SQ4_Pos (24U)
#define ADC_SQR1_SQ4_Msk (0x1FUL << ADC_SQR1_SQ4_Pos)
#define ADC_SQR1_SQ4 ADC_SQR1_SQ4_Msk
#define ADC_SQR1_SQ4_0 (0x01UL << ADC_SQR1_SQ4_Pos)
#define ADC_SQR1_SQ4_1 (0x02UL << ADC_SQR1_SQ4_Pos)
#define ADC_SQR1_SQ4_2 (0x04UL << ADC_SQR1_SQ4_Pos)
#define ADC_SQR1_SQ4_3 (0x08UL << ADC_SQR1_SQ4_Pos)
#define ADC_SQR1_SQ4_4 (0x10UL << ADC_SQR1_SQ4_Pos)
#define ADC_SQR2_SQ5_Pos (0U)
#define ADC_SQR2_SQ5_Msk (0x1FUL << ADC_SQR2_SQ5_Pos)
#define ADC_SQR2_SQ5 ADC_SQR2_SQ5_Msk
#define ADC_SQR2_SQ5_0 (0x01UL << ADC_SQR2_SQ5_Pos)
#define ADC_SQR2_SQ5_1 (0x02UL << ADC_SQR2_SQ5_Pos)
#define ADC_SQR2_SQ5_2 (0x04UL << ADC_SQR2_SQ5_Pos)
#define ADC_SQR2_SQ5_3 (0x08UL << ADC_SQR2_SQ5_Pos)
#define ADC_SQR2_SQ5_4 (0x10UL << ADC_SQR2_SQ5_Pos)
#define ADC_SQR2_SQ6_Pos (6U)
#define ADC_SQR2_SQ6_Msk (0x1FUL << ADC_SQR2_SQ6_Pos)
#define ADC_SQR2_SQ6 ADC_SQR2_SQ6_Msk
#define ADC_SQR2_SQ6_0 (0x01UL << ADC_SQR2_SQ6_Pos)
#define ADC_SQR2_SQ6_1 (0x02UL << ADC_SQR2_SQ6_Pos)
#define ADC_SQR2_SQ6_2 (0x04UL << ADC_SQR2_SQ6_Pos)
#define ADC_SQR2_SQ6_3 (0x08UL << ADC_SQR2_SQ6_Pos)
#define ADC_SQR2_SQ6_4 (0x10UL << ADC_SQR2_SQ6_Pos)
#define ADC_SQR2_SQ7_Pos (12U)
#define ADC_SQR2_SQ7_Msk (0x1FUL << ADC_SQR2_SQ7_Pos)
#define ADC_SQR2_SQ7 ADC_SQR2_SQ7_Msk
#define ADC_SQR2_SQ7_0 (0x01UL << ADC_SQR2_SQ7_Pos)
#define ADC_SQR2_SQ7_1 (0x02UL << ADC_SQR2_SQ7_Pos)
#define ADC_SQR2_SQ7_2 (0x04UL << ADC_SQR2_SQ7_Pos)
#define ADC_SQR2_SQ7_3 (0x08UL << ADC_SQR2_SQ7_Pos)
#define ADC_SQR2_SQ7_4 (0x10UL << ADC_SQR2_SQ7_Pos)
#define ADC_SQR2_SQ8_Pos (18U)
#define ADC_SQR2_SQ8_Msk (0x1FUL << ADC_SQR2_SQ8_Pos)
#define ADC_SQR2_SQ8 ADC_SQR2_SQ8_Msk
#define ADC_SQR2_SQ8_0 (0x01UL << ADC_SQR2_SQ8_Pos)
#define ADC_SQR2_SQ8_1 (0x02UL << ADC_SQR2_SQ8_Pos)
#define ADC_SQR2_SQ8_2 (0x04UL << ADC_SQR2_SQ8_Pos)
#define ADC_SQR2_SQ8_3 (0x08UL << ADC_SQR2_SQ8_Pos)
#define ADC_SQR2_SQ8_4 (0x10UL << ADC_SQR2_SQ8_Pos)
#define ADC_SQR2_SQ9_Pos (24U)
#define ADC_SQR2_SQ9_Msk (0x1FUL << ADC_SQR2_SQ9_Pos)
#define ADC_SQR2_SQ9 ADC_SQR2_SQ9_Msk
#define ADC_SQR2_SQ9_0 (0x01UL << ADC_SQR2_SQ9_Pos)
#define ADC_SQR2_SQ9_1 (0x02UL << ADC_SQR2_SQ9_Pos)
#define ADC_SQR2_SQ9_2 (0x04UL << ADC_SQR2_SQ9_Pos)
#define ADC_SQR2_SQ9_3 (0x08UL << ADC_SQR2_SQ9_Pos)
#define ADC_SQR2_SQ9_4 (0x10UL << ADC_SQR2_SQ9_Pos)
#define ADC_SQR3_SQ10_Pos (0U)
#define ADC_SQR3_SQ10_Msk (0x1FUL << ADC_SQR3_SQ10_Pos)
#define ADC_SQR3_SQ10 ADC_SQR3_SQ10_Msk
#define ADC_SQR3_SQ10_0 (0x01UL << ADC_SQR3_SQ10_Pos)
#define ADC_SQR3_SQ10_1 (0x02UL << ADC_SQR3_SQ10_Pos)
#define ADC_SQR3_SQ10_2 (0x04UL << ADC_SQR3_SQ10_Pos)
#define ADC_SQR3_SQ10_3 (0x08UL << ADC_SQR3_SQ10_Pos)
#define ADC_SQR3_SQ10_4 (0x10UL << ADC_SQR3_SQ10_Pos)
#define ADC_SQR3_SQ11_Pos (6U)
#define ADC_SQR3_SQ11_Msk (0x1FUL << ADC_SQR3_SQ11_Pos)
#define ADC_SQR3_SQ11 ADC_SQR3_SQ11_Msk
#define ADC_SQR3_SQ11_0 (0x01UL << ADC_SQR3_SQ11_Pos)
#define ADC_SQR3_SQ11_1 (0x02UL << ADC_SQR3_SQ11_Pos)
#define ADC_SQR3_SQ11_2 (0x04UL << ADC_SQR3_SQ11_Pos)
#define ADC_SQR3_SQ11_3 (0x08UL << ADC_SQR3_SQ11_Pos)
#define ADC_SQR3_SQ11_4 (0x10UL << ADC_SQR3_SQ11_Pos)
#define ADC_SQR3_SQ12_Pos (12U)
#define ADC_SQR3_SQ12_Msk (0x1FUL << ADC_SQR3_SQ12_Pos)
#define ADC_SQR3_SQ12 ADC_SQR3_SQ12_Msk
#define ADC_SQR3_SQ12_0 (0x01UL << ADC_SQR3_SQ12_Pos)
#define ADC_SQR3_SQ12_1 (0x02UL << ADC_SQR3_SQ12_Pos)
#define ADC_SQR3_SQ12_2 (0x04UL << ADC_SQR3_SQ12_Pos)
#define ADC_SQR3_SQ12_3 (0x08UL << ADC_SQR3_SQ12_Pos)
#define ADC_SQR3_SQ12_4 (0x10UL << ADC_SQR3_SQ12_Pos)
#define ADC_SQR3_SQ13_Pos (18U)
#define ADC_SQR3_SQ13_Msk (0x1FUL << ADC_SQR3_SQ13_Pos)
#define ADC_SQR3_SQ13 ADC_SQR3_SQ13_Msk
#define ADC_SQR3_SQ13_0 (0x01UL << ADC_SQR3_SQ13_Pos)
#define ADC_SQR3_SQ13_1 (0x02UL << ADC_SQR3_SQ13_Pos)
#define ADC_SQR3_SQ13_2 (0x04UL << ADC_SQR3_SQ13_Pos)
#define ADC_SQR3_SQ13_3 (0x08UL << ADC_SQR3_SQ13_Pos)
#define ADC_SQR3_SQ13_4 (0x10UL << ADC_SQR3_SQ13_Pos)
#define ADC_SQR3_SQ14_Pos (24U)
#define ADC_SQR3_SQ14_Msk (0x1FUL << ADC_SQR3_SQ14_Pos)
#define ADC_SQR3_SQ14 ADC_SQR3_SQ14_Msk
#define ADC_SQR3_SQ14_0 (0x01UL << ADC_SQR3_SQ14_Pos)
#define ADC_SQR3_SQ14_1 (0x02UL << ADC_SQR3_SQ14_Pos)
#define ADC_SQR3_SQ14_2 (0x04UL << ADC_SQR3_SQ14_Pos)
#define ADC_SQR3_SQ14_3 (0x08UL << ADC_SQR3_SQ14_Pos)
#define ADC_SQR3_SQ14_4 (0x10UL << ADC_SQR3_SQ14_Pos)
#define ADC_SQR4_SQ15_Pos (0U)
#define ADC_SQR4_SQ15_Msk (0x1FUL << ADC_SQR4_SQ15_Pos)
#define ADC_SQR4_SQ15 ADC_SQR4_SQ15_Msk
#define ADC_SQR4_SQ15_0 (0x01UL << ADC_SQR4_SQ15_Pos)
#define ADC_SQR4_SQ15_1 (0x02UL << ADC_SQR4_SQ15_Pos)
#define ADC_SQR4_SQ15_2 (0x04UL << ADC_SQR4_SQ15_Pos)
#define ADC_SQR4_SQ15_3 (0x08UL << ADC_SQR4_SQ15_Pos)
#define ADC_SQR4_SQ15_4 (0x10UL << ADC_SQR4_SQ15_Pos)
#define ADC_SQR4_SQ16_Pos (6U)
#define ADC_SQR4_SQ16_Msk (0x1FUL << ADC_SQR4_SQ16_Pos)
#define ADC_SQR4_SQ16 ADC_SQR4_SQ16_Msk
#define ADC_SQR4_SQ16_0 (0x01UL << ADC_SQR4_SQ16_Pos)
#define ADC_SQR4_SQ16_1 (0x02UL << ADC_SQR4_SQ16_Pos)
#define ADC_SQR4_SQ16_2 (0x04UL << ADC_SQR4_SQ16_Pos)
#define ADC_SQR4_SQ16_3 (0x08UL << ADC_SQR4_SQ16_Pos)
#define ADC_SQR4_SQ16_4 (0x10UL << ADC_SQR4_SQ16_Pos)
#define ADC_DR_RDATA_Pos (0U)
#define ADC_DR_RDATA_Msk (0xFFFFUL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA ADC_DR_RDATA_Msk
#define ADC_DR_RDATA_0 (0x0001UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_1 (0x0002UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_2 (0x0004UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_3 (0x0008UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_4 (0x0010UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_5 (0x0020UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_6 (0x0040UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_7 (0x0080UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_8 (0x0100UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_9 (0x0200UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_10 (0x0400UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_11 (0x0800UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_12 (0x1000UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_13 (0x2000UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_14 (0x4000UL << ADC_DR_RDATA_Pos)
#define ADC_DR_RDATA_15 (0x8000UL << ADC_DR_RDATA_Pos)
#define ADC_JSQR_JL_Pos (0U)
#define ADC_JSQR_JL_Msk (0x3UL << ADC_JSQR_JL_Pos)
#define ADC_JSQR_JL ADC_JSQR_JL_Msk
#define ADC_JSQR_JL_0 (0x1UL << ADC_JSQR_JL_Pos)
#define ADC_JSQR_JL_1 (0x2UL << ADC_JSQR_JL_Pos)
#define ADC_JSQR_JEXTSEL_Pos (2U)
#define ADC_JSQR_JEXTSEL_Msk (0xFUL << ADC_JSQR_JEXTSEL_Pos)
#define ADC_JSQR_JEXTSEL ADC_JSQR_JEXTSEL_Msk
#define ADC_JSQR_JEXTSEL_0 (0x1UL << ADC_JSQR_JEXTSEL_Pos)
#define ADC_JSQR_JEXTSEL_1 (0x2UL << ADC_JSQR_JEXTSEL_Pos)
#define ADC_JSQR_JEXTSEL_2 (0x4UL << ADC_JSQR_JEXTSEL_Pos)
#define ADC_JSQR_JEXTSEL_3 (0x8UL << ADC_JSQR_JEXTSEL_Pos)
#define ADC_JSQR_JEXTEN_Pos (6U)
#define ADC_JSQR_JEXTEN_Msk (0x3UL << ADC_JSQR_JEXTEN_Pos)
#define ADC_JSQR_JEXTEN ADC_JSQR_JEXTEN_Msk
#define ADC_JSQR_JEXTEN_0 (0x1UL << ADC_JSQR_JEXTEN_Pos)
#define ADC_JSQR_JEXTEN_1 (0x2UL << ADC_JSQR_JEXTEN_Pos)
#define ADC_JSQR_JSQ1_Pos (8U)
#define ADC_JSQR_JSQ1_Msk (0x1FUL << ADC_JSQR_JSQ1_Pos)
#define ADC_JSQR_JSQ1 ADC_JSQR_JSQ1_Msk
#define ADC_JSQR_JSQ1_0 (0x01UL << ADC_JSQR_JSQ1_Pos)
#define ADC_JSQR_JSQ1_1 (0x02UL << ADC_JSQR_JSQ1_Pos)
#define ADC_JSQR_JSQ1_2 (0x04UL << ADC_JSQR_JSQ1_Pos)
#define ADC_JSQR_JSQ1_3 (0x08UL << ADC_JSQR_JSQ1_Pos)
#define ADC_JSQR_JSQ1_4 (0x10UL << ADC_JSQR_JSQ1_Pos)
#define ADC_JSQR_JSQ2_Pos (14U)
#define ADC_JSQR_JSQ2_Msk (0x1FUL << ADC_JSQR_JSQ2_Pos)
#define ADC_JSQR_JSQ2 ADC_JSQR_JSQ2_Msk
#define ADC_JSQR_JSQ2_0 (0x01UL << ADC_JSQR_JSQ2_Pos)
#define ADC_JSQR_JSQ2_1 (0x02UL << ADC_JSQR_JSQ2_Pos)
#define ADC_JSQR_JSQ2_2 (0x04UL << ADC_JSQR_JSQ2_Pos)
#define ADC_JSQR_JSQ2_3 (0x08UL << ADC_JSQR_JSQ2_Pos)
#define ADC_JSQR_JSQ2_4 (0x10UL << ADC_JSQR_JSQ2_Pos)
#define ADC_JSQR_JSQ3_Pos (20U)
#define ADC_JSQR_JSQ3_Msk (0x1FUL << ADC_JSQR_JSQ3_Pos)
#define ADC_JSQR_JSQ3 ADC_JSQR_JSQ3_Msk
#define ADC_JSQR_JSQ3_0 (0x01UL << ADC_JSQR_JSQ3_Pos)
#define ADC_JSQR_JSQ3_1 (0x02UL << ADC_JSQR_JSQ3_Pos)
#define ADC_JSQR_JSQ3_2 (0x04UL << ADC_JSQR_JSQ3_Pos)
#define ADC_JSQR_JSQ3_3 (0x08UL << ADC_JSQR_JSQ3_Pos)
#define ADC_JSQR_JSQ3_4 (0x10UL << ADC_JSQR_JSQ3_Pos)
#define ADC_JSQR_JSQ4_Pos (26U)
#define ADC_JSQR_JSQ4_Msk (0x1FUL << ADC_JSQR_JSQ4_Pos)
#define ADC_JSQR_JSQ4 ADC_JSQR_JSQ4_Msk
#define ADC_JSQR_JSQ4_0 (0x01UL << ADC_JSQR_JSQ4_Pos)
#define ADC_JSQR_JSQ4_1 (0x02UL << ADC_JSQR_JSQ4_Pos)
#define ADC_JSQR_JSQ4_2 (0x04UL << ADC_JSQR_JSQ4_Pos)
#define ADC_JSQR_JSQ4_3 (0x08UL << ADC_JSQR_JSQ4_Pos)
#define ADC_JSQR_JSQ4_4 (0x10UL << ADC_JSQR_JSQ4_Pos)
#define ADC_OFR1_OFFSET1_Pos (0U)
#define ADC_OFR1_OFFSET1_Msk (0xFFFUL << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1 ADC_OFR1_OFFSET1_Msk
#define ADC_OFR1_OFFSET1_0 (0x001UL << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_1 (0x002UL << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_2 (0x004UL << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_3 (0x008UL << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_4 (0x010UL << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_5 (0x020UL << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_6 (0x040UL << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_7 (0x080UL << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_8 (0x100UL << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_9 (0x200UL << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_10 (0x400UL << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_11 (0x800UL << ADC_OFR1_OFFSET1_Pos)
#define ADC_OFR1_OFFSET1_CH_Pos (26U)
#define ADC_OFR1_OFFSET1_CH_Msk (0x1FUL << ADC_OFR1_OFFSET1_CH_Pos)
#define ADC_OFR1_OFFSET1_CH ADC_OFR1_OFFSET1_CH_Msk
#define ADC_OFR1_OFFSET1_CH_0 (0x01UL << ADC_OFR1_OFFSET1_CH_Pos)
#define ADC_OFR1_OFFSET1_CH_1 (0x02UL << ADC_OFR1_OFFSET1_CH_Pos)
#define ADC_OFR1_OFFSET1_CH_2 (0x04UL << ADC_OFR1_OFFSET1_CH_Pos)
#define ADC_OFR1_OFFSET1_CH_3 (0x08UL << ADC_OFR1_OFFSET1_CH_Pos)
#define ADC_OFR1_OFFSET1_CH_4 (0x10UL << ADC_OFR1_OFFSET1_CH_Pos)
#define ADC_OFR1_OFFSET1_EN_Pos (31U)
#define ADC_OFR1_OFFSET1_EN_Msk (0x1UL << ADC_OFR1_OFFSET1_EN_Pos)
#define ADC_OFR1_OFFSET1_EN ADC_OFR1_OFFSET1_EN_Msk
#define ADC_OFR2_OFFSET2_Pos (0U)
#define ADC_OFR2_OFFSET2_Msk (0xFFFUL << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2 ADC_OFR2_OFFSET2_Msk
#define ADC_OFR2_OFFSET2_0 (0x001UL << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_1 (0x002UL << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_2 (0x004UL << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_3 (0x008UL << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_4 (0x010UL << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_5 (0x020UL << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_6 (0x040UL << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_7 (0x080UL << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_8 (0x100UL << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_9 (0x200UL << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_10 (0x400UL << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_11 (0x800UL << ADC_OFR2_OFFSET2_Pos)
#define ADC_OFR2_OFFSET2_CH_Pos (26U)
#define ADC_OFR2_OFFSET2_CH_Msk (0x1FUL << ADC_OFR2_OFFSET2_CH_Pos)
#define ADC_OFR2_OFFSET2_CH ADC_OFR2_OFFSET2_CH_Msk
#define ADC_OFR2_OFFSET2_CH_0 (0x01UL << ADC_OFR2_OFFSET2_CH_Pos)
#define ADC_OFR2_OFFSET2_CH_1 (0x02UL << ADC_OFR2_OFFSET2_CH_Pos)
#define ADC_OFR2_OFFSET2_CH_2 (0x04UL << ADC_OFR2_OFFSET2_CH_Pos)
#define ADC_OFR2_OFFSET2_CH_3 (0x08UL << ADC_OFR2_OFFSET2_CH_Pos)
#define ADC_OFR2_OFFSET2_CH_4 (0x10UL << ADC_OFR2_OFFSET2_CH_Pos)
#define ADC_OFR2_OFFSET2_EN_Pos (31U)
#define ADC_OFR2_OFFSET2_EN_Msk (0x1UL << ADC_OFR2_OFFSET2_EN_Pos)
#define ADC_OFR2_OFFSET2_EN ADC_OFR2_OFFSET2_EN_Msk
#define ADC_OFR3_OFFSET3_Pos (0U)
#define ADC_OFR3_OFFSET3_Msk (0xFFFUL << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3 ADC_OFR3_OFFSET3_Msk
#define ADC_OFR3_OFFSET3_0 (0x001UL << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_1 (0x002UL << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_2 (0x004UL << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_3 (0x008UL << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_4 (0x010UL << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_5 (0x020UL << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_6 (0x040UL << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_7 (0x080UL << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_8 (0x100UL << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_9 (0x200UL << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_10 (0x400UL << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_11 (0x800UL << ADC_OFR3_OFFSET3_Pos)
#define ADC_OFR3_OFFSET3_CH_Pos (26U)
#define ADC_OFR3_OFFSET3_CH_Msk (0x1FUL << ADC_OFR3_OFFSET3_CH_Pos)
#define ADC_OFR3_OFFSET3_CH ADC_OFR3_OFFSET3_CH_Msk
#define ADC_OFR3_OFFSET3_CH_0 (0x01UL << ADC_OFR3_OFFSET3_CH_Pos)
#define ADC_OFR3_OFFSET3_CH_1 (0x02UL << ADC_OFR3_OFFSET3_CH_Pos)
#define ADC_OFR3_OFFSET3_CH_2 (0x04UL << ADC_OFR3_OFFSET3_CH_Pos)
#define ADC_OFR3_OFFSET3_CH_3 (0x08UL << ADC_OFR3_OFFSET3_CH_Pos)
#define ADC_OFR3_OFFSET3_CH_4 (0x10UL << ADC_OFR3_OFFSET3_CH_Pos)
#define ADC_OFR3_OFFSET3_EN_Pos (31U)
#define ADC_OFR3_OFFSET3_EN_Msk (0x1UL << ADC_OFR3_OFFSET3_EN_Pos)
#define ADC_OFR3_OFFSET3_EN ADC_OFR3_OFFSET3_EN_Msk
#define ADC_OFR4_OFFSET4_Pos (0U)
#define ADC_OFR4_OFFSET4_Msk (0xFFFUL << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4 ADC_OFR4_OFFSET4_Msk
#define ADC_OFR4_OFFSET4_0 (0x001UL << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_1 (0x002UL << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_2 (0x004UL << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_3 (0x008UL << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_4 (0x010UL << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_5 (0x020UL << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_6 (0x040UL << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_7 (0x080UL << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_8 (0x100UL << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_9 (0x200UL << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_10 (0x400UL << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_11 (0x800UL << ADC_OFR4_OFFSET4_Pos)
#define ADC_OFR4_OFFSET4_CH_Pos (26U)
#define ADC_OFR4_OFFSET4_CH_Msk (0x1FUL << ADC_OFR4_OFFSET4_CH_Pos)
#define ADC_OFR4_OFFSET4_CH ADC_OFR4_OFFSET4_CH_Msk
#define ADC_OFR4_OFFSET4_CH_0 (0x01UL << ADC_OFR4_OFFSET4_CH_Pos)
#define ADC_OFR4_OFFSET4_CH_1 (0x02UL << ADC_OFR4_OFFSET4_CH_Pos)
#define ADC_OFR4_OFFSET4_CH_2 (0x04UL << ADC_OFR4_OFFSET4_CH_Pos)
#define ADC_OFR4_OFFSET4_CH_3 (0x08UL << ADC_OFR4_OFFSET4_CH_Pos)
#define ADC_OFR4_OFFSET4_CH_4 (0x10UL << ADC_OFR4_OFFSET4_CH_Pos)
#define ADC_OFR4_OFFSET4_EN_Pos (31U)
#define ADC_OFR4_OFFSET4_EN_Msk (0x1UL << ADC_OFR4_OFFSET4_EN_Pos)
#define ADC_OFR4_OFFSET4_EN ADC_OFR4_OFFSET4_EN_Msk
#define ADC_JDR1_JDATA_Pos (0U)
#define ADC_JDR1_JDATA_Msk (0xFFFFUL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA ADC_JDR1_JDATA_Msk
#define ADC_JDR1_JDATA_0 (0x0001UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_1 (0x0002UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_2 (0x0004UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_3 (0x0008UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_4 (0x0010UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_5 (0x0020UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_6 (0x0040UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_7 (0x0080UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_8 (0x0100UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_9 (0x0200UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_10 (0x0400UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_11 (0x0800UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_12 (0x1000UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_13 (0x2000UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_14 (0x4000UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR1_JDATA_15 (0x8000UL << ADC_JDR1_JDATA_Pos)
#define ADC_JDR2_JDATA_Pos (0U)
#define ADC_JDR2_JDATA_Msk (0xFFFFUL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA ADC_JDR2_JDATA_Msk
#define ADC_JDR2_JDATA_0 (0x0001UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_1 (0x0002UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_2 (0x0004UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_3 (0x0008UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_4 (0x0010UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_5 (0x0020UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_6 (0x0040UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_7 (0x0080UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_8 (0x0100UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_9 (0x0200UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_10 (0x0400UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_11 (0x0800UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_12 (0x1000UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_13 (0x2000UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_14 (0x4000UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR2_JDATA_15 (0x8000UL << ADC_JDR2_JDATA_Pos)
#define ADC_JDR3_JDATA_Pos (0U)
#define ADC_JDR3_JDATA_Msk (0xFFFFUL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA ADC_JDR3_JDATA_Msk
#define ADC_JDR3_JDATA_0 (0x0001UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_1 (0x0002UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_2 (0x0004UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_3 (0x0008UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_4 (0x0010UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_5 (0x0020UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_6 (0x0040UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_7 (0x0080UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_8 (0x0100UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_9 (0x0200UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_10 (0x0400UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_11 (0x0800UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_12 (0x1000UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_13 (0x2000UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_14 (0x4000UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR3_JDATA_15 (0x8000UL << ADC_JDR3_JDATA_Pos)
#define ADC_JDR4_JDATA_Pos (0U)
#define ADC_JDR4_JDATA_Msk (0xFFFFUL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA ADC_JDR4_JDATA_Msk
#define ADC_JDR4_JDATA_0 (0x0001UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_1 (0x0002UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_2 (0x0004UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_3 (0x0008UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_4 (0x0010UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_5 (0x0020UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_6 (0x0040UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_7 (0x0080UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_8 (0x0100UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_9 (0x0200UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_10 (0x0400UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_11 (0x0800UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_12 (0x1000UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_13 (0x2000UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_14 (0x4000UL << ADC_JDR4_JDATA_Pos)
#define ADC_JDR4_JDATA_15 (0x8000UL << ADC_JDR4_JDATA_Pos)
#define ADC_AWD2CR_AWD2CH_Pos (0U)
#define ADC_AWD2CR_AWD2CH_Msk (0x7FFFFUL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH ADC_AWD2CR_AWD2CH_Msk
#define ADC_AWD2CR_AWD2CH_0 (0x00001UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_1 (0x00002UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_2 (0x00004UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_3 (0x00008UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_4 (0x00010UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_5 (0x00020UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_6 (0x00040UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_7 (0x00080UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_8 (0x00100UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_9 (0x00200UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_10 (0x00400UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_11 (0x00800UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_12 (0x01000UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_13 (0x02000UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_14 (0x04000UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_15 (0x08000UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_16 (0x10000UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_17 (0x20000UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD2CR_AWD2CH_18 (0x40000UL << ADC_AWD2CR_AWD2CH_Pos)
#define ADC_AWD3CR_AWD3CH_Pos (0U)
#define ADC_AWD3CR_AWD3CH_Msk (0x7FFFFUL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH ADC_AWD3CR_AWD3CH_Msk
#define ADC_AWD3CR_AWD3CH_0 (0x00001UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_1 (0x00002UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_2 (0x00004UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_3 (0x00008UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_4 (0x00010UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_5 (0x00020UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_6 (0x00040UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_7 (0x00080UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_8 (0x00100UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_9 (0x00200UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_10 (0x00400UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_11 (0x00800UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_12 (0x01000UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_13 (0x02000UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_14 (0x04000UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_15 (0x08000UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_16 (0x10000UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_17 (0x20000UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_AWD3CR_AWD3CH_18 (0x40000UL << ADC_AWD3CR_AWD3CH_Pos)
#define ADC_DIFSEL_DIFSEL_Pos (0U)
#define ADC_DIFSEL_DIFSEL_Msk (0x7FFFFUL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL ADC_DIFSEL_DIFSEL_Msk
#define ADC_DIFSEL_DIFSEL_0 (0x00001UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_1 (0x00002UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_2 (0x00004UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_3 (0x00008UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_4 (0x00010UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_5 (0x00020UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_6 (0x00040UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_7 (0x00080UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_8 (0x00100UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_9 (0x00200UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_10 (0x00400UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_11 (0x00800UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_12 (0x01000UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_13 (0x02000UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_14 (0x04000UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_15 (0x08000UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_16 (0x10000UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_17 (0x20000UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_DIFSEL_DIFSEL_18 (0x40000UL << ADC_DIFSEL_DIFSEL_Pos)
#define ADC_CALFACT_CALFACT_S_Pos (0U)
#define ADC_CALFACT_CALFACT_S_Msk (0x7FUL << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S ADC_CALFACT_CALFACT_S_Msk
#define ADC_CALFACT_CALFACT_S_0 (0x01UL << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S_1 (0x02UL << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S_2 (0x04UL << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S_3 (0x08UL << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S_4 (0x10UL << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S_5 (0x20UL << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_S_6 (0x40UL << ADC_CALFACT_CALFACT_S_Pos)
#define ADC_CALFACT_CALFACT_D_Pos (16U)
#define ADC_CALFACT_CALFACT_D_Msk (0x7FUL << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D ADC_CALFACT_CALFACT_D_Msk
#define ADC_CALFACT_CALFACT_D_0 (0x01UL << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D_1 (0x02UL << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D_2 (0x04UL << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D_3 (0x08UL << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D_4 (0x10UL << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D_5 (0x20UL << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CALFACT_CALFACT_D_6 (0x40UL << ADC_CALFACT_CALFACT_D_Pos)
#define ADC_CCR_DUAL_Pos (0U)
#define ADC_CCR_DUAL_Msk (0x1FUL << ADC_CCR_DUAL_Pos)
#define ADC_CCR_DUAL ADC_CCR_DUAL_Msk
#define ADC_CCR_DUAL_0 (0x01UL << ADC_CCR_DUAL_Pos)
#define ADC_CCR_DUAL_1 (0x02UL << ADC_CCR_DUAL_Pos)
#define ADC_CCR_DUAL_2 (0x04UL << ADC_CCR_DUAL_Pos)
#define ADC_CCR_DUAL_3 (0x08UL << ADC_CCR_DUAL_Pos)
#define ADC_CCR_DUAL_4 (0x10UL << ADC_CCR_DUAL_Pos)
#define ADC_CCR_DELAY_Pos (8U)
#define ADC_CCR_DELAY_Msk (0xFUL << ADC_CCR_DELAY_Pos)
#define ADC_CCR_DELAY ADC_CCR_DELAY_Msk
#define ADC_CCR_DELAY_0 (0x1UL << ADC_CCR_DELAY_Pos)
#define ADC_CCR_DELAY_1 (0x2UL << ADC_CCR_DELAY_Pos)
#define ADC_CCR_DELAY_2 (0x4UL << ADC_CCR_DELAY_Pos)
#define ADC_CCR_DELAY_3 (0x8UL << ADC_CCR_DELAY_Pos)
#define ADC_CCR_DMACFG_Pos (13U)
#define ADC_CCR_DMACFG_Msk (0x1UL << ADC_CCR_DMACFG_Pos)
#define ADC_CCR_DMACFG ADC_CCR_DMACFG_Msk
#define ADC_CCR_MDMA_Pos (14U)
#define ADC_CCR_MDMA_Msk (0x3UL << ADC_CCR_MDMA_Pos)
#define ADC_CCR_MDMA ADC_CCR_MDMA_Msk
#define ADC_CCR_MDMA_0 (0x1UL << ADC_CCR_MDMA_Pos)
#define ADC_CCR_MDMA_1 (0x2UL << ADC_CCR_MDMA_Pos)
#define ADC_CCR_CKMODE_Pos (16U)
#define ADC_CCR_CKMODE_Msk (0x3UL << ADC_CCR_CKMODE_Pos)
#define ADC_CCR_CKMODE ADC_CCR_CKMODE_Msk
#define ADC_CCR_CKMODE_0 (0x1UL << ADC_CCR_CKMODE_Pos)
#define ADC_CCR_CKMODE_1 (0x2UL << ADC_CCR_CKMODE_Pos)
#define ADC_CCR_PRESC_Pos (18U)
#define ADC_CCR_PRESC_Msk (0xFUL << ADC_CCR_PRESC_Pos)
#define ADC_CCR_PRESC ADC_CCR_PRESC_Msk
#define ADC_CCR_PRESC_0 (0x1UL << ADC_CCR_PRESC_Pos)
#define ADC_CCR_PRESC_1 (0x2UL << ADC_CCR_PRESC_Pos)
#define ADC_CCR_PRESC_2 (0x4UL << ADC_CCR_PRESC_Pos)
#define ADC_CCR_PRESC_3 (0x8UL << ADC_CCR_PRESC_Pos)
#define ADC_CCR_VREFEN_Pos (22U)
#define ADC_CCR_VREFEN_Msk (0x1UL << ADC_CCR_VREFEN_Pos)
#define ADC_CCR_VREFEN ADC_CCR_VREFEN_Msk
#define ADC_CCR_TSEN_Pos (23U)
#define ADC_CCR_TSEN_Msk (0x1UL << ADC_CCR_TSEN_Pos)
#define ADC_CCR_TSEN ADC_CCR_TSEN_Msk
#define ADC_CCR_VBATEN_Pos (24U)
#define ADC_CCR_VBATEN_Msk (0x1UL << ADC_CCR_VBATEN_Pos)
#define ADC_CCR_VBATEN ADC_CCR_VBATEN_Msk
#define ADC_CCR_MULTI (ADC_CCR_DUAL)
#define ADC_CCR_MULTI_0 (ADC_CCR_DUAL_0)
#define ADC_CCR_MULTI_1 (ADC_CCR_DUAL_1)
#define ADC_CCR_MULTI_2 (ADC_CCR_DUAL_2)
#define ADC_CCR_MULTI_3 (ADC_CCR_DUAL_3)
#define ADC_CCR_MULTI_4 (ADC_CCR_DUAL_4)
#define COMP_CSR_EN_Pos (0U)
#define COMP_CSR_EN_Msk (0x1UL << COMP_CSR_EN_Pos)
#define COMP_CSR_EN COMP_CSR_EN_Msk
#define COMP_CSR_PWRMODE_Pos (2U)
#define COMP_CSR_PWRMODE_Msk (0x3UL << COMP_CSR_PWRMODE_Pos)
#define COMP_CSR_PWRMODE COMP_CSR_PWRMODE_Msk
#define COMP_CSR_PWRMODE_0 (0x1UL << COMP_CSR_PWRMODE_Pos)
#define COMP_CSR_PWRMODE_1 (0x2UL << COMP_CSR_PWRMODE_Pos)
#define COMP_CSR_INMSEL_Pos (4U)
#define COMP_CSR_INMSEL_Msk (0x7UL << COMP_CSR_INMSEL_Pos)
#define COMP_CSR_INMSEL COMP_CSR_INMSEL_Msk
#define COMP_CSR_INMSEL_0 (0x1UL << COMP_CSR_INMSEL_Pos)
#define COMP_CSR_INMSEL_1 (0x2UL << COMP_CSR_INMSEL_Pos)
#define COMP_CSR_INMSEL_2 (0x4UL << COMP_CSR_INMSEL_Pos)
#define COMP_CSR_INPSEL_Pos (7U)
#define COMP_CSR_INPSEL_Msk (0x3UL << COMP_CSR_INPSEL_Pos)
#define COMP_CSR_INPSEL COMP_CSR_INPSEL_Msk
#define COMP_CSR_INPSEL_0 (0x1UL << COMP_CSR_INPSEL_Pos)
#define COMP_CSR_INPSEL_1 (0x2UL << COMP_CSR_INPSEL_Pos)
#define COMP_CSR_WINMODE_Pos (9U)
#define COMP_CSR_WINMODE_Msk (0x1UL << COMP_CSR_WINMODE_Pos)
#define COMP_CSR_WINMODE COMP_CSR_WINMODE_Msk
#define COMP_CSR_POLARITY_Pos (15U)
#define COMP_CSR_POLARITY_Msk (0x1UL << COMP_CSR_POLARITY_Pos)
#define COMP_CSR_POLARITY COMP_CSR_POLARITY_Msk
#define COMP_CSR_HYST_Pos (16U)
#define COMP_CSR_HYST_Msk (0x3UL << COMP_CSR_HYST_Pos)
#define COMP_CSR_HYST COMP_CSR_HYST_Msk
#define COMP_CSR_HYST_0 (0x1UL << COMP_CSR_HYST_Pos)
#define COMP_CSR_HYST_1 (0x2UL << COMP_CSR_HYST_Pos)
#define COMP_CSR_BLANKING_Pos (18U)
#define COMP_CSR_BLANKING_Msk (0x7UL << COMP_CSR_BLANKING_Pos)
#define COMP_CSR_BLANKING COMP_CSR_BLANKING_Msk
#define COMP_CSR_BLANKING_0 (0x1UL << COMP_CSR_BLANKING_Pos)
#define COMP_CSR_BLANKING_1 (0x2UL << COMP_CSR_BLANKING_Pos)
#define COMP_CSR_BLANKING_2 (0x4UL << COMP_CSR_BLANKING_Pos)
#define COMP_CSR_BRGEN_Pos (22U)
#define COMP_CSR_BRGEN_Msk (0x1UL << COMP_CSR_BRGEN_Pos)
#define COMP_CSR_BRGEN COMP_CSR_BRGEN_Msk
#define COMP_CSR_SCALEN_Pos (23U)
#define COMP_CSR_SCALEN_Msk (0x1UL << COMP_CSR_SCALEN_Pos)
#define COMP_CSR_SCALEN COMP_CSR_SCALEN_Msk
#define COMP_CSR_INMESEL_Pos (25U)
#define COMP_CSR_INMESEL_Msk (0x3UL << COMP_CSR_INMESEL_Pos)
#define COMP_CSR_INMESEL COMP_CSR_INMESEL_Msk
#define COMP_CSR_INMESEL_0 (0x1UL << COMP_CSR_INMESEL_Pos)
#define COMP_CSR_INMESEL_1 (0x2UL << COMP_CSR_INMESEL_Pos)
#define COMP_CSR_VALUE_Pos (30U)
#define COMP_CSR_VALUE_Msk (0x1UL << COMP_CSR_VALUE_Pos)
#define COMP_CSR_VALUE COMP_CSR_VALUE_Msk
#define COMP_CSR_LOCK_Pos (31U)
#define COMP_CSR_LOCK_Msk (0x1UL << COMP_CSR_LOCK_Pos)
#define COMP_CSR_LOCK COMP_CSR_LOCK_Msk
#define CRC_DR_DR_Pos (0U)
#define CRC_DR_DR_Msk (0xFFFFFFFFUL << CRC_DR_DR_Pos)
#define CRC_DR_DR CRC_DR_DR_Msk
#define CRC_IDR_IDR_Pos (0U)
#define CRC_IDR_IDR_Msk (0xFFFFFFFFUL << CRC_IDR_IDR_Pos)
#define CRC_IDR_IDR CRC_IDR_IDR_Msk
#define CRC_CR_RESET_Pos (0U)
#define CRC_CR_RESET_Msk (0x1UL << CRC_CR_RESET_Pos)
#define CRC_CR_RESET CRC_CR_RESET_Msk
#define CRC_CR_POLYSIZE_Pos (3U)
#define CRC_CR_POLYSIZE_Msk (0x3UL << CRC_CR_POLYSIZE_Pos)
#define CRC_CR_POLYSIZE CRC_CR_POLYSIZE_Msk
#define CRC_CR_POLYSIZE_0 (0x1U << CRC_CR_POLYSIZE_Pos)
#define CRC_CR_POLYSIZE_1 (0x2U << CRC_CR_POLYSIZE_Pos)
#define CRC_CR_REV_IN_Pos (5U)
#define CRC_CR_REV_IN_Msk (0x3UL << CRC_CR_REV_IN_Pos)
#define CRC_CR_REV_IN CRC_CR_REV_IN_Msk
#define CRC_CR_REV_IN_0 (0x1U << CRC_CR_REV_IN_Pos)
#define CRC_CR_REV_IN_1 (0x2U << CRC_CR_REV_IN_Pos)
#define CRC_CR_REV_OUT_Pos (7U)
#define CRC_CR_REV_OUT_Msk (0x1UL << CRC_CR_REV_OUT_Pos)
#define CRC_CR_REV_OUT CRC_CR_REV_OUT_Msk
#define CRC_INIT_INIT_Pos (0U)
#define CRC_INIT_INIT_Msk (0xFFFFFFFFUL << CRC_INIT_INIT_Pos)
#define CRC_INIT_INIT CRC_INIT_INIT_Msk
#define CRC_POL_POL_Pos (0U)
#define CRC_POL_POL_Msk (0xFFFFFFFFUL << CRC_POL_POL_Pos)
#define CRC_POL_POL CRC_POL_POL_Msk
#define AES_CR_EN_Pos (0U)
#define AES_CR_EN_Msk (0x1UL << AES_CR_EN_Pos)
#define AES_CR_EN AES_CR_EN_Msk
#define AES_CR_DATATYPE_Pos (1U)
#define AES_CR_DATATYPE_Msk (0x3UL << AES_CR_DATATYPE_Pos)
#define AES_CR_DATATYPE AES_CR_DATATYPE_Msk
#define AES_CR_DATATYPE_0 (0x1U << AES_CR_DATATYPE_Pos)
#define AES_CR_DATATYPE_1 (0x2U << AES_CR_DATATYPE_Pos)
#define AES_CR_MODE_Pos (3U)
#define AES_CR_MODE_Msk (0x3UL << AES_CR_MODE_Pos)
#define AES_CR_MODE AES_CR_MODE_Msk
#define AES_CR_MODE_0 (0x1U << AES_CR_MODE_Pos)
#define AES_CR_MODE_1 (0x2U << AES_CR_MODE_Pos)
#define AES_CR_CHMOD_Pos (5U)
#define AES_CR_CHMOD_Msk (0x803UL << AES_CR_CHMOD_Pos)
#define AES_CR_CHMOD AES_CR_CHMOD_Msk
#define AES_CR_CHMOD_0 (0x001U << AES_CR_CHMOD_Pos)
#define AES_CR_CHMOD_1 (0x002U << AES_CR_CHMOD_Pos)
#define AES_CR_CHMOD_2 (0x800U << AES_CR_CHMOD_Pos)
#define AES_CR_CCFC_Pos (7U)
#define AES_CR_CCFC_Msk (0x1UL << AES_CR_CCFC_Pos)
#define AES_CR_CCFC AES_CR_CCFC_Msk
#define AES_CR_ERRC_Pos (8U)
#define AES_CR_ERRC_Msk (0x1UL << AES_CR_ERRC_Pos)
#define AES_CR_ERRC AES_CR_ERRC_Msk
#define AES_CR_CCFIE_Pos (9U)
#define AES_CR_CCFIE_Msk (0x1UL << AES_CR_CCFIE_Pos)
#define AES_CR_CCFIE AES_CR_CCFIE_Msk
#define AES_CR_ERRIE_Pos (10U)
#define AES_CR_ERRIE_Msk (0x1UL << AES_CR_ERRIE_Pos)
#define AES_CR_ERRIE AES_CR_ERRIE_Msk
#define AES_CR_DMAINEN_Pos (11U)
#define AES_CR_DMAINEN_Msk (0x1UL << AES_CR_DMAINEN_Pos)
#define AES_CR_DMAINEN AES_CR_DMAINEN_Msk
#define AES_CR_DMAOUTEN_Pos (12U)
#define AES_CR_DMAOUTEN_Msk (0x1UL << AES_CR_DMAOUTEN_Pos)
#define AES_CR_DMAOUTEN AES_CR_DMAOUTEN_Msk
#define AES_CR_GCMPH_Pos (13U)
#define AES_CR_GCMPH_Msk (0x3UL << AES_CR_GCMPH_Pos)
#define AES_CR_GCMPH AES_CR_GCMPH_Msk
#define AES_CR_GCMPH_0 (0x1U << AES_CR_GCMPH_Pos)
#define AES_CR_GCMPH_1 (0x2U << AES_CR_GCMPH_Pos)
#define AES_CR_KEYSIZE_Pos (18U)
#define AES_CR_KEYSIZE_Msk (0x1UL << AES_CR_KEYSIZE_Pos)
#define AES_CR_KEYSIZE AES_CR_KEYSIZE_Msk
#define AES_CR_NPBLB_Pos (20U)
#define AES_CR_NPBLB_Msk (0xFUL << AES_CR_NPBLB_Pos)
#define AES_CR_NPBLB AES_CR_NPBLB_Msk
#define AES_CR_NPBLB_0 (0x1U << AES_CR_NPBLB_Pos)
#define AES_CR_NPBLB_1 (0x2U << AES_CR_NPBLB_Pos)
#define AES_CR_NPBLB_2 (0x4U << AES_CR_NPBLB_Pos)
#define AES_CR_NPBLB_3 (0x8U << AES_CR_NPBLB_Pos)
#define AES_SR_CCF_Pos (0U)
#define AES_SR_CCF_Msk (0x1UL << AES_SR_CCF_Pos)
#define AES_SR_CCF AES_SR_CCF_Msk
#define AES_SR_RDERR_Pos (1U)
#define AES_SR_RDERR_Msk (0x1UL << AES_SR_RDERR_Pos)
#define AES_SR_RDERR AES_SR_RDERR_Msk
#define AES_SR_WRERR_Pos (2U)
#define AES_SR_WRERR_Msk (0x1UL << AES_SR_WRERR_Pos)
#define AES_SR_WRERR AES_SR_WRERR_Msk
#define AES_SR_BUSY_Pos (3U)
#define AES_SR_BUSY_Msk (0x1UL << AES_SR_BUSY_Pos)
#define AES_SR_BUSY AES_SR_BUSY_Msk
#define AES_DINR_Pos (0U)
#define AES_DINR_Msk (0xFFFFFFFFUL << AES_DINR_Pos)
#define AES_DINR AES_DINR_Msk
#define AES_DOUTR_Pos (0U)
#define AES_DOUTR_Msk (0xFFFFFFFFUL << AES_DOUTR_Pos)
#define AES_DOUTR AES_DOUTR_Msk
#define AES_KEYR0_Pos (0U)
#define AES_KEYR0_Msk (0xFFFFFFFFUL << AES_KEYR0_Pos)
#define AES_KEYR0 AES_KEYR0_Msk
#define AES_KEYR1_Pos (0U)
#define AES_KEYR1_Msk (0xFFFFFFFFUL << AES_KEYR1_Pos)
#define AES_KEYR1 AES_KEYR1_Msk
#define AES_KEYR2_Pos (0U)
#define AES_KEYR2_Msk (0xFFFFFFFFUL << AES_KEYR2_Pos)
#define AES_KEYR2 AES_KEYR2_Msk
#define AES_KEYR3_Pos (0U)
#define AES_KEYR3_Msk (0xFFFFFFFFUL << AES_KEYR3_Pos)
#define AES_KEYR3 AES_KEYR3_Msk
#define AES_KEYR4_Pos (0U)
#define AES_KEYR4_Msk (0xFFFFFFFFUL << AES_KEYR4_Pos)
#define AES_KEYR4 AES_KEYR4_Msk
#define AES_KEYR5_Pos (0U)
#define AES_KEYR5_Msk (0xFFFFFFFFUL << AES_KEYR5_Pos)
#define AES_KEYR5 AES_KEYR5_Msk
#define AES_KEYR6_Pos (0U)
#define AES_KEYR6_Msk (0xFFFFFFFFUL << AES_KEYR6_Pos)
#define AES_KEYR6 AES_KEYR6_Msk
#define AES_KEYR7_Pos (0U)
#define AES_KEYR7_Msk (0xFFFFFFFFUL << AES_KEYR7_Pos)
#define AES_KEYR7 AES_KEYR7_Msk
#define AES_IVR0_Pos (0U)
#define AES_IVR0_Msk (0xFFFFFFFFUL << AES_IVR0_Pos)
#define AES_IVR0 AES_IVR0_Msk
#define AES_IVR1_Pos (0U)
#define AES_IVR1_Msk (0xFFFFFFFFUL << AES_IVR1_Pos)
#define AES_IVR1 AES_IVR1_Msk
#define AES_IVR2_Pos (0U)
#define AES_IVR2_Msk (0xFFFFFFFFUL << AES_IVR2_Pos)
#define AES_IVR2 AES_IVR2_Msk
#define AES_IVR3_Pos (0U)
#define AES_IVR3_Msk (0xFFFFFFFFUL << AES_IVR3_Pos)
#define AES_IVR3 AES_IVR3_Msk
#define AES_SUSP0R_Pos (0U)
#define AES_SUSP0R_Msk (0xFFFFFFFFUL << AES_SUSP0R_Pos)
#define AES_SUSP0R AES_SUSP0R_Msk
#define AES_SUSP1R_Pos (0U)
#define AES_SUSP1R_Msk (0xFFFFFFFFUL << AES_SUSP1R_Pos)
#define AES_SUSP1R AES_SUSP1R_Msk
#define AES_SUSP2R_Pos (0U)
#define AES_SUSP2R_Msk (0xFFFFFFFFUL << AES_SUSP2R_Pos)
#define AES_SUSP2R AES_SUSP2R_Msk
#define AES_SUSP3R_Pos (0U)
#define AES_SUSP3R_Msk (0xFFFFFFFFUL << AES_SUSP3R_Pos)
#define AES_SUSP3R AES_SUSP3R_Msk
#define AES_SUSP4R_Pos (0U)
#define AES_SUSP4R_Msk (0xFFFFFFFFUL << AES_SUSP4R_Pos)
#define AES_SUSP4R AES_SUSP4R_Msk
#define AES_SUSP5R_Pos (0U)
#define AES_SUSP5R_Msk (0xFFFFFFFFUL << AES_SUSP5R_Pos)
#define AES_SUSP5R AES_SUSP5R_Msk
#define AES_SUSP6R_Pos (0U)
#define AES_SUSP6R_Msk (0xFFFFFFFFUL << AES_SUSP6R_Pos)
#define AES_SUSP6R AES_SUSP6R_Msk
#define AES_SUSP7R_Pos (0U)
#define AES_SUSP7R_Msk (0xFFFFFFFFUL << AES_SUSP7R_Pos)
#define AES_SUSP7R AES_SUSP7R_Msk
#define DMA_ISR_GIF1_Pos (0U)
#define DMA_ISR_GIF1_Msk (0x1UL << DMA_ISR_GIF1_Pos)
#define DMA_ISR_GIF1 DMA_ISR_GIF1_Msk
#define DMA_ISR_TCIF1_Pos (1U)
#define DMA_ISR_TCIF1_Msk (0x1UL << DMA_ISR_TCIF1_Pos)
#define DMA_ISR_TCIF1 DMA_ISR_TCIF1_Msk
#define DMA_ISR_HTIF1_Pos (2U)
#define DMA_ISR_HTIF1_Msk (0x1UL << DMA_ISR_HTIF1_Pos)
#define DMA_ISR_HTIF1 DMA_ISR_HTIF1_Msk
#define DMA_ISR_TEIF1_Pos (3U)
#define DMA_ISR_TEIF1_Msk (0x1UL << DMA_ISR_TEIF1_Pos)
#define DMA_ISR_TEIF1 DMA_ISR_TEIF1_Msk
#define DMA_ISR_GIF2_Pos (4U)
#define DMA_ISR_GIF2_Msk (0x1UL << DMA_ISR_GIF2_Pos)
#define DMA_ISR_GIF2 DMA_ISR_GIF2_Msk
#define DMA_ISR_TCIF2_Pos (5U)
#define DMA_ISR_TCIF2_Msk (0x1UL << DMA_ISR_TCIF2_Pos)
#define DMA_ISR_TCIF2 DMA_ISR_TCIF2_Msk
#define DMA_ISR_HTIF2_Pos (6U)
#define DMA_ISR_HTIF2_Msk (0x1UL << DMA_ISR_HTIF2_Pos)
#define DMA_ISR_HTIF2 DMA_ISR_HTIF2_Msk
#define DMA_ISR_TEIF2_Pos (7U)
#define DMA_ISR_TEIF2_Msk (0x1UL << DMA_ISR_TEIF2_Pos)
#define DMA_ISR_TEIF2 DMA_ISR_TEIF2_Msk
#define DMA_ISR_GIF3_Pos (8U)
#define DMA_ISR_GIF3_Msk (0x1UL << DMA_ISR_GIF3_Pos)
#define DMA_ISR_GIF3 DMA_ISR_GIF3_Msk
#define DMA_ISR_TCIF3_Pos (9U)
#define DMA_ISR_TCIF3_Msk (0x1UL << DMA_ISR_TCIF3_Pos)
#define DMA_ISR_TCIF3 DMA_ISR_TCIF3_Msk
#define DMA_ISR_HTIF3_Pos (10U)
#define DMA_ISR_HTIF3_Msk (0x1UL << DMA_ISR_HTIF3_Pos)
#define DMA_ISR_HTIF3 DMA_ISR_HTIF3_Msk
#define DMA_ISR_TEIF3_Pos (11U)
#define DMA_ISR_TEIF3_Msk (0x1UL << DMA_ISR_TEIF3_Pos)
#define DMA_ISR_TEIF3 DMA_ISR_TEIF3_Msk
#define DMA_ISR_GIF4_Pos (12U)
#define DMA_ISR_GIF4_Msk (0x1UL << DMA_ISR_GIF4_Pos)
#define DMA_ISR_GIF4 DMA_ISR_GIF4_Msk
#define DMA_ISR_TCIF4_Pos (13U)
#define DMA_ISR_TCIF4_Msk (0x1UL << DMA_ISR_TCIF4_Pos)
#define DMA_ISR_TCIF4 DMA_ISR_TCIF4_Msk
#define DMA_ISR_HTIF4_Pos (14U)
#define DMA_ISR_HTIF4_Msk (0x1UL << DMA_ISR_HTIF4_Pos)
#define DMA_ISR_HTIF4 DMA_ISR_HTIF4_Msk
#define DMA_ISR_TEIF4_Pos (15U)
#define DMA_ISR_TEIF4_Msk (0x1UL << DMA_ISR_TEIF4_Pos)
#define DMA_ISR_TEIF4 DMA_ISR_TEIF4_Msk
#define DMA_ISR_GIF5_Pos (16U)
#define DMA_ISR_GIF5_Msk (0x1UL << DMA_ISR_GIF5_Pos)
#define DMA_ISR_GIF5 DMA_ISR_GIF5_Msk
#define DMA_ISR_TCIF5_Pos (17U)
#define DMA_ISR_TCIF5_Msk (0x1UL << DMA_ISR_TCIF5_Pos)
#define DMA_ISR_TCIF5 DMA_ISR_TCIF5_Msk
#define DMA_ISR_HTIF5_Pos (18U)
#define DMA_ISR_HTIF5_Msk (0x1UL << DMA_ISR_HTIF5_Pos)
#define DMA_ISR_HTIF5 DMA_ISR_HTIF5_Msk
#define DMA_ISR_TEIF5_Pos (19U)
#define DMA_ISR_TEIF5_Msk (0x1UL << DMA_ISR_TEIF5_Pos)
#define DMA_ISR_TEIF5 DMA_ISR_TEIF5_Msk
#define DMA_ISR_GIF6_Pos (20U)
#define DMA_ISR_GIF6_Msk (0x1UL << DMA_ISR_GIF6_Pos)
#define DMA_ISR_GIF6 DMA_ISR_GIF6_Msk
#define DMA_ISR_TCIF6_Pos (21U)
#define DMA_ISR_TCIF6_Msk (0x1UL << DMA_ISR_TCIF6_Pos)
#define DMA_ISR_TCIF6 DMA_ISR_TCIF6_Msk
#define DMA_ISR_HTIF6_Pos (22U)
#define DMA_ISR_HTIF6_Msk (0x1UL << DMA_ISR_HTIF6_Pos)
#define DMA_ISR_HTIF6 DMA_ISR_HTIF6_Msk
#define DMA_ISR_TEIF6_Pos (23U)
#define DMA_ISR_TEIF6_Msk (0x1UL << DMA_ISR_TEIF6_Pos)
#define DMA_ISR_TEIF6 DMA_ISR_TEIF6_Msk
#define DMA_ISR_GIF7_Pos (24U)
#define DMA_ISR_GIF7_Msk (0x1UL << DMA_ISR_GIF7_Pos)
#define DMA_ISR_GIF7 DMA_ISR_GIF7_Msk
#define DMA_ISR_TCIF7_Pos (25U)
#define DMA_ISR_TCIF7_Msk (0x1UL << DMA_ISR_TCIF7_Pos)
#define DMA_ISR_TCIF7 DMA_ISR_TCIF7_Msk
#define DMA_ISR_HTIF7_Pos (26U)
#define DMA_ISR_HTIF7_Msk (0x1UL << DMA_ISR_HTIF7_Pos)
#define DMA_ISR_HTIF7 DMA_ISR_HTIF7_Msk
#define DMA_ISR_TEIF7_Pos (27U)
#define DMA_ISR_TEIF7_Msk (0x1UL << DMA_ISR_TEIF7_Pos)
#define DMA_ISR_TEIF7 DMA_ISR_TEIF7_Msk
#define DMA_IFCR_CGIF1_Pos (0U)
#define DMA_IFCR_CGIF1_Msk (0x1UL << DMA_IFCR_CGIF1_Pos)
#define DMA_IFCR_CGIF1 DMA_IFCR_CGIF1_Msk
#define DMA_IFCR_CTCIF1_Pos (1U)
#define DMA_IFCR_CTCIF1_Msk (0x1UL << DMA_IFCR_CTCIF1_Pos)
#define DMA_IFCR_CTCIF1 DMA_IFCR_CTCIF1_Msk
#define DMA_IFCR_CHTIF1_Pos (2U)
#define DMA_IFCR_CHTIF1_Msk (0x1UL << DMA_IFCR_CHTIF1_Pos)
#define DMA_IFCR_CHTIF1 DMA_IFCR_CHTIF1_Msk
#define DMA_IFCR_CTEIF1_Pos (3U)
#define DMA_IFCR_CTEIF1_Msk (0x1UL << DMA_IFCR_CTEIF1_Pos)
#define DMA_IFCR_CTEIF1 DMA_IFCR_CTEIF1_Msk
#define DMA_IFCR_CGIF2_Pos (4U)
#define DMA_IFCR_CGIF2_Msk (0x1UL << DMA_IFCR_CGIF2_Pos)
#define DMA_IFCR_CGIF2 DMA_IFCR_CGIF2_Msk
#define DMA_IFCR_CTCIF2_Pos (5U)
#define DMA_IFCR_CTCIF2_Msk (0x1UL << DMA_IFCR_CTCIF2_Pos)
#define DMA_IFCR_CTCIF2 DMA_IFCR_CTCIF2_Msk
#define DMA_IFCR_CHTIF2_Pos (6U)
#define DMA_IFCR_CHTIF2_Msk (0x1UL << DMA_IFCR_CHTIF2_Pos)
#define DMA_IFCR_CHTIF2 DMA_IFCR_CHTIF2_Msk
#define DMA_IFCR_CTEIF2_Pos (7U)
#define DMA_IFCR_CTEIF2_Msk (0x1UL << DMA_IFCR_CTEIF2_Pos)
#define DMA_IFCR_CTEIF2 DMA_IFCR_CTEIF2_Msk
#define DMA_IFCR_CGIF3_Pos (8U)
#define DMA_IFCR_CGIF3_Msk (0x1UL << DMA_IFCR_CGIF3_Pos)
#define DMA_IFCR_CGIF3 DMA_IFCR_CGIF3_Msk
#define DMA_IFCR_CTCIF3_Pos (9U)
#define DMA_IFCR_CTCIF3_Msk (0x1UL << DMA_IFCR_CTCIF3_Pos)
#define DMA_IFCR_CTCIF3 DMA_IFCR_CTCIF3_Msk
#define DMA_IFCR_CHTIF3_Pos (10U)
#define DMA_IFCR_CHTIF3_Msk (0x1UL << DMA_IFCR_CHTIF3_Pos)
#define DMA_IFCR_CHTIF3 DMA_IFCR_CHTIF3_Msk
#define DMA_IFCR_CTEIF3_Pos (11U)
#define DMA_IFCR_CTEIF3_Msk (0x1UL << DMA_IFCR_CTEIF3_Pos)
#define DMA_IFCR_CTEIF3 DMA_IFCR_CTEIF3_Msk
#define DMA_IFCR_CGIF4_Pos (12U)
#define DMA_IFCR_CGIF4_Msk (0x1UL << DMA_IFCR_CGIF4_Pos)
#define DMA_IFCR_CGIF4 DMA_IFCR_CGIF4_Msk
#define DMA_IFCR_CTCIF4_Pos (13U)
#define DMA_IFCR_CTCIF4_Msk (0x1UL << DMA_IFCR_CTCIF4_Pos)
#define DMA_IFCR_CTCIF4 DMA_IFCR_CTCIF4_Msk
#define DMA_IFCR_CHTIF4_Pos (14U)
#define DMA_IFCR_CHTIF4_Msk (0x1UL << DMA_IFCR_CHTIF4_Pos)
#define DMA_IFCR_CHTIF4 DMA_IFCR_CHTIF4_Msk
#define DMA_IFCR_CTEIF4_Pos (15U)
#define DMA_IFCR_CTEIF4_Msk (0x1UL << DMA_IFCR_CTEIF4_Pos)
#define DMA_IFCR_CTEIF4 DMA_IFCR_CTEIF4_Msk
#define DMA_IFCR_CGIF5_Pos (16U)
#define DMA_IFCR_CGIF5_Msk (0x1UL << DMA_IFCR_CGIF5_Pos)
#define DMA_IFCR_CGIF5 DMA_IFCR_CGIF5_Msk
#define DMA_IFCR_CTCIF5_Pos (17U)
#define DMA_IFCR_CTCIF5_Msk (0x1UL << DMA_IFCR_CTCIF5_Pos)
#define DMA_IFCR_CTCIF5 DMA_IFCR_CTCIF5_Msk
#define DMA_IFCR_CHTIF5_Pos (18U)
#define DMA_IFCR_CHTIF5_Msk (0x1UL << DMA_IFCR_CHTIF5_Pos)
#define DMA_IFCR_CHTIF5 DMA_IFCR_CHTIF5_Msk
#define DMA_IFCR_CTEIF5_Pos (19U)
#define DMA_IFCR_CTEIF5_Msk (0x1UL << DMA_IFCR_CTEIF5_Pos)
#define DMA_IFCR_CTEIF5 DMA_IFCR_CTEIF5_Msk
#define DMA_IFCR_CGIF6_Pos (20U)
#define DMA_IFCR_CGIF6_Msk (0x1UL << DMA_IFCR_CGIF6_Pos)
#define DMA_IFCR_CGIF6 DMA_IFCR_CGIF6_Msk
#define DMA_IFCR_CTCIF6_Pos (21U)
#define DMA_IFCR_CTCIF6_Msk (0x1UL << DMA_IFCR_CTCIF6_Pos)
#define DMA_IFCR_CTCIF6 DMA_IFCR_CTCIF6_Msk
#define DMA_IFCR_CHTIF6_Pos (22U)
#define DMA_IFCR_CHTIF6_Msk (0x1UL << DMA_IFCR_CHTIF6_Pos)
#define DMA_IFCR_CHTIF6 DMA_IFCR_CHTIF6_Msk
#define DMA_IFCR_CTEIF6_Pos (23U)
#define DMA_IFCR_CTEIF6_Msk (0x1UL << DMA_IFCR_CTEIF6_Pos)
#define DMA_IFCR_CTEIF6 DMA_IFCR_CTEIF6_Msk
#define DMA_IFCR_CGIF7_Pos (24U)
#define DMA_IFCR_CGIF7_Msk (0x1UL << DMA_IFCR_CGIF7_Pos)
#define DMA_IFCR_CGIF7 DMA_IFCR_CGIF7_Msk
#define DMA_IFCR_CTCIF7_Pos (25U)
#define DMA_IFCR_CTCIF7_Msk (0x1UL << DMA_IFCR_CTCIF7_Pos)
#define DMA_IFCR_CTCIF7 DMA_IFCR_CTCIF7_Msk
#define DMA_IFCR_CHTIF7_Pos (26U)
#define DMA_IFCR_CHTIF7_Msk (0x1UL << DMA_IFCR_CHTIF7_Pos)
#define DMA_IFCR_CHTIF7 DMA_IFCR_CHTIF7_Msk
#define DMA_IFCR_CTEIF7_Pos (27U)
#define DMA_IFCR_CTEIF7_Msk (0x1UL << DMA_IFCR_CTEIF7_Pos)
#define DMA_IFCR_CTEIF7 DMA_IFCR_CTEIF7_Msk
#define DMA_CCR_EN_Pos (0U)
#define DMA_CCR_EN_Msk (0x1UL << DMA_CCR_EN_Pos)
#define DMA_CCR_EN DMA_CCR_EN_Msk
#define DMA_CCR_TCIE_Pos (1U)
#define DMA_CCR_TCIE_Msk (0x1UL << DMA_CCR_TCIE_Pos)
#define DMA_CCR_TCIE DMA_CCR_TCIE_Msk
#define DMA_CCR_HTIE_Pos (2U)
#define DMA_CCR_HTIE_Msk (0x1UL << DMA_CCR_HTIE_Pos)
#define DMA_CCR_HTIE DMA_CCR_HTIE_Msk
#define DMA_CCR_TEIE_Pos (3U)
#define DMA_CCR_TEIE_Msk (0x1UL << DMA_CCR_TEIE_Pos)
#define DMA_CCR_TEIE DMA_CCR_TEIE_Msk
#define DMA_CCR_DIR_Pos (4U)
#define DMA_CCR_DIR_Msk (0x1UL << DMA_CCR_DIR_Pos)
#define DMA_CCR_DIR DMA_CCR_DIR_Msk
#define DMA_CCR_CIRC_Pos (5U)
#define DMA_CCR_CIRC_Msk (0x1UL << DMA_CCR_CIRC_Pos)
#define DMA_CCR_CIRC DMA_CCR_CIRC_Msk
#define DMA_CCR_PINC_Pos (6U)
#define DMA_CCR_PINC_Msk (0x1UL << DMA_CCR_PINC_Pos)
#define DMA_CCR_PINC DMA_CCR_PINC_Msk
#define DMA_CCR_MINC_Pos (7U)
#define DMA_CCR_MINC_Msk (0x1UL << DMA_CCR_MINC_Pos)
#define DMA_CCR_MINC DMA_CCR_MINC_Msk
#define DMA_CCR_PSIZE_Pos (8U)
#define DMA_CCR_PSIZE_Msk (0x3UL << DMA_CCR_PSIZE_Pos)
#define DMA_CCR_PSIZE DMA_CCR_PSIZE_Msk
#define DMA_CCR_PSIZE_0 (0x1U << DMA_CCR_PSIZE_Pos)
#define DMA_CCR_PSIZE_1 (0x2U << DMA_CCR_PSIZE_Pos)
#define DMA_CCR_MSIZE_Pos (10U)
#define DMA_CCR_MSIZE_Msk (0x3UL << DMA_CCR_MSIZE_Pos)
#define DMA_CCR_MSIZE DMA_CCR_MSIZE_Msk
#define DMA_CCR_MSIZE_0 (0x1U << DMA_CCR_MSIZE_Pos)
#define DMA_CCR_MSIZE_1 (0x2U << DMA_CCR_MSIZE_Pos)
#define DMA_CCR_PL_Pos (12U)
#define DMA_CCR_PL_Msk (0x3UL << DMA_CCR_PL_Pos)
#define DMA_CCR_PL DMA_CCR_PL_Msk
#define DMA_CCR_PL_0 (0x1U << DMA_CCR_PL_Pos)
#define DMA_CCR_PL_1 (0x2U << DMA_CCR_PL_Pos)
#define DMA_CCR_MEM2MEM_Pos (14U)
#define DMA_CCR_MEM2MEM_Msk (0x1UL << DMA_CCR_MEM2MEM_Pos)
#define DMA_CCR_MEM2MEM DMA_CCR_MEM2MEM_Msk
#define DMA_CNDTR_NDT_Pos (0U)
#define DMA_CNDTR_NDT_Msk (0xFFFFUL << DMA_CNDTR_NDT_Pos)
#define DMA_CNDTR_NDT DMA_CNDTR_NDT_Msk
#define DMA_CPAR_PA_Pos (0U)
#define DMA_CPAR_PA_Msk (0xFFFFFFFFUL << DMA_CPAR_PA_Pos)
#define DMA_CPAR_PA DMA_CPAR_PA_Msk
#define DMA_CMAR_MA_Pos (0U)
#define DMA_CMAR_MA_Msk (0xFFFFFFFFUL << DMA_CMAR_MA_Pos)
#define DMA_CMAR_MA DMA_CMAR_MA_Msk
#define DMAMUX_CxCR_DMAREQ_ID_Pos (0U)
#define DMAMUX_CxCR_DMAREQ_ID_Msk (0x3FUL << DMAMUX_CxCR_DMAREQ_ID_Pos)
#define DMAMUX_CxCR_DMAREQ_ID DMAMUX_CxCR_DMAREQ_ID_Msk
#define DMAMUX_CxCR_DMAREQ_ID_0 (0x01U << DMAMUX_CxCR_DMAREQ_ID_Pos)
#define DMAMUX_CxCR_DMAREQ_ID_1 (0x02U << DMAMUX_CxCR_DMAREQ_ID_Pos)
#define DMAMUX_CxCR_DMAREQ_ID_2 (0x04U << DMAMUX_CxCR_DMAREQ_ID_Pos)
#define DMAMUX_CxCR_DMAREQ_ID_3 (0x08U << DMAMUX_CxCR_DMAREQ_ID_Pos)
#define DMAMUX_CxCR_DMAREQ_ID_4 (0x10U << DMAMUX_CxCR_DMAREQ_ID_Pos)
#define DMAMUX_CxCR_DMAREQ_ID_5 (0x20U << DMAMUX_CxCR_DMAREQ_ID_Pos)
#define DMAMUX_CxCR_SOIE_Pos (8U)
#define DMAMUX_CxCR_SOIE_Msk (0x1UL << DMAMUX_CxCR_SOIE_Pos)
#define DMAMUX_CxCR_SOIE DMAMUX_CxCR_SOIE_Msk
#define DMAMUX_CxCR_EGE_Pos (9U)
#define DMAMUX_CxCR_EGE_Msk (0x1UL << DMAMUX_CxCR_EGE_Pos)
#define DMAMUX_CxCR_EGE DMAMUX_CxCR_EGE_Msk
#define DMAMUX_CxCR_SE_Pos (16U)
#define DMAMUX_CxCR_SE_Msk (0x1UL << DMAMUX_CxCR_SE_Pos)
#define DMAMUX_CxCR_SE DMAMUX_CxCR_SE_Msk
#define DMAMUX_CxCR_SPOL_Pos (17U)
#define DMAMUX_CxCR_SPOL_Msk (0x3UL << DMAMUX_CxCR_SPOL_Pos)
#define DMAMUX_CxCR_SPOL DMAMUX_CxCR_SPOL_Msk
#define DMAMUX_CxCR_SPOL_0 (0x1U << DMAMUX_CxCR_SPOL_Pos)
#define DMAMUX_CxCR_SPOL_1 (0x2U << DMAMUX_CxCR_SPOL_Pos)
#define DMAMUX_CxCR_NBREQ_Pos (19U)
#define DMAMUX_CxCR_NBREQ_Msk (0x1FUL << DMAMUX_CxCR_NBREQ_Pos)
#define DMAMUX_CxCR_NBREQ DMAMUX_CxCR_NBREQ_Msk
#define DMAMUX_CxCR_NBREQ_0 (0x01U << DMAMUX_CxCR_NBREQ_Pos)
#define DMAMUX_CxCR_NBREQ_1 (0x02U << DMAMUX_CxCR_NBREQ_Pos)
#define DMAMUX_CxCR_NBREQ_2 (0x04U << DMAMUX_CxCR_NBREQ_Pos)
#define DMAMUX_CxCR_NBREQ_3 (0x08U << DMAMUX_CxCR_NBREQ_Pos)
#define DMAMUX_CxCR_NBREQ_4 (0x10U << DMAMUX_CxCR_NBREQ_Pos)
#define DMAMUX_CxCR_SYNC_ID_Pos (24U)
#define DMAMUX_CxCR_SYNC_ID_Msk (0x1FUL << DMAMUX_CxCR_SYNC_ID_Pos)
#define DMAMUX_CxCR_SYNC_ID DMAMUX_CxCR_SYNC_ID_Msk
#define DMAMUX_CxCR_SYNC_ID_0 (0x01U << DMAMUX_CxCR_SYNC_ID_Pos)
#define DMAMUX_CxCR_SYNC_ID_1 (0x02U << DMAMUX_CxCR_SYNC_ID_Pos)
#define DMAMUX_CxCR_SYNC_ID_2 (0x04U << DMAMUX_CxCR_SYNC_ID_Pos)
#define DMAMUX_CxCR_SYNC_ID_3 (0x08U << DMAMUX_CxCR_SYNC_ID_Pos)
#define DMAMUX_CxCR_SYNC_ID_4 (0x10U << DMAMUX_CxCR_SYNC_ID_Pos)
#define DMAMUX_CSR_SOF0_Pos (0U)
#define DMAMUX_CSR_SOF0_Msk (0x1UL << DMAMUX_CSR_SOF0_Pos)
#define DMAMUX_CSR_SOF0 DMAMUX_CSR_SOF0_Msk
#define DMAMUX_CSR_SOF1_Pos (1U)
#define DMAMUX_CSR_SOF1_Msk (0x1UL << DMAMUX_CSR_SOF1_Pos)
#define DMAMUX_CSR_SOF1 DMAMUX_CSR_SOF1_Msk
#define DMAMUX_CSR_SOF2_Pos (2U)
#define DMAMUX_CSR_SOF2_Msk (0x1UL << DMAMUX_CSR_SOF2_Pos)
#define DMAMUX_CSR_SOF2 DMAMUX_CSR_SOF2_Msk
#define DMAMUX_CSR_SOF3_Pos (3U)
#define DMAMUX_CSR_SOF3_Msk (0x1UL << DMAMUX_CSR_SOF3_Pos)
#define DMAMUX_CSR_SOF3 DMAMUX_CSR_SOF3_Msk
#define DMAMUX_CSR_SOF4_Pos (4U)
#define DMAMUX_CSR_SOF4_Msk (0x1UL << DMAMUX_CSR_SOF4_Pos)
#define DMAMUX_CSR_SOF4 DMAMUX_CSR_SOF4_Msk
#define DMAMUX_CSR_SOF5_Pos (5U)
#define DMAMUX_CSR_SOF5_Msk (0x1UL << DMAMUX_CSR_SOF5_Pos)
#define DMAMUX_CSR_SOF5 DMAMUX_CSR_SOF5_Msk
#define DMAMUX_CSR_SOF6_Pos (6U)
#define DMAMUX_CSR_SOF6_Msk (0x1UL << DMAMUX_CSR_SOF6_Pos)
#define DMAMUX_CSR_SOF6 DMAMUX_CSR_SOF6_Msk
#define DMAMUX_CSR_SOF7_Pos (7U)
#define DMAMUX_CSR_SOF7_Msk (0x1UL << DMAMUX_CSR_SOF7_Pos)
#define DMAMUX_CSR_SOF7 DMAMUX_CSR_SOF7_Msk
#define DMAMUX_CSR_SOF8_Pos (8U)
#define DMAMUX_CSR_SOF8_Msk (0x1UL << DMAMUX_CSR_SOF8_Pos)
#define DMAMUX_CSR_SOF8 DMAMUX_CSR_SOF8_Msk
#define DMAMUX_CSR_SOF9_Pos (9U)
#define DMAMUX_CSR_SOF9_Msk (0x1UL << DMAMUX_CSR_SOF9_Pos)
#define DMAMUX_CSR_SOF9 DMAMUX_CSR_SOF9_Msk
#define DMAMUX_CSR_SOF10_Pos (10U)
#define DMAMUX_CSR_SOF10_Msk (0x1UL << DMAMUX_CSR_SOF10_Pos)
#define DMAMUX_CSR_SOF10 DMAMUX_CSR_SOF10_Msk
#define DMAMUX_CSR_SOF11_Pos (11U)
#define DMAMUX_CSR_SOF11_Msk (0x1UL << DMAMUX_CSR_SOF11_Pos)
#define DMAMUX_CSR_SOF11 DMAMUX_CSR_SOF11_Msk
#define DMAMUX_CSR_SOF12_Pos (12U)
#define DMAMUX_CSR_SOF12_Msk (0x1UL << DMAMUX_CSR_SOF12_Pos)
#define DMAMUX_CSR_SOF12 DMAMUX_CSR_SOF12_Msk
#define DMAMUX_CSR_SOF13_Pos (13U)
#define DMAMUX_CSR_SOF13_Msk (0x1UL << DMAMUX_CSR_SOF13_Pos)
#define DMAMUX_CSR_SOF13 DMAMUX_CSR_SOF13_Msk
#define DMAMUX_CFR_CSOF0_Pos (0U)
#define DMAMUX_CFR_CSOF0_Msk (0x1UL << DMAMUX_CFR_CSOF0_Pos)
#define DMAMUX_CFR_CSOF0 DMAMUX_CFR_CSOF0_Msk
#define DMAMUX_CFR_CSOF1_Pos (1U)
#define DMAMUX_CFR_CSOF1_Msk (0x1UL << DMAMUX_CFR_CSOF1_Pos)
#define DMAMUX_CFR_CSOF1 DMAMUX_CFR_CSOF1_Msk
#define DMAMUX_CFR_CSOF2_Pos (2U)
#define DMAMUX_CFR_CSOF2_Msk (0x1UL << DMAMUX_CFR_CSOF2_Pos)
#define DMAMUX_CFR_CSOF2 DMAMUX_CFR_CSOF2_Msk
#define DMAMUX_CFR_CSOF3_Pos (3U)
#define DMAMUX_CFR_CSOF3_Msk (0x1UL << DMAMUX_CFR_CSOF3_Pos)
#define DMAMUX_CFR_CSOF3 DMAMUX_CFR_CSOF3_Msk
#define DMAMUX_CFR_CSOF4_Pos (4U)
#define DMAMUX_CFR_CSOF4_Msk (0x1UL << DMAMUX_CFR_CSOF4_Pos)
#define DMAMUX_CFR_CSOF4 DMAMUX_CFR_CSOF4_Msk
#define DMAMUX_CFR_CSOF5_Pos (5U)
#define DMAMUX_CFR_CSOF5_Msk (0x1UL << DMAMUX_CFR_CSOF5_Pos)
#define DMAMUX_CFR_CSOF5 DMAMUX_CFR_CSOF5_Msk
#define DMAMUX_CFR_CSOF6_Pos (6U)
#define DMAMUX_CFR_CSOF6_Msk (0x1UL << DMAMUX_CFR_CSOF6_Pos)
#define DMAMUX_CFR_CSOF6 DMAMUX_CFR_CSOF6_Msk
#define DMAMUX_CFR_CSOF7_Pos (7U)
#define DMAMUX_CFR_CSOF7_Msk (0x1UL << DMAMUX_CFR_CSOF7_Pos)
#define DMAMUX_CFR_CSOF7 DMAMUX_CFR_CSOF7_Msk
#define DMAMUX_CFR_CSOF8_Pos (8U)
#define DMAMUX_CFR_CSOF8_Msk (0x1UL << DMAMUX_CFR_CSOF8_Pos)
#define DMAMUX_CFR_CSOF8 DMAMUX_CFR_CSOF8_Msk
#define DMAMUX_CFR_CSOF9_Pos (9U)
#define DMAMUX_CFR_CSOF9_Msk (0x1UL << DMAMUX_CFR_CSOF9_Pos)
#define DMAMUX_CFR_CSOF9 DMAMUX_CFR_CSOF9_Msk
#define DMAMUX_CFR_CSOF10_Pos (10U)
#define DMAMUX_CFR_CSOF10_Msk (0x1UL << DMAMUX_CFR_CSOF10_Pos)
#define DMAMUX_CFR_CSOF10 DMAMUX_CFR_CSOF10_Msk
#define DMAMUX_CFR_CSOF11_Pos (11U)
#define DMAMUX_CFR_CSOF11_Msk (0x1UL << DMAMUX_CFR_CSOF11_Pos)
#define DMAMUX_CFR_CSOF11 DMAMUX_CFR_CSOF11_Msk
#define DMAMUX_CFR_CSOF12_Pos (12U)
#define DMAMUX_CFR_CSOF12_Msk (0x1UL << DMAMUX_CFR_CSOF12_Pos)
#define DMAMUX_CFR_CSOF12 DMAMUX_CFR_CSOF12_Msk
#define DMAMUX_CFR_CSOF13_Pos (13U)
#define DMAMUX_CFR_CSOF13_Msk (0x1UL << DMAMUX_CFR_CSOF13_Pos)
#define DMAMUX_CFR_CSOF13 DMAMUX_CFR_CSOF13_Msk
#define DMAMUX_RGxCR_SIG_ID_Pos (0U)
#define DMAMUX_RGxCR_SIG_ID_Msk (0x1FUL << DMAMUX_RGxCR_SIG_ID_Pos)
#define DMAMUX_RGxCR_SIG_ID DMAMUX_RGxCR_SIG_ID_Msk
#define DMAMUX_RGxCR_SIG_ID_0 (0x01U << DMAMUX_RGxCR_SIG_ID_Pos)
#define DMAMUX_RGxCR_SIG_ID_1 (0x02U << DMAMUX_RGxCR_SIG_ID_Pos)
#define DMAMUX_RGxCR_SIG_ID_2 (0x04U << DMAMUX_RGxCR_SIG_ID_Pos)
#define DMAMUX_RGxCR_SIG_ID_3 (0x08U << DMAMUX_RGxCR_SIG_ID_Pos)
#define DMAMUX_RGxCR_SIG_ID_4 (0x10U << DMAMUX_RGxCR_SIG_ID_Pos)
#define DMAMUX_RGxCR_OIE_Pos (8U)
#define DMAMUX_RGxCR_OIE_Msk (0x1UL << DMAMUX_RGxCR_OIE_Pos)
#define DMAMUX_RGxCR_OIE DMAMUX_RGxCR_OIE_Msk
#define DMAMUX_RGxCR_GE_Pos (16U)
#define DMAMUX_RGxCR_GE_Msk (0x1UL << DMAMUX_RGxCR_GE_Pos)
#define DMAMUX_RGxCR_GE DMAMUX_RGxCR_GE_Msk
#define DMAMUX_RGxCR_GPOL_Pos (17U)
#define DMAMUX_RGxCR_GPOL_Msk (0x3UL << DMAMUX_RGxCR_GPOL_Pos)
#define DMAMUX_RGxCR_GPOL DMAMUX_RGxCR_GPOL_Msk
#define DMAMUX_RGxCR_GPOL_0 (0x1U << DMAMUX_RGxCR_GPOL_Pos)
#define DMAMUX_RGxCR_GPOL_1 (0x2U << DMAMUX_RGxCR_GPOL_Pos)
#define DMAMUX_RGxCR_GNBREQ_Pos (19U)
#define DMAMUX_RGxCR_GNBREQ_Msk (0x1FUL << DMAMUX_RGxCR_GNBREQ_Pos)
#define DMAMUX_RGxCR_GNBREQ DMAMUX_RGxCR_GNBREQ_Msk
#define DMAMUX_RGxCR_GNBREQ_0 (0x01U << DMAMUX_RGxCR_GNBREQ_Pos)
#define DMAMUX_RGxCR_GNBREQ_1 (0x02U << DMAMUX_RGxCR_GNBREQ_Pos)
#define DMAMUX_RGxCR_GNBREQ_2 (0x04U << DMAMUX_RGxCR_GNBREQ_Pos)
#define DMAMUX_RGxCR_GNBREQ_3 (0x08U << DMAMUX_RGxCR_GNBREQ_Pos)
#define DMAMUX_RGxCR_GNBREQ_4 (0x10U << DMAMUX_RGxCR_GNBREQ_Pos)
#define DMAMUX_RGSR_OF0_Pos (0U)
#define DMAMUX_RGSR_OF0_Msk (0x1UL << DMAMUX_RGSR_OF0_Pos)
#define DMAMUX_RGSR_OF0 DMAMUX_RGSR_OF0_Msk
#define DMAMUX_RGSR_OF1_Pos (1U)
#define DMAMUX_RGSR_OF1_Msk (0x1UL << DMAMUX_RGSR_OF1_Pos)
#define DMAMUX_RGSR_OF1 DMAMUX_RGSR_OF1_Msk
#define DMAMUX_RGSR_OF2_Pos (2U)
#define DMAMUX_RGSR_OF2_Msk (0x1UL << DMAMUX_RGSR_OF2_Pos)
#define DMAMUX_RGSR_OF2 DMAMUX_RGSR_OF2_Msk
#define DMAMUX_RGSR_OF3_Pos (3U)
#define DMAMUX_RGSR_OF3_Msk (0x1UL << DMAMUX_RGSR_OF3_Pos)
#define DMAMUX_RGSR_OF3 DMAMUX_RGSR_OF3_Msk
#define DMAMUX_RGCFR_COF0_Pos (0U)
#define DMAMUX_RGCFR_COF0_Msk (0x1UL << DMAMUX_RGCFR_COF0_Pos)
#define DMAMUX_RGCFR_COF0 DMAMUX_RGCFR_COF0_Msk
#define DMAMUX_RGCFR_COF1_Pos (1U)
#define DMAMUX_RGCFR_COF1_Msk (0x1UL << DMAMUX_RGCFR_COF1_Pos)
#define DMAMUX_RGCFR_COF1 DMAMUX_RGCFR_COF1_Msk
#define DMAMUX_RGCFR_COF2_Pos (2U)
#define DMAMUX_RGCFR_COF2_Msk (0x1UL << DMAMUX_RGCFR_COF2_Pos)
#define DMAMUX_RGCFR_COF2 DMAMUX_RGCFR_COF2_Msk
#define DMAMUX_RGCFR_COF3_Pos (3U)
#define DMAMUX_RGCFR_COF3_Msk (0x1UL << DMAMUX_RGCFR_COF3_Pos)
#define DMAMUX_RGCFR_COF3 DMAMUX_RGCFR_COF3_Msk
#define EXTI_RTSR1_RT_Pos (0U)
#define EXTI_RTSR1_RT_Msk (0x803FFFFFUL << EXTI_RTSR1_RT_Pos)
#define EXTI_RTSR1_RT EXTI_RTSR1_RT_Msk
#define EXTI_RTSR1_RT0_Pos (0U)
#define EXTI_RTSR1_RT0_Msk (0x1UL << EXTI_RTSR1_RT0_Pos)
#define EXTI_RTSR1_RT0 EXTI_RTSR1_RT0_Msk
#define EXTI_RTSR1_RT1_Pos (1U)
#define EXTI_RTSR1_RT1_Msk (0x1UL << EXTI_RTSR1_RT1_Pos)
#define EXTI_RTSR1_RT1 EXTI_RTSR1_RT1_Msk
#define EXTI_RTSR1_RT2_Pos (2U)
#define EXTI_RTSR1_RT2_Msk (0x1UL << EXTI_RTSR1_RT2_Pos)
#define EXTI_RTSR1_RT2 EXTI_RTSR1_RT2_Msk
#define EXTI_RTSR1_RT3_Pos (3U)
#define EXTI_RTSR1_RT3_Msk (0x1UL << EXTI_RTSR1_RT3_Pos)
#define EXTI_RTSR1_RT3 EXTI_RTSR1_RT3_Msk
#define EXTI_RTSR1_RT4_Pos (4U)
#define EXTI_RTSR1_RT4_Msk (0x1UL << EXTI_RTSR1_RT4_Pos)
#define EXTI_RTSR1_RT4 EXTI_RTSR1_RT4_Msk
#define EXTI_RTSR1_RT5_Pos (5U)
#define EXTI_RTSR1_RT5_Msk (0x1UL << EXTI_RTSR1_RT5_Pos)
#define EXTI_RTSR1_RT5 EXTI_RTSR1_RT5_Msk
#define EXTI_RTSR1_RT6_Pos (6U)
#define EXTI_RTSR1_RT6_Msk (0x1UL << EXTI_RTSR1_RT6_Pos)
#define EXTI_RTSR1_RT6 EXTI_RTSR1_RT6_Msk
#define EXTI_RTSR1_RT7_Pos (7U)
#define EXTI_RTSR1_RT7_Msk (0x1UL << EXTI_RTSR1_RT7_Pos)
#define EXTI_RTSR1_RT7 EXTI_RTSR1_RT7_Msk
#define EXTI_RTSR1_RT8_Pos (8U)
#define EXTI_RTSR1_RT8_Msk (0x1UL << EXTI_RTSR1_RT8_Pos)
#define EXTI_RTSR1_RT8 EXTI_RTSR1_RT8_Msk
#define EXTI_RTSR1_RT9_Pos (9U)
#define EXTI_RTSR1_RT9_Msk (0x1UL << EXTI_RTSR1_RT9_Pos)
#define EXTI_RTSR1_RT9 EXTI_RTSR1_RT9_Msk
#define EXTI_RTSR1_RT10_Pos (10U)
#define EXTI_RTSR1_RT10_Msk (0x1UL << EXTI_RTSR1_RT10_Pos)
#define EXTI_RTSR1_RT10 EXTI_RTSR1_RT10_Msk
#define EXTI_RTSR1_RT11_Pos (11U)
#define EXTI_RTSR1_RT11_Msk (0x1UL << EXTI_RTSR1_RT11_Pos)
#define EXTI_RTSR1_RT11 EXTI_RTSR1_RT11_Msk
#define EXTI_RTSR1_RT12_Pos (12U)
#define EXTI_RTSR1_RT12_Msk (0x1UL << EXTI_RTSR1_RT12_Pos)
#define EXTI_RTSR1_RT12 EXTI_RTSR1_RT12_Msk
#define EXTI_RTSR1_RT13_Pos (13U)
#define EXTI_RTSR1_RT13_Msk (0x1UL << EXTI_RTSR1_RT13_Pos)
#define EXTI_RTSR1_RT13 EXTI_RTSR1_RT13_Msk
#define EXTI_RTSR1_RT14_Pos (14U)
#define EXTI_RTSR1_RT14_Msk (0x1UL << EXTI_RTSR1_RT14_Pos)
#define EXTI_RTSR1_RT14 EXTI_RTSR1_RT14_Msk
#define EXTI_RTSR1_RT15_Pos (15U)
#define EXTI_RTSR1_RT15_Msk (0x1UL << EXTI_RTSR1_RT15_Pos)
#define EXTI_RTSR1_RT15 EXTI_RTSR1_RT15_Msk
#define EXTI_RTSR1_RT16_Pos (16U)
#define EXTI_RTSR1_RT16_Msk (0x1UL << EXTI_RTSR1_RT16_Pos)
#define EXTI_RTSR1_RT16 EXTI_RTSR1_RT16_Msk
#define EXTI_RTSR1_RT17_Pos (17U)
#define EXTI_RTSR1_RT17_Msk (0x1UL << EXTI_RTSR1_RT17_Pos)
#define EXTI_RTSR1_RT17 EXTI_RTSR1_RT17_Msk
#define EXTI_RTSR1_RT18_Pos (18U)
#define EXTI_RTSR1_RT18_Msk (0x1UL << EXTI_RTSR1_RT18_Pos)
#define EXTI_RTSR1_RT18 EXTI_RTSR1_RT18_Msk
#define EXTI_RTSR1_RT19_Pos (19U)
#define EXTI_RTSR1_RT19_Msk (0x1UL << EXTI_RTSR1_RT19_Pos)
#define EXTI_RTSR1_RT19 EXTI_RTSR1_RT19_Msk
#define EXTI_RTSR1_RT20_Pos (20U)
#define EXTI_RTSR1_RT20_Msk (0x1UL << EXTI_RTSR1_RT20_Pos)
#define EXTI_RTSR1_RT20 EXTI_RTSR1_RT20_Msk
#define EXTI_RTSR1_RT21_Pos (21U)
#define EXTI_RTSR1_RT21_Msk (0x1UL << EXTI_RTSR1_RT21_Pos)
#define EXTI_RTSR1_RT21 EXTI_RTSR1_RT21_Msk
#define EXTI_RTSR1_RT31_Pos (31U)
#define EXTI_RTSR1_RT31_Msk (0x1UL << EXTI_RTSR1_RT31_Pos)
#define EXTI_RTSR1_RT31 EXTI_RTSR1_RT31_Msk
#define EXTI_FTSR1_FT_Pos (0U)
#define EXTI_FTSR1_FT_Msk (0x803FFFFFUL << EXTI_FTSR1_FT_Pos)
#define EXTI_FTSR1_FT EXTI_FTSR1_FT_Msk
#define EXTI_FTSR1_FT0_Pos (0U)
#define EXTI_FTSR1_FT0_Msk (0x1UL << EXTI_FTSR1_FT0_Pos)
#define EXTI_FTSR1_FT0 EXTI_FTSR1_FT0_Msk
#define EXTI_FTSR1_FT1_Pos (1U)
#define EXTI_FTSR1_FT1_Msk (0x1UL << EXTI_FTSR1_FT1_Pos)
#define EXTI_FTSR1_FT1 EXTI_FTSR1_FT1_Msk
#define EXTI_FTSR1_FT2_Pos (2U)
#define EXTI_FTSR1_FT2_Msk (0x1UL << EXTI_FTSR1_FT2_Pos)
#define EXTI_FTSR1_FT2 EXTI_FTSR1_FT2_Msk
#define EXTI_FTSR1_FT3_Pos (3U)
#define EXTI_FTSR1_FT3_Msk (0x1UL << EXTI_FTSR1_FT3_Pos)
#define EXTI_FTSR1_FT3 EXTI_FTSR1_FT3_Msk
#define EXTI_FTSR1_FT4_Pos (4U)
#define EXTI_FTSR1_FT4_Msk (0x1UL << EXTI_FTSR1_FT4_Pos)
#define EXTI_FTSR1_FT4 EXTI_FTSR1_FT4_Msk
#define EXTI_FTSR1_FT5_Pos (5U)
#define EXTI_FTSR1_FT5_Msk (0x1UL << EXTI_FTSR1_FT5_Pos)
#define EXTI_FTSR1_FT5 EXTI_FTSR1_FT5_Msk
#define EXTI_FTSR1_FT6_Pos (6U)
#define EXTI_FTSR1_FT6_Msk (0x1UL << EXTI_FTSR1_FT6_Pos)
#define EXTI_FTSR1_FT6 EXTI_FTSR1_FT6_Msk
#define EXTI_FTSR1_FT7_Pos (7U)
#define EXTI_FTSR1_FT7_Msk (0x1UL << EXTI_FTSR1_FT7_Pos)
#define EXTI_FTSR1_FT7 EXTI_FTSR1_FT7_Msk
#define EXTI_FTSR1_FT8_Pos (8U)
#define EXTI_FTSR1_FT8_Msk (0x1UL << EXTI_FTSR1_FT8_Pos)
#define EXTI_FTSR1_FT8 EXTI_FTSR1_FT8_Msk
#define EXTI_FTSR1_FT9_Pos (9U)
#define EXTI_FTSR1_FT9_Msk (0x1UL << EXTI_FTSR1_FT9_Pos)
#define EXTI_FTSR1_FT9 EXTI_FTSR1_FT9_Msk
#define EXTI_FTSR1_FT10_Pos (10U)
#define EXTI_FTSR1_FT10_Msk (0x1UL << EXTI_FTSR1_FT10_Pos)
#define EXTI_FTSR1_FT10 EXTI_FTSR1_FT10_Msk
#define EXTI_FTSR1_FT11_Pos (11U)
#define EXTI_FTSR1_FT11_Msk (0x1UL << EXTI_FTSR1_FT11_Pos)
#define EXTI_FTSR1_FT11 EXTI_FTSR1_FT11_Msk
#define EXTI_FTSR1_FT12_Pos (12U)
#define EXTI_FTSR1_FT12_Msk (0x1UL << EXTI_FTSR1_FT12_Pos)
#define EXTI_FTSR1_FT12 EXTI_FTSR1_FT12_Msk
#define EXTI_FTSR1_FT13_Pos (13U)
#define EXTI_FTSR1_FT13_Msk (0x1UL << EXTI_FTSR1_FT13_Pos)
#define EXTI_FTSR1_FT13 EXTI_FTSR1_FT13_Msk
#define EXTI_FTSR1_FT14_Pos (14U)
#define EXTI_FTSR1_FT14_Msk (0x1UL << EXTI_FTSR1_FT14_Pos)
#define EXTI_FTSR1_FT14 EXTI_FTSR1_FT14_Msk
#define EXTI_FTSR1_FT15_Pos (15U)
#define EXTI_FTSR1_FT15_Msk (0x1UL << EXTI_FTSR1_FT15_Pos)
#define EXTI_FTSR1_FT15 EXTI_FTSR1_FT15_Msk
#define EXTI_FTSR1_FT16_Pos (16U)
#define EXTI_FTSR1_FT16_Msk (0x1UL << EXTI_FTSR1_FT16_Pos)
#define EXTI_FTSR1_FT16 EXTI_FTSR1_FT16_Msk
#define EXTI_FTSR1_FT17_Pos (17U)
#define EXTI_FTSR1_FT17_Msk (0x1UL << EXTI_FTSR1_FT17_Pos)
#define EXTI_FTSR1_FT17 EXTI_FTSR1_FT17_Msk
#define EXTI_FTSR1_FT18_Pos (18U)
#define EXTI_FTSR1_FT18_Msk (0x1UL << EXTI_FTSR1_FT18_Pos)
#define EXTI_FTSR1_FT18 EXTI_FTSR1_FT18_Msk
#define EXTI_FTSR1_FT19_Pos (19U)
#define EXTI_FTSR1_FT19_Msk (0x1UL << EXTI_FTSR1_FT19_Pos)
#define EXTI_FTSR1_FT19 EXTI_FTSR1_FT19_Msk
#define EXTI_FTSR1_FT20_Pos (20U)
#define EXTI_FTSR1_FT20_Msk (0x1UL << EXTI_FTSR1_FT20_Pos)
#define EXTI_FTSR1_FT20 EXTI_FTSR1_FT20_Msk
#define EXTI_FTSR1_FT21_Pos (21U)
#define EXTI_FTSR1_FT21_Msk (0x1UL << EXTI_FTSR1_FT21_Pos)
#define EXTI_FTSR1_FT21 EXTI_FTSR1_FT21_Msk
#define EXTI_FTSR1_FT31_Pos (31U)
#define EXTI_FTSR1_FT31_Msk (0x1UL << EXTI_FTSR1_FT31_Pos)
#define EXTI_FTSR1_FT31 EXTI_FTSR1_FT31_Msk
#define EXTI_SWIER1_SWI_Pos (0U)
#define EXTI_SWIER1_SWI_Msk (0x803FFFFFUL << EXTI_SWIER1_SWI_Pos)
#define EXTI_SWIER1_SWI EXTI_SWIER1_SWI_Msk
#define EXTI_SWIER1_SWI0_Pos (0U)
#define EXTI_SWIER1_SWI0_Msk (0x1UL << EXTI_SWIER1_SWI0_Pos)
#define EXTI_SWIER1_SWI0 EXTI_SWIER1_SWI0_Msk
#define EXTI_SWIER1_SWI1_Pos (1U)
#define EXTI_SWIER1_SWI1_Msk (0x1UL << EXTI_SWIER1_SWI1_Pos)
#define EXTI_SWIER1_SWI1 EXTI_SWIER1_SWI1_Msk
#define EXTI_SWIER1_SWI2_Pos (2U)
#define EXTI_SWIER1_SWI2_Msk (0x1UL << EXTI_SWIER1_SWI2_Pos)
#define EXTI_SWIER1_SWI2 EXTI_SWIER1_SWI2_Msk
#define EXTI_SWIER1_SWI3_Pos (3U)
#define EXTI_SWIER1_SWI3_Msk (0x1UL << EXTI_SWIER1_SWI3_Pos)
#define EXTI_SWIER1_SWI3 EXTI_SWIER1_SWI3_Msk
#define EXTI_SWIER1_SWI4_Pos (4U)
#define EXTI_SWIER1_SWI4_Msk (0x1UL << EXTI_SWIER1_SWI4_Pos)
#define EXTI_SWIER1_SWI4 EXTI_SWIER1_SWI4_Msk
#define EXTI_SWIER1_SWI5_Pos (5U)
#define EXTI_SWIER1_SWI5_Msk (0x1UL << EXTI_SWIER1_SWI5_Pos)
#define EXTI_SWIER1_SWI5 EXTI_SWIER1_SWI5_Msk
#define EXTI_SWIER1_SWI6_Pos (6U)
#define EXTI_SWIER1_SWI6_Msk (0x1UL << EXTI_SWIER1_SWI6_Pos)
#define EXTI_SWIER1_SWI6 EXTI_SWIER1_SWI6_Msk
#define EXTI_SWIER1_SWI7_Pos (7U)
#define EXTI_SWIER1_SWI7_Msk (0x1UL << EXTI_SWIER1_SWI7_Pos)
#define EXTI_SWIER1_SWI7 EXTI_SWIER1_SWI7_Msk
#define EXTI_SWIER1_SWI8_Pos (8U)
#define EXTI_SWIER1_SWI8_Msk (0x1UL << EXTI_SWIER1_SWI8_Pos)
#define EXTI_SWIER1_SWI8 EXTI_SWIER1_SWI8_Msk
#define EXTI_SWIER1_SWI9_Pos (9U)
#define EXTI_SWIER1_SWI9_Msk (0x1UL << EXTI_SWIER1_SWI9_Pos)
#define EXTI_SWIER1_SWI9 EXTI_SWIER1_SWI9_Msk
#define EXTI_SWIER1_SWI10_Pos (10U)
#define EXTI_SWIER1_SWI10_Msk (0x1UL << EXTI_SWIER1_SWI10_Pos)
#define EXTI_SWIER1_SWI10 EXTI_SWIER1_SWI10_Msk
#define EXTI_SWIER1_SWI11_Pos (11U)
#define EXTI_SWIER1_SWI11_Msk (0x1UL << EXTI_SWIER1_SWI11_Pos)
#define EXTI_SWIER1_SWI11 EXTI_SWIER1_SWI11_Msk
#define EXTI_SWIER1_SWI12_Pos (12U)
#define EXTI_SWIER1_SWI12_Msk (0x1UL << EXTI_SWIER1_SWI12_Pos)
#define EXTI_SWIER1_SWI12 EXTI_SWIER1_SWI12_Msk
#define EXTI_SWIER1_SWI13_Pos (13U)
#define EXTI_SWIER1_SWI13_Msk (0x1UL << EXTI_SWIER1_SWI13_Pos)
#define EXTI_SWIER1_SWI13 EXTI_SWIER1_SWI13_Msk
#define EXTI_SWIER1_SWI14_Pos (14U)
#define EXTI_SWIER1_SWI14_Msk (0x1UL << EXTI_SWIER1_SWI14_Pos)
#define EXTI_SWIER1_SWI14 EXTI_SWIER1_SWI14_Msk
#define EXTI_SWIER1_SWI15_Pos (15U)
#define EXTI_SWIER1_SWI15_Msk (0x1UL << EXTI_SWIER1_SWI15_Pos)
#define EXTI_SWIER1_SWI15 EXTI_SWIER1_SWI15_Msk
#define EXTI_SWIER1_SWI16_Pos (16U)
#define EXTI_SWIER1_SWI16_Msk (0x1UL << EXTI_SWIER1_SWI16_Pos)
#define EXTI_SWIER1_SWI16 EXTI_SWIER1_SWI16_Msk
#define EXTI_SWIER1_SWI17_Pos (17U)
#define EXTI_SWIER1_SWI17_Msk (0x1UL << EXTI_SWIER1_SWI17_Pos)
#define EXTI_SWIER1_SWI17 EXTI_SWIER1_SWI17_Msk
#define EXTI_SWIER1_SWI18_Pos (18U)
#define EXTI_SWIER1_SWI18_Msk (0x1UL << EXTI_SWIER1_SWI18_Pos)
#define EXTI_SWIER1_SWI18 EXTI_SWIER1_SWI18_Msk
#define EXTI_SWIER1_SWI19_Pos (19U)
#define EXTI_SWIER1_SWI19_Msk (0x1UL << EXTI_SWIER1_SWI19_Pos)
#define EXTI_SWIER1_SWI19 EXTI_SWIER1_SWI19_Msk
#define EXTI_SWIER1_SWI20_Pos (20U)
#define EXTI_SWIER1_SWI20_Msk (0x1UL << EXTI_SWIER1_SWI20_Pos)
#define EXTI_SWIER1_SWI20 EXTI_SWIER1_SWI20_Msk
#define EXTI_SWIER1_SWI21_Pos (21U)
#define EXTI_SWIER1_SWI21_Msk (0x1UL << EXTI_SWIER1_SWI21_Pos)
#define EXTI_SWIER1_SWI21 EXTI_SWIER1_SWI21_Msk
#define EXTI_SWIER1_SWI31_Pos (31U)
#define EXTI_SWIER1_SWI31_Msk (0x1UL << EXTI_SWIER1_SWI31_Pos)
#define EXTI_SWIER1_SWI31 EXTI_SWIER1_SWI31_Msk
#define EXTI_PR1_PIF_Pos (0U)
#define EXTI_PR1_PIF_Msk (0x803FFFFFUL << EXTI_PR1_PIF_Pos)
#define EXTI_PR1_PIF EXTI_PR1_PIF_Msk
#define EXTI_PR1_PIF0_Pos (0U)
#define EXTI_PR1_PIF0_Msk (0x1UL << EXTI_PR1_PIF0_Pos)
#define EXTI_PR1_PIF0 EXTI_PR1_PIF0_Msk
#define EXTI_PR1_PIF1_Pos (1U)
#define EXTI_PR1_PIF1_Msk (0x1UL << EXTI_PR1_PIF1_Pos)
#define EXTI_PR1_PIF1 EXTI_PR1_PIF1_Msk
#define EXTI_PR1_PIF2_Pos (2U)
#define EXTI_PR1_PIF2_Msk (0x1UL << EXTI_PR1_PIF2_Pos)
#define EXTI_PR1_PIF2 EXTI_PR1_PIF2_Msk
#define EXTI_PR1_PIF3_Pos (3U)
#define EXTI_PR1_PIF3_Msk (0x1UL << EXTI_PR1_PIF3_Pos)
#define EXTI_PR1_PIF3 EXTI_PR1_PIF3_Msk
#define EXTI_PR1_PIF4_Pos (4U)
#define EXTI_PR1_PIF4_Msk (0x1UL << EXTI_PR1_PIF4_Pos)
#define EXTI_PR1_PIF4 EXTI_PR1_PIF4_Msk
#define EXTI_PR1_PIF5_Pos (5U)
#define EXTI_PR1_PIF5_Msk (0x1UL << EXTI_PR1_PIF5_Pos)
#define EXTI_PR1_PIF5 EXTI_PR1_PIF5_Msk
#define EXTI_PR1_PIF6_Pos (6U)
#define EXTI_PR1_PIF6_Msk (0x1UL << EXTI_PR1_PIF6_Pos)
#define EXTI_PR1_PIF6 EXTI_PR1_PIF6_Msk
#define EXTI_PR1_PIF7_Pos (7U)
#define EXTI_PR1_PIF7_Msk (0x1UL << EXTI_PR1_PIF7_Pos)
#define EXTI_PR1_PIF7 EXTI_PR1_PIF7_Msk
#define EXTI_PR1_PIF8_Pos (8U)
#define EXTI_PR1_PIF8_Msk (0x1UL << EXTI_PR1_PIF8_Pos)
#define EXTI_PR1_PIF8 EXTI_PR1_PIF8_Msk
#define EXTI_PR1_PIF9_Pos (9U)
#define EXTI_PR1_PIF9_Msk (0x1UL << EXTI_PR1_PIF9_Pos)
#define EXTI_PR1_PIF9 EXTI_PR1_PIF9_Msk
#define EXTI_PR1_PIF10_Pos (10U)
#define EXTI_PR1_PIF10_Msk (0x1UL << EXTI_PR1_PIF10_Pos)
#define EXTI_PR1_PIF10 EXTI_PR1_PIF10_Msk
#define EXTI_PR1_PIF11_Pos (11U)
#define EXTI_PR1_PIF11_Msk (0x1UL << EXTI_PR1_PIF11_Pos)
#define EXTI_PR1_PIF11 EXTI_PR1_PIF11_Msk
#define EXTI_PR1_PIF12_Pos (12U)
#define EXTI_PR1_PIF12_Msk (0x1UL << EXTI_PR1_PIF12_Pos)
#define EXTI_PR1_PIF12 EXTI_PR1_PIF12_Msk
#define EXTI_PR1_PIF13_Pos (13U)
#define EXTI_PR1_PIF13_Msk (0x1UL << EXTI_PR1_PIF13_Pos)
#define EXTI_PR1_PIF13 EXTI_PR1_PIF13_Msk
#define EXTI_PR1_PIF14_Pos (14U)
#define EXTI_PR1_PIF14_Msk (0x1UL << EXTI_PR1_PIF14_Pos)
#define EXTI_PR1_PIF14 EXTI_PR1_PIF14_Msk
#define EXTI_PR1_PIF15_Pos (15U)
#define EXTI_PR1_PIF15_Msk (0x1UL << EXTI_PR1_PIF15_Pos)
#define EXTI_PR1_PIF15 EXTI_PR1_PIF15_Msk
#define EXTI_PR1_PIF16_Pos (16U)
#define EXTI_PR1_PIF16_Msk (0x1UL << EXTI_PR1_PIF16_Pos)
#define EXTI_PR1_PIF16 EXTI_PR1_PIF16_Msk
#define EXTI_PR1_PIF17_Pos (17U)
#define EXTI_PR1_PIF17_Msk (0x1UL << EXTI_PR1_PIF17_Pos)
#define EXTI_PR1_PIF17 EXTI_PR1_PIF17_Msk
#define EXTI_PR1_PIF18_Pos (18U)
#define EXTI_PR1_PIF18_Msk (0x1UL << EXTI_PR1_PIF18_Pos)
#define EXTI_PR1_PIF18 EXTI_PR1_PIF18_Msk
#define EXTI_PR1_PIF19_Pos (19U)
#define EXTI_PR1_PIF19_Msk (0x1UL << EXTI_PR1_PIF19_Pos)
#define EXTI_PR1_PIF19 EXTI_PR1_PIF19_Msk
#define EXTI_PR1_PIF20_Pos (20U)
#define EXTI_PR1_PIF20_Msk (0x1UL << EXTI_PR1_PIF20_Pos)
#define EXTI_PR1_PIF20 EXTI_PR1_PIF20_Msk
#define EXTI_PR1_PIF21_Pos (21U)
#define EXTI_PR1_PIF21_Msk (0x1UL << EXTI_PR1_PIF21_Pos)
#define EXTI_PR1_PIF21 EXTI_PR1_PIF21_Msk
#define EXTI_PR1_PIF31_Pos (31U)
#define EXTI_PR1_PIF31_Msk (0x1UL << EXTI_PR1_PIF31_Pos)
#define EXTI_PR1_PIF31 EXTI_PR1_PIF31_Msk
#define EXTI_RTSR2_RT_Pos (0U)
#define EXTI_RTSR2_RT_Msk (0x302UL << EXTI_RTSR2_RT_Pos)
#define EXTI_RTSR2_RT EXTI_RTSR2_RT_Msk
#define EXTI_RTSR2_RT33_Pos (1U)
#define EXTI_RTSR2_RT33_Msk (0x1UL << EXTI_RTSR2_RT33_Pos)
#define EXTI_RTSR2_RT33 EXTI_RTSR2_RT33_Msk
#define EXTI_RTSR2_RT40_Pos (8U)
#define EXTI_RTSR2_RT40_Msk (0x1UL << EXTI_RTSR2_RT40_Pos)
#define EXTI_RTSR2_RT40 EXTI_RTSR2_RT40_Msk
#define EXTI_RTSR2_RT41_Pos (9U)
#define EXTI_RTSR2_RT41_Msk (0x1UL << EXTI_RTSR2_RT41_Pos)
#define EXTI_RTSR2_RT41 EXTI_RTSR2_RT41_Msk
#define EXTI_FTSR2_FT_Pos (0U)
#define EXTI_FTSR2_FT_Msk (0x302UL << EXTI_FTSR2_FT_Pos)
#define EXTI_FTSR2_FT EXTI_FTSR2_FT_Msk
#define EXTI_FTSR2_FT33_Pos (1U)
#define EXTI_FTSR2_FT33_Msk (0x1UL << EXTI_FTSR2_FT33_Pos)
#define EXTI_FTSR2_FT33 EXTI_FTSR2_FT33_Msk
#define EXTI_FTSR2_FT40_Pos (8U)
#define EXTI_FTSR2_FT40_Msk (0x1UL << EXTI_FTSR2_FT40_Pos)
#define EXTI_FTSR2_FT40 EXTI_FTSR2_FT40_Msk
#define EXTI_FTSR2_FT41_Pos (9U)
#define EXTI_FTSR2_FT41_Msk (0x1UL << EXTI_FTSR2_FT41_Pos)
#define EXTI_FTSR2_FT41 EXTI_FTSR2_FT41_Msk
#define EXTI_SWIER2_SWI_Pos (0U)
#define EXTI_SWIER2_SWI_Msk (0x302UL << EXTI_SWIER2_SWI_Pos)
#define EXTI_SWIER2_SWI EXTI_SWIER2_SWI_Msk
#define EXTI_SWIER2_SWI33_Pos (1U)
#define EXTI_SWIER2_SWI33_Msk (0x1UL << EXTI_SWIER2_SWI33_Pos)
#define EXTI_SWIER2_SWI33 EXTI_SWIER2_SWI33_Msk
#define EXTI_SWIER2_SWI40_Pos (8U)
#define EXTI_SWIER2_SWI40_Msk (0x1UL << EXTI_SWIER2_SWI40_Pos)
#define EXTI_SWIER2_SWI40 EXTI_SWIER2_SWI40_Msk
#define EXTI_SWIER2_SWI41_Pos (9U)
#define EXTI_SWIER2_SWI41_Msk (0x1UL << EXTI_SWIER2_SWI41_Pos)
#define EXTI_SWIER2_SWI41 EXTI_SWIER2_SWI41_Msk
#define EXTI_PR2_PIF_Pos (0U)
#define EXTI_PR2_PIF_Msk (0x302UL << EXTI_PR2_PIF_Pos)
#define EXTI_PR2_PIF EXTI_PR2_PIF_Msk
#define EXTI_PR2_PIF33_Pos (1U)
#define EXTI_PR2_PIF33_Msk (0x1UL << EXTI_PR2_PIF33_Pos)
#define EXTI_PR2_PIF33 EXTI_PR2_PIF33_Msk
#define EXTI_PR2_PIF40_Pos (8U)
#define EXTI_PR2_PIF40_Msk (0x1UL << EXTI_PR2_PIF40_Pos)
#define EXTI_PR2_PIF40 EXTI_PR2_PIF40_Msk
#define EXTI_PR2_PIF41_Pos (9U)
#define EXTI_PR2_PIF41_Msk (0x1UL << EXTI_PR2_PIF41_Pos)
#define EXTI_PR2_PIF41 EXTI_PR2_PIF41_Msk
#define EXTI_IMR1_Pos (0U)
#define EXTI_IMR1_Msk (0xFFFFFFFFUL << EXTI_IMR1_Pos)
#define EXTI_IMR1_IM EXTI_IMR1_Msk
#define EXTI_IMR1_IM0_Pos (0U)
#define EXTI_IMR1_IM0_Msk (0x1UL << EXTI_IMR1_IM0_Pos)
#define EXTI_IMR1_IM0 EXTI_IMR1_IM0_Msk
#define EXTI_IMR1_IM1_Pos (1U)
#define EXTI_IMR1_IM1_Msk (0x1UL << EXTI_IMR1_IM1_Pos)
#define EXTI_IMR1_IM1 EXTI_IMR1_IM1_Msk
#define EXTI_IMR1_IM2_Pos (2U)
#define EXTI_IMR1_IM2_Msk (0x1UL << EXTI_IMR1_IM2_Pos)
#define EXTI_IMR1_IM2 EXTI_IMR1_IM2_Msk
#define EXTI_IMR1_IM3_Pos (3U)
#define EXTI_IMR1_IM3_Msk (0x1UL << EXTI_IMR1_IM3_Pos)
#define EXTI_IMR1_IM3 EXTI_IMR1_IM3_Msk
#define EXTI_IMR1_IM4_Pos (4U)
#define EXTI_IMR1_IM4_Msk (0x1UL << EXTI_IMR1_IM4_Pos)
#define EXTI_IMR1_IM4 EXTI_IMR1_IM4_Msk
#define EXTI_IMR1_IM5_Pos (5U)
#define EXTI_IMR1_IM5_Msk (0x1UL << EXTI_IMR1_IM5_Pos)
#define EXTI_IMR1_IM5 EXTI_IMR1_IM5_Msk
#define EXTI_IMR1_IM6_Pos (6U)
#define EXTI_IMR1_IM6_Msk (0x1UL << EXTI_IMR1_IM6_Pos)
#define EXTI_IMR1_IM6 EXTI_IMR1_IM6_Msk
#define EXTI_IMR1_IM7_Pos (7U)
#define EXTI_IMR1_IM7_Msk (0x1UL << EXTI_IMR1_IM7_Pos)
#define EXTI_IMR1_IM7 EXTI_IMR1_IM7_Msk
#define EXTI_IMR1_IM8_Pos (8U)
#define EXTI_IMR1_IM8_Msk (0x1UL << EXTI_IMR1_IM8_Pos)
#define EXTI_IMR1_IM8 EXTI_IMR1_IM8_Msk
#define EXTI_IMR1_IM9_Pos (9U)
#define EXTI_IMR1_IM9_Msk (0x1UL << EXTI_IMR1_IM9_Pos)
#define EXTI_IMR1_IM9 EXTI_IMR1_IM9_Msk
#define EXTI_IMR1_IM10_Pos (10U)
#define EXTI_IMR1_IM10_Msk (0x1UL << EXTI_IMR1_IM10_Pos)
#define EXTI_IMR1_IM10 EXTI_IMR1_IM10_Msk
#define EXTI_IMR1_IM11_Pos (11U)
#define EXTI_IMR1_IM11_Msk (0x1UL << EXTI_IMR1_IM11_Pos)
#define EXTI_IMR1_IM11 EXTI_IMR1_IM11_Msk
#define EXTI_IMR1_IM12_Pos (12U)
#define EXTI_IMR1_IM12_Msk (0x1UL << EXTI_IMR1_IM12_Pos)
#define EXTI_IMR1_IM12 EXTI_IMR1_IM12_Msk
#define EXTI_IMR1_IM13_Pos (13U)
#define EXTI_IMR1_IM13_Msk (0x1UL << EXTI_IMR1_IM13_Pos)
#define EXTI_IMR1_IM13 EXTI_IMR1_IM13_Msk
#define EXTI_IMR1_IM14_Pos (14U)
#define EXTI_IMR1_IM14_Msk (0x1UL << EXTI_IMR1_IM14_Pos)
#define EXTI_IMR1_IM14 EXTI_IMR1_IM14_Msk
#define EXTI_IMR1_IM15_Pos (15U)
#define EXTI_IMR1_IM15_Msk (0x1UL << EXTI_IMR1_IM15_Pos)
#define EXTI_IMR1_IM15 EXTI_IMR1_IM15_Msk
#define EXTI_IMR1_IM16_Pos (16U)
#define EXTI_IMR1_IM16_Msk (0x1UL << EXTI_IMR1_IM16_Pos)
#define EXTI_IMR1_IM16 EXTI_IMR1_IM16_Msk
#define EXTI_IMR1_IM17_Pos (17U)
#define EXTI_IMR1_IM17_Msk (0x1UL << EXTI_IMR1_IM17_Pos)
#define EXTI_IMR1_IM17 EXTI_IMR1_IM17_Msk
#define EXTI_IMR1_IM18_Pos (18U)
#define EXTI_IMR1_IM18_Msk (0x1UL << EXTI_IMR1_IM18_Pos)
#define EXTI_IMR1_IM18 EXTI_IMR1_IM18_Msk
#define EXTI_IMR1_IM19_Pos (19U)
#define EXTI_IMR1_IM19_Msk (0x1UL << EXTI_IMR1_IM19_Pos)
#define EXTI_IMR1_IM19 EXTI_IMR1_IM19_Msk
#define EXTI_IMR1_IM20_Pos (20U)
#define EXTI_IMR1_IM20_Msk (0x1UL << EXTI_IMR1_IM20_Pos)
#define EXTI_IMR1_IM20 EXTI_IMR1_IM20_Msk
#define EXTI_IMR1_IM21_Pos (21U)
#define EXTI_IMR1_IM21_Msk (0x1UL << EXTI_IMR1_IM21_Pos)
#define EXTI_IMR1_IM21 EXTI_IMR1_IM21_Msk
#define EXTI_IMR1_IM22_Pos (22U)
#define EXTI_IMR1_IM22_Msk (0x1UL << EXTI_IMR1_IM22_Pos)
#define EXTI_IMR1_IM22 EXTI_IMR1_IM22_Msk
#define EXTI_IMR1_IM23_Pos (23U)
#define EXTI_IMR1_IM23_Msk (0x1UL << EXTI_IMR1_IM23_Pos)
#define EXTI_IMR1_IM23 EXTI_IMR1_IM23_Msk
#define EXTI_IMR1_IM24_Pos (24U)
#define EXTI_IMR1_IM24_Msk (0x1UL << EXTI_IMR1_IM24_Pos)
#define EXTI_IMR1_IM24 EXTI_IMR1_IM24_Msk
#define EXTI_IMR1_IM25_Pos (25U)
#define EXTI_IMR1_IM25_Msk (0x1UL << EXTI_IMR1_IM25_Pos)
#define EXTI_IMR1_IM25 EXTI_IMR1_IM25_Msk
#define EXTI_IMR1_IM28_Pos (28U)
#define EXTI_IMR1_IM28_Msk (0x1UL << EXTI_IMR1_IM28_Pos)
#define EXTI_IMR1_IM28 EXTI_IMR1_IM28_Msk
#define EXTI_IMR1_IM29_Pos (29U)
#define EXTI_IMR1_IM29_Msk (0x1UL << EXTI_IMR1_IM29_Pos)
#define EXTI_IMR1_IM29 EXTI_IMR1_IM29_Msk
#define EXTI_IMR1_IM30_Pos (30U)
#define EXTI_IMR1_IM30_Msk (0x1UL << EXTI_IMR1_IM30_Pos)
#define EXTI_IMR1_IM30 EXTI_IMR1_IM30_Msk
#define EXTI_IMR1_IM31_Pos (31U)
#define EXTI_IMR1_IM31_Msk (0x1UL << EXTI_IMR1_IM31_Pos)
#define EXTI_IMR1_IM31 EXTI_IMR1_IM31_Msk
#define EXTI_EMR1_Pos (0U)
#define EXTI_EMR1_Msk (0x003EFFFFUL << EXTI_EMR1_Pos)
#define EXTI_EMR1_EM EXTI_EMR1_Msk
#define EXTI_EMR1_EM0_Pos (0U)
#define EXTI_EMR1_EM0_Msk (0x1UL << EXTI_EMR1_EM0_Pos)
#define EXTI_EMR1_EM0 EXTI_EMR1_EM0_Msk
#define EXTI_EMR1_EM1_Pos (1U)
#define EXTI_EMR1_EM1_Msk (0x1UL << EXTI_EMR1_EM1_Pos)
#define EXTI_EMR1_EM1 EXTI_EMR1_EM1_Msk
#define EXTI_EMR1_EM2_Pos (2U)
#define EXTI_EMR1_EM2_Msk (0x1UL << EXTI_EMR1_EM2_Pos)
#define EXTI_EMR1_EM2 EXTI_EMR1_EM2_Msk
#define EXTI_EMR1_EM3_Pos (3U)
#define EXTI_EMR1_EM3_Msk (0x1UL << EXTI_EMR1_EM3_Pos)
#define EXTI_EMR1_EM3 EXTI_EMR1_EM3_Msk
#define EXTI_EMR1_EM4_Pos (4U)
#define EXTI_EMR1_EM4_Msk (0x1UL << EXTI_EMR1_EM4_Pos)
#define EXTI_EMR1_EM4 EXTI_EMR1_EM4_Msk
#define EXTI_EMR1_EM5_Pos (5U)
#define EXTI_EMR1_EM5_Msk (0x1UL << EXTI_EMR1_EM5_Pos)
#define EXTI_EMR1_EM5 EXTI_EMR1_EM5_Msk
#define EXTI_EMR1_EM6_Pos (6U)
#define EXTI_EMR1_EM6_Msk (0x1UL << EXTI_EMR1_EM6_Pos)
#define EXTI_EMR1_EM6 EXTI_EMR1_EM6_Msk
#define EXTI_EMR1_EM7_Pos (7U)
#define EXTI_EMR1_EM7_Msk (0x1UL << EXTI_EMR1_EM7_Pos)
#define EXTI_EMR1_EM7 EXTI_EMR1_EM7_Msk
#define EXTI_EMR1_EM8_Pos (8U)
#define EXTI_EMR1_EM8_Msk (0x1UL << EXTI_EMR1_EM8_Pos)
#define EXTI_EMR1_EM8 EXTI_EMR1_EM8_Msk
#define EXTI_EMR1_EM9_Pos (9U)
#define EXTI_EMR1_EM9_Msk (0x1UL << EXTI_EMR1_EM9_Pos)
#define EXTI_EMR1_EM9 EXTI_EMR1_EM9_Msk
#define EXTI_EMR1_EM10_Pos (10U)
#define EXTI_EMR1_EM10_Msk (0x1UL << EXTI_EMR1_EM10_Pos)
#define EXTI_EMR1_EM10 EXTI_EMR1_EM10_Msk
#define EXTI_EMR1_EM11_Pos (11U)
#define EXTI_EMR1_EM11_Msk (0x1UL << EXTI_EMR1_EM11_Pos)
#define EXTI_EMR1_EM11 EXTI_EMR1_EM11_Msk
#define EXTI_EMR1_EM12_Pos (12U)
#define EXTI_EMR1_EM12_Msk (0x1UL << EXTI_EMR1_EM12_Pos)
#define EXTI_EMR1_EM12 EXTI_EMR1_EM12_Msk
#define EXTI_EMR1_EM13_Pos (13U)
#define EXTI_EMR1_EM13_Msk (0x1UL << EXTI_EMR1_EM13_Pos)
#define EXTI_EMR1_EM13 EXTI_EMR1_EM13_Msk
#define EXTI_EMR1_EM14_Pos (14U)
#define EXTI_EMR1_EM14_Msk (0x1UL << EXTI_EMR1_EM14_Pos)
#define EXTI_EMR1_EM14 EXTI_EMR1_EM14_Msk
#define EXTI_EMR1_EM15_Pos (15U)
#define EXTI_EMR1_EM15_Msk (0x1UL << EXTI_EMR1_EM15_Pos)
#define EXTI_EMR1_EM15 EXTI_EMR1_EM15_Msk
#define EXTI_EMR1_EM17_Pos (17U)
#define EXTI_EMR1_EM17_Msk (0x1UL << EXTI_EMR1_EM17_Pos)
#define EXTI_EMR1_EM17 EXTI_EMR1_EM17_Msk
#define EXTI_EMR1_EM18_Pos (18U)
#define EXTI_EMR1_EM18_Msk (0x1UL << EXTI_EMR1_EM18_Pos)
#define EXTI_EMR1_EM18 EXTI_EMR1_EM18_Msk
#define EXTI_EMR1_EM19_Pos (19U)
#define EXTI_EMR1_EM19_Msk (0x1UL << EXTI_EMR1_EM19_Pos)
#define EXTI_EMR1_EM19 EXTI_EMR1_EM19_Msk
#define EXTI_EMR1_EM20_Pos (20U)
#define EXTI_EMR1_EM20_Msk (0x1UL << EXTI_EMR1_EM20_Pos)
#define EXTI_EMR1_EM20 EXTI_EMR1_EM20_Msk
#define EXTI_EMR1_EM21_Pos (21U)
#define EXTI_EMR1_EM21_Msk (0x1UL << EXTI_EMR1_EM21_Pos)
#define EXTI_EMR1_EM21 EXTI_EMR1_EM21_Msk
#define EXTI_IMR2_Pos (0U)
#define EXTI_IMR2_Msk (0x0001FFFFUL << EXTI_IMR2_Pos)
#define EXTI_IMR2_IM EXTI_IMR2_Msk
#define EXTI_IMR2_IM33_Pos (1U)
#define EXTI_IMR2_IM33_Msk (0x1UL << EXTI_IMR2_IM33_Pos)
#define EXTI_IMR2_IM33 EXTI_IMR2_IM33_Msk
#define EXTI_IMR2_IM36_Pos (4U)
#define EXTI_IMR2_IM36_Msk (0x1UL << EXTI_IMR2_IM36_Pos)
#define EXTI_IMR2_IM36 EXTI_IMR2_IM36_Msk
#define EXTI_IMR2_IM37_Pos (5U)
#define EXTI_IMR2_IM37_Msk (0x1UL << EXTI_IMR2_IM37_Pos)
#define EXTI_IMR2_IM37 EXTI_IMR2_IM37_Msk
#define EXTI_IMR2_IM38_Pos (6U)
#define EXTI_IMR2_IM38_Msk (0x1UL << EXTI_IMR2_IM38_Pos)
#define EXTI_IMR2_IM38 EXTI_IMR2_IM38_Msk
#define EXTI_IMR2_IM39_Pos (7U)
#define EXTI_IMR2_IM39_Msk (0x1UL << EXTI_IMR2_IM39_Pos)
#define EXTI_IMR2_IM39 EXTI_IMR2_IM39_Msk
#define EXTI_IMR2_IM40_Pos (8U)
#define EXTI_IMR2_IM40_Msk (0x1UL << EXTI_IMR2_IM40_Pos)
#define EXTI_IMR2_IM40 EXTI_IMR2_IM40_Msk
#define EXTI_IMR2_IM41_Pos (9U)
#define EXTI_IMR2_IM41_Msk (0x1UL << EXTI_IMR2_IM41_Pos)
#define EXTI_IMR2_IM41 EXTI_IMR2_IM41_Msk
#define EXTI_IMR2_IM42_Pos (10U)
#define EXTI_IMR2_IM42_Msk (0x1UL << EXTI_IMR2_IM42_Pos)
#define EXTI_IMR2_IM42 EXTI_IMR2_IM42_Msk
#define EXTI_IMR2_IM43_Pos (11U)
#define EXTI_IMR2_IM43_Msk (0x1UL << EXTI_IMR2_IM43_Pos)
#define EXTI_IMR2_IM43 EXTI_IMR2_IM43_Msk
#define EXTI_IMR2_IM44_Pos (12U)
#define EXTI_IMR2_IM44_Msk (0x1UL << EXTI_IMR2_IM44_Pos)
#define EXTI_IMR2_IM44 EXTI_IMR2_IM44_Msk
#define EXTI_IMR2_IM45_Pos (13U)
#define EXTI_IMR2_IM45_Msk (0x1UL << EXTI_IMR2_IM45_Pos)
#define EXTI_IMR2_IM45 EXTI_IMR2_IM45_Msk
#define EXTI_IMR2_IM46_Pos (14U)
#define EXTI_IMR2_IM46_Msk (0x1UL << EXTI_IMR2_IM46_Pos)
#define EXTI_IMR2_IM46 EXTI_IMR2_IM46_Msk
#define EXTI_IMR2_IM48_Pos (16U)
#define EXTI_IMR2_IM48_Msk (0x1UL << EXTI_IMR2_IM48_Pos)
#define EXTI_IMR2_IM48 EXTI_IMR2_IM48_Msk
#define EXTI_EMR2_Pos (0U)
#define EXTI_EMR2_Msk (0x00000300UL << EXTI_EMR2_Pos)
#define EXTI_EMR2_EM EXTI_EMR2_Msk
#define EXTI_EMR2_EM40_Pos (8U)
#define EXTI_EMR2_EM40_Msk (0x1UL << EXTI_EMR2_EM40_Pos)
#define EXTI_EMR2_EM40 EXTI_EMR2_EM40_Msk
#define EXTI_EMR2_EM41_Pos (9U)
#define EXTI_EMR2_EM41_Msk (0x1UL << EXTI_EMR2_EM41_Pos)
#define EXTI_EMR2_EM41 EXTI_EMR2_EM41_Msk
#define EXTI_C2IMR1_Pos (0U)
#define EXTI_C2IMR1_Msk (0xFFFFFFFFUL << EXTI_C2IMR1_Pos)
#define EXTI_C2IMR1_IM EXTI_C2IMR1_Msk
#define EXTI_C2IMR1_IM0_Pos (0U)
#define EXTI_C2IMR1_IM0_Msk (0x1UL << EXTI_C2IMR1_IM0_Pos)
#define EXTI_C2IMR1_IM0 EXTI_C2IMR1_IM0_Msk
#define EXTI_C2IMR1_IM1_Pos (1U)
#define EXTI_C2IMR1_IM1_Msk (0x1UL << EXTI_C2IMR1_IM1_Pos)
#define EXTI_C2IMR1_IM1 EXTI_C2IMR1_IM1_Msk
#define EXTI_C2IMR1_IM2_Pos (2U)
#define EXTI_C2IMR1_IM2_Msk (0x1UL << EXTI_C2IMR1_IM2_Pos)
#define EXTI_C2IMR1_IM2 EXTI_C2IMR1_IM2_Msk
#define EXTI_C2IMR1_IM3_Pos (3U)
#define EXTI_C2IMR1_IM3_Msk (0x1UL << EXTI_C2IMR1_IM3_Pos)
#define EXTI_C2IMR1_IM3 EXTI_C2IMR1_IM3_Msk
#define EXTI_C2IMR1_IM4_Pos (4U)
#define EXTI_C2IMR1_IM4_Msk (0x1UL << EXTI_C2IMR1_IM4_Pos)
#define EXTI_C2IMR1_IM4 EXTI_C2IMR1_IM4_Msk
#define EXTI_C2IMR1_IM5_Pos (5U)
#define EXTI_C2IMR1_IM5_Msk (0x1UL << EXTI_C2IMR1_IM5_Pos)
#define EXTI_C2IMR1_IM5 EXTI_C2IMR1_IM5_Msk
#define EXTI_C2IMR1_IM6_Pos (6U)
#define EXTI_C2IMR1_IM6_Msk (0x1UL << EXTI_C2IMR1_IM6_Pos)
#define EXTI_C2IMR1_IM6 EXTI_C2IMR1_IM6_Msk
#define EXTI_C2IMR1_IM7_Pos (7U)
#define EXTI_C2IMR1_IM7_Msk (0x1UL << EXTI_C2IMR1_IM7_Pos)
#define EXTI_C2IMR1_IM7 EXTI_C2IMR1_IM7_Msk
#define EXTI_C2IMR1_IM8_Pos (8U)
#define EXTI_C2IMR1_IM8_Msk (0x1UL << EXTI_C2IMR1_IM8_Pos)
#define EXTI_C2IMR1_IM8 EXTI_C2IMR1_IM8_Msk
#define EXTI_C2IMR1_IM9_Pos (9U)
#define EXTI_C2IMR1_IM9_Msk (0x1UL << EXTI_C2IMR1_IM9_Pos)
#define EXTI_C2IMR1_IM9 EXTI_C2IMR1_IM9_Msk
#define EXTI_C2IMR1_IM10_Pos (10U)
#define EXTI_C2IMR1_IM10_Msk (0x1UL << EXTI_C2IMR1_IM10_Pos)
#define EXTI_C2IMR1_IM10 EXTI_C2IMR1_IM10_Msk
#define EXTI_C2IMR1_IM11_Pos (11U)
#define EXTI_C2IMR1_IM11_Msk (0x1UL << EXTI_C2IMR1_IM11_Pos)
#define EXTI_C2IMR1_IM11 EXTI_C2IMR1_IM11_Msk
#define EXTI_C2IMR1_IM12_Pos (12U)
#define EXTI_C2IMR1_IM12_Msk (0x1UL << EXTI_C2IMR1_IM12_Pos)
#define EXTI_C2IMR1_IM12 EXTI_C2IMR1_IM12_Msk
#define EXTI_C2IMR1_IM13_Pos (13U)
#define EXTI_C2IMR1_IM13_Msk (0x1UL << EXTI_C2IMR1_IM13_Pos)
#define EXTI_C2IMR1_IM13 EXTI_C2IMR1_IM13_Msk
#define EXTI_C2IMR1_IM14_Pos (14U)
#define EXTI_C2IMR1_IM14_Msk (0x1UL << EXTI_C2IMR1_IM14_Pos)
#define EXTI_C2IMR1_IM14 EXTI_C2IMR1_IM14_Msk
#define EXTI_C2IMR1_IM15_Pos (15U)
#define EXTI_C2IMR1_IM15_Msk (0x1UL << EXTI_C2IMR1_IM15_Pos)
#define EXTI_C2IMR1_IM15 EXTI_C2IMR1_IM15_Msk
#define EXTI_C2IMR1_IM16_Pos (16U)
#define EXTI_C2IMR1_IM16_Msk (0x1UL << EXTI_C2IMR1_IM16_Pos)
#define EXTI_C2IMR1_IM16 EXTI_C2IMR1_IM16_Msk
#define EXTI_C2IMR1_IM17_Pos (17U)
#define EXTI_C2IMR1_IM17_Msk (0x1UL << EXTI_C2IMR1_IM17_Pos)
#define EXTI_C2IMR1_IM17 EXTI_C2IMR1_IM17_Msk
#define EXTI_C2IMR1_IM18_Pos (18U)
#define EXTI_C2IMR1_IM18_Msk (0x1UL << EXTI_C2IMR1_IM18_Pos)
#define EXTI_C2IMR1_IM18 EXTI_C2IMR1_IM18_Msk
#define EXTI_C2IMR1_IM19_Pos (19U)
#define EXTI_C2IMR1_IM19_Msk (0x1UL << EXTI_C2IMR1_IM19_Pos)
#define EXTI_C2IMR1_IM19 EXTI_C2IMR1_IM19_Msk
#define EXTI_C2IMR1_IM20_Pos (20U)
#define EXTI_C2IMR1_IM20_Msk (0x1UL << EXTI_C2IMR1_IM20_Pos)
#define EXTI_C2IMR1_IM20 EXTI_C2IMR1_IM20_Msk
#define EXTI_C2IMR1_IM21_Pos (21U)
#define EXTI_C2IMR1_IM21_Msk (0x1UL << EXTI_C2IMR1_IM21_Pos)
#define EXTI_C2IMR1_IM21 EXTI_C2IMR1_IM21_Msk
#define EXTI_C2IMR1_IM22_Pos (22U)
#define EXTI_C2IMR1_IM22_Msk (0x1UL << EXTI_C2IMR1_IM22_Pos)
#define EXTI_C2IMR1_IM22 EXTI_C2IMR1_IM22_Msk
#define EXTI_C2IMR1_IM23_Pos (23U)
#define EXTI_C2IMR1_IM23_Msk (0x1UL << EXTI_C2IMR1_IM23_Pos)
#define EXTI_C2IMR1_IM23 EXTI_C2IMR1_IM23_Msk
#define EXTI_C2IMR1_IM24_Pos (24U)
#define EXTI_C2IMR1_IM24_Msk (0x1UL << EXTI_C2IMR1_IM24_Pos)
#define EXTI_C2IMR1_IM24 EXTI_C2IMR1_IM24_Msk
#define EXTI_C2IMR1_IM25_Pos (25U)
#define EXTI_C2IMR1_IM25_Msk (0x1UL << EXTI_C2IMR1_IM25_Pos)
#define EXTI_C2IMR1_IM25 EXTI_C2IMR1_IM25_Msk
#define EXTI_C2IMR1_IM28_Pos (28U)
#define EXTI_C2IMR1_IM28_Msk (0x1UL << EXTI_C2IMR1_IM28_Pos)
#define EXTI_C2IMR1_IM28 EXTI_C2IMR1_IM28_Msk
#define EXTI_C2IMR1_IM29_Pos (29U)
#define EXTI_C2IMR1_IM29_Msk (0x1UL << EXTI_C2IMR1_IM29_Pos)
#define EXTI_C2IMR1_IM29 EXTI_C2IMR1_IM29_Msk
#define EXTI_C2IMR1_IM30_Pos (30U)
#define EXTI_C2IMR1_IM30_Msk (0x1UL << EXTI_C2IMR1_IM30_Pos)
#define EXTI_C2IMR1_IM30 EXTI_C2IMR1_IM30_Msk
#define EXTI_C2IMR1_IM31_Pos (31U)
#define EXTI_C2IMR1_IM31_Msk (0x1UL << EXTI_C2IMR1_IM31_Pos)
#define EXTI_C2IMR1_IM31 EXTI_C2IMR1_IM31_Msk
#define EXTI_C2EMR1_Pos (0U)
#define EXTI_C2EMR1_Msk (0x003EFFFFUL << EXTI_C2EMR1_Pos)
#define EXTI_C2EMR1_EM EXTI_C2EMR1_Msk
#define EXTI_C2EMR1_EM0_Pos (0U)
#define EXTI_C2EMR1_EM0_Msk (0x1UL << EXTI_C2EMR1_EM0_Pos)
#define EXTI_C2EMR1_EM0 EXTI_C2EMR1_EM0_Msk
#define EXTI_C2EMR1_EM1_Pos (1U)
#define EXTI_C2EMR1_EM1_Msk (0x1UL << EXTI_C2EMR1_EM1_Pos)
#define EXTI_C2EMR1_EM1 EXTI_C2EMR1_EM1_Msk
#define EXTI_C2EMR1_EM2_Pos (2U)
#define EXTI_C2EMR1_EM2_Msk (0x1UL << EXTI_C2EMR1_EM2_Pos)
#define EXTI_C2EMR1_EM2 EXTI_C2EMR1_EM2_Msk
#define EXTI_C2EMR1_EM3_Pos (3U)
#define EXTI_C2EMR1_EM3_Msk (0x1UL << EXTI_C2EMR1_EM3_Pos)
#define EXTI_C2EMR1_EM3 EXTI_C2EMR1_EM3_Msk
#define EXTI_C2EMR1_EM4_Pos (4U)
#define EXTI_C2EMR1_EM4_Msk (0x1UL << EXTI_C2EMR1_EM4_Pos)
#define EXTI_C2EMR1_EM4 EXTI_C2EMR1_EM4_Msk
#define EXTI_C2EMR1_EM5_Pos (5U)
#define EXTI_C2EMR1_EM5_Msk (0x1UL << EXTI_C2EMR1_EM5_Pos)
#define EXTI_C2EMR1_EM5 EXTI_C2EMR1_EM5_Msk
#define EXTI_C2EMR1_EM6_Pos (6U)
#define EXTI_C2EMR1_EM6_Msk (0x1UL << EXTI_C2EMR1_EM6_Pos)
#define EXTI_C2EMR1_EM6 EXTI_C2EMR1_EM6_Msk
#define EXTI_C2EMR1_EM7_Pos (7U)
#define EXTI_C2EMR1_EM7_Msk (0x1UL << EXTI_C2EMR1_EM7_Pos)
#define EXTI_C2EMR1_EM7 EXTI_C2EMR1_EM7_Msk
#define EXTI_C2EMR1_EM8_Pos (8U)
#define EXTI_C2EMR1_EM8_Msk (0x1UL << EXTI_C2EMR1_EM8_Pos)
#define EXTI_C2EMR1_EM8 EXTI_C2EMR1_EM8_Msk
#define EXTI_C2EMR1_EM9_Pos (9U)
#define EXTI_C2EMR1_EM9_Msk (0x1UL << EXTI_C2EMR1_EM9_Pos)
#define EXTI_C2EMR1_EM9 EXTI_C2EMR1_EM9_Msk
#define EXTI_C2EMR1_EM10_Pos (10U)
#define EXTI_C2EMR1_EM10_Msk (0x1UL << EXTI_C2EMR1_EM10_Pos)
#define EXTI_C2EMR1_EM10 EXTI_C2EMR1_EM10_Msk
#define EXTI_C2EMR1_EM11_Pos (11U)
#define EXTI_C2EMR1_EM11_Msk (0x1UL << EXTI_C2EMR1_EM11_Pos)
#define EXTI_C2EMR1_EM11 EXTI_C2EMR1_EM11_Msk
#define EXTI_C2EMR1_EM12_Pos (12U)
#define EXTI_C2EMR1_EM12_Msk (0x1UL << EXTI_C2EMR1_EM12_Pos)
#define EXTI_C2EMR1_EM12 EXTI_C2EMR1_EM12_Msk
#define EXTI_C2EMR1_EM13_Pos (13U)
#define EXTI_C2EMR1_EM13_Msk (0x1UL << EXTI_C2EMR1_EM13_Pos)
#define EXTI_C2EMR1_EM13 EXTI_C2EMR1_EM13_Msk
#define EXTI_C2EMR1_EM14_Pos (14U)
#define EXTI_C2EMR1_EM14_Msk (0x1UL << EXTI_C2EMR1_EM14_Pos)
#define EXTI_C2EMR1_EM14 EXTI_C2EMR1_EM14_Msk
#define EXTI_C2EMR1_EM15_Pos (15U)
#define EXTI_C2EMR1_EM15_Msk (0x1UL << EXTI_C2EMR1_EM15_Pos)
#define EXTI_C2EMR1_EM15 EXTI_C2EMR1_EM15_Msk
#define EXTI_C2EMR1_EM17_Pos (17U)
#define EXTI_C2EMR1_EM17_Msk (0x1UL << EXTI_C2EMR1_EM17_Pos)
#define EXTI_C2EMR1_EM17 EXTI_C2EMR1_EM17_Msk
#define EXTI_C2EMR1_EM18_Pos (18U)
#define EXTI_C2EMR1_EM18_Msk (0x1UL << EXTI_C2EMR1_EM18_Pos)
#define EXTI_C2EMR1_EM18 EXTI_C2EMR1_EM18_Msk
#define EXTI_C2EMR1_EM19_Pos (19U)
#define EXTI_C2EMR1_EM19_Msk (0x1UL << EXTI_C2EMR1_EM19_Pos)
#define EXTI_C2EMR1_EM19 EXTI_C2EMR1_EM19_Msk
#define EXTI_C2EMR1_EM20_Pos (20U)
#define EXTI_C2EMR1_EM20_Msk (0x1UL << EXTI_C2EMR1_EM20_Pos)
#define EXTI_C2EMR1_EM20 EXTI_C2EMR1_EM20_Msk
#define EXTI_C2EMR1_EM21_Pos (21U)
#define EXTI_C2EMR1_EM21_Msk (0x1UL << EXTI_C2EMR1_EM21_Pos)
#define EXTI_C2EMR1_EM21 EXTI_C2EMR1_EM21_Msk
#define EXTI_C2IMR2_Pos (0U)
#define EXTI_C2IMR2_Msk (0x0001FFFFUL << EXTI_C2IMR2_Pos)
#define EXTI_C2IMR2_IM EXTI_C2IMR2_Msk
#define EXTI_C2IMR2_IM33_Pos (1U)
#define EXTI_C2IMR2_IM33_Msk (0x1UL << EXTI_C2IMR2_IM33_Pos)
#define EXTI_C2IMR2_IM33 EXTI_C2IMR2_IM33_Msk
#define EXTI_C2IMR2_IM36_Pos (4U)
#define EXTI_C2IMR2_IM36_Msk (0x1UL << EXTI_C2IMR2_IM36_Pos)
#define EXTI_C2IMR2_IM36 EXTI_C2IMR2_IM36_Msk
#define EXTI_C2IMR2_IM37_Pos (5U)
#define EXTI_C2IMR2_IM37_Msk (0x1UL << EXTI_C2IMR2_IM37_Pos)
#define EXTI_C2IMR2_IM37 EXTI_C2IMR2_IM37_Msk
#define EXTI_C2IMR2_IM38_Pos (6U)
#define EXTI_C2IMR2_IM38_Msk (0x1UL << EXTI_C2IMR2_IM38_Pos)
#define EXTI_C2IMR2_IM38 EXTI_C2IMR2_IM38_Msk
#define EXTI_C2IMR2_IM39_Pos (7U)
#define EXTI_C2IMR2_IM39_Msk (0x1UL << EXTI_C2IMR2_IM39_Pos)
#define EXTI_C2IMR2_IM39 EXTI_C2IMR2_IM39_Msk
#define EXTI_C2IMR2_IM40_Pos (8U)
#define EXTI_C2IMR2_IM40_Msk (0x1UL << EXTI_C2IMR2_IM40_Pos)
#define EXTI_C2IMR2_IM40 EXTI_C2IMR2_IM40_Msk
#define EXTI_C2IMR2_IM41_Pos (9U)
#define EXTI_C2IMR2_IM41_Msk (0x1UL << EXTI_C2IMR2_IM41_Pos)
#define EXTI_C2IMR2_IM41 EXTI_C2IMR2_IM41_Msk
#define EXTI_C2IMR2_IM42_Pos (10U)
#define EXTI_C2IMR2_IM42_Msk (0x1UL << EXTI_C2IMR2_IM42_Pos)
#define EXTI_C2IMR2_IM42 EXTI_C2IMR2_IM42_Msk
#define EXTI_C2IMR2_IM43_Pos (11U)
#define EXTI_C2IMR2_IM43_Msk (0x1UL << EXTI_C2IMR2_IM43_Pos)
#define EXTI_C2IMR2_IM43 EXTI_C2IMR2_IM43_Msk
#define EXTI_C2IMR2_IM44_Pos (12U)
#define EXTI_C2IMR2_IM44_Msk (0x1UL << EXTI_C2IMR2_IM44_Pos)
#define EXTI_C2IMR2_IM44 EXTI_C2IMR2_IM44_Msk
#define EXTI_C2IMR2_IM45_Pos (13U)
#define EXTI_C2IMR2_IM45_Msk (0x1UL << EXTI_C2IMR2_IM45_Pos)
#define EXTI_C2IMR2_IM45 EXTI_C2IMR2_IM45_Msk
#define EXTI_C2IMR2_IM46_Pos (14U)
#define EXTI_C2IMR2_IM46_Msk (0x1UL << EXTI_C2IMR2_IM46_Pos)
#define EXTI_C2IMR2_IM46 EXTI_C2IMR2_IM46_Msk
#define EXTI_C2IMR2_IM48_Pos (16U)
#define EXTI_C2IMR2_IM48_Msk (0x1UL << EXTI_C2IMR2_IM48_Pos)
#define EXTI_C2IMR2_IM48 EXTI_C2IMR2_IM48_Msk
#define EXTI_C2EMR2_Pos (8U)
#define EXTI_C2EMR2_Msk (0x00000300UL << EXTI_C2EMR2_Pos)
#define EXTI_C2EMR2_EM EXTI_C2EMR2_Msk
#define EXTI_C2EMR2_EM40_Pos (8U)
#define EXTI_C2EMR2_EM40_Msk (0x1UL << EXTI_C2EMR2_EM40_Pos)
#define EXTI_C2EMR2_EM40 EXTI_C2EMR2_EM40_Msk
#define EXTI_C2EMR2_EM41_Pos (9U)
#define EXTI_C2EMR2_EM41_Msk (0x1UL << EXTI_C2EMR2_EM41_Pos)
#define EXTI_C2EMR2_EM41 EXTI_C2EMR2_EM41_Msk
#define PKA_CR_EN_Pos (0U)
#define PKA_CR_EN_Msk (0x1UL << PKA_CR_EN_Pos)
#define PKA_CR_EN PKA_CR_EN_Msk
#define PKA_CR_START_Pos (1U)
#define PKA_CR_START_Msk (0x1UL << PKA_CR_START_Pos)
#define PKA_CR_START PKA_CR_START_Msk
#define PKA_CR_MODE_Pos (8U)
#define PKA_CR_MODE_Msk (0x3FUL << PKA_CR_MODE_Pos)
#define PKA_CR_MODE PKA_CR_MODE_Msk
#define PKA_CR_MODE_0 (0x01U << PKA_CR_MODE_Pos)
#define PKA_CR_MODE_1 (0x02U << PKA_CR_MODE_Pos)
#define PKA_CR_MODE_2 (0x04U << PKA_CR_MODE_Pos)
#define PKA_CR_MODE_3 (0x08U << PKA_CR_MODE_Pos)
#define PKA_CR_MODE_4 (0x10U << PKA_CR_MODE_Pos)
#define PKA_CR_MODE_5 (0x20U << PKA_CR_MODE_Pos)
#define PKA_CR_PROCENDIE_Pos (17U)
#define PKA_CR_PROCENDIE_Msk (0x1UL << PKA_CR_PROCENDIE_Pos)
#define PKA_CR_PROCENDIE PKA_CR_PROCENDIE_Msk
#define PKA_CR_RAMERRIE_Pos (19U)
#define PKA_CR_RAMERRIE_Msk (0x1UL << PKA_CR_RAMERRIE_Pos)
#define PKA_CR_RAMERRIE PKA_CR_RAMERRIE_Msk
#define PKA_CR_ADDRERRIE_Pos (20U)
#define PKA_CR_ADDRERRIE_Msk (0x1UL << PKA_CR_ADDRERRIE_Pos)
#define PKA_CR_ADDRERRIE PKA_CR_ADDRERRIE_Msk
#define PKA_SR_BUSY_Pos (16U)
#define PKA_SR_BUSY_Msk (0x1UL << PKA_SR_BUSY_Pos)
#define PKA_SR_BUSY PKA_SR_BUSY_Msk
#define PKA_SR_PROCENDF_Pos (17U)
#define PKA_SR_PROCENDF_Msk (0x1UL << PKA_SR_PROCENDF_Pos)
#define PKA_SR_PROCENDF PKA_SR_PROCENDF_Msk
#define PKA_SR_RAMERRF_Pos (19U)
#define PKA_SR_RAMERRF_Msk (0x1UL << PKA_SR_RAMERRF_Pos)
#define PKA_SR_RAMERRF PKA_SR_RAMERRF_Msk
#define PKA_SR_ADDRERRF_Pos (20U)
#define PKA_SR_ADDRERRF_Msk (0x1UL << PKA_SR_ADDRERRF_Pos)
#define PKA_SR_ADDRERRF PKA_SR_ADDRERRF_Msk
#define PKA_CLRFR_PROCENDFC_Pos (17U)
#define PKA_CLRFR_PROCENDFC_Msk (0x1UL << PKA_CLRFR_PROCENDFC_Pos)
#define PKA_CLRFR_PROCENDFC PKA_CLRFR_PROCENDFC_Msk
#define PKA_CLRFR_RAMERRFC_Pos (19U)
#define PKA_CLRFR_RAMERRFC_Msk (0x1UL << PKA_CLRFR_RAMERRFC_Pos)
#define PKA_CLRFR_RAMERRFC PKA_CLRFR_RAMERRFC_Msk
#define PKA_CLRFR_ADDRERRFC_Pos (20U)
#define PKA_CLRFR_ADDRERRFC_Msk (0x1UL << PKA_CLRFR_ADDRERRFC_Pos)
#define PKA_CLRFR_ADDRERRFC PKA_CLRFR_ADDRERRFC_Msk
#define PKA_RAM_OFFSET 0x400U
#define PKA_MONTGOMERY_PARAM_IN_MOD_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_MONTGOMERY_PARAM_IN_MODULUS ((0xD5CU - PKA_RAM_OFFSET)>>2)
#define PKA_MONTGOMERY_PARAM_OUT_PARAMETER ((0x594U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_EXP_IN_EXP_NB_BITS ((0x400U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_EXP_IN_OP_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_EXP_IN_MONTGOMERY_PARAM ((0x594U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_EXP_IN_EXPONENT_BASE ((0xA44U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_EXP_IN_EXPONENT ((0xBD0U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_EXP_IN_MODULUS ((0xD5CU - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_EXP_OUT_MONTGOMERY_PARAM ((0x594U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_EXP_OUT_SM_ALGO_ACC1 ((0x724U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_EXP_OUT_SM_ALGO_ACC2 ((0x8B4U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_EXP_OUT_EXPONENT_BASE ((0xA44U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_EXP_OUT_SM_ALGO_ACC3 ((0xE3CU - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_IN_EXP_NB_BITS ((0x400U - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_IN_OP_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_IN_A_COEFF_SIGN ((0x408U - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_IN_A_COEFF ((0x40CU - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_IN_MOD_GF ((0x460U - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_IN_MONTGOMERY_PARAM ((0x4B4U - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_IN_K ((0x508U - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_IN_INITIAL_POINT_X ((0x55CU - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_IN_INITIAL_POINT_Y ((0x5B0U - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_OUT_RESULT_X ((0x55CU - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_OUT_RESULT_Y ((0x5B0U - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_OUT_LAST_DOUBLE_X1 ((0xDE8U - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_OUT_LAST_DOUBLE_Y1 ((0xE3CU - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_OUT_LAST_DOUBLE_Z1 ((0xE90U - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_OUT_CHECK_POINT_X2 ((0xEE4U - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_OUT_CHECK_POINT_Y2 ((0xF38U - PKA_RAM_OFFSET)>>2)
#define PKA_ECC_SCALAR_MUL_OUT_CHECK_POINT_Z2 ((0xF8CU - PKA_RAM_OFFSET)>>2)
#define PKA_POINT_CHECK_IN_MOD_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_POINT_CHECK_IN_A_COEFF_SIGN ((0x408U - PKA_RAM_OFFSET)>>2)
#define PKA_POINT_CHECK_IN_A_COEFF ((0x40CU - PKA_RAM_OFFSET)>>2)
#define PKA_POINT_CHECK_IN_B_COEFF ((0x7FCU - PKA_RAM_OFFSET)>>2)
#define PKA_POINT_CHECK_IN_MOD_GF ((0x460U - PKA_RAM_OFFSET)>>2)
#define PKA_POINT_CHECK_IN_INITIAL_POINT_X ((0x55CU - PKA_RAM_OFFSET)>>2)
#define PKA_POINT_CHECK_IN_INITIAL_POINT_Y ((0x5B0U - PKA_RAM_OFFSET)>>2)
#define PKA_POINT_CHECK_OUT_ERROR ((0x400U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_IN_ORDER_NB_BITS ((0x400U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_IN_MOD_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_IN_A_COEFF_SIGN ((0x408U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_IN_A_COEFF ((0x40CU - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_IN_MOD_GF ((0x460U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_IN_K ((0x508U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_IN_INITIAL_POINT_X ((0x55CU - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_IN_INITIAL_POINT_Y ((0x5B0U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_IN_HASH_E ((0xDE8U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_IN_PRIVATE_KEY_D ((0xE3CU - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_IN_ORDER_N ((0xE94U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_OUT_ERROR ((0xEE8U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_OUT_SIGNATURE_R ((0x700U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_OUT_SIGNATURE_S ((0x754U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_OUT_FINAL_POINT_X ((0x103CU - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_SIGN_OUT_FINAL_POINT_Y ((0x1090U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_IN_ORDER_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_IN_MOD_NB_BITS ((0x4B4U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_IN_A_COEFF_SIGN ((0x45CU - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_IN_A_COEFF ((0x460U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_IN_MOD_GF ((0x4B8U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_IN_INITIAL_POINT_X ((0x5E8U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_IN_INITIAL_POINT_Y ((0x63CU - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_X ((0xF40U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_IN_PUBLIC_KEY_POINT_Y ((0xF94U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_IN_SIGNATURE_R ((0x1098U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_IN_SIGNATURE_S ((0xA44U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_IN_HASH_E ((0xFE8U - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_IN_ORDER_N ((0xD5CU - PKA_RAM_OFFSET)>>2)
#define PKA_ECDSA_VERIF_OUT_RESULT ((0x5B0U - PKA_RAM_OFFSET)>>2)
#define PKA_RSA_CRT_EXP_IN_MOD_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_RSA_CRT_EXP_IN_DP_CRT ((0x65CU - PKA_RAM_OFFSET)>>2)
#define PKA_RSA_CRT_EXP_IN_DQ_CRT ((0xBD0U - PKA_RAM_OFFSET)>>2)
#define PKA_RSA_CRT_EXP_IN_QINV_CRT ((0x7ECU - PKA_RAM_OFFSET)>>2)
#define PKA_RSA_CRT_EXP_IN_PRIME_P ((0x97CU - PKA_RAM_OFFSET)>>2)
#define PKA_RSA_CRT_EXP_IN_PRIME_Q ((0xD5CU - PKA_RAM_OFFSET)>>2)
#define PKA_RSA_CRT_EXP_IN_EXPONENT_BASE ((0xEECU - PKA_RAM_OFFSET)>>2)
#define PKA_RSA_CRT_EXP_OUT_RESULT ((0x724U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_REDUC_IN_OP_LENGTH ((0x400U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_REDUC_IN_OPERAND ((0x8B4U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_REDUC_IN_MOD_LENGTH ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_REDUC_IN_MODULUS ((0xA44U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_REDUC_OUT_RESULT ((0xBD0U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_ADD_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_ADD_IN_OP1 ((0x8B4U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_ADD_IN_OP2 ((0xA44U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_ADD_OUT_RESULT ((0xBD0U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_SUB_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_SUB_IN_OP1 ((0x8B4U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_SUB_IN_OP2 ((0xA44U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_SUB_OUT_RESULT ((0xBD0U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_MUL_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_MUL_IN_OP1 ((0x8B4U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_MUL_IN_OP2 ((0xA44U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_MUL_OUT_RESULT ((0xBD0U - PKA_RAM_OFFSET)>>2)
#define PKA_COMPARISON_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_COMPARISON_IN_OP1 ((0x8B4U - PKA_RAM_OFFSET)>>2)
#define PKA_COMPARISON_IN_OP2 ((0xA44U - PKA_RAM_OFFSET)>>2)
#define PKA_COMPARISON_OUT_RESULT ((0xBD0U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_ADD_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_ADD_IN_OP1 ((0x8B4U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_ADD_IN_OP2 ((0xA44U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_ADD_IN_OP3_MOD ((0xD5CU - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_ADD_OUT_RESULT ((0xBD0U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_INV_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_INV_IN_OP1 ((0x8B4U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_INV_IN_OP2_MOD ((0xA44U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_INV_OUT_RESULT ((0xBD0U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_SUB_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_SUB_IN_OP1 ((0x8B4U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_SUB_IN_OP2 ((0xA44U - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_SUB_IN_OP3_MOD ((0xD5CU - PKA_RAM_OFFSET)>>2)
#define PKA_MODULAR_SUB_OUT_RESULT ((0xBD0U - PKA_RAM_OFFSET)>>2)
#define PKA_MONTGOMERY_MUL_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_MONTGOMERY_MUL_IN_OP1 ((0x8B4U - PKA_RAM_OFFSET)>>2)
#define PKA_MONTGOMERY_MUL_IN_OP2 ((0xA44U - PKA_RAM_OFFSET)>>2)
#define PKA_MONTGOMERY_MUL_IN_OP3_MOD ((0xD5CU - PKA_RAM_OFFSET)>>2)
#define PKA_MONTGOMERY_MUL_OUT_RESULT ((0xBD0U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_ALL_OPS_NB_BITS ((0x404U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_ALL_OPS_IN_OP1 ((0x8B4U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_ALL_OPS_IN_OP2 ((0xA44U - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_ALL_OPS_IN_OP3 ((0xD5CU - PKA_RAM_OFFSET)>>2)
#define PKA_ARITHMETIC_ALL_OPS_OUT_RESULT ((0xBD0U - PKA_RAM_OFFSET)>>2)
#define FLASH_ACR_LATENCY_Pos (0U)
#define FLASH_ACR_LATENCY_Msk (0x7UL << FLASH_ACR_LATENCY_Pos)
#define FLASH_ACR_LATENCY FLASH_ACR_LATENCY_Msk
#define FLASH_ACR_LATENCY_0 (0x1UL << FLASH_ACR_LATENCY_Pos)
#define FLASH_ACR_LATENCY_1 (0x2UL << FLASH_ACR_LATENCY_Pos)
#define FLASH_ACR_LATENCY_2 (0x4UL << FLASH_ACR_LATENCY_Pos)
#define FLASH_ACR_PRFTEN_Pos (8U)
#define FLASH_ACR_PRFTEN_Msk (0x1UL << FLASH_ACR_PRFTEN_Pos)
#define FLASH_ACR_PRFTEN FLASH_ACR_PRFTEN_Msk
#define FLASH_ACR_ICEN_Pos (9U)
#define FLASH_ACR_ICEN_Msk (0x1UL << FLASH_ACR_ICEN_Pos)
#define FLASH_ACR_ICEN FLASH_ACR_ICEN_Msk
#define FLASH_ACR_DCEN_Pos (10U)
#define FLASH_ACR_DCEN_Msk (0x1UL << FLASH_ACR_DCEN_Pos)
#define FLASH_ACR_DCEN FLASH_ACR_DCEN_Msk
#define FLASH_ACR_ICRST_Pos (11U)
#define FLASH_ACR_ICRST_Msk (0x1UL << FLASH_ACR_ICRST_Pos)
#define FLASH_ACR_ICRST FLASH_ACR_ICRST_Msk
#define FLASH_ACR_DCRST_Pos (12U)
#define FLASH_ACR_DCRST_Msk (0x1UL << FLASH_ACR_DCRST_Pos)
#define FLASH_ACR_DCRST FLASH_ACR_DCRST_Msk
#define FLASH_ACR_PES_Pos (15U)
#define FLASH_ACR_PES_Msk (0x1UL << FLASH_ACR_PES_Pos)
#define FLASH_ACR_PES FLASH_ACR_PES_Msk
#define FLASH_ACR_EMPTY_Pos (16U)
#define FLASH_ACR_EMPTY_Msk (0x1UL << FLASH_ACR_EMPTY_Pos)
#define FLASH_ACR_EMPTY FLASH_ACR_EMPTY_Msk
#define FLASH_ACR_LATENCY_0WS (0x0UL << FLASH_ACR_LATENCY_Pos)
#define FLASH_ACR_LATENCY_1WS (FLASH_ACR_LATENCY_0 << FLASH_ACR_LATENCY_Pos)
#define FLASH_ACR_LATENCY_2WS (FLASH_ACR_LATENCY_1 << FLASH_ACR_LATENCY_Pos)
#define FLASH_ACR_LATENCY_3WS ((FLASH_ACR_LATENCY_1 | FLASH_ACR_LATENCY_0) << FLASH_ACR_LATENCY_Pos)
#define FLASH_SR_EOP_Pos (0U)
#define FLASH_SR_EOP_Msk (0x1UL << FLASH_SR_EOP_Pos)
#define FLASH_SR_EOP FLASH_SR_EOP_Msk
#define FLASH_SR_OPERR_Pos (1U)
#define FLASH_SR_OPERR_Msk (0x1UL << FLASH_SR_OPERR_Pos)
#define FLASH_SR_OPERR FLASH_SR_OPERR_Msk
#define FLASH_SR_PROGERR_Pos (3U)
#define FLASH_SR_PROGERR_Msk (0x1UL << FLASH_SR_PROGERR_Pos)
#define FLASH_SR_PROGERR FLASH_SR_PROGERR_Msk
#define FLASH_SR_WRPERR_Pos (4U)
#define FLASH_SR_WRPERR_Msk (0x1UL << FLASH_SR_WRPERR_Pos)
#define FLASH_SR_WRPERR FLASH_SR_WRPERR_Msk
#define FLASH_SR_PGAERR_Pos (5U)
#define FLASH_SR_PGAERR_Msk (0x1UL << FLASH_SR_PGAERR_Pos)
#define FLASH_SR_PGAERR FLASH_SR_PGAERR_Msk
#define FLASH_SR_SIZERR_Pos (6U)
#define FLASH_SR_SIZERR_Msk (0x1UL << FLASH_SR_SIZERR_Pos)
#define FLASH_SR_SIZERR FLASH_SR_SIZERR_Msk
#define FLASH_SR_PGSERR_Pos (7U)
#define FLASH_SR_PGSERR_Msk (0x1UL << FLASH_SR_PGSERR_Pos)
#define FLASH_SR_PGSERR FLASH_SR_PGSERR_Msk
#define FLASH_SR_MISERR_Pos (8U)
#define FLASH_SR_MISERR_Msk (0x1UL << FLASH_SR_MISERR_Pos)
#define FLASH_SR_MISERR FLASH_SR_MISERR_Msk
#define FLASH_SR_FASTERR_Pos (9U)
#define FLASH_SR_FASTERR_Msk (0x1UL << FLASH_SR_FASTERR_Pos)
#define FLASH_SR_FASTERR FLASH_SR_FASTERR_Msk
#define FLASH_SR_OPTNV_Pos (13U)
#define FLASH_SR_OPTNV_Msk (0x1UL << FLASH_SR_OPTNV_Pos)
#define FLASH_SR_OPTNV FLASH_SR_OPTNV_Msk
#define FLASH_SR_RDERR_Pos (14U)
#define FLASH_SR_RDERR_Msk (0x1UL << FLASH_SR_RDERR_Pos)
#define FLASH_SR_RDERR FLASH_SR_RDERR_Msk
#define FLASH_SR_OPTVERR_Pos (15U)
#define FLASH_SR_OPTVERR_Msk (0x1UL << FLASH_SR_OPTVERR_Pos)
#define FLASH_SR_OPTVERR FLASH_SR_OPTVERR_Msk
#define FLASH_SR_BSY_Pos (16U)
#define FLASH_SR_BSY_Msk (0x1UL << FLASH_SR_BSY_Pos)
#define FLASH_SR_BSY FLASH_SR_BSY_Msk
#define FLASH_SR_CFGBSY_Pos (18U)
#define FLASH_SR_CFGBSY_Msk (0x1UL << FLASH_SR_CFGBSY_Pos)
#define FLASH_SR_CFGBSY FLASH_SR_CFGBSY_Msk
#define FLASH_SR_PESD_Pos (19U)
#define FLASH_SR_PESD_Msk (0x1UL << FLASH_SR_PESD_Pos)
#define FLASH_SR_PESD FLASH_SR_PESD_Msk
#define FLASH_CR_PG_Pos (0U)
#define FLASH_CR_PG_Msk (0x1UL << FLASH_CR_PG_Pos)
#define FLASH_CR_PG FLASH_CR_PG_Msk
#define FLASH_CR_PER_Pos (1U)
#define FLASH_CR_PER_Msk (0x1UL << FLASH_CR_PER_Pos)
#define FLASH_CR_PER FLASH_CR_PER_Msk
#define FLASH_CR_MER_Pos (2U)
#define FLASH_CR_MER_Msk (0x1UL << FLASH_CR_MER_Pos)
#define FLASH_CR_MER FLASH_CR_MER_Msk
#define FLASH_CR_PNB_Pos (3U)
#define FLASH_CR_PNB_Msk (0xFFUL << FLASH_CR_PNB_Pos)
#define FLASH_CR_PNB FLASH_CR_PNB_Msk
#define FLASH_CR_STRT_Pos (16U)
#define FLASH_CR_STRT_Msk (0x1UL << FLASH_CR_STRT_Pos)
#define FLASH_CR_STRT FLASH_CR_STRT_Msk
#define FLASH_CR_OPTSTRT_Pos (17U)
#define FLASH_CR_OPTSTRT_Msk (0x1UL << FLASH_CR_OPTSTRT_Pos)
#define FLASH_CR_OPTSTRT FLASH_CR_OPTSTRT_Msk
#define FLASH_CR_FSTPG_Pos (18U)
#define FLASH_CR_FSTPG_Msk (0x1UL << FLASH_CR_FSTPG_Pos)
#define FLASH_CR_FSTPG FLASH_CR_FSTPG_Msk
#define FLASH_CR_EOPIE_Pos (24U)
#define FLASH_CR_EOPIE_Msk (0x1UL << FLASH_CR_EOPIE_Pos)
#define FLASH_CR_EOPIE FLASH_CR_EOPIE_Msk
#define FLASH_CR_ERRIE_Pos (25U)
#define FLASH_CR_ERRIE_Msk (0x1UL << FLASH_CR_ERRIE_Pos)
#define FLASH_CR_ERRIE FLASH_CR_ERRIE_Msk
#define FLASH_CR_RDERRIE_Pos (26U)
#define FLASH_CR_RDERRIE_Msk (0x1UL << FLASH_CR_RDERRIE_Pos)
#define FLASH_CR_RDERRIE FLASH_CR_RDERRIE_Msk
#define FLASH_CR_OBL_LAUNCH_Pos (27U)
#define FLASH_CR_OBL_LAUNCH_Msk (0x1UL << FLASH_CR_OBL_LAUNCH_Pos)
#define FLASH_CR_OBL_LAUNCH FLASH_CR_OBL_LAUNCH_Msk
#define FLASH_CR_OPTLOCK_Pos (30U)
#define FLASH_CR_OPTLOCK_Msk (0x1UL << FLASH_CR_OPTLOCK_Pos)
#define FLASH_CR_OPTLOCK FLASH_CR_OPTLOCK_Msk
#define FLASH_CR_LOCK_Pos (31U)
#define FLASH_CR_LOCK_Msk (0x1UL << FLASH_CR_LOCK_Pos)
#define FLASH_CR_LOCK FLASH_CR_LOCK_Msk
#define FLASH_ECCR_ADDR_ECC_Pos (0U)
#define FLASH_ECCR_ADDR_ECC_Msk (0x1FFFFUL << FLASH_ECCR_ADDR_ECC_Pos)
#define FLASH_ECCR_ADDR_ECC FLASH_ECCR_ADDR_ECC_Msk
#define FLASH_ECCR_SYSF_ECC_Pos (20U)
#define FLASH_ECCR_SYSF_ECC_Msk (0x1UL << FLASH_ECCR_SYSF_ECC_Pos)
#define FLASH_ECCR_SYSF_ECC FLASH_ECCR_SYSF_ECC_Msk
#define FLASH_ECCR_ECCCIE_Pos (24U)
#define FLASH_ECCR_ECCCIE_Msk (0x1UL << FLASH_ECCR_ECCCIE_Pos)
#define FLASH_ECCR_ECCCIE FLASH_ECCR_ECCCIE_Msk
#define FLASH_ECCR_CPUID_Pos (26U)
#define FLASH_ECCR_CPUID_Msk (0x7UL << FLASH_ECCR_CPUID_Pos)
#define FLASH_ECCR_CPUID FLASH_ECCR_CPUID_Msk
#define FLASH_ECCR_CPUID_0 (0x1U << FLASH_ECCR_CPUID_Pos)
#define FLASH_ECCR_CPUID_1 (0x2U << FLASH_ECCR_CPUID_Pos)
#define FLASH_ECCR_CPUID_2 (0x4U << FLASH_ECCR_CPUID_Pos)
#define FLASH_ECCR_ECCC_Pos (30U)
#define FLASH_ECCR_ECCC_Msk (0x1UL << FLASH_ECCR_ECCC_Pos)
#define FLASH_ECCR_ECCC FLASH_ECCR_ECCC_Msk
#define FLASH_ECCR_ECCD_Pos (31U)
#define FLASH_ECCR_ECCD_Msk (0x1UL << FLASH_ECCR_ECCD_Pos)
#define FLASH_ECCR_ECCD FLASH_ECCR_ECCD_Msk
#define FLASH_OPTR_RDP_Pos (0U)
#define FLASH_OPTR_RDP_Msk (0xFFUL << FLASH_OPTR_RDP_Pos)
#define FLASH_OPTR_RDP FLASH_OPTR_RDP_Msk
#define FLASH_OPTR_ESE_Pos (8U)
#define FLASH_OPTR_ESE_Msk (0x1UL << FLASH_OPTR_ESE_Pos)
#define FLASH_OPTR_ESE FLASH_OPTR_ESE_Msk
#define FLASH_OPTR_BOR_LEV_Pos (9U)
#define FLASH_OPTR_BOR_LEV_Msk (0x7UL << FLASH_OPTR_BOR_LEV_Pos)
#define FLASH_OPTR_BOR_LEV FLASH_OPTR_BOR_LEV_Msk
#define FLASH_OPTR_BOR_LEV_0 (0x1U << FLASH_OPTR_BOR_LEV_Pos)
#define FLASH_OPTR_BOR_LEV_1 (0x2U << FLASH_OPTR_BOR_LEV_Pos)
#define FLASH_OPTR_BOR_LEV_2 (0x4U << FLASH_OPTR_BOR_LEV_Pos)
#define FLASH_OPTR_nRST_STOP_Pos (12U)
#define FLASH_OPTR_nRST_STOP_Msk (0x1UL << FLASH_OPTR_nRST_STOP_Pos)
#define FLASH_OPTR_nRST_STOP FLASH_OPTR_nRST_STOP_Msk
#define FLASH_OPTR_nRST_STDBY_Pos (13U)
#define FLASH_OPTR_nRST_STDBY_Msk (0x1UL << FLASH_OPTR_nRST_STDBY_Pos)
#define FLASH_OPTR_nRST_STDBY FLASH_OPTR_nRST_STDBY_Msk
#define FLASH_OPTR_nRST_SHDW_Pos (14U)
#define FLASH_OPTR_nRST_SHDW_Msk (0x1UL << FLASH_OPTR_nRST_SHDW_Pos)
#define FLASH_OPTR_nRST_SHDW FLASH_OPTR_nRST_SHDW_Msk
#define FLASH_OPTR_IWDG_SW_Pos (16U)
#define FLASH_OPTR_IWDG_SW_Msk (0x1UL << FLASH_OPTR_IWDG_SW_Pos)
#define FLASH_OPTR_IWDG_SW FLASH_OPTR_IWDG_SW_Msk
#define FLASH_OPTR_IWDG_STOP_Pos (17U)
#define FLASH_OPTR_IWDG_STOP_Msk (0x1UL << FLASH_OPTR_IWDG_STOP_Pos)
#define FLASH_OPTR_IWDG_STOP FLASH_OPTR_IWDG_STOP_Msk
#define FLASH_OPTR_IWDG_STDBY_Pos (18U)
#define FLASH_OPTR_IWDG_STDBY_Msk (0x1UL << FLASH_OPTR_IWDG_STDBY_Pos)
#define FLASH_OPTR_IWDG_STDBY FLASH_OPTR_IWDG_STDBY_Msk
#define FLASH_OPTR_WWDG_SW_Pos (19U)
#define FLASH_OPTR_WWDG_SW_Msk (0x1UL << FLASH_OPTR_WWDG_SW_Pos)
#define FLASH_OPTR_WWDG_SW FLASH_OPTR_WWDG_SW_Msk
#define FLASH_OPTR_nBOOT1_Pos (23U)
#define FLASH_OPTR_nBOOT1_Msk (0x1UL << FLASH_OPTR_nBOOT1_Pos)
#define FLASH_OPTR_nBOOT1 FLASH_OPTR_nBOOT1_Msk
#define FLASH_OPTR_SRAM2PE_Pos (24U)
#define FLASH_OPTR_SRAM2PE_Msk (0x1UL << FLASH_OPTR_SRAM2PE_Pos)
#define FLASH_OPTR_SRAM2PE FLASH_OPTR_SRAM2PE_Msk
#define FLASH_OPTR_SRAM2RST_Pos (25U)
#define FLASH_OPTR_SRAM2RST_Msk (0x1UL << FLASH_OPTR_SRAM2RST_Pos)
#define FLASH_OPTR_SRAM2RST FLASH_OPTR_SRAM2RST_Msk
#define FLASH_OPTR_nSWBOOT0_Pos (26U)
#define FLASH_OPTR_nSWBOOT0_Msk (0x1UL << FLASH_OPTR_nSWBOOT0_Pos)
#define FLASH_OPTR_nSWBOOT0 FLASH_OPTR_nSWBOOT0_Msk
#define FLASH_OPTR_nBOOT0_Pos (27U)
#define FLASH_OPTR_nBOOT0_Msk (0x1UL << FLASH_OPTR_nBOOT0_Pos)
#define FLASH_OPTR_nBOOT0 FLASH_OPTR_nBOOT0_Msk
#define FLASH_OPTR_AGC_TRIM_Pos (29U)
#define FLASH_OPTR_AGC_TRIM_Msk (0x7UL << FLASH_OPTR_AGC_TRIM_Pos)
#define FLASH_OPTR_AGC_TRIM FLASH_OPTR_AGC_TRIM_Msk
#define FLASH_OPTR_AGC_TRIM_0 (0x1U << FLASH_OPTR_AGC_TRIM_Pos)
#define FLASH_OPTR_AGC_TRIM_1 (0x2U << FLASH_OPTR_AGC_TRIM_Pos)
#define FLASH_OPTR_AGC_TRIM_2 (0x4U << FLASH_OPTR_AGC_TRIM_Pos)
#define FLASH_PCROP1ASR_PCROP1A_STRT_Pos (0U)
#define FLASH_PCROP1ASR_PCROP1A_STRT_Msk (0x1FFUL << FLASH_PCROP1ASR_PCROP1A_STRT_Pos)
#define FLASH_PCROP1ASR_PCROP1A_STRT FLASH_PCROP1ASR_PCROP1A_STRT_Msk
#define FLASH_PCROP1AER_PCROP1A_END_Pos (0U)
#define FLASH_PCROP1AER_PCROP1A_END_Msk (0x1FFUL << FLASH_PCROP1AER_PCROP1A_END_Pos)
#define FLASH_PCROP1AER_PCROP1A_END FLASH_PCROP1AER_PCROP1A_END_Msk
#define FLASH_PCROP1AER_PCROP_RDP_Pos (31U)
#define FLASH_PCROP1AER_PCROP_RDP_Msk (0x1UL << FLASH_PCROP1AER_PCROP_RDP_Pos)
#define FLASH_PCROP1AER_PCROP_RDP FLASH_PCROP1AER_PCROP_RDP_Msk
#define FLASH_WRP1AR_WRP1A_STRT_Pos (0U)
#define FLASH_WRP1AR_WRP1A_STRT_Msk (0xFFUL << FLASH_WRP1AR_WRP1A_STRT_Pos)
#define FLASH_WRP1AR_WRP1A_STRT FLASH_WRP1AR_WRP1A_STRT_Msk
#define FLASH_WRP1AR_WRP1A_END_Pos (16U)
#define FLASH_WRP1AR_WRP1A_END_Msk (0xFFUL << FLASH_WRP1AR_WRP1A_END_Pos)
#define FLASH_WRP1AR_WRP1A_END FLASH_WRP1AR_WRP1A_END_Msk
#define FLASH_WRP1BR_WRP1B_STRT_Pos (0U)
#define FLASH_WRP1BR_WRP1B_STRT_Msk (0xFFUL << FLASH_WRP1BR_WRP1B_STRT_Pos)
#define FLASH_WRP1BR_WRP1B_STRT FLASH_WRP1BR_WRP1B_STRT_Msk
#define FLASH_WRP1BR_WRP1B_END_Pos (16U)
#define FLASH_WRP1BR_WRP1B_END_Msk (0xFFUL << FLASH_WRP1BR_WRP1B_END_Pos)
#define FLASH_WRP1BR_WRP1B_END FLASH_WRP1BR_WRP1B_END_Msk
#define FLASH_PCROP1BSR_PCROP1B_STRT_Pos (0U)
#define FLASH_PCROP1BSR_PCROP1B_STRT_Msk (0x1FFUL << FLASH_PCROP1BSR_PCROP1B_STRT_Pos)
#define FLASH_PCROP1BSR_PCROP1B_STRT FLASH_PCROP1BSR_PCROP1B_STRT_Msk
#define FLASH_PCROP1BER_PCROP1B_END_Pos (0U)
#define FLASH_PCROP1BER_PCROP1B_END_Msk (0x1FFUL << FLASH_PCROP1BER_PCROP1B_END_Pos)
#define FLASH_PCROP1BER_PCROP1B_END FLASH_PCROP1BER_PCROP1B_END_Msk
#define FLASH_IPCCBR_IPCCDBA_Pos (0U)
#define FLASH_IPCCBR_IPCCDBA_Msk (0x3FFFUL << FLASH_IPCCBR_IPCCDBA_Pos)
#define FLASH_IPCCBR_IPCCDBA FLASH_IPCCBR_IPCCDBA_Msk
#define FLASH_SFR_SFSA_Pos (0U)
#define FLASH_SFR_SFSA_Msk (0xFFUL << FLASH_SFR_SFSA_Pos)
#define FLASH_SFR_SFSA FLASH_SFR_SFSA_Msk
#define FLASH_SFR_FSD_Pos (8U)
#define FLASH_SFR_FSD_Msk (0x1UL << FLASH_SFR_FSD_Pos)
#define FLASH_SFR_FSD FLASH_SFR_FSD_Msk
#define FLASH_SFR_DDS_Pos (12U)
#define FLASH_SFR_DDS_Msk (0x1UL << FLASH_SFR_DDS_Pos)
#define FLASH_SFR_DDS FLASH_SFR_DDS_Msk
#define FLASH_SRRVR_SBRV_Pos (0U)
#define FLASH_SRRVR_SBRV_Msk (0x3FFFFUL << FLASH_SRRVR_SBRV_Pos)
#define FLASH_SRRVR_SBRV FLASH_SRRVR_SBRV_Msk
#define FLASH_SRRVR_SBRSA_Pos (18U)
#define FLASH_SRRVR_SBRSA_Msk (0x1FUL << FLASH_SRRVR_SBRSA_Pos)
#define FLASH_SRRVR_SBRSA FLASH_SRRVR_SBRSA_Msk
#define FLASH_SRRVR_BRSD_Pos (23U)
#define FLASH_SRRVR_BRSD_Msk (0x1UL << FLASH_SRRVR_BRSD_Pos)
#define FLASH_SRRVR_BRSD FLASH_SRRVR_BRSD_Msk
#define FLASH_SRRVR_SNBRSA_Pos (25U)
#define FLASH_SRRVR_SNBRSA_Msk (0x1FUL << FLASH_SRRVR_SNBRSA_Pos)
#define FLASH_SRRVR_SNBRSA FLASH_SRRVR_SNBRSA_Msk
#define FLASH_SRRVR_NBRSD_Pos (30U)
#define FLASH_SRRVR_NBRSD_Msk (0x1UL << FLASH_SRRVR_NBRSD_Pos)
#define FLASH_SRRVR_NBRSD FLASH_SRRVR_NBRSD_Msk
#define FLASH_SRRVR_C2OPT_Pos (31U)
#define FLASH_SRRVR_C2OPT_Msk (0x1UL << FLASH_SRRVR_C2OPT_Pos)
#define FLASH_SRRVR_C2OPT FLASH_SRRVR_C2OPT_Msk
#define FLASH_C2ACR_PRFTEN_Pos (8U)
#define FLASH_C2ACR_PRFTEN_Msk (0x1UL << FLASH_C2ACR_PRFTEN_Pos)
#define FLASH_C2ACR_PRFTEN FLASH_C2ACR_PRFTEN_Msk
#define FLASH_C2ACR_ICEN_Pos (9U)
#define FLASH_C2ACR_ICEN_Msk (0x1UL << FLASH_C2ACR_ICEN_Pos)
#define FLASH_C2ACR_ICEN FLASH_C2ACR_ICEN_Msk
#define FLASH_C2ACR_ICRST_Pos (11U)
#define FLASH_C2ACR_ICRST_Msk (0x1UL << FLASH_C2ACR_ICRST_Pos)
#define FLASH_C2ACR_ICRST FLASH_C2ACR_ICRST_Msk
#define FLASH_C2ACR_PES_Pos (15U)
#define FLASH_C2ACR_PES_Msk (0x1UL << FLASH_C2ACR_PES_Pos)
#define FLASH_C2ACR_PES FLASH_C2ACR_PES_Msk
#define FLASH_C2SR_EOP_Pos (0U)
#define FLASH_C2SR_EOP_Msk (0x1UL << FLASH_C2SR_EOP_Pos)
#define FLASH_C2SR_EOP FLASH_C2SR_EOP_Msk
#define FLASH_C2SR_OPERR_Pos (1U)
#define FLASH_C2SR_OPERR_Msk (0x1UL << FLASH_C2SR_OPERR_Pos)
#define FLASH_C2SR_OPERR FLASH_C2SR_OPERR_Msk
#define FLASH_C2SR_PROGERR_Pos (3U)
#define FLASH_C2SR_PROGERR_Msk (0x1UL << FLASH_C2SR_PROGERR_Pos)
#define FLASH_C2SR_PROGERR FLASH_C2SR_PROGERR_Msk
#define FLASH_C2SR_WRPERR_Pos (4U)
#define FLASH_C2SR_WRPERR_Msk (0x1UL << FLASH_C2SR_WRPERR_Pos)
#define FLASH_C2SR_WRPERR FLASH_C2SR_WRPERR_Msk
#define FLASH_C2SR_PGAERR_Pos (5U)
#define FLASH_C2SR_PGAERR_Msk (0x1UL << FLASH_C2SR_PGAERR_Pos)
#define FLASH_C2SR_PGAERR FLASH_C2SR_PGAERR_Msk
#define FLASH_C2SR_SIZERR_Pos (6U)
#define FLASH_C2SR_SIZERR_Msk (0x1UL << FLASH_C2SR_SIZERR_Pos)
#define FLASH_C2SR_SIZERR FLASH_C2SR_SIZERR_Msk
#define FLASH_C2SR_PGSERR_Pos (7U)
#define FLASH_C2SR_PGSERR_Msk (0x1UL << FLASH_C2SR_PGSERR_Pos)
#define FLASH_C2SR_PGSERR FLASH_C2SR_PGSERR_Msk
#define FLASH_C2SR_MISERR_Pos (8U)
#define FLASH_C2SR_MISERR_Msk (0x1UL << FLASH_C2SR_MISERR_Pos)
#define FLASH_C2SR_MISERR FLASH_C2SR_MISERR_Msk
#define FLASH_C2SR_FASTERR_Pos (9U)
#define FLASH_C2SR_FASTERR_Msk (0x1UL << FLASH_C2SR_FASTERR_Pos)
#define FLASH_C2SR_FASTERR FLASH_C2SR_FASTERR_Msk
#define FLASH_C2SR_RDERR_Pos (14U)
#define FLASH_C2SR_RDERR_Msk (0x1UL << FLASH_C2SR_RDERR_Pos)
#define FLASH_C2SR_RDERR FLASH_C2SR_RDERR_Msk
#define FLASH_C2SR_BSY_Pos (16U)
#define FLASH_C2SR_BSY_Msk (0x1UL << FLASH_C2SR_BSY_Pos)
#define FLASH_C2SR_BSY FLASH_C2SR_BSY_Msk
#define FLASH_C2SR_CFGBSY_Pos (18U)
#define FLASH_C2SR_CFGBSY_Msk (0x1UL << FLASH_C2SR_CFGBSY_Pos)
#define FLASH_C2SR_CFGBSY FLASH_C2SR_CFGBSY_Msk
#define FLASH_C2SR_PESD_Pos (19U)
#define FLASH_C2SR_PESD_Msk (0x1UL << FLASH_C2SR_PESD_Pos)
#define FLASH_C2SR_PESD FLASH_C2SR_PESD_Msk
#define FLASH_C2CR_PG_Pos (0U)
#define FLASH_C2CR_PG_Msk (0x1UL << FLASH_C2CR_PG_Pos)
#define FLASH_C2CR_PG FLASH_C2CR_PG_Msk
#define FLASH_C2CR_PER_Pos (1U)
#define FLASH_C2CR_PER_Msk (0x1UL << FLASH_C2CR_PER_Pos)
#define FLASH_C2CR_PER FLASH_C2CR_PER_Msk
#define FLASH_C2CR_MER_Pos (2U)
#define FLASH_C2CR_MER_Msk (0x1UL << FLASH_C2CR_MER_Pos)
#define FLASH_C2CR_MER FLASH_C2CR_MER_Msk
#define FLASH_C2CR_PNB_Pos (3U)
#define FLASH_C2CR_PNB_Msk (0xFFUL << FLASH_C2CR_PNB_Pos)
#define FLASH_C2CR_PNB FLASH_C2CR_PNB_Msk
#define FLASH_C2CR_STRT_Pos (16U)
#define FLASH_C2CR_STRT_Msk (0x1UL << FLASH_C2CR_STRT_Pos)
#define FLASH_C2CR_STRT FLASH_C2CR_STRT_Msk
#define FLASH_C2CR_FSTPG_Pos (18U)
#define FLASH_C2CR_FSTPG_Msk (0x1UL << FLASH_C2CR_FSTPG_Pos)
#define FLASH_C2CR_FSTPG FLASH_C2CR_FSTPG_Msk
#define FLASH_C2CR_EOPIE_Pos (24U)
#define FLASH_C2CR_EOPIE_Msk (0x1UL << FLASH_C2CR_EOPIE_Pos)
#define FLASH_C2CR_EOPIE FLASH_C2CR_EOPIE_Msk
#define FLASH_C2CR_ERRIE_Pos (25U)
#define FLASH_C2CR_ERRIE_Msk (0x1UL << FLASH_C2CR_ERRIE_Pos)
#define FLASH_C2CR_ERRIE FLASH_C2CR_ERRIE_Msk
#define FLASH_C2CR_RDERRIE_Pos (26U)
#define FLASH_C2CR_RDERRIE_Msk (0x1UL << FLASH_C2CR_RDERRIE_Pos)
#define FLASH_C2CR_RDERRIE FLASH_C2CR_RDERRIE_Msk
#define GPIO_MODER_MODE0_Pos (0U)
#define GPIO_MODER_MODE0_Msk (0x3UL << GPIO_MODER_MODE0_Pos)
#define GPIO_MODER_MODE0 GPIO_MODER_MODE0_Msk
#define GPIO_MODER_MODE0_0 (0x1U << GPIO_MODER_MODE0_Pos)
#define GPIO_MODER_MODE0_1 (0x2U << GPIO_MODER_MODE0_Pos)
#define GPIO_MODER_MODE1_Pos (2U)
#define GPIO_MODER_MODE1_Msk (0x3UL << GPIO_MODER_MODE1_Pos)
#define GPIO_MODER_MODE1 GPIO_MODER_MODE1_Msk
#define GPIO_MODER_MODE1_0 (0x1U << GPIO_MODER_MODE1_Pos)
#define GPIO_MODER_MODE1_1 (0x2U << GPIO_MODER_MODE1_Pos)
#define GPIO_MODER_MODE2_Pos (4U)
#define GPIO_MODER_MODE2_Msk (0x3UL << GPIO_MODER_MODE2_Pos)
#define GPIO_MODER_MODE2 GPIO_MODER_MODE2_Msk
#define GPIO_MODER_MODE2_0 (0x1U << GPIO_MODER_MODE2_Pos)
#define GPIO_MODER_MODE2_1 (0x2U << GPIO_MODER_MODE2_Pos)
#define GPIO_MODER_MODE3_Pos (6U)
#define GPIO_MODER_MODE3_Msk (0x3UL << GPIO_MODER_MODE3_Pos)
#define GPIO_MODER_MODE3 GPIO_MODER_MODE3_Msk
#define GPIO_MODER_MODE3_0 (0x1U << GPIO_MODER_MODE3_Pos)
#define GPIO_MODER_MODE3_1 (0x2U << GPIO_MODER_MODE3_Pos)
#define GPIO_MODER_MODE4_Pos (8U)
#define GPIO_MODER_MODE4_Msk (0x3UL << GPIO_MODER_MODE4_Pos)
#define GPIO_MODER_MODE4 GPIO_MODER_MODE4_Msk
#define GPIO_MODER_MODE4_0 (0x1U << GPIO_MODER_MODE4_Pos)
#define GPIO_MODER_MODE4_1 (0x2U << GPIO_MODER_MODE4_Pos)
#define GPIO_MODER_MODE5_Pos (10U)
#define GPIO_MODER_MODE5_Msk (0x3UL << GPIO_MODER_MODE5_Pos)
#define GPIO_MODER_MODE5 GPIO_MODER_MODE5_Msk
#define GPIO_MODER_MODE5_0 (0x1U << GPIO_MODER_MODE5_Pos)
#define GPIO_MODER_MODE5_1 (0x2U << GPIO_MODER_MODE5_Pos)
#define GPIO_MODER_MODE6_Pos (12U)
#define GPIO_MODER_MODE6_Msk (0x3UL << GPIO_MODER_MODE6_Pos)
#define GPIO_MODER_MODE6 GPIO_MODER_MODE6_Msk
#define GPIO_MODER_MODE6_0 (0x1U << GPIO_MODER_MODE6_Pos)
#define GPIO_MODER_MODE6_1 (0x2U << GPIO_MODER_MODE6_Pos)
#define GPIO_MODER_MODE7_Pos (14U)
#define GPIO_MODER_MODE7_Msk (0x3UL << GPIO_MODER_MODE7_Pos)
#define GPIO_MODER_MODE7 GPIO_MODER_MODE7_Msk
#define GPIO_MODER_MODE7_0 (0x1U << GPIO_MODER_MODE7_Pos)
#define GPIO_MODER_MODE7_1 (0x2U << GPIO_MODER_MODE7_Pos)
#define GPIO_MODER_MODE8_Pos (16U)
#define GPIO_MODER_MODE8_Msk (0x3UL << GPIO_MODER_MODE8_Pos)
#define GPIO_MODER_MODE8 GPIO_MODER_MODE8_Msk
#define GPIO_MODER_MODE8_0 (0x1U << GPIO_MODER_MODE8_Pos)
#define GPIO_MODER_MODE8_1 (0x2U << GPIO_MODER_MODE8_Pos)
#define GPIO_MODER_MODE9_Pos (18U)
#define GPIO_MODER_MODE9_Msk (0x3UL << GPIO_MODER_MODE9_Pos)
#define GPIO_MODER_MODE9 GPIO_MODER_MODE9_Msk
#define GPIO_MODER_MODE9_0 (0x1U << GPIO_MODER_MODE9_Pos)
#define GPIO_MODER_MODE9_1 (0x2U << GPIO_MODER_MODE9_Pos)
#define GPIO_MODER_MODE10_Pos (20U)
#define GPIO_MODER_MODE10_Msk (0x3UL << GPIO_MODER_MODE10_Pos)
#define GPIO_MODER_MODE10 GPIO_MODER_MODE10_Msk
#define GPIO_MODER_MODE10_0 (0x1U << GPIO_MODER_MODE10_Pos)
#define GPIO_MODER_MODE10_1 (0x2U << GPIO_MODER_MODE10_Pos)
#define GPIO_MODER_MODE11_Pos (22U)
#define GPIO_MODER_MODE11_Msk (0x3UL << GPIO_MODER_MODE11_Pos)
#define GPIO_MODER_MODE11 GPIO_MODER_MODE11_Msk
#define GPIO_MODER_MODE11_0 (0x1U << GPIO_MODER_MODE11_Pos)
#define GPIO_MODER_MODE11_1 (0x2U << GPIO_MODER_MODE11_Pos)
#define GPIO_MODER_MODE12_Pos (24U)
#define GPIO_MODER_MODE12_Msk (0x3UL << GPIO_MODER_MODE12_Pos)
#define GPIO_MODER_MODE12 GPIO_MODER_MODE12_Msk
#define GPIO_MODER_MODE12_0 (0x1U << GPIO_MODER_MODE12_Pos)
#define GPIO_MODER_MODE12_1 (0x2U << GPIO_MODER_MODE12_Pos)
#define GPIO_MODER_MODE13_Pos (26U)
#define GPIO_MODER_MODE13_Msk (0x3UL << GPIO_MODER_MODE13_Pos)
#define GPIO_MODER_MODE13 GPIO_MODER_MODE13_Msk
#define GPIO_MODER_MODE13_0 (0x1U << GPIO_MODER_MODE13_Pos)
#define GPIO_MODER_MODE13_1 (0x2U << GPIO_MODER_MODE13_Pos)
#define GPIO_MODER_MODE14_Pos (28U)
#define GPIO_MODER_MODE14_Msk (0x3UL << GPIO_MODER_MODE14_Pos)
#define GPIO_MODER_MODE14 GPIO_MODER_MODE14_Msk
#define GPIO_MODER_MODE14_0 (0x1U << GPIO_MODER_MODE14_Pos)
#define GPIO_MODER_MODE14_1 (0x2U << GPIO_MODER_MODE14_Pos)
#define GPIO_MODER_MODE15_Pos (30U)
#define GPIO_MODER_MODE15_Msk (0x3UL << GPIO_MODER_MODE15_Pos)
#define GPIO_MODER_MODE15 GPIO_MODER_MODE15_Msk
#define GPIO_MODER_MODE15_0 (0x1U << GPIO_MODER_MODE15_Pos)
#define GPIO_MODER_MODE15_1 (0x2U << GPIO_MODER_MODE15_Pos)
#define GPIO_OTYPER_OT0_Pos (0U)
#define GPIO_OTYPER_OT0_Msk (0x1UL << GPIO_OTYPER_OT0_Pos)
#define GPIO_OTYPER_OT0 GPIO_OTYPER_OT0_Msk
#define GPIO_OTYPER_OT1_Pos (1U)
#define GPIO_OTYPER_OT1_Msk (0x1UL << GPIO_OTYPER_OT1_Pos)
#define GPIO_OTYPER_OT1 GPIO_OTYPER_OT1_Msk
#define GPIO_OTYPER_OT2_Pos (2U)
#define GPIO_OTYPER_OT2_Msk (0x1UL << GPIO_OTYPER_OT2_Pos)
#define GPIO_OTYPER_OT2 GPIO_OTYPER_OT2_Msk
#define GPIO_OTYPER_OT3_Pos (3U)
#define GPIO_OTYPER_OT3_Msk (0x1UL << GPIO_OTYPER_OT3_Pos)
#define GPIO_OTYPER_OT3 GPIO_OTYPER_OT3_Msk
#define GPIO_OTYPER_OT4_Pos (4U)
#define GPIO_OTYPER_OT4_Msk (0x1UL << GPIO_OTYPER_OT4_Pos)
#define GPIO_OTYPER_OT4 GPIO_OTYPER_OT4_Msk
#define GPIO_OTYPER_OT5_Pos (5U)
#define GPIO_OTYPER_OT5_Msk (0x1UL << GPIO_OTYPER_OT5_Pos)
#define GPIO_OTYPER_OT5 GPIO_OTYPER_OT5_Msk
#define GPIO_OTYPER_OT6_Pos (6U)
#define GPIO_OTYPER_OT6_Msk (0x1UL << GPIO_OTYPER_OT6_Pos)
#define GPIO_OTYPER_OT6 GPIO_OTYPER_OT6_Msk
#define GPIO_OTYPER_OT7_Pos (7U)
#define GPIO_OTYPER_OT7_Msk (0x1UL << GPIO_OTYPER_OT7_Pos)
#define GPIO_OTYPER_OT7 GPIO_OTYPER_OT7_Msk
#define GPIO_OTYPER_OT8_Pos (8U)
#define GPIO_OTYPER_OT8_Msk (0x1UL << GPIO_OTYPER_OT8_Pos)
#define GPIO_OTYPER_OT8 GPIO_OTYPER_OT8_Msk
#define GPIO_OTYPER_OT9_Pos (9U)
#define GPIO_OTYPER_OT9_Msk (0x1UL << GPIO_OTYPER_OT9_Pos)
#define GPIO_OTYPER_OT9 GPIO_OTYPER_OT9_Msk
#define GPIO_OTYPER_OT10_Pos (10U)
#define GPIO_OTYPER_OT10_Msk (0x1UL << GPIO_OTYPER_OT10_Pos)
#define GPIO_OTYPER_OT10 GPIO_OTYPER_OT10_Msk
#define GPIO_OTYPER_OT11_Pos (11U)
#define GPIO_OTYPER_OT11_Msk (0x1UL << GPIO_OTYPER_OT11_Pos)
#define GPIO_OTYPER_OT11 GPIO_OTYPER_OT11_Msk
#define GPIO_OTYPER_OT12_Pos (12U)
#define GPIO_OTYPER_OT12_Msk (0x1UL << GPIO_OTYPER_OT12_Pos)
#define GPIO_OTYPER_OT12 GPIO_OTYPER_OT12_Msk
#define GPIO_OTYPER_OT13_Pos (13U)
#define GPIO_OTYPER_OT13_Msk (0x1UL << GPIO_OTYPER_OT13_Pos)
#define GPIO_OTYPER_OT13 GPIO_OTYPER_OT13_Msk
#define GPIO_OTYPER_OT14_Pos (14U)
#define GPIO_OTYPER_OT14_Msk (0x1UL << GPIO_OTYPER_OT14_Pos)
#define GPIO_OTYPER_OT14 GPIO_OTYPER_OT14_Msk
#define GPIO_OTYPER_OT15_Pos (15U)
#define GPIO_OTYPER_OT15_Msk (0x1UL << GPIO_OTYPER_OT15_Pos)
#define GPIO_OTYPER_OT15 GPIO_OTYPER_OT15_Msk
#define GPIO_OSPEEDR_OSPEED0_Pos (0U)
#define GPIO_OSPEEDR_OSPEED0_Msk (0x3UL << GPIO_OSPEEDR_OSPEED0_Pos)
#define GPIO_OSPEEDR_OSPEED0 GPIO_OSPEEDR_OSPEED0_Msk
#define GPIO_OSPEEDR_OSPEED0_0 (0x1U << GPIO_OSPEEDR_OSPEED0_Pos)
#define GPIO_OSPEEDR_OSPEED0_1 (0x2U << GPIO_OSPEEDR_OSPEED0_Pos)
#define GPIO_OSPEEDR_OSPEED1_Pos (2U)
#define GPIO_OSPEEDR_OSPEED1_Msk (0x3UL << GPIO_OSPEEDR_OSPEED1_Pos)
#define GPIO_OSPEEDR_OSPEED1 GPIO_OSPEEDR_OSPEED1_Msk
#define GPIO_OSPEEDR_OSPEED1_0 (0x1U << GPIO_OSPEEDR_OSPEED1_Pos)
#define GPIO_OSPEEDR_OSPEED1_1 (0x2U << GPIO_OSPEEDR_OSPEED1_Pos)
#define GPIO_OSPEEDR_OSPEED2_Pos (4U)
#define GPIO_OSPEEDR_OSPEED2_Msk (0x3UL << GPIO_OSPEEDR_OSPEED2_Pos)
#define GPIO_OSPEEDR_OSPEED2 GPIO_OSPEEDR_OSPEED2_Msk
#define GPIO_OSPEEDR_OSPEED2_0 (0x1U << GPIO_OSPEEDR_OSPEED2_Pos)
#define GPIO_OSPEEDR_OSPEED2_1 (0x2U << GPIO_OSPEEDR_OSPEED2_Pos)
#define GPIO_OSPEEDR_OSPEED3_Pos (6U)
#define GPIO_OSPEEDR_OSPEED3_Msk (0x3UL << GPIO_OSPEEDR_OSPEED3_Pos)
#define GPIO_OSPEEDR_OSPEED3 GPIO_OSPEEDR_OSPEED3_Msk
#define GPIO_OSPEEDR_OSPEED3_0 (0x1U << GPIO_OSPEEDR_OSPEED3_Pos)
#define GPIO_OSPEEDR_OSPEED3_1 (0x2U << GPIO_OSPEEDR_OSPEED3_Pos)
#define GPIO_OSPEEDR_OSPEED4_Pos (8U)
#define GPIO_OSPEEDR_OSPEED4_Msk (0x3UL << GPIO_OSPEEDR_OSPEED4_Pos)
#define GPIO_OSPEEDR_OSPEED4 GPIO_OSPEEDR_OSPEED4_Msk
#define GPIO_OSPEEDR_OSPEED4_0 (0x1U << GPIO_OSPEEDR_OSPEED4_Pos)
#define GPIO_OSPEEDR_OSPEED4_1 (0x2U << GPIO_OSPEEDR_OSPEED4_Pos)
#define GPIO_OSPEEDR_OSPEED5_Pos (10U)
#define GPIO_OSPEEDR_OSPEED5_Msk (0x3UL << GPIO_OSPEEDR_OSPEED5_Pos)
#define GPIO_OSPEEDR_OSPEED5 GPIO_OSPEEDR_OSPEED5_Msk
#define GPIO_OSPEEDR_OSPEED5_0 (0x1U << GPIO_OSPEEDR_OSPEED5_Pos)
#define GPIO_OSPEEDR_OSPEED5_1 (0x2U << GPIO_OSPEEDR_OSPEED5_Pos)
#define GPIO_OSPEEDR_OSPEED6_Pos (12U)
#define GPIO_OSPEEDR_OSPEED6_Msk (0x3UL << GPIO_OSPEEDR_OSPEED6_Pos)
#define GPIO_OSPEEDR_OSPEED6 GPIO_OSPEEDR_OSPEED6_Msk
#define GPIO_OSPEEDR_OSPEED6_0 (0x1U << GPIO_OSPEEDR_OSPEED6_Pos)
#define GPIO_OSPEEDR_OSPEED6_1 (0x2U << GPIO_OSPEEDR_OSPEED6_Pos)
#define GPIO_OSPEEDR_OSPEED7_Pos (14U)
#define GPIO_OSPEEDR_OSPEED7_Msk (0x3UL << GPIO_OSPEEDR_OSPEED7_Pos)
#define GPIO_OSPEEDR_OSPEED7 GPIO_OSPEEDR_OSPEED7_Msk
#define GPIO_OSPEEDR_OSPEED7_0 (0x1U << GPIO_OSPEEDR_OSPEED7_Pos)
#define GPIO_OSPEEDR_OSPEED7_1 (0x2U << GPIO_OSPEEDR_OSPEED7_Pos)
#define GPIO_OSPEEDR_OSPEED8_Pos (16U)
#define GPIO_OSPEEDR_OSPEED8_Msk (0x3UL << GPIO_OSPEEDR_OSPEED8_Pos)
#define GPIO_OSPEEDR_OSPEED8 GPIO_OSPEEDR_OSPEED8_Msk
#define GPIO_OSPEEDR_OSPEED8_0 (0x1U << GPIO_OSPEEDR_OSPEED8_Pos)
#define GPIO_OSPEEDR_OSPEED8_1 (0x2U << GPIO_OSPEEDR_OSPEED8_Pos)
#define GPIO_OSPEEDR_OSPEED9_Pos (18U)
#define GPIO_OSPEEDR_OSPEED9_Msk (0x3UL << GPIO_OSPEEDR_OSPEED9_Pos)
#define GPIO_OSPEEDR_OSPEED9 GPIO_OSPEEDR_OSPEED9_Msk
#define GPIO_OSPEEDR_OSPEED9_0 (0x1U << GPIO_OSPEEDR_OSPEED9_Pos)
#define GPIO_OSPEEDR_OSPEED9_1 (0x2U << GPIO_OSPEEDR_OSPEED9_Pos)
#define GPIO_OSPEEDR_OSPEED10_Pos (20U)
#define GPIO_OSPEEDR_OSPEED10_Msk (0x3UL << GPIO_OSPEEDR_OSPEED10_Pos)
#define GPIO_OSPEEDR_OSPEED10 GPIO_OSPEEDR_OSPEED10_Msk
#define GPIO_OSPEEDR_OSPEED10_0 (0x1U << GPIO_OSPEEDR_OSPEED10_Pos)
#define GPIO_OSPEEDR_OSPEED10_1 (0x2U << GPIO_OSPEEDR_OSPEED10_Pos)
#define GPIO_OSPEEDR_OSPEED11_Pos (22U)
#define GPIO_OSPEEDR_OSPEED11_Msk (0x3UL << GPIO_OSPEEDR_OSPEED11_Pos)
#define GPIO_OSPEEDR_OSPEED11 GPIO_OSPEEDR_OSPEED11_Msk
#define GPIO_OSPEEDR_OSPEED11_0 (0x1U << GPIO_OSPEEDR_OSPEED11_Pos)
#define GPIO_OSPEEDR_OSPEED11_1 (0x2U << GPIO_OSPEEDR_OSPEED11_Pos)
#define GPIO_OSPEEDR_OSPEED12_Pos (24U)
#define GPIO_OSPEEDR_OSPEED12_Msk (0x3UL << GPIO_OSPEEDR_OSPEED12_Pos)
#define GPIO_OSPEEDR_OSPEED12 GPIO_OSPEEDR_OSPEED12_Msk
#define GPIO_OSPEEDR_OSPEED12_0 (0x1U << GPIO_OSPEEDR_OSPEED12_Pos)
#define GPIO_OSPEEDR_OSPEED12_1 (0x2U << GPIO_OSPEEDR_OSPEED12_Pos)
#define GPIO_OSPEEDR_OSPEED13_Pos (26U)
#define GPIO_OSPEEDR_OSPEED13_Msk (0x3UL << GPIO_OSPEEDR_OSPEED13_Pos)
#define GPIO_OSPEEDR_OSPEED13 GPIO_OSPEEDR_OSPEED13_Msk
#define GPIO_OSPEEDR_OSPEED13_0 (0x1U << GPIO_OSPEEDR_OSPEED13_Pos)
#define GPIO_OSPEEDR_OSPEED13_1 (0x2U << GPIO_OSPEEDR_OSPEED13_Pos)
#define GPIO_OSPEEDR_OSPEED14_Pos (28U)
#define GPIO_OSPEEDR_OSPEED14_Msk (0x3UL << GPIO_OSPEEDR_OSPEED14_Pos)
#define GPIO_OSPEEDR_OSPEED14 GPIO_OSPEEDR_OSPEED14_Msk
#define GPIO_OSPEEDR_OSPEED14_0 (0x1U << GPIO_OSPEEDR_OSPEED14_Pos)
#define GPIO_OSPEEDR_OSPEED14_1 (0x2U << GPIO_OSPEEDR_OSPEED14_Pos)
#define GPIO_OSPEEDR_OSPEED15_Pos (30U)
#define GPIO_OSPEEDR_OSPEED15_Msk (0x3UL << GPIO_OSPEEDR_OSPEED15_Pos)
#define GPIO_OSPEEDR_OSPEED15 GPIO_OSPEEDR_OSPEED15_Msk
#define GPIO_OSPEEDR_OSPEED15_0 (0x1U << GPIO_OSPEEDR_OSPEED15_Pos)
#define GPIO_OSPEEDR_OSPEED15_1 (0x2U << GPIO_OSPEEDR_OSPEED15_Pos)
#define GPIO_PUPDR_PUPD0_Pos (0U)
#define GPIO_PUPDR_PUPD0_Msk (0x3UL << GPIO_PUPDR_PUPD0_Pos)
#define GPIO_PUPDR_PUPD0 GPIO_PUPDR_PUPD0_Msk
#define GPIO_PUPDR_PUPD0_0 (0x1U << GPIO_PUPDR_PUPD0_Pos)
#define GPIO_PUPDR_PUPD0_1 (0x2U << GPIO_PUPDR_PUPD0_Pos)
#define GPIO_PUPDR_PUPD1_Pos (2U)
#define GPIO_PUPDR_PUPD1_Msk (0x3UL << GPIO_PUPDR_PUPD1_Pos)
#define GPIO_PUPDR_PUPD1 GPIO_PUPDR_PUPD1_Msk
#define GPIO_PUPDR_PUPD1_0 (0x1U << GPIO_PUPDR_PUPD1_Pos)
#define GPIO_PUPDR_PUPD1_1 (0x2U << GPIO_PUPDR_PUPD1_Pos)
#define GPIO_PUPDR_PUPD2_Pos (4U)
#define GPIO_PUPDR_PUPD2_Msk (0x3UL << GPIO_PUPDR_PUPD2_Pos)
#define GPIO_PUPDR_PUPD2 GPIO_PUPDR_PUPD2_Msk
#define GPIO_PUPDR_PUPD2_0 (0x1U << GPIO_PUPDR_PUPD2_Pos)
#define GPIO_PUPDR_PUPD2_1 (0x2U << GPIO_PUPDR_PUPD2_Pos)
#define GPIO_PUPDR_PUPD3_Pos (6U)
#define GPIO_PUPDR_PUPD3_Msk (0x3UL << GPIO_PUPDR_PUPD3_Pos)
#define GPIO_PUPDR_PUPD3 GPIO_PUPDR_PUPD3_Msk
#define GPIO_PUPDR_PUPD3_0 (0x1U << GPIO_PUPDR_PUPD3_Pos)
#define GPIO_PUPDR_PUPD3_1 (0x2U << GPIO_PUPDR_PUPD3_Pos)
#define GPIO_PUPDR_PUPD4_Pos (8U)
#define GPIO_PUPDR_PUPD4_Msk (0x3UL << GPIO_PUPDR_PUPD4_Pos)
#define GPIO_PUPDR_PUPD4 GPIO_PUPDR_PUPD4_Msk
#define GPIO_PUPDR_PUPD4_0 (0x1U << GPIO_PUPDR_PUPD4_Pos)
#define GPIO_PUPDR_PUPD4_1 (0x2U << GPIO_PUPDR_PUPD4_Pos)
#define GPIO_PUPDR_PUPD5_Pos (10U)
#define GPIO_PUPDR_PUPD5_Msk (0x3UL << GPIO_PUPDR_PUPD5_Pos)
#define GPIO_PUPDR_PUPD5 GPIO_PUPDR_PUPD5_Msk
#define GPIO_PUPDR_PUPD5_0 (0x1U << GPIO_PUPDR_PUPD5_Pos)
#define GPIO_PUPDR_PUPD5_1 (0x2U << GPIO_PUPDR_PUPD5_Pos)
#define GPIO_PUPDR_PUPD6_Pos (12U)
#define GPIO_PUPDR_PUPD6_Msk (0x3UL << GPIO_PUPDR_PUPD6_Pos)
#define GPIO_PUPDR_PUPD6 GPIO_PUPDR_PUPD6_Msk
#define GPIO_PUPDR_PUPD6_0 (0x1U << GPIO_PUPDR_PUPD6_Pos)
#define GPIO_PUPDR_PUPD6_1 (0x2U << GPIO_PUPDR_PUPD6_Pos)
#define GPIO_PUPDR_PUPD7_Pos (14U)
#define GPIO_PUPDR_PUPD7_Msk (0x3UL << GPIO_PUPDR_PUPD7_Pos)
#define GPIO_PUPDR_PUPD7 GPIO_PUPDR_PUPD7_Msk
#define GPIO_PUPDR_PUPD7_0 (0x1U << GPIO_PUPDR_PUPD7_Pos)
#define GPIO_PUPDR_PUPD7_1 (0x2U << GPIO_PUPDR_PUPD7_Pos)
#define GPIO_PUPDR_PUPD8_Pos (16U)
#define GPIO_PUPDR_PUPD8_Msk (0x3UL << GPIO_PUPDR_PUPD8_Pos)
#define GPIO_PUPDR_PUPD8 GPIO_PUPDR_PUPD8_Msk
#define GPIO_PUPDR_PUPD8_0 (0x1U << GPIO_PUPDR_PUPD8_Pos)
#define GPIO_PUPDR_PUPD8_1 (0x2U << GPIO_PUPDR_PUPD8_Pos)
#define GPIO_PUPDR_PUPD9_Pos (18U)
#define GPIO_PUPDR_PUPD9_Msk (0x3UL << GPIO_PUPDR_PUPD9_Pos)
#define GPIO_PUPDR_PUPD9 GPIO_PUPDR_PUPD9_Msk
#define GPIO_PUPDR_PUPD9_0 (0x1U << GPIO_PUPDR_PUPD9_Pos)
#define GPIO_PUPDR_PUPD9_1 (0x2U << GPIO_PUPDR_PUPD9_Pos)
#define GPIO_PUPDR_PUPD10_Pos (20U)
#define GPIO_PUPDR_PUPD10_Msk (0x3UL << GPIO_PUPDR_PUPD10_Pos)
#define GPIO_PUPDR_PUPD10 GPIO_PUPDR_PUPD10_Msk
#define GPIO_PUPDR_PUPD10_0 (0x1U << GPIO_PUPDR_PUPD10_Pos)
#define GPIO_PUPDR_PUPD10_1 (0x2U << GPIO_PUPDR_PUPD10_Pos)
#define GPIO_PUPDR_PUPD11_Pos (22U)
#define GPIO_PUPDR_PUPD11_Msk (0x3UL << GPIO_PUPDR_PUPD11_Pos)
#define GPIO_PUPDR_PUPD11 GPIO_PUPDR_PUPD11_Msk
#define GPIO_PUPDR_PUPD11_0 (0x1U << GPIO_PUPDR_PUPD11_Pos)
#define GPIO_PUPDR_PUPD11_1 (0x2U << GPIO_PUPDR_PUPD11_Pos)
#define GPIO_PUPDR_PUPD12_Pos (24U)
#define GPIO_PUPDR_PUPD12_Msk (0x3UL << GPIO_PUPDR_PUPD12_Pos)
#define GPIO_PUPDR_PUPD12 GPIO_PUPDR_PUPD12_Msk
#define GPIO_PUPDR_PUPD12_0 (0x1U << GPIO_PUPDR_PUPD12_Pos)
#define GPIO_PUPDR_PUPD12_1 (0x2U << GPIO_PUPDR_PUPD12_Pos)
#define GPIO_PUPDR_PUPD13_Pos (26U)
#define GPIO_PUPDR_PUPD13_Msk (0x3UL << GPIO_PUPDR_PUPD13_Pos)
#define GPIO_PUPDR_PUPD13 GPIO_PUPDR_PUPD13_Msk
#define GPIO_PUPDR_PUPD13_0 (0x1U << GPIO_PUPDR_PUPD13_Pos)
#define GPIO_PUPDR_PUPD13_1 (0x2U << GPIO_PUPDR_PUPD13_Pos)
#define GPIO_PUPDR_PUPD14_Pos (28U)
#define GPIO_PUPDR_PUPD14_Msk (0x3UL << GPIO_PUPDR_PUPD14_Pos)
#define GPIO_PUPDR_PUPD14 GPIO_PUPDR_PUPD14_Msk
#define GPIO_PUPDR_PUPD14_0 (0x1U << GPIO_PUPDR_PUPD14_Pos)
#define GPIO_PUPDR_PUPD14_1 (0x2U << GPIO_PUPDR_PUPD14_Pos)
#define GPIO_PUPDR_PUPD15_Pos (30U)
#define GPIO_PUPDR_PUPD15_Msk (0x3UL << GPIO_PUPDR_PUPD15_Pos)
#define GPIO_PUPDR_PUPD15 GPIO_PUPDR_PUPD15_Msk
#define GPIO_PUPDR_PUPD15_0 (0x1U << GPIO_PUPDR_PUPD15_Pos)
#define GPIO_PUPDR_PUPD15_1 (0x2U << GPIO_PUPDR_PUPD15_Pos)
#define GPIO_IDR_ID0_Pos (0U)
#define GPIO_IDR_ID0_Msk (0x1UL << GPIO_IDR_ID0_Pos)
#define GPIO_IDR_ID0 GPIO_IDR_ID0_Msk
#define GPIO_IDR_ID1_Pos (1U)
#define GPIO_IDR_ID1_Msk (0x1UL << GPIO_IDR_ID1_Pos)
#define GPIO_IDR_ID1 GPIO_IDR_ID1_Msk
#define GPIO_IDR_ID2_Pos (2U)
#define GPIO_IDR_ID2_Msk (0x1UL << GPIO_IDR_ID2_Pos)
#define GPIO_IDR_ID2 GPIO_IDR_ID2_Msk
#define GPIO_IDR_ID3_Pos (3U)
#define GPIO_IDR_ID3_Msk (0x1UL << GPIO_IDR_ID3_Pos)
#define GPIO_IDR_ID3 GPIO_IDR_ID3_Msk
#define GPIO_IDR_ID4_Pos (4U)
#define GPIO_IDR_ID4_Msk (0x1UL << GPIO_IDR_ID4_Pos)
#define GPIO_IDR_ID4 GPIO_IDR_ID4_Msk
#define GPIO_IDR_ID5_Pos (5U)
#define GPIO_IDR_ID5_Msk (0x1UL << GPIO_IDR_ID5_Pos)
#define GPIO_IDR_ID5 GPIO_IDR_ID5_Msk
#define GPIO_IDR_ID6_Pos (6U)
#define GPIO_IDR_ID6_Msk (0x1UL << GPIO_IDR_ID6_Pos)
#define GPIO_IDR_ID6 GPIO_IDR_ID6_Msk
#define GPIO_IDR_ID7_Pos (7U)
#define GPIO_IDR_ID7_Msk (0x1UL << GPIO_IDR_ID7_Pos)
#define GPIO_IDR_ID7 GPIO_IDR_ID7_Msk
#define GPIO_IDR_ID8_Pos (8U)
#define GPIO_IDR_ID8_Msk (0x1UL << GPIO_IDR_ID8_Pos)
#define GPIO_IDR_ID8 GPIO_IDR_ID8_Msk
#define GPIO_IDR_ID9_Pos (9U)
#define GPIO_IDR_ID9_Msk (0x1UL << GPIO_IDR_ID9_Pos)
#define GPIO_IDR_ID9 GPIO_IDR_ID9_Msk
#define GPIO_IDR_ID10_Pos (10U)
#define GPIO_IDR_ID10_Msk (0x1UL << GPIO_IDR_ID10_Pos)
#define GPIO_IDR_ID10 GPIO_IDR_ID10_Msk
#define GPIO_IDR_ID11_Pos (11U)
#define GPIO_IDR_ID11_Msk (0x1UL << GPIO_IDR_ID11_Pos)
#define GPIO_IDR_ID11 GPIO_IDR_ID11_Msk
#define GPIO_IDR_ID12_Pos (12U)
#define GPIO_IDR_ID12_Msk (0x1UL << GPIO_IDR_ID12_Pos)
#define GPIO_IDR_ID12 GPIO_IDR_ID12_Msk
#define GPIO_IDR_ID13_Pos (13U)
#define GPIO_IDR_ID13_Msk (0x1UL << GPIO_IDR_ID13_Pos)
#define GPIO_IDR_ID13 GPIO_IDR_ID13_Msk
#define GPIO_IDR_ID14_Pos (14U)
#define GPIO_IDR_ID14_Msk (0x1UL << GPIO_IDR_ID14_Pos)
#define GPIO_IDR_ID14 GPIO_IDR_ID14_Msk
#define GPIO_IDR_ID15_Pos (15U)
#define GPIO_IDR_ID15_Msk (0x1UL << GPIO_IDR_ID15_Pos)
#define GPIO_IDR_ID15 GPIO_IDR_ID15_Msk
#define GPIO_ODR_OD0_Pos (0U)
#define GPIO_ODR_OD0_Msk (0x1UL << GPIO_ODR_OD0_Pos)
#define GPIO_ODR_OD0 GPIO_ODR_OD0_Msk
#define GPIO_ODR_OD1_Pos (1U)
#define GPIO_ODR_OD1_Msk (0x1UL << GPIO_ODR_OD1_Pos)
#define GPIO_ODR_OD1 GPIO_ODR_OD1_Msk
#define GPIO_ODR_OD2_Pos (2U)
#define GPIO_ODR_OD2_Msk (0x1UL << GPIO_ODR_OD2_Pos)
#define GPIO_ODR_OD2 GPIO_ODR_OD2_Msk
#define GPIO_ODR_OD3_Pos (3U)
#define GPIO_ODR_OD3_Msk (0x1UL << GPIO_ODR_OD3_Pos)
#define GPIO_ODR_OD3 GPIO_ODR_OD3_Msk
#define GPIO_ODR_OD4_Pos (4U)
#define GPIO_ODR_OD4_Msk (0x1UL << GPIO_ODR_OD4_Pos)
#define GPIO_ODR_OD4 GPIO_ODR_OD4_Msk
#define GPIO_ODR_OD5_Pos (5U)
#define GPIO_ODR_OD5_Msk (0x1UL << GPIO_ODR_OD5_Pos)
#define GPIO_ODR_OD5 GPIO_ODR_OD5_Msk
#define GPIO_ODR_OD6_Pos (6U)
#define GPIO_ODR_OD6_Msk (0x1UL << GPIO_ODR_OD6_Pos)
#define GPIO_ODR_OD6 GPIO_ODR_OD6_Msk
#define GPIO_ODR_OD7_Pos (7U)
#define GPIO_ODR_OD7_Msk (0x1UL << GPIO_ODR_OD7_Pos)
#define GPIO_ODR_OD7 GPIO_ODR_OD7_Msk
#define GPIO_ODR_OD8_Pos (8U)
#define GPIO_ODR_OD8_Msk (0x1UL << GPIO_ODR_OD8_Pos)
#define GPIO_ODR_OD8 GPIO_ODR_OD8_Msk
#define GPIO_ODR_OD9_Pos (9U)
#define GPIO_ODR_OD9_Msk (0x1UL << GPIO_ODR_OD9_Pos)
#define GPIO_ODR_OD9 GPIO_ODR_OD9_Msk
#define GPIO_ODR_OD10_Pos (10U)
#define GPIO_ODR_OD10_Msk (0x1UL << GPIO_ODR_OD10_Pos)
#define GPIO_ODR_OD10 GPIO_ODR_OD10_Msk
#define GPIO_ODR_OD11_Pos (11U)
#define GPIO_ODR_OD11_Msk (0x1UL << GPIO_ODR_OD11_Pos)
#define GPIO_ODR_OD11 GPIO_ODR_OD11_Msk
#define GPIO_ODR_OD12_Pos (12U)
#define GPIO_ODR_OD12_Msk (0x1UL << GPIO_ODR_OD12_Pos)
#define GPIO_ODR_OD12 GPIO_ODR_OD12_Msk
#define GPIO_ODR_OD13_Pos (13U)
#define GPIO_ODR_OD13_Msk (0x1UL << GPIO_ODR_OD13_Pos)
#define GPIO_ODR_OD13 GPIO_ODR_OD13_Msk
#define GPIO_ODR_OD14_Pos (14U)
#define GPIO_ODR_OD14_Msk (0x1UL << GPIO_ODR_OD14_Pos)
#define GPIO_ODR_OD14 GPIO_ODR_OD14_Msk
#define GPIO_ODR_OD15_Pos (15U)
#define GPIO_ODR_OD15_Msk (0x1UL << GPIO_ODR_OD15_Pos)
#define GPIO_ODR_OD15 GPIO_ODR_OD15_Msk
#define GPIO_BSRR_BS0_Pos (0U)
#define GPIO_BSRR_BS0_Msk (0x1UL << GPIO_BSRR_BS0_Pos)
#define GPIO_BSRR_BS0 GPIO_BSRR_BS0_Msk
#define GPIO_BSRR_BS1_Pos (1U)
#define GPIO_BSRR_BS1_Msk (0x1UL << GPIO_BSRR_BS1_Pos)
#define GPIO_BSRR_BS1 GPIO_BSRR_BS1_Msk
#define GPIO_BSRR_BS2_Pos (2U)
#define GPIO_BSRR_BS2_Msk (0x1UL << GPIO_BSRR_BS2_Pos)
#define GPIO_BSRR_BS2 GPIO_BSRR_BS2_Msk
#define GPIO_BSRR_BS3_Pos (3U)
#define GPIO_BSRR_BS3_Msk (0x1UL << GPIO_BSRR_BS3_Pos)
#define GPIO_BSRR_BS3 GPIO_BSRR_BS3_Msk
#define GPIO_BSRR_BS4_Pos (4U)
#define GPIO_BSRR_BS4_Msk (0x1UL << GPIO_BSRR_BS4_Pos)
#define GPIO_BSRR_BS4 GPIO_BSRR_BS4_Msk
#define GPIO_BSRR_BS5_Pos (5U)
#define GPIO_BSRR_BS5_Msk (0x1UL << GPIO_BSRR_BS5_Pos)
#define GPIO_BSRR_BS5 GPIO_BSRR_BS5_Msk
#define GPIO_BSRR_BS6_Pos (6U)
#define GPIO_BSRR_BS6_Msk (0x1UL << GPIO_BSRR_BS6_Pos)
#define GPIO_BSRR_BS6 GPIO_BSRR_BS6_Msk
#define GPIO_BSRR_BS7_Pos (7U)
#define GPIO_BSRR_BS7_Msk (0x1UL << GPIO_BSRR_BS7_Pos)
#define GPIO_BSRR_BS7 GPIO_BSRR_BS7_Msk
#define GPIO_BSRR_BS8_Pos (8U)
#define GPIO_BSRR_BS8_Msk (0x1UL << GPIO_BSRR_BS8_Pos)
#define GPIO_BSRR_BS8 GPIO_BSRR_BS8_Msk
#define GPIO_BSRR_BS9_Pos (9U)
#define GPIO_BSRR_BS9_Msk (0x1UL << GPIO_BSRR_BS9_Pos)
#define GPIO_BSRR_BS9 GPIO_BSRR_BS9_Msk
#define GPIO_BSRR_BS10_Pos (10U)
#define GPIO_BSRR_BS10_Msk (0x1UL << GPIO_BSRR_BS10_Pos)
#define GPIO_BSRR_BS10 GPIO_BSRR_BS10_Msk
#define GPIO_BSRR_BS11_Pos (11U)
#define GPIO_BSRR_BS11_Msk (0x1UL << GPIO_BSRR_BS11_Pos)
#define GPIO_BSRR_BS11 GPIO_BSRR_BS11_Msk
#define GPIO_BSRR_BS12_Pos (12U)
#define GPIO_BSRR_BS12_Msk (0x1UL << GPIO_BSRR_BS12_Pos)
#define GPIO_BSRR_BS12 GPIO_BSRR_BS12_Msk
#define GPIO_BSRR_BS13_Pos (13U)
#define GPIO_BSRR_BS13_Msk (0x1UL << GPIO_BSRR_BS13_Pos)
#define GPIO_BSRR_BS13 GPIO_BSRR_BS13_Msk
#define GPIO_BSRR_BS14_Pos (14U)
#define GPIO_BSRR_BS14_Msk (0x1UL << GPIO_BSRR_BS14_Pos)
#define GPIO_BSRR_BS14 GPIO_BSRR_BS14_Msk
#define GPIO_BSRR_BS15_Pos (15U)
#define GPIO_BSRR_BS15_Msk (0x1UL << GPIO_BSRR_BS15_Pos)
#define GPIO_BSRR_BS15 GPIO_BSRR_BS15_Msk
#define GPIO_BSRR_BR0_Pos (16U)
#define GPIO_BSRR_BR0_Msk (0x1UL << GPIO_BSRR_BR0_Pos)
#define GPIO_BSRR_BR0 GPIO_BSRR_BR0_Msk
#define GPIO_BSRR_BR1_Pos (17U)
#define GPIO_BSRR_BR1_Msk (0x1UL << GPIO_BSRR_BR1_Pos)
#define GPIO_BSRR_BR1 GPIO_BSRR_BR1_Msk
#define GPIO_BSRR_BR2_Pos (18U)
#define GPIO_BSRR_BR2_Msk (0x1UL << GPIO_BSRR_BR2_Pos)
#define GPIO_BSRR_BR2 GPIO_BSRR_BR2_Msk
#define GPIO_BSRR_BR3_Pos (19U)
#define GPIO_BSRR_BR3_Msk (0x1UL << GPIO_BSRR_BR3_Pos)
#define GPIO_BSRR_BR3 GPIO_BSRR_BR3_Msk
#define GPIO_BSRR_BR4_Pos (20U)
#define GPIO_BSRR_BR4_Msk (0x1UL << GPIO_BSRR_BR4_Pos)
#define GPIO_BSRR_BR4 GPIO_BSRR_BR4_Msk
#define GPIO_BSRR_BR5_Pos (21U)
#define GPIO_BSRR_BR5_Msk (0x1UL << GPIO_BSRR_BR5_Pos)
#define GPIO_BSRR_BR5 GPIO_BSRR_BR5_Msk
#define GPIO_BSRR_BR6_Pos (22U)
#define GPIO_BSRR_BR6_Msk (0x1UL << GPIO_BSRR_BR6_Pos)
#define GPIO_BSRR_BR6 GPIO_BSRR_BR6_Msk
#define GPIO_BSRR_BR7_Pos (23U)
#define GPIO_BSRR_BR7_Msk (0x1UL << GPIO_BSRR_BR7_Pos)
#define GPIO_BSRR_BR7 GPIO_BSRR_BR7_Msk
#define GPIO_BSRR_BR8_Pos (24U)
#define GPIO_BSRR_BR8_Msk (0x1UL << GPIO_BSRR_BR8_Pos)
#define GPIO_BSRR_BR8 GPIO_BSRR_BR8_Msk
#define GPIO_BSRR_BR9_Pos (25U)
#define GPIO_BSRR_BR9_Msk (0x1UL << GPIO_BSRR_BR9_Pos)
#define GPIO_BSRR_BR9 GPIO_BSRR_BR9_Msk
#define GPIO_BSRR_BR10_Pos (26U)
#define GPIO_BSRR_BR10_Msk (0x1UL << GPIO_BSRR_BR10_Pos)
#define GPIO_BSRR_BR10 GPIO_BSRR_BR10_Msk
#define GPIO_BSRR_BR11_Pos (27U)
#define GPIO_BSRR_BR11_Msk (0x1UL << GPIO_BSRR_BR11_Pos)
#define GPIO_BSRR_BR11 GPIO_BSRR_BR11_Msk
#define GPIO_BSRR_BR12_Pos (28U)
#define GPIO_BSRR_BR12_Msk (0x1UL << GPIO_BSRR_BR12_Pos)
#define GPIO_BSRR_BR12 GPIO_BSRR_BR12_Msk
#define GPIO_BSRR_BR13_Pos (29U)
#define GPIO_BSRR_BR13_Msk (0x1UL << GPIO_BSRR_BR13_Pos)
#define GPIO_BSRR_BR13 GPIO_BSRR_BR13_Msk
#define GPIO_BSRR_BR14_Pos (30U)
#define GPIO_BSRR_BR14_Msk (0x1UL << GPIO_BSRR_BR14_Pos)
#define GPIO_BSRR_BR14 GPIO_BSRR_BR14_Msk
#define GPIO_BSRR_BR15_Pos (31U)
#define GPIO_BSRR_BR15_Msk (0x1UL << GPIO_BSRR_BR15_Pos)
#define GPIO_BSRR_BR15 GPIO_BSRR_BR15_Msk
#define GPIO_LCKR_LCK0_Pos (0U)
#define GPIO_LCKR_LCK0_Msk (0x1UL << GPIO_LCKR_LCK0_Pos)
#define GPIO_LCKR_LCK0 GPIO_LCKR_LCK0_Msk
#define GPIO_LCKR_LCK1_Pos (1U)
#define GPIO_LCKR_LCK1_Msk (0x1UL << GPIO_LCKR_LCK1_Pos)
#define GPIO_LCKR_LCK1 GPIO_LCKR_LCK1_Msk
#define GPIO_LCKR_LCK2_Pos (2U)
#define GPIO_LCKR_LCK2_Msk (0x1UL << GPIO_LCKR_LCK2_Pos)
#define GPIO_LCKR_LCK2 GPIO_LCKR_LCK2_Msk
#define GPIO_LCKR_LCK3_Pos (3U)
#define GPIO_LCKR_LCK3_Msk (0x1UL << GPIO_LCKR_LCK3_Pos)
#define GPIO_LCKR_LCK3 GPIO_LCKR_LCK3_Msk
#define GPIO_LCKR_LCK4_Pos (4U)
#define GPIO_LCKR_LCK4_Msk (0x1UL << GPIO_LCKR_LCK4_Pos)
#define GPIO_LCKR_LCK4 GPIO_LCKR_LCK4_Msk
#define GPIO_LCKR_LCK5_Pos (5U)
#define GPIO_LCKR_LCK5_Msk (0x1UL << GPIO_LCKR_LCK5_Pos)
#define GPIO_LCKR_LCK5 GPIO_LCKR_LCK5_Msk
#define GPIO_LCKR_LCK6_Pos (6U)
#define GPIO_LCKR_LCK6_Msk (0x1UL << GPIO_LCKR_LCK6_Pos)
#define GPIO_LCKR_LCK6 GPIO_LCKR_LCK6_Msk
#define GPIO_LCKR_LCK7_Pos (7U)
#define GPIO_LCKR_LCK7_Msk (0x1UL << GPIO_LCKR_LCK7_Pos)
#define GPIO_LCKR_LCK7 GPIO_LCKR_LCK7_Msk
#define GPIO_LCKR_LCK8_Pos (8U)
#define GPIO_LCKR_LCK8_Msk (0x1UL << GPIO_LCKR_LCK8_Pos)
#define GPIO_LCKR_LCK8 GPIO_LCKR_LCK8_Msk
#define GPIO_LCKR_LCK9_Pos (9U)
#define GPIO_LCKR_LCK9_Msk (0x1UL << GPIO_LCKR_LCK9_Pos)
#define GPIO_LCKR_LCK9 GPIO_LCKR_LCK9_Msk
#define GPIO_LCKR_LCK10_Pos (10U)
#define GPIO_LCKR_LCK10_Msk (0x1UL << GPIO_LCKR_LCK10_Pos)
#define GPIO_LCKR_LCK10 GPIO_LCKR_LCK10_Msk
#define GPIO_LCKR_LCK11_Pos (11U)
#define GPIO_LCKR_LCK11_Msk (0x1UL << GPIO_LCKR_LCK11_Pos)
#define GPIO_LCKR_LCK11 GPIO_LCKR_LCK11_Msk
#define GPIO_LCKR_LCK12_Pos (12U)
#define GPIO_LCKR_LCK12_Msk (0x1UL << GPIO_LCKR_LCK12_Pos)
#define GPIO_LCKR_LCK12 GPIO_LCKR_LCK12_Msk
#define GPIO_LCKR_LCK13_Pos (13U)
#define GPIO_LCKR_LCK13_Msk (0x1UL << GPIO_LCKR_LCK13_Pos)
#define GPIO_LCKR_LCK13 GPIO_LCKR_LCK13_Msk
#define GPIO_LCKR_LCK14_Pos (14U)
#define GPIO_LCKR_LCK14_Msk (0x1UL << GPIO_LCKR_LCK14_Pos)
#define GPIO_LCKR_LCK14 GPIO_LCKR_LCK14_Msk
#define GPIO_LCKR_LCK15_Pos (15U)
#define GPIO_LCKR_LCK15_Msk (0x1UL << GPIO_LCKR_LCK15_Pos)
#define GPIO_LCKR_LCK15 GPIO_LCKR_LCK15_Msk
#define GPIO_LCKR_LCKK_Pos (16U)
#define GPIO_LCKR_LCKK_Msk (0x1UL << GPIO_LCKR_LCKK_Pos)
#define GPIO_LCKR_LCKK GPIO_LCKR_LCKK_Msk
#define GPIO_AFRL_AFSEL0_Pos (0U)
#define GPIO_AFRL_AFSEL0_Msk (0xFUL << GPIO_AFRL_AFSEL0_Pos)
#define GPIO_AFRL_AFSEL0 GPIO_AFRL_AFSEL0_Msk
#define GPIO_AFRL_AFSEL0_0 (0x1U << GPIO_AFRL_AFSEL0_Pos)
#define GPIO_AFRL_AFSEL0_1 (0x2U << GPIO_AFRL_AFSEL0_Pos)
#define GPIO_AFRL_AFSEL0_2 (0x4U << GPIO_AFRL_AFSEL0_Pos)
#define GPIO_AFRL_AFSEL0_3 (0x8U << GPIO_AFRL_AFSEL0_Pos)
#define GPIO_AFRL_AFSEL1_Pos (4U)
#define GPIO_AFRL_AFSEL1_Msk (0xFUL << GPIO_AFRL_AFSEL1_Pos)
#define GPIO_AFRL_AFSEL1 GPIO_AFRL_AFSEL1_Msk
#define GPIO_AFRL_AFSEL1_0 (0x1U << GPIO_AFRL_AFSEL1_Pos)
#define GPIO_AFRL_AFSEL1_1 (0x2U << GPIO_AFRL_AFSEL1_Pos)
#define GPIO_AFRL_AFSEL1_2 (0x4U << GPIO_AFRL_AFSEL1_Pos)
#define GPIO_AFRL_AFSEL1_3 (0x8U << GPIO_AFRL_AFSEL1_Pos)
#define GPIO_AFRL_AFSEL2_Pos (8U)
#define GPIO_AFRL_AFSEL2_Msk (0xFUL << GPIO_AFRL_AFSEL2_Pos)
#define GPIO_AFRL_AFSEL2 GPIO_AFRL_AFSEL2_Msk
#define GPIO_AFRL_AFSEL2_0 (0x1U << GPIO_AFRL_AFSEL2_Pos)
#define GPIO_AFRL_AFSEL2_1 (0x2U << GPIO_AFRL_AFSEL2_Pos)
#define GPIO_AFRL_AFSEL2_2 (0x4U << GPIO_AFRL_AFSEL2_Pos)
#define GPIO_AFRL_AFSEL2_3 (0x8U << GPIO_AFRL_AFSEL2_Pos)
#define GPIO_AFRL_AFSEL3_Pos (12U)
#define GPIO_AFRL_AFSEL3_Msk (0xFUL << GPIO_AFRL_AFSEL3_Pos)
#define GPIO_AFRL_AFSEL3 GPIO_AFRL_AFSEL3_Msk
#define GPIO_AFRL_AFSEL3_0 (0x1U << GPIO_AFRL_AFSEL3_Pos)
#define GPIO_AFRL_AFSEL3_1 (0x2U << GPIO_AFRL_AFSEL3_Pos)
#define GPIO_AFRL_AFSEL3_2 (0x4U << GPIO_AFRL_AFSEL3_Pos)
#define GPIO_AFRL_AFSEL3_3 (0x8U << GPIO_AFRL_AFSEL3_Pos)
#define GPIO_AFRL_AFSEL4_Pos (16U)
#define GPIO_AFRL_AFSEL4_Msk (0xFUL << GPIO_AFRL_AFSEL4_Pos)
#define GPIO_AFRL_AFSEL4 GPIO_AFRL_AFSEL4_Msk
#define GPIO_AFRL_AFSEL4_0 (0x1U << GPIO_AFRL_AFSEL4_Pos)
#define GPIO_AFRL_AFSEL4_1 (0x2U << GPIO_AFRL_AFSEL4_Pos)
#define GPIO_AFRL_AFSEL4_2 (0x4U << GPIO_AFRL_AFSEL4_Pos)
#define GPIO_AFRL_AFSEL4_3 (0x8U << GPIO_AFRL_AFSEL4_Pos)
#define GPIO_AFRL_AFSEL5_Pos (20U)
#define GPIO_AFRL_AFSEL5_Msk (0xFUL << GPIO_AFRL_AFSEL5_Pos)
#define GPIO_AFRL_AFSEL5 GPIO_AFRL_AFSEL5_Msk
#define GPIO_AFRL_AFSEL5_0 (0x1U << GPIO_AFRL_AFSEL5_Pos)
#define GPIO_AFRL_AFSEL5_1 (0x2U << GPIO_AFRL_AFSEL5_Pos)
#define GPIO_AFRL_AFSEL5_2 (0x4U << GPIO_AFRL_AFSEL5_Pos)
#define GPIO_AFRL_AFSEL5_3 (0x8U << GPIO_AFRL_AFSEL5_Pos)
#define GPIO_AFRL_AFSEL6_Pos (24U)
#define GPIO_AFRL_AFSEL6_Msk (0xFUL << GPIO_AFRL_AFSEL6_Pos)
#define GPIO_AFRL_AFSEL6 GPIO_AFRL_AFSEL6_Msk
#define GPIO_AFRL_AFSEL6_0 (0x1U << GPIO_AFRL_AFSEL6_Pos)
#define GPIO_AFRL_AFSEL6_1 (0x2U << GPIO_AFRL_AFSEL6_Pos)
#define GPIO_AFRL_AFSEL6_2 (0x4U << GPIO_AFRL_AFSEL6_Pos)
#define GPIO_AFRL_AFSEL6_3 (0x8U << GPIO_AFRL_AFSEL6_Pos)
#define GPIO_AFRL_AFSEL7_Pos (28U)
#define GPIO_AFRL_AFSEL7_Msk (0xFUL << GPIO_AFRL_AFSEL7_Pos)
#define GPIO_AFRL_AFSEL7 GPIO_AFRL_AFSEL7_Msk
#define GPIO_AFRL_AFSEL7_0 (0x1U << GPIO_AFRL_AFSEL7_Pos)
#define GPIO_AFRL_AFSEL7_1 (0x2U << GPIO_AFRL_AFSEL7_Pos)
#define GPIO_AFRL_AFSEL7_2 (0x4U << GPIO_AFRL_AFSEL7_Pos)
#define GPIO_AFRL_AFSEL7_3 (0x8U << GPIO_AFRL_AFSEL7_Pos)
#define GPIO_AFRH_AFSEL8_Pos (0U)
#define GPIO_AFRH_AFSEL8_Msk (0xFUL << GPIO_AFRH_AFSEL8_Pos)
#define GPIO_AFRH_AFSEL8 GPIO_AFRH_AFSEL8_Msk
#define GPIO_AFRH_AFSEL8_0 (0x1U << GPIO_AFRH_AFSEL8_Pos)
#define GPIO_AFRH_AFSEL8_1 (0x2U << GPIO_AFRH_AFSEL8_Pos)
#define GPIO_AFRH_AFSEL8_2 (0x4U << GPIO_AFRH_AFSEL8_Pos)
#define GPIO_AFRH_AFSEL8_3 (0x8U << GPIO_AFRH_AFSEL8_Pos)
#define GPIO_AFRH_AFSEL9_Pos (4U)
#define GPIO_AFRH_AFSEL9_Msk (0xFUL << GPIO_AFRH_AFSEL9_Pos)
#define GPIO_AFRH_AFSEL9 GPIO_AFRH_AFSEL9_Msk
#define GPIO_AFRH_AFSEL9_0 (0x1U << GPIO_AFRH_AFSEL9_Pos)
#define GPIO_AFRH_AFSEL9_1 (0x2U << GPIO_AFRH_AFSEL9_Pos)
#define GPIO_AFRH_AFSEL9_2 (0x4U << GPIO_AFRH_AFSEL9_Pos)
#define GPIO_AFRH_AFSEL9_3 (0x8U << GPIO_AFRH_AFSEL9_Pos)
#define GPIO_AFRH_AFSEL10_Pos (8U)
#define GPIO_AFRH_AFSEL10_Msk (0xFUL << GPIO_AFRH_AFSEL10_Pos)
#define GPIO_AFRH_AFSEL10 GPIO_AFRH_AFSEL10_Msk
#define GPIO_AFRH_AFSEL10_0 (0x1U << GPIO_AFRH_AFSEL10_Pos)
#define GPIO_AFRH_AFSEL10_1 (0x2U << GPIO_AFRH_AFSEL10_Pos)
#define GPIO_AFRH_AFSEL10_2 (0x4U << GPIO_AFRH_AFSEL10_Pos)
#define GPIO_AFRH_AFSEL10_3 (0x8U << GPIO_AFRH_AFSEL10_Pos)
#define GPIO_AFRH_AFSEL11_Pos (12U)
#define GPIO_AFRH_AFSEL11_Msk (0xFUL << GPIO_AFRH_AFSEL11_Pos)
#define GPIO_AFRH_AFSEL11 GPIO_AFRH_AFSEL11_Msk
#define GPIO_AFRH_AFSEL11_0 (0x1U << GPIO_AFRH_AFSEL11_Pos)
#define GPIO_AFRH_AFSEL11_1 (0x2U << GPIO_AFRH_AFSEL11_Pos)
#define GPIO_AFRH_AFSEL11_2 (0x4U << GPIO_AFRH_AFSEL11_Pos)
#define GPIO_AFRH_AFSEL11_3 (0x8U << GPIO_AFRH_AFSEL11_Pos)
#define GPIO_AFRH_AFSEL12_Pos (16U)
#define GPIO_AFRH_AFSEL12_Msk (0xFUL << GPIO_AFRH_AFSEL12_Pos)
#define GPIO_AFRH_AFSEL12 GPIO_AFRH_AFSEL12_Msk
#define GPIO_AFRH_AFSEL12_0 (0x1U << GPIO_AFRH_AFSEL12_Pos)
#define GPIO_AFRH_AFSEL12_1 (0x2U << GPIO_AFRH_AFSEL12_Pos)
#define GPIO_AFRH_AFSEL12_2 (0x4U << GPIO_AFRH_AFSEL12_Pos)
#define GPIO_AFRH_AFSEL12_3 (0x8U << GPIO_AFRH_AFSEL12_Pos)
#define GPIO_AFRH_AFSEL13_Pos (20U)
#define GPIO_AFRH_AFSEL13_Msk (0xFUL << GPIO_AFRH_AFSEL13_Pos)
#define GPIO_AFRH_AFSEL13 GPIO_AFRH_AFSEL13_Msk
#define GPIO_AFRH_AFSEL13_0 (0x1U << GPIO_AFRH_AFSEL13_Pos)
#define GPIO_AFRH_AFSEL13_1 (0x2U << GPIO_AFRH_AFSEL13_Pos)
#define GPIO_AFRH_AFSEL13_2 (0x4U << GPIO_AFRH_AFSEL13_Pos)
#define GPIO_AFRH_AFSEL13_3 (0x8U << GPIO_AFRH_AFSEL13_Pos)
#define GPIO_AFRH_AFSEL14_Pos (24U)
#define GPIO_AFRH_AFSEL14_Msk (0xFUL << GPIO_AFRH_AFSEL14_Pos)
#define GPIO_AFRH_AFSEL14 GPIO_AFRH_AFSEL14_Msk
#define GPIO_AFRH_AFSEL14_0 (0x1U << GPIO_AFRH_AFSEL14_Pos)
#define GPIO_AFRH_AFSEL14_1 (0x2U << GPIO_AFRH_AFSEL14_Pos)
#define GPIO_AFRH_AFSEL14_2 (0x4U << GPIO_AFRH_AFSEL14_Pos)
#define GPIO_AFRH_AFSEL14_3 (0x8U << GPIO_AFRH_AFSEL14_Pos)
#define GPIO_AFRH_AFSEL15_Pos (28U)
#define GPIO_AFRH_AFSEL15_Msk (0xFUL << GPIO_AFRH_AFSEL15_Pos)
#define GPIO_AFRH_AFSEL15 GPIO_AFRH_AFSEL15_Msk
#define GPIO_AFRH_AFSEL15_0 (0x1U << GPIO_AFRH_AFSEL15_Pos)
#define GPIO_AFRH_AFSEL15_1 (0x2U << GPIO_AFRH_AFSEL15_Pos)
#define GPIO_AFRH_AFSEL15_2 (0x4U << GPIO_AFRH_AFSEL15_Pos)
#define GPIO_AFRH_AFSEL15_3 (0x8U << GPIO_AFRH_AFSEL15_Pos)
#define GPIO_BRR_BR0_Pos (0U)
#define GPIO_BRR_BR0_Msk (0x1UL << GPIO_BRR_BR0_Pos)
#define GPIO_BRR_BR0 GPIO_BRR_BR0_Msk
#define GPIO_BRR_BR1_Pos (1U)
#define GPIO_BRR_BR1_Msk (0x1UL << GPIO_BRR_BR1_Pos)
#define GPIO_BRR_BR1 GPIO_BRR_BR1_Msk
#define GPIO_BRR_BR2_Pos (2U)
#define GPIO_BRR_BR2_Msk (0x1UL << GPIO_BRR_BR2_Pos)
#define GPIO_BRR_BR2 GPIO_BRR_BR2_Msk
#define GPIO_BRR_BR3_Pos (3U)
#define GPIO_BRR_BR3_Msk (0x1UL << GPIO_BRR_BR3_Pos)
#define GPIO_BRR_BR3 GPIO_BRR_BR3_Msk
#define GPIO_BRR_BR4_Pos (4U)
#define GPIO_BRR_BR4_Msk (0x1UL << GPIO_BRR_BR4_Pos)
#define GPIO_BRR_BR4 GPIO_BRR_BR4_Msk
#define GPIO_BRR_BR5_Pos (5U)
#define GPIO_BRR_BR5_Msk (0x1UL << GPIO_BRR_BR5_Pos)
#define GPIO_BRR_BR5 GPIO_BRR_BR5_Msk
#define GPIO_BRR_BR6_Pos (6U)
#define GPIO_BRR_BR6_Msk (0x1UL << GPIO_BRR_BR6_Pos)
#define GPIO_BRR_BR6 GPIO_BRR_BR6_Msk
#define GPIO_BRR_BR7_Pos (7U)
#define GPIO_BRR_BR7_Msk (0x1UL << GPIO_BRR_BR7_Pos)
#define GPIO_BRR_BR7 GPIO_BRR_BR7_Msk
#define GPIO_BRR_BR8_Pos (8U)
#define GPIO_BRR_BR8_Msk (0x1UL << GPIO_BRR_BR8_Pos)
#define GPIO_BRR_BR8 GPIO_BRR_BR8_Msk
#define GPIO_BRR_BR9_Pos (9U)
#define GPIO_BRR_BR9_Msk (0x1UL << GPIO_BRR_BR9_Pos)
#define GPIO_BRR_BR9 GPIO_BRR_BR9_Msk
#define GPIO_BRR_BR10_Pos (10U)
#define GPIO_BRR_BR10_Msk (0x1UL << GPIO_BRR_BR10_Pos)
#define GPIO_BRR_BR10 GPIO_BRR_BR10_Msk
#define GPIO_BRR_BR11_Pos (11U)
#define GPIO_BRR_BR11_Msk (0x1UL << GPIO_BRR_BR11_Pos)
#define GPIO_BRR_BR11 GPIO_BRR_BR11_Msk
#define GPIO_BRR_BR12_Pos (12U)
#define GPIO_BRR_BR12_Msk (0x1UL << GPIO_BRR_BR12_Pos)
#define GPIO_BRR_BR12 GPIO_BRR_BR12_Msk
#define GPIO_BRR_BR13_Pos (13U)
#define GPIO_BRR_BR13_Msk (0x1UL << GPIO_BRR_BR13_Pos)
#define GPIO_BRR_BR13 GPIO_BRR_BR13_Msk
#define GPIO_BRR_BR14_Pos (14U)
#define GPIO_BRR_BR14_Msk (0x1UL << GPIO_BRR_BR14_Pos)
#define GPIO_BRR_BR14 GPIO_BRR_BR14_Msk
#define GPIO_BRR_BR15_Pos (15U)
#define GPIO_BRR_BR15_Msk (0x1UL << GPIO_BRR_BR15_Pos)
#define GPIO_BRR_BR15 GPIO_BRR_BR15_Msk
#define HSEM_R_PROCID_Pos (0U)
#define HSEM_R_PROCID_Msk (0xFFUL << HSEM_R_PROCID_Pos)
#define HSEM_R_PROCID HSEM_R_PROCID_Msk
#define HSEM_R_COREID_Pos (8U)
#define HSEM_R_COREID_Msk (0xFUL << HSEM_R_COREID_Pos)
#define HSEM_R_COREID HSEM_R_COREID_Msk
#define HSEM_R_LOCK_Pos (31U)
#define HSEM_R_LOCK_Msk (0x1UL << HSEM_R_LOCK_Pos)
#define HSEM_R_LOCK HSEM_R_LOCK_Msk
#define HSEM_RLR_PROCID_Pos (0U)
#define HSEM_RLR_PROCID_Msk (0xFFUL << HSEM_RLR_PROCID_Pos)
#define HSEM_RLR_PROCID HSEM_RLR_PROCID_Msk
#define HSEM_RLR_COREID_Pos (8U)
#define HSEM_RLR_COREID_Msk (0xFUL << HSEM_RLR_COREID_Pos)
#define HSEM_RLR_COREID HSEM_RLR_COREID_Msk
#define HSEM_RLR_LOCK_Pos (31U)
#define HSEM_RLR_LOCK_Msk (0x1UL << HSEM_RLR_LOCK_Pos)
#define HSEM_RLR_LOCK HSEM_RLR_LOCK_Msk
#define HSEM_C1IER_ISE0_Pos (0U)
#define HSEM_C1IER_ISE0_Msk (0x1UL << HSEM_C1IER_ISE0_Pos)
#define HSEM_C1IER_ISE0 HSEM_C1IER_ISE0_Msk
#define HSEM_C1IER_ISE1_Pos (1U)
#define HSEM_C1IER_ISE1_Msk (0x1UL << HSEM_C1IER_ISE1_Pos)
#define HSEM_C1IER_ISE1 HSEM_C1IER_ISE1_Msk
#define HSEM_C1IER_ISE2_Pos (2U)
#define HSEM_C1IER_ISE2_Msk (0x1UL << HSEM_C1IER_ISE2_Pos)
#define HSEM_C1IER_ISE2 HSEM_C1IER_ISE2_Msk
#define HSEM_C1IER_ISE3_Pos (3U)
#define HSEM_C1IER_ISE3_Msk (0x1UL << HSEM_C1IER_ISE3_Pos)
#define HSEM_C1IER_ISE3 HSEM_C1IER_ISE3_Msk
#define HSEM_C1IER_ISE4_Pos (4U)
#define HSEM_C1IER_ISE4_Msk (0x1UL << HSEM_C1IER_ISE4_Pos)
#define HSEM_C1IER_ISE4 HSEM_C1IER_ISE4_Msk
#define HSEM_C1IER_ISE5_Pos (5U)
#define HSEM_C1IER_ISE5_Msk (0x1UL << HSEM_C1IER_ISE5_Pos)
#define HSEM_C1IER_ISE5 HSEM_C1IER_ISE5_Msk
#define HSEM_C1IER_ISE6_Pos (6U)
#define HSEM_C1IER_ISE6_Msk (0x1UL << HSEM_C1IER_ISE6_Pos)
#define HSEM_C1IER_ISE6 HSEM_C1IER_ISE6_Msk
#define HSEM_C1IER_ISE7_Pos (7U)
#define HSEM_C1IER_ISE7_Msk (0x1UL << HSEM_C1IER_ISE7_Pos)
#define HSEM_C1IER_ISE7 HSEM_C1IER_ISE7_Msk
#define HSEM_C1IER_ISE8_Pos (8U)
#define HSEM_C1IER_ISE8_Msk (0x1UL << HSEM_C1IER_ISE8_Pos)
#define HSEM_C1IER_ISE8 HSEM_C1IER_ISE8_Msk
#define HSEM_C1IER_ISE9_Pos (9U)
#define HSEM_C1IER_ISE9_Msk (0x1UL << HSEM_C1IER_ISE9_Pos)
#define HSEM_C1IER_ISE9 HSEM_C1IER_ISE9_Msk
#define HSEM_C1IER_ISE10_Pos (10U)
#define HSEM_C1IER_ISE10_Msk (0x1UL << HSEM_C1IER_ISE10_Pos)
#define HSEM_C1IER_ISE10 HSEM_C1IER_ISE10_Msk
#define HSEM_C1IER_ISE11_Pos (11U)
#define HSEM_C1IER_ISE11_Msk (0x1UL << HSEM_C1IER_ISE11_Pos)
#define HSEM_C1IER_ISE11 HSEM_C1IER_ISE11_Msk
#define HSEM_C1IER_ISE12_Pos (12U)
#define HSEM_C1IER_ISE12_Msk (0x1UL << HSEM_C1IER_ISE12_Pos)
#define HSEM_C1IER_ISE12 HSEM_C1IER_ISE12_Msk
#define HSEM_C1IER_ISE13_Pos (13U)
#define HSEM_C1IER_ISE13_Msk (0x1UL << HSEM_C1IER_ISE13_Pos)
#define HSEM_C1IER_ISE13 HSEM_C1IER_ISE13_Msk
#define HSEM_C1IER_ISE14_Pos (14U)
#define HSEM_C1IER_ISE14_Msk (0x1UL << HSEM_C1IER_ISE14_Pos)
#define HSEM_C1IER_ISE14 HSEM_C1IER_ISE14_Msk
#define HSEM_C1IER_ISE15_Pos (15U)
#define HSEM_C1IER_ISE15_Msk (0x1UL << HSEM_C1IER_ISE15_Pos)
#define HSEM_C1IER_ISE15 HSEM_C1IER_ISE15_Msk
#define HSEM_C1IER_ISE16_Pos (16U)
#define HSEM_C1IER_ISE16_Msk (0x1UL << HSEM_C1IER_ISE16_Pos)
#define HSEM_C1IER_ISE16 HSEM_C1IER_ISE16_Msk
#define HSEM_C1IER_ISE17_Pos (17U)
#define HSEM_C1IER_ISE17_Msk (0x1UL << HSEM_C1IER_ISE17_Pos)
#define HSEM_C1IER_ISE17 HSEM_C1IER_ISE17_Msk
#define HSEM_C1IER_ISE18_Pos (18U)
#define HSEM_C1IER_ISE18_Msk (0x1UL << HSEM_C1IER_ISE18_Pos)
#define HSEM_C1IER_ISE18 HSEM_C1IER_ISE18_Msk
#define HSEM_C1IER_ISE19_Pos (19U)
#define HSEM_C1IER_ISE19_Msk (0x1UL << HSEM_C1IER_ISE19_Pos)
#define HSEM_C1IER_ISE19 HSEM_C1IER_ISE19_Msk
#define HSEM_C1IER_ISE20_Pos (20U)
#define HSEM_C1IER_ISE20_Msk (0x1UL << HSEM_C1IER_ISE20_Pos)
#define HSEM_C1IER_ISE20 HSEM_C1IER_ISE20_Msk
#define HSEM_C1IER_ISE21_Pos (21U)
#define HSEM_C1IER_ISE21_Msk (0x1UL << HSEM_C1IER_ISE21_Pos)
#define HSEM_C1IER_ISE21 HSEM_C1IER_ISE21_Msk
#define HSEM_C1IER_ISE22_Pos (22U)
#define HSEM_C1IER_ISE22_Msk (0x1UL << HSEM_C1IER_ISE22_Pos)
#define HSEM_C1IER_ISE22 HSEM_C1IER_ISE22_Msk
#define HSEM_C1IER_ISE23_Pos (23U)
#define HSEM_C1IER_ISE23_Msk (0x1UL << HSEM_C1IER_ISE23_Pos)
#define HSEM_C1IER_ISE23 HSEM_C1IER_ISE23_Msk
#define HSEM_C1IER_ISE24_Pos (24U)
#define HSEM_C1IER_ISE24_Msk (0x1UL << HSEM_C1IER_ISE24_Pos)
#define HSEM_C1IER_ISE24 HSEM_C1IER_ISE24_Msk
#define HSEM_C1IER_ISE25_Pos (25U)
#define HSEM_C1IER_ISE25_Msk (0x1UL << HSEM_C1IER_ISE25_Pos)
#define HSEM_C1IER_ISE25 HSEM_C1IER_ISE25_Msk
#define HSEM_C1IER_ISE26_Pos (26U)
#define HSEM_C1IER_ISE26_Msk (0x1UL << HSEM_C1IER_ISE26_Pos)
#define HSEM_C1IER_ISE26 HSEM_C1IER_ISE26_Msk
#define HSEM_C1IER_ISE27_Pos (27U)
#define HSEM_C1IER_ISE27_Msk (0x1UL << HSEM_C1IER_ISE27_Pos)
#define HSEM_C1IER_ISE27 HSEM_C1IER_ISE27_Msk
#define HSEM_C1IER_ISE28_Pos (28U)
#define HSEM_C1IER_ISE28_Msk (0x1UL << HSEM_C1IER_ISE28_Pos)
#define HSEM_C1IER_ISE28 HSEM_C1IER_ISE28_Msk
#define HSEM_C1IER_ISE29_Pos (29U)
#define HSEM_C1IER_ISE29_Msk (0x1UL << HSEM_C1IER_ISE29_Pos)
#define HSEM_C1IER_ISE29 HSEM_C1IER_ISE29_Msk
#define HSEM_C1IER_ISE30_Pos (30U)
#define HSEM_C1IER_ISE30_Msk (0x1UL << HSEM_C1IER_ISE30_Pos)
#define HSEM_C1IER_ISE30 HSEM_C1IER_ISE30_Msk
#define HSEM_C1IER_ISE31_Pos (31U)
#define HSEM_C1IER_ISE31_Msk (0x1UL << HSEM_C1IER_ISE31_Pos)
#define HSEM_C1IER_ISE31 HSEM_C1IER_ISE31_Msk
#define HSEM_C1ICR_ISC0_Pos (0U)
#define HSEM_C1ICR_ISC0_Msk (0x1UL << HSEM_C1ICR_ISC0_Pos)
#define HSEM_C1ICR_ISC0 HSEM_C1ICR_ISC0_Msk
#define HSEM_C1ICR_ISC1_Pos (1U)
#define HSEM_C1ICR_ISC1_Msk (0x1UL << HSEM_C1ICR_ISC1_Pos)
#define HSEM_C1ICR_ISC1 HSEM_C1ICR_ISC1_Msk
#define HSEM_C1ICR_ISC2_Pos (2U)
#define HSEM_C1ICR_ISC2_Msk (0x1UL << HSEM_C1ICR_ISC2_Pos)
#define HSEM_C1ICR_ISC2 HSEM_C1ICR_ISC2_Msk
#define HSEM_C1ICR_ISC3_Pos (3U)
#define HSEM_C1ICR_ISC3_Msk (0x1UL << HSEM_C1ICR_ISC3_Pos)
#define HSEM_C1ICR_ISC3 HSEM_C1ICR_ISC3_Msk
#define HSEM_C1ICR_ISC4_Pos (4U)
#define HSEM_C1ICR_ISC4_Msk (0x1UL << HSEM_C1ICR_ISC4_Pos)
#define HSEM_C1ICR_ISC4 HSEM_C1ICR_ISC4_Msk
#define HSEM_C1ICR_ISC5_Pos (5U)
#define HSEM_C1ICR_ISC5_Msk (0x1UL << HSEM_C1ICR_ISC5_Pos)
#define HSEM_C1ICR_ISC5 HSEM_C1ICR_ISC5_Msk
#define HSEM_C1ICR_ISC6_Pos (6U)
#define HSEM_C1ICR_ISC6_Msk (0x1UL << HSEM_C1ICR_ISC6_Pos)
#define HSEM_C1ICR_ISC6 HSEM_C1ICR_ISC6_Msk
#define HSEM_C1ICR_ISC7_Pos (7U)
#define HSEM_C1ICR_ISC7_Msk (0x1UL << HSEM_C1ICR_ISC7_Pos)
#define HSEM_C1ICR_ISC7 HSEM_C1ICR_ISC7_Msk
#define HSEM_C1ICR_ISC8_Pos (8U)
#define HSEM_C1ICR_ISC8_Msk (0x1UL << HSEM_C1ICR_ISC8_Pos)
#define HSEM_C1ICR_ISC8 HSEM_C1ICR_ISC8_Msk
#define HSEM_C1ICR_ISC9_Pos (9U)
#define HSEM_C1ICR_ISC9_Msk (0x1UL << HSEM_C1ICR_ISC9_Pos)
#define HSEM_C1ICR_ISC9 HSEM_C1ICR_ISC9_Msk
#define HSEM_C1ICR_ISC10_Pos (10U)
#define HSEM_C1ICR_ISC10_Msk (0x1UL << HSEM_C1ICR_ISC10_Pos)
#define HSEM_C1ICR_ISC10 HSEM_C1ICR_ISC10_Msk
#define HSEM_C1ICR_ISC11_Pos (11U)
#define HSEM_C1ICR_ISC11_Msk (0x1UL << HSEM_C1ICR_ISC11_Pos)
#define HSEM_C1ICR_ISC11 HSEM_C1ICR_ISC11_Msk
#define HSEM_C1ICR_ISC12_Pos (12U)
#define HSEM_C1ICR_ISC12_Msk (0x1UL << HSEM_C1ICR_ISC12_Pos)
#define HSEM_C1ICR_ISC12 HSEM_C1ICR_ISC12_Msk
#define HSEM_C1ICR_ISC13_Pos (13U)
#define HSEM_C1ICR_ISC13_Msk (0x1UL << HSEM_C1ICR_ISC13_Pos)
#define HSEM_C1ICR_ISC13 HSEM_C1ICR_ISC13_Msk
#define HSEM_C1ICR_ISC14_Pos (14U)
#define HSEM_C1ICR_ISC14_Msk (0x1UL << HSEM_C1ICR_ISC14_Pos)
#define HSEM_C1ICR_ISC14 HSEM_C1ICR_ISC14_Msk
#define HSEM_C1ICR_ISC15_Pos (15U)
#define HSEM_C1ICR_ISC15_Msk (0x1UL << HSEM_C1ICR_ISC15_Pos)
#define HSEM_C1ICR_ISC15 HSEM_C1ICR_ISC15_Msk
#define HSEM_C1ICR_ISC16_Pos (16U)
#define HSEM_C1ICR_ISC16_Msk (0x1UL << HSEM_C1ICR_ISC16_Pos)
#define HSEM_C1ICR_ISC16 HSEM_C1ICR_ISC16_Msk
#define HSEM_C1ICR_ISC17_Pos (17U)
#define HSEM_C1ICR_ISC17_Msk (0x1UL << HSEM_C1ICR_ISC17_Pos)
#define HSEM_C1ICR_ISC17 HSEM_C1ICR_ISC17_Msk
#define HSEM_C1ICR_ISC18_Pos (18U)
#define HSEM_C1ICR_ISC18_Msk (0x1UL << HSEM_C1ICR_ISC18_Pos)
#define HSEM_C1ICR_ISC18 HSEM_C1ICR_ISC18_Msk
#define HSEM_C1ICR_ISC19_Pos (19U)
#define HSEM_C1ICR_ISC19_Msk (0x1UL << HSEM_C1ICR_ISC19_Pos)
#define HSEM_C1ICR_ISC19 HSEM_C1ICR_ISC19_Msk
#define HSEM_C1ICR_ISC20_Pos (20U)
#define HSEM_C1ICR_ISC20_Msk (0x1UL << HSEM_C1ICR_ISC20_Pos)
#define HSEM_C1ICR_ISC20 HSEM_C1ICR_ISC20_Msk
#define HSEM_C1ICR_ISC21_Pos (21U)
#define HSEM_C1ICR_ISC21_Msk (0x1UL << HSEM_C1ICR_ISC21_Pos)
#define HSEM_C1ICR_ISC21 HSEM_C1ICR_ISC21_Msk
#define HSEM_C1ICR_ISC22_Pos (22U)
#define HSEM_C1ICR_ISC22_Msk (0x1UL << HSEM_C1ICR_ISC22_Pos)
#define HSEM_C1ICR_ISC22 HSEM_C1ICR_ISC22_Msk
#define HSEM_C1ICR_ISC23_Pos (23U)
#define HSEM_C1ICR_ISC23_Msk (0x1UL << HSEM_C1ICR_ISC23_Pos)
#define HSEM_C1ICR_ISC23 HSEM_C1ICR_ISC23_Msk
#define HSEM_C1ICR_ISC24_Pos (24U)
#define HSEM_C1ICR_ISC24_Msk (0x1UL << HSEM_C1ICR_ISC24_Pos)
#define HSEM_C1ICR_ISC24 HSEM_C1ICR_ISC24_Msk
#define HSEM_C1ICR_ISC25_Pos (25U)
#define HSEM_C1ICR_ISC25_Msk (0x1UL << HSEM_C1ICR_ISC25_Pos)
#define HSEM_C1ICR_ISC25 HSEM_C1ICR_ISC25_Msk
#define HSEM_C1ICR_ISC26_Pos (26U)
#define HSEM_C1ICR_ISC26_Msk (0x1UL << HSEM_C1ICR_ISC26_Pos)
#define HSEM_C1ICR_ISC26 HSEM_C1ICR_ISC26_Msk
#define HSEM_C1ICR_ISC27_Pos (27U)
#define HSEM_C1ICR_ISC27_Msk (0x1UL << HSEM_C1ICR_ISC27_Pos)
#define HSEM_C1ICR_ISC27 HSEM_C1ICR_ISC27_Msk
#define HSEM_C1ICR_ISC28_Pos (28U)
#define HSEM_C1ICR_ISC28_Msk (0x1UL << HSEM_C1ICR_ISC28_Pos)
#define HSEM_C1ICR_ISC28 HSEM_C1ICR_ISC28_Msk
#define HSEM_C1ICR_ISC29_Pos (29U)
#define HSEM_C1ICR_ISC29_Msk (0x1UL << HSEM_C1ICR_ISC29_Pos)
#define HSEM_C1ICR_ISC29 HSEM_C1ICR_ISC29_Msk
#define HSEM_C1ICR_ISC30_Pos (30U)
#define HSEM_C1ICR_ISC30_Msk (0x1UL << HSEM_C1ICR_ISC30_Pos)
#define HSEM_C1ICR_ISC30 HSEM_C1ICR_ISC30_Msk
#define HSEM_C1ICR_ISC31_Pos (31U)
#define HSEM_C1ICR_ISC31_Msk (0x1UL << HSEM_C1ICR_ISC31_Pos)
#define HSEM_C1ICR_ISC31 HSEM_C1ICR_ISC31_Msk
#define HSEM_C1ISR_ISF0_Pos (0U)
#define HSEM_C1ISR_ISF0_Msk (0x1UL << HSEM_C1ISR_ISF0_Pos)
#define HSEM_C1ISR_ISF0 HSEM_C1ISR_ISF0_Msk
#define HSEM_C1ISR_ISF1_Pos (1U)
#define HSEM_C1ISR_ISF1_Msk (0x1UL << HSEM_C1ISR_ISF1_Pos)
#define HSEM_C1ISR_ISF1 HSEM_C1ISR_ISF1_Msk
#define HSEM_C1ISR_ISF2_Pos (2U)
#define HSEM_C1ISR_ISF2_Msk (0x1UL << HSEM_C1ISR_ISF2_Pos)
#define HSEM_C1ISR_ISF2 HSEM_C1ISR_ISF2_Msk
#define HSEM_C1ISR_ISF3_Pos (3U)
#define HSEM_C1ISR_ISF3_Msk (0x1UL << HSEM_C1ISR_ISF3_Pos)
#define HSEM_C1ISR_ISF3 HSEM_C1ISR_ISF3_Msk
#define HSEM_C1ISR_ISF4_Pos (4U)
#define HSEM_C1ISR_ISF4_Msk (0x1UL << HSEM_C1ISR_ISF4_Pos)
#define HSEM_C1ISR_ISF4 HSEM_C1ISR_ISF4_Msk
#define HSEM_C1ISR_ISF5_Pos (5U)
#define HSEM_C1ISR_ISF5_Msk (0x1UL << HSEM_C1ISR_ISF5_Pos)
#define HSEM_C1ISR_ISF5 HSEM_C1ISR_ISF5_Msk
#define HSEM_C1ISR_ISF6_Pos (6U)
#define HSEM_C1ISR_ISF6_Msk (0x1UL << HSEM_C1ISR_ISF6_Pos)
#define HSEM_C1ISR_ISF6 HSEM_C1ISR_ISF6_Msk
#define HSEM_C1ISR_ISF7_Pos (7U)
#define HSEM_C1ISR_ISF7_Msk (0x1UL << HSEM_C1ISR_ISF7_Pos)
#define HSEM_C1ISR_ISF7 HSEM_C1ISR_ISF7_Msk
#define HSEM_C1ISR_ISF8_Pos (8U)
#define HSEM_C1ISR_ISF8_Msk (0x1UL << HSEM_C1ISR_ISF8_Pos)
#define HSEM_C1ISR_ISF8 HSEM_C1ISR_ISF8_Msk
#define HSEM_C1ISR_ISF9_Pos (9U)
#define HSEM_C1ISR_ISF9_Msk (0x1UL << HSEM_C1ISR_ISF9_Pos)
#define HSEM_C1ISR_ISF9 HSEM_C1ISR_ISF9_Msk
#define HSEM_C1ISR_ISF10_Pos (10U)
#define HSEM_C1ISR_ISF10_Msk (0x1UL << HSEM_C1ISR_ISF10_Pos)
#define HSEM_C1ISR_ISF10 HSEM_C1ISR_ISF10_Msk
#define HSEM_C1ISR_ISF11_Pos (11U)
#define HSEM_C1ISR_ISF11_Msk (0x1UL << HSEM_C1ISR_ISF11_Pos)
#define HSEM_C1ISR_ISF11 HSEM_C1ISR_ISF11_Msk
#define HSEM_C1ISR_ISF12_Pos (12U)
#define HSEM_C1ISR_ISF12_Msk (0x1UL << HSEM_C1ISR_ISF12_Pos)
#define HSEM_C1ISR_ISF12 HSEM_C1ISR_ISF12_Msk
#define HSEM_C1ISR_ISF13_Pos (13U)
#define HSEM_C1ISR_ISF13_Msk (0x1UL << HSEM_C1ISR_ISF13_Pos)
#define HSEM_C1ISR_ISF13 HSEM_C1ISR_ISF13_Msk
#define HSEM_C1ISR_ISF14_Pos (14U)
#define HSEM_C1ISR_ISF14_Msk (0x1UL << HSEM_C1ISR_ISF14_Pos)
#define HSEM_C1ISR_ISF14 HSEM_C1ISR_ISF14_Msk
#define HSEM_C1ISR_ISF15_Pos (15U)
#define HSEM_C1ISR_ISF15_Msk (0x1UL << HSEM_C1ISR_ISF15_Pos)
#define HSEM_C1ISR_ISF15 HSEM_C1ISR_ISF15_Msk
#define HSEM_C1ISR_ISF16_Pos (16U)
#define HSEM_C1ISR_ISF16_Msk (0x1UL << HSEM_C1ISR_ISF16_Pos)
#define HSEM_C1ISR_ISF16 HSEM_C1ISR_ISF16_Msk
#define HSEM_C1ISR_ISF17_Pos (17U)
#define HSEM_C1ISR_ISF17_Msk (0x1UL << HSEM_C1ISR_ISF17_Pos)
#define HSEM_C1ISR_ISF17 HSEM_C1ISR_ISF17_Msk
#define HSEM_C1ISR_ISF18_Pos (18U)
#define HSEM_C1ISR_ISF18_Msk (0x1UL << HSEM_C1ISR_ISF18_Pos)
#define HSEM_C1ISR_ISF18 HSEM_C1ISR_ISF18_Msk
#define HSEM_C1ISR_ISF19_Pos (19U)
#define HSEM_C1ISR_ISF19_Msk (0x1UL << HSEM_C1ISR_ISF19_Pos)
#define HSEM_C1ISR_ISF19 HSEM_C1ISR_ISF19_Msk
#define HSEM_C1ISR_ISF20_Pos (20U)
#define HSEM_C1ISR_ISF20_Msk (0x1UL << HSEM_C1ISR_ISF20_Pos)
#define HSEM_C1ISR_ISF20 HSEM_C1ISR_ISF20_Msk
#define HSEM_C1ISR_ISF21_Pos (21U)
#define HSEM_C1ISR_ISF21_Msk (0x1UL << HSEM_C1ISR_ISF21_Pos)
#define HSEM_C1ISR_ISF21 HSEM_C1ISR_ISF21_Msk
#define HSEM_C1ISR_ISF22_Pos (22U)
#define HSEM_C1ISR_ISF22_Msk (0x1UL << HSEM_C1ISR_ISF22_Pos)
#define HSEM_C1ISR_ISF22 HSEM_C1ISR_ISF22_Msk
#define HSEM_C1ISR_ISF23_Pos (23U)
#define HSEM_C1ISR_ISF23_Msk (0x1UL << HSEM_C1ISR_ISF23_Pos)
#define HSEM_C1ISR_ISF23 HSEM_C1ISR_ISF23_Msk
#define HSEM_C1ISR_ISF24_Pos (24U)
#define HSEM_C1ISR_ISF24_Msk (0x1UL << HSEM_C1ISR_ISF24_Pos)
#define HSEM_C1ISR_ISF24 HSEM_C1ISR_ISF24_Msk
#define HSEM_C1ISR_ISF25_Pos (25U)
#define HSEM_C1ISR_ISF25_Msk (0x1UL << HSEM_C1ISR_ISF25_Pos)
#define HSEM_C1ISR_ISF25 HSEM_C1ISR_ISF25_Msk
#define HSEM_C1ISR_ISF26_Pos (26U)
#define HSEM_C1ISR_ISF26_Msk (0x1UL << HSEM_C1ISR_ISF26_Pos)
#define HSEM_C1ISR_ISF26 HSEM_C1ISR_ISF26_Msk
#define HSEM_C1ISR_ISF27_Pos (27U)
#define HSEM_C1ISR_ISF27_Msk (0x1UL << HSEM_C1ISR_ISF27_Pos)
#define HSEM_C1ISR_ISF27 HSEM_C1ISR_ISF27_Msk
#define HSEM_C1ISR_ISF28_Pos (28U)
#define HSEM_C1ISR_ISF28_Msk (0x1UL << HSEM_C1ISR_ISF28_Pos)
#define HSEM_C1ISR_ISF28 HSEM_C1ISR_ISF28_Msk
#define HSEM_C1ISR_ISF29_Pos (29U)
#define HSEM_C1ISR_ISF29_Msk (0x1UL << HSEM_C1ISR_ISF29_Pos)
#define HSEM_C1ISR_ISF29 HSEM_C1ISR_ISF29_Msk
#define HSEM_C1ISR_ISF30_Pos (30U)
#define HSEM_C1ISR_ISF30_Msk (0x1UL << HSEM_C1ISR_ISF30_Pos)
#define HSEM_C1ISR_ISF30 HSEM_C1ISR_ISF30_Msk
#define HSEM_C1ISR_ISF31_Pos (31U)
#define HSEM_C1ISR_ISF31_Msk (0x1UL << HSEM_C1ISR_ISF31_Pos)
#define HSEM_C1ISR_ISF31 HSEM_C1ISR_ISF31_Msk
#define HSEM_C1MISR_MISF0_Pos (0U)
#define HSEM_C1MISR_MISF0_Msk (0x1UL << HSEM_C1MISR_MISF0_Pos)
#define HSEM_C1MISR_MISF0 HSEM_C1MISR_MISF0_Msk
#define HSEM_C1MISR_MISF1_Pos (1U)
#define HSEM_C1MISR_MISF1_Msk (0x1UL << HSEM_C1MISR_MISF1_Pos)
#define HSEM_C1MISR_MISF1 HSEM_C1MISR_MISF1_Msk
#define HSEM_C1MISR_MISF2_Pos (2U)
#define HSEM_C1MISR_MISF2_Msk (0x1UL << HSEM_C1MISR_MISF2_Pos)
#define HSEM_C1MISR_MISF2 HSEM_C1MISR_MISF2_Msk
#define HSEM_C1MISR_MISF3_Pos (3U)
#define HSEM_C1MISR_MISF3_Msk (0x1UL << HSEM_C1MISR_MISF3_Pos)
#define HSEM_C1MISR_MISF3 HSEM_C1MISR_MISF3_Msk
#define HSEM_C1MISR_MISF4_Pos (4U)
#define HSEM_C1MISR_MISF4_Msk (0x1UL << HSEM_C1MISR_MISF4_Pos)
#define HSEM_C1MISR_MISF4 HSEM_C1MISR_MISF4_Msk
#define HSEM_C1MISR_MISF5_Pos (5U)
#define HSEM_C1MISR_MISF5_Msk (0x1UL << HSEM_C1MISR_MISF5_Pos)
#define HSEM_C1MISR_MISF5 HSEM_C1MISR_MISF5_Msk
#define HSEM_C1MISR_MISF6_Pos (6U)
#define HSEM_C1MISR_MISF6_Msk (0x1UL << HSEM_C1MISR_MISF6_Pos)
#define HSEM_C1MISR_MISF6 HSEM_C1MISR_MISF6_Msk
#define HSEM_C1MISR_MISF7_Pos (7U)
#define HSEM_C1MISR_MISF7_Msk (0x1UL << HSEM_C1MISR_MISF7_Pos)
#define HSEM_C1MISR_MISF7 HSEM_C1MISR_MISF7_Msk
#define HSEM_C1MISR_MISF8_Pos (8U)
#define HSEM_C1MISR_MISF8_Msk (0x1UL << HSEM_C1MISR_MISF8_Pos)
#define HSEM_C1MISR_MISF8 HSEM_C1MISR_MISF8_Msk
#define HSEM_C1MISR_MISF9_Pos (9U)
#define HSEM_C1MISR_MISF9_Msk (0x1UL << HSEM_C1MISR_MISF9_Pos)
#define HSEM_C1MISR_MISF9 HSEM_C1MISR_MISF9_Msk
#define HSEM_C1MISR_MISF10_Pos (10U)
#define HSEM_C1MISR_MISF10_Msk (0x1UL << HSEM_C1MISR_MISF10_Pos)
#define HSEM_C1MISR_MISF10 HSEM_C1MISR_MISF10_Msk
#define HSEM_C1MISR_MISF11_Pos (11U)
#define HSEM_C1MISR_MISF11_Msk (0x1UL << HSEM_C1MISR_MISF11_Pos)
#define HSEM_C1MISR_MISF11 HSEM_C1MISR_MISF11_Msk
#define HSEM_C1MISR_MISF12_Pos (12U)
#define HSEM_C1MISR_MISF12_Msk (0x1UL << HSEM_C1MISR_MISF12_Pos)
#define HSEM_C1MISR_MISF12 HSEM_C1MISR_MISF12_Msk
#define HSEM_C1MISR_MISF13_Pos (13U)
#define HSEM_C1MISR_MISF13_Msk (0x1UL << HSEM_C1MISR_MISF13_Pos)
#define HSEM_C1MISR_MISF13 HSEM_C1MISR_MISF13_Msk
#define HSEM_C1MISR_MISF14_Pos (14U)
#define HSEM_C1MISR_MISF14_Msk (0x1UL << HSEM_C1MISR_MISF14_Pos)
#define HSEM_C1MISR_MISF14 HSEM_C1MISR_MISF14_Msk
#define HSEM_C1MISR_MISF15_Pos (15U)
#define HSEM_C1MISR_MISF15_Msk (0x1UL << HSEM_C1MISR_MISF15_Pos)
#define HSEM_C1MISR_MISF15 HSEM_C1MISR_MISF15_Msk
#define HSEM_C1MISR_MISF16_Pos (16U)
#define HSEM_C1MISR_MISF16_Msk (0x1UL << HSEM_C1MISR_MISF16_Pos)
#define HSEM_C1MISR_MISF16 HSEM_C1MISR_MISF16_Msk
#define HSEM_C1MISR_MISF17_Pos (17U)
#define HSEM_C1MISR_MISF17_Msk (0x1UL << HSEM_C1MISR_MISF17_Pos)
#define HSEM_C1MISR_MISF17 HSEM_C1MISR_MISF17_Msk
#define HSEM_C1MISR_MISF18_Pos (18U)
#define HSEM_C1MISR_MISF18_Msk (0x1UL << HSEM_C1MISR_MISF18_Pos)
#define HSEM_C1MISR_MISF18 HSEM_C1MISR_MISF18_Msk
#define HSEM_C1MISR_MISF19_Pos (19U)
#define HSEM_C1MISR_MISF19_Msk (0x1UL << HSEM_C1MISR_MISF19_Pos)
#define HSEM_C1MISR_MISF19 HSEM_C1MISR_MISF19_Msk
#define HSEM_C1MISR_MISF20_Pos (20U)
#define HSEM_C1MISR_MISF20_Msk (0x1UL << HSEM_C1MISR_MISF20_Pos)
#define HSEM_C1MISR_MISF20 HSEM_C1MISR_MISF20_Msk
#define HSEM_C1MISR_MISF21_Pos (21U)
#define HSEM_C1MISR_MISF21_Msk (0x1UL << HSEM_C1MISR_MISF21_Pos)
#define HSEM_C1MISR_MISF21 HSEM_C1MISR_MISF21_Msk
#define HSEM_C1MISR_MISF22_Pos (22U)
#define HSEM_C1MISR_MISF22_Msk (0x1UL << HSEM_C1MISR_MISF22_Pos)
#define HSEM_C1MISR_MISF22 HSEM_C1MISR_MISF22_Msk
#define HSEM_C1MISR_MISF23_Pos (23U)
#define HSEM_C1MISR_MISF23_Msk (0x1UL << HSEM_C1MISR_MISF23_Pos)
#define HSEM_C1MISR_MISF23 HSEM_C1MISR_MISF23_Msk
#define HSEM_C1MISR_MISF24_Pos (24U)
#define HSEM_C1MISR_MISF24_Msk (0x1UL << HSEM_C1MISR_MISF24_Pos)
#define HSEM_C1MISR_MISF24 HSEM_C1MISR_MISF24_Msk
#define HSEM_C1MISR_MISF25_Pos (25U)
#define HSEM_C1MISR_MISF25_Msk (0x1UL << HSEM_C1MISR_MISF25_Pos)
#define HSEM_C1MISR_MISF25 HSEM_C1MISR_MISF25_Msk
#define HSEM_C1MISR_MISF26_Pos (26U)
#define HSEM_C1MISR_MISF26_Msk (0x1UL << HSEM_C1MISR_MISF26_Pos)
#define HSEM_C1MISR_MISF26 HSEM_C1MISR_MISF26_Msk
#define HSEM_C1MISR_MISF27_Pos (27U)
#define HSEM_C1MISR_MISF27_Msk (0x1UL << HSEM_C1MISR_MISF27_Pos)
#define HSEM_C1MISR_MISF27 HSEM_C1MISR_MISF27_Msk
#define HSEM_C1MISR_MISF28_Pos (28U)
#define HSEM_C1MISR_MISF28_Msk (0x1UL << HSEM_C1MISR_MISF28_Pos)
#define HSEM_C1MISR_MISF28 HSEM_C1MISR_MISF28_Msk
#define HSEM_C1MISR_MISF29_Pos (29U)
#define HSEM_C1MISR_MISF29_Msk (0x1UL << HSEM_C1MISR_MISF29_Pos)
#define HSEM_C1MISR_MISF29 HSEM_C1MISR_MISF29_Msk
#define HSEM_C1MISR_MISF30_Pos (30U)
#define HSEM_C1MISR_MISF30_Msk (0x1UL << HSEM_C1MISR_MISF30_Pos)
#define HSEM_C1MISR_MISF30 HSEM_C1MISR_MISF30_Msk
#define HSEM_C1MISR_MISF31_Pos (31U)
#define HSEM_C1MISR_MISF31_Msk (0x1UL << HSEM_C1MISR_MISF31_Pos)
#define HSEM_C1MISR_MISF31 HSEM_C1MISR_MISF31_Msk
#define HSEM_C2IER_ISE0_Pos (0U)
#define HSEM_C2IER_ISE0_Msk (0x1UL << HSEM_C2IER_ISE0_Pos)
#define HSEM_C2IER_ISE0 HSEM_C2IER_ISE0_Msk
#define HSEM_C2IER_ISE1_Pos (1U)
#define HSEM_C2IER_ISE1_Msk (0x1UL << HSEM_C2IER_ISE1_Pos)
#define HSEM_C2IER_ISE1 HSEM_C2IER_ISE1_Msk
#define HSEM_C2IER_ISE2_Pos (2U)
#define HSEM_C2IER_ISE2_Msk (0x1UL << HSEM_C2IER_ISE2_Pos)
#define HSEM_C2IER_ISE2 HSEM_C2IER_ISE2_Msk
#define HSEM_C2IER_ISE3_Pos (3U)
#define HSEM_C2IER_ISE3_Msk (0x1UL << HSEM_C2IER_ISE3_Pos)
#define HSEM_C2IER_ISE3 HSEM_C2IER_ISE3_Msk
#define HSEM_C2IER_ISE4_Pos (4U)
#define HSEM_C2IER_ISE4_Msk (0x1UL << HSEM_C2IER_ISE4_Pos)
#define HSEM_C2IER_ISE4 HSEM_C2IER_ISE4_Msk
#define HSEM_C2IER_ISE5_Pos (5U)
#define HSEM_C2IER_ISE5_Msk (0x1UL << HSEM_C2IER_ISE5_Pos)
#define HSEM_C2IER_ISE5 HSEM_C2IER_ISE5_Msk
#define HSEM_C2IER_ISE6_Pos (6U)
#define HSEM_C2IER_ISE6_Msk (0x1UL << HSEM_C2IER_ISE6_Pos)
#define HSEM_C2IER_ISE6 HSEM_C2IER_ISE6_Msk
#define HSEM_C2IER_ISE7_Pos (7U)
#define HSEM_C2IER_ISE7_Msk (0x1UL << HSEM_C2IER_ISE7_Pos)
#define HSEM_C2IER_ISE7 HSEM_C2IER_ISE7_Msk
#define HSEM_C2IER_ISE8_Pos (8U)
#define HSEM_C2IER_ISE8_Msk (0x1UL << HSEM_C2IER_ISE8_Pos)
#define HSEM_C2IER_ISE8 HSEM_C2IER_ISE8_Msk
#define HSEM_C2IER_ISE9_Pos (9U)
#define HSEM_C2IER_ISE9_Msk (0x1UL << HSEM_C2IER_ISE9_Pos)
#define HSEM_C2IER_ISE9 HSEM_C2IER_ISE9_Msk
#define HSEM_C2IER_ISE10_Pos (10U)
#define HSEM_C2IER_ISE10_Msk (0x1UL << HSEM_C2IER_ISE10_Pos)
#define HSEM_C2IER_ISE10 HSEM_C2IER_ISE10_Msk
#define HSEM_C2IER_ISE11_Pos (11U)
#define HSEM_C2IER_ISE11_Msk (0x1UL << HSEM_C2IER_ISE11_Pos)
#define HSEM_C2IER_ISE11 HSEM_C2IER_ISE11_Msk
#define HSEM_C2IER_ISE12_Pos (12U)
#define HSEM_C2IER_ISE12_Msk (0x1UL << HSEM_C2IER_ISE12_Pos)
#define HSEM_C2IER_ISE12 HSEM_C2IER_ISE12_Msk
#define HSEM_C2IER_ISE13_Pos (13U)
#define HSEM_C2IER_ISE13_Msk (0x1UL << HSEM_C2IER_ISE13_Pos)
#define HSEM_C2IER_ISE13 HSEM_C2IER_ISE13_Msk
#define HSEM_C2IER_ISE14_Pos (14U)
#define HSEM_C2IER_ISE14_Msk (0x1UL << HSEM_C2IER_ISE14_Pos)
#define HSEM_C2IER_ISE14 HSEM_C2IER_ISE14_Msk
#define HSEM_C2IER_ISE15_Pos (15U)
#define HSEM_C2IER_ISE15_Msk (0x1UL << HSEM_C2IER_ISE15_Pos)
#define HSEM_C2IER_ISE15 HSEM_C2IER_ISE15_Msk
#define HSEM_C2IER_ISE16_Pos (16U)
#define HSEM_C2IER_ISE16_Msk (0x1UL << HSEM_C2IER_ISE16_Pos)
#define HSEM_C2IER_ISE16 HSEM_C2IER_ISE16_Msk
#define HSEM_C2IER_ISE17_Pos (17U)
#define HSEM_C2IER_ISE17_Msk (0x1UL << HSEM_C2IER_ISE17_Pos)
#define HSEM_C2IER_ISE17 HSEM_C2IER_ISE17_Msk
#define HSEM_C2IER_ISE18_Pos (18U)
#define HSEM_C2IER_ISE18_Msk (0x1UL << HSEM_C2IER_ISE18_Pos)
#define HSEM_C2IER_ISE18 HSEM_C2IER_ISE18_Msk
#define HSEM_C2IER_ISE19_Pos (19U)
#define HSEM_C2IER_ISE19_Msk (0x1UL << HSEM_C2IER_ISE19_Pos)
#define HSEM_C2IER_ISE19 HSEM_C2IER_ISE19_Msk
#define HSEM_C2IER_ISE20_Pos (20U)
#define HSEM_C2IER_ISE20_Msk (0x1UL << HSEM_C2IER_ISE20_Pos)
#define HSEM_C2IER_ISE20 HSEM_C2IER_ISE20_Msk
#define HSEM_C2IER_ISE21_Pos (21U)
#define HSEM_C2IER_ISE21_Msk (0x1UL << HSEM_C2IER_ISE21_Pos)
#define HSEM_C2IER_ISE21 HSEM_C2IER_ISE21_Msk
#define HSEM_C2IER_ISE22_Pos (22U)
#define HSEM_C2IER_ISE22_Msk (0x1UL << HSEM_C2IER_ISE22_Pos)
#define HSEM_C2IER_ISE22 HSEM_C2IER_ISE22_Msk
#define HSEM_C2IER_ISE23_Pos (23U)
#define HSEM_C2IER_ISE23_Msk (0x1UL << HSEM_C2IER_ISE23_Pos)
#define HSEM_C2IER_ISE23 HSEM_C2IER_ISE23_Msk
#define HSEM_C2IER_ISE24_Pos (24U)
#define HSEM_C2IER_ISE24_Msk (0x1UL << HSEM_C2IER_ISE24_Pos)
#define HSEM_C2IER_ISE24 HSEM_C2IER_ISE24_Msk
#define HSEM_C2IER_ISE25_Pos (25U)
#define HSEM_C2IER_ISE25_Msk (0x1UL << HSEM_C2IER_ISE25_Pos)
#define HSEM_C2IER_ISE25 HSEM_C2IER_ISE25_Msk
#define HSEM_C2IER_ISE26_Pos (26U)
#define HSEM_C2IER_ISE26_Msk (0x1UL << HSEM_C2IER_ISE26_Pos)
#define HSEM_C2IER_ISE26 HSEM_C2IER_ISE26_Msk
#define HSEM_C2IER_ISE27_Pos (27U)
#define HSEM_C2IER_ISE27_Msk (0x1UL << HSEM_C2IER_ISE27_Pos)
#define HSEM_C2IER_ISE27 HSEM_C2IER_ISE27_Msk
#define HSEM_C2IER_ISE28_Pos (28U)
#define HSEM_C2IER_ISE28_Msk (0x1UL << HSEM_C2IER_ISE28_Pos)
#define HSEM_C2IER_ISE28 HSEM_C2IER_ISE28_Msk
#define HSEM_C2IER_ISE29_Pos (29U)
#define HSEM_C2IER_ISE29_Msk (0x1UL << HSEM_C2IER_ISE29_Pos)
#define HSEM_C2IER_ISE29 HSEM_C2IER_ISE29_Msk
#define HSEM_C2IER_ISE30_Pos (30U)
#define HSEM_C2IER_ISE30_Msk (0x1UL << HSEM_C2IER_ISE30_Pos)
#define HSEM_C2IER_ISE30 HSEM_C2IER_ISE30_Msk
#define HSEM_C2IER_ISE31_Pos (31U)
#define HSEM_C2IER_ISE31_Msk (0x1UL << HSEM_C2IER_ISE31_Pos)
#define HSEM_C2IER_ISE31 HSEM_C2IER_ISE31_Msk
#define HSEM_C2ICR_ISC0_Pos (0U)
#define HSEM_C2ICR_ISC0_Msk (0x1UL << HSEM_C2ICR_ISC0_Pos)
#define HSEM_C2ICR_ISC0 HSEM_C2ICR_ISC0_Msk
#define HSEM_C2ICR_ISC1_Pos (1U)
#define HSEM_C2ICR_ISC1_Msk (0x1UL << HSEM_C2ICR_ISC1_Pos)
#define HSEM_C2ICR_ISC1 HSEM_C2ICR_ISC1_Msk
#define HSEM_C2ICR_ISC2_Pos (2U)
#define HSEM_C2ICR_ISC2_Msk (0x1UL << HSEM_C2ICR_ISC2_Pos)
#define HSEM_C2ICR_ISC2 HSEM_C2ICR_ISC2_Msk
#define HSEM_C2ICR_ISC3_Pos (3U)
#define HSEM_C2ICR_ISC3_Msk (0x1UL << HSEM_C2ICR_ISC3_Pos)
#define HSEM_C2ICR_ISC3 HSEM_C2ICR_ISC3_Msk
#define HSEM_C2ICR_ISC4_Pos (4U)
#define HSEM_C2ICR_ISC4_Msk (0x1UL << HSEM_C2ICR_ISC4_Pos)
#define HSEM_C2ICR_ISC4 HSEM_C2ICR_ISC4_Msk
#define HSEM_C2ICR_ISC5_Pos (5U)
#define HSEM_C2ICR_ISC5_Msk (0x1UL << HSEM_C2ICR_ISC5_Pos)
#define HSEM_C2ICR_ISC5 HSEM_C2ICR_ISC5_Msk
#define HSEM_C2ICR_ISC6_Pos (6U)
#define HSEM_C2ICR_ISC6_Msk (0x1UL << HSEM_C2ICR_ISC6_Pos)
#define HSEM_C2ICR_ISC6 HSEM_C2ICR_ISC6_Msk
#define HSEM_C2ICR_ISC7_Pos (7U)
#define HSEM_C2ICR_ISC7_Msk (0x1UL << HSEM_C2ICR_ISC7_Pos)
#define HSEM_C2ICR_ISC7 HSEM_C2ICR_ISC7_Msk
#define HSEM_C2ICR_ISC8_Pos (8U)
#define HSEM_C2ICR_ISC8_Msk (0x1UL << HSEM_C2ICR_ISC8_Pos)
#define HSEM_C2ICR_ISC8 HSEM_C2ICR_ISC8_Msk
#define HSEM_C2ICR_ISC9_Pos (9U)
#define HSEM_C2ICR_ISC9_Msk (0x1UL << HSEM_C2ICR_ISC9_Pos)
#define HSEM_C2ICR_ISC9 HSEM_C2ICR_ISC9_Msk
#define HSEM_C2ICR_ISC10_Pos (10U)
#define HSEM_C2ICR_ISC10_Msk (0x1UL << HSEM_C2ICR_ISC10_Pos)
#define HSEM_C2ICR_ISC10 HSEM_C2ICR_ISC10_Msk
#define HSEM_C2ICR_ISC11_Pos (11U)
#define HSEM_C2ICR_ISC11_Msk (0x1UL << HSEM_C2ICR_ISC11_Pos)
#define HSEM_C2ICR_ISC11 HSEM_C2ICR_ISC11_Msk
#define HSEM_C2ICR_ISC12_Pos (12U)
#define HSEM_C2ICR_ISC12_Msk (0x1UL << HSEM_C2ICR_ISC12_Pos)
#define HSEM_C2ICR_ISC12 HSEM_C2ICR_ISC12_Msk
#define HSEM_C2ICR_ISC13_Pos (13U)
#define HSEM_C2ICR_ISC13_Msk (0x1UL << HSEM_C2ICR_ISC13_Pos)
#define HSEM_C2ICR_ISC13 HSEM_C2ICR_ISC13_Msk
#define HSEM_C2ICR_ISC14_Pos (14U)
#define HSEM_C2ICR_ISC14_Msk (0x1UL << HSEM_C2ICR_ISC14_Pos)
#define HSEM_C2ICR_ISC14 HSEM_C2ICR_ISC14_Msk
#define HSEM_C2ICR_ISC15_Pos (15U)
#define HSEM_C2ICR_ISC15_Msk (0x1UL << HSEM_C2ICR_ISC15_Pos)
#define HSEM_C2ICR_ISC15 HSEM_C2ICR_ISC15_Msk
#define HSEM_C2ICR_ISC16_Pos (16U)
#define HSEM_C2ICR_ISC16_Msk (0x1UL << HSEM_C2ICR_ISC16_Pos)
#define HSEM_C2ICR_ISC16 HSEM_C2ICR_ISC16_Msk
#define HSEM_C2ICR_ISC17_Pos (17U)
#define HSEM_C2ICR_ISC17_Msk (0x1UL << HSEM_C2ICR_ISC17_Pos)
#define HSEM_C2ICR_ISC17 HSEM_C2ICR_ISC17_Msk
#define HSEM_C2ICR_ISC18_Pos (18U)
#define HSEM_C2ICR_ISC18_Msk (0x1UL << HSEM_C2ICR_ISC18_Pos)
#define HSEM_C2ICR_ISC18 HSEM_C2ICR_ISC18_Msk
#define HSEM_C2ICR_ISC19_Pos (19U)
#define HSEM_C2ICR_ISC19_Msk (0x1UL << HSEM_C2ICR_ISC19_Pos)
#define HSEM_C2ICR_ISC19 HSEM_C2ICR_ISC19_Msk
#define HSEM_C2ICR_ISC20_Pos (20U)
#define HSEM_C2ICR_ISC20_Msk (0x1UL << HSEM_C2ICR_ISC20_Pos)
#define HSEM_C2ICR_ISC20 HSEM_C2ICR_ISC20_Msk
#define HSEM_C2ICR_ISC21_Pos (21U)
#define HSEM_C2ICR_ISC21_Msk (0x1UL << HSEM_C2ICR_ISC21_Pos)
#define HSEM_C2ICR_ISC21 HSEM_C2ICR_ISC21_Msk
#define HSEM_C2ICR_ISC22_Pos (22U)
#define HSEM_C2ICR_ISC22_Msk (0x1UL << HSEM_C2ICR_ISC22_Pos)
#define HSEM_C2ICR_ISC22 HSEM_C2ICR_ISC22_Msk
#define HSEM_C2ICR_ISC23_Pos (23U)
#define HSEM_C2ICR_ISC23_Msk (0x1UL << HSEM_C2ICR_ISC23_Pos)
#define HSEM_C2ICR_ISC23 HSEM_C2ICR_ISC23_Msk
#define HSEM_C2ICR_ISC24_Pos (24U)
#define HSEM_C2ICR_ISC24_Msk (0x1UL << HSEM_C2ICR_ISC24_Pos)
#define HSEM_C2ICR_ISC24 HSEM_C2ICR_ISC24_Msk
#define HSEM_C2ICR_ISC25_Pos (25U)
#define HSEM_C2ICR_ISC25_Msk (0x1UL << HSEM_C2ICR_ISC25_Pos)
#define HSEM_C2ICR_ISC25 HSEM_C2ICR_ISC25_Msk
#define HSEM_C2ICR_ISC26_Pos (26U)
#define HSEM_C2ICR_ISC26_Msk (0x1UL << HSEM_C2ICR_ISC26_Pos)
#define HSEM_C2ICR_ISC26 HSEM_C2ICR_ISC26_Msk
#define HSEM_C2ICR_ISC27_Pos (27U)
#define HSEM_C2ICR_ISC27_Msk (0x1UL << HSEM_C2ICR_ISC27_Pos)
#define HSEM_C2ICR_ISC27 HSEM_C2ICR_ISC27_Msk
#define HSEM_C2ICR_ISC28_Pos (28U)
#define HSEM_C2ICR_ISC28_Msk (0x1UL << HSEM_C2ICR_ISC28_Pos)
#define HSEM_C2ICR_ISC28 HSEM_C2ICR_ISC28_Msk
#define HSEM_C2ICR_ISC29_Pos (29U)
#define HSEM_C2ICR_ISC29_Msk (0x1UL << HSEM_C2ICR_ISC29_Pos)
#define HSEM_C2ICR_ISC29 HSEM_C2ICR_ISC29_Msk
#define HSEM_C2ICR_ISC30_Pos (30U)
#define HSEM_C2ICR_ISC30_Msk (0x1UL << HSEM_C2ICR_ISC30_Pos)
#define HSEM_C2ICR_ISC30 HSEM_C2ICR_ISC30_Msk
#define HSEM_C2ICR_ISC31_Pos (31U)
#define HSEM_C2ICR_ISC31_Msk (0x1UL << HSEM_C2ICR_ISC31_Pos)
#define HSEM_C2ICR_ISC31 HSEM_C2ICR_ISC31_Msk
#define HSEM_C2ISR_ISF0_Pos (0U)
#define HSEM_C2ISR_ISF0_Msk (0x1UL << HSEM_C2ISR_ISF0_Pos)
#define HSEM_C2ISR_ISF0 HSEM_C2ISR_ISF0_Msk
#define HSEM_C2ISR_ISF1_Pos (1U)
#define HSEM_C2ISR_ISF1_Msk (0x1UL << HSEM_C2ISR_ISF1_Pos)
#define HSEM_C2ISR_ISF1 HSEM_C2ISR_ISF1_Msk
#define HSEM_C2ISR_ISF2_Pos (2U)
#define HSEM_C2ISR_ISF2_Msk (0x1UL << HSEM_C2ISR_ISF2_Pos)
#define HSEM_C2ISR_ISF2 HSEM_C2ISR_ISF2_Msk
#define HSEM_C2ISR_ISF3_Pos (3U)
#define HSEM_C2ISR_ISF3_Msk (0x1UL << HSEM_C2ISR_ISF3_Pos)
#define HSEM_C2ISR_ISF3 HSEM_C2ISR_ISF3_Msk
#define HSEM_C2ISR_ISF4_Pos (4U)
#define HSEM_C2ISR_ISF4_Msk (0x1UL << HSEM_C2ISR_ISF4_Pos)
#define HSEM_C2ISR_ISF4 HSEM_C2ISR_ISF4_Msk
#define HSEM_C2ISR_ISF5_Pos (5U)
#define HSEM_C2ISR_ISF5_Msk (0x1UL << HSEM_C2ISR_ISF5_Pos)
#define HSEM_C2ISR_ISF5 HSEM_C2ISR_ISF5_Msk
#define HSEM_C2ISR_ISF6_Pos (6U)
#define HSEM_C2ISR_ISF6_Msk (0x1UL << HSEM_C2ISR_ISF6_Pos)
#define HSEM_C2ISR_ISF6 HSEM_C2ISR_ISF6_Msk
#define HSEM_C2ISR_ISF7_Pos (7U)
#define HSEM_C2ISR_ISF7_Msk (0x1UL << HSEM_C2ISR_ISF7_Pos)
#define HSEM_C2ISR_ISF7 HSEM_C2ISR_ISF7_Msk
#define HSEM_C2ISR_ISF8_Pos (8U)
#define HSEM_C2ISR_ISF8_Msk (0x1UL << HSEM_C2ISR_ISF8_Pos)
#define HSEM_C2ISR_ISF8 HSEM_C2ISR_ISF8_Msk
#define HSEM_C2ISR_ISF9_Pos (9U)
#define HSEM_C2ISR_ISF9_Msk (0x1UL << HSEM_C2ISR_ISF9_Pos)
#define HSEM_C2ISR_ISF9 HSEM_C2ISR_ISF9_Msk
#define HSEM_C2ISR_ISF10_Pos (10U)
#define HSEM_C2ISR_ISF10_Msk (0x1UL << HSEM_C2ISR_ISF10_Pos)
#define HSEM_C2ISR_ISF10 HSEM_C2ISR_ISF10_Msk
#define HSEM_C2ISR_ISF11_Pos (11U)
#define HSEM_C2ISR_ISF11_Msk (0x1UL << HSEM_C2ISR_ISF11_Pos)
#define HSEM_C2ISR_ISF11 HSEM_C2ISR_ISF11_Msk
#define HSEM_C2ISR_ISF12_Pos (12U)
#define HSEM_C2ISR_ISF12_Msk (0x1UL << HSEM_C2ISR_ISF12_Pos)
#define HSEM_C2ISR_ISF12 HSEM_C2ISR_ISF12_Msk
#define HSEM_C2ISR_ISF13_Pos (13U)
#define HSEM_C2ISR_ISF13_Msk (0x1UL << HSEM_C2ISR_ISF13_Pos)
#define HSEM_C2ISR_ISF13 HSEM_C2ISR_ISF13_Msk
#define HSEM_C2ISR_ISF14_Pos (14U)
#define HSEM_C2ISR_ISF14_Msk (0x1UL << HSEM_C2ISR_ISF14_Pos)
#define HSEM_C2ISR_ISF14 HSEM_C2ISR_ISF14_Msk
#define HSEM_C2ISR_ISF15_Pos (15U)
#define HSEM_C2ISR_ISF15_Msk (0x1UL << HSEM_C2ISR_ISF15_Pos)
#define HSEM_C2ISR_ISF15 HSEM_C2ISR_ISF15_Msk
#define HSEM_C2ISR_ISF16_Pos (16U)
#define HSEM_C2ISR_ISF16_Msk (0x1UL << HSEM_C2ISR_ISF16_Pos)
#define HSEM_C2ISR_ISF16 HSEM_C2ISR_ISF16_Msk
#define HSEM_C2ISR_ISF17_Pos (17U)
#define HSEM_C2ISR_ISF17_Msk (0x1UL << HSEM_C2ISR_ISF17_Pos)
#define HSEM_C2ISR_ISF17 HSEM_C2ISR_ISF17_Msk
#define HSEM_C2ISR_ISF18_Pos (18U)
#define HSEM_C2ISR_ISF18_Msk (0x1UL << HSEM_C2ISR_ISF18_Pos)
#define HSEM_C2ISR_ISF18 HSEM_C2ISR_ISF18_Msk
#define HSEM_C2ISR_ISF19_Pos (19U)
#define HSEM_C2ISR_ISF19_Msk (0x1UL << HSEM_C2ISR_ISF19_Pos)
#define HSEM_C2ISR_ISF19 HSEM_C2ISR_ISF19_Msk
#define HSEM_C2ISR_ISF20_Pos (20U)
#define HSEM_C2ISR_ISF20_Msk (0x1UL << HSEM_C2ISR_ISF20_Pos)
#define HSEM_C2ISR_ISF20 HSEM_C2ISR_ISF20_Msk
#define HSEM_C2ISR_ISF21_Pos (21U)
#define HSEM_C2ISR_ISF21_Msk (0x1UL << HSEM_C2ISR_ISF21_Pos)
#define HSEM_C2ISR_ISF21 HSEM_C2ISR_ISF21_Msk
#define HSEM_C2ISR_ISF22_Pos (22U)
#define HSEM_C2ISR_ISF22_Msk (0x1UL << HSEM_C2ISR_ISF22_Pos)
#define HSEM_C2ISR_ISF22 HSEM_C2ISR_ISF22_Msk
#define HSEM_C2ISR_ISF23_Pos (23U)
#define HSEM_C2ISR_ISF23_Msk (0x1UL << HSEM_C2ISR_ISF23_Pos)
#define HSEM_C2ISR_ISF23 HSEM_C2ISR_ISF23_Msk
#define HSEM_C2ISR_ISF24_Pos (24U)
#define HSEM_C2ISR_ISF24_Msk (0x1UL << HSEM_C2ISR_ISF24_Pos)
#define HSEM_C2ISR_ISF24 HSEM_C2ISR_ISF24_Msk
#define HSEM_C2ISR_ISF25_Pos (25U)
#define HSEM_C2ISR_ISF25_Msk (0x1UL << HSEM_C2ISR_ISF25_Pos)
#define HSEM_C2ISR_ISF25 HSEM_C2ISR_ISF25_Msk
#define HSEM_C2ISR_ISF26_Pos (26U)
#define HSEM_C2ISR_ISF26_Msk (0x1UL << HSEM_C2ISR_ISF26_Pos)
#define HSEM_C2ISR_ISF26 HSEM_C2ISR_ISF26_Msk
#define HSEM_C2ISR_ISF27_Pos (27U)
#define HSEM_C2ISR_ISF27_Msk (0x1UL << HSEM_C2ISR_ISF27_Pos)
#define HSEM_C2ISR_ISF27 HSEM_C2ISR_ISF27_Msk
#define HSEM_C2ISR_ISF28_Pos (28U)
#define HSEM_C2ISR_ISF28_Msk (0x1UL << HSEM_C2ISR_ISF28_Pos)
#define HSEM_C2ISR_ISF28 HSEM_C2ISR_ISF28_Msk
#define HSEM_C2ISR_ISF29_Pos (29U)
#define HSEM_C2ISR_ISF29_Msk (0x1UL << HSEM_C2ISR_ISF29_Pos)
#define HSEM_C2ISR_ISF29 HSEM_C2ISR_ISF29_Msk
#define HSEM_C2ISR_ISF30_Pos (30U)
#define HSEM_C2ISR_ISF30_Msk (0x1UL << HSEM_C2ISR_ISF30_Pos)
#define HSEM_C2ISR_ISF30 HSEM_C2ISR_ISF30_Msk
#define HSEM_C2ISR_ISF31_Pos (31U)
#define HSEM_C2ISR_ISF31_Msk (0x1UL << HSEM_C2ISR_ISF31_Pos)
#define HSEM_C2ISR_ISF31 HSEM_C2ISR_ISF31_Msk
#define HSEM_C2MISR_MISF0_Pos (0U)
#define HSEM_C2MISR_MISF0_Msk (0x1UL << HSEM_C2MISR_MISF0_Pos)
#define HSEM_C2MISR_MISF0 HSEM_C2MISR_MISF0_Msk
#define HSEM_C2MISR_MISF1_Pos (1U)
#define HSEM_C2MISR_MISF1_Msk (0x1UL << HSEM_C2MISR_MISF1_Pos)
#define HSEM_C2MISR_MISF1 HSEM_C2MISR_MISF1_Msk
#define HSEM_C2MISR_MISF2_Pos (2U)
#define HSEM_C2MISR_MISF2_Msk (0x1UL << HSEM_C2MISR_MISF2_Pos)
#define HSEM_C2MISR_MISF2 HSEM_C2MISR_MISF2_Msk
#define HSEM_C2MISR_MISF3_Pos (3U)
#define HSEM_C2MISR_MISF3_Msk (0x1UL << HSEM_C2MISR_MISF3_Pos)
#define HSEM_C2MISR_MISF3 HSEM_C2MISR_MISF3_Msk
#define HSEM_C2MISR_MISF4_Pos (4U)
#define HSEM_C2MISR_MISF4_Msk (0x1UL << HSEM_C2MISR_MISF4_Pos)
#define HSEM_C2MISR_MISF4 HSEM_C2MISR_MISF4_Msk
#define HSEM_C2MISR_MISF5_Pos (5U)
#define HSEM_C2MISR_MISF5_Msk (0x1UL << HSEM_C2MISR_MISF5_Pos)
#define HSEM_C2MISR_MISF5 HSEM_C2MISR_MISF5_Msk
#define HSEM_C2MISR_MISF6_Pos (6U)
#define HSEM_C2MISR_MISF6_Msk (0x1UL << HSEM_C2MISR_MISF6_Pos)
#define HSEM_C2MISR_MISF6 HSEM_C2MISR_MISF6_Msk
#define HSEM_C2MISR_MISF7_Pos (7U)
#define HSEM_C2MISR_MISF7_Msk (0x1UL << HSEM_C2MISR_MISF7_Pos)
#define HSEM_C2MISR_MISF7 HSEM_C2MISR_MISF7_Msk
#define HSEM_C2MISR_MISF8_Pos (8U)
#define HSEM_C2MISR_MISF8_Msk (0x1UL << HSEM_C2MISR_MISF8_Pos)
#define HSEM_C2MISR_MISF8 HSEM_C2MISR_MISF8_Msk
#define HSEM_C2MISR_MISF9_Pos (9U)
#define HSEM_C2MISR_MISF9_Msk (0x1UL << HSEM_C2MISR_MISF9_Pos)
#define HSEM_C2MISR_MISF9 HSEM_C2MISR_MISF9_Msk
#define HSEM_C2MISR_MISF10_Pos (10U)
#define HSEM_C2MISR_MISF10_Msk (0x1UL << HSEM_C2MISR_MISF10_Pos)
#define HSEM_C2MISR_MISF10 HSEM_C2MISR_MISF10_Msk
#define HSEM_C2MISR_MISF11_Pos (11U)
#define HSEM_C2MISR_MISF11_Msk (0x1UL << HSEM_C2MISR_MISF11_Pos)
#define HSEM_C2MISR_MISF11 HSEM_C2MISR_MISF11_Msk
#define HSEM_C2MISR_MISF12_Pos (12U)
#define HSEM_C2MISR_MISF12_Msk (0x1UL << HSEM_C2MISR_MISF12_Pos)
#define HSEM_C2MISR_MISF12 HSEM_C2MISR_MISF12_Msk
#define HSEM_C2MISR_MISF13_Pos (13U)
#define HSEM_C2MISR_MISF13_Msk (0x1UL << HSEM_C2MISR_MISF13_Pos)
#define HSEM_C2MISR_MISF13 HSEM_C2MISR_MISF13_Msk
#define HSEM_C2MISR_MISF14_Pos (14U)
#define HSEM_C2MISR_MISF14_Msk (0x1UL << HSEM_C2MISR_MISF14_Pos)
#define HSEM_C2MISR_MISF14 HSEM_C2MISR_MISF14_Msk
#define HSEM_C2MISR_MISF15_Pos (15U)
#define HSEM_C2MISR_MISF15_Msk (0x1UL << HSEM_C2MISR_MISF15_Pos)
#define HSEM_C2MISR_MISF15 HSEM_C2MISR_MISF15_Msk
#define HSEM_C2MISR_MISF16_Pos (16U)
#define HSEM_C2MISR_MISF16_Msk (0x1UL << HSEM_C2MISR_MISF16_Pos)
#define HSEM_C2MISR_MISF16 HSEM_C2MISR_MISF16_Msk
#define HSEM_C2MISR_MISF17_Pos (17U)
#define HSEM_C2MISR_MISF17_Msk (0x1UL << HSEM_C2MISR_MISF17_Pos)
#define HSEM_C2MISR_MISF17 HSEM_C2MISR_MISF17_Msk
#define HSEM_C2MISR_MISF18_Pos (18U)
#define HSEM_C2MISR_MISF18_Msk (0x1UL << HSEM_C2MISR_MISF18_Pos)
#define HSEM_C2MISR_MISF18 HSEM_C2MISR_MISF18_Msk
#define HSEM_C2MISR_MISF19_Pos (19U)
#define HSEM_C2MISR_MISF19_Msk (0x1UL << HSEM_C2MISR_MISF19_Pos)
#define HSEM_C2MISR_MISF19 HSEM_C2MISR_MISF19_Msk
#define HSEM_C2MISR_MISF20_Pos (20U)
#define HSEM_C2MISR_MISF20_Msk (0x1UL << HSEM_C2MISR_MISF20_Pos)
#define HSEM_C2MISR_MISF20 HSEM_C2MISR_MISF20_Msk
#define HSEM_C2MISR_MISF21_Pos (21U)
#define HSEM_C2MISR_MISF21_Msk (0x1UL << HSEM_C2MISR_MISF21_Pos)
#define HSEM_C2MISR_MISF21 HSEM_C2MISR_MISF21_Msk
#define HSEM_C2MISR_MISF22_Pos (22U)
#define HSEM_C2MISR_MISF22_Msk (0x1UL << HSEM_C2MISR_MISF22_Pos)
#define HSEM_C2MISR_MISF22 HSEM_C2MISR_MISF22_Msk
#define HSEM_C2MISR_MISF23_Pos (23U)
#define HSEM_C2MISR_MISF23_Msk (0x1UL << HSEM_C2MISR_MISF23_Pos)
#define HSEM_C2MISR_MISF23 HSEM_C2MISR_MISF23_Msk
#define HSEM_C2MISR_MISF24_Pos (24U)
#define HSEM_C2MISR_MISF24_Msk (0x1UL << HSEM_C2MISR_MISF24_Pos)
#define HSEM_C2MISR_MISF24 HSEM_C2MISR_MISF24_Msk
#define HSEM_C2MISR_MISF25_Pos (25U)
#define HSEM_C2MISR_MISF25_Msk (0x1UL << HSEM_C2MISR_MISF25_Pos)
#define HSEM_C2MISR_MISF25 HSEM_C2MISR_MISF25_Msk
#define HSEM_C2MISR_MISF26_Pos (26U)
#define HSEM_C2MISR_MISF26_Msk (0x1UL << HSEM_C2MISR_MISF26_Pos)
#define HSEM_C2MISR_MISF26 HSEM_C2MISR_MISF26_Msk
#define HSEM_C2MISR_MISF27_Pos (27U)
#define HSEM_C2MISR_MISF27_Msk (0x1UL << HSEM_C2MISR_MISF27_Pos)
#define HSEM_C2MISR_MISF27 HSEM_C2MISR_MISF27_Msk
#define HSEM_C2MISR_MISF28_Pos (28U)
#define HSEM_C2MISR_MISF28_Msk (0x1UL << HSEM_C2MISR_MISF28_Pos)
#define HSEM_C2MISR_MISF28 HSEM_C2MISR_MISF28_Msk
#define HSEM_C2MISR_MISF29_Pos (29U)
#define HSEM_C2MISR_MISF29_Msk (0x1UL << HSEM_C2MISR_MISF29_Pos)
#define HSEM_C2MISR_MISF29 HSEM_C2MISR_MISF29_Msk
#define HSEM_C2MISR_MISF30_Pos (30U)
#define HSEM_C2MISR_MISF30_Msk (0x1UL << HSEM_C2MISR_MISF30_Pos)
#define HSEM_C2MISR_MISF30 HSEM_C2MISR_MISF30_Msk
#define HSEM_C2MISR_MISF31_Pos (31U)
#define HSEM_C2MISR_MISF31_Msk (0x1UL << HSEM_C2MISR_MISF31_Pos)
#define HSEM_C2MISR_MISF31 HSEM_C2MISR_MISF31_Msk
#define HSEM_CR_COREID_Pos (8U)
#define HSEM_CR_COREID_Msk (0xFUL << HSEM_CR_COREID_Pos)
#define HSEM_CR_COREID HSEM_CR_COREID_Msk
#define HSEM_CR_COREID_CPU1 (0x4U << HSEM_CR_COREID_Pos)
#define HSEM_CR_COREID_CPU2 (0x8U << HSEM_CR_COREID_Pos)
#define HSEM_CR_COREID_CURRENT HSEM_CR_COREID_CPU1
#define HSEM_CR_KEY_Pos (16U)
#define HSEM_CR_KEY_Msk (0xFFFFUL << HSEM_CR_KEY_Pos)
#define HSEM_CR_KEY HSEM_CR_KEY_Msk
#define HSEM_KEYR_KEY_Pos (16U)
#define HSEM_KEYR_KEY_Msk (0xFFFFUL << HSEM_KEYR_KEY_Pos)
#define HSEM_KEYR_KEY HSEM_KEYR_KEY_Msk
#define I2C_CR1_PE_Pos (0U)
#define I2C_CR1_PE_Msk (0x1UL << I2C_CR1_PE_Pos)
#define I2C_CR1_PE I2C_CR1_PE_Msk
#define I2C_CR1_TXIE_Pos (1U)
#define I2C_CR1_TXIE_Msk (0x1UL << I2C_CR1_TXIE_Pos)
#define I2C_CR1_TXIE I2C_CR1_TXIE_Msk
#define I2C_CR1_RXIE_Pos (2U)
#define I2C_CR1_RXIE_Msk (0x1UL << I2C_CR1_RXIE_Pos)
#define I2C_CR1_RXIE I2C_CR1_RXIE_Msk
#define I2C_CR1_ADDRIE_Pos (3U)
#define I2C_CR1_ADDRIE_Msk (0x1UL << I2C_CR1_ADDRIE_Pos)
#define I2C_CR1_ADDRIE I2C_CR1_ADDRIE_Msk
#define I2C_CR1_NACKIE_Pos (4U)
#define I2C_CR1_NACKIE_Msk (0x1UL << I2C_CR1_NACKIE_Pos)
#define I2C_CR1_NACKIE I2C_CR1_NACKIE_Msk
#define I2C_CR1_STOPIE_Pos (5U)
#define I2C_CR1_STOPIE_Msk (0x1UL << I2C_CR1_STOPIE_Pos)
#define I2C_CR1_STOPIE I2C_CR1_STOPIE_Msk
#define I2C_CR1_TCIE_Pos (6U)
#define I2C_CR1_TCIE_Msk (0x1UL << I2C_CR1_TCIE_Pos)
#define I2C_CR1_TCIE I2C_CR1_TCIE_Msk
#define I2C_CR1_ERRIE_Pos (7U)
#define I2C_CR1_ERRIE_Msk (0x1UL << I2C_CR1_ERRIE_Pos)
#define I2C_CR1_ERRIE I2C_CR1_ERRIE_Msk
#define I2C_CR1_DNF_Pos (8U)
#define I2C_CR1_DNF_Msk (0xFUL << I2C_CR1_DNF_Pos)
#define I2C_CR1_DNF I2C_CR1_DNF_Msk
#define I2C_CR1_ANFOFF_Pos (12U)
#define I2C_CR1_ANFOFF_Msk (0x1UL << I2C_CR1_ANFOFF_Pos)
#define I2C_CR1_ANFOFF I2C_CR1_ANFOFF_Msk
#define I2C_CR1_SWRST_Pos (13U)
#define I2C_CR1_SWRST_Msk (0x1UL << I2C_CR1_SWRST_Pos)
#define I2C_CR1_SWRST I2C_CR1_SWRST_Msk
#define I2C_CR1_TXDMAEN_Pos (14U)
#define I2C_CR1_TXDMAEN_Msk (0x1UL << I2C_CR1_TXDMAEN_Pos)
#define I2C_CR1_TXDMAEN I2C_CR1_TXDMAEN_Msk
#define I2C_CR1_RXDMAEN_Pos (15U)
#define I2C_CR1_RXDMAEN_Msk (0x1UL << I2C_CR1_RXDMAEN_Pos)
#define I2C_CR1_RXDMAEN I2C_CR1_RXDMAEN_Msk
#define I2C_CR1_SBC_Pos (16U)
#define I2C_CR1_SBC_Msk (0x1UL << I2C_CR1_SBC_Pos)
#define I2C_CR1_SBC I2C_CR1_SBC_Msk
#define I2C_CR1_NOSTRETCH_Pos (17U)
#define I2C_CR1_NOSTRETCH_Msk (0x1UL << I2C_CR1_NOSTRETCH_Pos)
#define I2C_CR1_NOSTRETCH I2C_CR1_NOSTRETCH_Msk
#define I2C_CR1_WUPEN_Pos (18U)
#define I2C_CR1_WUPEN_Msk (0x1UL << I2C_CR1_WUPEN_Pos)
#define I2C_CR1_WUPEN I2C_CR1_WUPEN_Msk
#define I2C_CR1_GCEN_Pos (19U)
#define I2C_CR1_GCEN_Msk (0x1UL << I2C_CR1_GCEN_Pos)
#define I2C_CR1_GCEN I2C_CR1_GCEN_Msk
#define I2C_CR1_SMBHEN_Pos (20U)
#define I2C_CR1_SMBHEN_Msk (0x1UL << I2C_CR1_SMBHEN_Pos)
#define I2C_CR1_SMBHEN I2C_CR1_SMBHEN_Msk
#define I2C_CR1_SMBDEN_Pos (21U)
#define I2C_CR1_SMBDEN_Msk (0x1UL << I2C_CR1_SMBDEN_Pos)
#define I2C_CR1_SMBDEN I2C_CR1_SMBDEN_Msk
#define I2C_CR1_ALERTEN_Pos (22U)
#define I2C_CR1_ALERTEN_Msk (0x1UL << I2C_CR1_ALERTEN_Pos)
#define I2C_CR1_ALERTEN I2C_CR1_ALERTEN_Msk
#define I2C_CR1_PECEN_Pos (23U)
#define I2C_CR1_PECEN_Msk (0x1UL << I2C_CR1_PECEN_Pos)
#define I2C_CR1_PECEN I2C_CR1_PECEN_Msk
#define I2C_CR2_SADD_Pos (0U)
#define I2C_CR2_SADD_Msk (0x3FFUL << I2C_CR2_SADD_Pos)
#define I2C_CR2_SADD I2C_CR2_SADD_Msk
#define I2C_CR2_RD_WRN_Pos (10U)
#define I2C_CR2_RD_WRN_Msk (0x1UL << I2C_CR2_RD_WRN_Pos)
#define I2C_CR2_RD_WRN I2C_CR2_RD_WRN_Msk
#define I2C_CR2_ADD10_Pos (11U)
#define I2C_CR2_ADD10_Msk (0x1UL << I2C_CR2_ADD10_Pos)
#define I2C_CR2_ADD10 I2C_CR2_ADD10_Msk
#define I2C_CR2_HEAD10R_Pos (12U)
#define I2C_CR2_HEAD10R_Msk (0x1UL << I2C_CR2_HEAD10R_Pos)
#define I2C_CR2_HEAD10R I2C_CR2_HEAD10R_Msk
#define I2C_CR2_START_Pos (13U)
#define I2C_CR2_START_Msk (0x1UL << I2C_CR2_START_Pos)
#define I2C_CR2_START I2C_CR2_START_Msk
#define I2C_CR2_STOP_Pos (14U)
#define I2C_CR2_STOP_Msk (0x1UL << I2C_CR2_STOP_Pos)
#define I2C_CR2_STOP I2C_CR2_STOP_Msk
#define I2C_CR2_NACK_Pos (15U)
#define I2C_CR2_NACK_Msk (0x1UL << I2C_CR2_NACK_Pos)
#define I2C_CR2_NACK I2C_CR2_NACK_Msk
#define I2C_CR2_NBYTES_Pos (16U)
#define I2C_CR2_NBYTES_Msk (0xFFUL << I2C_CR2_NBYTES_Pos)
#define I2C_CR2_NBYTES I2C_CR2_NBYTES_Msk
#define I2C_CR2_RELOAD_Pos (24U)
#define I2C_CR2_RELOAD_Msk (0x1UL << I2C_CR2_RELOAD_Pos)
#define I2C_CR2_RELOAD I2C_CR2_RELOAD_Msk
#define I2C_CR2_AUTOEND_Pos (25U)
#define I2C_CR2_AUTOEND_Msk (0x1UL << I2C_CR2_AUTOEND_Pos)
#define I2C_CR2_AUTOEND I2C_CR2_AUTOEND_Msk
#define I2C_CR2_PECBYTE_Pos (26U)
#define I2C_CR2_PECBYTE_Msk (0x1UL << I2C_CR2_PECBYTE_Pos)
#define I2C_CR2_PECBYTE I2C_CR2_PECBYTE_Msk
#define I2C_OAR1_OA1_Pos (0U)
#define I2C_OAR1_OA1_Msk (0x3FFUL << I2C_OAR1_OA1_Pos)
#define I2C_OAR1_OA1 I2C_OAR1_OA1_Msk
#define I2C_OAR1_OA1MODE_Pos (10U)
#define I2C_OAR1_OA1MODE_Msk (0x1UL << I2C_OAR1_OA1MODE_Pos)
#define I2C_OAR1_OA1MODE I2C_OAR1_OA1MODE_Msk
#define I2C_OAR1_OA1EN_Pos (15U)
#define I2C_OAR1_OA1EN_Msk (0x1UL << I2C_OAR1_OA1EN_Pos)
#define I2C_OAR1_OA1EN I2C_OAR1_OA1EN_Msk
#define I2C_OAR2_OA2_Pos (1U)
#define I2C_OAR2_OA2_Msk (0x7FUL << I2C_OAR2_OA2_Pos)
#define I2C_OAR2_OA2 I2C_OAR2_OA2_Msk
#define I2C_OAR2_OA2MSK_Pos (8U)
#define I2C_OAR2_OA2MSK_Msk (0x7UL << I2C_OAR2_OA2MSK_Pos)
#define I2C_OAR2_OA2MSK I2C_OAR2_OA2MSK_Msk
#define I2C_OAR2_OA2NOMASK (0x00000000UL)
#define I2C_OAR2_OA2MASK01_Pos (8U)
#define I2C_OAR2_OA2MASK01_Msk (0x1UL << I2C_OAR2_OA2MASK01_Pos)
#define I2C_OAR2_OA2MASK01 I2C_OAR2_OA2MASK01_Msk
#define I2C_OAR2_OA2MASK02_Pos (9U)
#define I2C_OAR2_OA2MASK02_Msk (0x1UL << I2C_OAR2_OA2MASK02_Pos)
#define I2C_OAR2_OA2MASK02 I2C_OAR2_OA2MASK02_Msk
#define I2C_OAR2_OA2MASK03_Pos (8U)
#define I2C_OAR2_OA2MASK03_Msk (0x3UL << I2C_OAR2_OA2MASK03_Pos)
#define I2C_OAR2_OA2MASK03 I2C_OAR2_OA2MASK03_Msk
#define I2C_OAR2_OA2MASK04_Pos (10U)
#define I2C_OAR2_OA2MASK04_Msk (0x1UL << I2C_OAR2_OA2MASK04_Pos)
#define I2C_OAR2_OA2MASK04 I2C_OAR2_OA2MASK04_Msk
#define I2C_OAR2_OA2MASK05_Pos (8U)
#define I2C_OAR2_OA2MASK05_Msk (0x5UL << I2C_OAR2_OA2MASK05_Pos)
#define I2C_OAR2_OA2MASK05 I2C_OAR2_OA2MASK05_Msk
#define I2C_OAR2_OA2MASK06_Pos (9U)
#define I2C_OAR2_OA2MASK06_Msk (0x3UL << I2C_OAR2_OA2MASK06_Pos)
#define I2C_OAR2_OA2MASK06 I2C_OAR2_OA2MASK06_Msk
#define I2C_OAR2_OA2MASK07_Pos (8U)
#define I2C_OAR2_OA2MASK07_Msk (0x7UL << I2C_OAR2_OA2MASK07_Pos)
#define I2C_OAR2_OA2MASK07 I2C_OAR2_OA2MASK07_Msk
#define I2C_OAR2_OA2EN_Pos (15U)
#define I2C_OAR2_OA2EN_Msk (0x1UL << I2C_OAR2_OA2EN_Pos)
#define I2C_OAR2_OA2EN I2C_OAR2_OA2EN_Msk
#define I2C_TIMINGR_SCLL_Pos (0U)
#define I2C_TIMINGR_SCLL_Msk (0xFFUL << I2C_TIMINGR_SCLL_Pos)
#define I2C_TIMINGR_SCLL I2C_TIMINGR_SCLL_Msk
#define I2C_TIMINGR_SCLH_Pos (8U)
#define I2C_TIMINGR_SCLH_Msk (0xFFUL << I2C_TIMINGR_SCLH_Pos)
#define I2C_TIMINGR_SCLH I2C_TIMINGR_SCLH_Msk
#define I2C_TIMINGR_SDADEL_Pos (16U)
#define I2C_TIMINGR_SDADEL_Msk (0xFUL << I2C_TIMINGR_SDADEL_Pos)
#define I2C_TIMINGR_SDADEL I2C_TIMINGR_SDADEL_Msk
#define I2C_TIMINGR_SCLDEL_Pos (20U)
#define I2C_TIMINGR_SCLDEL_Msk (0xFUL << I2C_TIMINGR_SCLDEL_Pos)
#define I2C_TIMINGR_SCLDEL I2C_TIMINGR_SCLDEL_Msk
#define I2C_TIMINGR_PRESC_Pos (28U)
#define I2C_TIMINGR_PRESC_Msk (0xFUL << I2C_TIMINGR_PRESC_Pos)
#define I2C_TIMINGR_PRESC I2C_TIMINGR_PRESC_Msk
#define I2C_TIMEOUTR_TIMEOUTA_Pos (0U)
#define I2C_TIMEOUTR_TIMEOUTA_Msk (0xFFFUL << I2C_TIMEOUTR_TIMEOUTA_Pos)
#define I2C_TIMEOUTR_TIMEOUTA I2C_TIMEOUTR_TIMEOUTA_Msk
#define I2C_TIMEOUTR_TIDLE_Pos (12U)
#define I2C_TIMEOUTR_TIDLE_Msk (0x1UL << I2C_TIMEOUTR_TIDLE_Pos)
#define I2C_TIMEOUTR_TIDLE I2C_TIMEOUTR_TIDLE_Msk
#define I2C_TIMEOUTR_TIMOUTEN_Pos (15U)
#define I2C_TIMEOUTR_TIMOUTEN_Msk (0x1UL << I2C_TIMEOUTR_TIMOUTEN_Pos)
#define I2C_TIMEOUTR_TIMOUTEN I2C_TIMEOUTR_TIMOUTEN_Msk
#define I2C_TIMEOUTR_TIMEOUTB_Pos (16U)
#define I2C_TIMEOUTR_TIMEOUTB_Msk (0xFFFUL << I2C_TIMEOUTR_TIMEOUTB_Pos)
#define I2C_TIMEOUTR_TIMEOUTB I2C_TIMEOUTR_TIMEOUTB_Msk
#define I2C_TIMEOUTR_TEXTEN_Pos (31U)
#define I2C_TIMEOUTR_TEXTEN_Msk (0x1UL << I2C_TIMEOUTR_TEXTEN_Pos)
#define I2C_TIMEOUTR_TEXTEN I2C_TIMEOUTR_TEXTEN_Msk
#define I2C_ISR_TXE_Pos (0U)
#define I2C_ISR_TXE_Msk (0x1UL << I2C_ISR_TXE_Pos)
#define I2C_ISR_TXE I2C_ISR_TXE_Msk
#define I2C_ISR_TXIS_Pos (1U)
#define I2C_ISR_TXIS_Msk (0x1UL << I2C_ISR_TXIS_Pos)
#define I2C_ISR_TXIS I2C_ISR_TXIS_Msk
#define I2C_ISR_RXNE_Pos (2U)
#define I2C_ISR_RXNE_Msk (0x1UL << I2C_ISR_RXNE_Pos)
#define I2C_ISR_RXNE I2C_ISR_RXNE_Msk
#define I2C_ISR_ADDR_Pos (3U)
#define I2C_ISR_ADDR_Msk (0x1UL << I2C_ISR_ADDR_Pos)
#define I2C_ISR_ADDR I2C_ISR_ADDR_Msk
#define I2C_ISR_NACKF_Pos (4U)
#define I2C_ISR_NACKF_Msk (0x1UL << I2C_ISR_NACKF_Pos)
#define I2C_ISR_NACKF I2C_ISR_NACKF_Msk
#define I2C_ISR_STOPF_Pos (5U)
#define I2C_ISR_STOPF_Msk (0x1UL << I2C_ISR_STOPF_Pos)
#define I2C_ISR_STOPF I2C_ISR_STOPF_Msk
#define I2C_ISR_TC_Pos (6U)
#define I2C_ISR_TC_Msk (0x1UL << I2C_ISR_TC_Pos)
#define I2C_ISR_TC I2C_ISR_TC_Msk
#define I2C_ISR_TCR_Pos (7U)
#define I2C_ISR_TCR_Msk (0x1UL << I2C_ISR_TCR_Pos)
#define I2C_ISR_TCR I2C_ISR_TCR_Msk
#define I2C_ISR_BERR_Pos (8U)
#define I2C_ISR_BERR_Msk (0x1UL << I2C_ISR_BERR_Pos)
#define I2C_ISR_BERR I2C_ISR_BERR_Msk
#define I2C_ISR_ARLO_Pos (9U)
#define I2C_ISR_ARLO_Msk (0x1UL << I2C_ISR_ARLO_Pos)
#define I2C_ISR_ARLO I2C_ISR_ARLO_Msk
#define I2C_ISR_OVR_Pos (10U)
#define I2C_ISR_OVR_Msk (0x1UL << I2C_ISR_OVR_Pos)
#define I2C_ISR_OVR I2C_ISR_OVR_Msk
#define I2C_ISR_PECERR_Pos (11U)
#define I2C_ISR_PECERR_Msk (0x1UL << I2C_ISR_PECERR_Pos)
#define I2C_ISR_PECERR I2C_ISR_PECERR_Msk
#define I2C_ISR_TIMEOUT_Pos (12U)
#define I2C_ISR_TIMEOUT_Msk (0x1UL << I2C_ISR_TIMEOUT_Pos)
#define I2C_ISR_TIMEOUT I2C_ISR_TIMEOUT_Msk
#define I2C_ISR_ALERT_Pos (13U)
#define I2C_ISR_ALERT_Msk (0x1UL << I2C_ISR_ALERT_Pos)
#define I2C_ISR_ALERT I2C_ISR_ALERT_Msk
#define I2C_ISR_BUSY_Pos (15U)
#define I2C_ISR_BUSY_Msk (0x1UL << I2C_ISR_BUSY_Pos)
#define I2C_ISR_BUSY I2C_ISR_BUSY_Msk
#define I2C_ISR_DIR_Pos (16U)
#define I2C_ISR_DIR_Msk (0x1UL << I2C_ISR_DIR_Pos)
#define I2C_ISR_DIR I2C_ISR_DIR_Msk
#define I2C_ISR_ADDCODE_Pos (17U)
#define I2C_ISR_ADDCODE_Msk (0x7FUL << I2C_ISR_ADDCODE_Pos)
#define I2C_ISR_ADDCODE I2C_ISR_ADDCODE_Msk
#define I2C_ICR_ADDRCF_Pos (3U)
#define I2C_ICR_ADDRCF_Msk (0x1UL << I2C_ICR_ADDRCF_Pos)
#define I2C_ICR_ADDRCF I2C_ICR_ADDRCF_Msk
#define I2C_ICR_NACKCF_Pos (4U)
#define I2C_ICR_NACKCF_Msk (0x1UL << I2C_ICR_NACKCF_Pos)
#define I2C_ICR_NACKCF I2C_ICR_NACKCF_Msk
#define I2C_ICR_STOPCF_Pos (5U)
#define I2C_ICR_STOPCF_Msk (0x1UL << I2C_ICR_STOPCF_Pos)
#define I2C_ICR_STOPCF I2C_ICR_STOPCF_Msk
#define I2C_ICR_BERRCF_Pos (8U)
#define I2C_ICR_BERRCF_Msk (0x1UL << I2C_ICR_BERRCF_Pos)
#define I2C_ICR_BERRCF I2C_ICR_BERRCF_Msk
#define I2C_ICR_ARLOCF_Pos (9U)
#define I2C_ICR_ARLOCF_Msk (0x1UL << I2C_ICR_ARLOCF_Pos)
#define I2C_ICR_ARLOCF I2C_ICR_ARLOCF_Msk
#define I2C_ICR_OVRCF_Pos (10U)
#define I2C_ICR_OVRCF_Msk (0x1UL << I2C_ICR_OVRCF_Pos)
#define I2C_ICR_OVRCF I2C_ICR_OVRCF_Msk
#define I2C_ICR_PECCF_Pos (11U)
#define I2C_ICR_PECCF_Msk (0x1UL << I2C_ICR_PECCF_Pos)
#define I2C_ICR_PECCF I2C_ICR_PECCF_Msk
#define I2C_ICR_TIMOUTCF_Pos (12U)
#define I2C_ICR_TIMOUTCF_Msk (0x1UL << I2C_ICR_TIMOUTCF_Pos)
#define I2C_ICR_TIMOUTCF I2C_ICR_TIMOUTCF_Msk
#define I2C_ICR_ALERTCF_Pos (13U)
#define I2C_ICR_ALERTCF_Msk (0x1UL << I2C_ICR_ALERTCF_Pos)
#define I2C_ICR_ALERTCF I2C_ICR_ALERTCF_Msk
#define I2C_PECR_PEC_Pos (0U)
#define I2C_PECR_PEC_Msk (0xFFUL << I2C_PECR_PEC_Pos)
#define I2C_PECR_PEC I2C_PECR_PEC_Msk
#define I2C_RXDR_RXDATA_Pos (0U)
#define I2C_RXDR_RXDATA_Msk (0xFFUL << I2C_RXDR_RXDATA_Pos)
#define I2C_RXDR_RXDATA I2C_RXDR_RXDATA_Msk
#define I2C_TXDR_TXDATA_Pos (0U)
#define I2C_TXDR_TXDATA_Msk (0xFFUL << I2C_TXDR_TXDATA_Pos)
#define I2C_TXDR_TXDATA I2C_TXDR_TXDATA_Msk
#define IWDG_KR_KEY_Pos (0U)
#define IWDG_KR_KEY_Msk (0xFFFFUL << IWDG_KR_KEY_Pos)
#define IWDG_KR_KEY IWDG_KR_KEY_Msk
#define IWDG_PR_PR_Pos (0U)
#define IWDG_PR_PR_Msk (0x7UL << IWDG_PR_PR_Pos)
#define IWDG_PR_PR IWDG_PR_PR_Msk
#define IWDG_PR_PR_0 (0x1U << IWDG_PR_PR_Pos)
#define IWDG_PR_PR_1 (0x2U << IWDG_PR_PR_Pos)
#define IWDG_PR_PR_2 (0x4U << IWDG_PR_PR_Pos)
#define IWDG_RLR_RL_Pos (0U)
#define IWDG_RLR_RL_Msk (0xFFFUL << IWDG_RLR_RL_Pos)
#define IWDG_RLR_RL IWDG_RLR_RL_Msk
#define IWDG_SR_PVU_Pos (0U)
#define IWDG_SR_PVU_Msk (0x1UL << IWDG_SR_PVU_Pos)
#define IWDG_SR_PVU IWDG_SR_PVU_Msk
#define IWDG_SR_RVU_Pos (1U)
#define IWDG_SR_RVU_Msk (0x1UL << IWDG_SR_RVU_Pos)
#define IWDG_SR_RVU IWDG_SR_RVU_Msk
#define IWDG_SR_WVU_Pos (2U)
#define IWDG_SR_WVU_Msk (0x1UL << IWDG_SR_WVU_Pos)
#define IWDG_SR_WVU IWDG_SR_WVU_Msk
#define IWDG_WINR_WIN_Pos (0U)
#define IWDG_WINR_WIN_Msk (0xFFFUL << IWDG_WINR_WIN_Pos)
#define IWDG_WINR_WIN IWDG_WINR_WIN_Msk
#define PWR_SUPPORT_STOP2 
#define PWR_CR1_LPMS_Pos (0U)
#define PWR_CR1_LPMS_Msk (0x7UL << PWR_CR1_LPMS_Pos)
#define PWR_CR1_LPMS PWR_CR1_LPMS_Msk
#define PWR_CR1_LPMS_0 (0x1U << PWR_CR1_LPMS_Pos)
#define PWR_CR1_LPMS_1 (0x2U << PWR_CR1_LPMS_Pos)
#define PWR_CR1_LPMS_2 (0x4U << PWR_CR1_LPMS_Pos)
#define PWR_CR1_FPDR_Pos (4U)
#define PWR_CR1_FPDR_Msk (0x1UL << PWR_CR1_FPDR_Pos)
#define PWR_CR1_FPDR PWR_CR1_FPDR_Msk
#define PWR_CR1_FPDS_Pos (5U)
#define PWR_CR1_FPDS_Msk (0x1UL << PWR_CR1_FPDS_Pos)
#define PWR_CR1_FPDS PWR_CR1_FPDS_Msk
#define PWR_CR1_DBP_Pos (8U)
#define PWR_CR1_DBP_Msk (0x1UL << PWR_CR1_DBP_Pos)
#define PWR_CR1_DBP PWR_CR1_DBP_Msk
#define PWR_CR1_VOS_Pos (9U)
#define PWR_CR1_VOS_Msk (0x3UL << PWR_CR1_VOS_Pos)
#define PWR_CR1_VOS PWR_CR1_VOS_Msk
#define PWR_CR1_VOS_0 (0x1U << PWR_CR1_VOS_Pos)
#define PWR_CR1_VOS_1 (0x2U << PWR_CR1_VOS_Pos)
#define PWR_CR1_LPR_Pos (14U)
#define PWR_CR1_LPR_Msk (0x1UL << PWR_CR1_LPR_Pos)
#define PWR_CR1_LPR PWR_CR1_LPR_Msk
#define PWR_CR2_PVDE_Pos (0U)
#define PWR_CR2_PVDE_Msk (0x1UL << PWR_CR2_PVDE_Pos)
#define PWR_CR2_PVDE PWR_CR2_PVDE_Msk
#define PWR_CR2_PLS_Pos (1U)
#define PWR_CR2_PLS_Msk (0x7UL << PWR_CR2_PLS_Pos)
#define PWR_CR2_PLS PWR_CR2_PLS_Msk
#define PWR_CR2_PLS_0 (0x1U << PWR_CR2_PLS_Pos)
#define PWR_CR2_PLS_1 (0x2U << PWR_CR2_PLS_Pos)
#define PWR_CR2_PLS_2 (0x4U << PWR_CR2_PLS_Pos)
#define PWR_CR2_PVME_Pos (4U)
#define PWR_CR2_PVME_Msk (0x5UL << PWR_CR2_PVME_Pos)
#define PWR_CR2_PVME PWR_CR2_PVME_Msk
#define PWR_CR2_PVME1_Pos (4U)
#define PWR_CR2_PVME1_Msk (0x1UL << PWR_CR2_PVME1_Pos)
#define PWR_CR2_PVME1 PWR_CR2_PVME1_Msk
#define PWR_CR2_PVME3_Pos (6U)
#define PWR_CR2_PVME3_Msk (0x1UL << PWR_CR2_PVME3_Pos)
#define PWR_CR2_PVME3 PWR_CR2_PVME3_Msk
#define PWR_CR2_USV_Pos (10U)
#define PWR_CR2_USV_Msk (0x1UL << PWR_CR2_USV_Pos)
#define PWR_CR2_USV PWR_CR2_USV_Msk
#define PWR_CR3_EWUP_Pos (0U)
#define PWR_CR3_EWUP_Msk (0x1FUL << PWR_CR3_EWUP_Pos)
#define PWR_CR3_EWUP PWR_CR3_EWUP_Msk
#define PWR_CR3_EWUP1_Pos (0U)
#define PWR_CR3_EWUP1_Msk (0x1UL << PWR_CR3_EWUP1_Pos)
#define PWR_CR3_EWUP1 PWR_CR3_EWUP1_Msk
#define PWR_CR3_EWUP2_Pos (1U)
#define PWR_CR3_EWUP2_Msk (0x1UL << PWR_CR3_EWUP2_Pos)
#define PWR_CR3_EWUP2 PWR_CR3_EWUP2_Msk
#define PWR_CR3_EWUP3_Pos (2U)
#define PWR_CR3_EWUP3_Msk (0x1UL << PWR_CR3_EWUP3_Pos)
#define PWR_CR3_EWUP3 PWR_CR3_EWUP3_Msk
#define PWR_CR3_EWUP4_Pos (3U)
#define PWR_CR3_EWUP4_Msk (0x1UL << PWR_CR3_EWUP4_Pos)
#define PWR_CR3_EWUP4 PWR_CR3_EWUP4_Msk
#define PWR_CR3_EWUP5_Pos (4U)
#define PWR_CR3_EWUP5_Msk (0x1UL << PWR_CR3_EWUP5_Pos)
#define PWR_CR3_EWUP5 PWR_CR3_EWUP5_Msk
#define PWR_CR3_EBORHSMPSFB_Pos (8U)
#define PWR_CR3_EBORHSMPSFB_Msk (0x1UL << PWR_CR3_EBORHSMPSFB_Pos)
#define PWR_CR3_EBORHSMPSFB PWR_CR3_EBORHSMPSFB_Msk
#define PWR_CR3_RRS_Pos (9U)
#define PWR_CR3_RRS_Msk (0x1UL << PWR_CR3_RRS_Pos)
#define PWR_CR3_RRS PWR_CR3_RRS_Msk
#define PWR_CR3_APC_Pos (10U)
#define PWR_CR3_APC_Msk (0x1UL << PWR_CR3_APC_Pos)
#define PWR_CR3_APC PWR_CR3_APC_Msk
#define PWR_CR3_ECRPE_Pos (11U)
#define PWR_CR3_ECRPE_Msk (0x1UL << PWR_CR3_ECRPE_Pos)
#define PWR_CR3_ECRPE PWR_CR3_ECRPE_Msk
#define PWR_CR3_EBLEA_Pos (12U)
#define PWR_CR3_EBLEA_Msk (0x1UL << PWR_CR3_EBLEA_Pos)
#define PWR_CR3_EBLEA PWR_CR3_EBLEA_Msk
#define PWR_CR3_E802A_Pos (13U)
#define PWR_CR3_E802A_Msk (0x1UL << PWR_CR3_E802A_Pos)
#define PWR_CR3_E802A PWR_CR3_E802A_Msk
#define PWR_CR3_EC2H_Pos (14U)
#define PWR_CR3_EC2H_Msk (0x1UL << PWR_CR3_EC2H_Pos)
#define PWR_CR3_EC2H PWR_CR3_EC2H_Msk
#define PWR_CR3_EIWUL_Pos (15U)
#define PWR_CR3_EIWUL_Msk (0x1UL << PWR_CR3_EIWUL_Pos)
#define PWR_CR3_EIWUL PWR_CR3_EIWUL_Msk
#define PWR_CR4_WP_Pos (0U)
#define PWR_CR4_WP_Msk (0x1FUL << PWR_CR4_WP_Pos)
#define PWR_CR4_WP PWR_CR4_WP_Msk
#define PWR_CR4_WP1_Pos (0U)
#define PWR_CR4_WP1_Msk (0x1UL << PWR_CR4_WP1_Pos)
#define PWR_CR4_WP1 PWR_CR4_WP1_Msk
#define PWR_CR4_WP2_Pos (1U)
#define PWR_CR4_WP2_Msk (0x1UL << PWR_CR4_WP2_Pos)
#define PWR_CR4_WP2 PWR_CR4_WP2_Msk
#define PWR_CR4_WP3_Pos (2U)
#define PWR_CR4_WP3_Msk (0x1UL << PWR_CR4_WP3_Pos)
#define PWR_CR4_WP3 PWR_CR4_WP3_Msk
#define PWR_CR4_WP4_Pos (3U)
#define PWR_CR4_WP4_Msk (0x1UL << PWR_CR4_WP4_Pos)
#define PWR_CR4_WP4 PWR_CR4_WP4_Msk
#define PWR_CR4_WP5_Pos (4U)
#define PWR_CR4_WP5_Msk (0x1UL << PWR_CR4_WP5_Pos)
#define PWR_CR4_WP5 PWR_CR4_WP5_Msk
#define PWR_CR4_VBE_Pos (8U)
#define PWR_CR4_VBE_Msk (0x1UL << PWR_CR4_VBE_Pos)
#define PWR_CR4_VBE PWR_CR4_VBE_Msk
#define PWR_CR4_VBRS_Pos (9U)
#define PWR_CR4_VBRS_Msk (0x1UL << PWR_CR4_VBRS_Pos)
#define PWR_CR4_VBRS PWR_CR4_VBRS_Msk
#define PWR_CR4_C2BOOT_Pos (15U)
#define PWR_CR4_C2BOOT_Msk (0x1UL << PWR_CR4_C2BOOT_Pos)
#define PWR_CR4_C2BOOT PWR_CR4_C2BOOT_Msk
#define PWR_SR1_WUF_Pos (0U)
#define PWR_SR1_WUF_Msk (0x1FUL << PWR_SR1_WUF_Pos)
#define PWR_SR1_WUF PWR_SR1_WUF_Msk
#define PWR_SR1_WUF1_Pos (0U)
#define PWR_SR1_WUF1_Msk (0x1UL << PWR_SR1_WUF1_Pos)
#define PWR_SR1_WUF1 PWR_SR1_WUF1_Msk
#define PWR_SR1_WUF2_Pos (1U)
#define PWR_SR1_WUF2_Msk (0x1UL << PWR_SR1_WUF2_Pos)
#define PWR_SR1_WUF2 PWR_SR1_WUF2_Msk
#define PWR_SR1_WUF3_Pos (2U)
#define PWR_SR1_WUF3_Msk (0x1UL << PWR_SR1_WUF3_Pos)
#define PWR_SR1_WUF3 PWR_SR1_WUF3_Msk
#define PWR_SR1_WUF4_Pos (3U)
#define PWR_SR1_WUF4_Msk (0x1UL << PWR_SR1_WUF4_Pos)
#define PWR_SR1_WUF4 PWR_SR1_WUF4_Msk
#define PWR_SR1_WUF5_Pos (4U)
#define PWR_SR1_WUF5_Msk (0x1UL << PWR_SR1_WUF5_Pos)
#define PWR_SR1_WUF5 PWR_SR1_WUF5_Msk
#define PWR_SR1_SMPSFBF_Pos (7U)
#define PWR_SR1_SMPSFBF_Msk (0x1UL << PWR_SR1_SMPSFBF_Pos)
#define PWR_SR1_SMPSFBF PWR_SR1_SMPSFBF_Msk
#define PWR_SR1_BORHF_Pos (8U)
#define PWR_SR1_BORHF_Msk (0x1UL << PWR_SR1_BORHF_Pos)
#define PWR_SR1_BORHF PWR_SR1_BORHF_Msk
#define PWR_SR1_BLEWUF_Pos (9U)
#define PWR_SR1_BLEWUF_Msk (0x1UL << PWR_SR1_BLEWUF_Pos)
#define PWR_SR1_BLEWUF PWR_SR1_BLEWUF_Msk
#define PWR_SR1_802WUF_Pos (10U)
#define PWR_SR1_802WUF_Msk (0x1UL << PWR_SR1_802WUF_Pos)
#define PWR_SR1_802WUF PWR_SR1_802WUF_Msk
#define PWR_SR1_CRPEF_Pos (11U)
#define PWR_SR1_CRPEF_Msk (0x1UL << PWR_SR1_CRPEF_Pos)
#define PWR_SR1_CRPEF PWR_SR1_CRPEF_Msk
#define PWR_SR1_BLEAF_Pos (12U)
#define PWR_SR1_BLEAF_Msk (0x1UL << PWR_SR1_BLEAF_Pos)
#define PWR_SR1_BLEAF PWR_SR1_BLEAF_Msk
#define PWR_SR1_802AF_Pos (13U)
#define PWR_SR1_802AF_Msk (0x1UL << PWR_SR1_802AF_Pos)
#define PWR_SR1_802AF PWR_SR1_802AF_Msk
#define PWR_SR1_C2HF_Pos (14U)
#define PWR_SR1_C2HF_Msk (0x1UL << PWR_SR1_C2HF_Pos)
#define PWR_SR1_C2HF PWR_SR1_C2HF_Msk
#define PWR_SR1_WUFI_Pos (15U)
#define PWR_SR1_WUFI_Msk (0x1UL << PWR_SR1_WUFI_Pos)
#define PWR_SR1_WUFI PWR_SR1_WUFI_Msk
#define PWR_SR2_SMPSBF_Pos (0U)
#define PWR_SR2_SMPSBF_Msk (0x1UL << PWR_SR2_SMPSBF_Pos)
#define PWR_SR2_SMPSBF PWR_SR2_SMPSBF_Msk
#define PWR_SR2_SMPSF_Pos (1U)
#define PWR_SR2_SMPSF_Msk (0x1UL << PWR_SR2_SMPSF_Pos)
#define PWR_SR2_SMPSF PWR_SR2_SMPSF_Msk
#define PWR_SR2_REGLPS_Pos (8U)
#define PWR_SR2_REGLPS_Msk (0x1UL << PWR_SR2_REGLPS_Pos)
#define PWR_SR2_REGLPS PWR_SR2_REGLPS_Msk
#define PWR_SR2_REGLPF_Pos (9U)
#define PWR_SR2_REGLPF_Msk (0x1UL << PWR_SR2_REGLPF_Pos)
#define PWR_SR2_REGLPF PWR_SR2_REGLPF_Msk
#define PWR_SR2_VOSF_Pos (10U)
#define PWR_SR2_VOSF_Msk (0x1UL << PWR_SR2_VOSF_Pos)
#define PWR_SR2_VOSF PWR_SR2_VOSF_Msk
#define PWR_SR2_PVDO_Pos (11U)
#define PWR_SR2_PVDO_Msk (0x1UL << PWR_SR2_PVDO_Pos)
#define PWR_SR2_PVDO PWR_SR2_PVDO_Msk
#define PWR_SR2_PVMO_Pos (12U)
#define PWR_SR2_PVMO_Msk (0x5UL << PWR_SR2_PVMO_Pos)
#define PWR_SR2_PVMO PWR_SR2_PVMO_Msk
#define PWR_SR2_PVMO1_Pos (12U)
#define PWR_SR2_PVMO1_Msk (0x1UL << PWR_SR2_PVMO1_Pos)
#define PWR_SR2_PVMO1 PWR_SR2_PVMO1_Msk
#define PWR_SR2_PVMO3_Pos (14U)
#define PWR_SR2_PVMO3_Msk (0x1UL << PWR_SR2_PVMO3_Pos)
#define PWR_SR2_PVMO3 PWR_SR2_PVMO3_Msk
#define PWR_SCR_CWUF_Pos (0U)
#define PWR_SCR_CWUF_Msk (0x1FUL << PWR_SCR_CWUF_Pos)
#define PWR_SCR_CWUF PWR_SCR_CWUF_Msk
#define PWR_SCR_CWUF1_Pos (0U)
#define PWR_SCR_CWUF1_Msk (0x1UL << PWR_SCR_CWUF1_Pos)
#define PWR_SCR_CWUF1 PWR_SCR_CWUF1_Msk
#define PWR_SCR_CWUF2_Pos (1U)
#define PWR_SCR_CWUF2_Msk (0x1UL << PWR_SCR_CWUF2_Pos)
#define PWR_SCR_CWUF2 PWR_SCR_CWUF2_Msk
#define PWR_SCR_CWUF3_Pos (2U)
#define PWR_SCR_CWUF3_Msk (0x1UL << PWR_SCR_CWUF3_Pos)
#define PWR_SCR_CWUF3 PWR_SCR_CWUF3_Msk
#define PWR_SCR_CWUF4_Pos (3U)
#define PWR_SCR_CWUF4_Msk (0x1UL << PWR_SCR_CWUF4_Pos)
#define PWR_SCR_CWUF4 PWR_SCR_CWUF4_Msk
#define PWR_SCR_CWUF5_Pos (4U)
#define PWR_SCR_CWUF5_Msk (0x1UL << PWR_SCR_CWUF5_Pos)
#define PWR_SCR_CWUF5 PWR_SCR_CWUF5_Msk
#define PWR_SCR_CSMPSFBF_Pos (7U)
#define PWR_SCR_CSMPSFBF_Msk (0x1UL << PWR_SCR_CSMPSFBF_Pos)
#define PWR_SCR_CSMPSFBF PWR_SCR_CSMPSFBF_Msk
#define PWR_SCR_CBORHF_Pos (8U)
#define PWR_SCR_CBORHF_Msk (0x1UL << PWR_SCR_CBORHF_Pos)
#define PWR_SCR_CBORHF PWR_SCR_CBORHF_Msk
#define PWR_SCR_CBLEWUF_Pos (9U)
#define PWR_SCR_CBLEWUF_Msk (0x1UL << PWR_SCR_CBLEWUF_Pos)
#define PWR_SCR_CBLEWUF PWR_SCR_CBLEWUF_Msk
#define PWR_SCR_C802WUF_Pos (10U)
#define PWR_SCR_C802WUF_Msk (0x1UL << PWR_SCR_C802WUF_Pos)
#define PWR_SCR_C802WUF PWR_SCR_C802WUF_Msk
#define PWR_SCR_CCRPEF_Pos (11U)
#define PWR_SCR_CCRPEF_Msk (0x1UL << PWR_SCR_CCRPEF_Pos)
#define PWR_SCR_CCRPEF PWR_SCR_CCRPEF_Msk
#define PWR_SCR_CBLEAF_Pos (12U)
#define PWR_SCR_CBLEAF_Msk (0x1UL << PWR_SCR_CBLEAF_Pos)
#define PWR_SCR_CBLEAF PWR_SCR_CBLEAF_Msk
#define PWR_SCR_C802AF_Pos (13U)
#define PWR_SCR_C802AF_Msk (0x1UL << PWR_SCR_C802AF_Pos)
#define PWR_SCR_C802AF PWR_SCR_C802AF_Msk
#define PWR_SCR_CC2HF_Pos (14U)
#define PWR_SCR_CC2HF_Msk (0x1UL << PWR_SCR_CC2HF_Pos)
#define PWR_SCR_CC2HF PWR_SCR_CC2HF_Msk
#define PWR_CR5_SMPSVOS_Pos (0U)
#define PWR_CR5_SMPSVOS_Msk (0xFUL << PWR_CR5_SMPSVOS_Pos)
#define PWR_CR5_SMPSVOS PWR_CR5_SMPSVOS_Msk
#define PWR_CR5_SMPSVOS_0 (0x01U << PWR_CR5_SMPSVOS_Pos)
#define PWR_CR5_SMPSVOS_1 (0x02U << PWR_CR5_SMPSVOS_Pos)
#define PWR_CR5_SMPSVOS_2 (0x04U << PWR_CR5_SMPSVOS_Pos)
#define PWR_CR5_SMPSVOS_3 (0x08U << PWR_CR5_SMPSVOS_Pos)
#define PWR_CR5_SMPSSC_Pos (4U)
#define PWR_CR5_SMPSSC_Msk (0x7UL << PWR_CR5_SMPSSC_Pos)
#define PWR_CR5_SMPSSC PWR_CR5_SMPSSC_Msk
#define PWR_CR5_SMPSSC_0 (0x01U << PWR_CR5_SMPSSC_Pos)
#define PWR_CR5_SMPSSC_1 (0x02U << PWR_CR5_SMPSSC_Pos)
#define PWR_CR5_SMPSSC_2 (0x04U << PWR_CR5_SMPSSC_Pos)
#define PWR_CR5_BORHC_Pos (8U)
#define PWR_CR5_BORHC_Msk (0x1UL << PWR_CR5_BORHC_Pos)
#define PWR_CR5_BORHC PWR_CR5_BORHC_Msk
#define PWR_CR5_SMPSEN_Pos (15U)
#define PWR_CR5_SMPSEN_Msk (0x1UL << PWR_CR5_SMPSEN_Pos)
#define PWR_CR5_SMPSEN PWR_CR5_SMPSEN_Msk
#define PWR_PUCRA_PA0_Pos (0U)
#define PWR_PUCRA_PA0_Msk (0x1UL << PWR_PUCRA_PA0_Pos)
#define PWR_PUCRA_PA0 PWR_PUCRA_PA0_Msk
#define PWR_PUCRA_PA1_Pos (1U)
#define PWR_PUCRA_PA1_Msk (0x1UL << PWR_PUCRA_PA1_Pos)
#define PWR_PUCRA_PA1 PWR_PUCRA_PA1_Msk
#define PWR_PUCRA_PA2_Pos (2U)
#define PWR_PUCRA_PA2_Msk (0x1UL << PWR_PUCRA_PA2_Pos)
#define PWR_PUCRA_PA2 PWR_PUCRA_PA2_Msk
#define PWR_PUCRA_PA3_Pos (3U)
#define PWR_PUCRA_PA3_Msk (0x1UL << PWR_PUCRA_PA3_Pos)
#define PWR_PUCRA_PA3 PWR_PUCRA_PA3_Msk
#define PWR_PUCRA_PA4_Pos (4U)
#define PWR_PUCRA_PA4_Msk (0x1UL << PWR_PUCRA_PA4_Pos)
#define PWR_PUCRA_PA4 PWR_PUCRA_PA4_Msk
#define PWR_PUCRA_PA5_Pos (5U)
#define PWR_PUCRA_PA5_Msk (0x1UL << PWR_PUCRA_PA5_Pos)
#define PWR_PUCRA_PA5 PWR_PUCRA_PA5_Msk
#define PWR_PUCRA_PA6_Pos (6U)
#define PWR_PUCRA_PA6_Msk (0x1UL << PWR_PUCRA_PA6_Pos)
#define PWR_PUCRA_PA6 PWR_PUCRA_PA6_Msk
#define PWR_PUCRA_PA7_Pos (7U)
#define PWR_PUCRA_PA7_Msk (0x1UL << PWR_PUCRA_PA7_Pos)
#define PWR_PUCRA_PA7 PWR_PUCRA_PA7_Msk
#define PWR_PUCRA_PA8_Pos (8U)
#define PWR_PUCRA_PA8_Msk (0x1UL << PWR_PUCRA_PA8_Pos)
#define PWR_PUCRA_PA8 PWR_PUCRA_PA8_Msk
#define PWR_PUCRA_PA9_Pos (9U)
#define PWR_PUCRA_PA9_Msk (0x1UL << PWR_PUCRA_PA9_Pos)
#define PWR_PUCRA_PA9 PWR_PUCRA_PA9_Msk
#define PWR_PUCRA_PA10_Pos (10U)
#define PWR_PUCRA_PA10_Msk (0x1UL << PWR_PUCRA_PA10_Pos)
#define PWR_PUCRA_PA10 PWR_PUCRA_PA10_Msk
#define PWR_PUCRA_PA11_Pos (11U)
#define PWR_PUCRA_PA11_Msk (0x1UL << PWR_PUCRA_PA11_Pos)
#define PWR_PUCRA_PA11 PWR_PUCRA_PA11_Msk
#define PWR_PUCRA_PA12_Pos (12U)
#define PWR_PUCRA_PA12_Msk (0x1UL << PWR_PUCRA_PA12_Pos)
#define PWR_PUCRA_PA12 PWR_PUCRA_PA12_Msk
#define PWR_PUCRA_PA13_Pos (13U)
#define PWR_PUCRA_PA13_Msk (0x1UL << PWR_PUCRA_PA13_Pos)
#define PWR_PUCRA_PA13 PWR_PUCRA_PA13_Msk
#define PWR_PUCRA_PA15_Pos (15U)
#define PWR_PUCRA_PA15_Msk (0x1UL << PWR_PUCRA_PA15_Pos)
#define PWR_PUCRA_PA15 PWR_PUCRA_PA15_Msk
#define PWR_PDCRA_PA0_Pos (0U)
#define PWR_PDCRA_PA0_Msk (0x1UL << PWR_PDCRA_PA0_Pos)
#define PWR_PDCRA_PA0 PWR_PDCRA_PA0_Msk
#define PWR_PDCRA_PA1_Pos (1U)
#define PWR_PDCRA_PA1_Msk (0x1UL << PWR_PDCRA_PA1_Pos)
#define PWR_PDCRA_PA1 PWR_PDCRA_PA1_Msk
#define PWR_PDCRA_PA2_Pos (2U)
#define PWR_PDCRA_PA2_Msk (0x1UL << PWR_PDCRA_PA2_Pos)
#define PWR_PDCRA_PA2 PWR_PDCRA_PA2_Msk
#define PWR_PDCRA_PA3_Pos (3U)
#define PWR_PDCRA_PA3_Msk (0x1UL << PWR_PDCRA_PA3_Pos)
#define PWR_PDCRA_PA3 PWR_PDCRA_PA3_Msk
#define PWR_PDCRA_PA4_Pos (4U)
#define PWR_PDCRA_PA4_Msk (0x1UL << PWR_PDCRA_PA4_Pos)
#define PWR_PDCRA_PA4 PWR_PDCRA_PA4_Msk
#define PWR_PDCRA_PA5_Pos (5U)
#define PWR_PDCRA_PA5_Msk (0x1UL << PWR_PDCRA_PA5_Pos)
#define PWR_PDCRA_PA5 PWR_PDCRA_PA5_Msk
#define PWR_PDCRA_PA6_Pos (6U)
#define PWR_PDCRA_PA6_Msk (0x1UL << PWR_PDCRA_PA6_Pos)
#define PWR_PDCRA_PA6 PWR_PDCRA_PA6_Msk
#define PWR_PDCRA_PA7_Pos (7U)
#define PWR_PDCRA_PA7_Msk (0x1UL << PWR_PDCRA_PA7_Pos)
#define PWR_PDCRA_PA7 PWR_PDCRA_PA7_Msk
#define PWR_PDCRA_PA8_Pos (8U)
#define PWR_PDCRA_PA8_Msk (0x1UL << PWR_PDCRA_PA8_Pos)
#define PWR_PDCRA_PA8 PWR_PDCRA_PA8_Msk
#define PWR_PDCRA_PA9_Pos (9U)
#define PWR_PDCRA_PA9_Msk (0x1UL << PWR_PDCRA_PA9_Pos)
#define PWR_PDCRA_PA9 PWR_PDCRA_PA9_Msk
#define PWR_PDCRA_PA10_Pos (10U)
#define PWR_PDCRA_PA10_Msk (0x1UL << PWR_PDCRA_PA10_Pos)
#define PWR_PDCRA_PA10 PWR_PDCRA_PA10_Msk
#define PWR_PDCRA_PA11_Pos (11U)
#define PWR_PDCRA_PA11_Msk (0x1UL << PWR_PDCRA_PA11_Pos)
#define PWR_PDCRA_PA11 PWR_PDCRA_PA11_Msk
#define PWR_PDCRA_PA12_Pos (12U)
#define PWR_PDCRA_PA12_Msk (0x1UL << PWR_PDCRA_PA12_Pos)
#define PWR_PDCRA_PA12 PWR_PDCRA_PA12_Msk
#define PWR_PDCRA_PA14_Pos (14U)
#define PWR_PDCRA_PA14_Msk (0x1UL << PWR_PDCRA_PA14_Pos)
#define PWR_PDCRA_PA14 PWR_PDCRA_PA14_Msk
#define PWR_PUCRB_PB0_Pos (0U)
#define PWR_PUCRB_PB0_Msk (0x1UL << PWR_PUCRB_PB0_Pos)
#define PWR_PUCRB_PB0 PWR_PUCRB_PB0_Msk
#define PWR_PUCRB_PB1_Pos (1U)
#define PWR_PUCRB_PB1_Msk (0x1UL << PWR_PUCRB_PB1_Pos)
#define PWR_PUCRB_PB1 PWR_PUCRB_PB1_Msk
#define PWR_PUCRB_PB2_Pos (2U)
#define PWR_PUCRB_PB2_Msk (0x1UL << PWR_PUCRB_PB2_Pos)
#define PWR_PUCRB_PB2 PWR_PUCRB_PB2_Msk
#define PWR_PUCRB_PB3_Pos (3U)
#define PWR_PUCRB_PB3_Msk (0x1UL << PWR_PUCRB_PB3_Pos)
#define PWR_PUCRB_PB3 PWR_PUCRB_PB3_Msk
#define PWR_PUCRB_PB4_Pos (4U)
#define PWR_PUCRB_PB4_Msk (0x1UL << PWR_PUCRB_PB4_Pos)
#define PWR_PUCRB_PB4 PWR_PUCRB_PB4_Msk
#define PWR_PUCRB_PB5_Pos (5U)
#define PWR_PUCRB_PB5_Msk (0x1UL << PWR_PUCRB_PB5_Pos)
#define PWR_PUCRB_PB5 PWR_PUCRB_PB5_Msk
#define PWR_PUCRB_PB6_Pos (6U)
#define PWR_PUCRB_PB6_Msk (0x1UL << PWR_PUCRB_PB6_Pos)
#define PWR_PUCRB_PB6 PWR_PUCRB_PB6_Msk
#define PWR_PUCRB_PB7_Pos (7U)
#define PWR_PUCRB_PB7_Msk (0x1UL << PWR_PUCRB_PB7_Pos)
#define PWR_PUCRB_PB7 PWR_PUCRB_PB7_Msk
#define PWR_PUCRB_PB8_Pos (8U)
#define PWR_PUCRB_PB8_Msk (0x1UL << PWR_PUCRB_PB8_Pos)
#define PWR_PUCRB_PB8 PWR_PUCRB_PB8_Msk
#define PWR_PUCRB_PB9_Pos (9U)
#define PWR_PUCRB_PB9_Msk (0x1UL << PWR_PUCRB_PB9_Pos)
#define PWR_PUCRB_PB9 PWR_PUCRB_PB9_Msk
#define PWR_PUCRB_PB10_Pos (10U)
#define PWR_PUCRB_PB10_Msk (0x1UL << PWR_PUCRB_PB10_Pos)
#define PWR_PUCRB_PB10 PWR_PUCRB_PB10_Msk
#define PWR_PUCRB_PB11_Pos (11U)
#define PWR_PUCRB_PB11_Msk (0x1UL << PWR_PUCRB_PB11_Pos)
#define PWR_PUCRB_PB11 PWR_PUCRB_PB11_Msk
#define PWR_PUCRB_PB12_Pos (12U)
#define PWR_PUCRB_PB12_Msk (0x1UL << PWR_PUCRB_PB12_Pos)
#define PWR_PUCRB_PB12 PWR_PUCRB_PB12_Msk
#define PWR_PUCRB_PB13_Pos (13U)
#define PWR_PUCRB_PB13_Msk (0x1UL << PWR_PUCRB_PB13_Pos)
#define PWR_PUCRB_PB13 PWR_PUCRB_PB13_Msk
#define PWR_PUCRB_PB14_Pos (14U)
#define PWR_PUCRB_PB14_Msk (0x1UL << PWR_PUCRB_PB14_Pos)
#define PWR_PUCRB_PB14 PWR_PUCRB_PB14_Msk
#define PWR_PUCRB_PB15_Pos (15U)
#define PWR_PUCRB_PB15_Msk (0x1UL << PWR_PUCRB_PB15_Pos)
#define PWR_PUCRB_PB15 PWR_PUCRB_PB15_Msk
#define PWR_PDCRB_PB0_Pos (0U)
#define PWR_PDCRB_PB0_Msk (0x1UL << PWR_PDCRB_PB0_Pos)
#define PWR_PDCRB_PB0 PWR_PDCRB_PB0_Msk
#define PWR_PDCRB_PB1_Pos (1U)
#define PWR_PDCRB_PB1_Msk (0x1UL << PWR_PDCRB_PB1_Pos)
#define PWR_PDCRB_PB1 PWR_PDCRB_PB1_Msk
#define PWR_PDCRB_PB2_Pos (2U)
#define PWR_PDCRB_PB2_Msk (0x1UL << PWR_PDCRB_PB2_Pos)
#define PWR_PDCRB_PB2 PWR_PDCRB_PB2_Msk
#define PWR_PDCRB_PB3_Pos (3U)
#define PWR_PDCRB_PB3_Msk (0x1UL << PWR_PDCRB_PB3_Pos)
#define PWR_PDCRB_PB3 PWR_PDCRB_PB3_Msk
#define PWR_PDCRB_PB5_Pos (5U)
#define PWR_PDCRB_PB5_Msk (0x1UL << PWR_PDCRB_PB5_Pos)
#define PWR_PDCRB_PB5 PWR_PDCRB_PB5_Msk
#define PWR_PDCRB_PB6_Pos (6U)
#define PWR_PDCRB_PB6_Msk (0x1UL << PWR_PDCRB_PB6_Pos)
#define PWR_PDCRB_PB6 PWR_PDCRB_PB6_Msk
#define PWR_PDCRB_PB7_Pos (7U)
#define PWR_PDCRB_PB7_Msk (0x1UL << PWR_PDCRB_PB7_Pos)
#define PWR_PDCRB_PB7 PWR_PDCRB_PB7_Msk
#define PWR_PDCRB_PB8_Pos (8U)
#define PWR_PDCRB_PB8_Msk (0x1UL << PWR_PDCRB_PB8_Pos)
#define PWR_PDCRB_PB8 PWR_PDCRB_PB8_Msk
#define PWR_PDCRB_PB9_Pos (9U)
#define PWR_PDCRB_PB9_Msk (0x1UL << PWR_PDCRB_PB9_Pos)
#define PWR_PDCRB_PB9 PWR_PDCRB_PB9_Msk
#define PWR_PDCRB_PB10_Pos (10U)
#define PWR_PDCRB_PB10_Msk (0x1UL << PWR_PDCRB_PB10_Pos)
#define PWR_PDCRB_PB10 PWR_PDCRB_PB10_Msk
#define PWR_PDCRB_PB11_Pos (11U)
#define PWR_PDCRB_PB11_Msk (0x1UL << PWR_PDCRB_PB11_Pos)
#define PWR_PDCRB_PB11 PWR_PDCRB_PB11_Msk
#define PWR_PDCRB_PB12_Pos (12U)
#define PWR_PDCRB_PB12_Msk (0x1UL << PWR_PDCRB_PB12_Pos)
#define PWR_PDCRB_PB12 PWR_PDCRB_PB12_Msk
#define PWR_PDCRB_PB13_Pos (13U)
#define PWR_PDCRB_PB13_Msk (0x1UL << PWR_PDCRB_PB13_Pos)
#define PWR_PDCRB_PB13 PWR_PDCRB_PB13_Msk
#define PWR_PDCRB_PB14_Pos (14U)
#define PWR_PDCRB_PB14_Msk (0x1UL << PWR_PDCRB_PB14_Pos)
#define PWR_PDCRB_PB14 PWR_PDCRB_PB14_Msk
#define PWR_PDCRB_PB15_Pos (15U)
#define PWR_PDCRB_PB15_Msk (0x1UL << PWR_PDCRB_PB15_Pos)
#define PWR_PDCRB_PB15 PWR_PDCRB_PB15_Msk
#define PWR_PUCRC_PC0_Pos (0U)
#define PWR_PUCRC_PC0_Msk (0x1UL << PWR_PUCRC_PC0_Pos)
#define PWR_PUCRC_PC0 PWR_PUCRC_PC0_Msk
#define PWR_PUCRC_PC1_Pos (1U)
#define PWR_PUCRC_PC1_Msk (0x1UL << PWR_PUCRC_PC1_Pos)
#define PWR_PUCRC_PC1 PWR_PUCRC_PC1_Msk
#define PWR_PUCRC_PC2_Pos (2U)
#define PWR_PUCRC_PC2_Msk (0x1UL << PWR_PUCRC_PC2_Pos)
#define PWR_PUCRC_PC2 PWR_PUCRC_PC2_Msk
#define PWR_PUCRC_PC3_Pos (3U)
#define PWR_PUCRC_PC3_Msk (0x1UL << PWR_PUCRC_PC3_Pos)
#define PWR_PUCRC_PC3 PWR_PUCRC_PC3_Msk
#define PWR_PUCRC_PC4_Pos (4U)
#define PWR_PUCRC_PC4_Msk (0x1UL << PWR_PUCRC_PC4_Pos)
#define PWR_PUCRC_PC4 PWR_PUCRC_PC4_Msk
#define PWR_PUCRC_PC5_Pos (5U)
#define PWR_PUCRC_PC5_Msk (0x1UL << PWR_PUCRC_PC5_Pos)
#define PWR_PUCRC_PC5 PWR_PUCRC_PC5_Msk
#define PWR_PUCRC_PC6_Pos (6U)
#define PWR_PUCRC_PC6_Msk (0x1UL << PWR_PUCRC_PC6_Pos)
#define PWR_PUCRC_PC6 PWR_PUCRC_PC6_Msk
#define PWR_PUCRC_PC7_Pos (7U)
#define PWR_PUCRC_PC7_Msk (0x1UL << PWR_PUCRC_PC7_Pos)
#define PWR_PUCRC_PC7 PWR_PUCRC_PC7_Msk
#define PWR_PUCRC_PC8_Pos (8U)
#define PWR_PUCRC_PC8_Msk (0x1UL << PWR_PUCRC_PC8_Pos)
#define PWR_PUCRC_PC8 PWR_PUCRC_PC8_Msk
#define PWR_PUCRC_PC9_Pos (9U)
#define PWR_PUCRC_PC9_Msk (0x1UL << PWR_PUCRC_PC9_Pos)
#define PWR_PUCRC_PC9 PWR_PUCRC_PC9_Msk
#define PWR_PUCRC_PC10_Pos (10U)
#define PWR_PUCRC_PC10_Msk (0x1UL << PWR_PUCRC_PC10_Pos)
#define PWR_PUCRC_PC10 PWR_PUCRC_PC10_Msk
#define PWR_PUCRC_PC11_Pos (11U)
#define PWR_PUCRC_PC11_Msk (0x1UL << PWR_PUCRC_PC11_Pos)
#define PWR_PUCRC_PC11 PWR_PUCRC_PC11_Msk
#define PWR_PUCRC_PC12_Pos (12U)
#define PWR_PUCRC_PC12_Msk (0x1UL << PWR_PUCRC_PC12_Pos)
#define PWR_PUCRC_PC12 PWR_PUCRC_PC12_Msk
#define PWR_PUCRC_PC13_Pos (13U)
#define PWR_PUCRC_PC13_Msk (0x1UL << PWR_PUCRC_PC13_Pos)
#define PWR_PUCRC_PC13 PWR_PUCRC_PC13_Msk
#define PWR_PUCRC_PC14_Pos (14U)
#define PWR_PUCRC_PC14_Msk (0x1UL << PWR_PUCRC_PC14_Pos)
#define PWR_PUCRC_PC14 PWR_PUCRC_PC14_Msk
#define PWR_PUCRC_PC15_Pos (15U)
#define PWR_PUCRC_PC15_Msk (0x1UL << PWR_PUCRC_PC15_Pos)
#define PWR_PUCRC_PC15 PWR_PUCRC_PC15_Msk
#define PWR_PDCRC_PC0_Pos (0U)
#define PWR_PDCRC_PC0_Msk (0x1UL << PWR_PDCRC_PC0_Pos)
#define PWR_PDCRC_PC0 PWR_PDCRC_PC0_Msk
#define PWR_PDCRC_PC1_Pos (1U)
#define PWR_PDCRC_PC1_Msk (0x1UL << PWR_PDCRC_PC1_Pos)
#define PWR_PDCRC_PC1 PWR_PDCRC_PC1_Msk
#define PWR_PDCRC_PC2_Pos (2U)
#define PWR_PDCRC_PC2_Msk (0x1UL << PWR_PDCRC_PC2_Pos)
#define PWR_PDCRC_PC2 PWR_PDCRC_PC2_Msk
#define PWR_PDCRC_PC3_Pos (3U)
#define PWR_PDCRC_PC3_Msk (0x1UL << PWR_PDCRC_PC3_Pos)
#define PWR_PDCRC_PC3 PWR_PDCRC_PC3_Msk
#define PWR_PDCRC_PC4_Pos (4U)
#define PWR_PDCRC_PC4_Msk (0x1UL << PWR_PDCRC_PC4_Pos)
#define PWR_PDCRC_PC4 PWR_PDCRC_PC4_Msk
#define PWR_PDCRC_PC5_Pos (5U)
#define PWR_PDCRC_PC5_Msk (0x1UL << PWR_PDCRC_PC5_Pos)
#define PWR_PDCRC_PC5 PWR_PDCRC_PC5_Msk
#define PWR_PDCRC_PC6_Pos (6U)
#define PWR_PDCRC_PC6_Msk (0x1UL << PWR_PDCRC_PC6_Pos)
#define PWR_PDCRC_PC6 PWR_PDCRC_PC6_Msk
#define PWR_PDCRC_PC7_Pos (7U)
#define PWR_PDCRC_PC7_Msk (0x1UL << PWR_PDCRC_PC7_Pos)
#define PWR_PDCRC_PC7 PWR_PDCRC_PC7_Msk
#define PWR_PDCRC_PC8_Pos (8U)
#define PWR_PDCRC_PC8_Msk (0x1UL << PWR_PDCRC_PC8_Pos)
#define PWR_PDCRC_PC8 PWR_PDCRC_PC8_Msk
#define PWR_PDCRC_PC9_Pos (9U)
#define PWR_PDCRC_PC9_Msk (0x1UL << PWR_PDCRC_PC9_Pos)
#define PWR_PDCRC_PC9 PWR_PDCRC_PC9_Msk
#define PWR_PDCRC_PC10_Pos (10U)
#define PWR_PDCRC_PC10_Msk (0x1UL << PWR_PDCRC_PC10_Pos)
#define PWR_PDCRC_PC10 PWR_PDCRC_PC10_Msk
#define PWR_PDCRC_PC11_Pos (11U)
#define PWR_PDCRC_PC11_Msk (0x1UL << PWR_PDCRC_PC11_Pos)
#define PWR_PDCRC_PC11 PWR_PDCRC_PC11_Msk
#define PWR_PDCRC_PC12_Pos (12U)
#define PWR_PDCRC_PC12_Msk (0x1UL << PWR_PDCRC_PC12_Pos)
#define PWR_PDCRC_PC12 PWR_PDCRC_PC12_Msk
#define PWR_PDCRC_PC13_Pos (13U)
#define PWR_PDCRC_PC13_Msk (0x1UL << PWR_PDCRC_PC13_Pos)
#define PWR_PDCRC_PC13 PWR_PDCRC_PC13_Msk
#define PWR_PDCRC_PC14_Pos (14U)
#define PWR_PDCRC_PC14_Msk (0x1UL << PWR_PDCRC_PC14_Pos)
#define PWR_PDCRC_PC14 PWR_PDCRC_PC14_Msk
#define PWR_PDCRC_PC15_Pos (15U)
#define PWR_PDCRC_PC15_Msk (0x1UL << PWR_PDCRC_PC15_Pos)
#define PWR_PDCRC_PC15 PWR_PDCRC_PC15_Msk
#define PWR_PUCRD_PD0_Pos (0U)
#define PWR_PUCRD_PD0_Msk (0x1UL << PWR_PUCRD_PD0_Pos)
#define PWR_PUCRD_PD0 PWR_PUCRD_PD0_Msk
#define PWR_PUCRD_PD1_Pos (1U)
#define PWR_PUCRD_PD1_Msk (0x1UL << PWR_PUCRD_PD1_Pos)
#define PWR_PUCRD_PD1 PWR_PUCRD_PD1_Msk
#define PWR_PUCRD_PD2_Pos (2U)
#define PWR_PUCRD_PD2_Msk (0x1UL << PWR_PUCRD_PD2_Pos)
#define PWR_PUCRD_PD2 PWR_PUCRD_PD2_Msk
#define PWR_PUCRD_PD3_Pos (3U)
#define PWR_PUCRD_PD3_Msk (0x1UL << PWR_PUCRD_PD3_Pos)
#define PWR_PUCRD_PD3 PWR_PUCRD_PD3_Msk
#define PWR_PUCRD_PD4_Pos (4U)
#define PWR_PUCRD_PD4_Msk (0x1UL << PWR_PUCRD_PD4_Pos)
#define PWR_PUCRD_PD4 PWR_PUCRD_PD4_Msk
#define PWR_PUCRD_PD5_Pos (5U)
#define PWR_PUCRD_PD5_Msk (0x1UL << PWR_PUCRD_PD5_Pos)
#define PWR_PUCRD_PD5 PWR_PUCRD_PD5_Msk
#define PWR_PUCRD_PD6_Pos (6U)
#define PWR_PUCRD_PD6_Msk (0x1UL << PWR_PUCRD_PD6_Pos)
#define PWR_PUCRD_PD6 PWR_PUCRD_PD6_Msk
#define PWR_PUCRD_PD8_Pos (8U)
#define PWR_PUCRD_PD8_Msk (0x1UL << PWR_PUCRD_PD8_Pos)
#define PWR_PUCRD_PD8 PWR_PUCRD_PD8_Msk
#define PWR_PUCRD_PD9_Pos (9U)
#define PWR_PUCRD_PD9_Msk (0x1UL << PWR_PUCRD_PD9_Pos)
#define PWR_PUCRD_PD9 PWR_PUCRD_PD9_Msk
#define PWR_PUCRD_PD10_Pos (10U)
#define PWR_PUCRD_PD10_Msk (0x1UL << PWR_PUCRD_PD10_Pos)
#define PWR_PUCRD_PD10 PWR_PUCRD_PD10_Msk
#define PWR_PUCRD_PD11_Pos (11U)
#define PWR_PUCRD_PD11_Msk (0x1UL << PWR_PUCRD_PD11_Pos)
#define PWR_PUCRD_PD11 PWR_PUCRD_PD11_Msk
#define PWR_PUCRD_PD12_Pos (12U)
#define PWR_PUCRD_PD12_Msk (0x1UL << PWR_PUCRD_PD12_Pos)
#define PWR_PUCRD_PD12 PWR_PUCRD_PD12_Msk
#define PWR_PUCRD_PD13_Pos (13U)
#define PWR_PUCRD_PD13_Msk (0x1UL << PWR_PUCRD_PD13_Pos)
#define PWR_PUCRD_PD13 PWR_PUCRD_PD13_Msk
#define PWR_PUCRD_PD14_Pos (14U)
#define PWR_PUCRD_PD14_Msk (0x1UL << PWR_PUCRD_PD14_Pos)
#define PWR_PUCRD_PD14 PWR_PUCRD_PD14_Msk
#define PWR_PUCRD_PD15_Pos (15U)
#define PWR_PUCRD_PD15_Msk (0x1UL << PWR_PUCRD_PD15_Pos)
#define PWR_PUCRD_PD15 PWR_PUCRD_PD15_Msk
#define PWR_PDCRD_PD0_Pos (0U)
#define PWR_PDCRD_PD0_Msk (0x1UL << PWR_PDCRD_PD0_Pos)
#define PWR_PDCRD_PD0 PWR_PDCRD_PD0_Msk
#define PWR_PDCRD_PD1_Pos (1U)
#define PWR_PDCRD_PD1_Msk (0x1UL << PWR_PDCRD_PD1_Pos)
#define PWR_PDCRD_PD1 PWR_PDCRD_PD1_Msk
#define PWR_PDCRD_PD2_Pos (2U)
#define PWR_PDCRD_PD2_Msk (0x1UL << PWR_PDCRD_PD2_Pos)
#define PWR_PDCRD_PD2 PWR_PDCRD_PD2_Msk
#define PWR_PDCRD_PD3_Pos (3U)
#define PWR_PDCRD_PD3_Msk (0x1UL << PWR_PDCRD_PD3_Pos)
#define PWR_PDCRD_PD3 PWR_PDCRD_PD3_Msk
#define PWR_PDCRD_PD4_Pos (4U)
#define PWR_PDCRD_PD4_Msk (0x1UL << PWR_PDCRD_PD4_Pos)
#define PWR_PDCRD_PD4 PWR_PDCRD_PD4_Msk
#define PWR_PDCRD_PD5_Pos (5U)
#define PWR_PDCRD_PD5_Msk (0x1UL << PWR_PDCRD_PD5_Pos)
#define PWR_PDCRD_PD5 PWR_PDCRD_PD5_Msk
#define PWR_PDCRD_PD6_Pos (6U)
#define PWR_PDCRD_PD6_Msk (0x1UL << PWR_PDCRD_PD6_Pos)
#define PWR_PDCRD_PD6 PWR_PDCRD_PD6_Msk
#define PWR_PDCRD_PD8_Pos (8U)
#define PWR_PDCRD_PD8_Msk (0x1UL << PWR_PDCRD_PD8_Pos)
#define PWR_PDCRD_PD8 PWR_PDCRD_PD8_Msk
#define PWR_PDCRD_PD9_Pos (9U)
#define PWR_PDCRD_PD9_Msk (0x1UL << PWR_PDCRD_PD9_Pos)
#define PWR_PDCRD_PD9 PWR_PDCRD_PD9_Msk
#define PWR_PDCRD_PD10_Pos (10U)
#define PWR_PDCRD_PD10_Msk (0x1UL << PWR_PDCRD_PD10_Pos)
#define PWR_PDCRD_PD10 PWR_PDCRD_PD10_Msk
#define PWR_PDCRD_PD11_Pos (11U)
#define PWR_PDCRD_PD11_Msk (0x1UL << PWR_PDCRD_PD11_Pos)
#define PWR_PDCRD_PD11 PWR_PDCRD_PD11_Msk
#define PWR_PDCRD_PD12_Pos (12U)
#define PWR_PDCRD_PD12_Msk (0x1UL << PWR_PDCRD_PD12_Pos)
#define PWR_PDCRD_PD12 PWR_PDCRD_PD12_Msk
#define PWR_PDCRD_PD13_Pos (13U)
#define PWR_PDCRD_PD13_Msk (0x1UL << PWR_PDCRD_PD13_Pos)
#define PWR_PDCRD_PD13 PWR_PDCRD_PD13_Msk
#define PWR_PDCRD_PD14_Pos (14U)
#define PWR_PDCRD_PD14_Msk (0x1UL << PWR_PDCRD_PD14_Pos)
#define PWR_PDCRD_PD14 PWR_PDCRD_PD14_Msk
#define PWR_PDCRD_PD15_Pos (15U)
#define PWR_PDCRD_PD15_Msk (0x1UL << PWR_PDCRD_PD15_Pos)
#define PWR_PDCRD_PD15 PWR_PDCRD_PD15_Msk
#define PWR_PUCRE_PE0_Pos (0U)
#define PWR_PUCRE_PE0_Msk (0x1UL << PWR_PUCRE_PE0_Pos)
#define PWR_PUCRE_PE0 PWR_PUCRE_PE0_Msk
#define PWR_PUCRE_PE1_Pos (1U)
#define PWR_PUCRE_PE1_Msk (0x1UL << PWR_PUCRE_PE1_Pos)
#define PWR_PUCRE_PE1 PWR_PUCRE_PE1_Msk
#define PWR_PUCRE_PE2_Pos (2U)
#define PWR_PUCRE_PE2_Msk (0x1UL << PWR_PUCRE_PE2_Pos)
#define PWR_PUCRE_PE2 PWR_PUCRE_PE2_Msk
#define PWR_PUCRE_PE3_Pos (3U)
#define PWR_PUCRE_PE3_Msk (0x1UL << PWR_PUCRE_PE3_Pos)
#define PWR_PUCRE_PE3 PWR_PUCRE_PE3_Msk
#define PWR_PUCRE_PE4_Pos (4U)
#define PWR_PUCRE_PE4_Msk (0x1UL << PWR_PUCRE_PE4_Pos)
#define PWR_PUCRE_PE4 PWR_PUCRE_PE4_Msk
#define PWR_PDCRE_PE0_Pos (0U)
#define PWR_PDCRE_PE0_Msk (0x1UL << PWR_PDCRE_PE0_Pos)
#define PWR_PDCRE_PE0 PWR_PDCRE_PE0_Msk
#define PWR_PDCRE_PE1_Pos (1U)
#define PWR_PDCRE_PE1_Msk (0x1UL << PWR_PDCRE_PE1_Pos)
#define PWR_PDCRE_PE1 PWR_PDCRE_PE1_Msk
#define PWR_PDCRE_PE2_Pos (2U)
#define PWR_PDCRE_PE2_Msk (0x1UL << PWR_PDCRE_PE2_Pos)
#define PWR_PDCRE_PE2 PWR_PDCRE_PE2_Msk
#define PWR_PDCRE_PE3_Pos (3U)
#define PWR_PDCRE_PE3_Msk (0x1UL << PWR_PDCRE_PE3_Pos)
#define PWR_PDCRE_PE3 PWR_PDCRE_PE3_Msk
#define PWR_PDCRE_PE4_Pos (4U)
#define PWR_PDCRE_PE4_Msk (0x1UL << PWR_PDCRE_PE4_Pos)
#define PWR_PDCRE_PE4 PWR_PDCRE_PE4_Msk
#define PWR_PUCRH_PH0_Pos (0U)
#define PWR_PUCRH_PH0_Msk (0x1UL << PWR_PUCRH_PH0_Pos)
#define PWR_PUCRH_PH0 PWR_PUCRH_PH0_Msk
#define PWR_PUCRH_PH1_Pos (1U)
#define PWR_PUCRH_PH1_Msk (0x1UL << PWR_PUCRH_PH1_Pos)
#define PWR_PUCRH_PH1 PWR_PUCRH_PH1_Msk
#define PWR_PUCRH_PH3_Pos (3U)
#define PWR_PUCRH_PH3_Msk (0x1UL << PWR_PUCRH_PH3_Pos)
#define PWR_PUCRH_PH3 PWR_PUCRH_PH3_Msk
#define PWR_PDCRH_PH0_Pos (0U)
#define PWR_PDCRH_PH0_Msk (0x1UL << PWR_PDCRH_PH0_Pos)
#define PWR_PDCRH_PH0 PWR_PDCRH_PH0_Msk
#define PWR_PDCRH_PH1_Pos (1U)
#define PWR_PDCRH_PH1_Msk (0x1UL << PWR_PDCRH_PH1_Pos)
#define PWR_PDCRH_PH1 PWR_PDCRH_PH1_Msk
#define PWR_PDCRH_PH3_Pos (3U)
#define PWR_PDCRH_PH3_Msk (0x1UL << PWR_PDCRH_PH3_Pos)
#define PWR_PDCRH_PH3 PWR_PDCRH_PH3_Msk
#define PWR_C2CR1_LPMS_Pos (0U)
#define PWR_C2CR1_LPMS_Msk (0x7UL << PWR_C2CR1_LPMS_Pos)
#define PWR_C2CR1_LPMS PWR_C2CR1_LPMS_Msk
#define PWR_C2CR1_LPMS_0 (0x1U << PWR_C2CR1_LPMS_Pos)
#define PWR_C2CR1_LPMS_1 (0x2U << PWR_C2CR1_LPMS_Pos)
#define PWR_C2CR1_LPMS_2 (0x4U << PWR_C2CR1_LPMS_Pos)
#define PWR_C2CR1_FPDR_Pos (4U)
#define PWR_C2CR1_FPDR_Msk (0x1UL << PWR_C2CR1_FPDR_Pos)
#define PWR_C2CR1_FPDR PWR_C2CR1_FPDR_Msk
#define PWR_C2CR1_FPDS_Pos (5U)
#define PWR_C2CR1_FPDS_Msk (0x1UL << PWR_C2CR1_FPDS_Pos)
#define PWR_C2CR1_FPDS PWR_C2CR1_FPDS_Msk
#define PWR_C2CR1_BLEEWKUP_Pos (14U)
#define PWR_C2CR1_BLEEWKUP_Msk (0x1UL << PWR_C2CR1_BLEEWKUP_Pos)
#define PWR_C2CR1_BLEEWKUP PWR_C2CR1_BLEEWKUP_Msk
#define PWR_C2CR1_802EWKUP_Pos (15U)
#define PWR_C2CR1_802EWKUP_Msk (0x1UL << PWR_C2CR1_802EWKUP_Pos)
#define PWR_C2CR1_802EWKUP PWR_C2CR1_802EWKUP_Msk
#define PWR_C2CR3_EWUP_Pos (0U)
#define PWR_C2CR3_EWUP_Msk (0x1FUL << PWR_C2CR3_EWUP_Pos)
#define PWR_C2CR3_EWUP PWR_C2CR3_EWUP_Msk
#define PWR_C2CR3_EWUP1_Pos (0U)
#define PWR_C2CR3_EWUP1_Msk (0x1UL << PWR_C2CR3_EWUP1_Pos)
#define PWR_C2CR3_EWUP1 PWR_C2CR3_EWUP1_Msk
#define PWR_C2CR3_EWUP2_Pos (1U)
#define PWR_C2CR3_EWUP2_Msk (0x1UL << PWR_C2CR3_EWUP2_Pos)
#define PWR_C2CR3_EWUP2 PWR_C2CR3_EWUP2_Msk
#define PWR_C2CR3_EWUP3_Pos (2U)
#define PWR_C2CR3_EWUP3_Msk (0x1UL << PWR_C2CR3_EWUP3_Pos)
#define PWR_C2CR3_EWUP3 PWR_C2CR3_EWUP3_Msk
#define PWR_C2CR3_EWUP4_Pos (3U)
#define PWR_C2CR3_EWUP4_Msk (0x1UL << PWR_C2CR3_EWUP4_Pos)
#define PWR_C2CR3_EWUP4 PWR_C2CR3_EWUP4_Msk
#define PWR_C2CR3_EWUP5_Pos (4U)
#define PWR_C2CR3_EWUP5_Msk (0x1UL << PWR_C2CR3_EWUP5_Pos)
#define PWR_C2CR3_EWUP5 PWR_C2CR3_EWUP5_Msk
#define PWR_C2CR3_EBLEWUP_Pos (9U)
#define PWR_C2CR3_EBLEWUP_Msk (0x1UL << PWR_C2CR3_EBLEWUP_Pos)
#define PWR_C2CR3_EBLEWUP PWR_C2CR3_EBLEWUP_Msk
#define PWR_C2CR3_E802WUP_Pos (10U)
#define PWR_C2CR3_E802WUP_Msk (0x1UL << PWR_C2CR3_E802WUP_Pos)
#define PWR_C2CR3_E802WUP PWR_C2CR3_E802WUP_Msk
#define PWR_C2CR3_APC_Pos (12U)
#define PWR_C2CR3_APC_Msk (0x1UL << PWR_C2CR3_APC_Pos)
#define PWR_C2CR3_APC PWR_C2CR3_APC_Msk
#define PWR_C2CR3_EIWUL_Pos (15U)
#define PWR_C2CR3_EIWUL_Msk (0x1UL << PWR_C2CR3_EIWUL_Pos)
#define PWR_C2CR3_EIWUL PWR_C2CR3_EIWUL_Msk
#define PWR_EXTSCR_C1CSSF_Pos (0U)
#define PWR_EXTSCR_C1CSSF_Msk (0x1UL << PWR_EXTSCR_C1CSSF_Pos)
#define PWR_EXTSCR_C1CSSF PWR_EXTSCR_C1CSSF_Msk
#define PWR_EXTSCR_C2CSSF_Pos (1U)
#define PWR_EXTSCR_C2CSSF_Msk (0x1UL << PWR_EXTSCR_C2CSSF_Pos)
#define PWR_EXTSCR_C2CSSF PWR_EXTSCR_C2CSSF_Msk
#define PWR_EXTSCR_CCRPF_Pos (2U)
#define PWR_EXTSCR_CCRPF_Msk (0x1UL << PWR_EXTSCR_CCRPF_Pos)
#define PWR_EXTSCR_CCRPF PWR_EXTSCR_CCRPF_Msk
#define PWR_EXTSCR_C1SBF_Pos (8U)
#define PWR_EXTSCR_C1SBF_Msk (0x1UL << PWR_EXTSCR_C1SBF_Pos)
#define PWR_EXTSCR_C1SBF PWR_EXTSCR_C1SBF_Msk
#define PWR_EXTSCR_C1STOPF_Pos (9U)
#define PWR_EXTSCR_C1STOPF_Msk (0x1UL << PWR_EXTSCR_C1STOPF_Pos)
#define PWR_EXTSCR_C1STOPF PWR_EXTSCR_C1STOPF_Msk
#define PWR_EXTSCR_C2SBF_Pos (10U)
#define PWR_EXTSCR_C2SBF_Msk (0x1UL << PWR_EXTSCR_C2SBF_Pos)
#define PWR_EXTSCR_C2SBF PWR_EXTSCR_C2SBF_Msk
#define PWR_EXTSCR_C2STOPF_Pos (11U)
#define PWR_EXTSCR_C2STOPF_Msk (0x1UL << PWR_EXTSCR_C2STOPF_Pos)
#define PWR_EXTSCR_C2STOPF PWR_EXTSCR_C2STOPF_Msk
#define PWR_EXTSCR_CRPF_Pos (13U)
#define PWR_EXTSCR_CRPF_Msk (0x1UL << PWR_EXTSCR_CRPF_Pos)
#define PWR_EXTSCR_CRPF PWR_EXTSCR_CRPF_Msk
#define PWR_EXTSCR_C1DS_Pos (14U)
#define PWR_EXTSCR_C1DS_Msk (0x1UL << PWR_EXTSCR_C1DS_Pos)
#define PWR_EXTSCR_C1DS PWR_EXTSCR_C1DS_Msk
#define PWR_EXTSCR_C2DS_Pos (15U)
#define PWR_EXTSCR_C2DS_Msk (0x1UL << PWR_EXTSCR_C2DS_Pos)
#define PWR_EXTSCR_C2DS PWR_EXTSCR_C2DS_Msk
#define QUADSPI_CR_EN_Pos (0U)
#define QUADSPI_CR_EN_Msk (0x1UL << QUADSPI_CR_EN_Pos)
#define QUADSPI_CR_EN QUADSPI_CR_EN_Msk
#define QUADSPI_CR_ABORT_Pos (1U)
#define QUADSPI_CR_ABORT_Msk (0x1UL << QUADSPI_CR_ABORT_Pos)
#define QUADSPI_CR_ABORT QUADSPI_CR_ABORT_Msk
#define QUADSPI_CR_DMAEN_Pos (2U)
#define QUADSPI_CR_DMAEN_Msk (0x1UL << QUADSPI_CR_DMAEN_Pos)
#define QUADSPI_CR_DMAEN QUADSPI_CR_DMAEN_Msk
#define QUADSPI_CR_TCEN_Pos (3U)
#define QUADSPI_CR_TCEN_Msk (0x1UL << QUADSPI_CR_TCEN_Pos)
#define QUADSPI_CR_TCEN QUADSPI_CR_TCEN_Msk
#define QUADSPI_CR_SSHIFT_Pos (4U)
#define QUADSPI_CR_SSHIFT_Msk (0x1UL << QUADSPI_CR_SSHIFT_Pos)
#define QUADSPI_CR_SSHIFT QUADSPI_CR_SSHIFT_Msk
#define QUADSPI_CR_FTHRES_Pos (8U)
#define QUADSPI_CR_FTHRES_Msk (0xFUL << QUADSPI_CR_FTHRES_Pos)
#define QUADSPI_CR_FTHRES QUADSPI_CR_FTHRES_Msk
#define QUADSPI_CR_TEIE_Pos (16U)
#define QUADSPI_CR_TEIE_Msk (0x1UL << QUADSPI_CR_TEIE_Pos)
#define QUADSPI_CR_TEIE QUADSPI_CR_TEIE_Msk
#define QUADSPI_CR_TCIE_Pos (17U)
#define QUADSPI_CR_TCIE_Msk (0x1UL << QUADSPI_CR_TCIE_Pos)
#define QUADSPI_CR_TCIE QUADSPI_CR_TCIE_Msk
#define QUADSPI_CR_FTIE_Pos (18U)
#define QUADSPI_CR_FTIE_Msk (0x1UL << QUADSPI_CR_FTIE_Pos)
#define QUADSPI_CR_FTIE QUADSPI_CR_FTIE_Msk
#define QUADSPI_CR_SMIE_Pos (19U)
#define QUADSPI_CR_SMIE_Msk (0x1UL << QUADSPI_CR_SMIE_Pos)
#define QUADSPI_CR_SMIE QUADSPI_CR_SMIE_Msk
#define QUADSPI_CR_TOIE_Pos (20U)
#define QUADSPI_CR_TOIE_Msk (0x1UL << QUADSPI_CR_TOIE_Pos)
#define QUADSPI_CR_TOIE QUADSPI_CR_TOIE_Msk
#define QUADSPI_CR_APMS_Pos (22U)
#define QUADSPI_CR_APMS_Msk (0x1UL << QUADSPI_CR_APMS_Pos)
#define QUADSPI_CR_APMS QUADSPI_CR_APMS_Msk
#define QUADSPI_CR_PMM_Pos (23U)
#define QUADSPI_CR_PMM_Msk (0x1UL << QUADSPI_CR_PMM_Pos)
#define QUADSPI_CR_PMM QUADSPI_CR_PMM_Msk
#define QUADSPI_CR_PRESCALER_Pos (24U)
#define QUADSPI_CR_PRESCALER_Msk (0xFFUL << QUADSPI_CR_PRESCALER_Pos)
#define QUADSPI_CR_PRESCALER QUADSPI_CR_PRESCALER_Msk
#define QUADSPI_DCR_CKMODE_Pos (0U)
#define QUADSPI_DCR_CKMODE_Msk (0x1UL << QUADSPI_DCR_CKMODE_Pos)
#define QUADSPI_DCR_CKMODE QUADSPI_DCR_CKMODE_Msk
#define QUADSPI_DCR_CSHT_Pos (8U)
#define QUADSPI_DCR_CSHT_Msk (0x7UL << QUADSPI_DCR_CSHT_Pos)
#define QUADSPI_DCR_CSHT QUADSPI_DCR_CSHT_Msk
#define QUADSPI_DCR_CSHT_0 (0x1U << QUADSPI_DCR_CSHT_Pos)
#define QUADSPI_DCR_CSHT_1 (0x2U << QUADSPI_DCR_CSHT_Pos)
#define QUADSPI_DCR_CSHT_2 (0x4U << QUADSPI_DCR_CSHT_Pos)
#define QUADSPI_DCR_FSIZE_Pos (16U)
#define QUADSPI_DCR_FSIZE_Msk (0x1FUL << QUADSPI_DCR_FSIZE_Pos)
#define QUADSPI_DCR_FSIZE QUADSPI_DCR_FSIZE_Msk
#define QUADSPI_SR_TEF_Pos (0U)
#define QUADSPI_SR_TEF_Msk (0x1UL << QUADSPI_SR_TEF_Pos)
#define QUADSPI_SR_TEF QUADSPI_SR_TEF_Msk
#define QUADSPI_SR_TCF_Pos (1U)
#define QUADSPI_SR_TCF_Msk (0x1UL << QUADSPI_SR_TCF_Pos)
#define QUADSPI_SR_TCF QUADSPI_SR_TCF_Msk
#define QUADSPI_SR_FTF_Pos (2U)
#define QUADSPI_SR_FTF_Msk (0x1UL << QUADSPI_SR_FTF_Pos)
#define QUADSPI_SR_FTF QUADSPI_SR_FTF_Msk
#define QUADSPI_SR_SMF_Pos (3U)
#define QUADSPI_SR_SMF_Msk (0x1UL << QUADSPI_SR_SMF_Pos)
#define QUADSPI_SR_SMF QUADSPI_SR_SMF_Msk
#define QUADSPI_SR_TOF_Pos (4U)
#define QUADSPI_SR_TOF_Msk (0x1UL << QUADSPI_SR_TOF_Pos)
#define QUADSPI_SR_TOF QUADSPI_SR_TOF_Msk
#define QUADSPI_SR_BUSY_Pos (5U)
#define QUADSPI_SR_BUSY_Msk (0x1UL << QUADSPI_SR_BUSY_Pos)
#define QUADSPI_SR_BUSY QUADSPI_SR_BUSY_Msk
#define QUADSPI_SR_FLEVEL_Pos (8U)
#define QUADSPI_SR_FLEVEL_Msk (0x1FUL << QUADSPI_SR_FLEVEL_Pos)
#define QUADSPI_SR_FLEVEL QUADSPI_SR_FLEVEL_Msk
#define QUADSPI_FCR_CTEF_Pos (0U)
#define QUADSPI_FCR_CTEF_Msk (0x1UL << QUADSPI_FCR_CTEF_Pos)
#define QUADSPI_FCR_CTEF QUADSPI_FCR_CTEF_Msk
#define QUADSPI_FCR_CTCF_Pos (1U)
#define QUADSPI_FCR_CTCF_Msk (0x1UL << QUADSPI_FCR_CTCF_Pos)
#define QUADSPI_FCR_CTCF QUADSPI_FCR_CTCF_Msk
#define QUADSPI_FCR_CSMF_Pos (3U)
#define QUADSPI_FCR_CSMF_Msk (0x1UL << QUADSPI_FCR_CSMF_Pos)
#define QUADSPI_FCR_CSMF QUADSPI_FCR_CSMF_Msk
#define QUADSPI_FCR_CTOF_Pos (4U)
#define QUADSPI_FCR_CTOF_Msk (0x1UL << QUADSPI_FCR_CTOF_Pos)
#define QUADSPI_FCR_CTOF QUADSPI_FCR_CTOF_Msk
#define QUADSPI_DLR_DL_Pos (0U)
#define QUADSPI_DLR_DL_Msk (0xFFFFFFFFUL << QUADSPI_DLR_DL_Pos)
#define QUADSPI_DLR_DL QUADSPI_DLR_DL_Msk
#define QUADSPI_CCR_INSTRUCTION_Pos (0U)
#define QUADSPI_CCR_INSTRUCTION_Msk (0xFFUL << QUADSPI_CCR_INSTRUCTION_Pos)
#define QUADSPI_CCR_INSTRUCTION QUADSPI_CCR_INSTRUCTION_Msk
#define QUADSPI_CCR_IMODE_Pos (8U)
#define QUADSPI_CCR_IMODE_Msk (0x3UL << QUADSPI_CCR_IMODE_Pos)
#define QUADSPI_CCR_IMODE QUADSPI_CCR_IMODE_Msk
#define QUADSPI_CCR_IMODE_0 (0x1U << QUADSPI_CCR_IMODE_Pos)
#define QUADSPI_CCR_IMODE_1 (0x2U << QUADSPI_CCR_IMODE_Pos)
#define QUADSPI_CCR_ADMODE_Pos (10U)
#define QUADSPI_CCR_ADMODE_Msk (0x3UL << QUADSPI_CCR_ADMODE_Pos)
#define QUADSPI_CCR_ADMODE QUADSPI_CCR_ADMODE_Msk
#define QUADSPI_CCR_ADMODE_0 (0x1U << QUADSPI_CCR_ADMODE_Pos)
#define QUADSPI_CCR_ADMODE_1 (0x2U << QUADSPI_CCR_ADMODE_Pos)
#define QUADSPI_CCR_ADSIZE_Pos (12U)
#define QUADSPI_CCR_ADSIZE_Msk (0x3UL << QUADSPI_CCR_ADSIZE_Pos)
#define QUADSPI_CCR_ADSIZE QUADSPI_CCR_ADSIZE_Msk
#define QUADSPI_CCR_ADSIZE_0 (0x1U << QUADSPI_CCR_ADSIZE_Pos)
#define QUADSPI_CCR_ADSIZE_1 (0x2U << QUADSPI_CCR_ADSIZE_Pos)
#define QUADSPI_CCR_ABMODE_Pos (14U)
#define QUADSPI_CCR_ABMODE_Msk (0x3UL << QUADSPI_CCR_ABMODE_Pos)
#define QUADSPI_CCR_ABMODE QUADSPI_CCR_ABMODE_Msk
#define QUADSPI_CCR_ABMODE_0 (0x1U << QUADSPI_CCR_ABMODE_Pos)
#define QUADSPI_CCR_ABMODE_1 (0x2U << QUADSPI_CCR_ABMODE_Pos)
#define QUADSPI_CCR_ABSIZE_Pos (16U)
#define QUADSPI_CCR_ABSIZE_Msk (0x3UL << QUADSPI_CCR_ABSIZE_Pos)
#define QUADSPI_CCR_ABSIZE QUADSPI_CCR_ABSIZE_Msk
#define QUADSPI_CCR_ABSIZE_0 (0x1U << QUADSPI_CCR_ABSIZE_Pos)
#define QUADSPI_CCR_ABSIZE_1 (0x2U << QUADSPI_CCR_ABSIZE_Pos)
#define QUADSPI_CCR_DCYC_Pos (18U)
#define QUADSPI_CCR_DCYC_Msk (0x1FUL << QUADSPI_CCR_DCYC_Pos)
#define QUADSPI_CCR_DCYC QUADSPI_CCR_DCYC_Msk
#define QUADSPI_CCR_DMODE_Pos (24U)
#define QUADSPI_CCR_DMODE_Msk (0x3UL << QUADSPI_CCR_DMODE_Pos)
#define QUADSPI_CCR_DMODE QUADSPI_CCR_DMODE_Msk
#define QUADSPI_CCR_DMODE_0 (0x1U << QUADSPI_CCR_DMODE_Pos)
#define QUADSPI_CCR_DMODE_1 (0x2U << QUADSPI_CCR_DMODE_Pos)
#define QUADSPI_CCR_FMODE_Pos (26U)
#define QUADSPI_CCR_FMODE_Msk (0x3UL << QUADSPI_CCR_FMODE_Pos)
#define QUADSPI_CCR_FMODE QUADSPI_CCR_FMODE_Msk
#define QUADSPI_CCR_FMODE_0 (0x1U << QUADSPI_CCR_FMODE_Pos)
#define QUADSPI_CCR_FMODE_1 (0x2U << QUADSPI_CCR_FMODE_Pos)
#define QUADSPI_CCR_SIOO_Pos (28U)
#define QUADSPI_CCR_SIOO_Msk (0x1UL << QUADSPI_CCR_SIOO_Pos)
#define QUADSPI_CCR_SIOO QUADSPI_CCR_SIOO_Msk
#define QUADSPI_CCR_DDRM_Pos (31U)
#define QUADSPI_CCR_DDRM_Msk (0x1UL << QUADSPI_CCR_DDRM_Pos)
#define QUADSPI_CCR_DDRM QUADSPI_CCR_DDRM_Msk
#define QUADSPI_AR_ADDRESS_Pos (0U)
#define QUADSPI_AR_ADDRESS_Msk (0xFFFFFFFFUL << QUADSPI_AR_ADDRESS_Pos)
#define QUADSPI_AR_ADDRESS QUADSPI_AR_ADDRESS_Msk
#define QUADSPI_ABR_ALTERNATE_Pos (0U)
#define QUADSPI_ABR_ALTERNATE_Msk (0xFFFFFFFFUL << QUADSPI_ABR_ALTERNATE_Pos)
#define QUADSPI_ABR_ALTERNATE QUADSPI_ABR_ALTERNATE_Msk
#define QUADSPI_DR_DATA_Pos (0U)
#define QUADSPI_DR_DATA_Msk (0xFFFFFFFFUL << QUADSPI_DR_DATA_Pos)
#define QUADSPI_DR_DATA QUADSPI_DR_DATA_Msk
#define QUADSPI_PSMKR_MASK_Pos (0U)
#define QUADSPI_PSMKR_MASK_Msk (0xFFFFFFFFUL << QUADSPI_PSMKR_MASK_Pos)
#define QUADSPI_PSMKR_MASK QUADSPI_PSMKR_MASK_Msk
#define QUADSPI_PSMAR_MATCH_Pos (0U)
#define QUADSPI_PSMAR_MATCH_Msk (0xFFFFFFFFUL << QUADSPI_PSMAR_MATCH_Pos)
#define QUADSPI_PSMAR_MATCH QUADSPI_PSMAR_MATCH_Msk
#define QUADSPI_PIR_INTERVAL_Pos (0U)
#define QUADSPI_PIR_INTERVAL_Msk (0xFFFFUL << QUADSPI_PIR_INTERVAL_Pos)
#define QUADSPI_PIR_INTERVAL QUADSPI_PIR_INTERVAL_Msk
#define QUADSPI_LPTR_TIMEOUT_Pos (0U)
#define QUADSPI_LPTR_TIMEOUT_Msk (0xFFFFUL << QUADSPI_LPTR_TIMEOUT_Pos)
#define QUADSPI_LPTR_TIMEOUT QUADSPI_LPTR_TIMEOUT_Msk
#define RCC_SMPS_SUPPORT 
#define RCC_MCO3_SUPPORT 
#define RCC_LSCO3_SUPPORT 
#define RCC_HSI48_SUPPORT 
#define RCC_802_SUPPORT 
#define RCC_CR_MSION_Pos (0U)
#define RCC_CR_MSION_Msk (0x1UL << RCC_CR_MSION_Pos)
#define RCC_CR_MSION RCC_CR_MSION_Msk
#define RCC_CR_MSIRDY_Pos (1U)
#define RCC_CR_MSIRDY_Msk (0x1UL << RCC_CR_MSIRDY_Pos)
#define RCC_CR_MSIRDY RCC_CR_MSIRDY_Msk
#define RCC_CR_MSIPLLEN_Pos (2U)
#define RCC_CR_MSIPLLEN_Msk (0x1UL << RCC_CR_MSIPLLEN_Pos)
#define RCC_CR_MSIPLLEN RCC_CR_MSIPLLEN_Msk
#define RCC_CR_MSIRANGE_Pos (4U)
#define RCC_CR_MSIRANGE_Msk (0xFUL << RCC_CR_MSIRANGE_Pos)
#define RCC_CR_MSIRANGE RCC_CR_MSIRANGE_Msk
#define RCC_CR_MSIRANGE_0 (0x0U << RCC_CR_MSIRANGE_Pos)
#define RCC_CR_MSIRANGE_1 (0x1U << RCC_CR_MSIRANGE_Pos)
#define RCC_CR_MSIRANGE_2 (0x2U << RCC_CR_MSIRANGE_Pos)
#define RCC_CR_MSIRANGE_3 (0x3U << RCC_CR_MSIRANGE_Pos)
#define RCC_CR_MSIRANGE_4 (0x4U << RCC_CR_MSIRANGE_Pos)
#define RCC_CR_MSIRANGE_5 (0x5U << RCC_CR_MSIRANGE_Pos)
#define RCC_CR_MSIRANGE_6 (0x6U << RCC_CR_MSIRANGE_Pos)
#define RCC_CR_MSIRANGE_7 (0x7U << RCC_CR_MSIRANGE_Pos)
#define RCC_CR_MSIRANGE_8 (0x8U << RCC_CR_MSIRANGE_Pos)
#define RCC_CR_MSIRANGE_9 (0x9U << RCC_CR_MSIRANGE_Pos)
#define RCC_CR_MSIRANGE_10 (0xAU << RCC_CR_MSIRANGE_Pos)
#define RCC_CR_MSIRANGE_11 (0xBU << RCC_CR_MSIRANGE_Pos)
#define RCC_CR_HSION_Pos (8U)
#define RCC_CR_HSION_Msk (0x1UL << RCC_CR_HSION_Pos)
#define RCC_CR_HSION RCC_CR_HSION_Msk
#define RCC_CR_HSIKERON_Pos (9U)
#define RCC_CR_HSIKERON_Msk (0x1UL << RCC_CR_HSIKERON_Pos)
#define RCC_CR_HSIKERON RCC_CR_HSIKERON_Msk
#define RCC_CR_HSIRDY_Pos (10U)
#define RCC_CR_HSIRDY_Msk (0x1UL << RCC_CR_HSIRDY_Pos)
#define RCC_CR_HSIRDY RCC_CR_HSIRDY_Msk
#define RCC_CR_HSIASFS_Pos (11U)
#define RCC_CR_HSIASFS_Msk (0x1UL << RCC_CR_HSIASFS_Pos)
#define RCC_CR_HSIASFS RCC_CR_HSIASFS_Msk
#define RCC_CR_HSIKERDY_Pos (12U)
#define RCC_CR_HSIKERDY_Msk (0x1UL << RCC_CR_HSIKERDY_Pos)
#define RCC_CR_HSIKERDY RCC_CR_HSIKERDY_Msk
#define RCC_CR_HSEON_Pos (16U)
#define RCC_CR_HSEON_Msk (0x1UL << RCC_CR_HSEON_Pos)
#define RCC_CR_HSEON RCC_CR_HSEON_Msk
#define RCC_CR_HSERDY_Pos (17U)
#define RCC_CR_HSERDY_Msk (0x1UL << RCC_CR_HSERDY_Pos)
#define RCC_CR_HSERDY RCC_CR_HSERDY_Msk
#define RCC_CR_CSSON_Pos (19U)
#define RCC_CR_CSSON_Msk (0x1UL << RCC_CR_CSSON_Pos)
#define RCC_CR_CSSON RCC_CR_CSSON_Msk
#define RCC_CR_HSEPRE_Pos (20U)
#define RCC_CR_HSEPRE_Msk (0x1UL << RCC_CR_HSEPRE_Pos)
#define RCC_CR_HSEPRE RCC_CR_HSEPRE_Msk
#define RCC_CR_PLLON_Pos (24U)
#define RCC_CR_PLLON_Msk (0x1UL << RCC_CR_PLLON_Pos)
#define RCC_CR_PLLON RCC_CR_PLLON_Msk
#define RCC_CR_PLLRDY_Pos (25U)
#define RCC_CR_PLLRDY_Msk (0x1UL << RCC_CR_PLLRDY_Pos)
#define RCC_CR_PLLRDY RCC_CR_PLLRDY_Msk
#define RCC_CR_PLLSAI1ON_Pos (26U)
#define RCC_CR_PLLSAI1ON_Msk (0x1UL << RCC_CR_PLLSAI1ON_Pos)
#define RCC_CR_PLLSAI1ON RCC_CR_PLLSAI1ON_Msk
#define RCC_CR_PLLSAI1RDY_Pos (27U)
#define RCC_CR_PLLSAI1RDY_Msk (0x1UL << RCC_CR_PLLSAI1RDY_Pos)
#define RCC_CR_PLLSAI1RDY RCC_CR_PLLSAI1RDY_Msk
#define RCC_ICSCR_MSICAL_Pos (0U)
#define RCC_ICSCR_MSICAL_Msk (0xFFUL << RCC_ICSCR_MSICAL_Pos)
#define RCC_ICSCR_MSICAL RCC_ICSCR_MSICAL_Msk
#define RCC_ICSCR_MSICAL_0 (0x01U << RCC_ICSCR_MSICAL_Pos)
#define RCC_ICSCR_MSICAL_1 (0x02U << RCC_ICSCR_MSICAL_Pos)
#define RCC_ICSCR_MSICAL_2 (0x04U << RCC_ICSCR_MSICAL_Pos)
#define RCC_ICSCR_MSICAL_3 (0x08U << RCC_ICSCR_MSICAL_Pos)
#define RCC_ICSCR_MSICAL_4 (0x10U << RCC_ICSCR_MSICAL_Pos)
#define RCC_ICSCR_MSICAL_5 (0x20U << RCC_ICSCR_MSICAL_Pos)
#define RCC_ICSCR_MSICAL_6 (0x40U << RCC_ICSCR_MSICAL_Pos)
#define RCC_ICSCR_MSICAL_7 (0x80U << RCC_ICSCR_MSICAL_Pos)
#define RCC_ICSCR_MSITRIM_Pos (8U)
#define RCC_ICSCR_MSITRIM_Msk (0xFFUL << RCC_ICSCR_MSITRIM_Pos)
#define RCC_ICSCR_MSITRIM RCC_ICSCR_MSITRIM_Msk
#define RCC_ICSCR_MSITRIM_0 (0x01U << RCC_ICSCR_MSITRIM_Pos)
#define RCC_ICSCR_MSITRIM_1 (0x02U << RCC_ICSCR_MSITRIM_Pos)
#define RCC_ICSCR_MSITRIM_2 (0x04U << RCC_ICSCR_MSITRIM_Pos)
#define RCC_ICSCR_MSITRIM_3 (0x08U << RCC_ICSCR_MSITRIM_Pos)
#define RCC_ICSCR_MSITRIM_4 (0x10U << RCC_ICSCR_MSITRIM_Pos)
#define RCC_ICSCR_MSITRIM_5 (0x20U << RCC_ICSCR_MSITRIM_Pos)
#define RCC_ICSCR_MSITRIM_6 (0x40U << RCC_ICSCR_MSITRIM_Pos)
#define RCC_ICSCR_MSITRIM_7 (0x80U << RCC_ICSCR_MSITRIM_Pos)
#define RCC_ICSCR_HSICAL_Pos (16U)
#define RCC_ICSCR_HSICAL_Msk (0xFFUL << RCC_ICSCR_HSICAL_Pos)
#define RCC_ICSCR_HSICAL RCC_ICSCR_HSICAL_Msk
#define RCC_ICSCR_HSICAL_0 (0x01U << RCC_ICSCR_HSICAL_Pos)
#define RCC_ICSCR_HSICAL_1 (0x02U << RCC_ICSCR_HSICAL_Pos)
#define RCC_ICSCR_HSICAL_2 (0x04U << RCC_ICSCR_HSICAL_Pos)
#define RCC_ICSCR_HSICAL_3 (0x08U << RCC_ICSCR_HSICAL_Pos)
#define RCC_ICSCR_HSICAL_4 (0x10U << RCC_ICSCR_HSICAL_Pos)
#define RCC_ICSCR_HSICAL_5 (0x20U << RCC_ICSCR_HSICAL_Pos)
#define RCC_ICSCR_HSICAL_6 (0x40U << RCC_ICSCR_HSICAL_Pos)
#define RCC_ICSCR_HSICAL_7 (0x80U << RCC_ICSCR_HSICAL_Pos)
#define RCC_ICSCR_HSITRIM_Pos (24U)
#define RCC_ICSCR_HSITRIM_Msk (0x7FUL << RCC_ICSCR_HSITRIM_Pos)
#define RCC_ICSCR_HSITRIM RCC_ICSCR_HSITRIM_Msk
#define RCC_ICSCR_HSITRIM_0 (0x01U << RCC_ICSCR_HSITRIM_Pos)
#define RCC_ICSCR_HSITRIM_1 (0x02U << RCC_ICSCR_HSITRIM_Pos)
#define RCC_ICSCR_HSITRIM_2 (0x04U << RCC_ICSCR_HSITRIM_Pos)
#define RCC_ICSCR_HSITRIM_3 (0x08U << RCC_ICSCR_HSITRIM_Pos)
#define RCC_ICSCR_HSITRIM_4 (0x10U << RCC_ICSCR_HSITRIM_Pos)
#define RCC_ICSCR_HSITRIM_5 (0x20U << RCC_ICSCR_HSITRIM_Pos)
#define RCC_ICSCR_HSITRIM_6 (0x40U << RCC_ICSCR_HSITRIM_Pos)
#define RCC_CFGR_SW_Pos (0U)
#define RCC_CFGR_SW_Msk (0x3UL << RCC_CFGR_SW_Pos)
#define RCC_CFGR_SW RCC_CFGR_SW_Msk
#define RCC_CFGR_SW_0 (0x1U << RCC_CFGR_SW_Pos)
#define RCC_CFGR_SW_1 (0x2U << RCC_CFGR_SW_Pos)
#define RCC_CFGR_SWS_Pos (2U)
#define RCC_CFGR_SWS_Msk (0x3UL << RCC_CFGR_SWS_Pos)
#define RCC_CFGR_SWS RCC_CFGR_SWS_Msk
#define RCC_CFGR_SWS_0 (0x1U << RCC_CFGR_SWS_Pos)
#define RCC_CFGR_SWS_1 (0x2U << RCC_CFGR_SWS_Pos)
#define RCC_CFGR_HPRE_Pos (4U)
#define RCC_CFGR_HPRE_Msk (0xFUL << RCC_CFGR_HPRE_Pos)
#define RCC_CFGR_HPRE RCC_CFGR_HPRE_Msk
#define RCC_CFGR_HPRE_0 (0x1U << RCC_CFGR_HPRE_Pos)
#define RCC_CFGR_HPRE_1 (0x2U << RCC_CFGR_HPRE_Pos)
#define RCC_CFGR_HPRE_2 (0x4U << RCC_CFGR_HPRE_Pos)
#define RCC_CFGR_HPRE_3 (0x8U << RCC_CFGR_HPRE_Pos)
#define RCC_CFGR_PPRE1_Pos (8U)
#define RCC_CFGR_PPRE1_Msk (0x7UL << RCC_CFGR_PPRE1_Pos)
#define RCC_CFGR_PPRE1 RCC_CFGR_PPRE1_Msk
#define RCC_CFGR_PPRE1_0 (0x1U << RCC_CFGR_PPRE1_Pos)
#define RCC_CFGR_PPRE1_1 (0x2U << RCC_CFGR_PPRE1_Pos)
#define RCC_CFGR_PPRE1_2 (0x4U << RCC_CFGR_PPRE1_Pos)
#define RCC_CFGR_PPRE2_Pos (11U)
#define RCC_CFGR_PPRE2_Msk (0x7UL << RCC_CFGR_PPRE2_Pos)
#define RCC_CFGR_PPRE2 RCC_CFGR_PPRE2_Msk
#define RCC_CFGR_PPRE2_0 (0x1U << RCC_CFGR_PPRE2_Pos)
#define RCC_CFGR_PPRE2_1 (0x2U << RCC_CFGR_PPRE2_Pos)
#define RCC_CFGR_PPRE2_2 (0x4U << RCC_CFGR_PPRE2_Pos)
#define RCC_CFGR_STOPWUCK_Pos (15U)
#define RCC_CFGR_STOPWUCK_Msk (0x1UL << RCC_CFGR_STOPWUCK_Pos)
#define RCC_CFGR_STOPWUCK RCC_CFGR_STOPWUCK_Msk
#define RCC_CFGR_HPREF_Pos (16U)
#define RCC_CFGR_HPREF_Msk (0x1UL << RCC_CFGR_HPREF_Pos)
#define RCC_CFGR_HPREF RCC_CFGR_HPREF_Msk
#define RCC_CFGR_PPRE1F_Pos (17U)
#define RCC_CFGR_PPRE1F_Msk (0x1UL << RCC_CFGR_PPRE1F_Pos)
#define RCC_CFGR_PPRE1F RCC_CFGR_PPRE1F_Msk
#define RCC_CFGR_PPRE2F_Pos (18U)
#define RCC_CFGR_PPRE2F_Msk (0x1UL << RCC_CFGR_PPRE2F_Pos)
#define RCC_CFGR_PPRE2F RCC_CFGR_PPRE2F_Msk
#define RCC_CFGR_MCOSEL_Pos (24U)
#define RCC_CFGR_MCOSEL_Msk (0xFUL << RCC_CFGR_MCOSEL_Pos)
#define RCC_CFGR_MCOSEL RCC_CFGR_MCOSEL_Msk
#define RCC_CFGR_MCOSEL_0 (0x1U << RCC_CFGR_MCOSEL_Pos)
#define RCC_CFGR_MCOSEL_1 (0x2U << RCC_CFGR_MCOSEL_Pos)
#define RCC_CFGR_MCOSEL_2 (0x4U << RCC_CFGR_MCOSEL_Pos)
#define RCC_CFGR_MCOSEL_3 (0x8U << RCC_CFGR_MCOSEL_Pos)
#define RCC_CFGR_MCOPRE_Pos (28U)
#define RCC_CFGR_MCOPRE_Msk (0x7UL << RCC_CFGR_MCOPRE_Pos)
#define RCC_CFGR_MCOPRE RCC_CFGR_MCOPRE_Msk
#define RCC_CFGR_MCOPRE_0 (0x1U << RCC_CFGR_MCOPRE_Pos)
#define RCC_CFGR_MCOPRE_1 (0x2U << RCC_CFGR_MCOPRE_Pos)
#define RCC_CFGR_MCOPRE_2 (0x4U << RCC_CFGR_MCOPRE_Pos)
#define RCC_PLLCFGR_PLLSRC_Pos (0U)
#define RCC_PLLCFGR_PLLSRC_Msk (0x3UL << RCC_PLLCFGR_PLLSRC_Pos)
#define RCC_PLLCFGR_PLLSRC RCC_PLLCFGR_PLLSRC_Msk
#define RCC_PLLCFGR_PLLSRC_0 (0x1U << RCC_PLLCFGR_PLLSRC_Pos)
#define RCC_PLLCFGR_PLLSRC_1 (0x2U << RCC_PLLCFGR_PLLSRC_Pos)
#define RCC_PLLCFGR_PLLM_Pos (4U)
#define RCC_PLLCFGR_PLLM_Msk (0x7UL << RCC_PLLCFGR_PLLM_Pos)
#define RCC_PLLCFGR_PLLM RCC_PLLCFGR_PLLM_Msk
#define RCC_PLLCFGR_PLLM_0 (0x1U << RCC_PLLCFGR_PLLM_Pos)
#define RCC_PLLCFGR_PLLM_1 (0x2U << RCC_PLLCFGR_PLLM_Pos)
#define RCC_PLLCFGR_PLLM_2 (0x4U << RCC_PLLCFGR_PLLM_Pos)
#define RCC_PLLCFGR_PLLN_Pos (8U)
#define RCC_PLLCFGR_PLLN_Msk (0x7FUL << RCC_PLLCFGR_PLLN_Pos)
#define RCC_PLLCFGR_PLLN RCC_PLLCFGR_PLLN_Msk
#define RCC_PLLCFGR_PLLN_0 (0x01U << RCC_PLLCFGR_PLLN_Pos)
#define RCC_PLLCFGR_PLLN_1 (0x02U << RCC_PLLCFGR_PLLN_Pos)
#define RCC_PLLCFGR_PLLN_2 (0x04U << RCC_PLLCFGR_PLLN_Pos)
#define RCC_PLLCFGR_PLLN_3 (0x08U << RCC_PLLCFGR_PLLN_Pos)
#define RCC_PLLCFGR_PLLN_4 (0x10U << RCC_PLLCFGR_PLLN_Pos)
#define RCC_PLLCFGR_PLLN_5 (0x20U << RCC_PLLCFGR_PLLN_Pos)
#define RCC_PLLCFGR_PLLN_6 (0x40U << RCC_PLLCFGR_PLLN_Pos)
#define RCC_PLLCFGR_PLLPEN_Pos (16U)
#define RCC_PLLCFGR_PLLPEN_Msk (0x1UL << RCC_PLLCFGR_PLLPEN_Pos)
#define RCC_PLLCFGR_PLLPEN RCC_PLLCFGR_PLLPEN_Msk
#define RCC_PLLCFGR_PLLP_Pos (17U)
#define RCC_PLLCFGR_PLLP_Msk (0x1FUL << RCC_PLLCFGR_PLLP_Pos)
#define RCC_PLLCFGR_PLLP RCC_PLLCFGR_PLLP_Msk
#define RCC_PLLCFGR_PLLP_0 (0x01U << RCC_PLLCFGR_PLLP_Pos)
#define RCC_PLLCFGR_PLLP_1 (0x02U << RCC_PLLCFGR_PLLP_Pos)
#define RCC_PLLCFGR_PLLP_2 (0x04U << RCC_PLLCFGR_PLLP_Pos)
#define RCC_PLLCFGR_PLLP_3 (0x08U << RCC_PLLCFGR_PLLP_Pos)
#define RCC_PLLCFGR_PLLP_4 (0x10U << RCC_PLLCFGR_PLLP_Pos)
#define RCC_PLLCFGR_PLLQEN_Pos (24U)
#define RCC_PLLCFGR_PLLQEN_Msk (0x1UL << RCC_PLLCFGR_PLLQEN_Pos)
#define RCC_PLLCFGR_PLLQEN RCC_PLLCFGR_PLLQEN_Msk
#define RCC_PLLCFGR_PLLQ_Pos (25U)
#define RCC_PLLCFGR_PLLQ_Msk (0x7UL << RCC_PLLCFGR_PLLQ_Pos)
#define RCC_PLLCFGR_PLLQ RCC_PLLCFGR_PLLQ_Msk
#define RCC_PLLCFGR_PLLQ_0 (0x1U << RCC_PLLCFGR_PLLQ_Pos)
#define RCC_PLLCFGR_PLLQ_1 (0x2U << RCC_PLLCFGR_PLLQ_Pos)
#define RCC_PLLCFGR_PLLQ_2 (0x4U << RCC_PLLCFGR_PLLQ_Pos)
#define RCC_PLLCFGR_PLLREN_Pos (28U)
#define RCC_PLLCFGR_PLLREN_Msk (0x1UL << RCC_PLLCFGR_PLLREN_Pos)
#define RCC_PLLCFGR_PLLREN RCC_PLLCFGR_PLLREN_Msk
#define RCC_PLLCFGR_PLLR_Pos (29U)
#define RCC_PLLCFGR_PLLR_Msk (0x7UL << RCC_PLLCFGR_PLLR_Pos)
#define RCC_PLLCFGR_PLLR RCC_PLLCFGR_PLLR_Msk
#define RCC_PLLCFGR_PLLR_0 (0x1U << RCC_PLLCFGR_PLLR_Pos)
#define RCC_PLLCFGR_PLLR_1 (0x2U << RCC_PLLCFGR_PLLR_Pos)
#define RCC_PLLCFGR_PLLR_2 (0x4U << RCC_PLLCFGR_PLLR_Pos)
#define RCC_PLLSAI1CFGR_PLLN_Pos (8U)
#define RCC_PLLSAI1CFGR_PLLN_Msk (0x7FUL << RCC_PLLSAI1CFGR_PLLN_Pos)
#define RCC_PLLSAI1CFGR_PLLN RCC_PLLSAI1CFGR_PLLN_Msk
#define RCC_PLLSAI1CFGR_PLLN_0 (0x01U << RCC_PLLSAI1CFGR_PLLN_Pos)
#define RCC_PLLSAI1CFGR_PLLN_1 (0x02U << RCC_PLLSAI1CFGR_PLLN_Pos)
#define RCC_PLLSAI1CFGR_PLLN_2 (0x04U << RCC_PLLSAI1CFGR_PLLN_Pos)
#define RCC_PLLSAI1CFGR_PLLN_3 (0x08U << RCC_PLLSAI1CFGR_PLLN_Pos)
#define RCC_PLLSAI1CFGR_PLLN_4 (0x10U << RCC_PLLSAI1CFGR_PLLN_Pos)
#define RCC_PLLSAI1CFGR_PLLN_5 (0x20U << RCC_PLLSAI1CFGR_PLLN_Pos)
#define RCC_PLLSAI1CFGR_PLLN_6 (0x40U << RCC_PLLSAI1CFGR_PLLN_Pos)
#define RCC_PLLSAI1CFGR_PLLPEN_Pos (16U)
#define RCC_PLLSAI1CFGR_PLLPEN_Msk (0x1UL << RCC_PLLSAI1CFGR_PLLPEN_Pos)
#define RCC_PLLSAI1CFGR_PLLPEN RCC_PLLSAI1CFGR_PLLPEN_Msk
#define RCC_PLLSAI1CFGR_PLLP_Pos (17U)
#define RCC_PLLSAI1CFGR_PLLP_Msk (0x1FUL << RCC_PLLSAI1CFGR_PLLP_Pos)
#define RCC_PLLSAI1CFGR_PLLP RCC_PLLSAI1CFGR_PLLP_Msk
#define RCC_PLLSAI1CFGR_PLLP_0 (0x01U << RCC_PLLSAI1CFGR_PLLP_Pos)
#define RCC_PLLSAI1CFGR_PLLP_1 (0x02U << RCC_PLLSAI1CFGR_PLLP_Pos)
#define RCC_PLLSAI1CFGR_PLLP_2 (0x04U << RCC_PLLSAI1CFGR_PLLP_Pos)
#define RCC_PLLSAI1CFGR_PLLP_3 (0x08U << RCC_PLLSAI1CFGR_PLLP_Pos)
#define RCC_PLLSAI1CFGR_PLLP_4 (0x10U << RCC_PLLSAI1CFGR_PLLP_Pos)
#define RCC_PLLSAI1CFGR_PLLQEN_Pos (24U)
#define RCC_PLLSAI1CFGR_PLLQEN_Msk (0x1UL << RCC_PLLSAI1CFGR_PLLQEN_Pos)
#define RCC_PLLSAI1CFGR_PLLQEN RCC_PLLSAI1CFGR_PLLQEN_Msk
#define RCC_PLLSAI1CFGR_PLLQ_Pos (25U)
#define RCC_PLLSAI1CFGR_PLLQ_Msk (0x7UL << RCC_PLLSAI1CFGR_PLLQ_Pos)
#define RCC_PLLSAI1CFGR_PLLQ RCC_PLLSAI1CFGR_PLLQ_Msk
#define RCC_PLLSAI1CFGR_PLLQ_0 (0x1U << RCC_PLLSAI1CFGR_PLLQ_Pos)
#define RCC_PLLSAI1CFGR_PLLQ_1 (0x2U << RCC_PLLSAI1CFGR_PLLQ_Pos)
#define RCC_PLLSAI1CFGR_PLLQ_2 (0x4U << RCC_PLLSAI1CFGR_PLLQ_Pos)
#define RCC_PLLSAI1CFGR_PLLREN_Pos (28U)
#define RCC_PLLSAI1CFGR_PLLREN_Msk (0x1UL << RCC_PLLSAI1CFGR_PLLREN_Pos)
#define RCC_PLLSAI1CFGR_PLLREN RCC_PLLSAI1CFGR_PLLREN_Msk
#define RCC_PLLSAI1CFGR_PLLR_Pos (29U)
#define RCC_PLLSAI1CFGR_PLLR_Msk (0x7UL << RCC_PLLSAI1CFGR_PLLR_Pos)
#define RCC_PLLSAI1CFGR_PLLR RCC_PLLSAI1CFGR_PLLR_Msk
#define RCC_PLLSAI1CFGR_PLLR_0 (0x1U << RCC_PLLSAI1CFGR_PLLR_Pos)
#define RCC_PLLSAI1CFGR_PLLR_1 (0x2U << RCC_PLLSAI1CFGR_PLLR_Pos)
#define RCC_PLLSAI1CFGR_PLLR_2 (0x4U << RCC_PLLSAI1CFGR_PLLR_Pos)
#define RCC_CIER_LSI1RDYIE_Pos (0U)
#define RCC_CIER_LSI1RDYIE_Msk (0x1UL << RCC_CIER_LSI1RDYIE_Pos)
#define RCC_CIER_LSI1RDYIE RCC_CIER_LSI1RDYIE_Msk
#define RCC_CIER_LSERDYIE_Pos (1U)
#define RCC_CIER_LSERDYIE_Msk (0x1UL << RCC_CIER_LSERDYIE_Pos)
#define RCC_CIER_LSERDYIE RCC_CIER_LSERDYIE_Msk
#define RCC_CIER_MSIRDYIE_Pos (2U)
#define RCC_CIER_MSIRDYIE_Msk (0x1UL << RCC_CIER_MSIRDYIE_Pos)
#define RCC_CIER_MSIRDYIE RCC_CIER_MSIRDYIE_Msk
#define RCC_CIER_HSIRDYIE_Pos (3U)
#define RCC_CIER_HSIRDYIE_Msk (0x1UL << RCC_CIER_HSIRDYIE_Pos)
#define RCC_CIER_HSIRDYIE RCC_CIER_HSIRDYIE_Msk
#define RCC_CIER_HSERDYIE_Pos (4U)
#define RCC_CIER_HSERDYIE_Msk (0x1UL << RCC_CIER_HSERDYIE_Pos)
#define RCC_CIER_HSERDYIE RCC_CIER_HSERDYIE_Msk
#define RCC_CIER_PLLRDYIE_Pos (5U)
#define RCC_CIER_PLLRDYIE_Msk (0x1UL << RCC_CIER_PLLRDYIE_Pos)
#define RCC_CIER_PLLRDYIE RCC_CIER_PLLRDYIE_Msk
#define RCC_CIER_PLLSAI1RDYIE_Pos (6U)
#define RCC_CIER_PLLSAI1RDYIE_Msk (0x1UL << RCC_CIER_PLLSAI1RDYIE_Pos)
#define RCC_CIER_PLLSAI1RDYIE RCC_CIER_PLLSAI1RDYIE_Msk
#define RCC_CIER_LSECSSIE_Pos (9U)
#define RCC_CIER_LSECSSIE_Msk (0x1UL << RCC_CIER_LSECSSIE_Pos)
#define RCC_CIER_LSECSSIE RCC_CIER_LSECSSIE_Msk
#define RCC_CIER_HSI48RDYIE_Pos (10U)
#define RCC_CIER_HSI48RDYIE_Msk (0x1UL << RCC_CIER_HSI48RDYIE_Pos)
#define RCC_CIER_HSI48RDYIE RCC_CIER_HSI48RDYIE_Msk
#define RCC_CIER_LSI2RDYIE_Pos (11U)
#define RCC_CIER_LSI2RDYIE_Msk (0x1UL << RCC_CIER_LSI2RDYIE_Pos)
#define RCC_CIER_LSI2RDYIE RCC_CIER_LSI2RDYIE_Msk
#define RCC_CIFR_LSI1RDYF_Pos (0U)
#define RCC_CIFR_LSI1RDYF_Msk (0x1UL << RCC_CIFR_LSI1RDYF_Pos)
#define RCC_CIFR_LSI1RDYF RCC_CIFR_LSI1RDYF_Msk
#define RCC_CIFR_LSERDYF_Pos (1U)
#define RCC_CIFR_LSERDYF_Msk (0x1UL << RCC_CIFR_LSERDYF_Pos)
#define RCC_CIFR_LSERDYF RCC_CIFR_LSERDYF_Msk
#define RCC_CIFR_MSIRDYF_Pos (2U)
#define RCC_CIFR_MSIRDYF_Msk (0x1UL << RCC_CIFR_MSIRDYF_Pos)
#define RCC_CIFR_MSIRDYF RCC_CIFR_MSIRDYF_Msk
#define RCC_CIFR_HSIRDYF_Pos (3U)
#define RCC_CIFR_HSIRDYF_Msk (0x1UL << RCC_CIFR_HSIRDYF_Pos)
#define RCC_CIFR_HSIRDYF RCC_CIFR_HSIRDYF_Msk
#define RCC_CIFR_HSERDYF_Pos (4U)
#define RCC_CIFR_HSERDYF_Msk (0x1UL << RCC_CIFR_HSERDYF_Pos)
#define RCC_CIFR_HSERDYF RCC_CIFR_HSERDYF_Msk
#define RCC_CIFR_PLLRDYF_Pos (5U)
#define RCC_CIFR_PLLRDYF_Msk (0x1UL << RCC_CIFR_PLLRDYF_Pos)
#define RCC_CIFR_PLLRDYF RCC_CIFR_PLLRDYF_Msk
#define RCC_CIFR_PLLSAI1RDYF_Pos (6U)
#define RCC_CIFR_PLLSAI1RDYF_Msk (0x1UL << RCC_CIFR_PLLSAI1RDYF_Pos)
#define RCC_CIFR_PLLSAI1RDYF RCC_CIFR_PLLSAI1RDYF_Msk
#define RCC_CIFR_CSSF_Pos (8U)
#define RCC_CIFR_CSSF_Msk (0x1UL << RCC_CIFR_CSSF_Pos)
#define RCC_CIFR_CSSF RCC_CIFR_CSSF_Msk
#define RCC_CIFR_LSECSSF_Pos (9U)
#define RCC_CIFR_LSECSSF_Msk (0x1UL << RCC_CIFR_LSECSSF_Pos)
#define RCC_CIFR_LSECSSF RCC_CIFR_LSECSSF_Msk
#define RCC_CIFR_HSI48RDYF_Pos (10U)
#define RCC_CIFR_HSI48RDYF_Msk (0x1UL << RCC_CIFR_HSI48RDYF_Pos)
#define RCC_CIFR_HSI48RDYF RCC_CIFR_HSI48RDYF_Msk
#define RCC_CIFR_LSI2RDYF_Pos (11U)
#define RCC_CIFR_LSI2RDYF_Msk (0x1UL << RCC_CIFR_LSI2RDYF_Pos)
#define RCC_CIFR_LSI2RDYF RCC_CIFR_LSI2RDYF_Msk
#define RCC_CICR_LSI1RDYC_Pos (0U)
#define RCC_CICR_LSI1RDYC_Msk (0x1UL << RCC_CICR_LSI1RDYC_Pos)
#define RCC_CICR_LSI1RDYC RCC_CICR_LSI1RDYC_Msk
#define RCC_CICR_LSERDYC_Pos (1U)
#define RCC_CICR_LSERDYC_Msk (0x1UL << RCC_CICR_LSERDYC_Pos)
#define RCC_CICR_LSERDYC RCC_CICR_LSERDYC_Msk
#define RCC_CICR_MSIRDYC_Pos (2U)
#define RCC_CICR_MSIRDYC_Msk (0x1UL << RCC_CICR_MSIRDYC_Pos)
#define RCC_CICR_MSIRDYC RCC_CICR_MSIRDYC_Msk
#define RCC_CICR_HSIRDYC_Pos (3U)
#define RCC_CICR_HSIRDYC_Msk (0x1UL << RCC_CICR_HSIRDYC_Pos)
#define RCC_CICR_HSIRDYC RCC_CICR_HSIRDYC_Msk
#define RCC_CICR_HSERDYC_Pos (4U)
#define RCC_CICR_HSERDYC_Msk (0x1UL << RCC_CICR_HSERDYC_Pos)
#define RCC_CICR_HSERDYC RCC_CICR_HSERDYC_Msk
#define RCC_CICR_PLLRDYC_Pos (5U)
#define RCC_CICR_PLLRDYC_Msk (0x1UL << RCC_CICR_PLLRDYC_Pos)
#define RCC_CICR_PLLRDYC RCC_CICR_PLLRDYC_Msk
#define RCC_CICR_PLLSAI1RDYC_Pos (6U)
#define RCC_CICR_PLLSAI1RDYC_Msk (0x1UL << RCC_CICR_PLLSAI1RDYC_Pos)
#define RCC_CICR_PLLSAI1RDYC RCC_CICR_PLLSAI1RDYC_Msk
#define RCC_CICR_CSSC_Pos (8U)
#define RCC_CICR_CSSC_Msk (0x1UL << RCC_CICR_CSSC_Pos)
#define RCC_CICR_CSSC RCC_CICR_CSSC_Msk
#define RCC_CICR_LSECSSC_Pos (9U)
#define RCC_CICR_LSECSSC_Msk (0x1UL << RCC_CICR_LSECSSC_Pos)
#define RCC_CICR_LSECSSC RCC_CICR_LSECSSC_Msk
#define RCC_CICR_HSI48RDYC_Pos (10U)
#define RCC_CICR_HSI48RDYC_Msk (0x1UL << RCC_CICR_HSI48RDYC_Pos)
#define RCC_CICR_HSI48RDYC RCC_CICR_HSI48RDYC_Msk
#define RCC_CICR_LSI2RDYC_Pos (11U)
#define RCC_CICR_LSI2RDYC_Msk (0x1UL << RCC_CICR_LSI2RDYC_Pos)
#define RCC_CICR_LSI2RDYC RCC_CICR_LSI2RDYC_Msk
#define RCC_SMPSCR_SMPSSEL_Pos (0U)
#define RCC_SMPSCR_SMPSSEL_Msk (0x3UL << RCC_SMPSCR_SMPSSEL_Pos)
#define RCC_SMPSCR_SMPSSEL RCC_SMPSCR_SMPSSEL_Msk
#define RCC_SMPSCR_SMPSSEL_0 (0x1U << RCC_SMPSCR_SMPSSEL_Pos)
#define RCC_SMPSCR_SMPSSEL_1 (0x2U << RCC_SMPSCR_SMPSSEL_Pos)
#define RCC_SMPSCR_SMPSDIV_Pos (4U)
#define RCC_SMPSCR_SMPSDIV_Msk (0x3UL << RCC_SMPSCR_SMPSDIV_Pos)
#define RCC_SMPSCR_SMPSDIV RCC_SMPSCR_SMPSDIV_Msk
#define RCC_SMPSCR_SMPSDIV_0 (0x1U << RCC_SMPSCR_SMPSDIV_Pos)
#define RCC_SMPSCR_SMPSDIV_1 (0x2U << RCC_SMPSCR_SMPSDIV_Pos)
#define RCC_SMPSCR_SMPSSWS_Pos (8U)
#define RCC_SMPSCR_SMPSSWS_Msk (0x3UL << RCC_SMPSCR_SMPSSWS_Pos)
#define RCC_SMPSCR_SMPSSWS RCC_SMPSCR_SMPSSWS_Msk
#define RCC_SMPSCR_SMPSSWS_0 (0x1U << RCC_SMPSCR_SMPSSWS_Pos)
#define RCC_SMPSCR_SMPSSWS_1 (0x2U << RCC_SMPSCR_SMPSSWS_Pos)
#define RCC_AHB1RSTR_DMA1RST_Pos (0U)
#define RCC_AHB1RSTR_DMA1RST_Msk (0x1UL << RCC_AHB1RSTR_DMA1RST_Pos)
#define RCC_AHB1RSTR_DMA1RST RCC_AHB1RSTR_DMA1RST_Msk
#define RCC_AHB1RSTR_DMA2RST_Pos (1U)
#define RCC_AHB1RSTR_DMA2RST_Msk (0x1UL << RCC_AHB1RSTR_DMA2RST_Pos)
#define RCC_AHB1RSTR_DMA2RST RCC_AHB1RSTR_DMA2RST_Msk
#define RCC_AHB1RSTR_DMAMUX1RST_Pos (2U)
#define RCC_AHB1RSTR_DMAMUX1RST_Msk (0x1UL << RCC_AHB1RSTR_DMAMUX1RST_Pos)
#define RCC_AHB1RSTR_DMAMUX1RST RCC_AHB1RSTR_DMAMUX1RST_Msk
#define RCC_AHB1RSTR_CRCRST_Pos (12U)
#define RCC_AHB1RSTR_CRCRST_Msk (0x1UL << RCC_AHB1RSTR_CRCRST_Pos)
#define RCC_AHB1RSTR_CRCRST RCC_AHB1RSTR_CRCRST_Msk
#define RCC_AHB1RSTR_TSCRST_Pos (16U)
#define RCC_AHB1RSTR_TSCRST_Msk (0x1UL << RCC_AHB1RSTR_TSCRST_Pos)
#define RCC_AHB1RSTR_TSCRST RCC_AHB1RSTR_TSCRST_Msk
#define RCC_AHB2RSTR_GPIOARST_Pos (0U)
#define RCC_AHB2RSTR_GPIOARST_Msk (0x1UL << RCC_AHB2RSTR_GPIOARST_Pos)
#define RCC_AHB2RSTR_GPIOARST RCC_AHB2RSTR_GPIOARST_Msk
#define RCC_AHB2RSTR_GPIOBRST_Pos (1U)
#define RCC_AHB2RSTR_GPIOBRST_Msk (0x1UL << RCC_AHB2RSTR_GPIOBRST_Pos)
#define RCC_AHB2RSTR_GPIOBRST RCC_AHB2RSTR_GPIOBRST_Msk
#define RCC_AHB2RSTR_GPIOCRST_Pos (2U)
#define RCC_AHB2RSTR_GPIOCRST_Msk (0x1UL << RCC_AHB2RSTR_GPIOCRST_Pos)
#define RCC_AHB2RSTR_GPIOCRST RCC_AHB2RSTR_GPIOCRST_Msk
#define RCC_AHB2RSTR_GPIODRST_Pos (3U)
#define RCC_AHB2RSTR_GPIODRST_Msk (0x1UL << RCC_AHB2RSTR_GPIODRST_Pos)
#define RCC_AHB2RSTR_GPIODRST RCC_AHB2RSTR_GPIODRST_Msk
#define RCC_AHB2RSTR_GPIOERST_Pos (4U)
#define RCC_AHB2RSTR_GPIOERST_Msk (0x1UL << RCC_AHB2RSTR_GPIOERST_Pos)
#define RCC_AHB2RSTR_GPIOERST RCC_AHB2RSTR_GPIOERST_Msk
#define RCC_AHB2RSTR_GPIOHRST_Pos (7U)
#define RCC_AHB2RSTR_GPIOHRST_Msk (0x1UL << RCC_AHB2RSTR_GPIOHRST_Pos)
#define RCC_AHB2RSTR_GPIOHRST RCC_AHB2RSTR_GPIOHRST_Msk
#define RCC_AHB2RSTR_ADCRST_Pos (13U)
#define RCC_AHB2RSTR_ADCRST_Msk (0x1UL << RCC_AHB2RSTR_ADCRST_Pos)
#define RCC_AHB2RSTR_ADCRST RCC_AHB2RSTR_ADCRST_Msk
#define RCC_AHB2RSTR_AES1RST_Pos (16U)
#define RCC_AHB2RSTR_AES1RST_Msk (0x1UL << RCC_AHB2RSTR_AES1RST_Pos)
#define RCC_AHB2RSTR_AES1RST RCC_AHB2RSTR_AES1RST_Msk
#define RCC_AHB3RSTR_QUADSPIRST_Pos (8U)
#define RCC_AHB3RSTR_QUADSPIRST_Msk (0x1UL << RCC_AHB3RSTR_QUADSPIRST_Pos)
#define RCC_AHB3RSTR_QUADSPIRST RCC_AHB3RSTR_QUADSPIRST_Msk
#define RCC_AHB3RSTR_PKARST_Pos (16U)
#define RCC_AHB3RSTR_PKARST_Msk (0x1UL << RCC_AHB3RSTR_PKARST_Pos)
#define RCC_AHB3RSTR_PKARST RCC_AHB3RSTR_PKARST_Msk
#define RCC_AHB3RSTR_AES2RST_Pos (17U)
#define RCC_AHB3RSTR_AES2RST_Msk (0x1UL << RCC_AHB3RSTR_AES2RST_Pos)
#define RCC_AHB3RSTR_AES2RST RCC_AHB3RSTR_AES2RST_Msk
#define RCC_AHB3RSTR_RNGRST_Pos (18U)
#define RCC_AHB3RSTR_RNGRST_Msk (0x1UL << RCC_AHB3RSTR_RNGRST_Pos)
#define RCC_AHB3RSTR_RNGRST RCC_AHB3RSTR_RNGRST_Msk
#define RCC_AHB3RSTR_HSEMRST_Pos (19U)
#define RCC_AHB3RSTR_HSEMRST_Msk (0x1UL << RCC_AHB3RSTR_HSEMRST_Pos)
#define RCC_AHB3RSTR_HSEMRST RCC_AHB3RSTR_HSEMRST_Msk
#define RCC_AHB3RSTR_IPCCRST_Pos (20U)
#define RCC_AHB3RSTR_IPCCRST_Msk (0x1UL << RCC_AHB3RSTR_IPCCRST_Pos)
#define RCC_AHB3RSTR_IPCCRST RCC_AHB3RSTR_IPCCRST_Msk
#define RCC_AHB3RSTR_FLASHRST_Pos (25U)
#define RCC_AHB3RSTR_FLASHRST_Msk (0x1UL << RCC_AHB3RSTR_FLASHRST_Pos)
#define RCC_AHB3RSTR_FLASHRST RCC_AHB3RSTR_FLASHRST_Msk
#define RCC_APB1RSTR1_TIM2RST_Pos (0U)
#define RCC_APB1RSTR1_TIM2RST_Msk (0x1UL << RCC_APB1RSTR1_TIM2RST_Pos)
#define RCC_APB1RSTR1_TIM2RST RCC_APB1RSTR1_TIM2RST_Msk
#define RCC_APB1RSTR1_LCDRST_Pos (9U)
#define RCC_APB1RSTR1_LCDRST_Msk (0x1UL << RCC_APB1RSTR1_LCDRST_Pos)
#define RCC_APB1RSTR1_LCDRST RCC_APB1RSTR1_LCDRST_Msk
#define RCC_APB1RSTR1_SPI2RST_Pos (14U)
#define RCC_APB1RSTR1_SPI2RST_Msk (0x1UL << RCC_APB1RSTR1_SPI2RST_Pos)
#define RCC_APB1RSTR1_SPI2RST RCC_APB1RSTR1_SPI2RST_Msk
#define RCC_APB1RSTR1_I2C1RST_Pos (21U)
#define RCC_APB1RSTR1_I2C1RST_Msk (0x1UL << RCC_APB1RSTR1_I2C1RST_Pos)
#define RCC_APB1RSTR1_I2C1RST RCC_APB1RSTR1_I2C1RST_Msk
#define RCC_APB1RSTR1_I2C3RST_Pos (23U)
#define RCC_APB1RSTR1_I2C3RST_Msk (0x1UL << RCC_APB1RSTR1_I2C3RST_Pos)
#define RCC_APB1RSTR1_I2C3RST RCC_APB1RSTR1_I2C3RST_Msk
#define RCC_APB1RSTR1_CRSRST_Pos (24U)
#define RCC_APB1RSTR1_CRSRST_Msk (0x1UL << RCC_APB1RSTR1_CRSRST_Pos)
#define RCC_APB1RSTR1_CRSRST RCC_APB1RSTR1_CRSRST_Msk
#define RCC_APB1RSTR1_USBRST_Pos (26U)
#define RCC_APB1RSTR1_USBRST_Msk (0x1UL << RCC_APB1RSTR1_USBRST_Pos)
#define RCC_APB1RSTR1_USBRST RCC_APB1RSTR1_USBRST_Msk
#define RCC_APB1RSTR1_LPTIM1RST_Pos (31U)
#define RCC_APB1RSTR1_LPTIM1RST_Msk (0x1UL << RCC_APB1RSTR1_LPTIM1RST_Pos)
#define RCC_APB1RSTR1_LPTIM1RST RCC_APB1RSTR1_LPTIM1RST_Msk
#define RCC_APB1RSTR2_LPUART1RST_Pos (0U)
#define RCC_APB1RSTR2_LPUART1RST_Msk (0x1UL << RCC_APB1RSTR2_LPUART1RST_Pos)
#define RCC_APB1RSTR2_LPUART1RST RCC_APB1RSTR2_LPUART1RST_Msk
#define RCC_APB1RSTR2_LPTIM2RST_Pos (5U)
#define RCC_APB1RSTR2_LPTIM2RST_Msk (0x1UL << RCC_APB1RSTR2_LPTIM2RST_Pos)
#define RCC_APB1RSTR2_LPTIM2RST RCC_APB1RSTR2_LPTIM2RST_Msk
#define RCC_APB2RSTR_TIM1RST_Pos (11U)
#define RCC_APB2RSTR_TIM1RST_Msk (0x1UL << RCC_APB2RSTR_TIM1RST_Pos)
#define RCC_APB2RSTR_TIM1RST RCC_APB2RSTR_TIM1RST_Msk
#define RCC_APB2RSTR_SPI1RST_Pos (12U)
#define RCC_APB2RSTR_SPI1RST_Msk (0x1UL << RCC_APB2RSTR_SPI1RST_Pos)
#define RCC_APB2RSTR_SPI1RST RCC_APB2RSTR_SPI1RST_Msk
#define RCC_APB2RSTR_USART1RST_Pos (14U)
#define RCC_APB2RSTR_USART1RST_Msk (0x1UL << RCC_APB2RSTR_USART1RST_Pos)
#define RCC_APB2RSTR_USART1RST RCC_APB2RSTR_USART1RST_Msk
#define RCC_APB2RSTR_TIM16RST_Pos (17U)
#define RCC_APB2RSTR_TIM16RST_Msk (0x1UL << RCC_APB2RSTR_TIM16RST_Pos)
#define RCC_APB2RSTR_TIM16RST RCC_APB2RSTR_TIM16RST_Msk
#define RCC_APB2RSTR_TIM17RST_Pos (18U)
#define RCC_APB2RSTR_TIM17RST_Msk (0x1UL << RCC_APB2RSTR_TIM17RST_Pos)
#define RCC_APB2RSTR_TIM17RST RCC_APB2RSTR_TIM17RST_Msk
#define RCC_APB2RSTR_SAI1RST_Pos (21U)
#define RCC_APB2RSTR_SAI1RST_Msk (0x1UL << RCC_APB2RSTR_SAI1RST_Pos)
#define RCC_APB2RSTR_SAI1RST RCC_APB2RSTR_SAI1RST_Msk
#define RCC_APB3RSTR_RFRST_Pos (0U)
#define RCC_APB3RSTR_RFRST_Msk (0x1UL << RCC_APB3RSTR_RFRST_Pos)
#define RCC_APB3RSTR_RFRST RCC_APB3RSTR_RFRST_Msk
#define RCC_AHB1ENR_DMA1EN_Pos (0U)
#define RCC_AHB1ENR_DMA1EN_Msk (0x1UL << RCC_AHB1ENR_DMA1EN_Pos)
#define RCC_AHB1ENR_DMA1EN RCC_AHB1ENR_DMA1EN_Msk
#define RCC_AHB1ENR_DMA2EN_Pos (1U)
#define RCC_AHB1ENR_DMA2EN_Msk (0x1UL << RCC_AHB1ENR_DMA2EN_Pos)
#define RCC_AHB1ENR_DMA2EN RCC_AHB1ENR_DMA2EN_Msk
#define RCC_AHB1ENR_DMAMUX1EN_Pos (2U)
#define RCC_AHB1ENR_DMAMUX1EN_Msk (0x1UL << RCC_AHB1ENR_DMAMUX1EN_Pos)
#define RCC_AHB1ENR_DMAMUX1EN RCC_AHB1ENR_DMAMUX1EN_Msk
#define RCC_AHB1ENR_CRCEN_Pos (12U)
#define RCC_AHB1ENR_CRCEN_Msk (0x1UL << RCC_AHB1ENR_CRCEN_Pos)
#define RCC_AHB1ENR_CRCEN RCC_AHB1ENR_CRCEN_Msk
#define RCC_AHB1ENR_TSCEN_Pos (16U)
#define RCC_AHB1ENR_TSCEN_Msk (0x1UL << RCC_AHB1ENR_TSCEN_Pos)
#define RCC_AHB1ENR_TSCEN RCC_AHB1ENR_TSCEN_Msk
#define RCC_AHB2ENR_GPIOAEN_Pos (0U)
#define RCC_AHB2ENR_GPIOAEN_Msk (0x1UL << RCC_AHB2ENR_GPIOAEN_Pos)
#define RCC_AHB2ENR_GPIOAEN RCC_AHB2ENR_GPIOAEN_Msk
#define RCC_AHB2ENR_GPIOBEN_Pos (1U)
#define RCC_AHB2ENR_GPIOBEN_Msk (0x1UL << RCC_AHB2ENR_GPIOBEN_Pos)
#define RCC_AHB2ENR_GPIOBEN RCC_AHB2ENR_GPIOBEN_Msk
#define RCC_AHB2ENR_GPIOCEN_Pos (2U)
#define RCC_AHB2ENR_GPIOCEN_Msk (0x1UL << RCC_AHB2ENR_GPIOCEN_Pos)
#define RCC_AHB2ENR_GPIOCEN RCC_AHB2ENR_GPIOCEN_Msk
#define RCC_AHB2ENR_GPIODEN_Pos (3U)
#define RCC_AHB2ENR_GPIODEN_Msk (0x1UL << RCC_AHB2ENR_GPIODEN_Pos)
#define RCC_AHB2ENR_GPIODEN RCC_AHB2ENR_GPIODEN_Msk
#define RCC_AHB2ENR_GPIOEEN_Pos (4U)
#define RCC_AHB2ENR_GPIOEEN_Msk (0x1UL << RCC_AHB2ENR_GPIOEEN_Pos)
#define RCC_AHB2ENR_GPIOEEN RCC_AHB2ENR_GPIOEEN_Msk
#define RCC_AHB2ENR_GPIOHEN_Pos (7U)
#define RCC_AHB2ENR_GPIOHEN_Msk (0x1UL << RCC_AHB2ENR_GPIOHEN_Pos)
#define RCC_AHB2ENR_GPIOHEN RCC_AHB2ENR_GPIOHEN_Msk
#define RCC_AHB2ENR_ADCEN_Pos (13U)
#define RCC_AHB2ENR_ADCEN_Msk (0x1UL << RCC_AHB2ENR_ADCEN_Pos)
#define RCC_AHB2ENR_ADCEN RCC_AHB2ENR_ADCEN_Msk
#define RCC_AHB2ENR_AES1EN_Pos (16U)
#define RCC_AHB2ENR_AES1EN_Msk (0x1UL << RCC_AHB2ENR_AES1EN_Pos)
#define RCC_AHB2ENR_AES1EN RCC_AHB2ENR_AES1EN_Msk
#define RCC_AHB3ENR_QUADSPIEN_Pos (8U)
#define RCC_AHB3ENR_QUADSPIEN_Msk (0x1UL << RCC_AHB3ENR_QUADSPIEN_Pos)
#define RCC_AHB3ENR_QUADSPIEN RCC_AHB3ENR_QUADSPIEN_Msk
#define RCC_AHB3ENR_PKAEN_Pos (16U)
#define RCC_AHB3ENR_PKAEN_Msk (0x1UL << RCC_AHB3ENR_PKAEN_Pos)
#define RCC_AHB3ENR_PKAEN RCC_AHB3ENR_PKAEN_Msk
#define RCC_AHB3ENR_AES2EN_Pos (17U)
#define RCC_AHB3ENR_AES2EN_Msk (0x1UL << RCC_AHB3ENR_AES2EN_Pos)
#define RCC_AHB3ENR_AES2EN RCC_AHB3ENR_AES2EN_Msk
#define RCC_AHB3ENR_RNGEN_Pos (18U)
#define RCC_AHB3ENR_RNGEN_Msk (0x1UL << RCC_AHB3ENR_RNGEN_Pos)
#define RCC_AHB3ENR_RNGEN RCC_AHB3ENR_RNGEN_Msk
#define RCC_AHB3ENR_HSEMEN_Pos (19U)
#define RCC_AHB3ENR_HSEMEN_Msk (0x1UL << RCC_AHB3ENR_HSEMEN_Pos)
#define RCC_AHB3ENR_HSEMEN RCC_AHB3ENR_HSEMEN_Msk
#define RCC_AHB3ENR_IPCCEN_Pos (20U)
#define RCC_AHB3ENR_IPCCEN_Msk (0x1UL << RCC_AHB3ENR_IPCCEN_Pos)
#define RCC_AHB3ENR_IPCCEN RCC_AHB3ENR_IPCCEN_Msk
#define RCC_AHB3ENR_FLASHEN_Pos (25U)
#define RCC_AHB3ENR_FLASHEN_Msk (0x1UL << RCC_AHB3ENR_FLASHEN_Pos)
#define RCC_AHB3ENR_FLASHEN RCC_AHB3ENR_FLASHEN_Msk
#define RCC_APB1ENR1_TIM2EN_Pos (0U)
#define RCC_APB1ENR1_TIM2EN_Msk (0x1UL << RCC_APB1ENR1_TIM2EN_Pos)
#define RCC_APB1ENR1_TIM2EN RCC_APB1ENR1_TIM2EN_Msk
#define RCC_APB1ENR1_LCDEN_Pos (9U)
#define RCC_APB1ENR1_LCDEN_Msk (0x1UL << RCC_APB1ENR1_LCDEN_Pos)
#define RCC_APB1ENR1_LCDEN RCC_APB1ENR1_LCDEN_Msk
#define RCC_APB1ENR1_RTCAPBEN_Pos (10U)
#define RCC_APB1ENR1_RTCAPBEN_Msk (0x1UL << RCC_APB1ENR1_RTCAPBEN_Pos)
#define RCC_APB1ENR1_RTCAPBEN RCC_APB1ENR1_RTCAPBEN_Msk
#define RCC_APB1ENR1_WWDGEN_Pos (11U)
#define RCC_APB1ENR1_WWDGEN_Msk (0x1UL << RCC_APB1ENR1_WWDGEN_Pos)
#define RCC_APB1ENR1_WWDGEN RCC_APB1ENR1_WWDGEN_Msk
#define RCC_APB1ENR1_SPI2EN_Pos (14U)
#define RCC_APB1ENR1_SPI2EN_Msk (0x1UL << RCC_APB1ENR1_SPI2EN_Pos)
#define RCC_APB1ENR1_SPI2EN RCC_APB1ENR1_SPI2EN_Msk
#define RCC_APB1ENR1_I2C1EN_Pos (21U)
#define RCC_APB1ENR1_I2C1EN_Msk (0x1UL << RCC_APB1ENR1_I2C1EN_Pos)
#define RCC_APB1ENR1_I2C1EN RCC_APB1ENR1_I2C1EN_Msk
#define RCC_APB1ENR1_I2C3EN_Pos (23U)
#define RCC_APB1ENR1_I2C3EN_Msk (0x1UL << RCC_APB1ENR1_I2C3EN_Pos)
#define RCC_APB1ENR1_I2C3EN RCC_APB1ENR1_I2C3EN_Msk
#define RCC_APB1ENR1_CRSEN_Pos (24U)
#define RCC_APB1ENR1_CRSEN_Msk (0x1UL << RCC_APB1ENR1_CRSEN_Pos)
#define RCC_APB1ENR1_CRSEN RCC_APB1ENR1_CRSEN_Msk
#define RCC_APB1ENR1_USBEN_Pos (26U)
#define RCC_APB1ENR1_USBEN_Msk (0x1UL << RCC_APB1ENR1_USBEN_Pos)
#define RCC_APB1ENR1_USBEN RCC_APB1ENR1_USBEN_Msk
#define RCC_APB1ENR1_LPTIM1EN_Pos (31U)
#define RCC_APB1ENR1_LPTIM1EN_Msk (0x1UL << RCC_APB1ENR1_LPTIM1EN_Pos)
#define RCC_APB1ENR1_LPTIM1EN RCC_APB1ENR1_LPTIM1EN_Msk
#define RCC_APB1ENR2_LPUART1EN_Pos (0U)
#define RCC_APB1ENR2_LPUART1EN_Msk (0x1UL << RCC_APB1ENR2_LPUART1EN_Pos)
#define RCC_APB1ENR2_LPUART1EN RCC_APB1ENR2_LPUART1EN_Msk
#define RCC_APB1ENR2_LPTIM2EN_Pos (5U)
#define RCC_APB1ENR2_LPTIM2EN_Msk (0x1UL << RCC_APB1ENR2_LPTIM2EN_Pos)
#define RCC_APB1ENR2_LPTIM2EN RCC_APB1ENR2_LPTIM2EN_Msk
#define RCC_APB2ENR_TIM1EN_Pos (11U)
#define RCC_APB2ENR_TIM1EN_Msk (0x1UL << RCC_APB2ENR_TIM1EN_Pos)
#define RCC_APB2ENR_TIM1EN RCC_APB2ENR_TIM1EN_Msk
#define RCC_APB2ENR_SPI1EN_Pos (12U)
#define RCC_APB2ENR_SPI1EN_Msk (0x1UL << RCC_APB2ENR_SPI1EN_Pos)
#define RCC_APB2ENR_SPI1EN RCC_APB2ENR_SPI1EN_Msk
#define RCC_APB2ENR_USART1EN_Pos (14U)
#define RCC_APB2ENR_USART1EN_Msk (0x1UL << RCC_APB2ENR_USART1EN_Pos)
#define RCC_APB2ENR_USART1EN RCC_APB2ENR_USART1EN_Msk
#define RCC_APB2ENR_TIM16EN_Pos (17U)
#define RCC_APB2ENR_TIM16EN_Msk (0x1UL << RCC_APB2ENR_TIM16EN_Pos)
#define RCC_APB2ENR_TIM16EN RCC_APB2ENR_TIM16EN_Msk
#define RCC_APB2ENR_TIM17EN_Pos (18U)
#define RCC_APB2ENR_TIM17EN_Msk (0x1UL << RCC_APB2ENR_TIM17EN_Pos)
#define RCC_APB2ENR_TIM17EN RCC_APB2ENR_TIM17EN_Msk
#define RCC_APB2ENR_SAI1EN_Pos (21U)
#define RCC_APB2ENR_SAI1EN_Msk (0x1UL << RCC_APB2ENR_SAI1EN_Pos)
#define RCC_APB2ENR_SAI1EN RCC_APB2ENR_SAI1EN_Msk
#define RCC_AHB1SMENR_DMA1SMEN_Pos (0U)
#define RCC_AHB1SMENR_DMA1SMEN_Msk (0x1UL << RCC_AHB1SMENR_DMA1SMEN_Pos)
#define RCC_AHB1SMENR_DMA1SMEN RCC_AHB1SMENR_DMA1SMEN_Msk
#define RCC_AHB1SMENR_DMA2SMEN_Pos (1U)
#define RCC_AHB1SMENR_DMA2SMEN_Msk (0x1UL << RCC_AHB1SMENR_DMA2SMEN_Pos)
#define RCC_AHB1SMENR_DMA2SMEN RCC_AHB1SMENR_DMA2SMEN_Msk
#define RCC_AHB1SMENR_DMAMUX1SMEN_Pos (2U)
#define RCC_AHB1SMENR_DMAMUX1SMEN_Msk (0x1UL << RCC_AHB1SMENR_DMAMUX1SMEN_Pos)
#define RCC_AHB1SMENR_DMAMUX1SMEN RCC_AHB1SMENR_DMAMUX1SMEN_Msk
#define RCC_AHB1SMENR_SRAM1SMEN_Pos (9U)
#define RCC_AHB1SMENR_SRAM1SMEN_Msk (0x1UL << RCC_AHB1SMENR_SRAM1SMEN_Pos)
#define RCC_AHB1SMENR_SRAM1SMEN RCC_AHB1SMENR_SRAM1SMEN_Msk
#define RCC_AHB1SMENR_CRCSMEN_Pos (12U)
#define RCC_AHB1SMENR_CRCSMEN_Msk (0x1UL << RCC_AHB1SMENR_CRCSMEN_Pos)
#define RCC_AHB1SMENR_CRCSMEN RCC_AHB1SMENR_CRCSMEN_Msk
#define RCC_AHB1SMENR_TSCSMEN_Pos (16U)
#define RCC_AHB1SMENR_TSCSMEN_Msk (0x1UL << RCC_AHB1SMENR_TSCSMEN_Pos)
#define RCC_AHB1SMENR_TSCSMEN RCC_AHB1SMENR_TSCSMEN_Msk
#define RCC_AHB2SMENR_GPIOASMEN_Pos (0U)
#define RCC_AHB2SMENR_GPIOASMEN_Msk (0x1UL << RCC_AHB2SMENR_GPIOASMEN_Pos)
#define RCC_AHB2SMENR_GPIOASMEN RCC_AHB2SMENR_GPIOASMEN_Msk
#define RCC_AHB2SMENR_GPIOBSMEN_Pos (1U)
#define RCC_AHB2SMENR_GPIOBSMEN_Msk (0x1UL << RCC_AHB2SMENR_GPIOBSMEN_Pos)
#define RCC_AHB2SMENR_GPIOBSMEN RCC_AHB2SMENR_GPIOBSMEN_Msk
#define RCC_AHB2SMENR_GPIOCSMEN_Pos (2U)
#define RCC_AHB2SMENR_GPIOCSMEN_Msk (0x1UL << RCC_AHB2SMENR_GPIOCSMEN_Pos)
#define RCC_AHB2SMENR_GPIOCSMEN RCC_AHB2SMENR_GPIOCSMEN_Msk
#define RCC_AHB2SMENR_GPIODSMEN_Pos (3U)
#define RCC_AHB2SMENR_GPIODSMEN_Msk (0x1UL << RCC_AHB2SMENR_GPIODSMEN_Pos)
#define RCC_AHB2SMENR_GPIODSMEN RCC_AHB2SMENR_GPIODSMEN_Msk
#define RCC_AHB2SMENR_GPIOESMEN_Pos (4U)
#define RCC_AHB2SMENR_GPIOESMEN_Msk (0x1UL << RCC_AHB2SMENR_GPIOESMEN_Pos)
#define RCC_AHB2SMENR_GPIOESMEN RCC_AHB2SMENR_GPIOESMEN_Msk
#define RCC_AHB2SMENR_GPIOHSMEN_Pos (7U)
#define RCC_AHB2SMENR_GPIOHSMEN_Msk (0x1UL << RCC_AHB2SMENR_GPIOHSMEN_Pos)
#define RCC_AHB2SMENR_GPIOHSMEN RCC_AHB2SMENR_GPIOHSMEN_Msk
#define RCC_AHB2SMENR_ADCSMEN_Pos (13U)
#define RCC_AHB2SMENR_ADCSMEN_Msk (0x1UL << RCC_AHB2SMENR_ADCSMEN_Pos)
#define RCC_AHB2SMENR_ADCSMEN RCC_AHB2SMENR_ADCSMEN_Msk
#define RCC_AHB2SMENR_AES1SMEN_Pos (16U)
#define RCC_AHB2SMENR_AES1SMEN_Msk (0x1UL << RCC_AHB2SMENR_AES1SMEN_Pos)
#define RCC_AHB2SMENR_AES1SMEN RCC_AHB2SMENR_AES1SMEN_Msk
#define RCC_AHB3SMENR_QUADSPISMEN_Pos (8U)
#define RCC_AHB3SMENR_QUADSPISMEN_Msk (0x1UL << RCC_AHB3SMENR_QUADSPISMEN_Pos)
#define RCC_AHB3SMENR_QUADSPISMEN RCC_AHB3SMENR_QUADSPISMEN_Msk
#define RCC_AHB3SMENR_PKASMEN_Pos (16U)
#define RCC_AHB3SMENR_PKASMEN_Msk (0x1UL << RCC_AHB3SMENR_PKASMEN_Pos)
#define RCC_AHB3SMENR_PKASMEN RCC_AHB3SMENR_PKASMEN_Msk
#define RCC_AHB3SMENR_AES2SMEN_Pos (17U)
#define RCC_AHB3SMENR_AES2SMEN_Msk (0x1UL << RCC_AHB3SMENR_AES2SMEN_Pos)
#define RCC_AHB3SMENR_AES2SMEN RCC_AHB3SMENR_AES2SMEN_Msk
#define RCC_AHB3SMENR_RNGSMEN_Pos (18U)
#define RCC_AHB3SMENR_RNGSMEN_Msk (0x1UL << RCC_AHB3SMENR_RNGSMEN_Pos)
#define RCC_AHB3SMENR_RNGSMEN RCC_AHB3SMENR_RNGSMEN_Msk
#define RCC_AHB3SMENR_SRAM2SMEN_Pos (24U)
#define RCC_AHB3SMENR_SRAM2SMEN_Msk (0x1UL << RCC_AHB3SMENR_SRAM2SMEN_Pos)
#define RCC_AHB3SMENR_SRAM2SMEN RCC_AHB3SMENR_SRAM2SMEN_Msk
#define RCC_AHB3SMENR_FLASHSMEN_Pos (25U)
#define RCC_AHB3SMENR_FLASHSMEN_Msk (0x1UL << RCC_AHB3SMENR_FLASHSMEN_Pos)
#define RCC_AHB3SMENR_FLASHSMEN RCC_AHB3SMENR_FLASHSMEN_Msk
#define RCC_APB1SMENR1_TIM2SMEN_Pos (0U)
#define RCC_APB1SMENR1_TIM2SMEN_Msk (0x1UL << RCC_APB1SMENR1_TIM2SMEN_Pos)
#define RCC_APB1SMENR1_TIM2SMEN RCC_APB1SMENR1_TIM2SMEN_Msk
#define RCC_APB1SMENR1_LCDSMEN_Pos (9U)
#define RCC_APB1SMENR1_LCDSMEN_Msk (0x1UL << RCC_APB1SMENR1_LCDSMEN_Pos)
#define RCC_APB1SMENR1_LCDSMEN RCC_APB1SMENR1_LCDSMEN_Msk
#define RCC_APB1SMENR1_RTCAPBSMEN_Pos (10U)
#define RCC_APB1SMENR1_RTCAPBSMEN_Msk (0x1UL << RCC_APB1SMENR1_RTCAPBSMEN_Pos)
#define RCC_APB1SMENR1_RTCAPBSMEN RCC_APB1SMENR1_RTCAPBSMEN_Msk
#define RCC_APB1SMENR1_WWDGSMEN_Pos (11U)
#define RCC_APB1SMENR1_WWDGSMEN_Msk (0x1UL << RCC_APB1SMENR1_WWDGSMEN_Pos)
#define RCC_APB1SMENR1_WWDGSMEN RCC_APB1SMENR1_WWDGSMEN_Msk
#define RCC_APB1SMENR1_SPI2SMEN_Pos (14U)
#define RCC_APB1SMENR1_SPI2SMEN_Msk (0x1UL << RCC_APB1SMENR1_SPI2SMEN_Pos)
#define RCC_APB1SMENR1_SPI2SMEN RCC_APB1SMENR1_SPI2SMEN_Msk
#define RCC_APB1SMENR1_I2C1SMEN_Pos (21U)
#define RCC_APB1SMENR1_I2C1SMEN_Msk (0x1UL << RCC_APB1SMENR1_I2C1SMEN_Pos)
#define RCC_APB1SMENR1_I2C1SMEN RCC_APB1SMENR1_I2C1SMEN_Msk
#define RCC_APB1SMENR1_I2C3SMEN_Pos (23U)
#define RCC_APB1SMENR1_I2C3SMEN_Msk (0x1UL << RCC_APB1SMENR1_I2C3SMEN_Pos)
#define RCC_APB1SMENR1_I2C3SMEN RCC_APB1SMENR1_I2C3SMEN_Msk
#define RCC_APB1SMENR1_CRSSMEN_Pos (24U)
#define RCC_APB1SMENR1_CRSSMEN_Msk (0x1UL << RCC_APB1SMENR1_CRSSMEN_Pos)
#define RCC_APB1SMENR1_CRSSMEN RCC_APB1SMENR1_CRSSMEN_Msk
#define RCC_APB1SMENR1_USBSMEN_Pos (26U)
#define RCC_APB1SMENR1_USBSMEN_Msk (0x1UL << RCC_APB1SMENR1_USBSMEN_Pos)
#define RCC_APB1SMENR1_USBSMEN RCC_APB1SMENR1_USBSMEN_Msk
#define RCC_APB1SMENR1_LPTIM1SMEN_Pos (31U)
#define RCC_APB1SMENR1_LPTIM1SMEN_Msk (0x1UL << RCC_APB1SMENR1_LPTIM1SMEN_Pos)
#define RCC_APB1SMENR1_LPTIM1SMEN RCC_APB1SMENR1_LPTIM1SMEN_Msk
#define RCC_APB1SMENR2_LPUART1SMEN_Pos (0U)
#define RCC_APB1SMENR2_LPUART1SMEN_Msk (0x1UL << RCC_APB1SMENR2_LPUART1SMEN_Pos)
#define RCC_APB1SMENR2_LPUART1SMEN RCC_APB1SMENR2_LPUART1SMEN_Msk
#define RCC_APB1SMENR2_LPTIM2SMEN_Pos (5U)
#define RCC_APB1SMENR2_LPTIM2SMEN_Msk (0x1UL << RCC_APB1SMENR2_LPTIM2SMEN_Pos)
#define RCC_APB1SMENR2_LPTIM2SMEN RCC_APB1SMENR2_LPTIM2SMEN_Msk
#define RCC_APB2SMENR_TIM1SMEN_Pos (11U)
#define RCC_APB2SMENR_TIM1SMEN_Msk (0x1UL << RCC_APB2SMENR_TIM1SMEN_Pos)
#define RCC_APB2SMENR_TIM1SMEN RCC_APB2SMENR_TIM1SMEN_Msk
#define RCC_APB2SMENR_SPI1SMEN_Pos (12U)
#define RCC_APB2SMENR_SPI1SMEN_Msk (0x1UL << RCC_APB2SMENR_SPI1SMEN_Pos)
#define RCC_APB2SMENR_SPI1SMEN RCC_APB2SMENR_SPI1SMEN_Msk
#define RCC_APB2SMENR_USART1SMEN_Pos (14U)
#define RCC_APB2SMENR_USART1SMEN_Msk (0x1UL << RCC_APB2SMENR_USART1SMEN_Pos)
#define RCC_APB2SMENR_USART1SMEN RCC_APB2SMENR_USART1SMEN_Msk
#define RCC_APB2SMENR_TIM16SMEN_Pos (17U)
#define RCC_APB2SMENR_TIM16SMEN_Msk (0x1UL << RCC_APB2SMENR_TIM16SMEN_Pos)
#define RCC_APB2SMENR_TIM16SMEN RCC_APB2SMENR_TIM16SMEN_Msk
#define RCC_APB2SMENR_TIM17SMEN_Pos (18U)
#define RCC_APB2SMENR_TIM17SMEN_Msk (0x1UL << RCC_APB2SMENR_TIM17SMEN_Pos)
#define RCC_APB2SMENR_TIM17SMEN RCC_APB2SMENR_TIM17SMEN_Msk
#define RCC_APB2SMENR_SAI1SMEN_Pos (21U)
#define RCC_APB2SMENR_SAI1SMEN_Msk (0x1UL << RCC_APB2SMENR_SAI1SMEN_Pos)
#define RCC_APB2SMENR_SAI1SMEN RCC_APB2SMENR_SAI1SMEN_Msk
#define RCC_CCIPR_USART1SEL_Pos (0U)
#define RCC_CCIPR_USART1SEL_Msk (0x3UL << RCC_CCIPR_USART1SEL_Pos)
#define RCC_CCIPR_USART1SEL RCC_CCIPR_USART1SEL_Msk
#define RCC_CCIPR_USART1SEL_0 (0x1U << RCC_CCIPR_USART1SEL_Pos)
#define RCC_CCIPR_USART1SEL_1 (0x2U << RCC_CCIPR_USART1SEL_Pos)
#define RCC_CCIPR_LPUART1SEL_Pos (10U)
#define RCC_CCIPR_LPUART1SEL_Msk (0x3UL << RCC_CCIPR_LPUART1SEL_Pos)
#define RCC_CCIPR_LPUART1SEL RCC_CCIPR_LPUART1SEL_Msk
#define RCC_CCIPR_LPUART1SEL_0 (0x1U << RCC_CCIPR_LPUART1SEL_Pos)
#define RCC_CCIPR_LPUART1SEL_1 (0x2U << RCC_CCIPR_LPUART1SEL_Pos)
#define RCC_CCIPR_I2C1SEL_Pos (12U)
#define RCC_CCIPR_I2C1SEL_Msk (0x3UL << RCC_CCIPR_I2C1SEL_Pos)
#define RCC_CCIPR_I2C1SEL RCC_CCIPR_I2C1SEL_Msk
#define RCC_CCIPR_I2C1SEL_0 (0x1U << RCC_CCIPR_I2C1SEL_Pos)
#define RCC_CCIPR_I2C1SEL_1 (0x2U << RCC_CCIPR_I2C1SEL_Pos)
#define RCC_CCIPR_I2C3SEL_Pos (16U)
#define RCC_CCIPR_I2C3SEL_Msk (0x3UL << RCC_CCIPR_I2C3SEL_Pos)
#define RCC_CCIPR_I2C3SEL RCC_CCIPR_I2C3SEL_Msk
#define RCC_CCIPR_I2C3SEL_0 (0x1U << RCC_CCIPR_I2C3SEL_Pos)
#define RCC_CCIPR_I2C3SEL_1 (0x2U << RCC_CCIPR_I2C3SEL_Pos)
#define RCC_CCIPR_LPTIM1SEL_Pos (18U)
#define RCC_CCIPR_LPTIM1SEL_Msk (0x3UL << RCC_CCIPR_LPTIM1SEL_Pos)
#define RCC_CCIPR_LPTIM1SEL RCC_CCIPR_LPTIM1SEL_Msk
#define RCC_CCIPR_LPTIM1SEL_0 (0x1U << RCC_CCIPR_LPTIM1SEL_Pos)
#define RCC_CCIPR_LPTIM1SEL_1 (0x2U << RCC_CCIPR_LPTIM1SEL_Pos)
#define RCC_CCIPR_LPTIM2SEL_Pos (20U)
#define RCC_CCIPR_LPTIM2SEL_Msk (0x3UL << RCC_CCIPR_LPTIM2SEL_Pos)
#define RCC_CCIPR_LPTIM2SEL RCC_CCIPR_LPTIM2SEL_Msk
#define RCC_CCIPR_LPTIM2SEL_0 (0x1U << RCC_CCIPR_LPTIM2SEL_Pos)
#define RCC_CCIPR_LPTIM2SEL_1 (0x2U << RCC_CCIPR_LPTIM2SEL_Pos)
#define RCC_CCIPR_SAI1SEL_Pos (22U)
#define RCC_CCIPR_SAI1SEL_Msk (0x3UL << RCC_CCIPR_SAI1SEL_Pos)
#define RCC_CCIPR_SAI1SEL RCC_CCIPR_SAI1SEL_Msk
#define RCC_CCIPR_SAI1SEL_0 (0x1U << RCC_CCIPR_SAI1SEL_Pos)
#define RCC_CCIPR_SAI1SEL_1 (0x2U << RCC_CCIPR_SAI1SEL_Pos)
#define RCC_CCIPR_CLK48SEL_Pos (26U)
#define RCC_CCIPR_CLK48SEL_Msk (0x3UL << RCC_CCIPR_CLK48SEL_Pos)
#define RCC_CCIPR_CLK48SEL RCC_CCIPR_CLK48SEL_Msk
#define RCC_CCIPR_CLK48SEL_0 (0x1U << RCC_CCIPR_CLK48SEL_Pos)
#define RCC_CCIPR_CLK48SEL_1 (0x2U << RCC_CCIPR_CLK48SEL_Pos)
#define RCC_CCIPR_ADCSEL_Pos (28U)
#define RCC_CCIPR_ADCSEL_Msk (0x3UL << RCC_CCIPR_ADCSEL_Pos)
#define RCC_CCIPR_ADCSEL RCC_CCIPR_ADCSEL_Msk
#define RCC_CCIPR_ADCSEL_0 (0x1U << RCC_CCIPR_ADCSEL_Pos)
#define RCC_CCIPR_ADCSEL_1 (0x2U << RCC_CCIPR_ADCSEL_Pos)
#define RCC_CCIPR_RNGSEL_Pos (30U)
#define RCC_CCIPR_RNGSEL_Msk (0x3UL << RCC_CCIPR_RNGSEL_Pos)
#define RCC_CCIPR_RNGSEL RCC_CCIPR_RNGSEL_Msk
#define RCC_CCIPR_RNGSEL_0 (0x1U << RCC_CCIPR_RNGSEL_Pos)
#define RCC_CCIPR_RNGSEL_1 (0x2U << RCC_CCIPR_RNGSEL_Pos)
#define RCC_BDCR_LSEON_Pos (0U)
#define RCC_BDCR_LSEON_Msk (0x1UL << RCC_BDCR_LSEON_Pos)
#define RCC_BDCR_LSEON RCC_BDCR_LSEON_Msk
#define RCC_BDCR_LSERDY_Pos (1U)
#define RCC_BDCR_LSERDY_Msk (0x1UL << RCC_BDCR_LSERDY_Pos)
#define RCC_BDCR_LSERDY RCC_BDCR_LSERDY_Msk
#define RCC_BDCR_LSEBYP_Pos (2U)
#define RCC_BDCR_LSEBYP_Msk (0x1UL << RCC_BDCR_LSEBYP_Pos)
#define RCC_BDCR_LSEBYP RCC_BDCR_LSEBYP_Msk
#define RCC_BDCR_LSEDRV_Pos (3U)
#define RCC_BDCR_LSEDRV_Msk (0x3UL << RCC_BDCR_LSEDRV_Pos)
#define RCC_BDCR_LSEDRV RCC_BDCR_LSEDRV_Msk
#define RCC_BDCR_LSEDRV_0 (0x1U << RCC_BDCR_LSEDRV_Pos)
#define RCC_BDCR_LSEDRV_1 (0x2U << RCC_BDCR_LSEDRV_Pos)
#define RCC_BDCR_LSECSSON_Pos (5U)
#define RCC_BDCR_LSECSSON_Msk (0x1UL << RCC_BDCR_LSECSSON_Pos)
#define RCC_BDCR_LSECSSON RCC_BDCR_LSECSSON_Msk
#define RCC_BDCR_LSECSSD_Pos (6U)
#define RCC_BDCR_LSECSSD_Msk (0x1UL << RCC_BDCR_LSECSSD_Pos)
#define RCC_BDCR_LSECSSD RCC_BDCR_LSECSSD_Msk
#define RCC_BDCR_RTCSEL_Pos (8U)
#define RCC_BDCR_RTCSEL_Msk (0x3UL << RCC_BDCR_RTCSEL_Pos)
#define RCC_BDCR_RTCSEL RCC_BDCR_RTCSEL_Msk
#define RCC_BDCR_RTCSEL_0 (0x1U << RCC_BDCR_RTCSEL_Pos)
#define RCC_BDCR_RTCSEL_1 (0x2U << RCC_BDCR_RTCSEL_Pos)
#define RCC_BDCR_RTCEN_Pos (15U)
#define RCC_BDCR_RTCEN_Msk (0x1UL << RCC_BDCR_RTCEN_Pos)
#define RCC_BDCR_RTCEN RCC_BDCR_RTCEN_Msk
#define RCC_BDCR_BDRST_Pos (16U)
#define RCC_BDCR_BDRST_Msk (0x1UL << RCC_BDCR_BDRST_Pos)
#define RCC_BDCR_BDRST RCC_BDCR_BDRST_Msk
#define RCC_BDCR_LSCOEN_Pos (24U)
#define RCC_BDCR_LSCOEN_Msk (0x1UL << RCC_BDCR_LSCOEN_Pos)
#define RCC_BDCR_LSCOEN RCC_BDCR_LSCOEN_Msk
#define RCC_BDCR_LSCOSEL_Pos (25U)
#define RCC_BDCR_LSCOSEL_Msk (0x1UL << RCC_BDCR_LSCOSEL_Pos)
#define RCC_BDCR_LSCOSEL RCC_BDCR_LSCOSEL_Msk
#define RCC_CSR_LSI1ON_Pos (0U)
#define RCC_CSR_LSI1ON_Msk (0x1UL << RCC_CSR_LSI1ON_Pos)
#define RCC_CSR_LSI1ON RCC_CSR_LSI1ON_Msk
#define RCC_CSR_LSI1RDY_Pos (1U)
#define RCC_CSR_LSI1RDY_Msk (0x1UL << RCC_CSR_LSI1RDY_Pos)
#define RCC_CSR_LSI1RDY RCC_CSR_LSI1RDY_Msk
#define RCC_CSR_LSI2ON_Pos (2U)
#define RCC_CSR_LSI2ON_Msk (0x1UL << RCC_CSR_LSI2ON_Pos)
#define RCC_CSR_LSI2ON RCC_CSR_LSI2ON_Msk
#define RCC_CSR_LSI2RDY_Pos (3U)
#define RCC_CSR_LSI2RDY_Msk (0x1UL << RCC_CSR_LSI2RDY_Pos)
#define RCC_CSR_LSI2RDY RCC_CSR_LSI2RDY_Msk
#define RCC_CSR_LSI2TRIM_Pos (8U)
#define RCC_CSR_LSI2TRIM_Msk (0xFUL << RCC_CSR_LSI2TRIM_Pos)
#define RCC_CSR_LSI2TRIM RCC_CSR_LSI2TRIM_Msk
#define RCC_CSR_LSI2TRIM_0 (0x1U << RCC_CSR_LSI2TRIM_Pos)
#define RCC_CSR_LSI2TRIM_1 (0x2U << RCC_CSR_LSI2TRIM_Pos)
#define RCC_CSR_LSI2TRIM_2 (0x4U << RCC_CSR_LSI2TRIM_Pos)
#define RCC_CSR_LSI2TRIM_3 (0x8U << RCC_CSR_LSI2TRIM_Pos)
#define RCC_CSR_RFWKPSEL_Pos (14U)
#define RCC_CSR_RFWKPSEL_Msk (0x3UL << RCC_CSR_RFWKPSEL_Pos)
#define RCC_CSR_RFWKPSEL RCC_CSR_RFWKPSEL_Msk
#define RCC_CSR_RFWKPSEL_0 (0x1U << RCC_CSR_RFWKPSEL_Pos)
#define RCC_CSR_RFWKPSEL_1 (0x2U << RCC_CSR_RFWKPSEL_Pos)
#define RCC_CSR_RFRSTS_Pos (16U)
#define RCC_CSR_RFRSTS_Msk (0x1UL << RCC_CSR_RFRSTS_Pos)
#define RCC_CSR_RFRSTS RCC_CSR_RFRSTS_Msk
#define RCC_CSR_RMVF_Pos (23U)
#define RCC_CSR_RMVF_Msk (0x1UL << RCC_CSR_RMVF_Pos)
#define RCC_CSR_RMVF RCC_CSR_RMVF_Msk
#define RCC_CSR_OBLRSTF_Pos (25U)
#define RCC_CSR_OBLRSTF_Msk (0x1UL << RCC_CSR_OBLRSTF_Pos)
#define RCC_CSR_OBLRSTF RCC_CSR_OBLRSTF_Msk
#define RCC_CSR_PINRSTF_Pos (26U)
#define RCC_CSR_PINRSTF_Msk (0x1UL << RCC_CSR_PINRSTF_Pos)
#define RCC_CSR_PINRSTF RCC_CSR_PINRSTF_Msk
#define RCC_CSR_BORRSTF_Pos (27U)
#define RCC_CSR_BORRSTF_Msk (0x1UL << RCC_CSR_BORRSTF_Pos)
#define RCC_CSR_BORRSTF RCC_CSR_BORRSTF_Msk
#define RCC_CSR_SFTRSTF_Pos (28U)
#define RCC_CSR_SFTRSTF_Msk (0x1UL << RCC_CSR_SFTRSTF_Pos)
#define RCC_CSR_SFTRSTF RCC_CSR_SFTRSTF_Msk
#define RCC_CSR_IWDGRSTF_Pos (29U)
#define RCC_CSR_IWDGRSTF_Msk (0x1UL << RCC_CSR_IWDGRSTF_Pos)
#define RCC_CSR_IWDGRSTF RCC_CSR_IWDGRSTF_Msk
#define RCC_CSR_WWDGRSTF_Pos (30U)
#define RCC_CSR_WWDGRSTF_Msk (0x1UL << RCC_CSR_WWDGRSTF_Pos)
#define RCC_CSR_WWDGRSTF RCC_CSR_WWDGRSTF_Msk
#define RCC_CSR_LPWRRSTF_Pos (31U)
#define RCC_CSR_LPWRRSTF_Msk (0x1UL << RCC_CSR_LPWRRSTF_Pos)
#define RCC_CSR_LPWRRSTF RCC_CSR_LPWRRSTF_Msk
#define RCC_CRRCR_HSI48ON_Pos (0U)
#define RCC_CRRCR_HSI48ON_Msk (0x1UL << RCC_CRRCR_HSI48ON_Pos)
#define RCC_CRRCR_HSI48ON RCC_CRRCR_HSI48ON_Msk
#define RCC_CRRCR_HSI48RDY_Pos (1U)
#define RCC_CRRCR_HSI48RDY_Msk (0x1UL << RCC_CRRCR_HSI48RDY_Pos)
#define RCC_CRRCR_HSI48RDY RCC_CRRCR_HSI48RDY_Msk
#define RCC_CRRCR_HSI48CAL_Pos (7U)
#define RCC_CRRCR_HSI48CAL_Msk (0x1FFUL << RCC_CRRCR_HSI48CAL_Pos)
#define RCC_CRRCR_HSI48CAL RCC_CRRCR_HSI48CAL_Msk
#define RCC_CRRCR_HSI48CAL_0 (0x001U << RCC_CRRCR_HSI48CAL_Pos)
#define RCC_CRRCR_HSI48CAL_1 (0x002U << RCC_CRRCR_HSI48CAL_Pos)
#define RCC_CRRCR_HSI48CAL_2 (0x004U << RCC_CRRCR_HSI48CAL_Pos)
#define RCC_CRRCR_HSI48CAL_3 (0x008U << RCC_CRRCR_HSI48CAL_Pos)
#define RCC_CRRCR_HSI48CAL_4 (0x010U << RCC_CRRCR_HSI48CAL_Pos)
#define RCC_CRRCR_HSI48CAL_5 (0x020U << RCC_CRRCR_HSI48CAL_Pos)
#define RCC_CRRCR_HSI48CAL_6 (0x040U << RCC_CRRCR_HSI48CAL_Pos)
#define RCC_CRRCR_HSI48CAL_7 (0x080U << RCC_CRRCR_HSI48CAL_Pos)
#define RCC_CRRCR_HSI48CAL_8 (0x100U << RCC_CRRCR_HSI48CAL_Pos)
#define RCC_HSECR_UNLOCKED_Pos (0U)
#define RCC_HSECR_UNLOCKED_Msk (0x1UL << RCC_HSECR_UNLOCKED_Pos)
#define RCC_HSECR_UNLOCKED RCC_HSECR_UNLOCKED_Msk
#define RCC_HSECR_HSES_Pos (3U)
#define RCC_HSECR_HSES_Msk (0x1UL << RCC_HSECR_HSES_Pos)
#define RCC_HSECR_HSES RCC_HSECR_HSES_Msk
#define RCC_HSECR_HSEGMC_Pos (4U)
#define RCC_HSECR_HSEGMC_Msk (0x7UL << RCC_HSECR_HSEGMC_Pos)
#define RCC_HSECR_HSEGMC RCC_HSECR_HSEGMC_Msk
#define RCC_HSECR_HSEGMC0_Pos (4U)
#define RCC_HSECR_HSEGMC0_Msk (0x1UL << RCC_HSECR_HSEGMC0_Pos)
#define RCC_HSECR_HSEGMC0 RCC_HSECR_HSEGMC0_Msk
#define RCC_HSECR_HSEGMC1_Pos (5U)
#define RCC_HSECR_HSEGMC1_Msk (0x1UL << RCC_HSECR_HSEGMC1_Pos)
#define RCC_HSECR_HSEGMC1 RCC_HSECR_HSEGMC1_Msk
#define RCC_HSECR_HSEGMC2_Pos (6U)
#define RCC_HSECR_HSEGMC2_Msk (0x1UL << RCC_HSECR_HSEGMC2_Pos)
#define RCC_HSECR_HSEGMC2 RCC_HSECR_HSEGMC2_Msk
#define RCC_HSECR_HSETUNE_Pos (8U)
#define RCC_HSECR_HSETUNE_Msk (0x3FUL << RCC_HSECR_HSETUNE_Pos)
#define RCC_HSECR_HSETUNE RCC_HSECR_HSETUNE_Msk
#define RCC_HSECR_HSETUNE0_Pos (8U)
#define RCC_HSECR_HSETUNE0_Msk (0x1UL << RCC_HSECR_HSETUNE0_Pos)
#define RCC_HSECR_HSETUNE0 RCC_HSECR_HSETUNE0_Msk
#define RCC_HSECR_HSETUNE1_Pos (9U)
#define RCC_HSECR_HSETUNE1_Msk (0x1UL << RCC_HSECR_HSETUNE1_Pos)
#define RCC_HSECR_HSETUNE1 RCC_HSECR_HSETUNE1_Msk
#define RCC_HSECR_HSETUNE2_Pos (10U)
#define RCC_HSECR_HSETUNE2_Msk (0x1UL << RCC_HSECR_HSETUNE2_Pos)
#define RCC_HSECR_HSETUNE2 RCC_HSECR_HSETUNE2_Msk
#define RCC_HSECR_HSETUNE3_Pos (11U)
#define RCC_HSECR_HSETUNE3_Msk (0x1UL << RCC_HSECR_HSETUNE3_Pos)
#define RCC_HSECR_HSETUNE3 RCC_HSECR_HSETUNE3_Msk
#define RCC_HSECR_HSETUNE4_Pos (12U)
#define RCC_HSECR_HSETUNE4_Msk (0x1UL << RCC_HSECR_HSETUNE4_Pos)
#define RCC_HSECR_HSETUNE4 RCC_HSECR_HSETUNE4_Msk
#define RCC_HSECR_HSETUNE5_Pos (13U)
#define RCC_HSECR_HSETUNE5_Msk (0x1UL << RCC_HSECR_HSETUNE5_Pos)
#define RCC_HSECR_HSETUNE5 RCC_HSECR_HSETUNE5_Msk
#define RCC_EXTCFGR_SHDHPRE_Pos (0U)
#define RCC_EXTCFGR_SHDHPRE_Msk (0xFUL << RCC_EXTCFGR_SHDHPRE_Pos)
#define RCC_EXTCFGR_SHDHPRE RCC_EXTCFGR_SHDHPRE_Msk
#define RCC_EXTCFGR_SHDHPRE_0 (0x1U << RCC_EXTCFGR_SHDHPRE_Pos)
#define RCC_EXTCFGR_SHDHPRE_1 (0x2U << RCC_EXTCFGR_SHDHPRE_Pos)
#define RCC_EXTCFGR_SHDHPRE_2 (0x4U << RCC_EXTCFGR_SHDHPRE_Pos)
#define RCC_EXTCFGR_SHDHPRE_3 (0x8U << RCC_EXTCFGR_SHDHPRE_Pos)
#define RCC_EXTCFGR_C2HPRE_Pos (4U)
#define RCC_EXTCFGR_C2HPRE_Msk (0xFUL << RCC_EXTCFGR_C2HPRE_Pos)
#define RCC_EXTCFGR_C2HPRE RCC_EXTCFGR_C2HPRE_Msk
#define RCC_EXTCFGR_C2HPRE_0 (0x1U << RCC_EXTCFGR_C2HPRE_Pos)
#define RCC_EXTCFGR_C2HPRE_1 (0x2U << RCC_EXTCFGR_C2HPRE_Pos)
#define RCC_EXTCFGR_C2HPRE_2 (0x4U << RCC_EXTCFGR_C2HPRE_Pos)
#define RCC_EXTCFGR_C2HPRE_3 (0x8U << RCC_EXTCFGR_C2HPRE_Pos)
#define RCC_EXTCFGR_SHDHPREF_Pos (16U)
#define RCC_EXTCFGR_SHDHPREF_Msk (0x1UL << RCC_EXTCFGR_SHDHPREF_Pos)
#define RCC_EXTCFGR_SHDHPREF RCC_EXTCFGR_SHDHPREF_Msk
#define RCC_EXTCFGR_C2HPREF_Pos (17U)
#define RCC_EXTCFGR_C2HPREF_Msk (0x1UL << RCC_EXTCFGR_C2HPREF_Pos)
#define RCC_EXTCFGR_C2HPREF RCC_EXTCFGR_C2HPREF_Msk
#define RCC_EXTCFGR_RFCSS_Pos (20U)
#define RCC_EXTCFGR_RFCSS_Msk (0x1UL << RCC_EXTCFGR_RFCSS_Pos)
#define RCC_EXTCFGR_RFCSS RCC_EXTCFGR_RFCSS_Msk
#define RCC_C2AHB1ENR_DMA1EN_Pos (0U)
#define RCC_C2AHB1ENR_DMA1EN_Msk (0x1UL << RCC_C2AHB1ENR_DMA1EN_Pos)
#define RCC_C2AHB1ENR_DMA1EN RCC_C2AHB1ENR_DMA1EN_Msk
#define RCC_C2AHB1ENR_DMA2EN_Pos (1U)
#define RCC_C2AHB1ENR_DMA2EN_Msk (0x1UL << RCC_C2AHB1ENR_DMA2EN_Pos)
#define RCC_C2AHB1ENR_DMA2EN RCC_C2AHB1ENR_DMA2EN_Msk
#define RCC_C2AHB1ENR_DMAMUX1EN_Pos (2U)
#define RCC_C2AHB1ENR_DMAMUX1EN_Msk (0x1UL << RCC_C2AHB1ENR_DMAMUX1EN_Pos)
#define RCC_C2AHB1ENR_DMAMUX1EN RCC_C2AHB1ENR_DMAMUX1EN_Msk
#define RCC_C2AHB1ENR_SRAM1EN_Pos (9U)
#define RCC_C2AHB1ENR_SRAM1EN_Msk (0x1UL << RCC_C2AHB1ENR_SRAM1EN_Pos)
#define RCC_C2AHB1ENR_SRAM1EN RCC_C2AHB1ENR_SRAM1EN_Msk
#define RCC_C2AHB1ENR_CRCEN_Pos (12U)
#define RCC_C2AHB1ENR_CRCEN_Msk (0x1UL << RCC_C2AHB1ENR_CRCEN_Pos)
#define RCC_C2AHB1ENR_CRCEN RCC_C2AHB1ENR_CRCEN_Msk
#define RCC_C2AHB1ENR_TSCEN_Pos (16U)
#define RCC_C2AHB1ENR_TSCEN_Msk (0x1UL << RCC_C2AHB1ENR_TSCEN_Pos)
#define RCC_C2AHB1ENR_TSCEN RCC_C2AHB1ENR_TSCEN_Msk
#define RCC_C2AHB2ENR_GPIOAEN_Pos (0U)
#define RCC_C2AHB2ENR_GPIOAEN_Msk (0x1UL << RCC_C2AHB2ENR_GPIOAEN_Pos)
#define RCC_C2AHB2ENR_GPIOAEN RCC_C2AHB2ENR_GPIOAEN_Msk
#define RCC_C2AHB2ENR_GPIOBEN_Pos (1U)
#define RCC_C2AHB2ENR_GPIOBEN_Msk (0x1UL << RCC_C2AHB2ENR_GPIOBEN_Pos)
#define RCC_C2AHB2ENR_GPIOBEN RCC_C2AHB2ENR_GPIOBEN_Msk
#define RCC_C2AHB2ENR_GPIOCEN_Pos (2U)
#define RCC_C2AHB2ENR_GPIOCEN_Msk (0x1UL << RCC_C2AHB2ENR_GPIOCEN_Pos)
#define RCC_C2AHB2ENR_GPIOCEN RCC_C2AHB2ENR_GPIOCEN_Msk
#define RCC_C2AHB2ENR_GPIODEN_Pos (3U)
#define RCC_C2AHB2ENR_GPIODEN_Msk (0x1UL << RCC_C2AHB2ENR_GPIODEN_Pos)
#define RCC_C2AHB2ENR_GPIODEN RCC_C2AHB2ENR_GPIODEN_Msk
#define RCC_C2AHB2ENR_GPIOEEN_Pos (4U)
#define RCC_C2AHB2ENR_GPIOEEN_Msk (0x1UL << RCC_C2AHB2ENR_GPIOEEN_Pos)
#define RCC_C2AHB2ENR_GPIOEEN RCC_C2AHB2ENR_GPIOEEN_Msk
#define RCC_C2AHB2ENR_GPIOHEN_Pos (7U)
#define RCC_C2AHB2ENR_GPIOHEN_Msk (0x1UL << RCC_C2AHB2ENR_GPIOHEN_Pos)
#define RCC_C2AHB2ENR_GPIOHEN RCC_C2AHB2ENR_GPIOHEN_Msk
#define RCC_C2AHB2ENR_ADCEN_Pos (13U)
#define RCC_C2AHB2ENR_ADCEN_Msk (0x1UL << RCC_C2AHB2ENR_ADCEN_Pos)
#define RCC_C2AHB2ENR_ADCEN RCC_C2AHB2ENR_ADCEN_Msk
#define RCC_C2AHB2ENR_AES1EN_Pos (16U)
#define RCC_C2AHB2ENR_AES1EN_Msk (0x1UL << RCC_C2AHB2ENR_AES1EN_Pos)
#define RCC_C2AHB2ENR_AES1EN RCC_C2AHB2ENR_AES1EN_Msk
#define RCC_C2AHB3ENR_PKAEN_Pos (16U)
#define RCC_C2AHB3ENR_PKAEN_Msk (0x1UL << RCC_C2AHB3ENR_PKAEN_Pos)
#define RCC_C2AHB3ENR_PKAEN RCC_C2AHB3ENR_PKAEN_Msk
#define RCC_C2AHB3ENR_AES2EN_Pos (17U)
#define RCC_C2AHB3ENR_AES2EN_Msk (0x1UL << RCC_C2AHB3ENR_AES2EN_Pos)
#define RCC_C2AHB3ENR_AES2EN RCC_C2AHB3ENR_AES2EN_Msk
#define RCC_C2AHB3ENR_RNGEN_Pos (18U)
#define RCC_C2AHB3ENR_RNGEN_Msk (0x1UL << RCC_C2AHB3ENR_RNGEN_Pos)
#define RCC_C2AHB3ENR_RNGEN RCC_C2AHB3ENR_RNGEN_Msk
#define RCC_C2AHB3ENR_HSEMEN_Pos (19U)
#define RCC_C2AHB3ENR_HSEMEN_Msk (0x1UL << RCC_C2AHB3ENR_HSEMEN_Pos)
#define RCC_C2AHB3ENR_HSEMEN RCC_C2AHB3ENR_HSEMEN_Msk
#define RCC_C2AHB3ENR_IPCCEN_Pos (20U)
#define RCC_C2AHB3ENR_IPCCEN_Msk (0x1UL << RCC_C2AHB3ENR_IPCCEN_Pos)
#define RCC_C2AHB3ENR_IPCCEN RCC_C2AHB3ENR_IPCCEN_Msk
#define RCC_C2AHB3ENR_FLASHEN_Pos (25U)
#define RCC_C2AHB3ENR_FLASHEN_Msk (0x1UL << RCC_C2AHB3ENR_FLASHEN_Pos)
#define RCC_C2AHB3ENR_FLASHEN RCC_C2AHB3ENR_FLASHEN_Msk
#define RCC_C2APB1ENR1_TIM2EN_Pos (0U)
#define RCC_C2APB1ENR1_TIM2EN_Msk (0x1UL << RCC_C2APB1ENR1_TIM2EN_Pos)
#define RCC_C2APB1ENR1_TIM2EN RCC_C2APB1ENR1_TIM2EN_Msk
#define RCC_C2APB1ENR1_LCDEN_Pos (9U)
#define RCC_C2APB1ENR1_LCDEN_Msk (0x1UL << RCC_C2APB1ENR1_LCDEN_Pos)
#define RCC_C2APB1ENR1_LCDEN RCC_C2APB1ENR1_LCDEN_Msk
#define RCC_C2APB1ENR1_RTCAPBEN_Pos (10U)
#define RCC_C2APB1ENR1_RTCAPBEN_Msk (0x1UL << RCC_C2APB1ENR1_RTCAPBEN_Pos)
#define RCC_C2APB1ENR1_RTCAPBEN RCC_C2APB1ENR1_RTCAPBEN_Msk
#define RCC_C2APB1ENR1_SPI2EN_Pos (14U)
#define RCC_C2APB1ENR1_SPI2EN_Msk (0x1UL << RCC_C2APB1ENR1_SPI2EN_Pos)
#define RCC_C2APB1ENR1_SPI2EN RCC_C2APB1ENR1_SPI2EN_Msk
#define RCC_C2APB1ENR1_I2C1EN_Pos (21U)
#define RCC_C2APB1ENR1_I2C1EN_Msk (0x1UL << RCC_C2APB1ENR1_I2C1EN_Pos)
#define RCC_C2APB1ENR1_I2C1EN RCC_C2APB1ENR1_I2C1EN_Msk
#define RCC_C2APB1ENR1_I2C3EN_Pos (23U)
#define RCC_C2APB1ENR1_I2C3EN_Msk (0x1UL << RCC_C2APB1ENR1_I2C3EN_Pos)
#define RCC_C2APB1ENR1_I2C3EN RCC_C2APB1ENR1_I2C3EN_Msk
#define RCC_C2APB1ENR1_CRSEN_Pos (24U)
#define RCC_C2APB1ENR1_CRSEN_Msk (0x1UL << RCC_C2APB1ENR1_CRSEN_Pos)
#define RCC_C2APB1ENR1_CRSEN RCC_C2APB1ENR1_CRSEN_Msk
#define RCC_C2APB1ENR1_USBEN_Pos (26U)
#define RCC_C2APB1ENR1_USBEN_Msk (0x1UL << RCC_C2APB1ENR1_USBEN_Pos)
#define RCC_C2APB1ENR1_USBEN RCC_C2APB1ENR1_USBEN_Msk
#define RCC_C2APB1ENR1_LPTIM1EN_Pos (31U)
#define RCC_C2APB1ENR1_LPTIM1EN_Msk (0x1UL << RCC_C2APB1ENR1_LPTIM1EN_Pos)
#define RCC_C2APB1ENR1_LPTIM1EN RCC_C2APB1ENR1_LPTIM1EN_Msk
#define RCC_C2APB1ENR2_LPUART1EN_Pos (0U)
#define RCC_C2APB1ENR2_LPUART1EN_Msk (0x1UL << RCC_C2APB1ENR2_LPUART1EN_Pos)
#define RCC_C2APB1ENR2_LPUART1EN RCC_C2APB1ENR2_LPUART1EN_Msk
#define RCC_C2APB1ENR2_LPTIM2EN_Pos (5U)
#define RCC_C2APB1ENR2_LPTIM2EN_Msk (0x1UL << RCC_C2APB1ENR2_LPTIM2EN_Pos)
#define RCC_C2APB1ENR2_LPTIM2EN RCC_C2APB1ENR2_LPTIM2EN_Msk
#define RCC_C2APB2ENR_TIM1EN_Pos (11U)
#define RCC_C2APB2ENR_TIM1EN_Msk (0x1UL << RCC_C2APB2ENR_TIM1EN_Pos)
#define RCC_C2APB2ENR_TIM1EN RCC_C2APB2ENR_TIM1EN_Msk
#define RCC_C2APB2ENR_SPI1EN_Pos (12U)
#define RCC_C2APB2ENR_SPI1EN_Msk (0x1UL << RCC_C2APB2ENR_SPI1EN_Pos)
#define RCC_C2APB2ENR_SPI1EN RCC_C2APB2ENR_SPI1EN_Msk
#define RCC_C2APB2ENR_USART1EN_Pos (14U)
#define RCC_C2APB2ENR_USART1EN_Msk (0x1UL << RCC_C2APB2ENR_USART1EN_Pos)
#define RCC_C2APB2ENR_USART1EN RCC_C2APB2ENR_USART1EN_Msk
#define RCC_C2APB2ENR_TIM16EN_Pos (17U)
#define RCC_C2APB2ENR_TIM16EN_Msk (0x1UL << RCC_C2APB2ENR_TIM16EN_Pos)
#define RCC_C2APB2ENR_TIM16EN RCC_C2APB2ENR_TIM16EN_Msk
#define RCC_C2APB2ENR_TIM17EN_Pos (18U)
#define RCC_C2APB2ENR_TIM17EN_Msk (0x1UL << RCC_C2APB2ENR_TIM17EN_Pos)
#define RCC_C2APB2ENR_TIM17EN RCC_C2APB2ENR_TIM17EN_Msk
#define RCC_C2APB2ENR_SAI1EN_Pos (21U)
#define RCC_C2APB2ENR_SAI1EN_Msk (0x1UL << RCC_C2APB2ENR_SAI1EN_Pos)
#define RCC_C2APB2ENR_SAI1EN RCC_C2APB2ENR_SAI1EN_Msk
#define RCC_C2APB3ENR_BLEEN_Pos (0U)
#define RCC_C2APB3ENR_BLEEN_Msk (0x1UL << RCC_C2APB3ENR_BLEEN_Pos)
#define RCC_C2APB3ENR_BLEEN RCC_C2APB3ENR_BLEEN_Msk
#define RCC_C2APB3ENR_802EN_Pos (1U)
#define RCC_C2APB3ENR_802EN_Msk (0x1UL << RCC_C2APB3ENR_802EN_Pos)
#define RCC_C2APB3ENR_802EN RCC_C2APB3ENR_802EN_Msk
#define RCC_C2AHB1SMENR_DMA1SMEN_Pos (0U)
#define RCC_C2AHB1SMENR_DMA1SMEN_Msk (0x1UL << RCC_C2AHB1SMENR_DMA1SMEN_Pos)
#define RCC_C2AHB1SMENR_DMA1SMEN RCC_C2AHB1SMENR_DMA1SMEN_Msk
#define RCC_C2AHB1SMENR_DMA2SMEN_Pos (1U)
#define RCC_C2AHB1SMENR_DMA2SMEN_Msk (0x1UL << RCC_C2AHB1SMENR_DMA2SMEN_Pos)
#define RCC_C2AHB1SMENR_DMA2SMEN RCC_C2AHB1SMENR_DMA2SMEN_Msk
#define RCC_C2AHB1SMENR_DMAMUX1SMEN_Pos (2U)
#define RCC_C2AHB1SMENR_DMAMUX1SMEN_Msk (0x1UL << RCC_C2AHB1SMENR_DMAMUX1SMEN_Pos)
#define RCC_C2AHB1SMENR_DMAMUX1SMEN RCC_C2AHB1SMENR_DMAMUX1SMEN_Msk
#define RCC_C2AHB1SMENR_SRAM1SMEN_Pos (9U)
#define RCC_C2AHB1SMENR_SRAM1SMEN_Msk (0x1UL << RCC_C2AHB1SMENR_SRAM1SMEN_Pos)
#define RCC_C2AHB1SMENR_SRAM1SMEN RCC_C2AHB1SMENR_SRAM1SMEN_Msk
#define RCC_C2AHB1SMENR_CRCSMEN_Pos (12U)
#define RCC_C2AHB1SMENR_CRCSMEN_Msk (0x1UL << RCC_C2AHB1SMENR_CRCSMEN_Pos)
#define RCC_C2AHB1SMENR_CRCSMEN RCC_C2AHB1SMENR_CRCSMEN_Msk
#define RCC_C2AHB1SMENR_TSCSMEN_Pos (16U)
#define RCC_C2AHB1SMENR_TSCSMEN_Msk (0x1UL << RCC_C2AHB1SMENR_TSCSMEN_Pos)
#define RCC_C2AHB1SMENR_TSCSMEN RCC_C2AHB1SMENR_TSCSMEN_Msk
#define RCC_C2AHB2SMENR_GPIOASMEN_Pos (0U)
#define RCC_C2AHB2SMENR_GPIOASMEN_Msk (0x1UL << RCC_C2AHB2SMENR_GPIOASMEN_Pos)
#define RCC_C2AHB2SMENR_GPIOASMEN RCC_C2AHB2SMENR_GPIOASMEN_Msk
#define RCC_C2AHB2SMENR_GPIOBSMEN_Pos (1U)
#define RCC_C2AHB2SMENR_GPIOBSMEN_Msk (0x1UL << RCC_C2AHB2SMENR_GPIOBSMEN_Pos)
#define RCC_C2AHB2SMENR_GPIOBSMEN RCC_C2AHB2SMENR_GPIOBSMEN_Msk
#define RCC_C2AHB2SMENR_GPIOCSMEN_Pos (2U)
#define RCC_C2AHB2SMENR_GPIOCSMEN_Msk (0x1UL << RCC_C2AHB2SMENR_GPIOCSMEN_Pos)
#define RCC_C2AHB2SMENR_GPIOCSMEN RCC_C2AHB2SMENR_GPIOCSMEN_Msk
#define RCC_C2AHB2SMENR_GPIODSMEN_Pos (3U)
#define RCC_C2AHB2SMENR_GPIODSMEN_Msk (0x1UL << RCC_C2AHB2SMENR_GPIODSMEN_Pos)
#define RCC_C2AHB2SMENR_GPIODSMEN RCC_C2AHB2SMENR_GPIODSMEN_Msk
#define RCC_C2AHB2SMENR_GPIOESMEN_Pos (4U)
#define RCC_C2AHB2SMENR_GPIOESMEN_Msk (0x1UL << RCC_C2AHB2SMENR_GPIOESMEN_Pos)
#define RCC_C2AHB2SMENR_GPIOESMEN RCC_C2AHB2SMENR_GPIOESMEN_Msk
#define RCC_C2AHB2SMENR_GPIOHSMEN_Pos (7U)
#define RCC_C2AHB2SMENR_GPIOHSMEN_Msk (0x1UL << RCC_C2AHB2SMENR_GPIOHSMEN_Pos)
#define RCC_C2AHB2SMENR_GPIOHSMEN RCC_C2AHB2SMENR_GPIOHSMEN_Msk
#define RCC_C2AHB2SMENR_ADCSMEN_Pos (13U)
#define RCC_C2AHB2SMENR_ADCSMEN_Msk (0x1UL << RCC_C2AHB2SMENR_ADCSMEN_Pos)
#define RCC_C2AHB2SMENR_ADCSMEN RCC_C2AHB2SMENR_ADCSMEN_Msk
#define RCC_C2AHB2SMENR_AES1SMEN_Pos (16U)
#define RCC_C2AHB2SMENR_AES1SMEN_Msk (0x1UL << RCC_C2AHB2SMENR_AES1SMEN_Pos)
#define RCC_C2AHB2SMENR_AES1SMEN RCC_C2AHB2SMENR_AES1SMEN_Msk
#define RCC_C2AHB3SMENR_PKASMEN_Pos (16U)
#define RCC_C2AHB3SMENR_PKASMEN_Msk (0x1UL << RCC_C2AHB3SMENR_PKASMEN_Pos)
#define RCC_C2AHB3SMENR_PKASMEN RCC_C2AHB3SMENR_PKASMEN_Msk
#define RCC_C2AHB3SMENR_AES2SMEN_Pos (17U)
#define RCC_C2AHB3SMENR_AES2SMEN_Msk (0x1UL << RCC_C2AHB3SMENR_AES2SMEN_Pos)
#define RCC_C2AHB3SMENR_AES2SMEN RCC_C2AHB3SMENR_AES2SMEN_Msk
#define RCC_C2AHB3SMENR_RNGSMEN_Pos (18U)
#define RCC_C2AHB3SMENR_RNGSMEN_Msk (0x1UL << RCC_C2AHB3SMENR_RNGSMEN_Pos)
#define RCC_C2AHB3SMENR_RNGSMEN RCC_C2AHB3SMENR_RNGSMEN_Msk
#define RCC_C2AHB3SMENR_SRAM2SMEN_Pos (24U)
#define RCC_C2AHB3SMENR_SRAM2SMEN_Msk (0x1UL << RCC_C2AHB3SMENR_SRAM2SMEN_Pos)
#define RCC_C2AHB3SMENR_SRAM2SMEN RCC_C2AHB3SMENR_SRAM2SMEN_Msk
#define RCC_C2AHB3SMENR_FLASHSMEN_Pos (25U)
#define RCC_C2AHB3SMENR_FLASHSMEN_Msk (0x1UL << RCC_C2AHB3SMENR_FLASHSMEN_Pos)
#define RCC_C2AHB3SMENR_FLASHSMEN RCC_C2AHB3SMENR_FLASHSMEN_Msk
#define RCC_C2APB1SMENR1_TIM2SMEN_Pos (0U)
#define RCC_C2APB1SMENR1_TIM2SMEN_Msk (0x1UL << RCC_C2APB1SMENR1_TIM2SMEN_Pos)
#define RCC_C2APB1SMENR1_TIM2SMEN RCC_C2APB1SMENR1_TIM2SMEN_Msk
#define RCC_C2APB1SMENR1_LCDSMEN_Pos (9U)
#define RCC_C2APB1SMENR1_LCDSMEN_Msk (0x1UL << RCC_C2APB1SMENR1_LCDSMEN_Pos)
#define RCC_C2APB1SMENR1_LCDSMEN RCC_C2APB1SMENR1_LCDSMEN_Msk
#define RCC_C2APB1SMENR1_RTCAPBSMEN_Pos (10U)
#define RCC_C2APB1SMENR1_RTCAPBSMEN_Msk (0x1UL << RCC_C2APB1SMENR1_RTCAPBSMEN_Pos)
#define RCC_C2APB1SMENR1_RTCAPBSMEN RCC_C2APB1SMENR1_RTCAPBSMEN_Msk
#define RCC_C2APB1SMENR1_SPI2SMEN_Pos (14U)
#define RCC_C2APB1SMENR1_SPI2SMEN_Msk (0x1UL << RCC_C2APB1SMENR1_SPI2SMEN_Pos)
#define RCC_C2APB1SMENR1_SPI2SMEN RCC_C2APB1SMENR1_SPI2SMEN_Msk
#define RCC_C2APB1SMENR1_I2C1SMEN_Pos (21U)
#define RCC_C2APB1SMENR1_I2C1SMEN_Msk (0x1UL << RCC_C2APB1SMENR1_I2C1SMEN_Pos)
#define RCC_C2APB1SMENR1_I2C1SMEN RCC_C2APB1SMENR1_I2C1SMEN_Msk
#define RCC_C2APB1SMENR1_I2C3SMEN_Pos (23U)
#define RCC_C2APB1SMENR1_I2C3SMEN_Msk (0x1UL << RCC_C2APB1SMENR1_I2C3SMEN_Pos)
#define RCC_C2APB1SMENR1_I2C3SMEN RCC_C2APB1SMENR1_I2C3SMEN_Msk
#define RCC_C2APB1SMENR1_CRSSMEN_Pos (24U)
#define RCC_C2APB1SMENR1_CRSSMEN_Msk (0x1UL << RCC_C2APB1SMENR1_CRSSMEN_Pos)
#define RCC_C2APB1SMENR1_CRSSMEN RCC_C2APB1SMENR1_CRSSMEN_Msk
#define RCC_C2APB1SMENR1_USBSMEN_Pos (26U)
#define RCC_C2APB1SMENR1_USBSMEN_Msk (0x1UL << RCC_C2APB1SMENR1_USBSMEN_Pos)
#define RCC_C2APB1SMENR1_USBSMEN RCC_C2APB1SMENR1_USBSMEN_Msk
#define RCC_C2APB1SMENR1_LPTIM1SMEN_Pos (31U)
#define RCC_C2APB1SMENR1_LPTIM1SMEN_Msk (0x1UL << RCC_C2APB1SMENR1_LPTIM1SMEN_Pos)
#define RCC_C2APB1SMENR1_LPTIM1SMEN RCC_C2APB1SMENR1_LPTIM1SMEN_Msk
#define RCC_C2APB1SMENR2_LPUART1SMEN_Pos (0U)
#define RCC_C2APB1SMENR2_LPUART1SMEN_Msk (0x1UL << RCC_C2APB1SMENR2_LPUART1SMEN_Pos)
#define RCC_C2APB1SMENR2_LPUART1SMEN RCC_C2APB1SMENR2_LPUART1SMEN_Msk
#define RCC_C2APB1SMENR2_LPTIM2SMEN_Pos (5U)
#define RCC_C2APB1SMENR2_LPTIM2SMEN_Msk (0x1UL << RCC_C2APB1SMENR2_LPTIM2SMEN_Pos)
#define RCC_C2APB1SMENR2_LPTIM2SMEN RCC_C2APB1SMENR2_LPTIM2SMEN_Msk
#define RCC_C2APB2SMENR_TIM1SMEN_Pos (11U)
#define RCC_C2APB2SMENR_TIM1SMEN_Msk (0x1UL << RCC_C2APB2SMENR_TIM1SMEN_Pos)
#define RCC_C2APB2SMENR_TIM1SMEN RCC_C2APB2SMENR_TIM1SMEN_Msk
#define RCC_C2APB2SMENR_SPI1SMEN_Pos (12U)
#define RCC_C2APB2SMENR_SPI1SMEN_Msk (0x1UL << RCC_C2APB2SMENR_SPI1SMEN_Pos)
#define RCC_C2APB2SMENR_SPI1SMEN RCC_C2APB2SMENR_SPI1SMEN_Msk
#define RCC_C2APB2SMENR_USART1SMEN_Pos (14U)
#define RCC_C2APB2SMENR_USART1SMEN_Msk (0x1UL << RCC_C2APB2SMENR_USART1SMEN_Pos)
#define RCC_C2APB2SMENR_USART1SMEN RCC_C2APB2SMENR_USART1SMEN_Msk
#define RCC_C2APB2SMENR_TIM16SMEN_Pos (17U)
#define RCC_C2APB2SMENR_TIM16SMEN_Msk (0x1UL << RCC_C2APB2SMENR_TIM16SMEN_Pos)
#define RCC_C2APB2SMENR_TIM16SMEN RCC_C2APB2SMENR_TIM16SMEN_Msk
#define RCC_C2APB2SMENR_TIM17SMEN_Pos (18U)
#define RCC_C2APB2SMENR_TIM17SMEN_Msk (0x1UL << RCC_C2APB2SMENR_TIM17SMEN_Pos)
#define RCC_C2APB2SMENR_TIM17SMEN RCC_C2APB2SMENR_TIM17SMEN_Msk
#define RCC_C2APB2SMENR_SAI1SMEN_Pos (21U)
#define RCC_C2APB2SMENR_SAI1SMEN_Msk (0x1UL << RCC_C2APB2SMENR_SAI1SMEN_Pos)
#define RCC_C2APB2SMENR_SAI1SMEN RCC_C2APB2SMENR_SAI1SMEN_Msk
#define RCC_C2APB3SMENR_BLESMEN_Pos (0U)
#define RCC_C2APB3SMENR_BLESMEN_Msk (0x1UL << RCC_C2APB3SMENR_BLESMEN_Pos)
#define RCC_C2APB3SMENR_BLESMEN RCC_C2APB3SMENR_BLESMEN_Msk
#define RCC_C2APB3SMENR_802SMEN_Pos (1U)
#define RCC_C2APB3SMENR_802SMEN_Msk (0x1UL << RCC_C2APB3SMENR_802SMEN_Pos)
#define RCC_C2APB3SMENR_802SMEN RCC_C2APB3SMENR_802SMEN_Msk
#define RNG_CR_RNGEN_Pos (2U)
#define RNG_CR_RNGEN_Msk (0x1UL << RNG_CR_RNGEN_Pos)
#define RNG_CR_RNGEN RNG_CR_RNGEN_Msk
#define RNG_CR_IE_Pos (3U)
#define RNG_CR_IE_Msk (0x1UL << RNG_CR_IE_Pos)
#define RNG_CR_IE RNG_CR_IE_Msk
#define RNG_CR_CED_Pos (5U)
#define RNG_CR_CED_Msk (0x1UL << RNG_CR_CED_Pos)
#define RNG_CR_CED RNG_CR_CED_Msk
#define RNG_SR_DRDY_Pos (0U)
#define RNG_SR_DRDY_Msk (0x1UL << RNG_SR_DRDY_Pos)
#define RNG_SR_DRDY RNG_SR_DRDY_Msk
#define RNG_SR_CECS_Pos (1U)
#define RNG_SR_CECS_Msk (0x1UL << RNG_SR_CECS_Pos)
#define RNG_SR_CECS RNG_SR_CECS_Msk
#define RNG_SR_SECS_Pos (2U)
#define RNG_SR_SECS_Msk (0x1UL << RNG_SR_SECS_Pos)
#define RNG_SR_SECS RNG_SR_SECS_Msk
#define RNG_SR_CEIS_Pos (5U)
#define RNG_SR_CEIS_Msk (0x1UL << RNG_SR_CEIS_Pos)
#define RNG_SR_CEIS RNG_SR_CEIS_Msk
#define RNG_SR_SEIS_Pos (6U)
#define RNG_SR_SEIS_Msk (0x1UL << RNG_SR_SEIS_Pos)
#define RNG_SR_SEIS RNG_SR_SEIS_Msk
#define RTC_TAMPER1_SUPPORT 
#define RTC_TAMPER2_SUPPORT 
#define RTC_TAMPER3_SUPPORT 
#define RTC_WAKEUP_SUPPORT 
#define RTC_BACKUP_SUPPORT 
#define RTC_CPU2_SUPPORT_D 
#define RTC_INTERNALTS_SUPPORT 
#define RTC_TR_PM_Pos (22U)
#define RTC_TR_PM_Msk (0x1UL << RTC_TR_PM_Pos)
#define RTC_TR_PM RTC_TR_PM_Msk
#define RTC_TR_HT_Pos (20U)
#define RTC_TR_HT_Msk (0x3UL << RTC_TR_HT_Pos)
#define RTC_TR_HT RTC_TR_HT_Msk
#define RTC_TR_HT_0 (0x1U << RTC_TR_HT_Pos)
#define RTC_TR_HT_1 (0x2U << RTC_TR_HT_Pos)
#define RTC_TR_HU_Pos (16U)
#define RTC_TR_HU_Msk (0xFUL << RTC_TR_HU_Pos)
#define RTC_TR_HU RTC_TR_HU_Msk
#define RTC_TR_HU_0 (0x1U << RTC_TR_HU_Pos)
#define RTC_TR_HU_1 (0x2U << RTC_TR_HU_Pos)
#define RTC_TR_HU_2 (0x4U << RTC_TR_HU_Pos)
#define RTC_TR_HU_3 (0x8U << RTC_TR_HU_Pos)
#define RTC_TR_MNT_Pos (12U)
#define RTC_TR_MNT_Msk (0x7UL << RTC_TR_MNT_Pos)
#define RTC_TR_MNT RTC_TR_MNT_Msk
#define RTC_TR_MNT_0 (0x1U << RTC_TR_MNT_Pos)
#define RTC_TR_MNT_1 (0x2U << RTC_TR_MNT_Pos)
#define RTC_TR_MNT_2 (0x4U << RTC_TR_MNT_Pos)
#define RTC_TR_MNU_Pos (8U)
#define RTC_TR_MNU_Msk (0xFUL << RTC_TR_MNU_Pos)
#define RTC_TR_MNU RTC_TR_MNU_Msk
#define RTC_TR_MNU_0 (0x1U << RTC_TR_MNU_Pos)
#define RTC_TR_MNU_1 (0x2U << RTC_TR_MNU_Pos)
#define RTC_TR_MNU_2 (0x4U << RTC_TR_MNU_Pos)
#define RTC_TR_MNU_3 (0x8U << RTC_TR_MNU_Pos)
#define RTC_TR_ST_Pos (4U)
#define RTC_TR_ST_Msk (0x7UL << RTC_TR_ST_Pos)
#define RTC_TR_ST RTC_TR_ST_Msk
#define RTC_TR_ST_0 (0x1U << RTC_TR_ST_Pos)
#define RTC_TR_ST_1 (0x2U << RTC_TR_ST_Pos)
#define RTC_TR_ST_2 (0x4U << RTC_TR_ST_Pos)
#define RTC_TR_SU_Pos (0U)
#define RTC_TR_SU_Msk (0xFUL << RTC_TR_SU_Pos)
#define RTC_TR_SU RTC_TR_SU_Msk
#define RTC_TR_SU_0 (0x1U << RTC_TR_SU_Pos)
#define RTC_TR_SU_1 (0x2U << RTC_TR_SU_Pos)
#define RTC_TR_SU_2 (0x4U << RTC_TR_SU_Pos)
#define RTC_TR_SU_3 (0x8U << RTC_TR_SU_Pos)
#define RTC_DR_YT_Pos (20U)
#define RTC_DR_YT_Msk (0xFUL << RTC_DR_YT_Pos)
#define RTC_DR_YT RTC_DR_YT_Msk
#define RTC_DR_YT_0 (0x1U << RTC_DR_YT_Pos)
#define RTC_DR_YT_1 (0x2U << RTC_DR_YT_Pos)
#define RTC_DR_YT_2 (0x4U << RTC_DR_YT_Pos)
#define RTC_DR_YT_3 (0x8U << RTC_DR_YT_Pos)
#define RTC_DR_YU_Pos (16U)
#define RTC_DR_YU_Msk (0xFUL << RTC_DR_YU_Pos)
#define RTC_DR_YU RTC_DR_YU_Msk
#define RTC_DR_YU_0 (0x1U << RTC_DR_YU_Pos)
#define RTC_DR_YU_1 (0x2U << RTC_DR_YU_Pos)
#define RTC_DR_YU_2 (0x4U << RTC_DR_YU_Pos)
#define RTC_DR_YU_3 (0x8U << RTC_DR_YU_Pos)
#define RTC_DR_WDU_Pos (13U)
#define RTC_DR_WDU_Msk (0x7UL << RTC_DR_WDU_Pos)
#define RTC_DR_WDU RTC_DR_WDU_Msk
#define RTC_DR_WDU_0 (0x1U << RTC_DR_WDU_Pos)
#define RTC_DR_WDU_1 (0x2U << RTC_DR_WDU_Pos)
#define RTC_DR_WDU_2 (0x4U << RTC_DR_WDU_Pos)
#define RTC_DR_MT_Pos (12U)
#define RTC_DR_MT_Msk (0x1UL << RTC_DR_MT_Pos)
#define RTC_DR_MT RTC_DR_MT_Msk
#define RTC_DR_MU_Pos (8U)
#define RTC_DR_MU_Msk (0xFUL << RTC_DR_MU_Pos)
#define RTC_DR_MU RTC_DR_MU_Msk
#define RTC_DR_MU_0 (0x1U << RTC_DR_MU_Pos)
#define RTC_DR_MU_1 (0x2U << RTC_DR_MU_Pos)
#define RTC_DR_MU_2 (0x4U << RTC_DR_MU_Pos)
#define RTC_DR_MU_3 (0x8U << RTC_DR_MU_Pos)
#define RTC_DR_DT_Pos (4U)
#define RTC_DR_DT_Msk (0x3UL << RTC_DR_DT_Pos)
#define RTC_DR_DT RTC_DR_DT_Msk
#define RTC_DR_DT_0 (0x1U << RTC_DR_DT_Pos)
#define RTC_DR_DT_1 (0x2U << RTC_DR_DT_Pos)
#define RTC_DR_DU_Pos (0U)
#define RTC_DR_DU_Msk (0xFUL << RTC_DR_DU_Pos)
#define RTC_DR_DU RTC_DR_DU_Msk
#define RTC_DR_DU_0 (0x1U << RTC_DR_DU_Pos)
#define RTC_DR_DU_1 (0x2U << RTC_DR_DU_Pos)
#define RTC_DR_DU_2 (0x4U << RTC_DR_DU_Pos)
#define RTC_DR_DU_3 (0x8U << RTC_DR_DU_Pos)
#define RTC_CR_ITSE_Pos (24U)
#define RTC_CR_ITSE_Msk (0x1UL << RTC_CR_ITSE_Pos)
#define RTC_CR_ITSE RTC_CR_ITSE_Msk
#define RTC_CR_COE_Pos (23U)
#define RTC_CR_COE_Msk (0x1UL << RTC_CR_COE_Pos)
#define RTC_CR_COE RTC_CR_COE_Msk
#define RTC_CR_OSEL_Pos (21U)
#define RTC_CR_OSEL_Msk (0x3UL << RTC_CR_OSEL_Pos)
#define RTC_CR_OSEL RTC_CR_OSEL_Msk
#define RTC_CR_OSEL_0 (0x1U << RTC_CR_OSEL_Pos)
#define RTC_CR_OSEL_1 (0x2U << RTC_CR_OSEL_Pos)
#define RTC_CR_POL_Pos (20U)
#define RTC_CR_POL_Msk (0x1UL << RTC_CR_POL_Pos)
#define RTC_CR_POL RTC_CR_POL_Msk
#define RTC_CR_COSEL_Pos (19U)
#define RTC_CR_COSEL_Msk (0x1UL << RTC_CR_COSEL_Pos)
#define RTC_CR_COSEL RTC_CR_COSEL_Msk
#define RTC_CR_BKP_Pos (18U)
#define RTC_CR_BKP_Msk (0x1UL << RTC_CR_BKP_Pos)
#define RTC_CR_BKP RTC_CR_BKP_Msk
#define RTC_CR_SUB1H_Pos (17U)
#define RTC_CR_SUB1H_Msk (0x1UL << RTC_CR_SUB1H_Pos)
#define RTC_CR_SUB1H RTC_CR_SUB1H_Msk
#define RTC_CR_ADD1H_Pos (16U)
#define RTC_CR_ADD1H_Msk (0x1UL << RTC_CR_ADD1H_Pos)
#define RTC_CR_ADD1H RTC_CR_ADD1H_Msk
#define RTC_CR_TSIE_Pos (15U)
#define RTC_CR_TSIE_Msk (0x1UL << RTC_CR_TSIE_Pos)
#define RTC_CR_TSIE RTC_CR_TSIE_Msk
#define RTC_CR_WUTIE_Pos (14U)
#define RTC_CR_WUTIE_Msk (0x1UL << RTC_CR_WUTIE_Pos)
#define RTC_CR_WUTIE RTC_CR_WUTIE_Msk
#define RTC_CR_ALRBIE_Pos (13U)
#define RTC_CR_ALRBIE_Msk (0x1UL << RTC_CR_ALRBIE_Pos)
#define RTC_CR_ALRBIE RTC_CR_ALRBIE_Msk
#define RTC_CR_ALRAIE_Pos (12U)
#define RTC_CR_ALRAIE_Msk (0x1UL << RTC_CR_ALRAIE_Pos)
#define RTC_CR_ALRAIE RTC_CR_ALRAIE_Msk
#define RTC_CR_TSE_Pos (11U)
#define RTC_CR_TSE_Msk (0x1UL << RTC_CR_TSE_Pos)
#define RTC_CR_TSE RTC_CR_TSE_Msk
#define RTC_CR_WUTE_Pos (10U)
#define RTC_CR_WUTE_Msk (0x1UL << RTC_CR_WUTE_Pos)
#define RTC_CR_WUTE RTC_CR_WUTE_Msk
#define RTC_CR_ALRBE_Pos (9U)
#define RTC_CR_ALRBE_Msk (0x1UL << RTC_CR_ALRBE_Pos)
#define RTC_CR_ALRBE RTC_CR_ALRBE_Msk
#define RTC_CR_ALRAE_Pos (8U)
#define RTC_CR_ALRAE_Msk (0x1UL << RTC_CR_ALRAE_Pos)
#define RTC_CR_ALRAE RTC_CR_ALRAE_Msk
#define RTC_CR_FMT_Pos (6U)
#define RTC_CR_FMT_Msk (0x1UL << RTC_CR_FMT_Pos)
#define RTC_CR_FMT RTC_CR_FMT_Msk
#define RTC_CR_BYPSHAD_Pos (5U)
#define RTC_CR_BYPSHAD_Msk (0x1UL << RTC_CR_BYPSHAD_Pos)
#define RTC_CR_BYPSHAD RTC_CR_BYPSHAD_Msk
#define RTC_CR_REFCKON_Pos (4U)
#define RTC_CR_REFCKON_Msk (0x1UL << RTC_CR_REFCKON_Pos)
#define RTC_CR_REFCKON RTC_CR_REFCKON_Msk
#define RTC_CR_TSEDGE_Pos (3U)
#define RTC_CR_TSEDGE_Msk (0x1UL << RTC_CR_TSEDGE_Pos)
#define RTC_CR_TSEDGE RTC_CR_TSEDGE_Msk
#define RTC_CR_WUCKSEL_Pos (0U)
#define RTC_CR_WUCKSEL_Msk (0x7UL << RTC_CR_WUCKSEL_Pos)
#define RTC_CR_WUCKSEL RTC_CR_WUCKSEL_Msk
#define RTC_CR_WUCKSEL_0 (0x1U << RTC_CR_WUCKSEL_Pos)
#define RTC_CR_WUCKSEL_1 (0x2U << RTC_CR_WUCKSEL_Pos)
#define RTC_CR_WUCKSEL_2 (0x4U << RTC_CR_WUCKSEL_Pos)
#define RTC_ISR_ITSF_Pos (17U)
#define RTC_ISR_ITSF_Msk (0x1UL << RTC_ISR_ITSF_Pos)
#define RTC_ISR_ITSF RTC_ISR_ITSF_Msk
#define RTC_ISR_RECALPF_Pos (16U)
#define RTC_ISR_RECALPF_Msk (0x1UL << RTC_ISR_RECALPF_Pos)
#define RTC_ISR_RECALPF RTC_ISR_RECALPF_Msk
#define RTC_ISR_TAMP3F_Pos (15U)
#define RTC_ISR_TAMP3F_Msk (0x1UL << RTC_ISR_TAMP3F_Pos)
#define RTC_ISR_TAMP3F RTC_ISR_TAMP3F_Msk
#define RTC_ISR_TAMP2F_Pos (14U)
#define RTC_ISR_TAMP2F_Msk (0x1UL << RTC_ISR_TAMP2F_Pos)
#define RTC_ISR_TAMP2F RTC_ISR_TAMP2F_Msk
#define RTC_ISR_TAMP1F_Pos (13U)
#define RTC_ISR_TAMP1F_Msk (0x1UL << RTC_ISR_TAMP1F_Pos)
#define RTC_ISR_TAMP1F RTC_ISR_TAMP1F_Msk
#define RTC_ISR_TSOVF_Pos (12U)
#define RTC_ISR_TSOVF_Msk (0x1UL << RTC_ISR_TSOVF_Pos)
#define RTC_ISR_TSOVF RTC_ISR_TSOVF_Msk
#define RTC_ISR_TSF_Pos (11U)
#define RTC_ISR_TSF_Msk (0x1UL << RTC_ISR_TSF_Pos)
#define RTC_ISR_TSF RTC_ISR_TSF_Msk
#define RTC_ISR_WUTF_Pos (10U)
#define RTC_ISR_WUTF_Msk (0x1UL << RTC_ISR_WUTF_Pos)
#define RTC_ISR_WUTF RTC_ISR_WUTF_Msk
#define RTC_ISR_ALRBF_Pos (9U)
#define RTC_ISR_ALRBF_Msk (0x1UL << RTC_ISR_ALRBF_Pos)
#define RTC_ISR_ALRBF RTC_ISR_ALRBF_Msk
#define RTC_ISR_ALRAF_Pos (8U)
#define RTC_ISR_ALRAF_Msk (0x1UL << RTC_ISR_ALRAF_Pos)
#define RTC_ISR_ALRAF RTC_ISR_ALRAF_Msk
#define RTC_ISR_INIT_Pos (7U)
#define RTC_ISR_INIT_Msk (0x1UL << RTC_ISR_INIT_Pos)
#define RTC_ISR_INIT RTC_ISR_INIT_Msk
#define RTC_ISR_INITF_Pos (6U)
#define RTC_ISR_INITF_Msk (0x1UL << RTC_ISR_INITF_Pos)
#define RTC_ISR_INITF RTC_ISR_INITF_Msk
#define RTC_ISR_RSF_Pos (5U)
#define RTC_ISR_RSF_Msk (0x1UL << RTC_ISR_RSF_Pos)
#define RTC_ISR_RSF RTC_ISR_RSF_Msk
#define RTC_ISR_INITS_Pos (4U)
#define RTC_ISR_INITS_Msk (0x1UL << RTC_ISR_INITS_Pos)
#define RTC_ISR_INITS RTC_ISR_INITS_Msk
#define RTC_ISR_SHPF_Pos (3U)
#define RTC_ISR_SHPF_Msk (0x1UL << RTC_ISR_SHPF_Pos)
#define RTC_ISR_SHPF RTC_ISR_SHPF_Msk
#define RTC_ISR_WUTWF_Pos (2U)
#define RTC_ISR_WUTWF_Msk (0x1UL << RTC_ISR_WUTWF_Pos)
#define RTC_ISR_WUTWF RTC_ISR_WUTWF_Msk
#define RTC_ISR_ALRBWF_Pos (1U)
#define RTC_ISR_ALRBWF_Msk (0x1UL << RTC_ISR_ALRBWF_Pos)
#define RTC_ISR_ALRBWF RTC_ISR_ALRBWF_Msk
#define RTC_ISR_ALRAWF_Pos (0U)
#define RTC_ISR_ALRAWF_Msk (0x1UL << RTC_ISR_ALRAWF_Pos)
#define RTC_ISR_ALRAWF RTC_ISR_ALRAWF_Msk
#define RTC_PRER_PREDIV_A_Pos (16U)
#define RTC_PRER_PREDIV_A_Msk (0x7FUL << RTC_PRER_PREDIV_A_Pos)
#define RTC_PRER_PREDIV_A RTC_PRER_PREDIV_A_Msk
#define RTC_PRER_PREDIV_S_Pos (0U)
#define RTC_PRER_PREDIV_S_Msk (0x7FFFUL << RTC_PRER_PREDIV_S_Pos)
#define RTC_PRER_PREDIV_S RTC_PRER_PREDIV_S_Msk
#define RTC_WUTR_WUT_Pos (0U)
#define RTC_WUTR_WUT_Msk (0xFFFFUL << RTC_WUTR_WUT_Pos)
#define RTC_WUTR_WUT RTC_WUTR_WUT_Msk
#define RTC_ALRMAR_MSK4_Pos (31U)
#define RTC_ALRMAR_MSK4_Msk (0x1UL << RTC_ALRMAR_MSK4_Pos)
#define RTC_ALRMAR_MSK4 RTC_ALRMAR_MSK4_Msk
#define RTC_ALRMAR_WDSEL_Pos (30U)
#define RTC_ALRMAR_WDSEL_Msk (0x1UL << RTC_ALRMAR_WDSEL_Pos)
#define RTC_ALRMAR_WDSEL RTC_ALRMAR_WDSEL_Msk
#define RTC_ALRMAR_DT_Pos (28U)
#define RTC_ALRMAR_DT_Msk (0x3UL << RTC_ALRMAR_DT_Pos)
#define RTC_ALRMAR_DT RTC_ALRMAR_DT_Msk
#define RTC_ALRMAR_DT_0 (0x1U << RTC_ALRMAR_DT_Pos)
#define RTC_ALRMAR_DT_1 (0x2U << RTC_ALRMAR_DT_Pos)
#define RTC_ALRMAR_DU_Pos (24U)
#define RTC_ALRMAR_DU_Msk (0xFUL << RTC_ALRMAR_DU_Pos)
#define RTC_ALRMAR_DU RTC_ALRMAR_DU_Msk
#define RTC_ALRMAR_DU_0 (0x1U << RTC_ALRMAR_DU_Pos)
#define RTC_ALRMAR_DU_1 (0x2U << RTC_ALRMAR_DU_Pos)
#define RTC_ALRMAR_DU_2 (0x4U << RTC_ALRMAR_DU_Pos)
#define RTC_ALRMAR_DU_3 (0x8U << RTC_ALRMAR_DU_Pos)
#define RTC_ALRMAR_MSK3_Pos (23U)
#define RTC_ALRMAR_MSK3_Msk (0x1UL << RTC_ALRMAR_MSK3_Pos)
#define RTC_ALRMAR_MSK3 RTC_ALRMAR_MSK3_Msk
#define RTC_ALRMAR_PM_Pos (22U)
#define RTC_ALRMAR_PM_Msk (0x1UL << RTC_ALRMAR_PM_Pos)
#define RTC_ALRMAR_PM RTC_ALRMAR_PM_Msk
#define RTC_ALRMAR_HT_Pos (20U)
#define RTC_ALRMAR_HT_Msk (0x3UL << RTC_ALRMAR_HT_Pos)
#define RTC_ALRMAR_HT RTC_ALRMAR_HT_Msk
#define RTC_ALRMAR_HT_0 (0x1U << RTC_ALRMAR_HT_Pos)
#define RTC_ALRMAR_HT_1 (0x2U << RTC_ALRMAR_HT_Pos)
#define RTC_ALRMAR_HU_Pos (16U)
#define RTC_ALRMAR_HU_Msk (0xFUL << RTC_ALRMAR_HU_Pos)
#define RTC_ALRMAR_HU RTC_ALRMAR_HU_Msk
#define RTC_ALRMAR_HU_0 (0x1U << RTC_ALRMAR_HU_Pos)
#define RTC_ALRMAR_HU_1 (0x2U << RTC_ALRMAR_HU_Pos)
#define RTC_ALRMAR_HU_2 (0x4U << RTC_ALRMAR_HU_Pos)
#define RTC_ALRMAR_HU_3 (0x8U << RTC_ALRMAR_HU_Pos)
#define RTC_ALRMAR_MSK2_Pos (15U)
#define RTC_ALRMAR_MSK2_Msk (0x1UL << RTC_ALRMAR_MSK2_Pos)
#define RTC_ALRMAR_MSK2 RTC_ALRMAR_MSK2_Msk
#define RTC_ALRMAR_MNT_Pos (12U)
#define RTC_ALRMAR_MNT_Msk (0x7UL << RTC_ALRMAR_MNT_Pos)
#define RTC_ALRMAR_MNT RTC_ALRMAR_MNT_Msk
#define RTC_ALRMAR_MNT_0 (0x1U << RTC_ALRMAR_MNT_Pos)
#define RTC_ALRMAR_MNT_1 (0x2U << RTC_ALRMAR_MNT_Pos)
#define RTC_ALRMAR_MNT_2 (0x4U << RTC_ALRMAR_MNT_Pos)
#define RTC_ALRMAR_MNU_Pos (8U)
#define RTC_ALRMAR_MNU_Msk (0xFUL << RTC_ALRMAR_MNU_Pos)
#define RTC_ALRMAR_MNU RTC_ALRMAR_MNU_Msk
#define RTC_ALRMAR_MNU_0 (0x1U << RTC_ALRMAR_MNU_Pos)
#define RTC_ALRMAR_MNU_1 (0x2U << RTC_ALRMAR_MNU_Pos)
#define RTC_ALRMAR_MNU_2 (0x4U << RTC_ALRMAR_MNU_Pos)
#define RTC_ALRMAR_MNU_3 (0x8U << RTC_ALRMAR_MNU_Pos)
#define RTC_ALRMAR_MSK1_Pos (7U)
#define RTC_ALRMAR_MSK1_Msk (0x1UL << RTC_ALRMAR_MSK1_Pos)
#define RTC_ALRMAR_MSK1 RTC_ALRMAR_MSK1_Msk
#define RTC_ALRMAR_ST_Pos (4U)
#define RTC_ALRMAR_ST_Msk (0x7UL << RTC_ALRMAR_ST_Pos)
#define RTC_ALRMAR_ST RTC_ALRMAR_ST_Msk
#define RTC_ALRMAR_ST_0 (0x1U << RTC_ALRMAR_ST_Pos)
#define RTC_ALRMAR_ST_1 (0x2U << RTC_ALRMAR_ST_Pos)
#define RTC_ALRMAR_ST_2 (0x4U << RTC_ALRMAR_ST_Pos)
#define RTC_ALRMAR_SU_Pos (0U)
#define RTC_ALRMAR_SU_Msk (0xFUL << RTC_ALRMAR_SU_Pos)
#define RTC_ALRMAR_SU RTC_ALRMAR_SU_Msk
#define RTC_ALRMAR_SU_0 (0x1U << RTC_ALRMAR_SU_Pos)
#define RTC_ALRMAR_SU_1 (0x2U << RTC_ALRMAR_SU_Pos)
#define RTC_ALRMAR_SU_2 (0x4U << RTC_ALRMAR_SU_Pos)
#define RTC_ALRMAR_SU_3 (0x8U << RTC_ALRMAR_SU_Pos)
#define RTC_ALRMBR_MSK4_Pos (31U)
#define RTC_ALRMBR_MSK4_Msk (0x1UL << RTC_ALRMBR_MSK4_Pos)
#define RTC_ALRMBR_MSK4 RTC_ALRMBR_MSK4_Msk
#define RTC_ALRMBR_WDSEL_Pos (30U)
#define RTC_ALRMBR_WDSEL_Msk (0x1UL << RTC_ALRMBR_WDSEL_Pos)
#define RTC_ALRMBR_WDSEL RTC_ALRMBR_WDSEL_Msk
#define RTC_ALRMBR_DT_Pos (28U)
#define RTC_ALRMBR_DT_Msk (0x3UL << RTC_ALRMBR_DT_Pos)
#define RTC_ALRMBR_DT RTC_ALRMBR_DT_Msk
#define RTC_ALRMBR_DT_0 (0x1U << RTC_ALRMBR_DT_Pos)
#define RTC_ALRMBR_DT_1 (0x2U << RTC_ALRMBR_DT_Pos)
#define RTC_ALRMBR_DU_Pos (24U)
#define RTC_ALRMBR_DU_Msk (0xFUL << RTC_ALRMBR_DU_Pos)
#define RTC_ALRMBR_DU RTC_ALRMBR_DU_Msk
#define RTC_ALRMBR_DU_0 (0x1U << RTC_ALRMBR_DU_Pos)
#define RTC_ALRMBR_DU_1 (0x2U << RTC_ALRMBR_DU_Pos)
#define RTC_ALRMBR_DU_2 (0x4U << RTC_ALRMBR_DU_Pos)
#define RTC_ALRMBR_DU_3 (0x8U << RTC_ALRMBR_DU_Pos)
#define RTC_ALRMBR_MSK3_Pos (23U)
#define RTC_ALRMBR_MSK3_Msk (0x1UL << RTC_ALRMBR_MSK3_Pos)
#define RTC_ALRMBR_MSK3 RTC_ALRMBR_MSK3_Msk
#define RTC_ALRMBR_PM_Pos (22U)
#define RTC_ALRMBR_PM_Msk (0x1UL << RTC_ALRMBR_PM_Pos)
#define RTC_ALRMBR_PM RTC_ALRMBR_PM_Msk
#define RTC_ALRMBR_HT_Pos (20U)
#define RTC_ALRMBR_HT_Msk (0x3UL << RTC_ALRMBR_HT_Pos)
#define RTC_ALRMBR_HT RTC_ALRMBR_HT_Msk
#define RTC_ALRMBR_HT_0 (0x1U << RTC_ALRMBR_HT_Pos)
#define RTC_ALRMBR_HT_1 (0x2U << RTC_ALRMBR_HT_Pos)
#define RTC_ALRMBR_HU_Pos (16U)
#define RTC_ALRMBR_HU_Msk (0xFUL << RTC_ALRMBR_HU_Pos)
#define RTC_ALRMBR_HU RTC_ALRMBR_HU_Msk
#define RTC_ALRMBR_HU_0 (0x1U << RTC_ALRMBR_HU_Pos)
#define RTC_ALRMBR_HU_1 (0x2U << RTC_ALRMBR_HU_Pos)
#define RTC_ALRMBR_HU_2 (0x4U << RTC_ALRMBR_HU_Pos)
#define RTC_ALRMBR_HU_3 (0x8U << RTC_ALRMBR_HU_Pos)
#define RTC_ALRMBR_MSK2_Pos (15U)
#define RTC_ALRMBR_MSK2_Msk (0x1UL << RTC_ALRMBR_MSK2_Pos)
#define RTC_ALRMBR_MSK2 RTC_ALRMBR_MSK2_Msk
#define RTC_ALRMBR_MNT_Pos (12U)
#define RTC_ALRMBR_MNT_Msk (0x7UL << RTC_ALRMBR_MNT_Pos)
#define RTC_ALRMBR_MNT RTC_ALRMBR_MNT_Msk
#define RTC_ALRMBR_MNT_0 (0x1U << RTC_ALRMBR_MNT_Pos)
#define RTC_ALRMBR_MNT_1 (0x2U << RTC_ALRMBR_MNT_Pos)
#define RTC_ALRMBR_MNT_2 (0x4U << RTC_ALRMBR_MNT_Pos)
#define RTC_ALRMBR_MNU_Pos (8U)
#define RTC_ALRMBR_MNU_Msk (0xFUL << RTC_ALRMBR_MNU_Pos)
#define RTC_ALRMBR_MNU RTC_ALRMBR_MNU_Msk
#define RTC_ALRMBR_MNU_0 (0x1U << RTC_ALRMBR_MNU_Pos)
#define RTC_ALRMBR_MNU_1 (0x2U << RTC_ALRMBR_MNU_Pos)
#define RTC_ALRMBR_MNU_2 (0x4U << RTC_ALRMBR_MNU_Pos)
#define RTC_ALRMBR_MNU_3 (0x8U << RTC_ALRMBR_MNU_Pos)
#define RTC_ALRMBR_MSK1_Pos (7U)
#define RTC_ALRMBR_MSK1_Msk (0x1UL << RTC_ALRMBR_MSK1_Pos)
#define RTC_ALRMBR_MSK1 RTC_ALRMBR_MSK1_Msk
#define RTC_ALRMBR_ST_Pos (4U)
#define RTC_ALRMBR_ST_Msk (0x7UL << RTC_ALRMBR_ST_Pos)
#define RTC_ALRMBR_ST RTC_ALRMBR_ST_Msk
#define RTC_ALRMBR_ST_0 (0x1U << RTC_ALRMBR_ST_Pos)
#define RTC_ALRMBR_ST_1 (0x2U << RTC_ALRMBR_ST_Pos)
#define RTC_ALRMBR_ST_2 (0x4U << RTC_ALRMBR_ST_Pos)
#define RTC_ALRMBR_SU_Pos (0U)
#define RTC_ALRMBR_SU_Msk (0xFUL << RTC_ALRMBR_SU_Pos)
#define RTC_ALRMBR_SU RTC_ALRMBR_SU_Msk
#define RTC_ALRMBR_SU_0 (0x1U << RTC_ALRMBR_SU_Pos)
#define RTC_ALRMBR_SU_1 (0x2U << RTC_ALRMBR_SU_Pos)
#define RTC_ALRMBR_SU_2 (0x4U << RTC_ALRMBR_SU_Pos)
#define RTC_ALRMBR_SU_3 (0x8U << RTC_ALRMBR_SU_Pos)
#define RTC_WPR_KEY_Pos (0U)
#define RTC_WPR_KEY_Msk (0xFFUL << RTC_WPR_KEY_Pos)
#define RTC_WPR_KEY RTC_WPR_KEY_Msk
#define RTC_SSR_SS_Pos (0U)
#define RTC_SSR_SS_Msk (0xFFFFUL << RTC_SSR_SS_Pos)
#define RTC_SSR_SS RTC_SSR_SS_Msk
#define RTC_SHIFTR_SUBFS_Pos (0U)
#define RTC_SHIFTR_SUBFS_Msk (0x7FFFUL << RTC_SHIFTR_SUBFS_Pos)
#define RTC_SHIFTR_SUBFS RTC_SHIFTR_SUBFS_Msk
#define RTC_SHIFTR_ADD1S_Pos (31U)
#define RTC_SHIFTR_ADD1S_Msk (0x1UL << RTC_SHIFTR_ADD1S_Pos)
#define RTC_SHIFTR_ADD1S RTC_SHIFTR_ADD1S_Msk
#define RTC_TSTR_PM_Pos (22U)
#define RTC_TSTR_PM_Msk (0x1UL << RTC_TSTR_PM_Pos)
#define RTC_TSTR_PM RTC_TSTR_PM_Msk
#define RTC_TSTR_HT_Pos (20U)
#define RTC_TSTR_HT_Msk (0x3UL << RTC_TSTR_HT_Pos)
#define RTC_TSTR_HT RTC_TSTR_HT_Msk
#define RTC_TSTR_HT_0 (0x1U << RTC_TSTR_HT_Pos)
#define RTC_TSTR_HT_1 (0x2U << RTC_TSTR_HT_Pos)
#define RTC_TSTR_HU_Pos (16U)
#define RTC_TSTR_HU_Msk (0xFUL << RTC_TSTR_HU_Pos)
#define RTC_TSTR_HU RTC_TSTR_HU_Msk
#define RTC_TSTR_HU_0 (0x1U << RTC_TSTR_HU_Pos)
#define RTC_TSTR_HU_1 (0x2U << RTC_TSTR_HU_Pos)
#define RTC_TSTR_HU_2 (0x4U << RTC_TSTR_HU_Pos)
#define RTC_TSTR_HU_3 (0x8U << RTC_TSTR_HU_Pos)
#define RTC_TSTR_MNT_Pos (12U)
#define RTC_TSTR_MNT_Msk (0x7UL << RTC_TSTR_MNT_Pos)
#define RTC_TSTR_MNT RTC_TSTR_MNT_Msk
#define RTC_TSTR_MNT_0 (0x1U << RTC_TSTR_MNT_Pos)
#define RTC_TSTR_MNT_1 (0x2U << RTC_TSTR_MNT_Pos)
#define RTC_TSTR_MNT_2 (0x4U << RTC_TSTR_MNT_Pos)
#define RTC_TSTR_MNU_Pos (8U)
#define RTC_TSTR_MNU_Msk (0xFUL << RTC_TSTR_MNU_Pos)
#define RTC_TSTR_MNU RTC_TSTR_MNU_Msk
#define RTC_TSTR_MNU_0 (0x1U << RTC_TSTR_MNU_Pos)
#define RTC_TSTR_MNU_1 (0x2U << RTC_TSTR_MNU_Pos)
#define RTC_TSTR_MNU_2 (0x4U << RTC_TSTR_MNU_Pos)
#define RTC_TSTR_MNU_3 (0x8U << RTC_TSTR_MNU_Pos)
#define RTC_TSTR_ST_Pos (4U)
#define RTC_TSTR_ST_Msk (0x7UL << RTC_TSTR_ST_Pos)
#define RTC_TSTR_ST RTC_TSTR_ST_Msk
#define RTC_TSTR_ST_0 (0x1U << RTC_TSTR_ST_Pos)
#define RTC_TSTR_ST_1 (0x2U << RTC_TSTR_ST_Pos)
#define RTC_TSTR_ST_2 (0x4U << RTC_TSTR_ST_Pos)
#define RTC_TSTR_SU_Pos (0U)
#define RTC_TSTR_SU_Msk (0xFUL << RTC_TSTR_SU_Pos)
#define RTC_TSTR_SU RTC_TSTR_SU_Msk
#define RTC_TSTR_SU_0 (0x1U << RTC_TSTR_SU_Pos)
#define RTC_TSTR_SU_1 (0x2U << RTC_TSTR_SU_Pos)
#define RTC_TSTR_SU_2 (0x4U << RTC_TSTR_SU_Pos)
#define RTC_TSTR_SU_3 (0x8U << RTC_TSTR_SU_Pos)
#define RTC_TSDR_WDU_Pos (13U)
#define RTC_TSDR_WDU_Msk (0x7UL << RTC_TSDR_WDU_Pos)
#define RTC_TSDR_WDU RTC_TSDR_WDU_Msk
#define RTC_TSDR_WDU_0 (0x1U << RTC_TSDR_WDU_Pos)
#define RTC_TSDR_WDU_1 (0x2U << RTC_TSDR_WDU_Pos)
#define RTC_TSDR_WDU_2 (0x4U << RTC_TSDR_WDU_Pos)
#define RTC_TSDR_MT_Pos (12U)
#define RTC_TSDR_MT_Msk (0x1UL << RTC_TSDR_MT_Pos)
#define RTC_TSDR_MT RTC_TSDR_MT_Msk
#define RTC_TSDR_MU_Pos (8U)
#define RTC_TSDR_MU_Msk (0xFUL << RTC_TSDR_MU_Pos)
#define RTC_TSDR_MU RTC_TSDR_MU_Msk
#define RTC_TSDR_MU_0 (0x1U << RTC_TSDR_MU_Pos)
#define RTC_TSDR_MU_1 (0x2U << RTC_TSDR_MU_Pos)
#define RTC_TSDR_MU_2 (0x4U << RTC_TSDR_MU_Pos)
#define RTC_TSDR_MU_3 (0x8U << RTC_TSDR_MU_Pos)
#define RTC_TSDR_DT_Pos (4U)
#define RTC_TSDR_DT_Msk (0x3UL << RTC_TSDR_DT_Pos)
#define RTC_TSDR_DT RTC_TSDR_DT_Msk
#define RTC_TSDR_DT_0 (0x1U << RTC_TSDR_DT_Pos)
#define RTC_TSDR_DT_1 (0x2U << RTC_TSDR_DT_Pos)
#define RTC_TSDR_DU_Pos (0U)
#define RTC_TSDR_DU_Msk (0xFUL << RTC_TSDR_DU_Pos)
#define RTC_TSDR_DU RTC_TSDR_DU_Msk
#define RTC_TSDR_DU_0 (0x1U << RTC_TSDR_DU_Pos)
#define RTC_TSDR_DU_1 (0x2U << RTC_TSDR_DU_Pos)
#define RTC_TSDR_DU_2 (0x4U << RTC_TSDR_DU_Pos)
#define RTC_TSDR_DU_3 (0x8U << RTC_TSDR_DU_Pos)
#define RTC_TSSSR_SS_Pos (0U)
#define RTC_TSSSR_SS_Msk (0xFFFFUL << RTC_TSSSR_SS_Pos)
#define RTC_TSSSR_SS RTC_TSSSR_SS_Msk
#define RTC_CALR_CALP_Pos (15U)
#define RTC_CALR_CALP_Msk (0x1UL << RTC_CALR_CALP_Pos)
#define RTC_CALR_CALP RTC_CALR_CALP_Msk
#define RTC_CALR_CALW8_Pos (14U)
#define RTC_CALR_CALW8_Msk (0x1UL << RTC_CALR_CALW8_Pos)
#define RTC_CALR_CALW8 RTC_CALR_CALW8_Msk
#define RTC_CALR_CALW16_Pos (13U)
#define RTC_CALR_CALW16_Msk (0x1UL << RTC_CALR_CALW16_Pos)
#define RTC_CALR_CALW16 RTC_CALR_CALW16_Msk
#define RTC_CALR_CALM_Pos (0U)
#define RTC_CALR_CALM_Msk (0x1FFUL << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM RTC_CALR_CALM_Msk
#define RTC_CALR_CALM_0 (0x001U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_1 (0x002U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_2 (0x004U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_3 (0x008U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_4 (0x010U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_5 (0x020U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_6 (0x040U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_7 (0x080U << RTC_CALR_CALM_Pos)
#define RTC_CALR_CALM_8 (0x100U << RTC_CALR_CALM_Pos)
#define RTC_TAMPCR_TAMP3MF_Pos (24U)
#define RTC_TAMPCR_TAMP3MF_Msk (0x1UL << RTC_TAMPCR_TAMP3MF_Pos)
#define RTC_TAMPCR_TAMP3MF RTC_TAMPCR_TAMP3MF_Msk
#define RTC_TAMPCR_TAMP3NOERASE_Pos (23U)
#define RTC_TAMPCR_TAMP3NOERASE_Msk (0x1UL << RTC_TAMPCR_TAMP3NOERASE_Pos)
#define RTC_TAMPCR_TAMP3NOERASE RTC_TAMPCR_TAMP3NOERASE_Msk
#define RTC_TAMPCR_TAMP3IE_Pos (22U)
#define RTC_TAMPCR_TAMP3IE_Msk (0x1UL << RTC_TAMPCR_TAMP3IE_Pos)
#define RTC_TAMPCR_TAMP3IE RTC_TAMPCR_TAMP3IE_Msk
#define RTC_TAMPCR_TAMP2MF_Pos (21U)
#define RTC_TAMPCR_TAMP2MF_Msk (0x1UL << RTC_TAMPCR_TAMP2MF_Pos)
#define RTC_TAMPCR_TAMP2MF RTC_TAMPCR_TAMP2MF_Msk
#define RTC_TAMPCR_TAMP2NOERASE_Pos (20U)
#define RTC_TAMPCR_TAMP2NOERASE_Msk (0x1UL << RTC_TAMPCR_TAMP2NOERASE_Pos)
#define RTC_TAMPCR_TAMP2NOERASE RTC_TAMPCR_TAMP2NOERASE_Msk
#define RTC_TAMPCR_TAMP2IE_Pos (19U)
#define RTC_TAMPCR_TAMP2IE_Msk (0x1UL << RTC_TAMPCR_TAMP2IE_Pos)
#define RTC_TAMPCR_TAMP2IE RTC_TAMPCR_TAMP2IE_Msk
#define RTC_TAMPCR_TAMP1MF_Pos (18U)
#define RTC_TAMPCR_TAMP1MF_Msk (0x1UL << RTC_TAMPCR_TAMP1MF_Pos)
#define RTC_TAMPCR_TAMP1MF RTC_TAMPCR_TAMP1MF_Msk
#define RTC_TAMPCR_TAMP1NOERASE_Pos (17U)
#define RTC_TAMPCR_TAMP1NOERASE_Msk (0x1UL << RTC_TAMPCR_TAMP1NOERASE_Pos)
#define RTC_TAMPCR_TAMP1NOERASE RTC_TAMPCR_TAMP1NOERASE_Msk
#define RTC_TAMPCR_TAMP1IE_Pos (16U)
#define RTC_TAMPCR_TAMP1IE_Msk (0x1UL << RTC_TAMPCR_TAMP1IE_Pos)
#define RTC_TAMPCR_TAMP1IE RTC_TAMPCR_TAMP1IE_Msk
#define RTC_TAMPCR_TAMPPUDIS_Pos (15U)
#define RTC_TAMPCR_TAMPPUDIS_Msk (0x1UL << RTC_TAMPCR_TAMPPUDIS_Pos)
#define RTC_TAMPCR_TAMPPUDIS RTC_TAMPCR_TAMPPUDIS_Msk
#define RTC_TAMPCR_TAMPPRCH_Pos (13U)
#define RTC_TAMPCR_TAMPPRCH_Msk (0x3UL << RTC_TAMPCR_TAMPPRCH_Pos)
#define RTC_TAMPCR_TAMPPRCH RTC_TAMPCR_TAMPPRCH_Msk
#define RTC_TAMPCR_TAMPPRCH_0 (0x1U << RTC_TAMPCR_TAMPPRCH_Pos)
#define RTC_TAMPCR_TAMPPRCH_1 (0x2U << RTC_TAMPCR_TAMPPRCH_Pos)
#define RTC_TAMPCR_TAMPFLT_Pos (11U)
#define RTC_TAMPCR_TAMPFLT_Msk (0x3UL << RTC_TAMPCR_TAMPFLT_Pos)
#define RTC_TAMPCR_TAMPFLT RTC_TAMPCR_TAMPFLT_Msk
#define RTC_TAMPCR_TAMPFLT_0 (0x1U << RTC_TAMPCR_TAMPFLT_Pos)
#define RTC_TAMPCR_TAMPFLT_1 (0x2U << RTC_TAMPCR_TAMPFLT_Pos)
#define RTC_TAMPCR_TAMPFREQ_Pos (8U)
#define RTC_TAMPCR_TAMPFREQ_Msk (0x7UL << RTC_TAMPCR_TAMPFREQ_Pos)
#define RTC_TAMPCR_TAMPFREQ RTC_TAMPCR_TAMPFREQ_Msk
#define RTC_TAMPCR_TAMPFREQ_0 (0x1U << RTC_TAMPCR_TAMPFREQ_Pos)
#define RTC_TAMPCR_TAMPFREQ_1 (0x2U << RTC_TAMPCR_TAMPFREQ_Pos)
#define RTC_TAMPCR_TAMPFREQ_2 (0x4U << RTC_TAMPCR_TAMPFREQ_Pos)
#define RTC_TAMPCR_TAMPTS_Pos (7U)
#define RTC_TAMPCR_TAMPTS_Msk (0x1UL << RTC_TAMPCR_TAMPTS_Pos)
#define RTC_TAMPCR_TAMPTS RTC_TAMPCR_TAMPTS_Msk
#define RTC_TAMPCR_TAMP3TRG_Pos (6U)
#define RTC_TAMPCR_TAMP3TRG_Msk (0x1UL << RTC_TAMPCR_TAMP3TRG_Pos)
#define RTC_TAMPCR_TAMP3TRG RTC_TAMPCR_TAMP3TRG_Msk
#define RTC_TAMPCR_TAMP3E_Pos (5U)
#define RTC_TAMPCR_TAMP3E_Msk (0x1UL << RTC_TAMPCR_TAMP3E_Pos)
#define RTC_TAMPCR_TAMP3E RTC_TAMPCR_TAMP3E_Msk
#define RTC_TAMPCR_TAMP2TRG_Pos (4U)
#define RTC_TAMPCR_TAMP2TRG_Msk (0x1UL << RTC_TAMPCR_TAMP2TRG_Pos)
#define RTC_TAMPCR_TAMP2TRG RTC_TAMPCR_TAMP2TRG_Msk
#define RTC_TAMPCR_TAMP2E_Pos (3U)
#define RTC_TAMPCR_TAMP2E_Msk (0x1UL << RTC_TAMPCR_TAMP2E_Pos)
#define RTC_TAMPCR_TAMP2E RTC_TAMPCR_TAMP2E_Msk
#define RTC_TAMPCR_TAMPIE_Pos (2U)
#define RTC_TAMPCR_TAMPIE_Msk (0x1UL << RTC_TAMPCR_TAMPIE_Pos)
#define RTC_TAMPCR_TAMPIE RTC_TAMPCR_TAMPIE_Msk
#define RTC_TAMPCR_TAMP1TRG_Pos (1U)
#define RTC_TAMPCR_TAMP1TRG_Msk (0x1UL << RTC_TAMPCR_TAMP1TRG_Pos)
#define RTC_TAMPCR_TAMP1TRG RTC_TAMPCR_TAMP1TRG_Msk
#define RTC_TAMPCR_TAMP1E_Pos (0U)
#define RTC_TAMPCR_TAMP1E_Msk (0x1UL << RTC_TAMPCR_TAMP1E_Pos)
#define RTC_TAMPCR_TAMP1E RTC_TAMPCR_TAMP1E_Msk
#define RTC_ALRMASSR_MASKSS_Pos (24U)
#define RTC_ALRMASSR_MASKSS_Msk (0xFUL << RTC_ALRMASSR_MASKSS_Pos)
#define RTC_ALRMASSR_MASKSS RTC_ALRMASSR_MASKSS_Msk
#define RTC_ALRMASSR_MASKSS_0 (0x1U << RTC_ALRMASSR_MASKSS_Pos)
#define RTC_ALRMASSR_MASKSS_1 (0x2U << RTC_ALRMASSR_MASKSS_Pos)
#define RTC_ALRMASSR_MASKSS_2 (0x4U << RTC_ALRMASSR_MASKSS_Pos)
#define RTC_ALRMASSR_MASKSS_3 (0x8U << RTC_ALRMASSR_MASKSS_Pos)
#define RTC_ALRMASSR_SS_Pos (0U)
#define RTC_ALRMASSR_SS_Msk (0x7FFFUL << RTC_ALRMASSR_SS_Pos)
#define RTC_ALRMASSR_SS RTC_ALRMASSR_SS_Msk
#define RTC_ALRMBSSR_MASKSS_Pos (24U)
#define RTC_ALRMBSSR_MASKSS_Msk (0xFUL << RTC_ALRMBSSR_MASKSS_Pos)
#define RTC_ALRMBSSR_MASKSS RTC_ALRMBSSR_MASKSS_Msk
#define RTC_ALRMBSSR_MASKSS_0 (0x1U << RTC_ALRMBSSR_MASKSS_Pos)
#define RTC_ALRMBSSR_MASKSS_1 (0x2U << RTC_ALRMBSSR_MASKSS_Pos)
#define RTC_ALRMBSSR_MASKSS_2 (0x4U << RTC_ALRMBSSR_MASKSS_Pos)
#define RTC_ALRMBSSR_MASKSS_3 (0x8U << RTC_ALRMBSSR_MASKSS_Pos)
#define RTC_ALRMBSSR_SS_Pos (0U)
#define RTC_ALRMBSSR_SS_Msk (0x7FFFUL << RTC_ALRMBSSR_SS_Pos)
#define RTC_ALRMBSSR_SS RTC_ALRMBSSR_SS_Msk
#define RTC_OR_OUT_RMP_Pos (1U)
#define RTC_OR_OUT_RMP_Msk (0x1UL << RTC_OR_OUT_RMP_Pos)
#define RTC_OR_OUT_RMP RTC_OR_OUT_RMP_Msk
#define RTC_OR_ALARMOUTTYPE_Pos (0U)
#define RTC_OR_ALARMOUTTYPE_Msk (0x1UL << RTC_OR_ALARMOUTTYPE_Pos)
#define RTC_OR_ALARMOUTTYPE RTC_OR_ALARMOUTTYPE_Msk
#define RTC_BKP0R_Pos (0U)
#define RTC_BKP0R_Msk (0xFFFFFFFFUL << RTC_BKP0R_Pos)
#define RTC_BKP0R RTC_BKP0R_Msk
#define RTC_BKP1R_Pos (0U)
#define RTC_BKP1R_Msk (0xFFFFFFFFUL << RTC_BKP1R_Pos)
#define RTC_BKP1R RTC_BKP1R_Msk
#define RTC_BKP2R_Pos (0U)
#define RTC_BKP2R_Msk (0xFFFFFFFFUL << RTC_BKP2R_Pos)
#define RTC_BKP2R RTC_BKP2R_Msk
#define RTC_BKP3R_Pos (0U)
#define RTC_BKP3R_Msk (0xFFFFFFFFUL << RTC_BKP3R_Pos)
#define RTC_BKP3R RTC_BKP3R_Msk
#define RTC_BKP4R_Pos (0U)
#define RTC_BKP4R_Msk (0xFFFFFFFFUL << RTC_BKP4R_Pos)
#define RTC_BKP4R RTC_BKP4R_Msk
#define RTC_BKP5R_Pos (0U)
#define RTC_BKP5R_Msk (0xFFFFFFFFUL << RTC_BKP5R_Pos)
#define RTC_BKP5R RTC_BKP5R_Msk
#define RTC_BKP6R_Pos (0U)
#define RTC_BKP6R_Msk (0xFFFFFFFFUL << RTC_BKP6R_Pos)
#define RTC_BKP6R RTC_BKP6R_Msk
#define RTC_BKP7R_Pos (0U)
#define RTC_BKP7R_Msk (0xFFFFFFFFUL << RTC_BKP7R_Pos)
#define RTC_BKP7R RTC_BKP7R_Msk
#define RTC_BKP8R_Pos (0U)
#define RTC_BKP8R_Msk (0xFFFFFFFFUL << RTC_BKP8R_Pos)
#define RTC_BKP8R RTC_BKP8R_Msk
#define RTC_BKP9R_Pos (0U)
#define RTC_BKP9R_Msk (0xFFFFFFFFUL << RTC_BKP9R_Pos)
#define RTC_BKP9R RTC_BKP9R_Msk
#define RTC_BKP10R_Pos (0U)
#define RTC_BKP10R_Msk (0xFFFFFFFFUL << RTC_BKP10R_Pos)
#define RTC_BKP10R RTC_BKP10R_Msk
#define RTC_BKP11R_Pos (0U)
#define RTC_BKP11R_Msk (0xFFFFFFFFUL << RTC_BKP11R_Pos)
#define RTC_BKP11R RTC_BKP11R_Msk
#define RTC_BKP12R_Pos (0U)
#define RTC_BKP12R_Msk (0xFFFFFFFFUL << RTC_BKP12R_Pos)
#define RTC_BKP12R RTC_BKP12R_Msk
#define RTC_BKP13R_Pos (0U)
#define RTC_BKP13R_Msk (0xFFFFFFFFUL << RTC_BKP13R_Pos)
#define RTC_BKP13R RTC_BKP13R_Msk
#define RTC_BKP14R_Pos (0U)
#define RTC_BKP14R_Msk (0xFFFFFFFFUL << RTC_BKP14R_Pos)
#define RTC_BKP14R RTC_BKP14R_Msk
#define RTC_BKP15R_Pos (0U)
#define RTC_BKP15R_Msk (0xFFFFFFFFUL << RTC_BKP15R_Pos)
#define RTC_BKP15R RTC_BKP15R_Msk
#define RTC_BKP16R_Pos (0U)
#define RTC_BKP16R_Msk (0xFFFFFFFFUL << RTC_BKP16R_Pos)
#define RTC_BKP16R RTC_BKP16R_Msk
#define RTC_BKP17R_Pos (0U)
#define RTC_BKP17R_Msk (0xFFFFFFFFUL << RTC_BKP17R_Pos)
#define RTC_BKP17R RTC_BKP17R_Msk
#define RTC_BKP18R_Pos (0U)
#define RTC_BKP18R_Msk (0xFFFFFFFFUL << RTC_BKP18R_Pos)
#define RTC_BKP18R RTC_BKP18R_Msk
#define RTC_BKP19R_Pos (0U)
#define RTC_BKP19R_Msk (0xFFFFFFFFUL << RTC_BKP19R_Pos)
#define RTC_BKP19R RTC_BKP19R_Msk
#define RTC_BKP_NUMBER (20U)
#define SPI_CR1_CPHA_Pos (0U)
#define SPI_CR1_CPHA_Msk (0x1UL << SPI_CR1_CPHA_Pos)
#define SPI_CR1_CPHA SPI_CR1_CPHA_Msk
#define SPI_CR1_CPOL_Pos (1U)
#define SPI_CR1_CPOL_Msk (0x1UL << SPI_CR1_CPOL_Pos)
#define SPI_CR1_CPOL SPI_CR1_CPOL_Msk
#define SPI_CR1_MSTR_Pos (2U)
#define SPI_CR1_MSTR_Msk (0x1UL << SPI_CR1_MSTR_Pos)
#define SPI_CR1_MSTR SPI_CR1_MSTR_Msk
#define SPI_CR1_BR_Pos (3U)
#define SPI_CR1_BR_Msk (0x7UL << SPI_CR1_BR_Pos)
#define SPI_CR1_BR SPI_CR1_BR_Msk
#define SPI_CR1_BR_0 (0x1UL << SPI_CR1_BR_Pos)
#define SPI_CR1_BR_1 (0x2UL << SPI_CR1_BR_Pos)
#define SPI_CR1_BR_2 (0x4UL << SPI_CR1_BR_Pos)
#define SPI_CR1_SPE_Pos (6U)
#define SPI_CR1_SPE_Msk (0x1UL << SPI_CR1_SPE_Pos)
#define SPI_CR1_SPE SPI_CR1_SPE_Msk
#define SPI_CR1_LSBFIRST_Pos (7U)
#define SPI_CR1_LSBFIRST_Msk (0x1UL << SPI_CR1_LSBFIRST_Pos)
#define SPI_CR1_LSBFIRST SPI_CR1_LSBFIRST_Msk
#define SPI_CR1_SSI_Pos (8U)
#define SPI_CR1_SSI_Msk (0x1UL << SPI_CR1_SSI_Pos)
#define SPI_CR1_SSI SPI_CR1_SSI_Msk
#define SPI_CR1_SSM_Pos (9U)
#define SPI_CR1_SSM_Msk (0x1UL << SPI_CR1_SSM_Pos)
#define SPI_CR1_SSM SPI_CR1_SSM_Msk
#define SPI_CR1_RXONLY_Pos (10U)
#define SPI_CR1_RXONLY_Msk (0x1UL << SPI_CR1_RXONLY_Pos)
#define SPI_CR1_RXONLY SPI_CR1_RXONLY_Msk
#define SPI_CR1_CRCL_Pos (11U)
#define SPI_CR1_CRCL_Msk (0x1UL << SPI_CR1_CRCL_Pos)
#define SPI_CR1_CRCL SPI_CR1_CRCL_Msk
#define SPI_CR1_CRCNEXT_Pos (12U)
#define SPI_CR1_CRCNEXT_Msk (0x1UL << SPI_CR1_CRCNEXT_Pos)
#define SPI_CR1_CRCNEXT SPI_CR1_CRCNEXT_Msk
#define SPI_CR1_CRCEN_Pos (13U)
#define SPI_CR1_CRCEN_Msk (0x1UL << SPI_CR1_CRCEN_Pos)
#define SPI_CR1_CRCEN SPI_CR1_CRCEN_Msk
#define SPI_CR1_BIDIOE_Pos (14U)
#define SPI_CR1_BIDIOE_Msk (0x1UL << SPI_CR1_BIDIOE_Pos)
#define SPI_CR1_BIDIOE SPI_CR1_BIDIOE_Msk
#define SPI_CR1_BIDIMODE_Pos (15U)
#define SPI_CR1_BIDIMODE_Msk (0x1UL << SPI_CR1_BIDIMODE_Pos)
#define SPI_CR1_BIDIMODE SPI_CR1_BIDIMODE_Msk
#define SPI_CR2_RXDMAEN_Pos (0U)
#define SPI_CR2_RXDMAEN_Msk (0x1UL << SPI_CR2_RXDMAEN_Pos)
#define SPI_CR2_RXDMAEN SPI_CR2_RXDMAEN_Msk
#define SPI_CR2_TXDMAEN_Pos (1U)
#define SPI_CR2_TXDMAEN_Msk (0x1UL << SPI_CR2_TXDMAEN_Pos)
#define SPI_CR2_TXDMAEN SPI_CR2_TXDMAEN_Msk
#define SPI_CR2_SSOE_Pos (2U)
#define SPI_CR2_SSOE_Msk (0x1UL << SPI_CR2_SSOE_Pos)
#define SPI_CR2_SSOE SPI_CR2_SSOE_Msk
#define SPI_CR2_NSSP_Pos (3U)
#define SPI_CR2_NSSP_Msk (0x1UL << SPI_CR2_NSSP_Pos)
#define SPI_CR2_NSSP SPI_CR2_NSSP_Msk
#define SPI_CR2_FRF_Pos (4U)
#define SPI_CR2_FRF_Msk (0x1UL << SPI_CR2_FRF_Pos)
#define SPI_CR2_FRF SPI_CR2_FRF_Msk
#define SPI_CR2_ERRIE_Pos (5U)
#define SPI_CR2_ERRIE_Msk (0x1UL << SPI_CR2_ERRIE_Pos)
#define SPI_CR2_ERRIE SPI_CR2_ERRIE_Msk
#define SPI_CR2_RXNEIE_Pos (6U)
#define SPI_CR2_RXNEIE_Msk (0x1UL << SPI_CR2_RXNEIE_Pos)
#define SPI_CR2_RXNEIE SPI_CR2_RXNEIE_Msk
#define SPI_CR2_TXEIE_Pos (7U)
#define SPI_CR2_TXEIE_Msk (0x1UL << SPI_CR2_TXEIE_Pos)
#define SPI_CR2_TXEIE SPI_CR2_TXEIE_Msk
#define SPI_CR2_DS_Pos (8U)
#define SPI_CR2_DS_Msk (0xFUL << SPI_CR2_DS_Pos)
#define SPI_CR2_DS SPI_CR2_DS_Msk
#define SPI_CR2_DS_0 (0x1UL << SPI_CR2_DS_Pos)
#define SPI_CR2_DS_1 (0x2UL << SPI_CR2_DS_Pos)
#define SPI_CR2_DS_2 (0x4UL << SPI_CR2_DS_Pos)
#define SPI_CR2_DS_3 (0x8UL << SPI_CR2_DS_Pos)
#define SPI_CR2_FRXTH_Pos (12U)
#define SPI_CR2_FRXTH_Msk (0x1UL << SPI_CR2_FRXTH_Pos)
#define SPI_CR2_FRXTH SPI_CR2_FRXTH_Msk
#define SPI_CR2_LDMARX_Pos (13U)
#define SPI_CR2_LDMARX_Msk (0x1UL << SPI_CR2_LDMARX_Pos)
#define SPI_CR2_LDMARX SPI_CR2_LDMARX_Msk
#define SPI_CR2_LDMATX_Pos (14U)
#define SPI_CR2_LDMATX_Msk (0x1UL << SPI_CR2_LDMATX_Pos)
#define SPI_CR2_LDMATX SPI_CR2_LDMATX_Msk
#define SPI_SR_RXNE_Pos (0U)
#define SPI_SR_RXNE_Msk (0x1UL << SPI_SR_RXNE_Pos)
#define SPI_SR_RXNE SPI_SR_RXNE_Msk
#define SPI_SR_TXE_Pos (1U)
#define SPI_SR_TXE_Msk (0x1UL << SPI_SR_TXE_Pos)
#define SPI_SR_TXE SPI_SR_TXE_Msk
#define SPI_SR_CRCERR_Pos (4U)
#define SPI_SR_CRCERR_Msk (0x1UL << SPI_SR_CRCERR_Pos)
#define SPI_SR_CRCERR SPI_SR_CRCERR_Msk
#define SPI_SR_MODF_Pos (5U)
#define SPI_SR_MODF_Msk (0x1UL << SPI_SR_MODF_Pos)
#define SPI_SR_MODF SPI_SR_MODF_Msk
#define SPI_SR_OVR_Pos (6U)
#define SPI_SR_OVR_Msk (0x1UL << SPI_SR_OVR_Pos)
#define SPI_SR_OVR SPI_SR_OVR_Msk
#define SPI_SR_BSY_Pos (7U)
#define SPI_SR_BSY_Msk (0x1UL << SPI_SR_BSY_Pos)
#define SPI_SR_BSY SPI_SR_BSY_Msk
#define SPI_SR_FRE_Pos (8U)
#define SPI_SR_FRE_Msk (0x1UL << SPI_SR_FRE_Pos)
#define SPI_SR_FRE SPI_SR_FRE_Msk
#define SPI_SR_FRLVL_Pos (9U)
#define SPI_SR_FRLVL_Msk (0x3UL << SPI_SR_FRLVL_Pos)
#define SPI_SR_FRLVL SPI_SR_FRLVL_Msk
#define SPI_SR_FRLVL_0 (0x1UL << SPI_SR_FRLVL_Pos)
#define SPI_SR_FRLVL_1 (0x2UL << SPI_SR_FRLVL_Pos)
#define SPI_SR_FTLVL_Pos (11U)
#define SPI_SR_FTLVL_Msk (0x3UL << SPI_SR_FTLVL_Pos)
#define SPI_SR_FTLVL SPI_SR_FTLVL_Msk
#define SPI_SR_FTLVL_0 (0x1UL << SPI_SR_FTLVL_Pos)
#define SPI_SR_FTLVL_1 (0x2UL << SPI_SR_FTLVL_Pos)
#define SPI_DR_DR_Pos (0U)
#define SPI_DR_DR_Msk (0xFFFFUL << SPI_DR_DR_Pos)
#define SPI_DR_DR SPI_DR_DR_Msk
#define SPI_CRCPR_CRCPOLY_Pos (0U)
#define SPI_CRCPR_CRCPOLY_Msk (0xFFFFUL << SPI_CRCPR_CRCPOLY_Pos)
#define SPI_CRCPR_CRCPOLY SPI_CRCPR_CRCPOLY_Msk
#define SPI_RXCRCR_RXCRC_Pos (0U)
#define SPI_RXCRCR_RXCRC_Msk (0xFFFFUL << SPI_RXCRCR_RXCRC_Pos)
#define SPI_RXCRCR_RXCRC SPI_RXCRCR_RXCRC_Msk
#define SPI_TXCRCR_TXCRC_Pos (0U)
#define SPI_TXCRCR_TXCRC_Msk (0xFFFFUL << SPI_TXCRCR_TXCRC_Pos)
#define SPI_TXCRCR_TXCRC SPI_TXCRCR_TXCRC_Msk
#define TSC_CR_TSCE_Pos (0U)
#define TSC_CR_TSCE_Msk (0x1UL << TSC_CR_TSCE_Pos)
#define TSC_CR_TSCE TSC_CR_TSCE_Msk
#define TSC_CR_START_Pos (1U)
#define TSC_CR_START_Msk (0x1UL << TSC_CR_START_Pos)
#define TSC_CR_START TSC_CR_START_Msk
#define TSC_CR_AM_Pos (2U)
#define TSC_CR_AM_Msk (0x1UL << TSC_CR_AM_Pos)
#define TSC_CR_AM TSC_CR_AM_Msk
#define TSC_CR_SYNCPOL_Pos (3U)
#define TSC_CR_SYNCPOL_Msk (0x1UL << TSC_CR_SYNCPOL_Pos)
#define TSC_CR_SYNCPOL TSC_CR_SYNCPOL_Msk
#define TSC_CR_IODEF_Pos (4U)
#define TSC_CR_IODEF_Msk (0x1UL << TSC_CR_IODEF_Pos)
#define TSC_CR_IODEF TSC_CR_IODEF_Msk
#define TSC_CR_MCV_Pos (5U)
#define TSC_CR_MCV_Msk (0x7UL << TSC_CR_MCV_Pos)
#define TSC_CR_MCV TSC_CR_MCV_Msk
#define TSC_CR_MCV_0 (0x1U << TSC_CR_MCV_Pos)
#define TSC_CR_MCV_1 (0x2U << TSC_CR_MCV_Pos)
#define TSC_CR_MCV_2 (0x4U << TSC_CR_MCV_Pos)
#define TSC_CR_PGPSC_Pos (12U)
#define TSC_CR_PGPSC_Msk (0x7UL << TSC_CR_PGPSC_Pos)
#define TSC_CR_PGPSC TSC_CR_PGPSC_Msk
#define TSC_CR_PGPSC_0 (0x1U << TSC_CR_PGPSC_Pos)
#define TSC_CR_PGPSC_1 (0x2U << TSC_CR_PGPSC_Pos)
#define TSC_CR_PGPSC_2 (0x4U << TSC_CR_PGPSC_Pos)
#define TSC_CR_SSPSC_Pos (15U)
#define TSC_CR_SSPSC_Msk (0x1UL << TSC_CR_SSPSC_Pos)
#define TSC_CR_SSPSC TSC_CR_SSPSC_Msk
#define TSC_CR_SSE_Pos (16U)
#define TSC_CR_SSE_Msk (0x1UL << TSC_CR_SSE_Pos)
#define TSC_CR_SSE TSC_CR_SSE_Msk
#define TSC_CR_SSD_Pos (17U)
#define TSC_CR_SSD_Msk (0x7FUL << TSC_CR_SSD_Pos)
#define TSC_CR_SSD TSC_CR_SSD_Msk
#define TSC_CR_SSD_0 (0x01U << TSC_CR_SSD_Pos)
#define TSC_CR_SSD_1 (0x02U << TSC_CR_SSD_Pos)
#define TSC_CR_SSD_2 (0x04U << TSC_CR_SSD_Pos)
#define TSC_CR_SSD_3 (0x08U << TSC_CR_SSD_Pos)
#define TSC_CR_SSD_4 (0x10U << TSC_CR_SSD_Pos)
#define TSC_CR_SSD_5 (0x20U << TSC_CR_SSD_Pos)
#define TSC_CR_SSD_6 (0x40U << TSC_CR_SSD_Pos)
#define TSC_CR_CTPL_Pos (24U)
#define TSC_CR_CTPL_Msk (0xFUL << TSC_CR_CTPL_Pos)
#define TSC_CR_CTPL TSC_CR_CTPL_Msk
#define TSC_CR_CTPL_0 (0x1U << TSC_CR_CTPL_Pos)
#define TSC_CR_CTPL_1 (0x2U << TSC_CR_CTPL_Pos)
#define TSC_CR_CTPL_2 (0x4U << TSC_CR_CTPL_Pos)
#define TSC_CR_CTPL_3 (0x8U << TSC_CR_CTPL_Pos)
#define TSC_CR_CTPH_Pos (28U)
#define TSC_CR_CTPH_Msk (0xFUL << TSC_CR_CTPH_Pos)
#define TSC_CR_CTPH TSC_CR_CTPH_Msk
#define TSC_CR_CTPH_0 (0x1U << TSC_CR_CTPH_Pos)
#define TSC_CR_CTPH_1 (0x2U << TSC_CR_CTPH_Pos)
#define TSC_CR_CTPH_2 (0x4U << TSC_CR_CTPH_Pos)
#define TSC_CR_CTPH_3 (0x8U << TSC_CR_CTPH_Pos)
#define TSC_IER_EOAIE_Pos (0U)
#define TSC_IER_EOAIE_Msk (0x1UL << TSC_IER_EOAIE_Pos)
#define TSC_IER_EOAIE TSC_IER_EOAIE_Msk
#define TSC_IER_MCEIE_Pos (1U)
#define TSC_IER_MCEIE_Msk (0x1UL << TSC_IER_MCEIE_Pos)
#define TSC_IER_MCEIE TSC_IER_MCEIE_Msk
#define TSC_ICR_EOAIC_Pos (0U)
#define TSC_ICR_EOAIC_Msk (0x1UL << TSC_ICR_EOAIC_Pos)
#define TSC_ICR_EOAIC TSC_ICR_EOAIC_Msk
#define TSC_ICR_MCEIC_Pos (1U)
#define TSC_ICR_MCEIC_Msk (0x1UL << TSC_ICR_MCEIC_Pos)
#define TSC_ICR_MCEIC TSC_ICR_MCEIC_Msk
#define TSC_ISR_EOAF_Pos (0U)
#define TSC_ISR_EOAF_Msk (0x1UL << TSC_ISR_EOAF_Pos)
#define TSC_ISR_EOAF TSC_ISR_EOAF_Msk
#define TSC_ISR_MCEF_Pos (1U)
#define TSC_ISR_MCEF_Msk (0x1UL << TSC_ISR_MCEF_Pos)
#define TSC_ISR_MCEF TSC_ISR_MCEF_Msk
#define TSC_IOHCR_G1_IO1_Pos (0U)
#define TSC_IOHCR_G1_IO1_Msk (0x1UL << TSC_IOHCR_G1_IO1_Pos)
#define TSC_IOHCR_G1_IO1 TSC_IOHCR_G1_IO1_Msk
#define TSC_IOHCR_G1_IO2_Pos (1U)
#define TSC_IOHCR_G1_IO2_Msk (0x1UL << TSC_IOHCR_G1_IO2_Pos)
#define TSC_IOHCR_G1_IO2 TSC_IOHCR_G1_IO2_Msk
#define TSC_IOHCR_G1_IO3_Pos (2U)
#define TSC_IOHCR_G1_IO3_Msk (0x1UL << TSC_IOHCR_G1_IO3_Pos)
#define TSC_IOHCR_G1_IO3 TSC_IOHCR_G1_IO3_Msk
#define TSC_IOHCR_G1_IO4_Pos (3U)
#define TSC_IOHCR_G1_IO4_Msk (0x1UL << TSC_IOHCR_G1_IO4_Pos)
#define TSC_IOHCR_G1_IO4 TSC_IOHCR_G1_IO4_Msk
#define TSC_IOHCR_G2_IO1_Pos (4U)
#define TSC_IOHCR_G2_IO1_Msk (0x1UL << TSC_IOHCR_G2_IO1_Pos)
#define TSC_IOHCR_G2_IO1 TSC_IOHCR_G2_IO1_Msk
#define TSC_IOHCR_G2_IO2_Pos (5U)
#define TSC_IOHCR_G2_IO2_Msk (0x1UL << TSC_IOHCR_G2_IO2_Pos)
#define TSC_IOHCR_G2_IO2 TSC_IOHCR_G2_IO2_Msk
#define TSC_IOHCR_G2_IO3_Pos (6U)
#define TSC_IOHCR_G2_IO3_Msk (0x1UL << TSC_IOHCR_G2_IO3_Pos)
#define TSC_IOHCR_G2_IO3 TSC_IOHCR_G2_IO3_Msk
#define TSC_IOHCR_G2_IO4_Pos (7U)
#define TSC_IOHCR_G2_IO4_Msk (0x1UL << TSC_IOHCR_G2_IO4_Pos)
#define TSC_IOHCR_G2_IO4 TSC_IOHCR_G2_IO4_Msk
#define TSC_IOHCR_G3_IO1_Pos (8U)
#define TSC_IOHCR_G3_IO1_Msk (0x1UL << TSC_IOHCR_G3_IO1_Pos)
#define TSC_IOHCR_G3_IO1 TSC_IOHCR_G3_IO1_Msk
#define TSC_IOHCR_G3_IO2_Pos (9U)
#define TSC_IOHCR_G3_IO2_Msk (0x1UL << TSC_IOHCR_G3_IO2_Pos)
#define TSC_IOHCR_G3_IO2 TSC_IOHCR_G3_IO2_Msk
#define TSC_IOHCR_G3_IO3_Pos (10U)
#define TSC_IOHCR_G3_IO3_Msk (0x1UL << TSC_IOHCR_G3_IO3_Pos)
#define TSC_IOHCR_G3_IO3 TSC_IOHCR_G3_IO3_Msk
#define TSC_IOHCR_G3_IO4_Pos (11U)
#define TSC_IOHCR_G3_IO4_Msk (0x1UL << TSC_IOHCR_G3_IO4_Pos)
#define TSC_IOHCR_G3_IO4 TSC_IOHCR_G3_IO4_Msk
#define TSC_IOHCR_G4_IO1_Pos (12U)
#define TSC_IOHCR_G4_IO1_Msk (0x1UL << TSC_IOHCR_G4_IO1_Pos)
#define TSC_IOHCR_G4_IO1 TSC_IOHCR_G4_IO1_Msk
#define TSC_IOHCR_G4_IO2_Pos (13U)
#define TSC_IOHCR_G4_IO2_Msk (0x1UL << TSC_IOHCR_G4_IO2_Pos)
#define TSC_IOHCR_G4_IO2 TSC_IOHCR_G4_IO2_Msk
#define TSC_IOHCR_G4_IO3_Pos (14U)
#define TSC_IOHCR_G4_IO3_Msk (0x1UL << TSC_IOHCR_G4_IO3_Pos)
#define TSC_IOHCR_G4_IO3 TSC_IOHCR_G4_IO3_Msk
#define TSC_IOHCR_G4_IO4_Pos (15U)
#define TSC_IOHCR_G4_IO4_Msk (0x1UL << TSC_IOHCR_G4_IO4_Pos)
#define TSC_IOHCR_G4_IO4 TSC_IOHCR_G4_IO4_Msk
#define TSC_IOHCR_G5_IO1_Pos (16U)
#define TSC_IOHCR_G5_IO1_Msk (0x1UL << TSC_IOHCR_G5_IO1_Pos)
#define TSC_IOHCR_G5_IO1 TSC_IOHCR_G5_IO1_Msk
#define TSC_IOHCR_G5_IO2_Pos (17U)
#define TSC_IOHCR_G5_IO2_Msk (0x1UL << TSC_IOHCR_G5_IO2_Pos)
#define TSC_IOHCR_G5_IO2 TSC_IOHCR_G5_IO2_Msk
#define TSC_IOHCR_G5_IO3_Pos (18U)
#define TSC_IOHCR_G5_IO3_Msk (0x1UL << TSC_IOHCR_G5_IO3_Pos)
#define TSC_IOHCR_G5_IO3 TSC_IOHCR_G5_IO3_Msk
#define TSC_IOHCR_G5_IO4_Pos (19U)
#define TSC_IOHCR_G5_IO4_Msk (0x1UL << TSC_IOHCR_G5_IO4_Pos)
#define TSC_IOHCR_G5_IO4 TSC_IOHCR_G5_IO4_Msk
#define TSC_IOHCR_G6_IO1_Pos (20U)
#define TSC_IOHCR_G6_IO1_Msk (0x1UL << TSC_IOHCR_G6_IO1_Pos)
#define TSC_IOHCR_G6_IO1 TSC_IOHCR_G6_IO1_Msk
#define TSC_IOHCR_G6_IO2_Pos (21U)
#define TSC_IOHCR_G6_IO2_Msk (0x1UL << TSC_IOHCR_G6_IO2_Pos)
#define TSC_IOHCR_G6_IO2 TSC_IOHCR_G6_IO2_Msk
#define TSC_IOHCR_G6_IO3_Pos (22U)
#define TSC_IOHCR_G6_IO3_Msk (0x1UL << TSC_IOHCR_G6_IO3_Pos)
#define TSC_IOHCR_G6_IO3 TSC_IOHCR_G6_IO3_Msk
#define TSC_IOHCR_G6_IO4_Pos (23U)
#define TSC_IOHCR_G6_IO4_Msk (0x1UL << TSC_IOHCR_G6_IO4_Pos)
#define TSC_IOHCR_G6_IO4 TSC_IOHCR_G6_IO4_Msk
#define TSC_IOHCR_G7_IO1_Pos (24U)
#define TSC_IOHCR_G7_IO1_Msk (0x1UL << TSC_IOHCR_G7_IO1_Pos)
#define TSC_IOHCR_G7_IO1 TSC_IOHCR_G7_IO1_Msk
#define TSC_IOHCR_G7_IO2_Pos (25U)
#define TSC_IOHCR_G7_IO2_Msk (0x1UL << TSC_IOHCR_G7_IO2_Pos)
#define TSC_IOHCR_G7_IO2 TSC_IOHCR_G7_IO2_Msk
#define TSC_IOHCR_G7_IO3_Pos (26U)
#define TSC_IOHCR_G7_IO3_Msk (0x1UL << TSC_IOHCR_G7_IO3_Pos)
#define TSC_IOHCR_G7_IO3 TSC_IOHCR_G7_IO3_Msk
#define TSC_IOHCR_G7_IO4_Pos (27U)
#define TSC_IOHCR_G7_IO4_Msk (0x1UL << TSC_IOHCR_G7_IO4_Pos)
#define TSC_IOHCR_G7_IO4 TSC_IOHCR_G7_IO4_Msk
#define TSC_IOASCR_G1_IO1_Pos (0U)
#define TSC_IOASCR_G1_IO1_Msk (0x1UL << TSC_IOASCR_G1_IO1_Pos)
#define TSC_IOASCR_G1_IO1 TSC_IOASCR_G1_IO1_Msk
#define TSC_IOASCR_G1_IO2_Pos (1U)
#define TSC_IOASCR_G1_IO2_Msk (0x1UL << TSC_IOASCR_G1_IO2_Pos)
#define TSC_IOASCR_G1_IO2 TSC_IOASCR_G1_IO2_Msk
#define TSC_IOASCR_G1_IO3_Pos (2U)
#define TSC_IOASCR_G1_IO3_Msk (0x1UL << TSC_IOASCR_G1_IO3_Pos)
#define TSC_IOASCR_G1_IO3 TSC_IOASCR_G1_IO3_Msk
#define TSC_IOASCR_G1_IO4_Pos (3U)
#define TSC_IOASCR_G1_IO4_Msk (0x1UL << TSC_IOASCR_G1_IO4_Pos)
#define TSC_IOASCR_G1_IO4 TSC_IOASCR_G1_IO4_Msk
#define TSC_IOASCR_G2_IO1_Pos (4U)
#define TSC_IOASCR_G2_IO1_Msk (0x1UL << TSC_IOASCR_G2_IO1_Pos)
#define TSC_IOASCR_G2_IO1 TSC_IOASCR_G2_IO1_Msk
#define TSC_IOASCR_G2_IO2_Pos (5U)
#define TSC_IOASCR_G2_IO2_Msk (0x1UL << TSC_IOASCR_G2_IO2_Pos)
#define TSC_IOASCR_G2_IO2 TSC_IOASCR_G2_IO2_Msk
#define TSC_IOASCR_G2_IO3_Pos (6U)
#define TSC_IOASCR_G2_IO3_Msk (0x1UL << TSC_IOASCR_G2_IO3_Pos)
#define TSC_IOASCR_G2_IO3 TSC_IOASCR_G2_IO3_Msk
#define TSC_IOASCR_G2_IO4_Pos (7U)
#define TSC_IOASCR_G2_IO4_Msk (0x1UL << TSC_IOASCR_G2_IO4_Pos)
#define TSC_IOASCR_G2_IO4 TSC_IOASCR_G2_IO4_Msk
#define TSC_IOASCR_G3_IO1_Pos (8U)
#define TSC_IOASCR_G3_IO1_Msk (0x1UL << TSC_IOASCR_G3_IO1_Pos)
#define TSC_IOASCR_G3_IO1 TSC_IOASCR_G3_IO1_Msk
#define TSC_IOASCR_G3_IO2_Pos (9U)
#define TSC_IOASCR_G3_IO2_Msk (0x1UL << TSC_IOASCR_G3_IO2_Pos)
#define TSC_IOASCR_G3_IO2 TSC_IOASCR_G3_IO2_Msk
#define TSC_IOASCR_G3_IO3_Pos (10U)
#define TSC_IOASCR_G3_IO3_Msk (0x1UL << TSC_IOASCR_G3_IO3_Pos)
#define TSC_IOASCR_G3_IO3 TSC_IOASCR_G3_IO3_Msk
#define TSC_IOASCR_G3_IO4_Pos (11U)
#define TSC_IOASCR_G3_IO4_Msk (0x1UL << TSC_IOASCR_G3_IO4_Pos)
#define TSC_IOASCR_G3_IO4 TSC_IOASCR_G3_IO4_Msk
#define TSC_IOASCR_G4_IO1_Pos (12U)
#define TSC_IOASCR_G4_IO1_Msk (0x1UL << TSC_IOASCR_G4_IO1_Pos)
#define TSC_IOASCR_G4_IO1 TSC_IOASCR_G4_IO1_Msk
#define TSC_IOASCR_G4_IO2_Pos (13U)
#define TSC_IOASCR_G4_IO2_Msk (0x1UL << TSC_IOASCR_G4_IO2_Pos)
#define TSC_IOASCR_G4_IO2 TSC_IOASCR_G4_IO2_Msk
#define TSC_IOASCR_G4_IO3_Pos (14U)
#define TSC_IOASCR_G4_IO3_Msk (0x1UL << TSC_IOASCR_G4_IO3_Pos)
#define TSC_IOASCR_G4_IO3 TSC_IOASCR_G4_IO3_Msk
#define TSC_IOASCR_G4_IO4_Pos (15U)
#define TSC_IOASCR_G4_IO4_Msk (0x1UL << TSC_IOASCR_G4_IO4_Pos)
#define TSC_IOASCR_G4_IO4 TSC_IOASCR_G4_IO4_Msk
#define TSC_IOASCR_G5_IO1_Pos (16U)
#define TSC_IOASCR_G5_IO1_Msk (0x1UL << TSC_IOASCR_G5_IO1_Pos)
#define TSC_IOASCR_G5_IO1 TSC_IOASCR_G5_IO1_Msk
#define TSC_IOASCR_G5_IO2_Pos (17U)
#define TSC_IOASCR_G5_IO2_Msk (0x1UL << TSC_IOASCR_G5_IO2_Pos)
#define TSC_IOASCR_G5_IO2 TSC_IOASCR_G5_IO2_Msk
#define TSC_IOASCR_G5_IO3_Pos (18U)
#define TSC_IOASCR_G5_IO3_Msk (0x1UL << TSC_IOASCR_G5_IO3_Pos)
#define TSC_IOASCR_G5_IO3 TSC_IOASCR_G5_IO3_Msk
#define TSC_IOASCR_G5_IO4_Pos (19U)
#define TSC_IOASCR_G5_IO4_Msk (0x1UL << TSC_IOASCR_G5_IO4_Pos)
#define TSC_IOASCR_G5_IO4 TSC_IOASCR_G5_IO4_Msk
#define TSC_IOASCR_G6_IO1_Pos (20U)
#define TSC_IOASCR_G6_IO1_Msk (0x1UL << TSC_IOASCR_G6_IO1_Pos)
#define TSC_IOASCR_G6_IO1 TSC_IOASCR_G6_IO1_Msk
#define TSC_IOASCR_G6_IO2_Pos (21U)
#define TSC_IOASCR_G6_IO2_Msk (0x1UL << TSC_IOASCR_G6_IO2_Pos)
#define TSC_IOASCR_G6_IO2 TSC_IOASCR_G6_IO2_Msk
#define TSC_IOASCR_G6_IO3_Pos (22U)
#define TSC_IOASCR_G6_IO3_Msk (0x1UL << TSC_IOASCR_G6_IO3_Pos)
#define TSC_IOASCR_G6_IO3 TSC_IOASCR_G6_IO3_Msk
#define TSC_IOASCR_G6_IO4_Pos (23U)
#define TSC_IOASCR_G6_IO4_Msk (0x1UL << TSC_IOASCR_G6_IO4_Pos)
#define TSC_IOASCR_G6_IO4 TSC_IOASCR_G6_IO4_Msk
#define TSC_IOASCR_G7_IO1_Pos (24U)
#define TSC_IOASCR_G7_IO1_Msk (0x1UL << TSC_IOASCR_G7_IO1_Pos)
#define TSC_IOASCR_G7_IO1 TSC_IOASCR_G7_IO1_Msk
#define TSC_IOASCR_G7_IO2_Pos (25U)
#define TSC_IOASCR_G7_IO2_Msk (0x1UL << TSC_IOASCR_G7_IO2_Pos)
#define TSC_IOASCR_G7_IO2 TSC_IOASCR_G7_IO2_Msk
#define TSC_IOASCR_G7_IO3_Pos (26U)
#define TSC_IOASCR_G7_IO3_Msk (0x1UL << TSC_IOASCR_G7_IO3_Pos)
#define TSC_IOASCR_G7_IO3 TSC_IOASCR_G7_IO3_Msk
#define TSC_IOASCR_G7_IO4_Pos (27U)
#define TSC_IOASCR_G7_IO4_Msk (0x1UL << TSC_IOASCR_G7_IO4_Pos)
#define TSC_IOASCR_G7_IO4 TSC_IOASCR_G7_IO4_Msk
#define TSC_IOSCR_G1_IO1_Pos (0U)
#define TSC_IOSCR_G1_IO1_Msk (0x1UL << TSC_IOSCR_G1_IO1_Pos)
#define TSC_IOSCR_G1_IO1 TSC_IOSCR_G1_IO1_Msk
#define TSC_IOSCR_G1_IO2_Pos (1U)
#define TSC_IOSCR_G1_IO2_Msk (0x1UL << TSC_IOSCR_G1_IO2_Pos)
#define TSC_IOSCR_G1_IO2 TSC_IOSCR_G1_IO2_Msk
#define TSC_IOSCR_G1_IO3_Pos (2U)
#define TSC_IOSCR_G1_IO3_Msk (0x1UL << TSC_IOSCR_G1_IO3_Pos)
#define TSC_IOSCR_G1_IO3 TSC_IOSCR_G1_IO3_Msk
#define TSC_IOSCR_G1_IO4_Pos (3U)
#define TSC_IOSCR_G1_IO4_Msk (0x1UL << TSC_IOSCR_G1_IO4_Pos)
#define TSC_IOSCR_G1_IO4 TSC_IOSCR_G1_IO4_Msk
#define TSC_IOSCR_G2_IO1_Pos (4U)
#define TSC_IOSCR_G2_IO1_Msk (0x1UL << TSC_IOSCR_G2_IO1_Pos)
#define TSC_IOSCR_G2_IO1 TSC_IOSCR_G2_IO1_Msk
#define TSC_IOSCR_G2_IO2_Pos (5U)
#define TSC_IOSCR_G2_IO2_Msk (0x1UL << TSC_IOSCR_G2_IO2_Pos)
#define TSC_IOSCR_G2_IO2 TSC_IOSCR_G2_IO2_Msk
#define TSC_IOSCR_G2_IO3_Pos (6U)
#define TSC_IOSCR_G2_IO3_Msk (0x1UL << TSC_IOSCR_G2_IO3_Pos)
#define TSC_IOSCR_G2_IO3 TSC_IOSCR_G2_IO3_Msk
#define TSC_IOSCR_G2_IO4_Pos (7U)
#define TSC_IOSCR_G2_IO4_Msk (0x1UL << TSC_IOSCR_G2_IO4_Pos)
#define TSC_IOSCR_G2_IO4 TSC_IOSCR_G2_IO4_Msk
#define TSC_IOSCR_G3_IO1_Pos (8U)
#define TSC_IOSCR_G3_IO1_Msk (0x1UL << TSC_IOSCR_G3_IO1_Pos)
#define TSC_IOSCR_G3_IO1 TSC_IOSCR_G3_IO1_Msk
#define TSC_IOSCR_G3_IO2_Pos (9U)
#define TSC_IOSCR_G3_IO2_Msk (0x1UL << TSC_IOSCR_G3_IO2_Pos)
#define TSC_IOSCR_G3_IO2 TSC_IOSCR_G3_IO2_Msk
#define TSC_IOSCR_G3_IO3_Pos (10U)
#define TSC_IOSCR_G3_IO3_Msk (0x1UL << TSC_IOSCR_G3_IO3_Pos)
#define TSC_IOSCR_G3_IO3 TSC_IOSCR_G3_IO3_Msk
#define TSC_IOSCR_G3_IO4_Pos (11U)
#define TSC_IOSCR_G3_IO4_Msk (0x1UL << TSC_IOSCR_G3_IO4_Pos)
#define TSC_IOSCR_G3_IO4 TSC_IOSCR_G3_IO4_Msk
#define TSC_IOSCR_G4_IO1_Pos (12U)
#define TSC_IOSCR_G4_IO1_Msk (0x1UL << TSC_IOSCR_G4_IO1_Pos)
#define TSC_IOSCR_G4_IO1 TSC_IOSCR_G4_IO1_Msk
#define TSC_IOSCR_G4_IO2_Pos (13U)
#define TSC_IOSCR_G4_IO2_Msk (0x1UL << TSC_IOSCR_G4_IO2_Pos)
#define TSC_IOSCR_G4_IO2 TSC_IOSCR_G4_IO2_Msk
#define TSC_IOSCR_G4_IO3_Pos (14U)
#define TSC_IOSCR_G4_IO3_Msk (0x1UL << TSC_IOSCR_G4_IO3_Pos)
#define TSC_IOSCR_G4_IO3 TSC_IOSCR_G4_IO3_Msk
#define TSC_IOSCR_G4_IO4_Pos (15U)
#define TSC_IOSCR_G4_IO4_Msk (0x1UL << TSC_IOSCR_G4_IO4_Pos)
#define TSC_IOSCR_G4_IO4 TSC_IOSCR_G4_IO4_Msk
#define TSC_IOSCR_G5_IO1_Pos (16U)
#define TSC_IOSCR_G5_IO1_Msk (0x1UL << TSC_IOSCR_G5_IO1_Pos)
#define TSC_IOSCR_G5_IO1 TSC_IOSCR_G5_IO1_Msk
#define TSC_IOSCR_G5_IO2_Pos (17U)
#define TSC_IOSCR_G5_IO2_Msk (0x1UL << TSC_IOSCR_G5_IO2_Pos)
#define TSC_IOSCR_G5_IO2 TSC_IOSCR_G5_IO2_Msk
#define TSC_IOSCR_G5_IO3_Pos (18U)
#define TSC_IOSCR_G5_IO3_Msk (0x1UL << TSC_IOSCR_G5_IO3_Pos)
#define TSC_IOSCR_G5_IO3 TSC_IOSCR_G5_IO3_Msk
#define TSC_IOSCR_G5_IO4_Pos (19U)
#define TSC_IOSCR_G5_IO4_Msk (0x1UL << TSC_IOSCR_G5_IO4_Pos)
#define TSC_IOSCR_G5_IO4 TSC_IOSCR_G5_IO4_Msk
#define TSC_IOSCR_G6_IO1_Pos (20U)
#define TSC_IOSCR_G6_IO1_Msk (0x1UL << TSC_IOSCR_G6_IO1_Pos)
#define TSC_IOSCR_G6_IO1 TSC_IOSCR_G6_IO1_Msk
#define TSC_IOSCR_G6_IO2_Pos (21U)
#define TSC_IOSCR_G6_IO2_Msk (0x1UL << TSC_IOSCR_G6_IO2_Pos)
#define TSC_IOSCR_G6_IO2 TSC_IOSCR_G6_IO2_Msk
#define TSC_IOSCR_G6_IO3_Pos (22U)
#define TSC_IOSCR_G6_IO3_Msk (0x1UL << TSC_IOSCR_G6_IO3_Pos)
#define TSC_IOSCR_G6_IO3 TSC_IOSCR_G6_IO3_Msk
#define TSC_IOSCR_G6_IO4_Pos (23U)
#define TSC_IOSCR_G6_IO4_Msk (0x1UL << TSC_IOSCR_G6_IO4_Pos)
#define TSC_IOSCR_G6_IO4 TSC_IOSCR_G6_IO4_Msk
#define TSC_IOSCR_G7_IO1_Pos (24U)
#define TSC_IOSCR_G7_IO1_Msk (0x1UL << TSC_IOSCR_G7_IO1_Pos)
#define TSC_IOSCR_G7_IO1 TSC_IOSCR_G7_IO1_Msk
#define TSC_IOSCR_G7_IO2_Pos (25U)
#define TSC_IOSCR_G7_IO2_Msk (0x1UL << TSC_IOSCR_G7_IO2_Pos)
#define TSC_IOSCR_G7_IO2 TSC_IOSCR_G7_IO2_Msk
#define TSC_IOSCR_G7_IO3_Pos (26U)
#define TSC_IOSCR_G7_IO3_Msk (0x1UL << TSC_IOSCR_G7_IO3_Pos)
#define TSC_IOSCR_G7_IO3 TSC_IOSCR_G7_IO3_Msk
#define TSC_IOSCR_G7_IO4_Pos (27U)
#define TSC_IOSCR_G7_IO4_Msk (0x1UL << TSC_IOSCR_G7_IO4_Pos)
#define TSC_IOSCR_G7_IO4 TSC_IOSCR_G7_IO4_Msk
#define TSC_IOCCR_G1_IO1_Pos (0U)
#define TSC_IOCCR_G1_IO1_Msk (0x1UL << TSC_IOCCR_G1_IO1_Pos)
#define TSC_IOCCR_G1_IO1 TSC_IOCCR_G1_IO1_Msk
#define TSC_IOCCR_G1_IO2_Pos (1U)
#define TSC_IOCCR_G1_IO2_Msk (0x1UL << TSC_IOCCR_G1_IO2_Pos)
#define TSC_IOCCR_G1_IO2 TSC_IOCCR_G1_IO2_Msk
#define TSC_IOCCR_G1_IO3_Pos (2U)
#define TSC_IOCCR_G1_IO3_Msk (0x1UL << TSC_IOCCR_G1_IO3_Pos)
#define TSC_IOCCR_G1_IO3 TSC_IOCCR_G1_IO3_Msk
#define TSC_IOCCR_G1_IO4_Pos (3U)
#define TSC_IOCCR_G1_IO4_Msk (0x1UL << TSC_IOCCR_G1_IO4_Pos)
#define TSC_IOCCR_G1_IO4 TSC_IOCCR_G1_IO4_Msk
#define TSC_IOCCR_G2_IO1_Pos (4U)
#define TSC_IOCCR_G2_IO1_Msk (0x1UL << TSC_IOCCR_G2_IO1_Pos)
#define TSC_IOCCR_G2_IO1 TSC_IOCCR_G2_IO1_Msk
#define TSC_IOCCR_G2_IO2_Pos (5U)
#define TSC_IOCCR_G2_IO2_Msk (0x1UL << TSC_IOCCR_G2_IO2_Pos)
#define TSC_IOCCR_G2_IO2 TSC_IOCCR_G2_IO2_Msk
#define TSC_IOCCR_G2_IO3_Pos (6U)
#define TSC_IOCCR_G2_IO3_Msk (0x1UL << TSC_IOCCR_G2_IO3_Pos)
#define TSC_IOCCR_G2_IO3 TSC_IOCCR_G2_IO3_Msk
#define TSC_IOCCR_G2_IO4_Pos (7U)
#define TSC_IOCCR_G2_IO4_Msk (0x1UL << TSC_IOCCR_G2_IO4_Pos)
#define TSC_IOCCR_G2_IO4 TSC_IOCCR_G2_IO4_Msk
#define TSC_IOCCR_G3_IO1_Pos (8U)
#define TSC_IOCCR_G3_IO1_Msk (0x1UL << TSC_IOCCR_G3_IO1_Pos)
#define TSC_IOCCR_G3_IO1 TSC_IOCCR_G3_IO1_Msk
#define TSC_IOCCR_G3_IO2_Pos (9U)
#define TSC_IOCCR_G3_IO2_Msk (0x1UL << TSC_IOCCR_G3_IO2_Pos)
#define TSC_IOCCR_G3_IO2 TSC_IOCCR_G3_IO2_Msk
#define TSC_IOCCR_G3_IO3_Pos (10U)
#define TSC_IOCCR_G3_IO3_Msk (0x1UL << TSC_IOCCR_G3_IO3_Pos)
#define TSC_IOCCR_G3_IO3 TSC_IOCCR_G3_IO3_Msk
#define TSC_IOCCR_G3_IO4_Pos (11U)
#define TSC_IOCCR_G3_IO4_Msk (0x1UL << TSC_IOCCR_G3_IO4_Pos)
#define TSC_IOCCR_G3_IO4 TSC_IOCCR_G3_IO4_Msk
#define TSC_IOCCR_G4_IO1_Pos (12U)
#define TSC_IOCCR_G4_IO1_Msk (0x1UL << TSC_IOCCR_G4_IO1_Pos)
#define TSC_IOCCR_G4_IO1 TSC_IOCCR_G4_IO1_Msk
#define TSC_IOCCR_G4_IO2_Pos (13U)
#define TSC_IOCCR_G4_IO2_Msk (0x1UL << TSC_IOCCR_G4_IO2_Pos)
#define TSC_IOCCR_G4_IO2 TSC_IOCCR_G4_IO2_Msk
#define TSC_IOCCR_G4_IO3_Pos (14U)
#define TSC_IOCCR_G4_IO3_Msk (0x1UL << TSC_IOCCR_G4_IO3_Pos)
#define TSC_IOCCR_G4_IO3 TSC_IOCCR_G4_IO3_Msk
#define TSC_IOCCR_G4_IO4_Pos (15U)
#define TSC_IOCCR_G4_IO4_Msk (0x1UL << TSC_IOCCR_G4_IO4_Pos)
#define TSC_IOCCR_G4_IO4 TSC_IOCCR_G4_IO4_Msk
#define TSC_IOCCR_G5_IO1_Pos (16U)
#define TSC_IOCCR_G5_IO1_Msk (0x1UL << TSC_IOCCR_G5_IO1_Pos)
#define TSC_IOCCR_G5_IO1 TSC_IOCCR_G5_IO1_Msk
#define TSC_IOCCR_G5_IO2_Pos (17U)
#define TSC_IOCCR_G5_IO2_Msk (0x1UL << TSC_IOCCR_G5_IO2_Pos)
#define TSC_IOCCR_G5_IO2 TSC_IOCCR_G5_IO2_Msk
#define TSC_IOCCR_G5_IO3_Pos (18U)
#define TSC_IOCCR_G5_IO3_Msk (0x1UL << TSC_IOCCR_G5_IO3_Pos)
#define TSC_IOCCR_G5_IO3 TSC_IOCCR_G5_IO3_Msk
#define TSC_IOCCR_G5_IO4_Pos (19U)
#define TSC_IOCCR_G5_IO4_Msk (0x1UL << TSC_IOCCR_G5_IO4_Pos)
#define TSC_IOCCR_G5_IO4 TSC_IOCCR_G5_IO4_Msk
#define TSC_IOCCR_G6_IO1_Pos (20U)
#define TSC_IOCCR_G6_IO1_Msk (0x1UL << TSC_IOCCR_G6_IO1_Pos)
#define TSC_IOCCR_G6_IO1 TSC_IOCCR_G6_IO1_Msk
#define TSC_IOCCR_G6_IO2_Pos (21U)
#define TSC_IOCCR_G6_IO2_Msk (0x1UL << TSC_IOCCR_G6_IO2_Pos)
#define TSC_IOCCR_G6_IO2 TSC_IOCCR_G6_IO2_Msk
#define TSC_IOCCR_G6_IO3_Pos (22U)
#define TSC_IOCCR_G6_IO3_Msk (0x1UL << TSC_IOCCR_G6_IO3_Pos)
#define TSC_IOCCR_G6_IO3 TSC_IOCCR_G6_IO3_Msk
#define TSC_IOCCR_G6_IO4_Pos (23U)
#define TSC_IOCCR_G6_IO4_Msk (0x1UL << TSC_IOCCR_G6_IO4_Pos)
#define TSC_IOCCR_G6_IO4 TSC_IOCCR_G6_IO4_Msk
#define TSC_IOCCR_G7_IO1_Pos (24U)
#define TSC_IOCCR_G7_IO1_Msk (0x1UL << TSC_IOCCR_G7_IO1_Pos)
#define TSC_IOCCR_G7_IO1 TSC_IOCCR_G7_IO1_Msk
#define TSC_IOCCR_G7_IO2_Pos (25U)
#define TSC_IOCCR_G7_IO2_Msk (0x1UL << TSC_IOCCR_G7_IO2_Pos)
#define TSC_IOCCR_G7_IO2 TSC_IOCCR_G7_IO2_Msk
#define TSC_IOCCR_G7_IO3_Pos (26U)
#define TSC_IOCCR_G7_IO3_Msk (0x1UL << TSC_IOCCR_G7_IO3_Pos)
#define TSC_IOCCR_G7_IO3 TSC_IOCCR_G7_IO3_Msk
#define TSC_IOCCR_G7_IO4_Pos (27U)
#define TSC_IOCCR_G7_IO4_Msk (0x1UL << TSC_IOCCR_G7_IO4_Pos)
#define TSC_IOCCR_G7_IO4 TSC_IOCCR_G7_IO4_Msk
#define TSC_IOGCSR_G1E_Pos (0U)
#define TSC_IOGCSR_G1E_Msk (0x1UL << TSC_IOGCSR_G1E_Pos)
#define TSC_IOGCSR_G1E TSC_IOGCSR_G1E_Msk
#define TSC_IOGCSR_G2E_Pos (1U)
#define TSC_IOGCSR_G2E_Msk (0x1UL << TSC_IOGCSR_G2E_Pos)
#define TSC_IOGCSR_G2E TSC_IOGCSR_G2E_Msk
#define TSC_IOGCSR_G3E_Pos (2U)
#define TSC_IOGCSR_G3E_Msk (0x1UL << TSC_IOGCSR_G3E_Pos)
#define TSC_IOGCSR_G3E TSC_IOGCSR_G3E_Msk
#define TSC_IOGCSR_G4E_Pos (3U)
#define TSC_IOGCSR_G4E_Msk (0x1UL << TSC_IOGCSR_G4E_Pos)
#define TSC_IOGCSR_G4E TSC_IOGCSR_G4E_Msk
#define TSC_IOGCSR_G5E_Pos (4U)
#define TSC_IOGCSR_G5E_Msk (0x1UL << TSC_IOGCSR_G5E_Pos)
#define TSC_IOGCSR_G5E TSC_IOGCSR_G5E_Msk
#define TSC_IOGCSR_G6E_Pos (5U)
#define TSC_IOGCSR_G6E_Msk (0x1UL << TSC_IOGCSR_G6E_Pos)
#define TSC_IOGCSR_G6E TSC_IOGCSR_G6E_Msk
#define TSC_IOGCSR_G7E_Pos (6U)
#define TSC_IOGCSR_G7E_Msk (0x1UL << TSC_IOGCSR_G7E_Pos)
#define TSC_IOGCSR_G7E TSC_IOGCSR_G7E_Msk
#define TSC_IOGCSR_G1S_Pos (16U)
#define TSC_IOGCSR_G1S_Msk (0x1UL << TSC_IOGCSR_G1S_Pos)
#define TSC_IOGCSR_G1S TSC_IOGCSR_G1S_Msk
#define TSC_IOGCSR_G2S_Pos (17U)
#define TSC_IOGCSR_G2S_Msk (0x1UL << TSC_IOGCSR_G2S_Pos)
#define TSC_IOGCSR_G2S TSC_IOGCSR_G2S_Msk
#define TSC_IOGCSR_G3S_Pos (18U)
#define TSC_IOGCSR_G3S_Msk (0x1UL << TSC_IOGCSR_G3S_Pos)
#define TSC_IOGCSR_G3S TSC_IOGCSR_G3S_Msk
#define TSC_IOGCSR_G4S_Pos (19U)
#define TSC_IOGCSR_G4S_Msk (0x1UL << TSC_IOGCSR_G4S_Pos)
#define TSC_IOGCSR_G4S TSC_IOGCSR_G4S_Msk
#define TSC_IOGCSR_G5S_Pos (20U)
#define TSC_IOGCSR_G5S_Msk (0x1UL << TSC_IOGCSR_G5S_Pos)
#define TSC_IOGCSR_G5S TSC_IOGCSR_G5S_Msk
#define TSC_IOGCSR_G6S_Pos (21U)
#define TSC_IOGCSR_G6S_Msk (0x1UL << TSC_IOGCSR_G6S_Pos)
#define TSC_IOGCSR_G6S TSC_IOGCSR_G6S_Msk
#define TSC_IOGCSR_G7S_Pos (22U)
#define TSC_IOGCSR_G7S_Msk (0x1UL << TSC_IOGCSR_G7S_Pos)
#define TSC_IOGCSR_G7S TSC_IOGCSR_G7S_Msk
#define TSC_IOGXCR_CNT_Pos (0U)
#define TSC_IOGXCR_CNT_Msk (0x3FFFUL << TSC_IOGXCR_CNT_Pos)
#define TSC_IOGXCR_CNT TSC_IOGXCR_CNT_Msk
#define LCD_CR_LCDEN_Pos (0U)
#define LCD_CR_LCDEN_Msk (0x1UL << LCD_CR_LCDEN_Pos)
#define LCD_CR_LCDEN LCD_CR_LCDEN_Msk
#define LCD_CR_VSEL_Pos (1U)
#define LCD_CR_VSEL_Msk (0x1UL << LCD_CR_VSEL_Pos)
#define LCD_CR_VSEL LCD_CR_VSEL_Msk
#define LCD_CR_DUTY_Pos (2U)
#define LCD_CR_DUTY_Msk (0x7UL << LCD_CR_DUTY_Pos)
#define LCD_CR_DUTY LCD_CR_DUTY_Msk
#define LCD_CR_DUTY_0 (0x1U << LCD_CR_DUTY_Pos)
#define LCD_CR_DUTY_1 (0x2U << LCD_CR_DUTY_Pos)
#define LCD_CR_DUTY_2 (0x4U << LCD_CR_DUTY_Pos)
#define LCD_CR_BIAS_Pos (5U)
#define LCD_CR_BIAS_Msk (0x3UL << LCD_CR_BIAS_Pos)
#define LCD_CR_BIAS LCD_CR_BIAS_Msk
#define LCD_CR_BIAS_0 (0x1U << LCD_CR_BIAS_Pos)
#define LCD_CR_BIAS_1 (0x2U << LCD_CR_BIAS_Pos)
#define LCD_CR_MUX_SEG_Pos (7U)
#define LCD_CR_MUX_SEG_Msk (0x1UL << LCD_CR_MUX_SEG_Pos)
#define LCD_CR_MUX_SEG LCD_CR_MUX_SEG_Msk
#define LCD_CR_BUFEN_Pos (8U)
#define LCD_CR_BUFEN_Msk (0x1UL << LCD_CR_BUFEN_Pos)
#define LCD_CR_BUFEN LCD_CR_BUFEN_Msk
#define LCD_FCR_HD_Pos (0U)
#define LCD_FCR_HD_Msk (0x1UL << LCD_FCR_HD_Pos)
#define LCD_FCR_HD LCD_FCR_HD_Msk
#define LCD_FCR_SOFIE_Pos (1U)
#define LCD_FCR_SOFIE_Msk (0x1UL << LCD_FCR_SOFIE_Pos)
#define LCD_FCR_SOFIE LCD_FCR_SOFIE_Msk
#define LCD_FCR_UDDIE_Pos (3U)
#define LCD_FCR_UDDIE_Msk (0x1UL << LCD_FCR_UDDIE_Pos)
#define LCD_FCR_UDDIE LCD_FCR_UDDIE_Msk
#define LCD_FCR_PON_Pos (4U)
#define LCD_FCR_PON_Msk (0x7UL << LCD_FCR_PON_Pos)
#define LCD_FCR_PON LCD_FCR_PON_Msk
#define LCD_FCR_PON_0 (0x1U << LCD_FCR_PON_Pos)
#define LCD_FCR_PON_1 (0x2U << LCD_FCR_PON_Pos)
#define LCD_FCR_PON_2 (0x4U << LCD_FCR_PON_Pos)
#define LCD_FCR_DEAD_Pos (7U)
#define LCD_FCR_DEAD_Msk (0x7UL << LCD_FCR_DEAD_Pos)
#define LCD_FCR_DEAD LCD_FCR_DEAD_Msk
#define LCD_FCR_DEAD_0 (0x1U << LCD_FCR_DEAD_Pos)
#define LCD_FCR_DEAD_1 (0x2U << LCD_FCR_DEAD_Pos)
#define LCD_FCR_DEAD_2 (0x4U << LCD_FCR_DEAD_Pos)
#define LCD_FCR_CC_Pos (10U)
#define LCD_FCR_CC_Msk (0x7UL << LCD_FCR_CC_Pos)
#define LCD_FCR_CC LCD_FCR_CC_Msk
#define LCD_FCR_CC_0 (0x1U << LCD_FCR_CC_Pos)
#define LCD_FCR_CC_1 (0x2U << LCD_FCR_CC_Pos)
#define LCD_FCR_CC_2 (0x4U << LCD_FCR_CC_Pos)
#define LCD_FCR_BLINKF_Pos (13U)
#define LCD_FCR_BLINKF_Msk (0x7UL << LCD_FCR_BLINKF_Pos)
#define LCD_FCR_BLINKF LCD_FCR_BLINKF_Msk
#define LCD_FCR_BLINKF_0 (0x1U << LCD_FCR_BLINKF_Pos)
#define LCD_FCR_BLINKF_1 (0x2U << LCD_FCR_BLINKF_Pos)
#define LCD_FCR_BLINKF_2 (0x4U << LCD_FCR_BLINKF_Pos)
#define LCD_FCR_BLINK_Pos (16U)
#define LCD_FCR_BLINK_Msk (0x3UL << LCD_FCR_BLINK_Pos)
#define LCD_FCR_BLINK LCD_FCR_BLINK_Msk
#define LCD_FCR_BLINK_0 (0x1U << LCD_FCR_BLINK_Pos)
#define LCD_FCR_BLINK_1 (0x2U << LCD_FCR_BLINK_Pos)
#define LCD_FCR_DIV_Pos (18U)
#define LCD_FCR_DIV_Msk (0xFUL << LCD_FCR_DIV_Pos)
#define LCD_FCR_DIV LCD_FCR_DIV_Msk
#define LCD_FCR_PS_Pos (22U)
#define LCD_FCR_PS_Msk (0xFUL << LCD_FCR_PS_Pos)
#define LCD_FCR_PS LCD_FCR_PS_Msk
#define LCD_SR_ENS_Pos (0U)
#define LCD_SR_ENS_Msk (0x1UL << LCD_SR_ENS_Pos)
#define LCD_SR_ENS LCD_SR_ENS_Msk
#define LCD_SR_SOF_Pos (1U)
#define LCD_SR_SOF_Msk (0x1UL << LCD_SR_SOF_Pos)
#define LCD_SR_SOF LCD_SR_SOF_Msk
#define LCD_SR_UDR_Pos (2U)
#define LCD_SR_UDR_Msk (0x1UL << LCD_SR_UDR_Pos)
#define LCD_SR_UDR LCD_SR_UDR_Msk
#define LCD_SR_UDD_Pos (3U)
#define LCD_SR_UDD_Msk (0x1UL << LCD_SR_UDD_Pos)
#define LCD_SR_UDD LCD_SR_UDD_Msk
#define LCD_SR_RDY_Pos (4U)
#define LCD_SR_RDY_Msk (0x1UL << LCD_SR_RDY_Pos)
#define LCD_SR_RDY LCD_SR_RDY_Msk
#define LCD_SR_FCRSR_Pos (5U)
#define LCD_SR_FCRSR_Msk (0x1UL << LCD_SR_FCRSR_Pos)
#define LCD_SR_FCRSR LCD_SR_FCRSR_Msk
#define LCD_CLR_SOFC_Pos (1U)
#define LCD_CLR_SOFC_Msk (0x1UL << LCD_CLR_SOFC_Pos)
#define LCD_CLR_SOFC LCD_CLR_SOFC_Msk
#define LCD_CLR_UDDC_Pos (3U)
#define LCD_CLR_UDDC_Msk (0x1UL << LCD_CLR_UDDC_Pos)
#define LCD_CLR_UDDC LCD_CLR_UDDC_Msk
#define LCD_RAM_SEGMENT_DATA_Pos (0U)
#define LCD_RAM_SEGMENT_DATA_Msk (0xFFFFFFFFUL << LCD_RAM_SEGMENT_DATA_Pos)
#define LCD_RAM_SEGMENT_DATA LCD_RAM_SEGMENT_DATA_Msk
#define SAI_GCR_SYNCIN_Pos (0U)
#define SAI_GCR_SYNCIN_Msk (0x3UL << SAI_GCR_SYNCIN_Pos)
#define SAI_GCR_SYNCIN SAI_GCR_SYNCIN_Msk
#define SAI_GCR_SYNCIN_0 (0x1U << SAI_GCR_SYNCIN_Pos)
#define SAI_GCR_SYNCIN_1 (0x2U << SAI_GCR_SYNCIN_Pos)
#define SAI_GCR_SYNCOUT_Pos (4U)
#define SAI_GCR_SYNCOUT_Msk (0x3UL << SAI_GCR_SYNCOUT_Pos)
#define SAI_GCR_SYNCOUT SAI_GCR_SYNCOUT_Msk
#define SAI_GCR_SYNCOUT_0 (0x1U << SAI_GCR_SYNCOUT_Pos)
#define SAI_GCR_SYNCOUT_1 (0x2U << SAI_GCR_SYNCOUT_Pos)
#define SAI_xCR1_MODE_Pos (0U)
#define SAI_xCR1_MODE_Msk (0x3UL << SAI_xCR1_MODE_Pos)
#define SAI_xCR1_MODE SAI_xCR1_MODE_Msk
#define SAI_xCR1_MODE_0 (0x1U << SAI_xCR1_MODE_Pos)
#define SAI_xCR1_MODE_1 (0x2U << SAI_xCR1_MODE_Pos)
#define SAI_xCR1_PRTCFG_Pos (2U)
#define SAI_xCR1_PRTCFG_Msk (0x3UL << SAI_xCR1_PRTCFG_Pos)
#define SAI_xCR1_PRTCFG SAI_xCR1_PRTCFG_Msk
#define SAI_xCR1_PRTCFG_0 (0x1U << SAI_xCR1_PRTCFG_Pos)
#define SAI_xCR1_PRTCFG_1 (0x2U << SAI_xCR1_PRTCFG_Pos)
#define SAI_xCR1_DS_Pos (5U)
#define SAI_xCR1_DS_Msk (0x7UL << SAI_xCR1_DS_Pos)
#define SAI_xCR1_DS SAI_xCR1_DS_Msk
#define SAI_xCR1_DS_0 (0x1U << SAI_xCR1_DS_Pos)
#define SAI_xCR1_DS_1 (0x2U << SAI_xCR1_DS_Pos)
#define SAI_xCR1_DS_2 (0x4U << SAI_xCR1_DS_Pos)
#define SAI_xCR1_LSBFIRST_Pos (8U)
#define SAI_xCR1_LSBFIRST_Msk (0x1UL << SAI_xCR1_LSBFIRST_Pos)
#define SAI_xCR1_LSBFIRST SAI_xCR1_LSBFIRST_Msk
#define SAI_xCR1_CKSTR_Pos (9U)
#define SAI_xCR1_CKSTR_Msk (0x1UL << SAI_xCR1_CKSTR_Pos)
#define SAI_xCR1_CKSTR SAI_xCR1_CKSTR_Msk
#define SAI_xCR1_SYNCEN_Pos (10U)
#define SAI_xCR1_SYNCEN_Msk (0x3UL << SAI_xCR1_SYNCEN_Pos)
#define SAI_xCR1_SYNCEN SAI_xCR1_SYNCEN_Msk
#define SAI_xCR1_SYNCEN_0 (0x1U << SAI_xCR1_SYNCEN_Pos)
#define SAI_xCR1_SYNCEN_1 (0x2U << SAI_xCR1_SYNCEN_Pos)
#define SAI_xCR1_MONO_Pos (12U)
#define SAI_xCR1_MONO_Msk (0x1UL << SAI_xCR1_MONO_Pos)
#define SAI_xCR1_MONO SAI_xCR1_MONO_Msk
#define SAI_xCR1_OUTDRIV_Pos (13U)
#define SAI_xCR1_OUTDRIV_Msk (0x1UL << SAI_xCR1_OUTDRIV_Pos)
#define SAI_xCR1_OUTDRIV SAI_xCR1_OUTDRIV_Msk
#define SAI_xCR1_SAIEN_Pos (16U)
#define SAI_xCR1_SAIEN_Msk (0x1UL << SAI_xCR1_SAIEN_Pos)
#define SAI_xCR1_SAIEN SAI_xCR1_SAIEN_Msk
#define SAI_xCR1_DMAEN_Pos (17U)
#define SAI_xCR1_DMAEN_Msk (0x1UL << SAI_xCR1_DMAEN_Pos)
#define SAI_xCR1_DMAEN SAI_xCR1_DMAEN_Msk
#define SAI_xCR1_NODIV_Pos (19U)
#define SAI_xCR1_NODIV_Msk (0x1UL << SAI_xCR1_NODIV_Pos)
#define SAI_xCR1_NODIV SAI_xCR1_NODIV_Msk
#define SAI_xCR1_MCKDIV_Pos (20U)
#define SAI_xCR1_MCKDIV_Msk (0x3FUL << SAI_xCR1_MCKDIV_Pos)
#define SAI_xCR1_MCKDIV SAI_xCR1_MCKDIV_Msk
#define SAI_xCR1_MCKDIV_0 (0x01U << SAI_xCR1_MCKDIV_Pos)
#define SAI_xCR1_MCKDIV_1 (0x02U << SAI_xCR1_MCKDIV_Pos)
#define SAI_xCR1_MCKDIV_2 (0x04U << SAI_xCR1_MCKDIV_Pos)
#define SAI_xCR1_MCKDIV_3 (0x08U << SAI_xCR1_MCKDIV_Pos)
#define SAI_xCR1_MCKDIV_4 (0x10U << SAI_xCR1_MCKDIV_Pos)
#define SAI_xCR1_MCKDIV_5 (0x20U << SAI_xCR1_MCKDIV_Pos)
#define SAI_xCR1_OSR_Pos (26U)
#define SAI_xCR1_OSR_Msk (0x1UL << SAI_xCR1_OSR_Pos)
#define SAI_xCR1_OSR SAI_xCR1_OSR_Msk
#define SAI_xCR1_MCKEN_Pos (27U)
#define SAI_xCR1_MCKEN_Msk (0x1UL << SAI_xCR1_MCKEN_Pos)
#define SAI_xCR1_MCKEN SAI_xCR1_MCKEN_Msk
#define SAI_xCR2_FTH_Pos (0U)
#define SAI_xCR2_FTH_Msk (0x7UL << SAI_xCR2_FTH_Pos)
#define SAI_xCR2_FTH SAI_xCR2_FTH_Msk
#define SAI_xCR2_FTH_0 (0x1U << SAI_xCR2_FTH_Pos)
#define SAI_xCR2_FTH_1 (0x2U << SAI_xCR2_FTH_Pos)
#define SAI_xCR2_FTH_2 (0x4U << SAI_xCR2_FTH_Pos)
#define SAI_xCR2_FFLUSH_Pos (3U)
#define SAI_xCR2_FFLUSH_Msk (0x1UL << SAI_xCR2_FFLUSH_Pos)
#define SAI_xCR2_FFLUSH SAI_xCR2_FFLUSH_Msk
#define SAI_xCR2_TRIS_Pos (4U)
#define SAI_xCR2_TRIS_Msk (0x1UL << SAI_xCR2_TRIS_Pos)
#define SAI_xCR2_TRIS SAI_xCR2_TRIS_Msk
#define SAI_xCR2_MUTE_Pos (5U)
#define SAI_xCR2_MUTE_Msk (0x1UL << SAI_xCR2_MUTE_Pos)
#define SAI_xCR2_MUTE SAI_xCR2_MUTE_Msk
#define SAI_xCR2_MUTEVAL_Pos (6U)
#define SAI_xCR2_MUTEVAL_Msk (0x1UL << SAI_xCR2_MUTEVAL_Pos)
#define SAI_xCR2_MUTEVAL SAI_xCR2_MUTEVAL_Msk
#define SAI_xCR2_MUTECNT_Pos (7U)
#define SAI_xCR2_MUTECNT_Msk (0x3FUL << SAI_xCR2_MUTECNT_Pos)
#define SAI_xCR2_MUTECNT SAI_xCR2_MUTECNT_Msk
#define SAI_xCR2_MUTECNT_0 (0x01U << SAI_xCR2_MUTECNT_Pos)
#define SAI_xCR2_MUTECNT_1 (0x02U << SAI_xCR2_MUTECNT_Pos)
#define SAI_xCR2_MUTECNT_2 (0x04U << SAI_xCR2_MUTECNT_Pos)
#define SAI_xCR2_MUTECNT_3 (0x08U << SAI_xCR2_MUTECNT_Pos)
#define SAI_xCR2_MUTECNT_4 (0x10U << SAI_xCR2_MUTECNT_Pos)
#define SAI_xCR2_MUTECNT_5 (0x20U << SAI_xCR2_MUTECNT_Pos)
#define SAI_xCR2_CPL_Pos (13U)
#define SAI_xCR2_CPL_Msk (0x1UL << SAI_xCR2_CPL_Pos)
#define SAI_xCR2_CPL SAI_xCR2_CPL_Msk
#define SAI_xCR2_COMP_Pos (14U)
#define SAI_xCR2_COMP_Msk (0x3UL << SAI_xCR2_COMP_Pos)
#define SAI_xCR2_COMP SAI_xCR2_COMP_Msk
#define SAI_xCR2_COMP_0 (0x1U << SAI_xCR2_COMP_Pos)
#define SAI_xCR2_COMP_1 (0x2U << SAI_xCR2_COMP_Pos)
#define SAI_xFRCR_FRL_Pos (0U)
#define SAI_xFRCR_FRL_Msk (0xFFUL << SAI_xFRCR_FRL_Pos)
#define SAI_xFRCR_FRL SAI_xFRCR_FRL_Msk
#define SAI_xFRCR_FRL_0 (0x01U << SAI_xFRCR_FRL_Pos)
#define SAI_xFRCR_FRL_1 (0x02U << SAI_xFRCR_FRL_Pos)
#define SAI_xFRCR_FRL_2 (0x04U << SAI_xFRCR_FRL_Pos)
#define SAI_xFRCR_FRL_3 (0x08U << SAI_xFRCR_FRL_Pos)
#define SAI_xFRCR_FRL_4 (0x10U << SAI_xFRCR_FRL_Pos)
#define SAI_xFRCR_FRL_5 (0x20U << SAI_xFRCR_FRL_Pos)
#define SAI_xFRCR_FRL_6 (0x40U << SAI_xFRCR_FRL_Pos)
#define SAI_xFRCR_FRL_7 (0x80U << SAI_xFRCR_FRL_Pos)
#define SAI_xFRCR_FSALL_Pos (8U)
#define SAI_xFRCR_FSALL_Msk (0x7FUL << SAI_xFRCR_FSALL_Pos)
#define SAI_xFRCR_FSALL SAI_xFRCR_FSALL_Msk
#define SAI_xFRCR_FSALL_0 (0x01U << SAI_xFRCR_FSALL_Pos)
#define SAI_xFRCR_FSALL_1 (0x02U << SAI_xFRCR_FSALL_Pos)
#define SAI_xFRCR_FSALL_2 (0x04U << SAI_xFRCR_FSALL_Pos)
#define SAI_xFRCR_FSALL_3 (0x08U << SAI_xFRCR_FSALL_Pos)
#define SAI_xFRCR_FSALL_4 (0x10U << SAI_xFRCR_FSALL_Pos)
#define SAI_xFRCR_FSALL_5 (0x20U << SAI_xFRCR_FSALL_Pos)
#define SAI_xFRCR_FSALL_6 (0x40U << SAI_xFRCR_FSALL_Pos)
#define SAI_xFRCR_FSDEF_Pos (16U)
#define SAI_xFRCR_FSDEF_Msk (0x1UL << SAI_xFRCR_FSDEF_Pos)
#define SAI_xFRCR_FSDEF SAI_xFRCR_FSDEF_Msk
#define SAI_xFRCR_FSPOL_Pos (17U)
#define SAI_xFRCR_FSPOL_Msk (0x1UL << SAI_xFRCR_FSPOL_Pos)
#define SAI_xFRCR_FSPOL SAI_xFRCR_FSPOL_Msk
#define SAI_xFRCR_FSOFF_Pos (18U)
#define SAI_xFRCR_FSOFF_Msk (0x1UL << SAI_xFRCR_FSOFF_Pos)
#define SAI_xFRCR_FSOFF SAI_xFRCR_FSOFF_Msk
#define SAI_xSLOTR_FBOFF_Pos (0U)
#define SAI_xSLOTR_FBOFF_Msk (0x1FUL << SAI_xSLOTR_FBOFF_Pos)
#define SAI_xSLOTR_FBOFF SAI_xSLOTR_FBOFF_Msk
#define SAI_xSLOTR_FBOFF_0 (0x01U << SAI_xSLOTR_FBOFF_Pos)
#define SAI_xSLOTR_FBOFF_1 (0x02U << SAI_xSLOTR_FBOFF_Pos)
#define SAI_xSLOTR_FBOFF_2 (0x04U << SAI_xSLOTR_FBOFF_Pos)
#define SAI_xSLOTR_FBOFF_3 (0x08U << SAI_xSLOTR_FBOFF_Pos)
#define SAI_xSLOTR_FBOFF_4 (0x10U << SAI_xSLOTR_FBOFF_Pos)
#define SAI_xSLOTR_SLOTSZ_Pos (6U)
#define SAI_xSLOTR_SLOTSZ_Msk (0x3UL << SAI_xSLOTR_SLOTSZ_Pos)
#define SAI_xSLOTR_SLOTSZ SAI_xSLOTR_SLOTSZ_Msk
#define SAI_xSLOTR_SLOTSZ_0 (0x1U << SAI_xSLOTR_SLOTSZ_Pos)
#define SAI_xSLOTR_SLOTSZ_1 (0x2U << SAI_xSLOTR_SLOTSZ_Pos)
#define SAI_xSLOTR_NBSLOT_Pos (8U)
#define SAI_xSLOTR_NBSLOT_Msk (0xFUL << SAI_xSLOTR_NBSLOT_Pos)
#define SAI_xSLOTR_NBSLOT SAI_xSLOTR_NBSLOT_Msk
#define SAI_xSLOTR_NBSLOT_0 (0x1U << SAI_xSLOTR_NBSLOT_Pos)
#define SAI_xSLOTR_NBSLOT_1 (0x2U << SAI_xSLOTR_NBSLOT_Pos)
#define SAI_xSLOTR_NBSLOT_2 (0x4U << SAI_xSLOTR_NBSLOT_Pos)
#define SAI_xSLOTR_NBSLOT_3 (0x8U << SAI_xSLOTR_NBSLOT_Pos)
#define SAI_xSLOTR_SLOTEN_Pos (16U)
#define SAI_xSLOTR_SLOTEN_Msk (0xFFFFUL << SAI_xSLOTR_SLOTEN_Pos)
#define SAI_xSLOTR_SLOTEN SAI_xSLOTR_SLOTEN_Msk
#define SAI_xIMR_OVRUDRIE_Pos (0U)
#define SAI_xIMR_OVRUDRIE_Msk (0x1UL << SAI_xIMR_OVRUDRIE_Pos)
#define SAI_xIMR_OVRUDRIE SAI_xIMR_OVRUDRIE_Msk
#define SAI_xIMR_MUTEDETIE_Pos (1U)
#define SAI_xIMR_MUTEDETIE_Msk (0x1UL << SAI_xIMR_MUTEDETIE_Pos)
#define SAI_xIMR_MUTEDETIE SAI_xIMR_MUTEDETIE_Msk
#define SAI_xIMR_WCKCFGIE_Pos (2U)
#define SAI_xIMR_WCKCFGIE_Msk (0x1UL << SAI_xIMR_WCKCFGIE_Pos)
#define SAI_xIMR_WCKCFGIE SAI_xIMR_WCKCFGIE_Msk
#define SAI_xIMR_FREQIE_Pos (3U)
#define SAI_xIMR_FREQIE_Msk (0x1UL << SAI_xIMR_FREQIE_Pos)
#define SAI_xIMR_FREQIE SAI_xIMR_FREQIE_Msk
#define SAI_xIMR_CNRDYIE_Pos (4U)
#define SAI_xIMR_CNRDYIE_Msk (0x1UL << SAI_xIMR_CNRDYIE_Pos)
#define SAI_xIMR_CNRDYIE SAI_xIMR_CNRDYIE_Msk
#define SAI_xIMR_AFSDETIE_Pos (5U)
#define SAI_xIMR_AFSDETIE_Msk (0x1UL << SAI_xIMR_AFSDETIE_Pos)
#define SAI_xIMR_AFSDETIE SAI_xIMR_AFSDETIE_Msk
#define SAI_xIMR_LFSDETIE_Pos (6U)
#define SAI_xIMR_LFSDETIE_Msk (0x1UL << SAI_xIMR_LFSDETIE_Pos)
#define SAI_xIMR_LFSDETIE SAI_xIMR_LFSDETIE_Msk
#define SAI_xSR_OVRUDR_Pos (0U)
#define SAI_xSR_OVRUDR_Msk (0x1UL << SAI_xSR_OVRUDR_Pos)
#define SAI_xSR_OVRUDR SAI_xSR_OVRUDR_Msk
#define SAI_xSR_MUTEDET_Pos (1U)
#define SAI_xSR_MUTEDET_Msk (0x1UL << SAI_xSR_MUTEDET_Pos)
#define SAI_xSR_MUTEDET SAI_xSR_MUTEDET_Msk
#define SAI_xSR_WCKCFG_Pos (2U)
#define SAI_xSR_WCKCFG_Msk (0x1UL << SAI_xSR_WCKCFG_Pos)
#define SAI_xSR_WCKCFG SAI_xSR_WCKCFG_Msk
#define SAI_xSR_FREQ_Pos (3U)
#define SAI_xSR_FREQ_Msk (0x1UL << SAI_xSR_FREQ_Pos)
#define SAI_xSR_FREQ SAI_xSR_FREQ_Msk
#define SAI_xSR_CNRDY_Pos (4U)
#define SAI_xSR_CNRDY_Msk (0x1UL << SAI_xSR_CNRDY_Pos)
#define SAI_xSR_CNRDY SAI_xSR_CNRDY_Msk
#define SAI_xSR_AFSDET_Pos (5U)
#define SAI_xSR_AFSDET_Msk (0x1UL << SAI_xSR_AFSDET_Pos)
#define SAI_xSR_AFSDET SAI_xSR_AFSDET_Msk
#define SAI_xSR_LFSDET_Pos (6U)
#define SAI_xSR_LFSDET_Msk (0x1UL << SAI_xSR_LFSDET_Pos)
#define SAI_xSR_LFSDET SAI_xSR_LFSDET_Msk
#define SAI_xSR_FLVL_Pos (16U)
#define SAI_xSR_FLVL_Msk (0x7UL << SAI_xSR_FLVL_Pos)
#define SAI_xSR_FLVL SAI_xSR_FLVL_Msk
#define SAI_xSR_FLVL_0 (0x1U << SAI_xSR_FLVL_Pos)
#define SAI_xSR_FLVL_1 (0x2U << SAI_xSR_FLVL_Pos)
#define SAI_xSR_FLVL_2 (0x4U << SAI_xSR_FLVL_Pos)
#define SAI_xCLRFR_COVRUDR_Pos (0U)
#define SAI_xCLRFR_COVRUDR_Msk (0x1UL << SAI_xCLRFR_COVRUDR_Pos)
#define SAI_xCLRFR_COVRUDR SAI_xCLRFR_COVRUDR_Msk
#define SAI_xCLRFR_CMUTEDET_Pos (1U)
#define SAI_xCLRFR_CMUTEDET_Msk (0x1UL << SAI_xCLRFR_CMUTEDET_Pos)
#define SAI_xCLRFR_CMUTEDET SAI_xCLRFR_CMUTEDET_Msk
#define SAI_xCLRFR_CWCKCFG_Pos (2U)
#define SAI_xCLRFR_CWCKCFG_Msk (0x1UL << SAI_xCLRFR_CWCKCFG_Pos)
#define SAI_xCLRFR_CWCKCFG SAI_xCLRFR_CWCKCFG_Msk
#define SAI_xCLRFR_CFREQ_Pos (3U)
#define SAI_xCLRFR_CFREQ_Msk (0x1UL << SAI_xCLRFR_CFREQ_Pos)
#define SAI_xCLRFR_CFREQ SAI_xCLRFR_CFREQ_Msk
#define SAI_xCLRFR_CCNRDY_Pos (4U)
#define SAI_xCLRFR_CCNRDY_Msk (0x1UL << SAI_xCLRFR_CCNRDY_Pos)
#define SAI_xCLRFR_CCNRDY SAI_xCLRFR_CCNRDY_Msk
#define SAI_xCLRFR_CAFSDET_Pos (5U)
#define SAI_xCLRFR_CAFSDET_Msk (0x1UL << SAI_xCLRFR_CAFSDET_Pos)
#define SAI_xCLRFR_CAFSDET SAI_xCLRFR_CAFSDET_Msk
#define SAI_xCLRFR_CLFSDET_Pos (6U)
#define SAI_xCLRFR_CLFSDET_Msk (0x1UL << SAI_xCLRFR_CLFSDET_Pos)
#define SAI_xCLRFR_CLFSDET SAI_xCLRFR_CLFSDET_Msk
#define SAI_xDR_DATA_Pos (0U)
#define SAI_xDR_DATA_Msk (0xFFFFFFFFUL << SAI_xDR_DATA_Pos)
#define SAI_xDR_DATA SAI_xDR_DATA_Msk
#define SAI_PDMCR_PDMEN_Pos (0U)
#define SAI_PDMCR_PDMEN_Msk (0x1UL << SAI_PDMCR_PDMEN_Pos)
#define SAI_PDMCR_PDMEN SAI_PDMCR_PDMEN_Msk
#define SAI_PDMCR_MICNBR_Pos (4U)
#define SAI_PDMCR_MICNBR_Msk (0x3UL << SAI_PDMCR_MICNBR_Pos)
#define SAI_PDMCR_MICNBR SAI_PDMCR_MICNBR_Msk
#define SAI_PDMCR_MICNBR_0 (0x1U << SAI_PDMCR_MICNBR_Pos)
#define SAI_PDMCR_MICNBR_1 (0x2U << SAI_PDMCR_MICNBR_Pos)
#define SAI_PDMCR_CKEN1_Pos (8U)
#define SAI_PDMCR_CKEN1_Msk (0x1UL << SAI_PDMCR_CKEN1_Pos)
#define SAI_PDMCR_CKEN1 SAI_PDMCR_CKEN1_Msk
#define SAI_PDMCR_CKEN2_Pos (9U)
#define SAI_PDMCR_CKEN2_Msk (0x1UL << SAI_PDMCR_CKEN2_Pos)
#define SAI_PDMCR_CKEN2 SAI_PDMCR_CKEN2_Msk
#define SAI_PDMCR_CKEN3_Pos (10U)
#define SAI_PDMCR_CKEN3_Msk (0x1UL << SAI_PDMCR_CKEN3_Pos)
#define SAI_PDMCR_CKEN3 SAI_PDMCR_CKEN3_Msk
#define SAI_PDMCR_CKEN4_Pos (11U)
#define SAI_PDMCR_CKEN4_Msk (0x1UL << SAI_PDMCR_CKEN4_Pos)
#define SAI_PDMCR_CKEN4 SAI_PDMCR_CKEN4_Msk
#define SAI_PDMDLY_DLYM1L_Pos (0U)
#define SAI_PDMDLY_DLYM1L_Msk (0x7UL << SAI_PDMDLY_DLYM1L_Pos)
#define SAI_PDMDLY_DLYM1L SAI_PDMDLY_DLYM1L_Msk
#define SAI_PDMDLY_DLYM1L_0 (0x1U << SAI_PDMDLY_DLYM1L_Pos)
#define SAI_PDMDLY_DLYM1L_1 (0x2U << SAI_PDMDLY_DLYM1L_Pos)
#define SAI_PDMDLY_DLYM1L_2 (0x4U << SAI_PDMDLY_DLYM1L_Pos)
#define SAI_PDMDLY_DLYM1R_Pos (4U)
#define SAI_PDMDLY_DLYM1R_Msk (0x7UL << SAI_PDMDLY_DLYM1R_Pos)
#define SAI_PDMDLY_DLYM1R SAI_PDMDLY_DLYM1R_Msk
#define SAI_PDMDLY_DLYM1R_0 (0x1U << SAI_PDMDLY_DLYM1R_Pos)
#define SAI_PDMDLY_DLYM1R_1 (0x2U << SAI_PDMDLY_DLYM1R_Pos)
#define SAI_PDMDLY_DLYM1R_2 (0x4U << SAI_PDMDLY_DLYM1R_Pos)
#define SAI_PDMDLY_DLYM2L_Pos (8U)
#define SAI_PDMDLY_DLYM2L_Msk (0x7UL << SAI_PDMDLY_DLYM2L_Pos)
#define SAI_PDMDLY_DLYM2L SAI_PDMDLY_DLYM2L_Msk
#define SAI_PDMDLY_DLYM2L_0 (0x1U << SAI_PDMDLY_DLYM2L_Pos)
#define SAI_PDMDLY_DLYM2L_1 (0x2U << SAI_PDMDLY_DLYM2L_Pos)
#define SAI_PDMDLY_DLYM2L_2 (0x4U << SAI_PDMDLY_DLYM2L_Pos)
#define SAI_PDMDLY_DLYM2R_Pos (12U)
#define SAI_PDMDLY_DLYM2R_Msk (0x7UL << SAI_PDMDLY_DLYM2R_Pos)
#define SAI_PDMDLY_DLYM2R SAI_PDMDLY_DLYM2R_Msk
#define SAI_PDMDLY_DLYM2R_0 (0x1U << SAI_PDMDLY_DLYM2R_Pos)
#define SAI_PDMDLY_DLYM2R_1 (0x2U << SAI_PDMDLY_DLYM2R_Pos)
#define SAI_PDMDLY_DLYM2R_2 (0x4U << SAI_PDMDLY_DLYM2R_Pos)
#define SAI_PDMDLY_DLYM3L_Pos (16U)
#define SAI_PDMDLY_DLYM3L_Msk (0x7UL << SAI_PDMDLY_DLYM3L_Pos)
#define SAI_PDMDLY_DLYM3L SAI_PDMDLY_DLYM3L_Msk
#define SAI_PDMDLY_DLYM3L_0 (0x1U << SAI_PDMDLY_DLYM3L_Pos)
#define SAI_PDMDLY_DLYM3L_1 (0x2U << SAI_PDMDLY_DLYM3L_Pos)
#define SAI_PDMDLY_DLYM3L_2 (0x4U << SAI_PDMDLY_DLYM3L_Pos)
#define SAI_PDMDLY_DLYM3R_Pos (20U)
#define SAI_PDMDLY_DLYM3R_Msk (0x7UL << SAI_PDMDLY_DLYM3R_Pos)
#define SAI_PDMDLY_DLYM3R SAI_PDMDLY_DLYM3R_Msk
#define SAI_PDMDLY_DLYM3R_0 (0x1U << SAI_PDMDLY_DLYM3R_Pos)
#define SAI_PDMDLY_DLYM3R_1 (0x2U << SAI_PDMDLY_DLYM3R_Pos)
#define SAI_PDMDLY_DLYM3R_2 (0x4U << SAI_PDMDLY_DLYM3R_Pos)
#define SAI_PDMDLY_DLYM4L_Pos (24U)
#define SAI_PDMDLY_DLYM4L_Msk (0x7UL << SAI_PDMDLY_DLYM4L_Pos)
#define SAI_PDMDLY_DLYM4L SAI_PDMDLY_DLYM4L_Msk
#define SAI_PDMDLY_DLYM4L_0 (0x1U << SAI_PDMDLY_DLYM4L_Pos)
#define SAI_PDMDLY_DLYM4L_1 (0x2U << SAI_PDMDLY_DLYM4L_Pos)
#define SAI_PDMDLY_DLYM4L_2 (0x4U << SAI_PDMDLY_DLYM4L_Pos)
#define SAI_PDMDLY_DLYM4R_Pos (28U)
#define SAI_PDMDLY_DLYM4R_Msk (0x7UL << SAI_PDMDLY_DLYM4R_Pos)
#define SAI_PDMDLY_DLYM4R SAI_PDMDLY_DLYM4R_Msk
#define SAI_PDMDLY_DLYM4R_0 (0x1U << SAI_PDMDLY_DLYM4R_Pos)
#define SAI_PDMDLY_DLYM4R_1 (0x2U << SAI_PDMDLY_DLYM4R_Pos)
#define SAI_PDMDLY_DLYM4R_2 (0x4U << SAI_PDMDLY_DLYM4R_Pos)
#define SYSCFG_MEMRMP_MEM_MODE_Pos (0U)
#define SYSCFG_MEMRMP_MEM_MODE_Msk (0x7UL << SYSCFG_MEMRMP_MEM_MODE_Pos)
#define SYSCFG_MEMRMP_MEM_MODE SYSCFG_MEMRMP_MEM_MODE_Msk
#define SYSCFG_MEMRMP_MEM_MODE_0 (0x1U << SYSCFG_MEMRMP_MEM_MODE_Pos)
#define SYSCFG_MEMRMP_MEM_MODE_1 (0x2U << SYSCFG_MEMRMP_MEM_MODE_Pos)
#define SYSCFG_MEMRMP_MEM_MODE_2 (0x4U << SYSCFG_MEMRMP_MEM_MODE_Pos)
#define SYSCFG_CFGR1_BOOSTEN_Pos (8U)
#define SYSCFG_CFGR1_BOOSTEN_Msk (0x1UL << SYSCFG_CFGR1_BOOSTEN_Pos)
#define SYSCFG_CFGR1_BOOSTEN SYSCFG_CFGR1_BOOSTEN_Msk
#define SYSCFG_CFGR1_ANASWVDD_Pos (9U)
#define SYSCFG_CFGR1_ANASWVDD_Msk (0x1UL << SYSCFG_CFGR1_ANASWVDD_Pos)
#define SYSCFG_CFGR1_ANASWVDD SYSCFG_CFGR1_ANASWVDD_Msk
#define SYSCFG_CFGR1_I2C_PB6_FMP_Pos (16U)
#define SYSCFG_CFGR1_I2C_PB6_FMP_Msk (0x1UL << SYSCFG_CFGR1_I2C_PB6_FMP_Pos)
#define SYSCFG_CFGR1_I2C_PB6_FMP SYSCFG_CFGR1_I2C_PB6_FMP_Msk
#define SYSCFG_CFGR1_I2C_PB7_FMP_Pos (17U)
#define SYSCFG_CFGR1_I2C_PB7_FMP_Msk (0x1UL << SYSCFG_CFGR1_I2C_PB7_FMP_Pos)
#define SYSCFG_CFGR1_I2C_PB7_FMP SYSCFG_CFGR1_I2C_PB7_FMP_Msk
#define SYSCFG_CFGR1_I2C_PB8_FMP_Pos (18U)
#define SYSCFG_CFGR1_I2C_PB8_FMP_Msk (0x1UL << SYSCFG_CFGR1_I2C_PB8_FMP_Pos)
#define SYSCFG_CFGR1_I2C_PB8_FMP SYSCFG_CFGR1_I2C_PB8_FMP_Msk
#define SYSCFG_CFGR1_I2C_PB9_FMP_Pos (19U)
#define SYSCFG_CFGR1_I2C_PB9_FMP_Msk (0x1UL << SYSCFG_CFGR1_I2C_PB9_FMP_Pos)
#define SYSCFG_CFGR1_I2C_PB9_FMP SYSCFG_CFGR1_I2C_PB9_FMP_Msk
#define SYSCFG_CFGR1_I2C1_FMP_Pos (20U)
#define SYSCFG_CFGR1_I2C1_FMP_Msk (0x1UL << SYSCFG_CFGR1_I2C1_FMP_Pos)
#define SYSCFG_CFGR1_I2C1_FMP SYSCFG_CFGR1_I2C1_FMP_Msk
#define SYSCFG_CFGR1_I2C3_FMP_Pos (22U)
#define SYSCFG_CFGR1_I2C3_FMP_Msk (0x1UL << SYSCFG_CFGR1_I2C3_FMP_Pos)
#define SYSCFG_CFGR1_I2C3_FMP SYSCFG_CFGR1_I2C3_FMP_Msk
#define SYSCFG_CFGR1_FPU_IE_Pos (26U)
#define SYSCFG_CFGR1_FPU_IE_Msk (0x3FUL << SYSCFG_CFGR1_FPU_IE_Pos)
#define SYSCFG_CFGR1_FPU_IE SYSCFG_CFGR1_FPU_IE_Msk
#define SYSCFG_CFGR1_FPU_IE_0 (0x01U << SYSCFG_CFGR1_FPU_IE_Pos)
#define SYSCFG_CFGR1_FPU_IE_1 (0x02U << SYSCFG_CFGR1_FPU_IE_Pos)
#define SYSCFG_CFGR1_FPU_IE_2 (0x04U << SYSCFG_CFGR1_FPU_IE_Pos)
#define SYSCFG_CFGR1_FPU_IE_3 (0x08U << SYSCFG_CFGR1_FPU_IE_Pos)
#define SYSCFG_CFGR1_FPU_IE_4 (0x10U << SYSCFG_CFGR1_FPU_IE_Pos)
#define SYSCFG_CFGR1_FPU_IE_5 (0x20U << SYSCFG_CFGR1_FPU_IE_Pos)
#define SYSCFG_EXTICR1_EXTI0_Pos (0U)
#define SYSCFG_EXTICR1_EXTI0_Msk (0x7UL << SYSCFG_EXTICR1_EXTI0_Pos)
#define SYSCFG_EXTICR1_EXTI0 SYSCFG_EXTICR1_EXTI0_Msk
#define SYSCFG_EXTICR1_EXTI1_Pos (4U)
#define SYSCFG_EXTICR1_EXTI1_Msk (0x7UL << SYSCFG_EXTICR1_EXTI1_Pos)
#define SYSCFG_EXTICR1_EXTI1 SYSCFG_EXTICR1_EXTI1_Msk
#define SYSCFG_EXTICR1_EXTI2_Pos (8U)
#define SYSCFG_EXTICR1_EXTI2_Msk (0x7UL << SYSCFG_EXTICR1_EXTI2_Pos)
#define SYSCFG_EXTICR1_EXTI2 SYSCFG_EXTICR1_EXTI2_Msk
#define SYSCFG_EXTICR1_EXTI3_Pos (12U)
#define SYSCFG_EXTICR1_EXTI3_Msk (0x7UL << SYSCFG_EXTICR1_EXTI3_Pos)
#define SYSCFG_EXTICR1_EXTI3 SYSCFG_EXTICR1_EXTI3_Msk
#define SYSCFG_EXTICR1_EXTI0_PA (0x00000000UL)
#define SYSCFG_EXTICR1_EXTI0_PB (0x00000001UL)
#define SYSCFG_EXTICR1_EXTI0_PC (0x00000002UL)
#define SYSCFG_EXTICR1_EXTI0_PD (0x00000003UL)
#define SYSCFG_EXTICR1_EXTI0_PE (0x00000004UL)
#define SYSCFG_EXTICR1_EXTI0_PH (0x00000007UL)
#define SYSCFG_EXTICR1_EXTI1_PA (0x00000000UL)
#define SYSCFG_EXTICR1_EXTI1_PB (0x00000010UL)
#define SYSCFG_EXTICR1_EXTI1_PC (0x00000020UL)
#define SYSCFG_EXTICR1_EXTI1_PD (0x00000030UL)
#define SYSCFG_EXTICR1_EXTI1_PE (0x00000040UL)
#define SYSCFG_EXTICR1_EXTI1_PH (0x00000070UL)
#define SYSCFG_EXTICR1_EXTI2_PA (0x00000000UL)
#define SYSCFG_EXTICR1_EXTI2_PB (0x00000100UL)
#define SYSCFG_EXTICR1_EXTI2_PC (0x00000200UL)
#define SYSCFG_EXTICR1_EXTI2_PD (0x00000300UL)
#define SYSCFG_EXTICR1_EXTI2_PE (0x00000400UL)
#define SYSCFG_EXTICR1_EXTI3_PA (0x00000000UL)
#define SYSCFG_EXTICR1_EXTI3_PB (0x00001000UL)
#define SYSCFG_EXTICR1_EXTI3_PC (0x00002000UL)
#define SYSCFG_EXTICR1_EXTI3_PD (0x00003000UL)
#define SYSCFG_EXTICR1_EXTI3_PE (0x00004000UL)
#define SYSCFG_EXTICR1_EXTI3_PH (0x00007000UL)
#define SYSCFG_EXTICR2_EXTI4_Pos (0U)
#define SYSCFG_EXTICR2_EXTI4_Msk (0x7UL << SYSCFG_EXTICR2_EXTI4_Pos)
#define SYSCFG_EXTICR2_EXTI4 SYSCFG_EXTICR2_EXTI4_Msk
#define SYSCFG_EXTICR2_EXTI5_Pos (4U)
#define SYSCFG_EXTICR2_EXTI5_Msk (0x7UL << SYSCFG_EXTICR2_EXTI5_Pos)
#define SYSCFG_EXTICR2_EXTI5 SYSCFG_EXTICR2_EXTI5_Msk
#define SYSCFG_EXTICR2_EXTI6_Pos (8U)
#define SYSCFG_EXTICR2_EXTI6_Msk (0x7UL << SYSCFG_EXTICR2_EXTI6_Pos)
#define SYSCFG_EXTICR2_EXTI6 SYSCFG_EXTICR2_EXTI6_Msk
#define SYSCFG_EXTICR2_EXTI7_Pos (12U)
#define SYSCFG_EXTICR2_EXTI7_Msk (0x7UL << SYSCFG_EXTICR2_EXTI7_Pos)
#define SYSCFG_EXTICR2_EXTI7 SYSCFG_EXTICR2_EXTI7_Msk
#define SYSCFG_EXTICR2_EXTI4_PA (0x00000000UL)
#define SYSCFG_EXTICR2_EXTI4_PB (0x00000001UL)
#define SYSCFG_EXTICR2_EXTI4_PC (0x00000002UL)
#define SYSCFG_EXTICR2_EXTI4_PD (0x00000003UL)
#define SYSCFG_EXTICR2_EXTI4_PE (0x00000004UL)
#define SYSCFG_EXTICR2_EXTI5_PA (0x00000000UL)
#define SYSCFG_EXTICR2_EXTI5_PB (0x00000010UL)
#define SYSCFG_EXTICR2_EXTI5_PC (0x00000020UL)
#define SYSCFG_EXTICR2_EXTI5_PD (0x00000030UL)
#define SYSCFG_EXTICR2_EXTI6_PA (0x00000000UL)
#define SYSCFG_EXTICR2_EXTI6_PB (0x00000100UL)
#define SYSCFG_EXTICR2_EXTI6_PC (0x00000200UL)
#define SYSCFG_EXTICR2_EXTI6_PD (0x00000300UL)
#define SYSCFG_EXTICR2_EXTI7_PA (0x00000000UL)
#define SYSCFG_EXTICR2_EXTI7_PB (0x00001000UL)
#define SYSCFG_EXTICR2_EXTI7_PC (0x00002000UL)
#define SYSCFG_EXTICR2_EXTI7_PD (0x00003000UL)
#define SYSCFG_EXTICR3_EXTI8_Pos (0U)
#define SYSCFG_EXTICR3_EXTI8_Msk (0x7UL << SYSCFG_EXTICR3_EXTI8_Pos)
#define SYSCFG_EXTICR3_EXTI8 SYSCFG_EXTICR3_EXTI8_Msk
#define SYSCFG_EXTICR3_EXTI9_Pos (4U)
#define SYSCFG_EXTICR3_EXTI9_Msk (0x7UL << SYSCFG_EXTICR3_EXTI9_Pos)
#define SYSCFG_EXTICR3_EXTI9 SYSCFG_EXTICR3_EXTI9_Msk
#define SYSCFG_EXTICR3_EXTI10_Pos (8U)
#define SYSCFG_EXTICR3_EXTI10_Msk (0x7UL << SYSCFG_EXTICR3_EXTI10_Pos)
#define SYSCFG_EXTICR3_EXTI10 SYSCFG_EXTICR3_EXTI10_Msk
#define SYSCFG_EXTICR3_EXTI11_Pos (12U)
#define SYSCFG_EXTICR3_EXTI11_Msk (0xFUL << SYSCFG_EXTICR3_EXTI11_Pos)
#define SYSCFG_EXTICR3_EXTI11 SYSCFG_EXTICR3_EXTI11_Msk
#define SYSCFG_EXTICR3_EXTI8_PA (0x00000000UL)
#define SYSCFG_EXTICR3_EXTI8_PB (0x00000001UL)
#define SYSCFG_EXTICR3_EXTI8_PC (0x00000002UL)
#define SYSCFG_EXTICR3_EXTI8_PD (0x00000003UL)
#define SYSCFG_EXTICR3_EXTI9_PA (0x00000000UL)
#define SYSCFG_EXTICR3_EXTI9_PB (0x00000010UL)
#define SYSCFG_EXTICR3_EXTI9_PC (0x00000020UL)
#define SYSCFG_EXTICR3_EXTI9_PD (0x00000030UL)
#define SYSCFG_EXTICR3_EXTI10_PA (0x00000000UL)
#define SYSCFG_EXTICR3_EXTI10_PB (0x00000100UL)
#define SYSCFG_EXTICR3_EXTI10_PC (0x00000200UL)
#define SYSCFG_EXTICR3_EXTI10_PD (0x00000300UL)
#define SYSCFG_EXTICR3_EXTI11_PA (0x00000000UL)
#define SYSCFG_EXTICR3_EXTI11_PB (0x00001000UL)
#define SYSCFG_EXTICR3_EXTI11_PC (0x00002000UL)
#define SYSCFG_EXTICR3_EXTI11_PD (0x00003000UL)
#define SYSCFG_EXTICR4_EXTI12_Pos (0U)
#define SYSCFG_EXTICR4_EXTI12_Msk (0x7UL << SYSCFG_EXTICR4_EXTI12_Pos)
#define SYSCFG_EXTICR4_EXTI12 SYSCFG_EXTICR4_EXTI12_Msk
#define SYSCFG_EXTICR4_EXTI13_Pos (4U)
#define SYSCFG_EXTICR4_EXTI13_Msk (0x7UL << SYSCFG_EXTICR4_EXTI13_Pos)
#define SYSCFG_EXTICR4_EXTI13 SYSCFG_EXTICR4_EXTI13_Msk
#define SYSCFG_EXTICR4_EXTI14_Pos (8U)
#define SYSCFG_EXTICR4_EXTI14_Msk (0x7UL << SYSCFG_EXTICR4_EXTI14_Pos)
#define SYSCFG_EXTICR4_EXTI14 SYSCFG_EXTICR4_EXTI14_Msk
#define SYSCFG_EXTICR4_EXTI15_Pos (12U)
#define SYSCFG_EXTICR4_EXTI15_Msk (0x7UL << SYSCFG_EXTICR4_EXTI15_Pos)
#define SYSCFG_EXTICR4_EXTI15 SYSCFG_EXTICR4_EXTI15_Msk
#define SYSCFG_EXTICR4_EXTI12_PA (0x00000000UL)
#define SYSCFG_EXTICR4_EXTI12_PB (0x00000001UL)
#define SYSCFG_EXTICR4_EXTI12_PC (0x00000002UL)
#define SYSCFG_EXTICR4_EXTI12_PD (0x00000003UL)
#define SYSCFG_EXTICR4_EXTI13_PA (0x00000000UL)
#define SYSCFG_EXTICR4_EXTI13_PB (0x00000010UL)
#define SYSCFG_EXTICR4_EXTI13_PC (0x00000020UL)
#define SYSCFG_EXTICR4_EXTI13_PD (0x00000030UL)
#define SYSCFG_EXTICR4_EXTI14_PA (0x00000000UL)
#define SYSCFG_EXTICR4_EXTI14_PB (0x00000100UL)
#define SYSCFG_EXTICR4_EXTI14_PC (0x00000200UL)
#define SYSCFG_EXTICR4_EXTI14_PD (0x00000300UL)
#define SYSCFG_EXTICR4_EXTI15_PA (0x00000000UL)
#define SYSCFG_EXTICR4_EXTI15_PB (0x00001000UL)
#define SYSCFG_EXTICR4_EXTI15_PC (0x00002000UL)
#define SYSCFG_EXTICR4_EXTI15_PD (0x00003000UL)
#define SYSCFG_SCSR_SRAM2ER_Pos (0U)
#define SYSCFG_SCSR_SRAM2ER_Msk (0x1UL << SYSCFG_SCSR_SRAM2ER_Pos)
#define SYSCFG_SCSR_SRAM2ER SYSCFG_SCSR_SRAM2ER_Msk
#define SYSCFG_SCSR_SRAM2BSY_Pos (1U)
#define SYSCFG_SCSR_SRAM2BSY_Msk (0x1UL << SYSCFG_SCSR_SRAM2BSY_Pos)
#define SYSCFG_SCSR_SRAM2BSY SYSCFG_SCSR_SRAM2BSY_Msk
#define SYSCFG_SCSR_C2RFD_Pos (31U)
#define SYSCFG_SCSR_C2RFD_Msk (0x1UL << SYSCFG_SCSR_C2RFD_Pos)
#define SYSCFG_SCSR_C2RFD SYSCFG_SCSR_C2RFD_Msk
#define SYSCFG_CFGR2_CLL_Pos (0U)
#define SYSCFG_CFGR2_CLL_Msk (0x1UL << SYSCFG_CFGR2_CLL_Pos)
#define SYSCFG_CFGR2_CLL SYSCFG_CFGR2_CLL_Msk
#define SYSCFG_CFGR2_SPL_Pos (1U)
#define SYSCFG_CFGR2_SPL_Msk (0x1UL << SYSCFG_CFGR2_SPL_Pos)
#define SYSCFG_CFGR2_SPL SYSCFG_CFGR2_SPL_Msk
#define SYSCFG_CFGR2_PVDL_Pos (2U)
#define SYSCFG_CFGR2_PVDL_Msk (0x1UL << SYSCFG_CFGR2_PVDL_Pos)
#define SYSCFG_CFGR2_PVDL SYSCFG_CFGR2_PVDL_Msk
#define SYSCFG_CFGR2_ECCL_Pos (3U)
#define SYSCFG_CFGR2_ECCL_Msk (0x1UL << SYSCFG_CFGR2_ECCL_Pos)
#define SYSCFG_CFGR2_ECCL SYSCFG_CFGR2_ECCL_Msk
#define SYSCFG_CFGR2_SPF_Pos (8U)
#define SYSCFG_CFGR2_SPF_Msk (0x1UL << SYSCFG_CFGR2_SPF_Pos)
#define SYSCFG_CFGR2_SPF SYSCFG_CFGR2_SPF_Msk
#define SYSCFG_SWPR1_PAGE0_Pos (0U)
#define SYSCFG_SWPR1_PAGE0_Msk (0x1UL << SYSCFG_SWPR1_PAGE0_Pos)
#define SYSCFG_SWPR1_PAGE0 SYSCFG_SWPR1_PAGE0_Msk
#define SYSCFG_SWPR1_PAGE1_Pos (1U)
#define SYSCFG_SWPR1_PAGE1_Msk (0x1UL << SYSCFG_SWPR1_PAGE1_Pos)
#define SYSCFG_SWPR1_PAGE1 SYSCFG_SWPR1_PAGE1_Msk
#define SYSCFG_SWPR1_PAGE2_Pos (2U)
#define SYSCFG_SWPR1_PAGE2_Msk (0x1UL << SYSCFG_SWPR1_PAGE2_Pos)
#define SYSCFG_SWPR1_PAGE2 SYSCFG_SWPR1_PAGE2_Msk
#define SYSCFG_SWPR1_PAGE3_Pos (3U)
#define SYSCFG_SWPR1_PAGE3_Msk (0x1UL << SYSCFG_SWPR1_PAGE3_Pos)
#define SYSCFG_SWPR1_PAGE3 SYSCFG_SWPR1_PAGE3_Msk
#define SYSCFG_SWPR1_PAGE4_Pos (4U)
#define SYSCFG_SWPR1_PAGE4_Msk (0x1UL << SYSCFG_SWPR1_PAGE4_Pos)
#define SYSCFG_SWPR1_PAGE4 SYSCFG_SWPR1_PAGE4_Msk
#define SYSCFG_SWPR1_PAGE5_Pos (5U)
#define SYSCFG_SWPR1_PAGE5_Msk (0x1UL << SYSCFG_SWPR1_PAGE5_Pos)
#define SYSCFG_SWPR1_PAGE5 SYSCFG_SWPR1_PAGE5_Msk
#define SYSCFG_SWPR1_PAGE6_Pos (6U)
#define SYSCFG_SWPR1_PAGE6_Msk (0x1UL << SYSCFG_SWPR1_PAGE6_Pos)
#define SYSCFG_SWPR1_PAGE6 SYSCFG_SWPR1_PAGE6_Msk
#define SYSCFG_SWPR1_PAGE7_Pos (7U)
#define SYSCFG_SWPR1_PAGE7_Msk (0x1UL << SYSCFG_SWPR1_PAGE7_Pos)
#define SYSCFG_SWPR1_PAGE7 SYSCFG_SWPR1_PAGE7_Msk
#define SYSCFG_SWPR1_PAGE8_Pos (8U)
#define SYSCFG_SWPR1_PAGE8_Msk (0x1UL << SYSCFG_SWPR1_PAGE8_Pos)
#define SYSCFG_SWPR1_PAGE8 SYSCFG_SWPR1_PAGE8_Msk
#define SYSCFG_SWPR1_PAGE9_Pos (9U)
#define SYSCFG_SWPR1_PAGE9_Msk (0x1UL << SYSCFG_SWPR1_PAGE9_Pos)
#define SYSCFG_SWPR1_PAGE9 SYSCFG_SWPR1_PAGE9_Msk
#define SYSCFG_SWPR1_PAGE10_Pos (10U)
#define SYSCFG_SWPR1_PAGE10_Msk (0x1UL << SYSCFG_SWPR1_PAGE10_Pos)
#define SYSCFG_SWPR1_PAGE10 SYSCFG_SWPR1_PAGE10_Msk
#define SYSCFG_SWPR1_PAGE11_Pos (11U)
#define SYSCFG_SWPR1_PAGE11_Msk (0x1UL << SYSCFG_SWPR1_PAGE11_Pos)
#define SYSCFG_SWPR1_PAGE11 SYSCFG_SWPR1_PAGE11_Msk
#define SYSCFG_SWPR1_PAGE12_Pos (12U)
#define SYSCFG_SWPR1_PAGE12_Msk (0x1UL << SYSCFG_SWPR1_PAGE12_Pos)
#define SYSCFG_SWPR1_PAGE12 SYSCFG_SWPR1_PAGE12_Msk
#define SYSCFG_SWPR1_PAGE13_Pos (13U)
#define SYSCFG_SWPR1_PAGE13_Msk (0x1UL << SYSCFG_SWPR1_PAGE13_Pos)
#define SYSCFG_SWPR1_PAGE13 SYSCFG_SWPR1_PAGE13_Msk
#define SYSCFG_SWPR1_PAGE14_Pos (14U)
#define SYSCFG_SWPR1_PAGE14_Msk (0x1UL << SYSCFG_SWPR1_PAGE14_Pos)
#define SYSCFG_SWPR1_PAGE14 SYSCFG_SWPR1_PAGE14_Msk
#define SYSCFG_SWPR1_PAGE15_Pos (15U)
#define SYSCFG_SWPR1_PAGE15_Msk (0x1UL << SYSCFG_SWPR1_PAGE15_Pos)
#define SYSCFG_SWPR1_PAGE15 SYSCFG_SWPR1_PAGE15_Msk
#define SYSCFG_SWPR1_PAGE16_Pos (16U)
#define SYSCFG_SWPR1_PAGE16_Msk (0x1UL << SYSCFG_SWPR1_PAGE16_Pos)
#define SYSCFG_SWPR1_PAGE16 SYSCFG_SWPR1_PAGE16_Msk
#define SYSCFG_SWPR1_PAGE17_Pos (17U)
#define SYSCFG_SWPR1_PAGE17_Msk (0x1UL << SYSCFG_SWPR1_PAGE17_Pos)
#define SYSCFG_SWPR1_PAGE17 SYSCFG_SWPR1_PAGE17_Msk
#define SYSCFG_SWPR1_PAGE18_Pos (18U)
#define SYSCFG_SWPR1_PAGE18_Msk (0x1UL << SYSCFG_SWPR1_PAGE18_Pos)
#define SYSCFG_SWPR1_PAGE18 SYSCFG_SWPR1_PAGE18_Msk
#define SYSCFG_SWPR1_PAGE19_Pos (19U)
#define SYSCFG_SWPR1_PAGE19_Msk (0x1UL << SYSCFG_SWPR1_PAGE19_Pos)
#define SYSCFG_SWPR1_PAGE19 SYSCFG_SWPR1_PAGE19_Msk
#define SYSCFG_SWPR1_PAGE20_Pos (20U)
#define SYSCFG_SWPR1_PAGE20_Msk (0x1UL << SYSCFG_SWPR1_PAGE20_Pos)
#define SYSCFG_SWPR1_PAGE20 SYSCFG_SWPR1_PAGE20_Msk
#define SYSCFG_SWPR1_PAGE21_Pos (21U)
#define SYSCFG_SWPR1_PAGE21_Msk (0x1UL << SYSCFG_SWPR1_PAGE21_Pos)
#define SYSCFG_SWPR1_PAGE21 SYSCFG_SWPR1_PAGE21_Msk
#define SYSCFG_SWPR1_PAGE22_Pos (22U)
#define SYSCFG_SWPR1_PAGE22_Msk (0x1UL << SYSCFG_SWPR1_PAGE22_Pos)
#define SYSCFG_SWPR1_PAGE22 SYSCFG_SWPR1_PAGE22_Msk
#define SYSCFG_SWPR1_PAGE23_Pos (23U)
#define SYSCFG_SWPR1_PAGE23_Msk (0x1UL << SYSCFG_SWPR1_PAGE23_Pos)
#define SYSCFG_SWPR1_PAGE23 SYSCFG_SWPR1_PAGE23_Msk
#define SYSCFG_SWPR1_PAGE24_Pos (24U)
#define SYSCFG_SWPR1_PAGE24_Msk (0x1UL << SYSCFG_SWPR1_PAGE24_Pos)
#define SYSCFG_SWPR1_PAGE24 SYSCFG_SWPR1_PAGE24_Msk
#define SYSCFG_SWPR1_PAGE25_Pos (25U)
#define SYSCFG_SWPR1_PAGE25_Msk (0x1UL << SYSCFG_SWPR1_PAGE25_Pos)
#define SYSCFG_SWPR1_PAGE25 SYSCFG_SWPR1_PAGE25_Msk
#define SYSCFG_SWPR1_PAGE26_Pos (26U)
#define SYSCFG_SWPR1_PAGE26_Msk (0x1UL << SYSCFG_SWPR1_PAGE26_Pos)
#define SYSCFG_SWPR1_PAGE26 SYSCFG_SWPR1_PAGE26_Msk
#define SYSCFG_SWPR1_PAGE27_Pos (27U)
#define SYSCFG_SWPR1_PAGE27_Msk (0x1UL << SYSCFG_SWPR1_PAGE27_Pos)
#define SYSCFG_SWPR1_PAGE27 SYSCFG_SWPR1_PAGE27_Msk
#define SYSCFG_SWPR1_PAGE28_Pos (28U)
#define SYSCFG_SWPR1_PAGE28_Msk (0x1UL << SYSCFG_SWPR1_PAGE28_Pos)
#define SYSCFG_SWPR1_PAGE28 SYSCFG_SWPR1_PAGE28_Msk
#define SYSCFG_SWPR1_PAGE29_Pos (29U)
#define SYSCFG_SWPR1_PAGE29_Msk (0x1UL << SYSCFG_SWPR1_PAGE29_Pos)
#define SYSCFG_SWPR1_PAGE29 SYSCFG_SWPR1_PAGE29_Msk
#define SYSCFG_SWPR1_PAGE30_Pos (30U)
#define SYSCFG_SWPR1_PAGE30_Msk (0x1UL << SYSCFG_SWPR1_PAGE30_Pos)
#define SYSCFG_SWPR1_PAGE30 SYSCFG_SWPR1_PAGE30_Msk
#define SYSCFG_SWPR1_PAGE31_Pos (31U)
#define SYSCFG_SWPR1_PAGE31_Msk (0x1UL << SYSCFG_SWPR1_PAGE31_Pos)
#define SYSCFG_SWPR1_PAGE31 SYSCFG_SWPR1_PAGE31_Msk
#define SYSCFG_SKR_KEY_Pos (0U)
#define SYSCFG_SKR_KEY_Msk (0xFFUL << SYSCFG_SKR_KEY_Pos)
#define SYSCFG_SKR_KEY SYSCFG_SKR_KEY_Msk
#define SYSCFG_SWPR2_PAGE32_Pos (0U)
#define SYSCFG_SWPR2_PAGE32_Msk (0x1UL << SYSCFG_SWPR2_PAGE32_Pos)
#define SYSCFG_SWPR2_PAGE32 SYSCFG_SWPR2_PAGE32_Msk
#define SYSCFG_SWPR2_PAGE33_Pos (1U)
#define SYSCFG_SWPR2_PAGE33_Msk (0x1UL << SYSCFG_SWPR2_PAGE33_Pos)
#define SYSCFG_SWPR2_PAGE33 SYSCFG_SWPR2_PAGE33_Msk
#define SYSCFG_SWPR2_PAGE34_Pos (2U)
#define SYSCFG_SWPR2_PAGE34_Msk (0x1UL << SYSCFG_SWPR2_PAGE34_Pos)
#define SYSCFG_SWPR2_PAGE34 SYSCFG_SWPR2_PAGE34_Msk
#define SYSCFG_SWPR2_PAGE35_Pos (3U)
#define SYSCFG_SWPR2_PAGE35_Msk (0x1UL << SYSCFG_SWPR2_PAGE35_Pos)
#define SYSCFG_SWPR2_PAGE35 SYSCFG_SWPR2_PAGE35_Msk
#define SYSCFG_SWPR2_PAGE36_Pos (4U)
#define SYSCFG_SWPR2_PAGE36_Msk (0x1UL << SYSCFG_SWPR2_PAGE36_Pos)
#define SYSCFG_SWPR2_PAGE36 SYSCFG_SWPR2_PAGE36_Msk
#define SYSCFG_SWPR2_PAGE37_Pos (5U)
#define SYSCFG_SWPR2_PAGE37_Msk (0x1UL << SYSCFG_SWPR2_PAGE37_Pos)
#define SYSCFG_SWPR2_PAGE37 SYSCFG_SWPR2_PAGE37_Msk
#define SYSCFG_SWPR2_PAGE38_Pos (6U)
#define SYSCFG_SWPR2_PAGE38_Msk (0x1UL << SYSCFG_SWPR2_PAGE38_Pos)
#define SYSCFG_SWPR2_PAGE38 SYSCFG_SWPR2_PAGE38_Msk
#define SYSCFG_SWPR2_PAGE39_Pos (7U)
#define SYSCFG_SWPR2_PAGE39_Msk (0x1UL << SYSCFG_SWPR2_PAGE39_Pos)
#define SYSCFG_SWPR2_PAGE39 SYSCFG_SWPR2_PAGE39_Msk
#define SYSCFG_SWPR2_PAGE40_Pos (8U)
#define SYSCFG_SWPR2_PAGE40_Msk (0x1UL << SYSCFG_SWPR2_PAGE40_Pos)
#define SYSCFG_SWPR2_PAGE40 SYSCFG_SWPR2_PAGE40_Msk
#define SYSCFG_SWPR2_PAGE41_Pos (9U)
#define SYSCFG_SWPR2_PAGE41_Msk (0x1UL << SYSCFG_SWPR2_PAGE41_Pos)
#define SYSCFG_SWPR2_PAGE41 SYSCFG_SWPR2_PAGE41_Msk
#define SYSCFG_SWPR2_PAGE42_Pos (10U)
#define SYSCFG_SWPR2_PAGE42_Msk (0x1UL << SYSCFG_SWPR2_PAGE42_Pos)
#define SYSCFG_SWPR2_PAGE42 SYSCFG_SWPR2_PAGE42_Msk
#define SYSCFG_SWPR2_PAGE43_Pos (11U)
#define SYSCFG_SWPR2_PAGE43_Msk (0x1UL << SYSCFG_SWPR2_PAGE43_Pos)
#define SYSCFG_SWPR2_PAGE43 SYSCFG_SWPR2_PAGE43_Msk
#define SYSCFG_SWPR2_PAGE44_Pos (12U)
#define SYSCFG_SWPR2_PAGE44_Msk (0x1UL << SYSCFG_SWPR2_PAGE44_Pos)
#define SYSCFG_SWPR2_PAGE44 SYSCFG_SWPR2_PAGE44_Msk
#define SYSCFG_SWPR2_PAGE45_Pos (13U)
#define SYSCFG_SWPR2_PAGE45_Msk (0x1UL << SYSCFG_SWPR2_PAGE45_Pos)
#define SYSCFG_SWPR2_PAGE45 SYSCFG_SWPR2_PAGE45_Msk
#define SYSCFG_SWPR2_PAGE46_Pos (14U)
#define SYSCFG_SWPR2_PAGE46_Msk (0x1UL << SYSCFG_SWPR2_PAGE46_Pos)
#define SYSCFG_SWPR2_PAGE46 SYSCFG_SWPR2_PAGE46_Msk
#define SYSCFG_SWPR2_PAGE47_Pos (15U)
#define SYSCFG_SWPR2_PAGE47_Msk (0x1UL << SYSCFG_SWPR2_PAGE47_Pos)
#define SYSCFG_SWPR2_PAGE47 SYSCFG_SWPR2_PAGE47_Msk
#define SYSCFG_SWPR2_PAGE48_Pos (16U)
#define SYSCFG_SWPR2_PAGE48_Msk (0x1UL << SYSCFG_SWPR2_PAGE48_Pos)
#define SYSCFG_SWPR2_PAGE48 SYSCFG_SWPR2_PAGE48_Msk
#define SYSCFG_SWPR2_PAGE49_Pos (17U)
#define SYSCFG_SWPR2_PAGE49_Msk (0x1UL << SYSCFG_SWPR2_PAGE49_Pos)
#define SYSCFG_SWPR2_PAGE49 SYSCFG_SWPR2_PAGE49_Msk
#define SYSCFG_SWPR2_PAGE50_Pos (18U)
#define SYSCFG_SWPR2_PAGE50_Msk (0x1UL << SYSCFG_SWPR2_PAGE50_Pos)
#define SYSCFG_SWPR2_PAGE50 SYSCFG_SWPR2_PAGE50_Msk
#define SYSCFG_SWPR2_PAGE51_Pos (19U)
#define SYSCFG_SWPR2_PAGE51_Msk (0x1UL << SYSCFG_SWPR2_PAGE51_Pos)
#define SYSCFG_SWPR2_PAGE51 SYSCFG_SWPR2_PAGE51_Msk
#define SYSCFG_SWPR2_PAGE52_Pos (20U)
#define SYSCFG_SWPR2_PAGE52_Msk (0x1UL << SYSCFG_SWPR2_PAGE52_Pos)
#define SYSCFG_SWPR2_PAGE52 SYSCFG_SWPR2_PAGE52_Msk
#define SYSCFG_SWPR2_PAGE53_Pos (21U)
#define SYSCFG_SWPR2_PAGE53_Msk (0x1UL << SYSCFG_SWPR2_PAGE53_Pos)
#define SYSCFG_SWPR2_PAGE53 SYSCFG_SWPR2_PAGE53_Msk
#define SYSCFG_SWPR2_PAGE54_Pos (22U)
#define SYSCFG_SWPR2_PAGE54_Msk (0x1UL << SYSCFG_SWPR2_PAGE54_Pos)
#define SYSCFG_SWPR2_PAGE54 SYSCFG_SWPR2_PAGE54_Msk
#define SYSCFG_SWPR2_PAGE55_Pos (23U)
#define SYSCFG_SWPR2_PAGE55_Msk (0x1UL << SYSCFG_SWPR2_PAGE55_Pos)
#define SYSCFG_SWPR2_PAGE55 SYSCFG_SWPR2_PAGE55_Msk
#define SYSCFG_SWPR2_PAGE56_Pos (24U)
#define SYSCFG_SWPR2_PAGE56_Msk (0x1UL << SYSCFG_SWPR2_PAGE56_Pos)
#define SYSCFG_SWPR2_PAGE56 SYSCFG_SWPR2_PAGE56_Msk
#define SYSCFG_SWPR2_PAGE57_Pos (25U)
#define SYSCFG_SWPR2_PAGE57_Msk (0x1UL << SYSCFG_SWPR2_PAGE57_Pos)
#define SYSCFG_SWPR2_PAGE57 SYSCFG_SWPR2_PAGE57_Msk
#define SYSCFG_SWPR2_PAGE58_Pos (26U)
#define SYSCFG_SWPR2_PAGE58_Msk (0x1UL << SYSCFG_SWPR2_PAGE58_Pos)
#define SYSCFG_SWPR2_PAGE58 SYSCFG_SWPR2_PAGE58_Msk
#define SYSCFG_SWPR2_PAGE59_Pos (27U)
#define SYSCFG_SWPR2_PAGE59_Msk (0x1UL << SYSCFG_SWPR2_PAGE59_Pos)
#define SYSCFG_SWPR2_PAGE59 SYSCFG_SWPR2_PAGE59_Msk
#define SYSCFG_SWPR2_PAGE60_Pos (28U)
#define SYSCFG_SWPR2_PAGE60_Msk (0x1UL << SYSCFG_SWPR2_PAGE60_Pos)
#define SYSCFG_SWPR2_PAGE60 SYSCFG_SWPR2_PAGE60_Msk
#define SYSCFG_SWPR2_PAGE61_Pos (29U)
#define SYSCFG_SWPR2_PAGE61_Msk (0x1UL << SYSCFG_SWPR2_PAGE61_Pos)
#define SYSCFG_SWPR2_PAGE61 SYSCFG_SWPR2_PAGE61_Msk
#define SYSCFG_SWPR2_PAGE62_Pos (30U)
#define SYSCFG_SWPR2_PAGE62_Msk (0x1UL << SYSCFG_SWPR2_PAGE62_Pos)
#define SYSCFG_SWPR2_PAGE62 SYSCFG_SWPR2_PAGE62_Msk
#define SYSCFG_SWPR2_PAGE63_Pos (31U)
#define SYSCFG_SWPR2_PAGE63_Msk (0x1UL << SYSCFG_SWPR2_PAGE63_Pos)
#define SYSCFG_SWPR2_PAGE63 SYSCFG_SWPR2_PAGE63_Msk
#define SYSCFG_IMR1_TIM1IM_Pos (13U)
#define SYSCFG_IMR1_TIM1IM_Msk (0x1UL << SYSCFG_IMR1_TIM1IM_Pos)
#define SYSCFG_IMR1_TIM1IM SYSCFG_IMR1_TIM1IM_Msk
#define SYSCFG_IMR1_TIM16IM_Pos (14U)
#define SYSCFG_IMR1_TIM16IM_Msk (0x1UL << SYSCFG_IMR1_TIM16IM_Pos)
#define SYSCFG_IMR1_TIM16IM SYSCFG_IMR1_TIM16IM_Msk
#define SYSCFG_IMR1_TIM17IM_Pos (15U)
#define SYSCFG_IMR1_TIM17IM_Msk (0x1UL << SYSCFG_IMR1_TIM17IM_Pos)
#define SYSCFG_IMR1_TIM17IM SYSCFG_IMR1_TIM17IM_Msk
#define SYSCFG_IMR1_EXTI5IM_Pos (21U)
#define SYSCFG_IMR1_EXTI5IM_Msk (0x1UL << SYSCFG_IMR1_EXTI5IM_Pos)
#define SYSCFG_IMR1_EXTI5IM SYSCFG_IMR1_EXTI5IM_Msk
#define SYSCFG_IMR1_EXTI6IM_Pos (22U)
#define SYSCFG_IMR1_EXTI6IM_Msk (0x1UL << SYSCFG_IMR1_EXTI6IM_Pos)
#define SYSCFG_IMR1_EXTI6IM SYSCFG_IMR1_EXTI6IM_Msk
#define SYSCFG_IMR1_EXTI7IM_Pos (23U)
#define SYSCFG_IMR1_EXTI7IM_Msk (0x1UL << SYSCFG_IMR1_EXTI7IM_Pos)
#define SYSCFG_IMR1_EXTI7IM SYSCFG_IMR1_EXTI7IM_Msk
#define SYSCFG_IMR1_EXTI8IM_Pos (24U)
#define SYSCFG_IMR1_EXTI8IM_Msk (0x1UL << SYSCFG_IMR1_EXTI8IM_Pos)
#define SYSCFG_IMR1_EXTI8IM SYSCFG_IMR1_EXTI8IM_Msk
#define SYSCFG_IMR1_EXTI9IM_Pos (25U)
#define SYSCFG_IMR1_EXTI9IM_Msk (0x1UL << SYSCFG_IMR1_EXTI9IM_Pos)
#define SYSCFG_IMR1_EXTI9IM SYSCFG_IMR1_EXTI9IM_Msk
#define SYSCFG_IMR1_EXTI10IM_Pos (26U)
#define SYSCFG_IMR1_EXTI10IM_Msk (0x1UL << SYSCFG_IMR1_EXTI10IM_Pos)
#define SYSCFG_IMR1_EXTI10IM SYSCFG_IMR1_EXTI10IM_Msk
#define SYSCFG_IMR1_EXTI11IM_Pos (27U)
#define SYSCFG_IMR1_EXTI11IM_Msk (0x1UL << SYSCFG_IMR1_EXTI11IM_Pos)
#define SYSCFG_IMR1_EXTI11IM SYSCFG_IMR1_EXTI11IM_Msk
#define SYSCFG_IMR1_EXTI12IM_Pos (28U)
#define SYSCFG_IMR1_EXTI12IM_Msk (0x1UL << SYSCFG_IMR1_EXTI12IM_Pos)
#define SYSCFG_IMR1_EXTI12IM SYSCFG_IMR1_EXTI12IM_Msk
#define SYSCFG_IMR1_EXTI13IM_Pos (29U)
#define SYSCFG_IMR1_EXTI13IM_Msk (0x1UL << SYSCFG_IMR1_EXTI13IM_Pos)
#define SYSCFG_IMR1_EXTI13IM SYSCFG_IMR1_EXTI13IM_Msk
#define SYSCFG_IMR1_EXTI14IM_Pos (30U)
#define SYSCFG_IMR1_EXTI14IM_Msk (0x1UL << SYSCFG_IMR1_EXTI14IM_Pos)
#define SYSCFG_IMR1_EXTI14IM SYSCFG_IMR1_EXTI14IM_Msk
#define SYSCFG_IMR1_EXTI15IM_Pos (31U)
#define SYSCFG_IMR1_EXTI15IM_Msk (0x1UL << SYSCFG_IMR1_EXTI15IM_Pos)
#define SYSCFG_IMR1_EXTI15IM SYSCFG_IMR1_EXTI15IM_Msk
#define SYSCFG_IMR2_PVM1IM_Pos (16U)
#define SYSCFG_IMR2_PVM1IM_Msk (0x1UL << SYSCFG_IMR2_PVM1IM_Pos)
#define SYSCFG_IMR2_PVM1IM SYSCFG_IMR2_PVM1IM_Msk
#define SYSCFG_IMR2_PVM3IM_Pos (18U)
#define SYSCFG_IMR2_PVM3IM_Msk (0x1UL << SYSCFG_IMR2_PVM3IM_Pos)
#define SYSCFG_IMR2_PVM3IM SYSCFG_IMR2_PVM3IM_Msk
#define SYSCFG_IMR2_PVDIM_Pos (20U)
#define SYSCFG_IMR2_PVDIM_Msk (0x1UL << SYSCFG_IMR2_PVDIM_Pos)
#define SYSCFG_IMR2_PVDIM SYSCFG_IMR2_PVDIM_Msk
#define SYSCFG_C2IMR1_RTCSTAMPTAMPLSECSSIM_Pos (0U)
#define SYSCFG_C2IMR1_RTCSTAMPTAMPLSECSSIM_Msk (0x1UL << SYSCFG_C2IMR1_RTCSTAMPTAMPLSECSSIM_Pos)
#define SYSCFG_C2IMR1_RTCSTAMPTAMPLSECSSIM SYSCFG_C2IMR1_RTCSTAMPTAMPLSECSSIM_Msk
#define SYSCFG_C2IMR1_RTCWKUPIM_Pos (3U)
#define SYSCFG_C2IMR1_RTCWKUPIM_Msk (0x1UL << SYSCFG_C2IMR1_RTCWKUPIM_Pos)
#define SYSCFG_C2IMR1_RTCWKUPIM SYSCFG_C2IMR1_RTCWKUPIM_Msk
#define SYSCFG_C2IMR1_RTCALARMIM_Pos (4U)
#define SYSCFG_C2IMR1_RTCALARMIM_Msk (0x1UL << SYSCFG_C2IMR1_RTCALARMIM_Pos)
#define SYSCFG_C2IMR1_RTCALARMIM SYSCFG_C2IMR1_RTCALARMIM_Msk
#define SYSCFG_C2IMR1_RCCIM_Pos (5U)
#define SYSCFG_C2IMR1_RCCIM_Msk (0x1UL << SYSCFG_C2IMR1_RCCIM_Pos)
#define SYSCFG_C2IMR1_RCCIM SYSCFG_C2IMR1_RCCIM_Msk
#define SYSCFG_C2IMR1_FLASHIM_Pos (6U)
#define SYSCFG_C2IMR1_FLASHIM_Msk (0x1UL << SYSCFG_C2IMR1_FLASHIM_Pos)
#define SYSCFG_C2IMR1_FLASHIM SYSCFG_C2IMR1_FLASHIM_Msk
#define SYSCFG_C2IMR1_PKAIM_Pos (8U)
#define SYSCFG_C2IMR1_PKAIM_Msk (0x1UL << SYSCFG_C2IMR1_PKAIM_Pos)
#define SYSCFG_C2IMR1_PKAIM SYSCFG_C2IMR1_PKAIM_Msk
#define SYSCFG_C2IMR1_RNGIM_Pos (9U)
#define SYSCFG_C2IMR1_RNGIM_Msk (0x1UL << SYSCFG_C2IMR1_RNGIM_Pos)
#define SYSCFG_C2IMR1_RNGIM SYSCFG_C2IMR1_RNGIM_Msk
#define SYSCFG_C2IMR1_AES1IM_Pos (10U)
#define SYSCFG_C2IMR1_AES1IM_Msk (0x1UL << SYSCFG_C2IMR1_AES1IM_Pos)
#define SYSCFG_C2IMR1_AES1IM SYSCFG_C2IMR1_AES1IM_Msk
#define SYSCFG_C2IMR1_COMPIM_Pos (11U)
#define SYSCFG_C2IMR1_COMPIM_Msk (0x1UL << SYSCFG_C2IMR1_COMPIM_Pos)
#define SYSCFG_C2IMR1_COMPIM SYSCFG_C2IMR1_COMPIM_Msk
#define SYSCFG_C2IMR1_ADCIM_Pos (12U)
#define SYSCFG_C2IMR1_ADCIM_Msk (0x1UL << SYSCFG_C2IMR1_ADCIM_Pos)
#define SYSCFG_C2IMR1_ADCIM SYSCFG_C2IMR1_ADCIM_Msk
#define SYSCFG_C2IMR1_EXTI0IM_Pos (16U)
#define SYSCFG_C2IMR1_EXTI0IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI0IM_Pos)
#define SYSCFG_C2IMR1_EXTI0IM SYSCFG_C2IMR1_EXTI0IM_Msk
#define SYSCFG_C2IMR1_EXTI1IM_Pos (17U)
#define SYSCFG_C2IMR1_EXTI1IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI1IM_Pos)
#define SYSCFG_C2IMR1_EXTI1IM SYSCFG_C2IMR1_EXTI1IM_Msk
#define SYSCFG_C2IMR1_EXTI2IM_Pos (18U)
#define SYSCFG_C2IMR1_EXTI2IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI2IM_Pos)
#define SYSCFG_C2IMR1_EXTI2IM SYSCFG_C2IMR1_EXTI2IM_Msk
#define SYSCFG_C2IMR1_EXTI3IM_Pos (19U)
#define SYSCFG_C2IMR1_EXTI3IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI3IM_Pos)
#define SYSCFG_C2IMR1_EXTI3IM SYSCFG_C2IMR1_EXTI3IM_Msk
#define SYSCFG_C2IMR1_EXTI4IM_Pos (20U)
#define SYSCFG_C2IMR1_EXTI4IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI4IM_Pos)
#define SYSCFG_C2IMR1_EXTI4IM SYSCFG_C2IMR1_EXTI4IM_Msk
#define SYSCFG_C2IMR1_EXTI5IM_Pos (21U)
#define SYSCFG_C2IMR1_EXTI5IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI5IM_Pos)
#define SYSCFG_C2IMR1_EXTI5IM SYSCFG_C2IMR1_EXTI5IM_Msk
#define SYSCFG_C2IMR1_EXTI6IM_Pos (22U)
#define SYSCFG_C2IMR1_EXTI6IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI6IM_Pos)
#define SYSCFG_C2IMR1_EXTI6IM SYSCFG_C2IMR1_EXTI6IM_Msk
#define SYSCFG_C2IMR1_EXTI7IM_Pos (23U)
#define SYSCFG_C2IMR1_EXTI7IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI7IM_Pos)
#define SYSCFG_C2IMR1_EXTI7IM SYSCFG_C2IMR1_EXTI7IM_Msk
#define SYSCFG_C2IMR1_EXTI8IM_Pos (24U)
#define SYSCFG_C2IMR1_EXTI8IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI8IM_Pos)
#define SYSCFG_C2IMR1_EXTI8IM SYSCFG_C2IMR1_EXTI8IM_Msk
#define SYSCFG_C2IMR1_EXTI9IM_Pos (25U)
#define SYSCFG_C2IMR1_EXTI9IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI9IM_Pos)
#define SYSCFG_C2IMR1_EXTI9IM SYSCFG_C2IMR1_EXTI9IM_Msk
#define SYSCFG_C2IMR1_EXTI10IM_Pos (26U)
#define SYSCFG_C2IMR1_EXTI10IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI10IM_Pos)
#define SYSCFG_C2IMR1_EXTI10IM SYSCFG_C2IMR1_EXTI10IM_Msk
#define SYSCFG_C2IMR1_EXTI11IM_Pos (27U)
#define SYSCFG_C2IMR1_EXTI11IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI11IM_Pos)
#define SYSCFG_C2IMR1_EXTI11IM SYSCFG_C2IMR1_EXTI11IM_Msk
#define SYSCFG_C2IMR1_EXTI12IM_Pos (28U)
#define SYSCFG_C2IMR1_EXTI12IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI12IM_Pos)
#define SYSCFG_C2IMR1_EXTI12IM SYSCFG_C2IMR1_EXTI12IM_Msk
#define SYSCFG_C2IMR1_EXTI13IM_Pos (29U)
#define SYSCFG_C2IMR1_EXTI13IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI13IM_Pos)
#define SYSCFG_C2IMR1_EXTI13IM SYSCFG_C2IMR1_EXTI13IM_Msk
#define SYSCFG_C2IMR1_EXTI14IM_Pos (30U)
#define SYSCFG_C2IMR1_EXTI14IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI14IM_Pos)
#define SYSCFG_C2IMR1_EXTI14IM SYSCFG_C2IMR1_EXTI14IM_Msk
#define SYSCFG_C2IMR1_EXTI15IM_Pos (31U)
#define SYSCFG_C2IMR1_EXTI15IM_Msk (0x1UL << SYSCFG_C2IMR1_EXTI15IM_Pos)
#define SYSCFG_C2IMR1_EXTI15IM SYSCFG_C2IMR1_EXTI15IM_Msk
#define SYSCFG_C2IMR2_DMA1CH1IM_Pos (0U)
#define SYSCFG_C2IMR2_DMA1CH1IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA1CH1IM_Pos)
#define SYSCFG_C2IMR2_DMA1CH1IM SYSCFG_C2IMR2_DMA1CH1IM_Msk
#define SYSCFG_C2IMR2_DMA1CH2IM_Pos (1U)
#define SYSCFG_C2IMR2_DMA1CH2IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA1CH2IM_Pos)
#define SYSCFG_C2IMR2_DMA1CH2IM SYSCFG_C2IMR2_DMA1CH2IM_Msk
#define SYSCFG_C2IMR2_DMA1CH3IM_Pos (2U)
#define SYSCFG_C2IMR2_DMA1CH3IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA1CH3IM_Pos)
#define SYSCFG_C2IMR2_DMA1CH3IM SYSCFG_C2IMR2_DMA1CH3IM_Msk
#define SYSCFG_C2IMR2_DMA1CH4IM_Pos (3U)
#define SYSCFG_C2IMR2_DMA1CH4IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA1CH4IM_Pos)
#define SYSCFG_C2IMR2_DMA1CH4IM SYSCFG_C2IMR2_DMA1CH4IM_Msk
#define SYSCFG_C2IMR2_DMA1CH5IM_Pos (4U)
#define SYSCFG_C2IMR2_DMA1CH5IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA1CH5IM_Pos)
#define SYSCFG_C2IMR2_DMA1CH5IM SYSCFG_C2IMR2_DMA1CH5IM_Msk
#define SYSCFG_C2IMR2_DMA1CH6IM_Pos (5U)
#define SYSCFG_C2IMR2_DMA1CH6IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA1CH6IM_Pos)
#define SYSCFG_C2IMR2_DMA1CH6IM SYSCFG_C2IMR2_DMA1CH6IM_Msk
#define SYSCFG_C2IMR2_DMA1CH7IM_Pos (6U)
#define SYSCFG_C2IMR2_DMA1CH7IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA1CH7IM_Pos)
#define SYSCFG_C2IMR2_DMA1CH7IM SYSCFG_C2IMR2_DMA1CH7IM_Msk
#define SYSCFG_C2IMR2_DMA2CH1IM_Pos (8U)
#define SYSCFG_C2IMR2_DMA2CH1IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA2CH1IM_Pos)
#define SYSCFG_C2IMR2_DMA2CH1IM SYSCFG_C2IMR2_DMA2CH1IM_Msk
#define SYSCFG_C2IMR2_DMA2CH2IM_Pos (9U)
#define SYSCFG_C2IMR2_DMA2CH2IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA2CH2IM_Pos)
#define SYSCFG_C2IMR2_DMA2CH2IM SYSCFG_C2IMR2_DMA2CH2IM_Msk
#define SYSCFG_C2IMR2_DMA2CH3IM_Pos (10U)
#define SYSCFG_C2IMR2_DMA2CH3IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA2CH3IM_Pos)
#define SYSCFG_C2IMR2_DMA2CH3IM SYSCFG_C2IMR2_DMA2CH3IM_Msk
#define SYSCFG_C2IMR2_DMA2CH4IM_Pos (11U)
#define SYSCFG_C2IMR2_DMA2CH4IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA2CH4IM_Pos)
#define SYSCFG_C2IMR2_DMA2CH4IM SYSCFG_C2IMR2_DMA2CH4IM_Msk
#define SYSCFG_C2IMR2_DMA2CH5IM_Pos (12U)
#define SYSCFG_C2IMR2_DMA2CH5IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA2CH5IM_Pos)
#define SYSCFG_C2IMR2_DMA2CH5IM SYSCFG_C2IMR2_DMA2CH5IM_Msk
#define SYSCFG_C2IMR2_DMA2CH6IM_Pos (13U)
#define SYSCFG_C2IMR2_DMA2CH6IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA2CH6IM_Pos)
#define SYSCFG_C2IMR2_DMA2CH6IM SYSCFG_C2IMR2_DMA2CH6IM_Msk
#define SYSCFG_C2IMR2_DMA2CH7IM_Pos (14U)
#define SYSCFG_C2IMR2_DMA2CH7IM_Msk (0x1UL << SYSCFG_C2IMR2_DMA2CH7IM_Pos)
#define SYSCFG_C2IMR2_DMA2CH7IM SYSCFG_C2IMR2_DMA2CH7IM_Msk
#define SYSCFG_C2IMR2_DMAMUX1IM_Pos (15U)
#define SYSCFG_C2IMR2_DMAMUX1IM_Msk (0x1UL << SYSCFG_C2IMR2_DMAMUX1IM_Pos)
#define SYSCFG_C2IMR2_DMAMUX1IM SYSCFG_C2IMR2_DMAMUX1IM_Msk
#define SYSCFG_C2IMR2_PVM1IM_Pos (16U)
#define SYSCFG_C2IMR2_PVM1IM_Msk (0x1UL << SYSCFG_C2IMR2_PVM1IM_Pos)
#define SYSCFG_C2IMR2_PVM1IM SYSCFG_C2IMR2_PVM1IM_Msk
#define SYSCFG_C2IMR2_PVM3IM_Pos (18U)
#define SYSCFG_C2IMR2_PVM3IM_Msk (0x1UL << SYSCFG_C2IMR2_PVM3IM_Pos)
#define SYSCFG_C2IMR2_PVM3IM SYSCFG_C2IMR2_PVM3IM_Msk
#define SYSCFG_C2IMR2_PVDIM_Pos (20U)
#define SYSCFG_C2IMR2_PVDIM_Msk (0x1UL << SYSCFG_C2IMR2_PVDIM_Pos)
#define SYSCFG_C2IMR2_PVDIM SYSCFG_C2IMR2_PVDIM_Msk
#define SYSCFG_C2IMR2_TSCIM_Pos (21U)
#define SYSCFG_C2IMR2_TSCIM_Msk (0x1UL << SYSCFG_C2IMR2_TSCIM_Pos)
#define SYSCFG_C2IMR2_TSCIM SYSCFG_C2IMR2_TSCIM_Msk
#define SYSCFG_C2IMR2_LCDIM_Pos (22U)
#define SYSCFG_C2IMR2_LCDIM_Msk (0x1UL << SYSCFG_C2IMR2_LCDIM_Pos)
#define SYSCFG_C2IMR2_LCDIM SYSCFG_C2IMR2_LCDIM_Msk
#define SYSCFG_SIPCR_SAES1_Pos (0U)
#define SYSCFG_SIPCR_SAES1_Msk (0x1UL << SYSCFG_SIPCR_SAES1_Pos)
#define SYSCFG_SIPCR_SAES1 SYSCFG_SIPCR_SAES1_Msk
#define SYSCFG_SIPCR_SAES2_Pos (1U)
#define SYSCFG_SIPCR_SAES2_Msk (0x1UL << SYSCFG_SIPCR_SAES2_Pos)
#define SYSCFG_SIPCR_SAES2 SYSCFG_SIPCR_SAES2_Msk
#define SYSCFG_SIPCR_SPKA_Pos (2U)
#define SYSCFG_SIPCR_SPKA_Msk (0x1UL << SYSCFG_SIPCR_SPKA_Pos)
#define SYSCFG_SIPCR_SPKA SYSCFG_SIPCR_SPKA_Msk
#define SYSCFG_SIPCR_SRNG_Pos (3U)
#define SYSCFG_SIPCR_SRNG_Msk (0x1UL << SYSCFG_SIPCR_SRNG_Pos)
#define SYSCFG_SIPCR_SRNG SYSCFG_SIPCR_SRNG_Msk
#define TIM_CR1_CEN_Pos (0U)
#define TIM_CR1_CEN_Msk (0x1UL << TIM_CR1_CEN_Pos)
#define TIM_CR1_CEN TIM_CR1_CEN_Msk
#define TIM_CR1_UDIS_Pos (1U)
#define TIM_CR1_UDIS_Msk (0x1UL << TIM_CR1_UDIS_Pos)
#define TIM_CR1_UDIS TIM_CR1_UDIS_Msk
#define TIM_CR1_URS_Pos (2U)
#define TIM_CR1_URS_Msk (0x1UL << TIM_CR1_URS_Pos)
#define TIM_CR1_URS TIM_CR1_URS_Msk
#define TIM_CR1_OPM_Pos (3U)
#define TIM_CR1_OPM_Msk (0x1UL << TIM_CR1_OPM_Pos)
#define TIM_CR1_OPM TIM_CR1_OPM_Msk
#define TIM_CR1_DIR_Pos (4U)
#define TIM_CR1_DIR_Msk (0x1UL << TIM_CR1_DIR_Pos)
#define TIM_CR1_DIR TIM_CR1_DIR_Msk
#define TIM_CR1_CMS_Pos (5U)
#define TIM_CR1_CMS_Msk (0x3UL << TIM_CR1_CMS_Pos)
#define TIM_CR1_CMS TIM_CR1_CMS_Msk
#define TIM_CR1_CMS_0 (0x1U << TIM_CR1_CMS_Pos)
#define TIM_CR1_CMS_1 (0x2U << TIM_CR1_CMS_Pos)
#define TIM_CR1_ARPE_Pos (7U)
#define TIM_CR1_ARPE_Msk (0x1UL << TIM_CR1_ARPE_Pos)
#define TIM_CR1_ARPE TIM_CR1_ARPE_Msk
#define TIM_CR1_CKD_Pos (8U)
#define TIM_CR1_CKD_Msk (0x3UL << TIM_CR1_CKD_Pos)
#define TIM_CR1_CKD TIM_CR1_CKD_Msk
#define TIM_CR1_CKD_0 (0x1U << TIM_CR1_CKD_Pos)
#define TIM_CR1_CKD_1 (0x2U << TIM_CR1_CKD_Pos)
#define TIM_CR1_UIFREMAP_Pos (11U)
#define TIM_CR1_UIFREMAP_Msk (0x1UL << TIM_CR1_UIFREMAP_Pos)
#define TIM_CR1_UIFREMAP TIM_CR1_UIFREMAP_Msk
#define TIM_CR2_CCPC_Pos (0U)
#define TIM_CR2_CCPC_Msk (0x1UL << TIM_CR2_CCPC_Pos)
#define TIM_CR2_CCPC TIM_CR2_CCPC_Msk
#define TIM_CR2_CCUS_Pos (2U)
#define TIM_CR2_CCUS_Msk (0x1UL << TIM_CR2_CCUS_Pos)
#define TIM_CR2_CCUS TIM_CR2_CCUS_Msk
#define TIM_CR2_CCDS_Pos (3U)
#define TIM_CR2_CCDS_Msk (0x1UL << TIM_CR2_CCDS_Pos)
#define TIM_CR2_CCDS TIM_CR2_CCDS_Msk
#define TIM_CR2_MMS_Pos (4U)
#define TIM_CR2_MMS_Msk (0x7UL << TIM_CR2_MMS_Pos)
#define TIM_CR2_MMS TIM_CR2_MMS_Msk
#define TIM_CR2_MMS_0 (0x1U << TIM_CR2_MMS_Pos)
#define TIM_CR2_MMS_1 (0x2U << TIM_CR2_MMS_Pos)
#define TIM_CR2_MMS_2 (0x4U << TIM_CR2_MMS_Pos)
#define TIM_CR2_TI1S_Pos (7U)
#define TIM_CR2_TI1S_Msk (0x1UL << TIM_CR2_TI1S_Pos)
#define TIM_CR2_TI1S TIM_CR2_TI1S_Msk
#define TIM_CR2_OIS1_Pos (8U)
#define TIM_CR2_OIS1_Msk (0x1UL << TIM_CR2_OIS1_Pos)
#define TIM_CR2_OIS1 TIM_CR2_OIS1_Msk
#define TIM_CR2_OIS1N_Pos (9U)
#define TIM_CR2_OIS1N_Msk (0x1UL << TIM_CR2_OIS1N_Pos)
#define TIM_CR2_OIS1N TIM_CR2_OIS1N_Msk
#define TIM_CR2_OIS2_Pos (10U)
#define TIM_CR2_OIS2_Msk (0x1UL << TIM_CR2_OIS2_Pos)
#define TIM_CR2_OIS2 TIM_CR2_OIS2_Msk
#define TIM_CR2_OIS2N_Pos (11U)
#define TIM_CR2_OIS2N_Msk (0x1UL << TIM_CR2_OIS2N_Pos)
#define TIM_CR2_OIS2N TIM_CR2_OIS2N_Msk
#define TIM_CR2_OIS3_Pos (12U)
#define TIM_CR2_OIS3_Msk (0x1UL << TIM_CR2_OIS3_Pos)
#define TIM_CR2_OIS3 TIM_CR2_OIS3_Msk
#define TIM_CR2_OIS3N_Pos (13U)
#define TIM_CR2_OIS3N_Msk (0x1UL << TIM_CR2_OIS3N_Pos)
#define TIM_CR2_OIS3N TIM_CR2_OIS3N_Msk
#define TIM_CR2_OIS4_Pos (14U)
#define TIM_CR2_OIS4_Msk (0x1UL << TIM_CR2_OIS4_Pos)
#define TIM_CR2_OIS4 TIM_CR2_OIS4_Msk
#define TIM_CR2_OIS5_Pos (16U)
#define TIM_CR2_OIS5_Msk (0x1UL << TIM_CR2_OIS5_Pos)
#define TIM_CR2_OIS5 TIM_CR2_OIS5_Msk
#define TIM_CR2_OIS6_Pos (18U)
#define TIM_CR2_OIS6_Msk (0x1UL << TIM_CR2_OIS6_Pos)
#define TIM_CR2_OIS6 TIM_CR2_OIS6_Msk
#define TIM_CR2_MMS2_Pos (20U)
#define TIM_CR2_MMS2_Msk (0xFUL << TIM_CR2_MMS2_Pos)
#define TIM_CR2_MMS2 TIM_CR2_MMS2_Msk
#define TIM_CR2_MMS2_0 (0x1U << TIM_CR2_MMS2_Pos)
#define TIM_CR2_MMS2_1 (0x2U << TIM_CR2_MMS2_Pos)
#define TIM_CR2_MMS2_2 (0x4U << TIM_CR2_MMS2_Pos)
#define TIM_CR2_MMS2_3 (0x8U << TIM_CR2_MMS2_Pos)
#define TIM_SMCR_SMS_Pos (0U)
#define TIM_SMCR_SMS_Msk (0x10007UL << TIM_SMCR_SMS_Pos)
#define TIM_SMCR_SMS TIM_SMCR_SMS_Msk
#define TIM_SMCR_SMS_0 (0x00001U << TIM_SMCR_SMS_Pos)
#define TIM_SMCR_SMS_1 (0x00002U << TIM_SMCR_SMS_Pos)
#define TIM_SMCR_SMS_2 (0x00004U << TIM_SMCR_SMS_Pos)
#define TIM_SMCR_SMS_3 (0x10000U << TIM_SMCR_SMS_Pos)
#define TIM_SMCR_OCCS_Pos (3U)
#define TIM_SMCR_OCCS_Msk (0x1UL << TIM_SMCR_OCCS_Pos)
#define TIM_SMCR_OCCS TIM_SMCR_OCCS_Msk
#define TIM_SMCR_TS_Pos (4U)
#define TIM_SMCR_TS_Msk (0x30007UL << TIM_SMCR_TS_Pos)
#define TIM_SMCR_TS TIM_SMCR_TS_Msk
#define TIM_SMCR_TS_0 (0x00001U << TIM_SMCR_TS_Pos)
#define TIM_SMCR_TS_1 (0x00002U << TIM_SMCR_TS_Pos)
#define TIM_SMCR_TS_2 (0x00004U << TIM_SMCR_TS_Pos)
#define TIM_SMCR_TS_3 (0x10000U << TIM_SMCR_TS_Pos)
#define TIM_SMCR_TS_4 (0x20000U << TIM_SMCR_TS_Pos)
#define TIM_SMCR_MSM_Pos (7U)
#define TIM_SMCR_MSM_Msk (0x1UL << TIM_SMCR_MSM_Pos)
#define TIM_SMCR_MSM TIM_SMCR_MSM_Msk
#define TIM_SMCR_ETF_Pos (8U)
#define TIM_SMCR_ETF_Msk (0xFUL << TIM_SMCR_ETF_Pos)
#define TIM_SMCR_ETF TIM_SMCR_ETF_Msk
#define TIM_SMCR_ETF_0 (0x1U << TIM_SMCR_ETF_Pos)
#define TIM_SMCR_ETF_1 (0x2U << TIM_SMCR_ETF_Pos)
#define TIM_SMCR_ETF_2 (0x4U << TIM_SMCR_ETF_Pos)
#define TIM_SMCR_ETF_3 (0x8U << TIM_SMCR_ETF_Pos)
#define TIM_SMCR_ETPS_Pos (12U)
#define TIM_SMCR_ETPS_Msk (0x3UL << TIM_SMCR_ETPS_Pos)
#define TIM_SMCR_ETPS TIM_SMCR_ETPS_Msk
#define TIM_SMCR_ETPS_0 (0x1U << TIM_SMCR_ETPS_Pos)
#define TIM_SMCR_ETPS_1 (0x2U << TIM_SMCR_ETPS_Pos)
#define TIM_SMCR_ECE_Pos (14U)
#define TIM_SMCR_ECE_Msk (0x1UL << TIM_SMCR_ECE_Pos)
#define TIM_SMCR_ECE TIM_SMCR_ECE_Msk
#define TIM_SMCR_ETP_Pos (15U)
#define TIM_SMCR_ETP_Msk (0x1UL << TIM_SMCR_ETP_Pos)
#define TIM_SMCR_ETP TIM_SMCR_ETP_Msk
#define TIM_DIER_UIE_Pos (0U)
#define TIM_DIER_UIE_Msk (0x1UL << TIM_DIER_UIE_Pos)
#define TIM_DIER_UIE TIM_DIER_UIE_Msk
#define TIM_DIER_CC1IE_Pos (1U)
#define TIM_DIER_CC1IE_Msk (0x1UL << TIM_DIER_CC1IE_Pos)
#define TIM_DIER_CC1IE TIM_DIER_CC1IE_Msk
#define TIM_DIER_CC2IE_Pos (2U)
#define TIM_DIER_CC2IE_Msk (0x1UL << TIM_DIER_CC2IE_Pos)
#define TIM_DIER_CC2IE TIM_DIER_CC2IE_Msk
#define TIM_DIER_CC3IE_Pos (3U)
#define TIM_DIER_CC3IE_Msk (0x1UL << TIM_DIER_CC3IE_Pos)
#define TIM_DIER_CC3IE TIM_DIER_CC3IE_Msk
#define TIM_DIER_CC4IE_Pos (4U)
#define TIM_DIER_CC4IE_Msk (0x1UL << TIM_DIER_CC4IE_Pos)
#define TIM_DIER_CC4IE TIM_DIER_CC4IE_Msk
#define TIM_DIER_COMIE_Pos (5U)
#define TIM_DIER_COMIE_Msk (0x1UL << TIM_DIER_COMIE_Pos)
#define TIM_DIER_COMIE TIM_DIER_COMIE_Msk
#define TIM_DIER_TIE_Pos (6U)
#define TIM_DIER_TIE_Msk (0x1UL << TIM_DIER_TIE_Pos)
#define TIM_DIER_TIE TIM_DIER_TIE_Msk
#define TIM_DIER_BIE_Pos (7U)
#define TIM_DIER_BIE_Msk (0x1UL << TIM_DIER_BIE_Pos)
#define TIM_DIER_BIE TIM_DIER_BIE_Msk
#define TIM_DIER_UDE_Pos (8U)
#define TIM_DIER_UDE_Msk (0x1UL << TIM_DIER_UDE_Pos)
#define TIM_DIER_UDE TIM_DIER_UDE_Msk
#define TIM_DIER_CC1DE_Pos (9U)
#define TIM_DIER_CC1DE_Msk (0x1UL << TIM_DIER_CC1DE_Pos)
#define TIM_DIER_CC1DE TIM_DIER_CC1DE_Msk
#define TIM_DIER_CC2DE_Pos (10U)
#define TIM_DIER_CC2DE_Msk (0x1UL << TIM_DIER_CC2DE_Pos)
#define TIM_DIER_CC2DE TIM_DIER_CC2DE_Msk
#define TIM_DIER_CC3DE_Pos (11U)
#define TIM_DIER_CC3DE_Msk (0x1UL << TIM_DIER_CC3DE_Pos)
#define TIM_DIER_CC3DE TIM_DIER_CC3DE_Msk
#define TIM_DIER_CC4DE_Pos (12U)
#define TIM_DIER_CC4DE_Msk (0x1UL << TIM_DIER_CC4DE_Pos)
#define TIM_DIER_CC4DE TIM_DIER_CC4DE_Msk
#define TIM_DIER_COMDE_Pos (13U)
#define TIM_DIER_COMDE_Msk (0x1UL << TIM_DIER_COMDE_Pos)
#define TIM_DIER_COMDE TIM_DIER_COMDE_Msk
#define TIM_DIER_TDE_Pos (14U)
#define TIM_DIER_TDE_Msk (0x1UL << TIM_DIER_TDE_Pos)
#define TIM_DIER_TDE TIM_DIER_TDE_Msk
#define TIM_SR_UIF_Pos (0U)
#define TIM_SR_UIF_Msk (0x1UL << TIM_SR_UIF_Pos)
#define TIM_SR_UIF TIM_SR_UIF_Msk
#define TIM_SR_CC1IF_Pos (1U)
#define TIM_SR_CC1IF_Msk (0x1UL << TIM_SR_CC1IF_Pos)
#define TIM_SR_CC1IF TIM_SR_CC1IF_Msk
#define TIM_SR_CC2IF_Pos (2U)
#define TIM_SR_CC2IF_Msk (0x1UL << TIM_SR_CC2IF_Pos)
#define TIM_SR_CC2IF TIM_SR_CC2IF_Msk
#define TIM_SR_CC3IF_Pos (3U)
#define TIM_SR_CC3IF_Msk (0x1UL << TIM_SR_CC3IF_Pos)
#define TIM_SR_CC3IF TIM_SR_CC3IF_Msk
#define TIM_SR_CC4IF_Pos (4U)
#define TIM_SR_CC4IF_Msk (0x1UL << TIM_SR_CC4IF_Pos)
#define TIM_SR_CC4IF TIM_SR_CC4IF_Msk
#define TIM_SR_COMIF_Pos (5U)
#define TIM_SR_COMIF_Msk (0x1UL << TIM_SR_COMIF_Pos)
#define TIM_SR_COMIF TIM_SR_COMIF_Msk
#define TIM_SR_TIF_Pos (6U)
#define TIM_SR_TIF_Msk (0x1UL << TIM_SR_TIF_Pos)
#define TIM_SR_TIF TIM_SR_TIF_Msk
#define TIM_SR_BIF_Pos (7U)
#define TIM_SR_BIF_Msk (0x1UL << TIM_SR_BIF_Pos)
#define TIM_SR_BIF TIM_SR_BIF_Msk
#define TIM_SR_B2IF_Pos (8U)
#define TIM_SR_B2IF_Msk (0x1UL << TIM_SR_B2IF_Pos)
#define TIM_SR_B2IF TIM_SR_B2IF_Msk
#define TIM_SR_CC1OF_Pos (9U)
#define TIM_SR_CC1OF_Msk (0x1UL << TIM_SR_CC1OF_Pos)
#define TIM_SR_CC1OF TIM_SR_CC1OF_Msk
#define TIM_SR_CC2OF_Pos (10U)
#define TIM_SR_CC2OF_Msk (0x1UL << TIM_SR_CC2OF_Pos)
#define TIM_SR_CC2OF TIM_SR_CC2OF_Msk
#define TIM_SR_CC3OF_Pos (11U)
#define TIM_SR_CC3OF_Msk (0x1UL << TIM_SR_CC3OF_Pos)
#define TIM_SR_CC3OF TIM_SR_CC3OF_Msk
#define TIM_SR_CC4OF_Pos (12U)
#define TIM_SR_CC4OF_Msk (0x1UL << TIM_SR_CC4OF_Pos)
#define TIM_SR_CC4OF TIM_SR_CC4OF_Msk
#define TIM_SR_SBIF_Pos (13U)
#define TIM_SR_SBIF_Msk (0x1UL << TIM_SR_SBIF_Pos)
#define TIM_SR_SBIF TIM_SR_SBIF_Msk
#define TIM_SR_CC5IF_Pos (16U)
#define TIM_SR_CC5IF_Msk (0x1UL << TIM_SR_CC5IF_Pos)
#define TIM_SR_CC5IF TIM_SR_CC5IF_Msk
#define TIM_SR_CC6IF_Pos (17U)
#define TIM_SR_CC6IF_Msk (0x1UL << TIM_SR_CC6IF_Pos)
#define TIM_SR_CC6IF TIM_SR_CC6IF_Msk
#define TIM_EGR_UG_Pos (0U)
#define TIM_EGR_UG_Msk (0x1UL << TIM_EGR_UG_Pos)
#define TIM_EGR_UG TIM_EGR_UG_Msk
#define TIM_EGR_CC1G_Pos (1U)
#define TIM_EGR_CC1G_Msk (0x1UL << TIM_EGR_CC1G_Pos)
#define TIM_EGR_CC1G TIM_EGR_CC1G_Msk
#define TIM_EGR_CC2G_Pos (2U)
#define TIM_EGR_CC2G_Msk (0x1UL << TIM_EGR_CC2G_Pos)
#define TIM_EGR_CC2G TIM_EGR_CC2G_Msk
#define TIM_EGR_CC3G_Pos (3U)
#define TIM_EGR_CC3G_Msk (0x1UL << TIM_EGR_CC3G_Pos)
#define TIM_EGR_CC3G TIM_EGR_CC3G_Msk
#define TIM_EGR_CC4G_Pos (4U)
#define TIM_EGR_CC4G_Msk (0x1UL << TIM_EGR_CC4G_Pos)
#define TIM_EGR_CC4G TIM_EGR_CC4G_Msk
#define TIM_EGR_COMG_Pos (5U)
#define TIM_EGR_COMG_Msk (0x1UL << TIM_EGR_COMG_Pos)
#define TIM_EGR_COMG TIM_EGR_COMG_Msk
#define TIM_EGR_TG_Pos (6U)
#define TIM_EGR_TG_Msk (0x1UL << TIM_EGR_TG_Pos)
#define TIM_EGR_TG TIM_EGR_TG_Msk
#define TIM_EGR_BG_Pos (7U)
#define TIM_EGR_BG_Msk (0x1UL << TIM_EGR_BG_Pos)
#define TIM_EGR_BG TIM_EGR_BG_Msk
#define TIM_EGR_B2G_Pos (8U)
#define TIM_EGR_B2G_Msk (0x1UL << TIM_EGR_B2G_Pos)
#define TIM_EGR_B2G TIM_EGR_B2G_Msk
#define TIM_CCMR1_CC1S_Pos (0U)
#define TIM_CCMR1_CC1S_Msk (0x3UL << TIM_CCMR1_CC1S_Pos)
#define TIM_CCMR1_CC1S TIM_CCMR1_CC1S_Msk
#define TIM_CCMR1_CC1S_0 (0x1U << TIM_CCMR1_CC1S_Pos)
#define TIM_CCMR1_CC1S_1 (0x2U << TIM_CCMR1_CC1S_Pos)
#define TIM_CCMR1_OC1FE_Pos (2U)
#define TIM_CCMR1_OC1FE_Msk (0x1UL << TIM_CCMR1_OC1FE_Pos)
#define TIM_CCMR1_OC1FE TIM_CCMR1_OC1FE_Msk
#define TIM_CCMR1_OC1PE_Pos (3U)
#define TIM_CCMR1_OC1PE_Msk (0x1UL << TIM_CCMR1_OC1PE_Pos)
#define TIM_CCMR1_OC1PE TIM_CCMR1_OC1PE_Msk
#define TIM_CCMR1_OC1M_Pos (4U)
#define TIM_CCMR1_OC1M_Msk (0x1007UL << TIM_CCMR1_OC1M_Pos)
#define TIM_CCMR1_OC1M TIM_CCMR1_OC1M_Msk
#define TIM_CCMR1_OC1M_0 (0x0001U << TIM_CCMR1_OC1M_Pos)
#define TIM_CCMR1_OC1M_1 (0x0002U << TIM_CCMR1_OC1M_Pos)
#define TIM_CCMR1_OC1M_2 (0x0004U << TIM_CCMR1_OC1M_Pos)
#define TIM_CCMR1_OC1M_3 (0x1000U << TIM_CCMR1_OC1M_Pos)
#define TIM_CCMR1_OC1CE_Pos (7U)
#define TIM_CCMR1_OC1CE_Msk (0x1UL << TIM_CCMR1_OC1CE_Pos)
#define TIM_CCMR1_OC1CE TIM_CCMR1_OC1CE_Msk
#define TIM_CCMR1_CC2S_Pos (8U)
#define TIM_CCMR1_CC2S_Msk (0x3UL << TIM_CCMR1_CC2S_Pos)
#define TIM_CCMR1_CC2S TIM_CCMR1_CC2S_Msk
#define TIM_CCMR1_CC2S_0 (0x1U << TIM_CCMR1_CC2S_Pos)
#define TIM_CCMR1_CC2S_1 (0x2U << TIM_CCMR1_CC2S_Pos)
#define TIM_CCMR1_OC2FE_Pos (10U)
#define TIM_CCMR1_OC2FE_Msk (0x1UL << TIM_CCMR1_OC2FE_Pos)
#define TIM_CCMR1_OC2FE TIM_CCMR1_OC2FE_Msk
#define TIM_CCMR1_OC2PE_Pos (11U)
#define TIM_CCMR1_OC2PE_Msk (0x1UL << TIM_CCMR1_OC2PE_Pos)
#define TIM_CCMR1_OC2PE TIM_CCMR1_OC2PE_Msk
#define TIM_CCMR1_OC2M_Pos (12U)
#define TIM_CCMR1_OC2M_Msk (0x1007UL << TIM_CCMR1_OC2M_Pos)
#define TIM_CCMR1_OC2M TIM_CCMR1_OC2M_Msk
#define TIM_CCMR1_OC2M_0 (0x0001U << TIM_CCMR1_OC2M_Pos)
#define TIM_CCMR1_OC2M_1 (0x0002U << TIM_CCMR1_OC2M_Pos)
#define TIM_CCMR1_OC2M_2 (0x0004U << TIM_CCMR1_OC2M_Pos)
#define TIM_CCMR1_OC2M_3 (0x1000U << TIM_CCMR1_OC2M_Pos)
#define TIM_CCMR1_OC2CE_Pos (15U)
#define TIM_CCMR1_OC2CE_Msk (0x1UL << TIM_CCMR1_OC2CE_Pos)
#define TIM_CCMR1_OC2CE TIM_CCMR1_OC2CE_Msk
#define TIM_CCMR1_IC1PSC_Pos (2U)
#define TIM_CCMR1_IC1PSC_Msk (0x3UL << TIM_CCMR1_IC1PSC_Pos)
#define TIM_CCMR1_IC1PSC TIM_CCMR1_IC1PSC_Msk
#define TIM_CCMR1_IC1PSC_0 (0x1U << TIM_CCMR1_IC1PSC_Pos)
#define TIM_CCMR1_IC1PSC_1 (0x2U << TIM_CCMR1_IC1PSC_Pos)
#define TIM_CCMR1_IC1F_Pos (4U)
#define TIM_CCMR1_IC1F_Msk (0xFUL << TIM_CCMR1_IC1F_Pos)
#define TIM_CCMR1_IC1F TIM_CCMR1_IC1F_Msk
#define TIM_CCMR1_IC1F_0 (0x1U << TIM_CCMR1_IC1F_Pos)
#define TIM_CCMR1_IC1F_1 (0x2U << TIM_CCMR1_IC1F_Pos)
#define TIM_CCMR1_IC1F_2 (0x4U << TIM_CCMR1_IC1F_Pos)
#define TIM_CCMR1_IC1F_3 (0x8U << TIM_CCMR1_IC1F_Pos)
#define TIM_CCMR1_IC2PSC_Pos (10U)
#define TIM_CCMR1_IC2PSC_Msk (0x3UL << TIM_CCMR1_IC2PSC_Pos)
#define TIM_CCMR1_IC2PSC TIM_CCMR1_IC2PSC_Msk
#define TIM_CCMR1_IC2PSC_0 (0x1U << TIM_CCMR1_IC2PSC_Pos)
#define TIM_CCMR1_IC2PSC_1 (0x2U << TIM_CCMR1_IC2PSC_Pos)
#define TIM_CCMR1_IC2F_Pos (12U)
#define TIM_CCMR1_IC2F_Msk (0xFUL << TIM_CCMR1_IC2F_Pos)
#define TIM_CCMR1_IC2F TIM_CCMR1_IC2F_Msk
#define TIM_CCMR1_IC2F_0 (0x1U << TIM_CCMR1_IC2F_Pos)
#define TIM_CCMR1_IC2F_1 (0x2U << TIM_CCMR1_IC2F_Pos)
#define TIM_CCMR1_IC2F_2 (0x4U << TIM_CCMR1_IC2F_Pos)
#define TIM_CCMR1_IC2F_3 (0x8U << TIM_CCMR1_IC2F_Pos)
#define TIM_CCMR2_CC3S_Pos (0U)
#define TIM_CCMR2_CC3S_Msk (0x3UL << TIM_CCMR2_CC3S_Pos)
#define TIM_CCMR2_CC3S TIM_CCMR2_CC3S_Msk
#define TIM_CCMR2_CC3S_0 (0x1U << TIM_CCMR2_CC3S_Pos)
#define TIM_CCMR2_CC3S_1 (0x2U << TIM_CCMR2_CC3S_Pos)
#define TIM_CCMR2_OC3FE_Pos (2U)
#define TIM_CCMR2_OC3FE_Msk (0x1UL << TIM_CCMR2_OC3FE_Pos)
#define TIM_CCMR2_OC3FE TIM_CCMR2_OC3FE_Msk
#define TIM_CCMR2_OC3PE_Pos (3U)
#define TIM_CCMR2_OC3PE_Msk (0x1UL << TIM_CCMR2_OC3PE_Pos)
#define TIM_CCMR2_OC3PE TIM_CCMR2_OC3PE_Msk
#define TIM_CCMR2_OC3M_Pos (4U)
#define TIM_CCMR2_OC3M_Msk (0x1007UL << TIM_CCMR2_OC3M_Pos)
#define TIM_CCMR2_OC3M TIM_CCMR2_OC3M_Msk
#define TIM_CCMR2_OC3M_0 (0x0001U << TIM_CCMR2_OC3M_Pos)
#define TIM_CCMR2_OC3M_1 (0x0002U << TIM_CCMR2_OC3M_Pos)
#define TIM_CCMR2_OC3M_2 (0x0004U << TIM_CCMR2_OC3M_Pos)
#define TIM_CCMR2_OC3M_3 (0x1000U << TIM_CCMR2_OC3M_Pos)
#define TIM_CCMR2_OC3CE_Pos (7U)
#define TIM_CCMR2_OC3CE_Msk (0x1UL << TIM_CCMR2_OC3CE_Pos)
#define TIM_CCMR2_OC3CE TIM_CCMR2_OC3CE_Msk
#define TIM_CCMR2_CC4S_Pos (8U)
#define TIM_CCMR2_CC4S_Msk (0x3UL << TIM_CCMR2_CC4S_Pos)
#define TIM_CCMR2_CC4S TIM_CCMR2_CC4S_Msk
#define TIM_CCMR2_CC4S_0 (0x1U << TIM_CCMR2_CC4S_Pos)
#define TIM_CCMR2_CC4S_1 (0x2U << TIM_CCMR2_CC4S_Pos)
#define TIM_CCMR2_OC4FE_Pos (10U)
#define TIM_CCMR2_OC4FE_Msk (0x1UL << TIM_CCMR2_OC4FE_Pos)
#define TIM_CCMR2_OC4FE TIM_CCMR2_OC4FE_Msk
#define TIM_CCMR2_OC4PE_Pos (11U)
#define TIM_CCMR2_OC4PE_Msk (0x1UL << TIM_CCMR2_OC4PE_Pos)
#define TIM_CCMR2_OC4PE TIM_CCMR2_OC4PE_Msk
#define TIM_CCMR2_OC4M_Pos (12U)
#define TIM_CCMR2_OC4M_Msk (0x1007UL << TIM_CCMR2_OC4M_Pos)
#define TIM_CCMR2_OC4M TIM_CCMR2_OC4M_Msk
#define TIM_CCMR2_OC4M_0 (0x0001U << TIM_CCMR2_OC4M_Pos)
#define TIM_CCMR2_OC4M_1 (0x0002U << TIM_CCMR2_OC4M_Pos)
#define TIM_CCMR2_OC4M_2 (0x0004U << TIM_CCMR2_OC4M_Pos)
#define TIM_CCMR2_OC4M_3 (0x1000U << TIM_CCMR2_OC4M_Pos)
#define TIM_CCMR2_OC4CE_Pos (15U)
#define TIM_CCMR2_OC4CE_Msk (0x1UL << TIM_CCMR2_OC4CE_Pos)
#define TIM_CCMR2_OC4CE TIM_CCMR2_OC4CE_Msk
#define TIM_CCMR2_IC3PSC_Pos (2U)
#define TIM_CCMR2_IC3PSC_Msk (0x3UL << TIM_CCMR2_IC3PSC_Pos)
#define TIM_CCMR2_IC3PSC TIM_CCMR2_IC3PSC_Msk
#define TIM_CCMR2_IC3PSC_0 (0x1U << TIM_CCMR2_IC3PSC_Pos)
#define TIM_CCMR2_IC3PSC_1 (0x2U << TIM_CCMR2_IC3PSC_Pos)
#define TIM_CCMR2_IC3F_Pos (4U)
#define TIM_CCMR2_IC3F_Msk (0xFUL << TIM_CCMR2_IC3F_Pos)
#define TIM_CCMR2_IC3F TIM_CCMR2_IC3F_Msk
#define TIM_CCMR2_IC3F_0 (0x1U << TIM_CCMR2_IC3F_Pos)
#define TIM_CCMR2_IC3F_1 (0x2U << TIM_CCMR2_IC3F_Pos)
#define TIM_CCMR2_IC3F_2 (0x4U << TIM_CCMR2_IC3F_Pos)
#define TIM_CCMR2_IC3F_3 (0x8U << TIM_CCMR2_IC3F_Pos)
#define TIM_CCMR2_IC4PSC_Pos (10U)
#define TIM_CCMR2_IC4PSC_Msk (0x3UL << TIM_CCMR2_IC4PSC_Pos)
#define TIM_CCMR2_IC4PSC TIM_CCMR2_IC4PSC_Msk
#define TIM_CCMR2_IC4PSC_0 (0x1U << TIM_CCMR2_IC4PSC_Pos)
#define TIM_CCMR2_IC4PSC_1 (0x2U << TIM_CCMR2_IC4PSC_Pos)
#define TIM_CCMR2_IC4F_Pos (12U)
#define TIM_CCMR2_IC4F_Msk (0xFUL << TIM_CCMR2_IC4F_Pos)
#define TIM_CCMR2_IC4F TIM_CCMR2_IC4F_Msk
#define TIM_CCMR2_IC4F_0 (0x1U << TIM_CCMR2_IC4F_Pos)
#define TIM_CCMR2_IC4F_1 (0x2U << TIM_CCMR2_IC4F_Pos)
#define TIM_CCMR2_IC4F_2 (0x4U << TIM_CCMR2_IC4F_Pos)
#define TIM_CCMR2_IC4F_3 (0x8U << TIM_CCMR2_IC4F_Pos)
#define TIM_CCMR3_OC5FE_Pos (2U)
#define TIM_CCMR3_OC5FE_Msk (0x1UL << TIM_CCMR3_OC5FE_Pos)
#define TIM_CCMR3_OC5FE TIM_CCMR3_OC5FE_Msk
#define TIM_CCMR3_OC5PE_Pos (3U)
#define TIM_CCMR3_OC5PE_Msk (0x1UL << TIM_CCMR3_OC5PE_Pos)
#define TIM_CCMR3_OC5PE TIM_CCMR3_OC5PE_Msk
#define TIM_CCMR3_OC5M_Pos (4U)
#define TIM_CCMR3_OC5M_Msk (0x1007UL << TIM_CCMR3_OC5M_Pos)
#define TIM_CCMR3_OC5M TIM_CCMR3_OC5M_Msk
#define TIM_CCMR3_OC5M_0 (0x0001U << TIM_CCMR3_OC5M_Pos)
#define TIM_CCMR3_OC5M_1 (0x0002U << TIM_CCMR3_OC5M_Pos)
#define TIM_CCMR3_OC5M_2 (0x0004U << TIM_CCMR3_OC5M_Pos)
#define TIM_CCMR3_OC5M_3 (0x1000U << TIM_CCMR3_OC5M_Pos)
#define TIM_CCMR3_OC5CE_Pos (7U)
#define TIM_CCMR3_OC5CE_Msk (0x1UL << TIM_CCMR3_OC5CE_Pos)
#define TIM_CCMR3_OC5CE TIM_CCMR3_OC5CE_Msk
#define TIM_CCMR3_OC6FE_Pos (10U)
#define TIM_CCMR3_OC6FE_Msk (0x1UL << TIM_CCMR3_OC6FE_Pos)
#define TIM_CCMR3_OC6FE TIM_CCMR3_OC6FE_Msk
#define TIM_CCMR3_OC6PE_Pos (11U)
#define TIM_CCMR3_OC6PE_Msk (0x1UL << TIM_CCMR3_OC6PE_Pos)
#define TIM_CCMR3_OC6PE TIM_CCMR3_OC6PE_Msk
#define TIM_CCMR3_OC6M_Pos (12U)
#define TIM_CCMR3_OC6M_Msk (0x1007UL << TIM_CCMR3_OC6M_Pos)
#define TIM_CCMR3_OC6M TIM_CCMR3_OC6M_Msk
#define TIM_CCMR3_OC6M_0 (0x0001U << TIM_CCMR3_OC6M_Pos)
#define TIM_CCMR3_OC6M_1 (0x0002U << TIM_CCMR3_OC6M_Pos)
#define TIM_CCMR3_OC6M_2 (0x0004U << TIM_CCMR3_OC6M_Pos)
#define TIM_CCMR3_OC6M_3 (0x1000U << TIM_CCMR3_OC6M_Pos)
#define TIM_CCMR3_OC6CE_Pos (15U)
#define TIM_CCMR3_OC6CE_Msk (0x1UL << TIM_CCMR3_OC6CE_Pos)
#define TIM_CCMR3_OC6CE TIM_CCMR3_OC6CE_Msk
#define TIM_CCER_CC1E_Pos (0U)
#define TIM_CCER_CC1E_Msk (0x1UL << TIM_CCER_CC1E_Pos)
#define TIM_CCER_CC1E TIM_CCER_CC1E_Msk
#define TIM_CCER_CC1P_Pos (1U)
#define TIM_CCER_CC1P_Msk (0x1UL << TIM_CCER_CC1P_Pos)
#define TIM_CCER_CC1P TIM_CCER_CC1P_Msk
#define TIM_CCER_CC1NE_Pos (2U)
#define TIM_CCER_CC1NE_Msk (0x1UL << TIM_CCER_CC1NE_Pos)
#define TIM_CCER_CC1NE TIM_CCER_CC1NE_Msk
#define TIM_CCER_CC1NP_Pos (3U)
#define TIM_CCER_CC1NP_Msk (0x1UL << TIM_CCER_CC1NP_Pos)
#define TIM_CCER_CC1NP TIM_CCER_CC1NP_Msk
#define TIM_CCER_CC2E_Pos (4U)
#define TIM_CCER_CC2E_Msk (0x1UL << TIM_CCER_CC2E_Pos)
#define TIM_CCER_CC2E TIM_CCER_CC2E_Msk
#define TIM_CCER_CC2P_Pos (5U)
#define TIM_CCER_CC2P_Msk (0x1UL << TIM_CCER_CC2P_Pos)
#define TIM_CCER_CC2P TIM_CCER_CC2P_Msk
#define TIM_CCER_CC2NE_Pos (6U)
#define TIM_CCER_CC2NE_Msk (0x1UL << TIM_CCER_CC2NE_Pos)
#define TIM_CCER_CC2NE TIM_CCER_CC2NE_Msk
#define TIM_CCER_CC2NP_Pos (7U)
#define TIM_CCER_CC2NP_Msk (0x1UL << TIM_CCER_CC2NP_Pos)
#define TIM_CCER_CC2NP TIM_CCER_CC2NP_Msk
#define TIM_CCER_CC3E_Pos (8U)
#define TIM_CCER_CC3E_Msk (0x1UL << TIM_CCER_CC3E_Pos)
#define TIM_CCER_CC3E TIM_CCER_CC3E_Msk
#define TIM_CCER_CC3P_Pos (9U)
#define TIM_CCER_CC3P_Msk (0x1UL << TIM_CCER_CC3P_Pos)
#define TIM_CCER_CC3P TIM_CCER_CC3P_Msk
#define TIM_CCER_CC3NE_Pos (10U)
#define TIM_CCER_CC3NE_Msk (0x1UL << TIM_CCER_CC3NE_Pos)
#define TIM_CCER_CC3NE TIM_CCER_CC3NE_Msk
#define TIM_CCER_CC3NP_Pos (11U)
#define TIM_CCER_CC3NP_Msk (0x1UL << TIM_CCER_CC3NP_Pos)
#define TIM_CCER_CC3NP TIM_CCER_CC3NP_Msk
#define TIM_CCER_CC4E_Pos (12U)
#define TIM_CCER_CC4E_Msk (0x1UL << TIM_CCER_CC4E_Pos)
#define TIM_CCER_CC4E TIM_CCER_CC4E_Msk
#define TIM_CCER_CC4P_Pos (13U)
#define TIM_CCER_CC4P_Msk (0x1UL << TIM_CCER_CC4P_Pos)
#define TIM_CCER_CC4P TIM_CCER_CC4P_Msk
#define TIM_CCER_CC4NP_Pos (15U)
#define TIM_CCER_CC4NP_Msk (0x1UL << TIM_CCER_CC4NP_Pos)
#define TIM_CCER_CC4NP TIM_CCER_CC4NP_Msk
#define TIM_CCER_CC5E_Pos (16U)
#define TIM_CCER_CC5E_Msk (0x1UL << TIM_CCER_CC5E_Pos)
#define TIM_CCER_CC5E TIM_CCER_CC5E_Msk
#define TIM_CCER_CC5P_Pos (17U)
#define TIM_CCER_CC5P_Msk (0x1UL << TIM_CCER_CC5P_Pos)
#define TIM_CCER_CC5P TIM_CCER_CC5P_Msk
#define TIM_CCER_CC6E_Pos (20U)
#define TIM_CCER_CC6E_Msk (0x1UL << TIM_CCER_CC6E_Pos)
#define TIM_CCER_CC6E TIM_CCER_CC6E_Msk
#define TIM_CCER_CC6P_Pos (21U)
#define TIM_CCER_CC6P_Msk (0x1UL << TIM_CCER_CC6P_Pos)
#define TIM_CCER_CC6P TIM_CCER_CC6P_Msk
#define TIM_CNT_CNT_Pos (0U)
#define TIM_CNT_CNT_Msk (0xFFFFFFFFUL << TIM_CNT_CNT_Pos)
#define TIM_CNT_CNT TIM_CNT_CNT_Msk
#define TIM_CNT_UIFCPY_Pos (31U)
#define TIM_CNT_UIFCPY_Msk (0x1UL << TIM_CNT_UIFCPY_Pos)
#define TIM_CNT_UIFCPY TIM_CNT_UIFCPY_Msk
#define TIM_PSC_PSC_Pos (0U)
#define TIM_PSC_PSC_Msk (0xFFFFUL << TIM_PSC_PSC_Pos)
#define TIM_PSC_PSC TIM_PSC_PSC_Msk
#define TIM_ARR_ARR_Pos (0U)
#define TIM_ARR_ARR_Msk (0xFFFFFFFFUL << TIM_ARR_ARR_Pos)
#define TIM_ARR_ARR TIM_ARR_ARR_Msk
#define TIM_RCR_REP_Pos (0U)
#define TIM_RCR_REP_Msk (0xFFFFUL << TIM_RCR_REP_Pos)
#define TIM_RCR_REP TIM_RCR_REP_Msk
#define TIM_CCR1_CCR1_Pos (0U)
#define TIM_CCR1_CCR1_Msk (0xFFFFUL << TIM_CCR1_CCR1_Pos)
#define TIM_CCR1_CCR1 TIM_CCR1_CCR1_Msk
#define TIM_CCR2_CCR2_Pos (0U)
#define TIM_CCR2_CCR2_Msk (0xFFFFUL << TIM_CCR2_CCR2_Pos)
#define TIM_CCR2_CCR2 TIM_CCR2_CCR2_Msk
#define TIM_CCR3_CCR3_Pos (0U)
#define TIM_CCR3_CCR3_Msk (0xFFFFUL << TIM_CCR3_CCR3_Pos)
#define TIM_CCR3_CCR3 TIM_CCR3_CCR3_Msk
#define TIM_CCR4_CCR4_Pos (0U)
#define TIM_CCR4_CCR4_Msk (0xFFFFUL << TIM_CCR4_CCR4_Pos)
#define TIM_CCR4_CCR4 TIM_CCR4_CCR4_Msk
#define TIM_CCR5_CCR5_Pos (0U)
#define TIM_CCR5_CCR5_Msk (0xFFFFFFFFUL << TIM_CCR5_CCR5_Pos)
#define TIM_CCR5_CCR5 TIM_CCR5_CCR5_Msk
#define TIM_CCR5_GC5C1_Pos (29U)
#define TIM_CCR5_GC5C1_Msk (0x1UL << TIM_CCR5_GC5C1_Pos)
#define TIM_CCR5_GC5C1 TIM_CCR5_GC5C1_Msk
#define TIM_CCR5_GC5C2_Pos (30U)
#define TIM_CCR5_GC5C2_Msk (0x1UL << TIM_CCR5_GC5C2_Pos)
#define TIM_CCR5_GC5C2 TIM_CCR5_GC5C2_Msk
#define TIM_CCR5_GC5C3_Pos (31U)
#define TIM_CCR5_GC5C3_Msk (0x1UL << TIM_CCR5_GC5C3_Pos)
#define TIM_CCR5_GC5C3 TIM_CCR5_GC5C3_Msk
#define TIM_CCR6_CCR6_Pos (0U)
#define TIM_CCR6_CCR6_Msk (0xFFFFUL << TIM_CCR6_CCR6_Pos)
#define TIM_CCR6_CCR6 TIM_CCR6_CCR6_Msk
#define TIM_BDTR_DTG_Pos (0U)
#define TIM_BDTR_DTG_Msk (0xFFUL << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG TIM_BDTR_DTG_Msk
#define TIM_BDTR_DTG_0 (0x01U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_1 (0x02U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_2 (0x04U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_3 (0x08U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_4 (0x10U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_5 (0x20U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_6 (0x40U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_DTG_7 (0x80U << TIM_BDTR_DTG_Pos)
#define TIM_BDTR_LOCK_Pos (8U)
#define TIM_BDTR_LOCK_Msk (0x3UL << TIM_BDTR_LOCK_Pos)
#define TIM_BDTR_LOCK TIM_BDTR_LOCK_Msk
#define TIM_BDTR_LOCK_0 (0x1U << TIM_BDTR_LOCK_Pos)
#define TIM_BDTR_LOCK_1 (0x2U << TIM_BDTR_LOCK_Pos)
#define TIM_BDTR_OSSI_Pos (10U)
#define TIM_BDTR_OSSI_Msk (0x1UL << TIM_BDTR_OSSI_Pos)
#define TIM_BDTR_OSSI TIM_BDTR_OSSI_Msk
#define TIM_BDTR_OSSR_Pos (11U)
#define TIM_BDTR_OSSR_Msk (0x1UL << TIM_BDTR_OSSR_Pos)
#define TIM_BDTR_OSSR TIM_BDTR_OSSR_Msk
#define TIM_BDTR_BKE_Pos (12U)
#define TIM_BDTR_BKE_Msk (0x1UL << TIM_BDTR_BKE_Pos)
#define TIM_BDTR_BKE TIM_BDTR_BKE_Msk
#define TIM_BDTR_BKP_Pos (13U)
#define TIM_BDTR_BKP_Msk (0x1UL << TIM_BDTR_BKP_Pos)
#define TIM_BDTR_BKP TIM_BDTR_BKP_Msk
#define TIM_BDTR_AOE_Pos (14U)
#define TIM_BDTR_AOE_Msk (0x1UL << TIM_BDTR_AOE_Pos)
#define TIM_BDTR_AOE TIM_BDTR_AOE_Msk
#define TIM_BDTR_MOE_Pos (15U)
#define TIM_BDTR_MOE_Msk (0x1UL << TIM_BDTR_MOE_Pos)
#define TIM_BDTR_MOE TIM_BDTR_MOE_Msk
#define TIM_BDTR_BKF_Pos (16U)
#define TIM_BDTR_BKF_Msk (0xFUL << TIM_BDTR_BKF_Pos)
#define TIM_BDTR_BKF TIM_BDTR_BKF_Msk
#define TIM_BDTR_BK2F_Pos (20U)
#define TIM_BDTR_BK2F_Msk (0xFUL << TIM_BDTR_BK2F_Pos)
#define TIM_BDTR_BK2F TIM_BDTR_BK2F_Msk
#define TIM_BDTR_BK2E_Pos (24U)
#define TIM_BDTR_BK2E_Msk (0x1UL << TIM_BDTR_BK2E_Pos)
#define TIM_BDTR_BK2E TIM_BDTR_BK2E_Msk
#define TIM_BDTR_BK2P_Pos (25U)
#define TIM_BDTR_BK2P_Msk (0x1UL << TIM_BDTR_BK2P_Pos)
#define TIM_BDTR_BK2P TIM_BDTR_BK2P_Msk
#define TIM_BDTR_BKDSRM_Pos (26U)
#define TIM_BDTR_BKDSRM_Msk (0x1UL << TIM_BDTR_BKDSRM_Pos)
#define TIM_BDTR_BKDSRM TIM_BDTR_BKDSRM_Msk
#define TIM_BDTR_BK2DSRM_Pos (27U)
#define TIM_BDTR_BK2DSRM_Msk (0x1UL << TIM_BDTR_BK2DSRM_Pos)
#define TIM_BDTR_BK2DSRM TIM_BDTR_BK2DSRM_Msk
#define TIM_BDTR_BKBID_Pos (28U)
#define TIM_BDTR_BKBID_Msk (0x1UL << TIM_BDTR_BKBID_Pos)
#define TIM_BDTR_BKBID TIM_BDTR_BKBID_Msk
#define TIM_BDTR_BK2BID_Pos (29U)
#define TIM_BDTR_BK2BID_Msk (0x1UL << TIM_BDTR_BK2BID_Pos)
#define TIM_BDTR_BK2BID TIM_BDTR_BK2BID_Msk
#define TIM_DCR_DBA_Pos (0U)
#define TIM_DCR_DBA_Msk (0x1FUL << TIM_DCR_DBA_Pos)
#define TIM_DCR_DBA TIM_DCR_DBA_Msk
#define TIM_DCR_DBA_0 (0x01U << TIM_DCR_DBA_Pos)
#define TIM_DCR_DBA_1 (0x02U << TIM_DCR_DBA_Pos)
#define TIM_DCR_DBA_2 (0x04U << TIM_DCR_DBA_Pos)
#define TIM_DCR_DBA_3 (0x08U << TIM_DCR_DBA_Pos)
#define TIM_DCR_DBA_4 (0x10U << TIM_DCR_DBA_Pos)
#define TIM_DCR_DBL_Pos (8U)
#define TIM_DCR_DBL_Msk (0x1FUL << TIM_DCR_DBL_Pos)
#define TIM_DCR_DBL TIM_DCR_DBL_Msk
#define TIM_DCR_DBL_0 (0x01U << TIM_DCR_DBL_Pos)
#define TIM_DCR_DBL_1 (0x02U << TIM_DCR_DBL_Pos)
#define TIM_DCR_DBL_2 (0x04U << TIM_DCR_DBL_Pos)
#define TIM_DCR_DBL_3 (0x08U << TIM_DCR_DBL_Pos)
#define TIM_DCR_DBL_4 (0x10U << TIM_DCR_DBL_Pos)
#define TIM_DMAR_DMAB_Pos (0U)
#define TIM_DMAR_DMAB_Msk (0xFFFFUL << TIM_DMAR_DMAB_Pos)
#define TIM_DMAR_DMAB TIM_DMAR_DMAB_Msk
#define TIM1_OR_ETR_ADC1_RMP_Pos (0U)
#define TIM1_OR_ETR_ADC1_RMP_Msk (0x3UL << TIM1_OR_ETR_ADC1_RMP_Pos)
#define TIM1_OR_ETR_ADC1_RMP TIM1_OR_ETR_ADC1_RMP_Msk
#define TIM1_OR_ETR_ADC1_RMP_0 (0x1U << TIM1_OR_ETR_ADC1_RMP_Pos)
#define TIM1_OR_ETR_ADC1_RMP_1 (0x2U << TIM1_OR_ETR_ADC1_RMP_Pos)
#define TIM1_OR_TI1_RMP_Pos (4U)
#define TIM1_OR_TI1_RMP_Msk (0x1UL << TIM1_OR_TI1_RMP_Pos)
#define TIM1_OR_TI1_RMP TIM1_OR_TI1_RMP_Msk
#define TIM2_OR_TI4_RMP_Pos (2U)
#define TIM2_OR_TI4_RMP_Msk (0x3UL << TIM2_OR_TI4_RMP_Pos)
#define TIM2_OR_TI4_RMP TIM2_OR_TI4_RMP_Msk
#define TIM2_OR_TI4_RMP_0 (0x1U << TIM2_OR_TI4_RMP_Pos)
#define TIM2_OR_TI4_RMP_1 (0x2U << TIM2_OR_TI4_RMP_Pos)
#define TIM2_OR_ETR_RMP_Pos (1U)
#define TIM2_OR_ETR_RMP_Msk (0x1UL << TIM2_OR_ETR_RMP_Pos)
#define TIM2_OR_ETR_RMP TIM2_OR_ETR_RMP_Msk
#define TIM2_OR_ITR1_RMP_Pos (0U)
#define TIM2_OR_ITR1_RMP_Msk (0x1UL << TIM2_OR_ITR1_RMP_Pos)
#define TIM2_OR_ITR1_RMP TIM2_OR_ITR1_RMP_Msk
#define TIM16_OR_TI1_RMP_Pos (0U)
#define TIM16_OR_TI1_RMP_Msk (0x3UL << TIM16_OR_TI1_RMP_Pos)
#define TIM16_OR_TI1_RMP TIM16_OR_TI1_RMP_Msk
#define TIM16_OR_TI1_RMP_0 (0x1U << TIM16_OR_TI1_RMP_Pos)
#define TIM16_OR_TI1_RMP_1 (0x2U << TIM16_OR_TI1_RMP_Pos)
#define TIM17_OR_TI1_RMP_Pos (0U)
#define TIM17_OR_TI1_RMP_Msk (0x3UL << TIM17_OR_TI1_RMP_Pos)
#define TIM17_OR_TI1_RMP TIM17_OR_TI1_RMP_Msk
#define TIM17_OR_TI1_RMP_0 (0x1U << TIM17_OR_TI1_RMP_Pos)
#define TIM17_OR_TI1_RMP_1 (0x2U << TIM17_OR_TI1_RMP_Pos)
#define TIM1_AF1_BKINE_Pos (0U)
#define TIM1_AF1_BKINE_Msk (0x1UL << TIM1_AF1_BKINE_Pos)
#define TIM1_AF1_BKINE TIM1_AF1_BKINE_Msk
#define TIM1_AF1_BKCMP1E_Pos (1U)
#define TIM1_AF1_BKCMP1E_Msk (0x1UL << TIM1_AF1_BKCMP1E_Pos)
#define TIM1_AF1_BKCMP1E TIM1_AF1_BKCMP1E_Msk
#define TIM1_AF1_BKCMP2E_Pos (2U)
#define TIM1_AF1_BKCMP2E_Msk (0x1UL << TIM1_AF1_BKCMP2E_Pos)
#define TIM1_AF1_BKCMP2E TIM1_AF1_BKCMP2E_Msk
#define TIM1_AF1_BKINP_Pos (9U)
#define TIM1_AF1_BKINP_Msk (0x1UL << TIM1_AF1_BKINP_Pos)
#define TIM1_AF1_BKINP TIM1_AF1_BKINP_Msk
#define TIM1_AF1_BKCMP1P_Pos (10U)
#define TIM1_AF1_BKCMP1P_Msk (0x1UL << TIM1_AF1_BKCMP1P_Pos)
#define TIM1_AF1_BKCMP1P TIM1_AF1_BKCMP1P_Msk
#define TIM1_AF1_BKCMP2P_Pos (11U)
#define TIM1_AF1_BKCMP2P_Msk (0x1UL << TIM1_AF1_BKCMP2P_Pos)
#define TIM1_AF1_BKCMP2P TIM1_AF1_BKCMP2P_Msk
#define TIM1_AF1_ETRSEL_Pos (14U)
#define TIM1_AF1_ETRSEL_Msk (0x7UL << TIM1_AF1_ETRSEL_Pos)
#define TIM1_AF1_ETRSEL TIM1_AF1_ETRSEL_Msk
#define TIM1_AF1_ETRSEL_0 (0x1U << TIM1_AF1_ETRSEL_Pos)
#define TIM1_AF1_ETRSEL_1 (0x2U << TIM1_AF1_ETRSEL_Pos)
#define TIM1_AF1_ETRSEL_2 (0x4U << TIM1_AF1_ETRSEL_Pos)
#define TIM2_AF1_ETRSEL_Pos (14U)
#define TIM2_AF1_ETRSEL_Msk (0x7UL << TIM2_AF1_ETRSEL_Pos)
#define TIM2_AF1_ETRSEL (0x00001C000)
#define TIM2_AF1_ETRSEL_0 (0x000004000)
#define TIM2_AF1_ETRSEL_1 (0x000008000)
#define TIM2_AF1_ETRSEL_2 (0x000010000)
#define TIM16_AF1_BKINE_Pos (0U)
#define TIM16_AF1_BKINE_Msk (0x1UL << TIM16_AF1_BKINE_Pos)
#define TIM16_AF1_BKINE TIM16_AF1_BKINE_Msk
#define TIM16_AF1_BKCMP1E_Pos (1U)
#define TIM16_AF1_BKCMP1E_Msk (0x1UL << TIM16_AF1_BKCMP1E_Pos)
#define TIM16_AF1_BKCMP1E TIM16_AF1_BKCMP1E_Msk
#define TIM16_AF1_BKCMP2E_Pos (2U)
#define TIM16_AF1_BKCMP2E_Msk (0x1UL << TIM16_AF1_BKCMP2E_Pos)
#define TIM16_AF1_BKCMP2E TIM16_AF1_BKCMP2E_Msk
#define TIM16_AF1_BKINP_Pos (9U)
#define TIM16_AF1_BKINP_Msk (0x1UL << TIM16_AF1_BKINP_Pos)
#define TIM16_AF1_BKINP TIM16_AF1_BKINP_Msk
#define TIM16_AF1_BKCMP1P_Pos (10U)
#define TIM16_AF1_BKCMP1P_Msk (0x1UL << TIM16_AF1_BKCMP1P_Pos)
#define TIM16_AF1_BKCMP1P TIM16_AF1_BKCMP1P_Msk
#define TIM16_AF1_BKCMP2P_Pos (11U)
#define TIM16_AF1_BKCMP2P_Msk (0x1UL << TIM16_AF1_BKCMP2P_Pos)
#define TIM16_AF1_BKCMP2P TIM16_AF1_BKCMP2P_Msk
#define TIM17_AF1_BKINE_Pos (0U)
#define TIM17_AF1_BKINE_Msk (0x1UL << TIM17_AF1_BKINE_Pos)
#define TIM17_AF1_BKINE TIM17_AF1_BKINE_Msk
#define TIM17_AF1_BKCMP1E_Pos (1U)
#define TIM17_AF1_BKCMP1E_Msk (0x1UL << TIM17_AF1_BKCMP1E_Pos)
#define TIM17_AF1_BKCMP1E TIM17_AF1_BKCMP1E_Msk
#define TIM17_AF1_BKCMP2E_Pos (2U)
#define TIM17_AF1_BKCMP2E_Msk (0x1UL << TIM17_AF1_BKCMP2E_Pos)
#define TIM17_AF1_BKCMP2E TIM17_AF1_BKCMP2E_Msk
#define TIM17_AF1_BKINP_Pos (9U)
#define TIM17_AF1_BKINP_Msk (0x1UL << TIM17_AF1_BKINP_Pos)
#define TIM17_AF1_BKINP TIM17_AF1_BKINP_Msk
#define TIM17_AF1_BKCMP1P_Pos (10U)
#define TIM17_AF1_BKCMP1P_Msk (0x1UL << TIM17_AF1_BKCMP1P_Pos)
#define TIM17_AF1_BKCMP1P TIM17_AF1_BKCMP1P_Msk
#define TIM17_AF1_BKCMP2P_Pos (11U)
#define TIM17_AF1_BKCMP2P_Msk (0x1UL << TIM17_AF1_BKCMP2P_Pos)
#define TIM17_AF1_BKCMP2P TIM17_AF1_BKCMP2P_Msk
#define TIM1_AF2_BK2INE_Pos (0U)
#define TIM1_AF2_BK2INE_Msk (0x1UL << TIM1_AF2_BK2INE_Pos)
#define TIM1_AF2_BK2INE TIM1_AF2_BK2INE_Msk
#define TIM1_AF2_BK2CMP1E_Pos (1U)
#define TIM1_AF2_BK2CMP1E_Msk (0x1UL << TIM1_AF2_BK2CMP1E_Pos)
#define TIM1_AF2_BK2CMP1E TIM1_AF2_BK2CMP1E_Msk
#define TIM1_AF2_BK2CMP2E_Pos (2U)
#define TIM1_AF2_BK2CMP2E_Msk (0x1UL << TIM1_AF2_BK2CMP2E_Pos)
#define TIM1_AF2_BK2CMP2E TIM1_AF2_BK2CMP2E_Msk
#define TIM1_AF2_BK2INP_Pos (9U)
#define TIM1_AF2_BK2INP_Msk (0x1UL << TIM1_AF2_BK2INP_Pos)
#define TIM1_AF2_BK2INP TIM1_AF2_BK2INP_Msk
#define TIM1_AF2_BK2CMP1P_Pos (10U)
#define TIM1_AF2_BK2CMP1P_Msk (0x1UL << TIM1_AF2_BK2CMP1P_Pos)
#define TIM1_AF2_BK2CMP1P TIM1_AF2_BK2CMP1P_Msk
#define TIM1_AF2_BK2CMP2P_Pos (11U)
#define TIM1_AF2_BK2CMP2P_Msk (0x1UL << TIM1_AF2_BK2CMP2P_Pos)
#define TIM1_AF2_BK2CMP2P TIM1_AF2_BK2CMP2P_Msk
#define LPTIM_ISR_CMPM_Pos (0U)
#define LPTIM_ISR_CMPM_Msk (0x1UL << LPTIM_ISR_CMPM_Pos)
#define LPTIM_ISR_CMPM LPTIM_ISR_CMPM_Msk
#define LPTIM_ISR_ARRM_Pos (1U)
#define LPTIM_ISR_ARRM_Msk (0x1UL << LPTIM_ISR_ARRM_Pos)
#define LPTIM_ISR_ARRM LPTIM_ISR_ARRM_Msk
#define LPTIM_ISR_EXTTRIG_Pos (2U)
#define LPTIM_ISR_EXTTRIG_Msk (0x1UL << LPTIM_ISR_EXTTRIG_Pos)
#define LPTIM_ISR_EXTTRIG LPTIM_ISR_EXTTRIG_Msk
#define LPTIM_ISR_CMPOK_Pos (3U)
#define LPTIM_ISR_CMPOK_Msk (0x1UL << LPTIM_ISR_CMPOK_Pos)
#define LPTIM_ISR_CMPOK LPTIM_ISR_CMPOK_Msk
#define LPTIM_ISR_ARROK_Pos (4U)
#define LPTIM_ISR_ARROK_Msk (0x1UL << LPTIM_ISR_ARROK_Pos)
#define LPTIM_ISR_ARROK LPTIM_ISR_ARROK_Msk
#define LPTIM_ISR_UP_Pos (5U)
#define LPTIM_ISR_UP_Msk (0x1UL << LPTIM_ISR_UP_Pos)
#define LPTIM_ISR_UP LPTIM_ISR_UP_Msk
#define LPTIM_ISR_DOWN_Pos (6U)
#define LPTIM_ISR_DOWN_Msk (0x1UL << LPTIM_ISR_DOWN_Pos)
#define LPTIM_ISR_DOWN LPTIM_ISR_DOWN_Msk
#define LPTIM_ICR_CMPMCF_Pos (0U)
#define LPTIM_ICR_CMPMCF_Msk (0x1UL << LPTIM_ICR_CMPMCF_Pos)
#define LPTIM_ICR_CMPMCF LPTIM_ICR_CMPMCF_Msk
#define LPTIM_ICR_ARRMCF_Pos (1U)
#define LPTIM_ICR_ARRMCF_Msk (0x1UL << LPTIM_ICR_ARRMCF_Pos)
#define LPTIM_ICR_ARRMCF LPTIM_ICR_ARRMCF_Msk
#define LPTIM_ICR_EXTTRIGCF_Pos (2U)
#define LPTIM_ICR_EXTTRIGCF_Msk (0x1UL << LPTIM_ICR_EXTTRIGCF_Pos)
#define LPTIM_ICR_EXTTRIGCF LPTIM_ICR_EXTTRIGCF_Msk
#define LPTIM_ICR_CMPOKCF_Pos (3U)
#define LPTIM_ICR_CMPOKCF_Msk (0x1UL << LPTIM_ICR_CMPOKCF_Pos)
#define LPTIM_ICR_CMPOKCF LPTIM_ICR_CMPOKCF_Msk
#define LPTIM_ICR_ARROKCF_Pos (4U)
#define LPTIM_ICR_ARROKCF_Msk (0x1UL << LPTIM_ICR_ARROKCF_Pos)
#define LPTIM_ICR_ARROKCF LPTIM_ICR_ARROKCF_Msk
#define LPTIM_ICR_UPCF_Pos (5U)
#define LPTIM_ICR_UPCF_Msk (0x1UL << LPTIM_ICR_UPCF_Pos)
#define LPTIM_ICR_UPCF LPTIM_ICR_UPCF_Msk
#define LPTIM_ICR_DOWNCF_Pos (6U)
#define LPTIM_ICR_DOWNCF_Msk (0x1UL << LPTIM_ICR_DOWNCF_Pos)
#define LPTIM_ICR_DOWNCF LPTIM_ICR_DOWNCF_Msk
#define LPTIM_IER_CMPMIE_Pos (0U)
#define LPTIM_IER_CMPMIE_Msk (0x1UL << LPTIM_IER_CMPMIE_Pos)
#define LPTIM_IER_CMPMIE LPTIM_IER_CMPMIE_Msk
#define LPTIM_IER_ARRMIE_Pos (1U)
#define LPTIM_IER_ARRMIE_Msk (0x1UL << LPTIM_IER_ARRMIE_Pos)
#define LPTIM_IER_ARRMIE LPTIM_IER_ARRMIE_Msk
#define LPTIM_IER_EXTTRIGIE_Pos (2U)
#define LPTIM_IER_EXTTRIGIE_Msk (0x1UL << LPTIM_IER_EXTTRIGIE_Pos)
#define LPTIM_IER_EXTTRIGIE LPTIM_IER_EXTTRIGIE_Msk
#define LPTIM_IER_CMPOKIE_Pos (3U)
#define LPTIM_IER_CMPOKIE_Msk (0x1UL << LPTIM_IER_CMPOKIE_Pos)
#define LPTIM_IER_CMPOKIE LPTIM_IER_CMPOKIE_Msk
#define LPTIM_IER_ARROKIE_Pos (4U)
#define LPTIM_IER_ARROKIE_Msk (0x1UL << LPTIM_IER_ARROKIE_Pos)
#define LPTIM_IER_ARROKIE LPTIM_IER_ARROKIE_Msk
#define LPTIM_IER_UPIE_Pos (5U)
#define LPTIM_IER_UPIE_Msk (0x1UL << LPTIM_IER_UPIE_Pos)
#define LPTIM_IER_UPIE LPTIM_IER_UPIE_Msk
#define LPTIM_IER_DOWNIE_Pos (6U)
#define LPTIM_IER_DOWNIE_Msk (0x1UL << LPTIM_IER_DOWNIE_Pos)
#define LPTIM_IER_DOWNIE LPTIM_IER_DOWNIE_Msk
#define LPTIM_CFGR_CKSEL_Pos (0U)
#define LPTIM_CFGR_CKSEL_Msk (0x1UL << LPTIM_CFGR_CKSEL_Pos)
#define LPTIM_CFGR_CKSEL LPTIM_CFGR_CKSEL_Msk
#define LPTIM_CFGR_CKPOL_Pos (1U)
#define LPTIM_CFGR_CKPOL_Msk (0x3UL << LPTIM_CFGR_CKPOL_Pos)
#define LPTIM_CFGR_CKPOL LPTIM_CFGR_CKPOL_Msk
#define LPTIM_CFGR_CKPOL_0 (0x1U << LPTIM_CFGR_CKPOL_Pos)
#define LPTIM_CFGR_CKPOL_1 (0x2U << LPTIM_CFGR_CKPOL_Pos)
#define LPTIM_CFGR_CKFLT_Pos (3U)
#define LPTIM_CFGR_CKFLT_Msk (0x3UL << LPTIM_CFGR_CKFLT_Pos)
#define LPTIM_CFGR_CKFLT LPTIM_CFGR_CKFLT_Msk
#define LPTIM_CFGR_CKFLT_0 (0x1U << LPTIM_CFGR_CKFLT_Pos)
#define LPTIM_CFGR_CKFLT_1 (0x2U << LPTIM_CFGR_CKFLT_Pos)
#define LPTIM_CFGR_TRGFLT_Pos (6U)
#define LPTIM_CFGR_TRGFLT_Msk (0x3UL << LPTIM_CFGR_TRGFLT_Pos)
#define LPTIM_CFGR_TRGFLT LPTIM_CFGR_TRGFLT_Msk
#define LPTIM_CFGR_TRGFLT_0 (0x1U << LPTIM_CFGR_TRGFLT_Pos)
#define LPTIM_CFGR_TRGFLT_1 (0x2U << LPTIM_CFGR_TRGFLT_Pos)
#define LPTIM_CFGR_PRESC_Pos (9U)
#define LPTIM_CFGR_PRESC_Msk (0x7UL << LPTIM_CFGR_PRESC_Pos)
#define LPTIM_CFGR_PRESC LPTIM_CFGR_PRESC_Msk
#define LPTIM_CFGR_PRESC_0 (0x1U << LPTIM_CFGR_PRESC_Pos)
#define LPTIM_CFGR_PRESC_1 (0x2U << LPTIM_CFGR_PRESC_Pos)
#define LPTIM_CFGR_PRESC_2 (0x4U << LPTIM_CFGR_PRESC_Pos)
#define LPTIM_CFGR_TRIGSEL_Pos (13U)
#define LPTIM_CFGR_TRIGSEL_Msk (0x7UL << LPTIM_CFGR_TRIGSEL_Pos)
#define LPTIM_CFGR_TRIGSEL LPTIM_CFGR_TRIGSEL_Msk
#define LPTIM_CFGR_TRIGSEL_0 (0x1U << LPTIM_CFGR_TRIGSEL_Pos)
#define LPTIM_CFGR_TRIGSEL_1 (0x2U << LPTIM_CFGR_TRIGSEL_Pos)
#define LPTIM_CFGR_TRIGSEL_2 (0x4U << LPTIM_CFGR_TRIGSEL_Pos)
#define LPTIM_CFGR_TRIGEN_Pos (17U)
#define LPTIM_CFGR_TRIGEN_Msk (0x3UL << LPTIM_CFGR_TRIGEN_Pos)
#define LPTIM_CFGR_TRIGEN LPTIM_CFGR_TRIGEN_Msk
#define LPTIM_CFGR_TRIGEN_0 (0x1U << LPTIM_CFGR_TRIGEN_Pos)
#define LPTIM_CFGR_TRIGEN_1 (0x2U << LPTIM_CFGR_TRIGEN_Pos)
#define LPTIM_CFGR_TIMOUT_Pos (19U)
#define LPTIM_CFGR_TIMOUT_Msk (0x1UL << LPTIM_CFGR_TIMOUT_Pos)
#define LPTIM_CFGR_TIMOUT LPTIM_CFGR_TIMOUT_Msk
#define LPTIM_CFGR_WAVE_Pos (20U)
#define LPTIM_CFGR_WAVE_Msk (0x1UL << LPTIM_CFGR_WAVE_Pos)
#define LPTIM_CFGR_WAVE LPTIM_CFGR_WAVE_Msk
#define LPTIM_CFGR_WAVPOL_Pos (21U)
#define LPTIM_CFGR_WAVPOL_Msk (0x1UL << LPTIM_CFGR_WAVPOL_Pos)
#define LPTIM_CFGR_WAVPOL LPTIM_CFGR_WAVPOL_Msk
#define LPTIM_CFGR_PRELOAD_Pos (22U)
#define LPTIM_CFGR_PRELOAD_Msk (0x1UL << LPTIM_CFGR_PRELOAD_Pos)
#define LPTIM_CFGR_PRELOAD LPTIM_CFGR_PRELOAD_Msk
#define LPTIM_CFGR_COUNTMODE_Pos (23U)
#define LPTIM_CFGR_COUNTMODE_Msk (0x1UL << LPTIM_CFGR_COUNTMODE_Pos)
#define LPTIM_CFGR_COUNTMODE LPTIM_CFGR_COUNTMODE_Msk
#define LPTIM_CFGR_ENC_Pos (24U)
#define LPTIM_CFGR_ENC_Msk (0x1UL << LPTIM_CFGR_ENC_Pos)
#define LPTIM_CFGR_ENC LPTIM_CFGR_ENC_Msk
#define LPTIM_CR_ENABLE_Pos (0U)
#define LPTIM_CR_ENABLE_Msk (0x1UL << LPTIM_CR_ENABLE_Pos)
#define LPTIM_CR_ENABLE LPTIM_CR_ENABLE_Msk
#define LPTIM_CR_SNGSTRT_Pos (1U)
#define LPTIM_CR_SNGSTRT_Msk (0x1UL << LPTIM_CR_SNGSTRT_Pos)
#define LPTIM_CR_SNGSTRT LPTIM_CR_SNGSTRT_Msk
#define LPTIM_CR_CNTSTRT_Pos (2U)
#define LPTIM_CR_CNTSTRT_Msk (0x1UL << LPTIM_CR_CNTSTRT_Pos)
#define LPTIM_CR_CNTSTRT LPTIM_CR_CNTSTRT_Msk
#define LPTIM_CR_COUNTRST_Pos (3U)
#define LPTIM_CR_COUNTRST_Msk (0x1UL << LPTIM_CR_COUNTRST_Pos)
#define LPTIM_CR_COUNTRST LPTIM_CR_COUNTRST_Msk
#define LPTIM_CR_RSTARE_Pos (4U)
#define LPTIM_CR_RSTARE_Msk (0x1UL << LPTIM_CR_RSTARE_Pos)
#define LPTIM_CR_RSTARE LPTIM_CR_RSTARE_Msk
#define LPTIM_CMP_CMP_Pos (0U)
#define LPTIM_CMP_CMP_Msk (0xFFFFUL << LPTIM_CMP_CMP_Pos)
#define LPTIM_CMP_CMP LPTIM_CMP_CMP_Msk
#define LPTIM_ARR_ARR_Pos (0U)
#define LPTIM_ARR_ARR_Msk (0xFFFFUL << LPTIM_ARR_ARR_Pos)
#define LPTIM_ARR_ARR LPTIM_ARR_ARR_Msk
#define LPTIM_CNT_CNT_Pos (0U)
#define LPTIM_CNT_CNT_Msk (0xFFFFUL << LPTIM_CNT_CNT_Pos)
#define LPTIM_CNT_CNT LPTIM_CNT_CNT_Msk
#define LPTIM_OR_OR_Pos (0U)
#define LPTIM_OR_OR_Msk (0x3UL << LPTIM_OR_OR_Pos)
#define LPTIM_OR_OR LPTIM_OR_OR_Msk
#define LPTIM_OR_OR_0 (0x1U << LPTIM_OR_OR_Pos)
#define LPTIM_OR_OR_1 (0x2U << LPTIM_OR_OR_Pos)
#define IPCC_C1CR_RXOIE_Pos (0U)
#define IPCC_C1CR_RXOIE_Msk (0x1UL << IPCC_C1CR_RXOIE_Pos)
#define IPCC_C1CR_RXOIE IPCC_C1CR_RXOIE_Msk
#define IPCC_C1CR_TXFIE_Pos (16U)
#define IPCC_C1CR_TXFIE_Msk (0x1UL << IPCC_C1CR_TXFIE_Pos)
#define IPCC_C1CR_TXFIE IPCC_C1CR_TXFIE_Msk
#define IPCC_C1MR_CH1OM_Pos (0U)
#define IPCC_C1MR_CH1OM_Msk (0x1UL << IPCC_C1MR_CH1OM_Pos)
#define IPCC_C1MR_CH1OM IPCC_C1MR_CH1OM_Msk
#define IPCC_C1MR_CH2OM_Pos (1U)
#define IPCC_C1MR_CH2OM_Msk (0x1UL << IPCC_C1MR_CH2OM_Pos)
#define IPCC_C1MR_CH2OM IPCC_C1MR_CH2OM_Msk
#define IPCC_C1MR_CH3OM_Pos (2U)
#define IPCC_C1MR_CH3OM_Msk (0x1UL << IPCC_C1MR_CH3OM_Pos)
#define IPCC_C1MR_CH3OM IPCC_C1MR_CH3OM_Msk
#define IPCC_C1MR_CH4OM_Pos (3U)
#define IPCC_C1MR_CH4OM_Msk (0x1UL << IPCC_C1MR_CH4OM_Pos)
#define IPCC_C1MR_CH4OM IPCC_C1MR_CH4OM_Msk
#define IPCC_C1MR_CH5OM_Pos (4U)
#define IPCC_C1MR_CH5OM_Msk (0x1UL << IPCC_C1MR_CH5OM_Pos)
#define IPCC_C1MR_CH5OM IPCC_C1MR_CH5OM_Msk
#define IPCC_C1MR_CH6OM_Pos (5U)
#define IPCC_C1MR_CH6OM_Msk (0x1UL << IPCC_C1MR_CH6OM_Pos)
#define IPCC_C1MR_CH6OM IPCC_C1MR_CH6OM_Msk
#define IPCC_C1MR_CH1FM_Pos (16U)
#define IPCC_C1MR_CH1FM_Msk (0x1UL << IPCC_C1MR_CH1FM_Pos)
#define IPCC_C1MR_CH1FM IPCC_C1MR_CH1FM_Msk
#define IPCC_C1MR_CH2FM_Pos (17U)
#define IPCC_C1MR_CH2FM_Msk (0x1UL << IPCC_C1MR_CH2FM_Pos)
#define IPCC_C1MR_CH2FM IPCC_C1MR_CH2FM_Msk
#define IPCC_C1MR_CH3FM_Pos (18U)
#define IPCC_C1MR_CH3FM_Msk (0x1UL << IPCC_C1MR_CH3FM_Pos)
#define IPCC_C1MR_CH3FM IPCC_C1MR_CH3FM_Msk
#define IPCC_C1MR_CH4FM_Pos (19U)
#define IPCC_C1MR_CH4FM_Msk (0x1UL << IPCC_C1MR_CH4FM_Pos)
#define IPCC_C1MR_CH4FM IPCC_C1MR_CH4FM_Msk
#define IPCC_C1MR_CH5FM_Pos (20U)
#define IPCC_C1MR_CH5FM_Msk (0x1UL << IPCC_C1MR_CH5FM_Pos)
#define IPCC_C1MR_CH5FM IPCC_C1MR_CH5FM_Msk
#define IPCC_C1MR_CH6FM_Pos (21U)
#define IPCC_C1MR_CH6FM_Msk (0x1UL << IPCC_C1MR_CH6FM_Pos)
#define IPCC_C1MR_CH6FM IPCC_C1MR_CH6FM_Msk
#define IPCC_C1SCR_CH1C_Pos (0U)
#define IPCC_C1SCR_CH1C_Msk (0x1UL << IPCC_C1SCR_CH1C_Pos)
#define IPCC_C1SCR_CH1C IPCC_C1SCR_CH1C_Msk
#define IPCC_C1SCR_CH2C_Pos (1U)
#define IPCC_C1SCR_CH2C_Msk (0x1UL << IPCC_C1SCR_CH2C_Pos)
#define IPCC_C1SCR_CH2C IPCC_C1SCR_CH2C_Msk
#define IPCC_C1SCR_CH3C_Pos (2U)
#define IPCC_C1SCR_CH3C_Msk (0x1UL << IPCC_C1SCR_CH3C_Pos)
#define IPCC_C1SCR_CH3C IPCC_C1SCR_CH3C_Msk
#define IPCC_C1SCR_CH4C_Pos (3U)
#define IPCC_C1SCR_CH4C_Msk (0x1UL << IPCC_C1SCR_CH4C_Pos)
#define IPCC_C1SCR_CH4C IPCC_C1SCR_CH4C_Msk
#define IPCC_C1SCR_CH5C_Pos (4U)
#define IPCC_C1SCR_CH5C_Msk (0x1UL << IPCC_C1SCR_CH5C_Pos)
#define IPCC_C1SCR_CH5C IPCC_C1SCR_CH5C_Msk
#define IPCC_C1SCR_CH6C_Pos (5U)
#define IPCC_C1SCR_CH6C_Msk (0x1UL << IPCC_C1SCR_CH6C_Pos)
#define IPCC_C1SCR_CH6C IPCC_C1SCR_CH6C_Msk
#define IPCC_C1SCR_CH1S_Pos (16U)
#define IPCC_C1SCR_CH1S_Msk (0x1UL << IPCC_C1SCR_CH1S_Pos)
#define IPCC_C1SCR_CH1S IPCC_C1SCR_CH1S_Msk
#define IPCC_C1SCR_CH2S_Pos (17U)
#define IPCC_C1SCR_CH2S_Msk (0x1UL << IPCC_C1SCR_CH2S_Pos)
#define IPCC_C1SCR_CH2S IPCC_C1SCR_CH2S_Msk
#define IPCC_C1SCR_CH3S_Pos (18U)
#define IPCC_C1SCR_CH3S_Msk (0x1UL << IPCC_C1SCR_CH3S_Pos)
#define IPCC_C1SCR_CH3S IPCC_C1SCR_CH3S_Msk
#define IPCC_C1SCR_CH4S_Pos (19U)
#define IPCC_C1SCR_CH4S_Msk (0x1UL << IPCC_C1SCR_CH4S_Pos)
#define IPCC_C1SCR_CH4S IPCC_C1SCR_CH4S_Msk
#define IPCC_C1SCR_CH5S_Pos (20U)
#define IPCC_C1SCR_CH5S_Msk (0x1UL << IPCC_C1SCR_CH5S_Pos)
#define IPCC_C1SCR_CH5S IPCC_C1SCR_CH5S_Msk
#define IPCC_C1SCR_CH6S_Pos (21U)
#define IPCC_C1SCR_CH6S_Msk (0x1UL << IPCC_C1SCR_CH6S_Pos)
#define IPCC_C1SCR_CH6S IPCC_C1SCR_CH6S_Msk
#define IPCC_C1TOC2SR_CH1F_Pos (0U)
#define IPCC_C1TOC2SR_CH1F_Msk (0x1UL << IPCC_C1TOC2SR_CH1F_Pos)
#define IPCC_C1TOC2SR_CH1F IPCC_C1TOC2SR_CH1F_Msk
#define IPCC_C1TOC2SR_CH2F_Pos (1U)
#define IPCC_C1TOC2SR_CH2F_Msk (0x1UL << IPCC_C1TOC2SR_CH2F_Pos)
#define IPCC_C1TOC2SR_CH2F IPCC_C1TOC2SR_CH2F_Msk
#define IPCC_C1TOC2SR_CH3F_Pos (2U)
#define IPCC_C1TOC2SR_CH3F_Msk (0x1UL << IPCC_C1TOC2SR_CH3F_Pos)
#define IPCC_C1TOC2SR_CH3F IPCC_C1TOC2SR_CH3F_Msk
#define IPCC_C1TOC2SR_CH4F_Pos (3U)
#define IPCC_C1TOC2SR_CH4F_Msk (0x1UL << IPCC_C1TOC2SR_CH4F_Pos)
#define IPCC_C1TOC2SR_CH4F IPCC_C1TOC2SR_CH4F_Msk
#define IPCC_C1TOC2SR_CH5F_Pos (4U)
#define IPCC_C1TOC2SR_CH5F_Msk (0x1UL << IPCC_C1TOC2SR_CH5F_Pos)
#define IPCC_C1TOC2SR_CH5F IPCC_C1TOC2SR_CH5F_Msk
#define IPCC_C1TOC2SR_CH6F_Pos (5U)
#define IPCC_C1TOC2SR_CH6F_Msk (0x1UL << IPCC_C1TOC2SR_CH6F_Pos)
#define IPCC_C1TOC2SR_CH6F IPCC_C1TOC2SR_CH6F_Msk
#define IPCC_C2CR_RXOIE_Pos (0U)
#define IPCC_C2CR_RXOIE_Msk (0x1UL << IPCC_C2CR_RXOIE_Pos)
#define IPCC_C2CR_RXOIE IPCC_C2CR_RXOIE_Msk
#define IPCC_C2CR_TXFIE_Pos (16U)
#define IPCC_C2CR_TXFIE_Msk (0x1UL << IPCC_C2CR_TXFIE_Pos)
#define IPCC_C2CR_TXFIE IPCC_C2CR_TXFIE_Msk
#define IPCC_C2MR_CH1OM_Pos (0U)
#define IPCC_C2MR_CH1OM_Msk (0x1UL << IPCC_C2MR_CH1OM_Pos)
#define IPCC_C2MR_CH1OM IPCC_C2MR_CH1OM_Msk
#define IPCC_C2MR_CH2OM_Pos (1U)
#define IPCC_C2MR_CH2OM_Msk (0x1UL << IPCC_C2MR_CH2OM_Pos)
#define IPCC_C2MR_CH2OM IPCC_C2MR_CH2OM_Msk
#define IPCC_C2MR_CH3OM_Pos (2U)
#define IPCC_C2MR_CH3OM_Msk (0x1UL << IPCC_C2MR_CH3OM_Pos)
#define IPCC_C2MR_CH3OM IPCC_C2MR_CH3OM_Msk
#define IPCC_C2MR_CH4OM_Pos (3U)
#define IPCC_C2MR_CH4OM_Msk (0x1UL << IPCC_C2MR_CH4OM_Pos)
#define IPCC_C2MR_CH4OM IPCC_C2MR_CH4OM_Msk
#define IPCC_C2MR_CH5OM_Pos (4U)
#define IPCC_C2MR_CH5OM_Msk (0x1UL << IPCC_C2MR_CH5OM_Pos)
#define IPCC_C2MR_CH5OM IPCC_C2MR_CH5OM_Msk
#define IPCC_C2MR_CH6OM_Pos (5U)
#define IPCC_C2MR_CH6OM_Msk (0x1UL << IPCC_C2MR_CH6OM_Pos)
#define IPCC_C2MR_CH6OM IPCC_C2MR_CH6OM_Msk
#define IPCC_C2MR_CH1FM_Pos (16U)
#define IPCC_C2MR_CH1FM_Msk (0x1UL << IPCC_C2MR_CH1FM_Pos)
#define IPCC_C2MR_CH1FM IPCC_C2MR_CH1FM_Msk
#define IPCC_C2MR_CH2FM_Pos (17U)
#define IPCC_C2MR_CH2FM_Msk (0x1UL << IPCC_C2MR_CH2FM_Pos)
#define IPCC_C2MR_CH2FM IPCC_C2MR_CH2FM_Msk
#define IPCC_C2MR_CH3FM_Pos (18U)
#define IPCC_C2MR_CH3FM_Msk (0x1UL << IPCC_C2MR_CH3FM_Pos)
#define IPCC_C2MR_CH3FM IPCC_C2MR_CH3FM_Msk
#define IPCC_C2MR_CH4FM_Pos (19U)
#define IPCC_C2MR_CH4FM_Msk (0x1UL << IPCC_C2MR_CH4FM_Pos)
#define IPCC_C2MR_CH4FM IPCC_C2MR_CH4FM_Msk
#define IPCC_C2MR_CH5FM_Pos (20U)
#define IPCC_C2MR_CH5FM_Msk (0x1UL << IPCC_C2MR_CH5FM_Pos)
#define IPCC_C2MR_CH5FM IPCC_C2MR_CH5FM_Msk
#define IPCC_C2MR_CH6FM_Pos (21U)
#define IPCC_C2MR_CH6FM_Msk (0x1UL << IPCC_C2MR_CH6FM_Pos)
#define IPCC_C2MR_CH6FM IPCC_C2MR_CH6FM_Msk
#define IPCC_C2SCR_CH1C_Pos (0U)
#define IPCC_C2SCR_CH1C_Msk (0x1UL << IPCC_C2SCR_CH1C_Pos)
#define IPCC_C2SCR_CH1C IPCC_C2SCR_CH1C_Msk
#define IPCC_C2SCR_CH2C_Pos (1U)
#define IPCC_C2SCR_CH2C_Msk (0x1UL << IPCC_C2SCR_CH2C_Pos)
#define IPCC_C2SCR_CH2C IPCC_C2SCR_CH2C_Msk
#define IPCC_C2SCR_CH3C_Pos (2U)
#define IPCC_C2SCR_CH3C_Msk (0x1UL << IPCC_C2SCR_CH3C_Pos)
#define IPCC_C2SCR_CH3C IPCC_C2SCR_CH3C_Msk
#define IPCC_C2SCR_CH4C_Pos (3U)
#define IPCC_C2SCR_CH4C_Msk (0x1UL << IPCC_C2SCR_CH4C_Pos)
#define IPCC_C2SCR_CH4C IPCC_C2SCR_CH4C_Msk
#define IPCC_C2SCR_CH5C_Pos (4U)
#define IPCC_C2SCR_CH5C_Msk (0x1UL << IPCC_C2SCR_CH5C_Pos)
#define IPCC_C2SCR_CH5C IPCC_C2SCR_CH5C_Msk
#define IPCC_C2SCR_CH6C_Pos (5U)
#define IPCC_C2SCR_CH6C_Msk (0x1UL << IPCC_C2SCR_CH6C_Pos)
#define IPCC_C2SCR_CH6C IPCC_C2SCR_CH6C_Msk
#define IPCC_C2SCR_CH1S_Pos (16U)
#define IPCC_C2SCR_CH1S_Msk (0x1UL << IPCC_C2SCR_CH1S_Pos)
#define IPCC_C2SCR_CH1S IPCC_C2SCR_CH1S_Msk
#define IPCC_C2SCR_CH2S_Pos (17U)
#define IPCC_C2SCR_CH2S_Msk (0x1UL << IPCC_C2SCR_CH2S_Pos)
#define IPCC_C2SCR_CH2S IPCC_C2SCR_CH2S_Msk
#define IPCC_C2SCR_CH3S_Pos (18U)
#define IPCC_C2SCR_CH3S_Msk (0x1UL << IPCC_C2SCR_CH3S_Pos)
#define IPCC_C2SCR_CH3S IPCC_C2SCR_CH3S_Msk
#define IPCC_C2SCR_CH4S_Pos (19U)
#define IPCC_C2SCR_CH4S_Msk (0x1UL << IPCC_C2SCR_CH4S_Pos)
#define IPCC_C2SCR_CH4S IPCC_C2SCR_CH4S_Msk
#define IPCC_C2SCR_CH5S_Pos (20U)
#define IPCC_C2SCR_CH5S_Msk (0x1UL << IPCC_C2SCR_CH5S_Pos)
#define IPCC_C2SCR_CH5S IPCC_C2SCR_CH5S_Msk
#define IPCC_C2SCR_CH6S_Pos (21U)
#define IPCC_C2SCR_CH6S_Msk (0x1UL << IPCC_C2SCR_CH6S_Pos)
#define IPCC_C2SCR_CH6S IPCC_C2SCR_CH6S_Msk
#define IPCC_C2TOC1SR_CH1F_Pos (0U)
#define IPCC_C2TOC1SR_CH1F_Msk (0x1UL << IPCC_C2TOC1SR_CH1F_Pos)
#define IPCC_C2TOC1SR_CH1F IPCC_C2TOC1SR_CH1F_Msk
#define IPCC_C2TOC1SR_CH2F_Pos (1U)
#define IPCC_C2TOC1SR_CH2F_Msk (0x1UL << IPCC_C2TOC1SR_CH2F_Pos)
#define IPCC_C2TOC1SR_CH2F IPCC_C2TOC1SR_CH2F_Msk
#define IPCC_C2TOC1SR_CH3F_Pos (2U)
#define IPCC_C2TOC1SR_CH3F_Msk (0x1UL << IPCC_C2TOC1SR_CH3F_Pos)
#define IPCC_C2TOC1SR_CH3F IPCC_C2TOC1SR_CH3F_Msk
#define IPCC_C2TOC1SR_CH4F_Pos (3U)
#define IPCC_C2TOC1SR_CH4F_Msk (0x1UL << IPCC_C2TOC1SR_CH4F_Pos)
#define IPCC_C2TOC1SR_CH4F IPCC_C2TOC1SR_CH4F_Msk
#define IPCC_C2TOC1SR_CH5F_Pos (4U)
#define IPCC_C2TOC1SR_CH5F_Msk (0x1UL << IPCC_C2TOC1SR_CH5F_Pos)
#define IPCC_C2TOC1SR_CH5F IPCC_C2TOC1SR_CH5F_Msk
#define IPCC_C2TOC1SR_CH6F_Pos (5U)
#define IPCC_C2TOC1SR_CH6F_Msk (0x1UL << IPCC_C2TOC1SR_CH6F_Pos)
#define IPCC_C2TOC1SR_CH6F IPCC_C2TOC1SR_CH6F_Msk
#define IPCC_CR_RXOIE_Pos IPCC_C1CR_RXOIE_Pos
#define IPCC_CR_RXOIE_Msk IPCC_C1CR_RXOIE_Msk
#define IPCC_CR_RXOIE IPCC_C1CR_RXOIE
#define IPCC_CR_TXFIE_Pos IPCC_C1CR_TXFIE_Pos
#define IPCC_CR_TXFIE_Msk IPCC_C1CR_TXFIE_Msk
#define IPCC_CR_TXFIE IPCC_C1CR_TXFIE
#define IPCC_MR_CH1OM_Pos IPCC_C1MR_CH1OM_Pos
#define IPCC_MR_CH1OM_Msk IPCC_C1MR_CH1OM_Msk
#define IPCC_MR_CH1OM IPCC_C1MR_CH1OM
#define IPCC_MR_CH2OM_Pos IPCC_C1MR_CH2OM_Pos
#define IPCC_MR_CH2OM_Msk IPCC_C1MR_CH2OM_Msk
#define IPCC_MR_CH2OM IPCC_C1MR_CH2OM
#define IPCC_MR_CH3OM_Pos IPCC_C1MR_CH3OM_Pos
#define IPCC_MR_CH3OM_Msk IPCC_C1MR_CH3OM_Msk
#define IPCC_MR_CH3OM IPCC_C1MR_CH3OM
#define IPCC_MR_CH4OM_Pos IPCC_C1MR_CH4OM_Pos
#define IPCC_MR_CH4OM_Msk IPCC_C1MR_CH4OM_Msk
#define IPCC_MR_CH4OM IPCC_C1MR_CH4OM
#define IPCC_MR_CH5OM_Pos IPCC_C1MR_CH5OM_Pos
#define IPCC_MR_CH5OM_Msk IPCC_C1MR_CH5OM_Msk
#define IPCC_MR_CH5OM IPCC_C1MR_CH5OM
#define IPCC_MR_CH6OM_Pos IPCC_C1MR_CH6OM_Pos
#define IPCC_MR_CH6OM_Msk IPCC_C1MR_CH6OM_Msk
#define IPCC_MR_CH6OM IPCC_C1MR_CH6OM
#define IPCC_MR_CH1FM_Pos IPCC_C1MR_CH1FM_Pos
#define IPCC_MR_CH1FM_Msk IPCC_C1MR_CH1FM_Msk
#define IPCC_MR_CH1FM IPCC_C1MR_CH1FM
#define IPCC_MR_CH2FM_Pos IPCC_C1MR_CH2FM_Pos
#define IPCC_MR_CH2FM_Msk IPCC_C1MR_CH2FM_Msk
#define IPCC_MR_CH2FM IPCC_C1MR_CH2FM
#define IPCC_MR_CH3FM_Pos IPCC_C1MR_CH3FM_Pos
#define IPCC_MR_CH3FM_Msk IPCC_C1MR_CH3FM_Msk
#define IPCC_MR_CH3FM IPCC_C1MR_CH3FM
#define IPCC_MR_CH4FM_Pos IPCC_C1MR_CH4FM_Pos
#define IPCC_MR_CH4FM_Msk IPCC_C1MR_CH4FM_Msk
#define IPCC_MR_CH4FM IPCC_C1MR_CH4FM
#define IPCC_MR_CH5FM_Pos IPCC_C1MR_CH5FM_Pos
#define IPCC_MR_CH5FM_Msk IPCC_C1MR_CH5FM_Msk
#define IPCC_MR_CH5FM IPCC_C1MR_CH5FM
#define IPCC_MR_CH6FM_Pos IPCC_C1MR_CH6FM_Pos
#define IPCC_MR_CH6FM_Msk IPCC_C1MR_CH6FM_Msk
#define IPCC_MR_CH6FM IPCC_C1MR_CH6FM
#define IPCC_SCR_CH1C_Pos IPCC_C1SCR_CH1C_Pos
#define IPCC_SCR_CH1C_Msk IPCC_C1SCR_CH1C_Msk
#define IPCC_SCR_CH1C IPCC_C1SCR_CH1C
#define IPCC_SCR_CH2C_Pos IPCC_C1SCR_CH2C_Pos
#define IPCC_SCR_CH2C_Msk IPCC_C1SCR_CH2C_Msk
#define IPCC_SCR_CH2C IPCC_C1SCR_CH2C
#define IPCC_SCR_CH3C_Pos IPCC_C1SCR_CH3C_Pos
#define IPCC_SCR_CH3C_Msk IPCC_C1SCR_CH3C_Msk
#define IPCC_SCR_CH3C IPCC_C1SCR_CH3C
#define IPCC_SCR_CH4C_Pos IPCC_C1SCR_CH4C_Pos
#define IPCC_SCR_CH4C_Msk IPCC_C1SCR_CH4C_Msk
#define IPCC_SCR_CH4C IPCC_C1SCR_CH4C
#define IPCC_SCR_CH5C_Pos IPCC_C1SCR_CH5C_Pos
#define IPCC_SCR_CH5C_Msk IPCC_C1SCR_CH5C_Msk
#define IPCC_SCR_CH5C IPCC_C1SCR_CH5C
#define IPCC_SCR_CH6C_Pos IPCC_C1SCR_CH6C_Pos
#define IPCC_SCR_CH6C_Msk IPCC_C1SCR_CH6C_Msk
#define IPCC_SCR_CH6C IPCC_C1SCR_CH6C
#define IPCC_SCR_CH1S_Pos IPCC_C1SCR_CH1S_Pos
#define IPCC_SCR_CH1S_Msk IPCC_C1SCR_CH1S_Msk
#define IPCC_SCR_CH1S IPCC_C1SCR_CH1S
#define IPCC_SCR_CH2S_Pos IPCC_C1SCR_CH2S_Pos
#define IPCC_SCR_CH2S_Msk IPCC_C1SCR_CH2S_Msk
#define IPCC_SCR_CH2S IPCC_C1SCR_CH2S
#define IPCC_SCR_CH3S_Pos IPCC_C1SCR_CH3S_Pos
#define IPCC_SCR_CH3S_Msk IPCC_C1SCR_CH3S_Msk
#define IPCC_SCR_CH3S IPCC_C1SCR_CH3S
#define IPCC_SCR_CH4S_Pos IPCC_C1SCR_CH4S_Pos
#define IPCC_SCR_CH4S_Msk IPCC_C1SCR_CH4S_Msk
#define IPCC_SCR_CH4S IPCC_C1SCR_CH4S
#define IPCC_SCR_CH5S_Pos IPCC_C1SCR_CH5S_Pos
#define IPCC_SCR_CH5S_Msk IPCC_C1SCR_CH5S_Msk
#define IPCC_SCR_CH5S IPCC_C1SCR_CH5S
#define IPCC_SCR_CH6S_Pos IPCC_C1SCR_CH6S_Pos
#define IPCC_SCR_CH6S_Msk IPCC_C1SCR_CH6S_Msk
#define IPCC_SCR_CH6S IPCC_C1SCR_CH6S
#define IPCC_SR_CH1F_Pos IPCC_C1TOC2SR_CH1F_Pos
#define IPCC_SR_CH1F_Msk IPCC_C1TOC2SR_CH1F_Msk
#define IPCC_SR_CH1F IPCC_C1TOC2SR_CH1F
#define IPCC_SR_CH2F_Pos IPCC_C1TOC2SR_CH2F_Pos
#define IPCC_SR_CH2F_Msk IPCC_C1TOC2SR_CH2F_Msk
#define IPCC_SR_CH2F IPCC_C1TOC2SR_CH2F
#define IPCC_SR_CH3F_Pos IPCC_C1TOC2SR_CH3F_Pos
#define IPCC_SR_CH3F_Msk IPCC_C1TOC2SR_CH3F_Msk
#define IPCC_SR_CH3F IPCC_C1TOC2SR_CH3F
#define IPCC_SR_CH4F_Pos IPCC_C1TOC2SR_CH4F_Pos
#define IPCC_SR_CH4F_Msk IPCC_C1TOC2SR_CH4F_Msk
#define IPCC_SR_CH4F IPCC_C1TOC2SR_CH4F
#define IPCC_SR_CH5F_Pos IPCC_C1TOC2SR_CH5F_Pos
#define IPCC_SR_CH5F_Msk IPCC_C1TOC2SR_CH5F_Msk
#define IPCC_SR_CH5F IPCC_C1TOC2SR_CH5F
#define IPCC_SR_CH6F_Pos IPCC_C1TOC2SR_CH6F_Pos
#define IPCC_SR_CH6F_Msk IPCC_C1TOC2SR_CH6F_Msk
#define IPCC_SR_CH6F IPCC_C1TOC2SR_CH6F
#define IPCC_CHANNEL_NUMBER 6U
#define USART_CR1_UE_Pos (0U)
#define USART_CR1_UE_Msk (0x1UL << USART_CR1_UE_Pos)
#define USART_CR1_UE USART_CR1_UE_Msk
#define USART_CR1_UESM_Pos (1U)
#define USART_CR1_UESM_Msk (0x1UL << USART_CR1_UESM_Pos)
#define USART_CR1_UESM USART_CR1_UESM_Msk
#define USART_CR1_RE_Pos (2U)
#define USART_CR1_RE_Msk (0x1UL << USART_CR1_RE_Pos)
#define USART_CR1_RE USART_CR1_RE_Msk
#define USART_CR1_TE_Pos (3U)
#define USART_CR1_TE_Msk (0x1UL << USART_CR1_TE_Pos)
#define USART_CR1_TE USART_CR1_TE_Msk
#define USART_CR1_IDLEIE_Pos (4U)
#define USART_CR1_IDLEIE_Msk (0x1UL << USART_CR1_IDLEIE_Pos)
#define USART_CR1_IDLEIE USART_CR1_IDLEIE_Msk
#define USART_CR1_RXNEIE_Pos (5U)
#define USART_CR1_RXNEIE_Msk (0x1UL << USART_CR1_RXNEIE_Pos)
#define USART_CR1_RXNEIE USART_CR1_RXNEIE_Msk
#define USART_CR1_RXNEIE_RXFNEIE_Pos USART_CR1_RXNEIE_Pos
#define USART_CR1_RXNEIE_RXFNEIE_Msk USART_CR1_RXNEIE_Msk
#define USART_CR1_RXNEIE_RXFNEIE USART_CR1_RXNEIE_Msk
#define USART_CR1_TCIE_Pos (6U)
#define USART_CR1_TCIE_Msk (0x1UL << USART_CR1_TCIE_Pos)
#define USART_CR1_TCIE USART_CR1_TCIE_Msk
#define USART_CR1_TXEIE_Pos (7U)
#define USART_CR1_TXEIE_Msk (0x1UL << USART_CR1_TXEIE_Pos)
#define USART_CR1_TXEIE USART_CR1_TXEIE_Msk
#define USART_CR1_TXEIE_TXFNFIE_Pos (7U)
#define USART_CR1_TXEIE_TXFNFIE_Msk (0x1UL << USART_CR1_TXEIE_Pos)
#define USART_CR1_TXEIE_TXFNFIE USART_CR1_TXEIE
#define USART_CR1_PEIE_Pos (8U)
#define USART_CR1_PEIE_Msk (0x1UL << USART_CR1_PEIE_Pos)
#define USART_CR1_PEIE USART_CR1_PEIE_Msk
#define USART_CR1_PS_Pos (9U)
#define USART_CR1_PS_Msk (0x1UL << USART_CR1_PS_Pos)
#define USART_CR1_PS USART_CR1_PS_Msk
#define USART_CR1_PCE_Pos (10U)
#define USART_CR1_PCE_Msk (0x1UL << USART_CR1_PCE_Pos)
#define USART_CR1_PCE USART_CR1_PCE_Msk
#define USART_CR1_WAKE_Pos (11U)
#define USART_CR1_WAKE_Msk (0x1UL << USART_CR1_WAKE_Pos)
#define USART_CR1_WAKE USART_CR1_WAKE_Msk
#define USART_CR1_M0_Pos (12U)
#define USART_CR1_M0_Msk (0x1UL << USART_CR1_M0_Pos)
#define USART_CR1_M0 USART_CR1_M0_Msk
#define USART_CR1_MME_Pos (13U)
#define USART_CR1_MME_Msk (0x1UL << USART_CR1_MME_Pos)
#define USART_CR1_MME USART_CR1_MME_Msk
#define USART_CR1_CMIE_Pos (14U)
#define USART_CR1_CMIE_Msk (0x1UL << USART_CR1_CMIE_Pos)
#define USART_CR1_CMIE USART_CR1_CMIE_Msk
#define USART_CR1_OVER8_Pos (15U)
#define USART_CR1_OVER8_Msk (0x1UL << USART_CR1_OVER8_Pos)
#define USART_CR1_OVER8 USART_CR1_OVER8_Msk
#define USART_CR1_DEDT_Pos (16U)
#define USART_CR1_DEDT_Msk (0x1FUL << USART_CR1_DEDT_Pos)
#define USART_CR1_DEDT USART_CR1_DEDT_Msk
#define USART_CR1_DEDT_0 (0x01U << USART_CR1_DEDT_Pos)
#define USART_CR1_DEDT_1 (0x02U << USART_CR1_DEDT_Pos)
#define USART_CR1_DEDT_2 (0x04U << USART_CR1_DEDT_Pos)
#define USART_CR1_DEDT_3 (0x08U << USART_CR1_DEDT_Pos)
#define USART_CR1_DEDT_4 (0x10U << USART_CR1_DEDT_Pos)
#define USART_CR1_DEAT_Pos (21U)
#define USART_CR1_DEAT_Msk (0x1FUL << USART_CR1_DEAT_Pos)
#define USART_CR1_DEAT USART_CR1_DEAT_Msk
#define USART_CR1_DEAT_0 (0x01U << USART_CR1_DEAT_Pos)
#define USART_CR1_DEAT_1 (0x02U << USART_CR1_DEAT_Pos)
#define USART_CR1_DEAT_2 (0x04U << USART_CR1_DEAT_Pos)
#define USART_CR1_DEAT_3 (0x08U << USART_CR1_DEAT_Pos)
#define USART_CR1_DEAT_4 (0x10U << USART_CR1_DEAT_Pos)
#define USART_CR1_RTOIE_Pos (26U)
#define USART_CR1_RTOIE_Msk (0x1UL << USART_CR1_RTOIE_Pos)
#define USART_CR1_RTOIE USART_CR1_RTOIE_Msk
#define USART_CR1_EOBIE_Pos (27U)
#define USART_CR1_EOBIE_Msk (0x1UL << USART_CR1_EOBIE_Pos)
#define USART_CR1_EOBIE USART_CR1_EOBIE_Msk
#define USART_CR1_M1_Pos (28U)
#define USART_CR1_M1_Msk (0x1UL << USART_CR1_M1_Pos)
#define USART_CR1_M1 USART_CR1_M1_Msk
#define USART_CR1_M (uint32_t)(USART_CR1_M1 | USART_CR1_M0)
#define USART_CR1_FIFOEN_Pos (29U)
#define USART_CR1_FIFOEN_Msk (0x1UL << USART_CR1_FIFOEN_Pos)
#define USART_CR1_FIFOEN USART_CR1_FIFOEN_Msk
#define USART_CR1_TXFEIE_Pos (30U)
#define USART_CR1_TXFEIE_Msk (0x1UL << USART_CR1_TXFEIE_Pos)
#define USART_CR1_TXFEIE USART_CR1_TXFEIE_Msk
#define USART_CR1_RXFFIE_Pos (31U)
#define USART_CR1_RXFFIE_Msk (0x1UL << USART_CR1_RXFFIE_Pos)
#define USART_CR1_RXFFIE USART_CR1_RXFFIE_Msk
#define USART_CR2_SLVEN_Pos (0U)
#define USART_CR2_SLVEN_Msk (0x1UL << USART_CR2_SLVEN_Pos)
#define USART_CR2_SLVEN USART_CR2_SLVEN_Msk
#define USART_CR2_DIS_NSS_Pos (3U)
#define USART_CR2_DIS_NSS_Msk (0x1UL << USART_CR2_DIS_NSS_Pos)
#define USART_CR2_DIS_NSS USART_CR2_DIS_NSS_Msk
#define USART_CR2_ADDM7_Pos (4U)
#define USART_CR2_ADDM7_Msk (0x1UL << USART_CR2_ADDM7_Pos)
#define USART_CR2_ADDM7 USART_CR2_ADDM7_Msk
#define USART_CR2_LBDL_Pos (5U)
#define USART_CR2_LBDL_Msk (0x1UL << USART_CR2_LBDL_Pos)
#define USART_CR2_LBDL USART_CR2_LBDL_Msk
#define USART_CR2_LBDIE_Pos (6U)
#define USART_CR2_LBDIE_Msk (0x1UL << USART_CR2_LBDIE_Pos)
#define USART_CR2_LBDIE USART_CR2_LBDIE_Msk
#define USART_CR2_LBCL_Pos (8U)
#define USART_CR2_LBCL_Msk (0x1UL << USART_CR2_LBCL_Pos)
#define USART_CR2_LBCL USART_CR2_LBCL_Msk
#define USART_CR2_CPHA_Pos (9U)
#define USART_CR2_CPHA_Msk (0x1UL << USART_CR2_CPHA_Pos)
#define USART_CR2_CPHA USART_CR2_CPHA_Msk
#define USART_CR2_CPOL_Pos (10U)
#define USART_CR2_CPOL_Msk (0x1UL << USART_CR2_CPOL_Pos)
#define USART_CR2_CPOL USART_CR2_CPOL_Msk
#define USART_CR2_CLKEN_Pos (11U)
#define USART_CR2_CLKEN_Msk (0x1UL << USART_CR2_CLKEN_Pos)
#define USART_CR2_CLKEN USART_CR2_CLKEN_Msk
#define USART_CR2_STOP_Pos (12U)
#define USART_CR2_STOP_Msk (0x3UL << USART_CR2_STOP_Pos)
#define USART_CR2_STOP USART_CR2_STOP_Msk
#define USART_CR2_STOP_0 (0x1U << USART_CR2_STOP_Pos)
#define USART_CR2_STOP_1 (0x2U << USART_CR2_STOP_Pos)
#define USART_CR2_LINEN_Pos (14U)
#define USART_CR2_LINEN_Msk (0x1UL << USART_CR2_LINEN_Pos)
#define USART_CR2_LINEN USART_CR2_LINEN_Msk
#define USART_CR2_SWAP_Pos (15U)
#define USART_CR2_SWAP_Msk (0x1UL << USART_CR2_SWAP_Pos)
#define USART_CR2_SWAP USART_CR2_SWAP_Msk
#define USART_CR2_RXINV_Pos (16U)
#define USART_CR2_RXINV_Msk (0x1UL << USART_CR2_RXINV_Pos)
#define USART_CR2_RXINV USART_CR2_RXINV_Msk
#define USART_CR2_TXINV_Pos (17U)
#define USART_CR2_TXINV_Msk (0x1UL << USART_CR2_TXINV_Pos)
#define USART_CR2_TXINV USART_CR2_TXINV_Msk
#define USART_CR2_DATAINV_Pos (18U)
#define USART_CR2_DATAINV_Msk (0x1UL << USART_CR2_DATAINV_Pos)
#define USART_CR2_DATAINV USART_CR2_DATAINV_Msk
#define USART_CR2_MSBFIRST_Pos (19U)
#define USART_CR2_MSBFIRST_Msk (0x1UL << USART_CR2_MSBFIRST_Pos)
#define USART_CR2_MSBFIRST USART_CR2_MSBFIRST_Msk
#define USART_CR2_ABREN_Pos (20U)
#define USART_CR2_ABREN_Msk (0x1UL << USART_CR2_ABREN_Pos)
#define USART_CR2_ABREN USART_CR2_ABREN_Msk
#define USART_CR2_ABRMODE_Pos (21U)
#define USART_CR2_ABRMODE_Msk (0x3UL << USART_CR2_ABRMODE_Pos)
#define USART_CR2_ABRMODE USART_CR2_ABRMODE_Msk
#define USART_CR2_ABRMODE_0 (0x1U << USART_CR2_ABRMODE_Pos)
#define USART_CR2_ABRMODE_1 (0x2U << USART_CR2_ABRMODE_Pos)
#define USART_CR2_RTOEN_Pos (23U)
#define USART_CR2_RTOEN_Msk (0x1UL << USART_CR2_RTOEN_Pos)
#define USART_CR2_RTOEN USART_CR2_RTOEN_Msk
#define USART_CR2_ADD_Pos (24U)
#define USART_CR2_ADD_Msk (0xFFUL << USART_CR2_ADD_Pos)
#define USART_CR2_ADD USART_CR2_ADD_Msk
#define USART_CR3_EIE_Pos (0U)
#define USART_CR3_EIE_Msk (0x1UL << USART_CR3_EIE_Pos)
#define USART_CR3_EIE USART_CR3_EIE_Msk
#define USART_CR3_IREN_Pos (1U)
#define USART_CR3_IREN_Msk (0x1UL << USART_CR3_IREN_Pos)
#define USART_CR3_IREN USART_CR3_IREN_Msk
#define USART_CR3_IRLP_Pos (2U)
#define USART_CR3_IRLP_Msk (0x1UL << USART_CR3_IRLP_Pos)
#define USART_CR3_IRLP USART_CR3_IRLP_Msk
#define USART_CR3_HDSEL_Pos (3U)
#define USART_CR3_HDSEL_Msk (0x1UL << USART_CR3_HDSEL_Pos)
#define USART_CR3_HDSEL USART_CR3_HDSEL_Msk
#define USART_CR3_NACK_Pos (4U)
#define USART_CR3_NACK_Msk (0x1UL << USART_CR3_NACK_Pos)
#define USART_CR3_NACK USART_CR3_NACK_Msk
#define USART_CR3_SCEN_Pos (5U)
#define USART_CR3_SCEN_Msk (0x1UL << USART_CR3_SCEN_Pos)
#define USART_CR3_SCEN USART_CR3_SCEN_Msk
#define USART_CR3_DMAR_Pos (6U)
#define USART_CR3_DMAR_Msk (0x1UL << USART_CR3_DMAR_Pos)
#define USART_CR3_DMAR USART_CR3_DMAR_Msk
#define USART_CR3_DMAT_Pos (7U)
#define USART_CR3_DMAT_Msk (0x1UL << USART_CR3_DMAT_Pos)
#define USART_CR3_DMAT USART_CR3_DMAT_Msk
#define USART_CR3_RTSE_Pos (8U)
#define USART_CR3_RTSE_Msk (0x1UL << USART_CR3_RTSE_Pos)
#define USART_CR3_RTSE USART_CR3_RTSE_Msk
#define USART_CR3_CTSE_Pos (9U)
#define USART_CR3_CTSE_Msk (0x1UL << USART_CR3_CTSE_Pos)
#define USART_CR3_CTSE USART_CR3_CTSE_Msk
#define USART_CR3_CTSIE_Pos (10U)
#define USART_CR3_CTSIE_Msk (0x1UL << USART_CR3_CTSIE_Pos)
#define USART_CR3_CTSIE USART_CR3_CTSIE_Msk
#define USART_CR3_ONEBIT_Pos (11U)
#define USART_CR3_ONEBIT_Msk (0x1UL << USART_CR3_ONEBIT_Pos)
#define USART_CR3_ONEBIT USART_CR3_ONEBIT_Msk
#define USART_CR3_OVRDIS_Pos (12U)
#define USART_CR3_OVRDIS_Msk (0x1UL << USART_CR3_OVRDIS_Pos)
#define USART_CR3_OVRDIS USART_CR3_OVRDIS_Msk
#define USART_CR3_DDRE_Pos (13U)
#define USART_CR3_DDRE_Msk (0x1UL << USART_CR3_DDRE_Pos)
#define USART_CR3_DDRE USART_CR3_DDRE_Msk
#define USART_CR3_DEM_Pos (14U)
#define USART_CR3_DEM_Msk (0x1UL << USART_CR3_DEM_Pos)
#define USART_CR3_DEM USART_CR3_DEM_Msk
#define USART_CR3_DEP_Pos (15U)
#define USART_CR3_DEP_Msk (0x1UL << USART_CR3_DEP_Pos)
#define USART_CR3_DEP USART_CR3_DEP_Msk
#define USART_CR3_SCARCNT_Pos (17U)
#define USART_CR3_SCARCNT_Msk (0x7UL << USART_CR3_SCARCNT_Pos)
#define USART_CR3_SCARCNT USART_CR3_SCARCNT_Msk
#define USART_CR3_SCARCNT_0 (0x1U << USART_CR3_SCARCNT_Pos)
#define USART_CR3_SCARCNT_1 (0x2U << USART_CR3_SCARCNT_Pos)
#define USART_CR3_SCARCNT_2 (0x4U << USART_CR3_SCARCNT_Pos)
#define USART_CR3_WUS_Pos (20U)
#define USART_CR3_WUS_Msk (0x3UL << USART_CR3_WUS_Pos)
#define USART_CR3_WUS USART_CR3_WUS_Msk
#define USART_CR3_WUS_0 (0x1U << USART_CR3_WUS_Pos)
#define USART_CR3_WUS_1 (0x2U << USART_CR3_WUS_Pos)
#define USART_CR3_WUFIE_Pos (22U)
#define USART_CR3_WUFIE_Msk (0x1UL << USART_CR3_WUFIE_Pos)
#define USART_CR3_WUFIE USART_CR3_WUFIE_Msk
#define USART_CR3_TXFTIE_Pos (23U)
#define USART_CR3_TXFTIE_Msk (0x1UL << USART_CR3_TXFTIE_Pos)
#define USART_CR3_TXFTIE USART_CR3_TXFTIE_Msk
#define USART_CR3_TCBGTIE_Pos (24U)
#define USART_CR3_TCBGTIE_Msk (0x1UL << USART_CR3_TCBGTIE_Pos)
#define USART_CR3_TCBGTIE USART_CR3_TCBGTIE_Msk
#define USART_CR3_RXFTCFG_Pos (25U)
#define USART_CR3_RXFTCFG_Msk (0x7UL << USART_CR3_RXFTCFG_Pos)
#define USART_CR3_RXFTCFG USART_CR3_RXFTCFG_Msk
#define USART_CR3_RXFTCFG_0 (0x1U << USART_CR3_RXFTCFG_Pos)
#define USART_CR3_RXFTCFG_1 (0x2U << USART_CR3_RXFTCFG_Pos)
#define USART_CR3_RXFTCFG_2 (0x4U << USART_CR3_RXFTCFG_Pos)
#define USART_CR3_RXFTIE_Pos (28U)
#define USART_CR3_RXFTIE_Msk (0x1UL << USART_CR3_RXFTIE_Pos)
#define USART_CR3_RXFTIE USART_CR3_RXFTIE_Msk
#define USART_CR3_TXFTCFG_Pos (29U)
#define USART_CR3_TXFTCFG_Msk (0x7UL << USART_CR3_TXFTCFG_Pos)
#define USART_CR3_TXFTCFG USART_CR3_TXFTCFG_Msk
#define USART_CR3_TXFTCFG_0 (0x1U << USART_CR3_TXFTCFG_Pos)
#define USART_CR3_TXFTCFG_1 (0x2U << USART_CR3_TXFTCFG_Pos)
#define USART_CR3_TXFTCFG_2 (0x4U << USART_CR3_TXFTCFG_Pos)
#define USART_BRR_LPUART ((uint32_t)0x000FFFFF)
#define USART_BRR_BRR ((uint16_t)0xFFFF)
#define USART_GTPR_PSC_Pos (0U)
#define USART_GTPR_PSC_Msk (0xFFUL << USART_GTPR_PSC_Pos)
#define USART_GTPR_PSC USART_GTPR_PSC_Msk
#define USART_GTPR_GT_Pos (8U)
#define USART_GTPR_GT_Msk (0xFFUL << USART_GTPR_GT_Pos)
#define USART_GTPR_GT USART_GTPR_GT_Msk
#define USART_RTOR_RTO_Pos (0U)
#define USART_RTOR_RTO_Msk (0xFFFFFFUL << USART_RTOR_RTO_Pos)
#define USART_RTOR_RTO USART_RTOR_RTO_Msk
#define USART_RTOR_BLEN_Pos (24U)
#define USART_RTOR_BLEN_Msk (0xFFUL << USART_RTOR_BLEN_Pos)
#define USART_RTOR_BLEN USART_RTOR_BLEN_Msk
#define USART_RQR_ABRRQ_Pos (0U)
#define USART_RQR_ABRRQ_Msk (0x1UL << USART_RQR_ABRRQ_Pos)
#define USART_RQR_ABRRQ USART_RQR_ABRRQ_Msk
#define USART_RQR_SBKRQ_Pos (1U)
#define USART_RQR_SBKRQ_Msk (0x1UL << USART_RQR_SBKRQ_Pos)
#define USART_RQR_SBKRQ USART_RQR_SBKRQ_Msk
#define USART_RQR_MMRQ_Pos (2U)
#define USART_RQR_MMRQ_Msk (0x1UL << USART_RQR_MMRQ_Pos)
#define USART_RQR_MMRQ USART_RQR_MMRQ_Msk
#define USART_RQR_RXFRQ_Pos (3U)
#define USART_RQR_RXFRQ_Msk (0x1UL << USART_RQR_RXFRQ_Pos)
#define USART_RQR_RXFRQ USART_RQR_RXFRQ_Msk
#define USART_RQR_TXFRQ_Pos (4U)
#define USART_RQR_TXFRQ_Msk (0x1UL << USART_RQR_TXFRQ_Pos)
#define USART_RQR_TXFRQ USART_RQR_TXFRQ_Msk
#define USART_ISR_PE_Pos (0U)
#define USART_ISR_PE_Msk (0x1UL << USART_ISR_PE_Pos)
#define USART_ISR_PE USART_ISR_PE_Msk
#define USART_ISR_FE_Pos (1U)
#define USART_ISR_FE_Msk (0x1UL << USART_ISR_FE_Pos)
#define USART_ISR_FE USART_ISR_FE_Msk
#define USART_ISR_NE_Pos (2U)
#define USART_ISR_NE_Msk (0x1UL << USART_ISR_NE_Pos)
#define USART_ISR_NE USART_ISR_NE_Msk
#define USART_ISR_ORE_Pos (3U)
#define USART_ISR_ORE_Msk (0x1UL << USART_ISR_ORE_Pos)
#define USART_ISR_ORE USART_ISR_ORE_Msk
#define USART_ISR_IDLE_Pos (4U)
#define USART_ISR_IDLE_Msk (0x1UL << USART_ISR_IDLE_Pos)
#define USART_ISR_IDLE USART_ISR_IDLE_Msk
#define USART_ISR_RXNE_Pos (5U)
#define USART_ISR_RXNE_Msk (0x1UL << USART_ISR_RXNE_Pos)
#define USART_ISR_RXNE USART_ISR_RXNE_Msk
#define USART_ISR_RXNE_RXFNE_Pos USART_ISR_RXNE_Pos
#define USART_ISR_RXNE_RXFNE_Msk USART_ISR_RXNE_Msk
#define USART_ISR_RXNE_RXFNE USART_ISR_RXNE_Msk
#define USART_ISR_TC_Pos (6U)
#define USART_ISR_TC_Msk (0x1UL << USART_ISR_TC_Pos)
#define USART_ISR_TC USART_ISR_TC_Msk
#define USART_ISR_TXE_Pos (7U)
#define USART_ISR_TXE_Msk (0x1UL << USART_ISR_TXE_Pos)
#define USART_ISR_TXE USART_ISR_TXE_Msk
#define USART_ISR_TXE_TXFNF_Pos USART_ISR_TXE_Pos
#define USART_ISR_TXE_TXFNF_Msk USART_ISR_TXE_Msk
#define USART_ISR_TXE_TXFNF USART_ISR_TXE_Msk
#define USART_ISR_LBDF_Pos (8U)
#define USART_ISR_LBDF_Msk (0x1UL << USART_ISR_LBDF_Pos)
#define USART_ISR_LBDF USART_ISR_LBDF_Msk
#define USART_ISR_CTSIF_Pos (9U)
#define USART_ISR_CTSIF_Msk (0x1UL << USART_ISR_CTSIF_Pos)
#define USART_ISR_CTSIF USART_ISR_CTSIF_Msk
#define USART_ISR_CTS_Pos (10U)
#define USART_ISR_CTS_Msk (0x1UL << USART_ISR_CTS_Pos)
#define USART_ISR_CTS USART_ISR_CTS_Msk
#define USART_ISR_RTOF_Pos (11U)
#define USART_ISR_RTOF_Msk (0x1UL << USART_ISR_RTOF_Pos)
#define USART_ISR_RTOF USART_ISR_RTOF_Msk
#define USART_ISR_EOBF_Pos (12U)
#define USART_ISR_EOBF_Msk (0x1UL << USART_ISR_EOBF_Pos)
#define USART_ISR_EOBF USART_ISR_EOBF_Msk
#define USART_ISR_UDR_Pos (13U)
#define USART_ISR_UDR_Msk (0x1UL << USART_ISR_UDR_Pos)
#define USART_ISR_UDR USART_ISR_UDR_Msk
#define USART_ISR_ABRE_Pos (14U)
#define USART_ISR_ABRE_Msk (0x1UL << USART_ISR_ABRE_Pos)
#define USART_ISR_ABRE USART_ISR_ABRE_Msk
#define USART_ISR_ABRF_Pos (15U)
#define USART_ISR_ABRF_Msk (0x1UL << USART_ISR_ABRF_Pos)
#define USART_ISR_ABRF USART_ISR_ABRF_Msk
#define USART_ISR_BUSY_Pos (16U)
#define USART_ISR_BUSY_Msk (0x1UL << USART_ISR_BUSY_Pos)
#define USART_ISR_BUSY USART_ISR_BUSY_Msk
#define USART_ISR_CMF_Pos (17U)
#define USART_ISR_CMF_Msk (0x1UL << USART_ISR_CMF_Pos)
#define USART_ISR_CMF USART_ISR_CMF_Msk
#define USART_ISR_SBKF_Pos (18U)
#define USART_ISR_SBKF_Msk (0x1UL << USART_ISR_SBKF_Pos)
#define USART_ISR_SBKF USART_ISR_SBKF_Msk
#define USART_ISR_RWU_Pos (19U)
#define USART_ISR_RWU_Msk (0x1UL << USART_ISR_RWU_Pos)
#define USART_ISR_RWU USART_ISR_RWU_Msk
#define USART_ISR_WUF_Pos (20U)
#define USART_ISR_WUF_Msk (0x1UL << USART_ISR_WUF_Pos)
#define USART_ISR_WUF USART_ISR_WUF_Msk
#define USART_ISR_TEACK_Pos (21U)
#define USART_ISR_TEACK_Msk (0x1UL << USART_ISR_TEACK_Pos)
#define USART_ISR_TEACK USART_ISR_TEACK_Msk
#define USART_ISR_REACK_Pos (22U)
#define USART_ISR_REACK_Msk (0x1UL << USART_ISR_REACK_Pos)
#define USART_ISR_REACK USART_ISR_REACK_Msk
#define USART_ISR_TXFE_Pos (23U)
#define USART_ISR_TXFE_Msk (0x1UL << USART_ISR_TXFE_Pos)
#define USART_ISR_TXFE USART_ISR_TXFE_Msk
#define USART_ISR_RXFF_Pos (24U)
#define USART_ISR_RXFF_Msk (0x1UL << USART_ISR_RXFF_Pos)
#define USART_ISR_RXFF USART_ISR_RXFF_Msk
#define USART_ISR_TCBGT_Pos (25U)
#define USART_ISR_TCBGT_Msk (0x1UL << USART_ISR_TCBGT_Pos)
#define USART_ISR_TCBGT USART_ISR_TCBGT_Msk
#define USART_ISR_RXFT_Pos (26U)
#define USART_ISR_RXFT_Msk (0x1UL << USART_ISR_RXFT_Pos)
#define USART_ISR_RXFT USART_ISR_RXFT_Msk
#define USART_ISR_TXFT_Pos (27U)
#define USART_ISR_TXFT_Msk (0x1UL << USART_ISR_TXFT_Pos)
#define USART_ISR_TXFT USART_ISR_TXFT_Msk
#define USART_ICR_PECF_Pos (0U)
#define USART_ICR_PECF_Msk (0x1UL << USART_ICR_PECF_Pos)
#define USART_ICR_PECF USART_ICR_PECF_Msk
#define USART_ICR_FECF_Pos (1U)
#define USART_ICR_FECF_Msk (0x1UL << USART_ICR_FECF_Pos)
#define USART_ICR_FECF USART_ICR_FECF_Msk
#define USART_ICR_NECF_Pos (2U)
#define USART_ICR_NECF_Msk (0x1UL << USART_ICR_NECF_Pos)
#define USART_ICR_NECF USART_ICR_NECF_Msk
#define USART_ICR_ORECF_Pos (3U)
#define USART_ICR_ORECF_Msk (0x1UL << USART_ICR_ORECF_Pos)
#define USART_ICR_ORECF USART_ICR_ORECF_Msk
#define USART_ICR_IDLECF_Pos (4U)
#define USART_ICR_IDLECF_Msk (0x1UL << USART_ICR_IDLECF_Pos)
#define USART_ICR_IDLECF USART_ICR_IDLECF_Msk
#define USART_ICR_TXFECF_Pos (5U)
#define USART_ICR_TXFECF_Msk (0x1UL << USART_ICR_TXFECF_Pos)
#define USART_ICR_TXFECF USART_ICR_TXFECF_Msk
#define USART_ICR_TCCF_Pos (6U)
#define USART_ICR_TCCF_Msk (0x1UL << USART_ICR_TCCF_Pos)
#define USART_ICR_TCCF USART_ICR_TCCF_Msk
#define USART_ICR_TCBGTCF_Pos (7U)
#define USART_ICR_TCBGTCF_Msk (0x1UL << USART_ICR_TCBGTCF_Pos)
#define USART_ICR_TCBGTCF USART_ICR_TCBGTCF_Msk
#define USART_ICR_LBDCF_Pos (8U)
#define USART_ICR_LBDCF_Msk (0x1UL << USART_ICR_LBDCF_Pos)
#define USART_ICR_LBDCF USART_ICR_LBDCF_Msk
#define USART_ICR_CTSCF_Pos (9U)
#define USART_ICR_CTSCF_Msk (0x1UL << USART_ICR_CTSCF_Pos)
#define USART_ICR_CTSCF USART_ICR_CTSCF_Msk
#define USART_ICR_RTOCF_Pos (11U)
#define USART_ICR_RTOCF_Msk (0x1UL << USART_ICR_RTOCF_Pos)
#define USART_ICR_RTOCF USART_ICR_RTOCF_Msk
#define USART_ICR_EOBCF_Pos (12U)
#define USART_ICR_EOBCF_Msk (0x1UL << USART_ICR_EOBCF_Pos)
#define USART_ICR_EOBCF USART_ICR_EOBCF_Msk
#define USART_ICR_UDRCF_Pos (13U)
#define USART_ICR_UDRCF_Msk (0x1UL << USART_ICR_UDRCF_Pos)
#define USART_ICR_UDRCF USART_ICR_UDRCF_Msk
#define USART_ICR_CMCF_Pos (17U)
#define USART_ICR_CMCF_Msk (0x1UL << USART_ICR_CMCF_Pos)
#define USART_ICR_CMCF USART_ICR_CMCF_Msk
#define USART_ICR_WUCF_Pos (20U)
#define USART_ICR_WUCF_Msk (0x1UL << USART_ICR_WUCF_Pos)
#define USART_ICR_WUCF USART_ICR_WUCF_Msk
#define USART_RDR_RDR_Pos (0U)
#define USART_RDR_RDR_Msk (0x01FFUL << USART_RDR_RDR_Pos)
#define USART_RDR_RDR USART_RDR_RDR_Msk
#define USART_TDR_TDR_Pos (0U)
#define USART_TDR_TDR_Msk (0x01FFUL << USART_TDR_TDR_Pos)
#define USART_TDR_TDR USART_TDR_TDR_Msk
#define USART_PRESC_PRESCALER_Pos (0U)
#define USART_PRESC_PRESCALER_Msk (0xFUL << USART_PRESC_PRESCALER_Pos)
#define USART_PRESC_PRESCALER USART_PRESC_PRESCALER_Msk
#define USART_PRESC_PRESCALER_0 (0x1U << USART_PRESC_PRESCALER_Pos)
#define USART_PRESC_PRESCALER_1 (0x2U << USART_PRESC_PRESCALER_Pos)
#define USART_PRESC_PRESCALER_2 (0x4U << USART_PRESC_PRESCALER_Pos)
#define USART_PRESC_PRESCALER_3 (0x8U << USART_PRESC_PRESCALER_Pos)
#define VREFBUF_CSR_ENVR_Pos (0U)
#define VREFBUF_CSR_ENVR_Msk (0x1UL << VREFBUF_CSR_ENVR_Pos)
#define VREFBUF_CSR_ENVR VREFBUF_CSR_ENVR_Msk
#define VREFBUF_CSR_HIZ_Pos (1U)
#define VREFBUF_CSR_HIZ_Msk (0x1UL << VREFBUF_CSR_HIZ_Pos)
#define VREFBUF_CSR_HIZ VREFBUF_CSR_HIZ_Msk
#define VREFBUF_CSR_VRS_Pos (2U)
#define VREFBUF_CSR_VRS_Msk (0x1UL << VREFBUF_CSR_VRS_Pos)
#define VREFBUF_CSR_VRS VREFBUF_CSR_VRS_Msk
#define VREFBUF_CSR_VRR_Pos (3U)
#define VREFBUF_CSR_VRR_Msk (0x1UL << VREFBUF_CSR_VRR_Pos)
#define VREFBUF_CSR_VRR VREFBUF_CSR_VRR_Msk
#define VREFBUF_CCR_TRIM_Pos (0U)
#define VREFBUF_CCR_TRIM_Msk (0x3FUL << VREFBUF_CCR_TRIM_Pos)
#define VREFBUF_CCR_TRIM VREFBUF_CCR_TRIM_Msk
#define WWDG_CR_T_Pos (0U)
#define WWDG_CR_T_Msk (0x7FUL << WWDG_CR_T_Pos)
#define WWDG_CR_T WWDG_CR_T_Msk
#define WWDG_CR_T_0 (0x01U << WWDG_CR_T_Pos)
#define WWDG_CR_T_1 (0x02U << WWDG_CR_T_Pos)
#define WWDG_CR_T_2 (0x04U << WWDG_CR_T_Pos)
#define WWDG_CR_T_3 (0x08U << WWDG_CR_T_Pos)
#define WWDG_CR_T_4 (0x10U << WWDG_CR_T_Pos)
#define WWDG_CR_T_5 (0x20U << WWDG_CR_T_Pos)
#define WWDG_CR_T_6 (0x40U << WWDG_CR_T_Pos)
#define WWDG_CR_WDGA_Pos (7U)
#define WWDG_CR_WDGA_Msk (0x1UL << WWDG_CR_WDGA_Pos)
#define WWDG_CR_WDGA WWDG_CR_WDGA_Msk
#define WWDG_CFR_W_Pos (0U)
#define WWDG_CFR_W_Msk (0x7FUL << WWDG_CFR_W_Pos)
#define WWDG_CFR_W WWDG_CFR_W_Msk
#define WWDG_CFR_W_0 (0x01U << WWDG_CFR_W_Pos)
#define WWDG_CFR_W_1 (0x02U << WWDG_CFR_W_Pos)
#define WWDG_CFR_W_2 (0x04U << WWDG_CFR_W_Pos)
#define WWDG_CFR_W_3 (0x08U << WWDG_CFR_W_Pos)
#define WWDG_CFR_W_4 (0x10U << WWDG_CFR_W_Pos)
#define WWDG_CFR_W_5 (0x20U << WWDG_CFR_W_Pos)
#define WWDG_CFR_W_6 (0x40U << WWDG_CFR_W_Pos)
#define WWDG_CFR_WDGTB_Pos (11U)
#define WWDG_CFR_WDGTB_Msk (0x7UL << WWDG_CFR_WDGTB_Pos)
#define WWDG_CFR_WDGTB WWDG_CFR_WDGTB_Msk
#define WWDG_CFR_WDGTB_0 (0x1U << WWDG_CFR_WDGTB_Pos)
#define WWDG_CFR_WDGTB_1 (0x2U << WWDG_CFR_WDGTB_Pos)
#define WWDG_CFR_WDGTB_2 (0x4U << WWDG_CFR_WDGTB_Pos)
#define WWDG_CFR_EWI_Pos (9U)
#define WWDG_CFR_EWI_Msk (0x1UL << WWDG_CFR_EWI_Pos)
#define WWDG_CFR_EWI WWDG_CFR_EWI_Msk
#define WWDG_SR_EWIF_Pos (0U)
#define WWDG_SR_EWIF_Msk (0x1UL << WWDG_SR_EWIF_Pos)
#define WWDG_SR_EWIF WWDG_SR_EWIF_Msk
#define DBGMCU_IDCODE_DEV_ID_Pos (0U)
#define DBGMCU_IDCODE_DEV_ID_Msk (0xFFFUL << DBGMCU_IDCODE_DEV_ID_Pos)
#define DBGMCU_IDCODE_DEV_ID DBGMCU_IDCODE_DEV_ID_Msk
#define DBGMCU_IDCODE_REV_ID_Pos (16U)
#define DBGMCU_IDCODE_REV_ID_Msk (0xFFFFUL << DBGMCU_IDCODE_REV_ID_Pos)
#define DBGMCU_IDCODE_REV_ID DBGMCU_IDCODE_REV_ID_Msk
#define DBGMCU_CR_DBG_SLEEP_Pos (0U)
#define DBGMCU_CR_DBG_SLEEP_Msk (0x1UL << DBGMCU_CR_DBG_SLEEP_Pos)
#define DBGMCU_CR_DBG_SLEEP DBGMCU_CR_DBG_SLEEP_Msk
#define DBGMCU_CR_DBG_STOP_Pos (1U)
#define DBGMCU_CR_DBG_STOP_Msk (0x1UL << DBGMCU_CR_DBG_STOP_Pos)
#define DBGMCU_CR_DBG_STOP DBGMCU_CR_DBG_STOP_Msk
#define DBGMCU_CR_DBG_STANDBY_Pos (2U)
#define DBGMCU_CR_DBG_STANDBY_Msk (0x1UL << DBGMCU_CR_DBG_STANDBY_Pos)
#define DBGMCU_CR_DBG_STANDBY DBGMCU_CR_DBG_STANDBY_Msk
#define DBGMCU_CR_TRACE_IOEN_Pos (5U)
#define DBGMCU_CR_TRACE_IOEN_Msk (0x1UL << DBGMCU_CR_TRACE_IOEN_Pos)
#define DBGMCU_CR_TRACE_IOEN DBGMCU_CR_TRACE_IOEN_Msk
#define DBGMCU_CR_TRGOEN_Pos (28U)
#define DBGMCU_CR_TRGOEN_Msk (0x1UL << DBGMCU_CR_TRGOEN_Pos)
#define DBGMCU_CR_TRGOEN DBGMCU_CR_TRGOEN_Msk
#define DBGMCU_APB1FZR1_DBG_TIM2_STOP_Pos (0U)
#define DBGMCU_APB1FZR1_DBG_TIM2_STOP_Msk (0x1UL << DBGMCU_APB1FZR1_DBG_TIM2_STOP_Pos)
#define DBGMCU_APB1FZR1_DBG_TIM2_STOP DBGMCU_APB1FZR1_DBG_TIM2_STOP_Msk
#define DBGMCU_APB1FZR1_DBG_RTC_STOP_Pos (10U)
#define DBGMCU_APB1FZR1_DBG_RTC_STOP_Msk (0x1UL << DBGMCU_APB1FZR1_DBG_RTC_STOP_Pos)
#define DBGMCU_APB1FZR1_DBG_RTC_STOP DBGMCU_APB1FZR1_DBG_RTC_STOP_Msk
#define DBGMCU_APB1FZR1_DBG_WWDG_STOP_Pos (11U)
#define DBGMCU_APB1FZR1_DBG_WWDG_STOP_Msk (0x1UL << DBGMCU_APB1FZR1_DBG_WWDG_STOP_Pos)
#define DBGMCU_APB1FZR1_DBG_WWDG_STOP DBGMCU_APB1FZR1_DBG_WWDG_STOP_Msk
#define DBGMCU_APB1FZR1_DBG_IWDG_STOP_Pos (12U)
#define DBGMCU_APB1FZR1_DBG_IWDG_STOP_Msk (0x1UL << DBGMCU_APB1FZR1_DBG_IWDG_STOP_Pos)
#define DBGMCU_APB1FZR1_DBG_IWDG_STOP DBGMCU_APB1FZR1_DBG_IWDG_STOP_Msk
#define DBGMCU_APB1FZR1_DBG_I2C1_STOP_Pos (21U)
#define DBGMCU_APB1FZR1_DBG_I2C1_STOP_Msk (0x1UL << DBGMCU_APB1FZR1_DBG_I2C1_STOP_Pos)
#define DBGMCU_APB1FZR1_DBG_I2C1_STOP DBGMCU_APB1FZR1_DBG_I2C1_STOP_Msk
#define DBGMCU_APB1FZR1_DBG_I2C3_STOP_Pos (23U)
#define DBGMCU_APB1FZR1_DBG_I2C3_STOP_Msk (0x1UL << DBGMCU_APB1FZR1_DBG_I2C3_STOP_Pos)
#define DBGMCU_APB1FZR1_DBG_I2C3_STOP DBGMCU_APB1FZR1_DBG_I2C3_STOP_Msk
#define DBGMCU_APB1FZR1_DBG_LPTIM1_STOP_Pos (31U)
#define DBGMCU_APB1FZR1_DBG_LPTIM1_STOP_Msk (0x1UL << DBGMCU_APB1FZR1_DBG_LPTIM1_STOP_Pos)
#define DBGMCU_APB1FZR1_DBG_LPTIM1_STOP DBGMCU_APB1FZR1_DBG_LPTIM1_STOP_Msk
#define DBGMCU_C2APB1FZR1_DBG_TIM2_STOP_Pos (0U)
#define DBGMCU_C2APB1FZR1_DBG_TIM2_STOP_Msk (0x1UL << DBGMCU_C2APB1FZR1_DBG_TIM2_STOP_Pos)
#define DBGMCU_C2APB1FZR1_DBG_TIM2_STOP DBGMCU_C2APB1FZR1_DBG_TIM2_STOP_Msk
#define DBGMCU_C2APB1FZR1_DBG_RTC_STOP_Pos (10U)
#define DBGMCU_C2APB1FZR1_DBG_RTC_STOP_Msk (0x1UL << DBGMCU_C2APB1FZR1_DBG_RTC_STOP_Pos)
#define DBGMCU_C2APB1FZR1_DBG_RTC_STOP DBGMCU_C2APB1FZR1_DBG_RTC_STOP_Msk
#define DBGMCU_C2APB1FZR1_DBG_IWDG_STOP_Pos (12U)
#define DBGMCU_C2APB1FZR1_DBG_IWDG_STOP_Msk (0x1UL << DBGMCU_C2APB1FZR1_DBG_IWDG_STOP_Pos)
#define DBGMCU_C2APB1FZR1_DBG_IWDG_STOP DBGMCU_C2APB1FZR1_DBG_IWDG_STOP_Msk
#define DBGMCU_C2APB1FZR1_DBG_I2C1_STOP_Pos (21U)
#define DBGMCU_C2APB1FZR1_DBG_I2C1_STOP_Msk (0x1UL << DBGMCU_C2APB1FZR1_DBG_I2C1_STOP_Pos)
#define DBGMCU_C2APB1FZR1_DBG_I2C1_STOP DBGMCU_C2APB1FZR1_DBG_I2C1_STOP_Msk
#define DBGMCU_C2APB1FZR1_DBG_I2C3_STOP_Pos (23U)
#define DBGMCU_C2APB1FZR1_DBG_I2C3_STOP_Msk (0x1UL << DBGMCU_C2APB1FZR1_DBG_I2C3_STOP_Pos)
#define DBGMCU_C2APB1FZR1_DBG_I2C3_STOP DBGMCU_C2APB1FZR1_DBG_I2C3_STOP_Msk
#define DBGMCU_C2APB1FZR1_DBG_LPTIM1_STOP_Pos (31U)
#define DBGMCU_C2APB1FZR1_DBG_LPTIM1_STOP_Msk (0x1UL << DBGMCU_C2APB1FZR1_DBG_LPTIM1_STOP_Pos)
#define DBGMCU_C2APB1FZR1_DBG_LPTIM1_STOP DBGMCU_C2APB1FZR1_DBG_LPTIM1_STOP_Msk
#define DBGMCU_APB1FZR2_DBG_LPTIM2_STOP_Pos (5U)
#define DBGMCU_APB1FZR2_DBG_LPTIM2_STOP_Msk (0x1UL << DBGMCU_APB1FZR2_DBG_LPTIM2_STOP_Pos)
#define DBGMCU_APB1FZR2_DBG_LPTIM2_STOP DBGMCU_APB1FZR2_DBG_LPTIM2_STOP_Msk
#define DBGMCU_C2APB1FZR2_DBG_LPTIM2_STOP_Pos (5U)
#define DBGMCU_C2APB1FZR2_DBG_LPTIM2_STOP_Msk (0x1UL << DBGMCU_C2APB1FZR2_DBG_LPTIM2_STOP_Pos)
#define DBGMCU_C2APB1FZR2_DBG_LPTIM2_STOP DBGMCU_C2APB1FZR2_DBG_LPTIM2_STOP_Msk
#define DBGMCU_APB2FZR_DBG_TIM1_STOP_Pos (11U)
#define DBGMCU_APB2FZR_DBG_TIM1_STOP_Msk (0x1UL << DBGMCU_APB2FZR_DBG_TIM1_STOP_Pos)
#define DBGMCU_APB2FZR_DBG_TIM1_STOP DBGMCU_APB2FZR_DBG_TIM1_STOP_Msk
#define DBGMCU_APB2FZR_DBG_TIM16_STOP_Pos (17U)
#define DBGMCU_APB2FZR_DBG_TIM16_STOP_Msk (0x1UL << DBGMCU_APB2FZR_DBG_TIM16_STOP_Pos)
#define DBGMCU_APB2FZR_DBG_TIM16_STOP DBGMCU_APB2FZR_DBG_TIM16_STOP_Msk
#define DBGMCU_APB2FZR_DBG_TIM17_STOP_Pos (18U)
#define DBGMCU_APB2FZR_DBG_TIM17_STOP_Msk (0x1UL << DBGMCU_APB2FZR_DBG_TIM17_STOP_Pos)
#define DBGMCU_APB2FZR_DBG_TIM17_STOP DBGMCU_APB2FZR_DBG_TIM17_STOP_Msk
#define DBGMCU_C2APB2FZR_DBG_TIM1_STOP_Pos (11U)
#define DBGMCU_C2APB2FZR_DBG_TIM1_STOP_Msk (0x1UL << DBGMCU_C2APB2FZR_DBG_TIM1_STOP_Pos)
#define DBGMCU_C2APB2FZR_DBG_TIM1_STOP DBGMCU_C2APB2FZR_DBG_TIM1_STOP_Msk
#define DBGMCU_C2APB2FZR_DBG_TIM16_STOP_Pos (17U)
#define DBGMCU_C2APB2FZR_DBG_TIM16_STOP_Msk (0x1UL << DBGMCU_C2APB2FZR_DBG_TIM16_STOP_Pos)
#define DBGMCU_C2APB2FZR_DBG_TIM16_STOP DBGMCU_C2APB2FZR_DBG_TIM16_STOP_Msk
#define DBGMCU_C2APB2FZR_DBG_TIM17_STOP_Pos (18U)
#define DBGMCU_C2APB2FZR_DBG_TIM17_STOP_Msk (0x1UL << DBGMCU_C2APB2FZR_DBG_TIM17_STOP_Pos)
#define DBGMCU_C2APB2FZR_DBG_TIM17_STOP DBGMCU_C2APB2FZR_DBG_TIM17_STOP_Msk
#define USB_BASE (0x40005C00UL)
#define USB_PMAADDR_Pos (13U)
#define USB_PMAADDR_Msk (0x20003UL << USB_PMAADDR_Pos)
#define USB_PMAADDR USB_PMAADDR_Msk
#define USB_CNTR (USB_BASE + 0x40)
#define USB_ISTR (USB_BASE + 0x44)
#define USB_FNR (USB_BASE + 0x48)
#define USB_DADDR (USB_BASE + 0x4C)
#define USB_BTABLE (USB_BASE + 0x50)
#define USB_LPMCSR (USB_BASE + 0x54)
#define USB_BCDR (USB_BASE + 0x58)
#define USB_ISTR_CTR ((uint16_t)0x8000U)
#define USB_ISTR_PMAOVR ((uint16_t)0x4000U)
#define USB_ISTR_ERR ((uint16_t)0x2000U)
#define USB_ISTR_WKUP ((uint16_t)0x1000U)
#define USB_ISTR_SUSP ((uint16_t)0x0800U)
#define USB_ISTR_RESET ((uint16_t)0x0400U)
#define USB_ISTR_SOF ((uint16_t)0x0200U)
#define USB_ISTR_ESOF ((uint16_t)0x0100U)
#define USB_ISTR_L1REQ ((uint16_t)0x0080U)
#define USB_ISTR_DIR ((uint16_t)0x0010U)
#define USB_ISTR_EP_ID ((uint16_t)0x000FU)
#define USB_CLR_CTR (~USB_ISTR_CTR)
#define USB_CLR_PMAOVR (~USB_ISTR_PMAOVR)
#define USB_CLR_ERR (~USB_ISTR_ERR)
#define USB_CLR_WKUP (~USB_ISTR_WKUP)
#define USB_CLR_SUSP (~USB_ISTR_SUSP)
#define USB_CLR_RESET (~USB_ISTR_RESET)
#define USB_CLR_SOF (~USB_ISTR_SOF)
#define USB_CLR_ESOF (~USB_ISTR_ESOF)
#define USB_CLR_L1REQ (~USB_ISTR_L1REQ)
#define USB_CNTR_CTRM ((uint16_t)0x8000U)
#define USB_CNTR_PMAOVRM ((uint16_t)0x4000U)
#define USB_CNTR_ERRM ((uint16_t)0x2000U)
#define USB_CNTR_WKUPM ((uint16_t)0x1000U)
#define USB_CNTR_SUSPM ((uint16_t)0x0800U)
#define USB_CNTR_RESETM ((uint16_t)0x0400U)
#define USB_CNTR_SOFM ((uint16_t)0x0200U)
#define USB_CNTR_ESOFM ((uint16_t)0x0100U)
#define USB_CNTR_L1REQM ((uint16_t)0x0080U)
#define USB_CNTR_L1RESUME ((uint16_t)0x0020U)
#define USB_CNTR_RESUME ((uint16_t)0x0010U)
#define USB_CNTR_FSUSP ((uint16_t)0x0008U)
#define USB_CNTR_LPMODE ((uint16_t)0x0004U)
#define USB_CNTR_PDWN ((uint16_t)0x0002U)
#define USB_CNTR_FRES ((uint16_t)0x0001U)
#define USB_BCDR_DPPU ((uint16_t)0x8000U)
#define USB_BCDR_PS2DET ((uint16_t)0x0080U)
#define USB_BCDR_SDET ((uint16_t)0x0040U)
#define USB_BCDR_PDET ((uint16_t)0x0020U)
#define USB_BCDR_DCDET ((uint16_t)0x0010U)
#define USB_BCDR_SDEN ((uint16_t)0x0008U)
#define USB_BCDR_PDEN ((uint16_t)0x0004U)
#define USB_BCDR_DCDEN ((uint16_t)0x0002U)
#define USB_BCDR_BCDEN ((uint16_t)0x0001U)
#define USB_LPMCSR_BESL ((uint16_t)0x00F0U)
#define USB_LPMCSR_REMWAKE ((uint16_t)0x0008U)
#define USB_LPMCSR_LPMACK ((uint16_t)0x0002U)
#define USB_LPMCSR_LMPEN ((uint16_t)0x0001U)
#define USB_FNR_RXDP ((uint16_t)0x8000U)
#define USB_FNR_RXDM ((uint16_t)0x4000U)
#define USB_FNR_LCK ((uint16_t)0x2000U)
#define USB_FNR_LSOF ((uint16_t)0x1800U)
#define USB_FNR_FN ((uint16_t)0x07FFU)
#define USB_DADDR_EF ((uint8_t)0x80U)
#define USB_DADDR_ADD ((uint8_t)0x7FU)
#define USB_EP0R USB_BASE
#define USB_EP1R (USB_BASE + 0x04)
#define USB_EP2R (USB_BASE + 0x08)
#define USB_EP3R (USB_BASE + 0x0C)
#define USB_EP4R (USB_BASE + 0x10)
#define USB_EP5R (USB_BASE + 0x14)
#define USB_EP6R (USB_BASE + 0x18)
#define USB_EP7R (USB_BASE + 0x1C)
#define USB_EP_CTR_RX ((uint16_t)0x8000U)
#define USB_EP_DTOG_RX ((uint16_t)0x4000U)
#define USB_EPRX_STAT ((uint16_t)0x3000U)
#define USB_EP_SETUP ((uint16_t)0x0800U)
#define USB_EP_T_FIELD ((uint16_t)0x0600U)
#define USB_EP_KIND ((uint16_t)0x0100U)
#define USB_EP_CTR_TX ((uint16_t)0x0080U)
#define USB_EP_DTOG_TX ((uint16_t)0x0040U)
#define USB_EPTX_STAT ((uint16_t)0x0030U)
#define USB_EPADDR_FIELD ((uint16_t)0x000FU)
#define USB_EPREG_MASK (USB_EP_CTR_RX|USB_EP_SETUP|USB_EP_T_FIELD|USB_EP_KIND|USB_EP_CTR_TX|USB_EPADDR_FIELD)
#define USB_EP_TYPE_MASK ((uint16_t)0x0600U)
#define USB_EP_BULK ((uint16_t)0x0000U)
#define USB_EP_CONTROL ((uint16_t)0x0200U)
#define USB_EP_ISOCHRONOUS ((uint16_t)0x0400U)
#define USB_EP_INTERRUPT ((uint16_t)0x0600U)
#define USB_EP_T_MASK ((uint16_t) ~USB_EP_T_FIELD & USB_EPREG_MASK)
#define USB_EPKIND_MASK ((uint16_t)~USB_EP_KIND & USB_EPREG_MASK)
#define USB_EP_TX_DIS ((uint16_t)0x0000U)
#define USB_EP_TX_STALL ((uint16_t)0x0010U)
#define USB_EP_TX_NAK ((uint16_t)0x0020U)
#define USB_EP_TX_VALID ((uint16_t)0x0030U)
#define USB_EPTX_DTOG1 ((uint16_t)0x0010U)
#define USB_EPTX_DTOG2 ((uint16_t)0x0020U)
#define USB_EPTX_DTOGMASK (USB_EPTX_STAT|USB_EPREG_MASK)
#define USB_EP_RX_DIS ((uint16_t)0x0000U)
#define USB_EP_RX_STALL ((uint16_t)0x1000U)
#define USB_EP_RX_NAK ((uint16_t)0x2000U)
#define USB_EP_RX_VALID ((uint16_t)0x3000U)
#define USB_EPRX_DTOG1 ((uint16_t)0x1000U)
#define USB_EPRX_DTOG2 ((uint16_t)0x2000U)
#define USB_EPRX_DTOGMASK (USB_EPRX_STAT|USB_EPREG_MASK)
#define USB_BTABLE_BTABLE ((uint16_t)0xFFF8U)
#define CRS_CR_SYNCOKIE_Pos (0U)
#define CRS_CR_SYNCOKIE_Msk (0x1UL << CRS_CR_SYNCOKIE_Pos)
#define CRS_CR_SYNCOKIE CRS_CR_SYNCOKIE_Msk
#define CRS_CR_SYNCWARNIE_Pos (1U)
#define CRS_CR_SYNCWARNIE_Msk (0x1UL << CRS_CR_SYNCWARNIE_Pos)
#define CRS_CR_SYNCWARNIE CRS_CR_SYNCWARNIE_Msk
#define CRS_CR_ERRIE_Pos (2U)
#define CRS_CR_ERRIE_Msk (0x1UL << CRS_CR_ERRIE_Pos)
#define CRS_CR_ERRIE CRS_CR_ERRIE_Msk
#define CRS_CR_ESYNCIE_Pos (3U)
#define CRS_CR_ESYNCIE_Msk (0x1UL << CRS_CR_ESYNCIE_Pos)
#define CRS_CR_ESYNCIE CRS_CR_ESYNCIE_Msk
#define CRS_CR_CEN_Pos (5U)
#define CRS_CR_CEN_Msk (0x1UL << CRS_CR_CEN_Pos)
#define CRS_CR_CEN CRS_CR_CEN_Msk
#define CRS_CR_AUTOTRIMEN_Pos (6U)
#define CRS_CR_AUTOTRIMEN_Msk (0x1UL << CRS_CR_AUTOTRIMEN_Pos)
#define CRS_CR_AUTOTRIMEN CRS_CR_AUTOTRIMEN_Msk
#define CRS_CR_SWSYNC_Pos (7U)
#define CRS_CR_SWSYNC_Msk (0x1UL << CRS_CR_SWSYNC_Pos)
#define CRS_CR_SWSYNC CRS_CR_SWSYNC_Msk
#define CRS_CR_TRIM_Pos (8U)
#define CRS_CR_TRIM_Msk (0x3FUL << CRS_CR_TRIM_Pos)
#define CRS_CR_TRIM CRS_CR_TRIM_Msk
#define CRS_CFGR_RELOAD_Pos (0U)
#define CRS_CFGR_RELOAD_Msk (0xFFFFUL << CRS_CFGR_RELOAD_Pos)
#define CRS_CFGR_RELOAD CRS_CFGR_RELOAD_Msk
#define CRS_CFGR_FELIM_Pos (16U)
#define CRS_CFGR_FELIM_Msk (0xFFUL << CRS_CFGR_FELIM_Pos)
#define CRS_CFGR_FELIM CRS_CFGR_FELIM_Msk
#define CRS_CFGR_SYNCDIV_Pos (24U)
#define CRS_CFGR_SYNCDIV_Msk (0x7UL << CRS_CFGR_SYNCDIV_Pos)
#define CRS_CFGR_SYNCDIV CRS_CFGR_SYNCDIV_Msk
#define CRS_CFGR_SYNCDIV_0 (0x1U << CRS_CFGR_SYNCDIV_Pos)
#define CRS_CFGR_SYNCDIV_1 (0x2U << CRS_CFGR_SYNCDIV_Pos)
#define CRS_CFGR_SYNCDIV_2 (0x4U << CRS_CFGR_SYNCDIV_Pos)
#define CRS_CFGR_SYNCSRC_Pos (28U)
#define CRS_CFGR_SYNCSRC_Msk (0x3UL << CRS_CFGR_SYNCSRC_Pos)
#define CRS_CFGR_SYNCSRC CRS_CFGR_SYNCSRC_Msk
#define CRS_CFGR_SYNCSRC_0 (0x1U << CRS_CFGR_SYNCSRC_Pos)
#define CRS_CFGR_SYNCSRC_1 (0x2U << CRS_CFGR_SYNCSRC_Pos)
#define CRS_CFGR_SYNCPOL_Pos (31U)
#define CRS_CFGR_SYNCPOL_Msk (0x1UL << CRS_CFGR_SYNCPOL_Pos)
#define CRS_CFGR_SYNCPOL CRS_CFGR_SYNCPOL_Msk
#define CRS_ISR_SYNCOKF_Pos (0U)
#define CRS_ISR_SYNCOKF_Msk (0x1UL << CRS_ISR_SYNCOKF_Pos)
#define CRS_ISR_SYNCOKF CRS_ISR_SYNCOKF_Msk
#define CRS_ISR_SYNCWARNF_Pos (1U)
#define CRS_ISR_SYNCWARNF_Msk (0x1UL << CRS_ISR_SYNCWARNF_Pos)
#define CRS_ISR_SYNCWARNF CRS_ISR_SYNCWARNF_Msk
#define CRS_ISR_ERRF_Pos (2U)
#define CRS_ISR_ERRF_Msk (0x1UL << CRS_ISR_ERRF_Pos)
#define CRS_ISR_ERRF CRS_ISR_ERRF_Msk
#define CRS_ISR_ESYNCF_Pos (3U)
#define CRS_ISR_ESYNCF_Msk (0x1UL << CRS_ISR_ESYNCF_Pos)
#define CRS_ISR_ESYNCF CRS_ISR_ESYNCF_Msk
#define CRS_ISR_SYNCERR_Pos (8U)
#define CRS_ISR_SYNCERR_Msk (0x1UL << CRS_ISR_SYNCERR_Pos)
#define CRS_ISR_SYNCERR CRS_ISR_SYNCERR_Msk
#define CRS_ISR_SYNCMISS_Pos (9U)
#define CRS_ISR_SYNCMISS_Msk (0x1UL << CRS_ISR_SYNCMISS_Pos)
#define CRS_ISR_SYNCMISS CRS_ISR_SYNCMISS_Msk
#define CRS_ISR_TRIMOVF_Pos (10U)
#define CRS_ISR_TRIMOVF_Msk (0x1UL << CRS_ISR_TRIMOVF_Pos)
#define CRS_ISR_TRIMOVF CRS_ISR_TRIMOVF_Msk
#define CRS_ISR_FEDIR_Pos (15U)
#define CRS_ISR_FEDIR_Msk (0x1UL << CRS_ISR_FEDIR_Pos)
#define CRS_ISR_FEDIR CRS_ISR_FEDIR_Msk
#define CRS_ISR_FECAP_Pos (16U)
#define CRS_ISR_FECAP_Msk (0xFFFFUL << CRS_ISR_FECAP_Pos)
#define CRS_ISR_FECAP CRS_ISR_FECAP_Msk
#define CRS_ICR_SYNCOKC_Pos (0U)
#define CRS_ICR_SYNCOKC_Msk (0x1UL << CRS_ICR_SYNCOKC_Pos)
#define CRS_ICR_SYNCOKC CRS_ICR_SYNCOKC_Msk
#define CRS_ICR_SYNCWARNC_Pos (1U)
#define CRS_ICR_SYNCWARNC_Msk (0x1UL << CRS_ICR_SYNCWARNC_Pos)
#define CRS_ICR_SYNCWARNC CRS_ICR_SYNCWARNC_Msk
#define CRS_ICR_ERRC_Pos (2U)
#define CRS_ICR_ERRC_Msk (0x1UL << CRS_ICR_ERRC_Pos)
#define CRS_ICR_ERRC CRS_ICR_ERRC_Msk
#define CRS_ICR_ESYNCC_Pos (3U)
#define CRS_ICR_ESYNCC_Msk (0x1UL << CRS_ICR_ESYNCC_Pos)
#define CRS_ICR_ESYNCC CRS_ICR_ESYNCC_Msk
#define IS_UART_INSTANCE(INSTANCE) ((INSTANCE) == USART1)
#define IS_UART_FIFO_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == LPUART1))
#define IS_UART_SPI_SLAVE_INSTANCE(INSTANCE) ((INSTANCE) == USART1)
#define IS_USART_INSTANCE(INSTANCE) ((INSTANCE) == USART1)
#define IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(INSTANCE) ((INSTANCE) == USART1)
#define IS_UART_HALFDUPLEX_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == LPUART1))
#define IS_UART_LIN_INSTANCE(INSTANCE) ((INSTANCE) == USART1)
#define IS_UART_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == LPUART1))
#define IS_UART_HWFLOW_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || ((INSTANCE) == LPUART1))
#define IS_SMARTCARD_INSTANCE(INSTANCE) ((INSTANCE) == USART1)
#define IS_UART_DRIVER_ENABLE_INSTANCE(INSTANCE) (((INSTANCE) == USART1)|| ((INSTANCE) == LPUART1))
#define IS_IRDA_INSTANCE(INSTANCE) ((INSTANCE) == USART1)
#define IS_LPUART_INSTANCE(INSTANCE) ((INSTANCE) == LPUART1)
#define IS_ADC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == ADC1)
#define IS_ADC_COMMON_INSTANCE(INSTANCE) ((INSTANCE) == ADC1_COMMON)
#define IS_AES_ALL_INSTANCE(INSTANCE) (((INSTANCE) == AES1) || ((INSTANCE) == AES2))
#define IS_COMP_ALL_INSTANCE(INSTANCE) (((INSTANCE) == COMP1) || ((INSTANCE) == COMP2))
#define IS_COMP_COMMON_INSTANCE(INSTANCE) ((INSTANCE) == COMP12_COMMON)
#define IS_COMP_WINDOWMODE_INSTANCE(INSTANCE) ((INSTANCE) == COMP2)
#define IS_CRC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == CRC)
#define IS_DMA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == DMA1_Channel1) || ((INSTANCE) == DMA1_Channel2) || ((INSTANCE) == DMA1_Channel3) || ((INSTANCE) == DMA1_Channel4) || ((INSTANCE) == DMA1_Channel5) || ((INSTANCE) == DMA1_Channel6) || ((INSTANCE) == DMA1_Channel7) || ((INSTANCE) == DMA2_Channel1) || ((INSTANCE) == DMA2_Channel2) || ((INSTANCE) == DMA2_Channel3) || ((INSTANCE) == DMA2_Channel4) || ((INSTANCE) == DMA2_Channel5) || ((INSTANCE) == DMA2_Channel6) || ((INSTANCE) == DMA2_Channel7))
#define IS_DMAMUX_ALL_INSTANCE(INSTANCE) ((INSTANCE) == DMAMUX1)
#define IS_DMAMUX_REQUEST_GEN_ALL_INSTANCE(INSTANCE) (((INSTANCE) == DMAMUX1_RequestGenerator0) || ((INSTANCE) == DMAMUX1_RequestGenerator1) || ((INSTANCE) == DMAMUX1_RequestGenerator2) || ((INSTANCE) == DMAMUX1_RequestGenerator3))
#define IS_GPIO_ALL_INSTANCE(INSTANCE) (((INSTANCE) == GPIOA) || ((INSTANCE) == GPIOB) || ((INSTANCE) == GPIOC) || ((INSTANCE) == GPIOD) || ((INSTANCE) == GPIOE) || ((INSTANCE) == GPIOH))
#define IS_GPIO_AF_INSTANCE(INSTANCE) IS_GPIO_ALL_INSTANCE(INSTANCE)
#define IS_GPIO_LOCK_INSTANCE(INSTANCE) IS_GPIO_ALL_INSTANCE(INSTANCE)
#define IS_I2C_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C1) || ((INSTANCE) == I2C3))
#define IS_I2C_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) IS_I2C_ALL_INSTANCE(INSTANCE)
#define IS_SMBUS_ALL_INSTANCE(INSTANCE) IS_I2C_ALL_INSTANCE(INSTANCE)
#define IS_IPCC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == IPCC)
#define IS_LCD_ALL_INSTANCE(INSTANCE) ((INSTANCE) == LCD)
#define IS_HSEM_ALL_INSTANCE(INSTANCE) ((INSTANCE) == HSEM)
#define HSEM_CPU1_COREID (0x00000004UL)
#define HSEM_CPU2_COREID (0x00000008UL)
#define HSEM_SEMID_MIN (0U)
#define HSEM_SEMID_MAX (31U)
#define HSEM_PROCESSID_MIN (0U)
#define HSEM_PROCESSID_MAX (255U)
#define HSEM_CLEAR_KEY_MIN (0U)
#define HSEM_CLEAR_KEY_MAX (0xFFFFU)
#define IS_PCD_ALL_INSTANCE(INSTANCE) ((INSTANCE) == USB)
#define IS_PKA_ALL_INSTANCE(INSTANCE) ((INSTANCE) == PKA)
#define IS_QUADSPI_ALL_INSTANCE(INSTANCE) ((INSTANCE) == QUADSPI)
#define IS_RNG_ALL_INSTANCE(INSTANCE) ((INSTANCE) == RNG)
#define IS_RTC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == RTC)
#define IS_SAI_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SAI1_Block_A) || ((INSTANCE) == SAI1_Block_B))
#define IS_SPI_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SPI1) || ((INSTANCE) == SPI2))
#define IS_LPTIM_INSTANCE(INSTANCE) (((INSTANCE) == LPTIM1) || ((INSTANCE) == LPTIM2))
#define IS_LPTIM_ENCODER_INTERFACE_INSTANCE(INSTANCE) ((INSTANCE) == LPTIM1)
#define IS_TIM_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
#define IS_IWDG_ALL_INSTANCE(INSTANCE) ((INSTANCE) == IWDG)
#define IS_WWDG_ALL_INSTANCE(INSTANCE) ((INSTANCE) == WWDG)
#define IS_USB_ALL_INSTANCE(INSTANCE) ((INSTANCE) == USB)
#define IS_TIM_32B_COUNTER_INSTANCE(INSTANCE) ((INSTANCE) == TIM2)
#define IS_TIM_BREAK_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
#define IS_TIM_BREAKSOURCE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
#define IS_TIM_BKIN2_INSTANCE(INSTANCE) ((INSTANCE) == TIM1)
#define IS_TIM_CC1_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
#define IS_TIM_CC2_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_CC3_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_CC4_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_CC5_INSTANCE(INSTANCE) ((INSTANCE) == TIM1)
#define IS_TIM_CC6_INSTANCE(INSTANCE) ((INSTANCE) == TIM1)
#define IS_TIM_CCDMA_INSTANCE(INSTANCE) ((INSTANCE) == TIM1)
#define IS_TIM_DMA_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
#define IS_TIM_DMA_CC_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
#define IS_TIM_DMABURST_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
#define IS_TIM_TISEL_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
#define IS_TIM_CCX_INSTANCE(INSTANCE,CHANNEL) ((((INSTANCE) == TIM1) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4) || ((CHANNEL) == TIM_CHANNEL_5) || ((CHANNEL) == TIM_CHANNEL_6))) || (((INSTANCE) == TIM2) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3) || ((CHANNEL) == TIM_CHANNEL_4))) || (((INSTANCE) == TIM16) && (((CHANNEL) == TIM_CHANNEL_1))) || (((INSTANCE) == TIM17) && (((CHANNEL) == TIM_CHANNEL_1))))
#define IS_TIM_CCXN_INSTANCE(INSTANCE,CHANNEL) ((((INSTANCE) == TIM1) && (((CHANNEL) == TIM_CHANNEL_1) || ((CHANNEL) == TIM_CHANNEL_2) || ((CHANNEL) == TIM_CHANNEL_3))) || (((INSTANCE) == TIM17) && ((CHANNEL) == TIM_CHANNEL_1)) || (((INSTANCE) == TIM16) && ((CHANNEL) == TIM_CHANNEL_1)))
#define IS_TIM_CLOCK_DIVISION_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
#define IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_CLOCKSOURCE_TIX_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_COMBINED3PHASEPWM_INSTANCE(INSTANCE) ((INSTANCE) == TIM1)
#define IS_TIM_COMMUTATION_EVENT_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
#define IS_TIM_COUNTER_MODE_SELECT_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_ENCODER_INTERFACE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_ETR_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_ETRSEL_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_MASTER_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_SLAVE_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_OCXREF_CLEAR_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_REMAP_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
#define IS_TIM_REPETITION_COUNTER_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM16) || ((INSTANCE) == TIM17))
#define IS_TIM_TRGO2_INSTANCE(INSTANCE) ((INSTANCE) == TIM1)
#define IS_TIM_XOR_INSTANCE(INSTANCE) (((INSTANCE) == TIM1) || ((INSTANCE) == TIM2))
#define IS_TIM_ADVANCED_INSTANCE(INSTANCE) (((INSTANCE) == TIM1))
#define IS_TSC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == TSC)
typedef enum
{
  RESET = 0,
  SET = !RESET
} FlagStatus, ITStatus;
typedef enum
{
  DISABLE = 0,
  ENABLE = !DISABLE
} FunctionalState;
#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))
typedef enum
{
  SUCCESS = 0,
  ERROR = !SUCCESS
} ErrorStatus;
#define SET_BIT(REG,BIT) ((REG) |= (BIT))
#define CLEAR_BIT(REG,BIT) ((REG) &= ~(BIT))
#define READ_BIT(REG,BIT) ((REG) & (BIT))
#define CLEAR_REG(REG) ((REG) = (0x0))
#define WRITE_REG(REG,VAL) ((REG) = (VAL))
#define READ_REG(REG) ((REG))
#define MODIFY_REG(REG,CLEARMASK,SETMASK) WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))
#define ATOMIC_SET_BIT(REG,BIT) do { uint32_t val; do { val = __LDREXW((__IO uint32_t *)&(REG)) | (BIT); } while ((__STREXW(val,(__IO uint32_t *)&(REG))) != 0U); } while(0)
#define ATOMIC_CLEAR_BIT(REG,BIT) do { uint32_t val; do { val = __LDREXW((__IO uint32_t *)&(REG)) & ~(BIT); } while ((__STREXW(val,(__IO uint32_t *)&(REG))) != 0U); } while(0)
#define ATOMIC_MODIFY_REG(REG,CLEARMSK,SETMASK) do { uint32_t val; do { val = (__LDREXW((__IO uint32_t *)&(REG)) & ~(CLEARMSK)) | (SETMASK); } while ((__STREXW(val,(__IO uint32_t *)&(REG))) != 0U); } while(0)
#define ATOMIC_SETH_BIT(REG,BIT) do { uint16_t val; do { val = __LDREXH((__IO uint16_t *)&(REG)) | (BIT); } while ((__STREXH(val,(__IO uint16_t *)&(REG))) != 0U); } while(0)
#define ATOMIC_CLEARH_BIT(REG,BIT) do { uint16_t val; do { val = __LDREXH((__IO uint16_t *)&(REG)) & ~(BIT); } while ((__STREXH(val,(__IO uint16_t *)&(REG))) != 0U); } while(0)
#define ATOMIC_MODIFYH_REG(REG,CLEARMSK,SETMASK) do { uint16_t val; do { val = (__LDREXH((__IO uint16_t *)&(REG)) & ~(CLEARMSK)) | (SETMASK); } while ((__STREXH(val,(__IO uint16_t *)&(REG))) != 0U); } while(0)
#define POSITION_VAL(VAL) (__CLZ(__RBIT(VAL)))
typedef struct
{
  uint32_t Pin;
  uint32_t Mode;
  uint32_t Speed;
  uint32_t OutputType;
  uint32_t Pull;
  uint32_t Alternate;
} LL_GPIO_InitTypeDef;
#define LL_GPIO_PIN_0 GPIO_BSRR_BS0
#define LL_GPIO_PIN_1 GPIO_BSRR_BS1
#define LL_GPIO_PIN_2 GPIO_BSRR_BS2
#define LL_GPIO_PIN_3 GPIO_BSRR_BS3
#define LL_GPIO_PIN_4 GPIO_BSRR_BS4
#define LL_GPIO_PIN_5 GPIO_BSRR_BS5
#define LL_GPIO_PIN_6 GPIO_BSRR_BS6
#define LL_GPIO_PIN_7 GPIO_BSRR_BS7
#define LL_GPIO_PIN_8 GPIO_BSRR_BS8
#define LL_GPIO_PIN_9 GPIO_BSRR_BS9
#define LL_GPIO_PIN_10 GPIO_BSRR_BS10
#define LL_GPIO_PIN_11 GPIO_BSRR_BS11
#define LL_GPIO_PIN_12 GPIO_BSRR_BS12
#define LL_GPIO_PIN_13 GPIO_BSRR_BS13
#define LL_GPIO_PIN_14 GPIO_BSRR_BS14
#define LL_GPIO_PIN_15 GPIO_BSRR_BS15
#define LL_GPIO_PIN_ALL (GPIO_BSRR_BS0 | GPIO_BSRR_BS1 | GPIO_BSRR_BS2 | GPIO_BSRR_BS3 | GPIO_BSRR_BS4 | GPIO_BSRR_BS5 | GPIO_BSRR_BS6 | GPIO_BSRR_BS7 | GPIO_BSRR_BS8 | GPIO_BSRR_BS9 | GPIO_BSRR_BS10 | GPIO_BSRR_BS11 | GPIO_BSRR_BS12 | GPIO_BSRR_BS13 | GPIO_BSRR_BS14 | GPIO_BSRR_BS15)
#define LL_GPIO_MODE_INPUT (0x00000000U)
#define LL_GPIO_MODE_OUTPUT GPIO_MODER_MODE0_0
#define LL_GPIO_MODE_ALTERNATE GPIO_MODER_MODE0_1
#define LL_GPIO_MODE_ANALOG GPIO_MODER_MODE0
#define LL_GPIO_OUTPUT_PUSHPULL (0x00000000U)
#define LL_GPIO_OUTPUT_OPENDRAIN GPIO_OTYPER_OT0
#define LL_GPIO_SPEED_FREQ_LOW (0x00000000U)
#define LL_GPIO_SPEED_FREQ_MEDIUM GPIO_OSPEEDR_OSPEED0_0
#define LL_GPIO_SPEED_FREQ_HIGH GPIO_OSPEEDR_OSPEED0_1
#define LL_GPIO_SPEED_FREQ_VERY_HIGH GPIO_OSPEEDR_OSPEED0
#define LL_GPIO_PULL_NO (0x00000000U)
#define LL_GPIO_PULL_UP GPIO_PUPDR_PUPD0_0
#define LL_GPIO_PULL_DOWN GPIO_PUPDR_PUPD0_1
#define LL_GPIO_AF_0 (0x0000000U)
#define LL_GPIO_AF_1 (0x0000001U)
#define LL_GPIO_AF_2 (0x0000002U)
#define LL_GPIO_AF_3 (0x0000003U)
#define LL_GPIO_AF_4 (0x0000004U)
#define LL_GPIO_AF_5 (0x0000005U)
#define LL_GPIO_AF_6 (0x0000006U)
#define LL_GPIO_AF_7 (0x0000007U)
#define LL_GPIO_AF_8 (0x0000008U)
#define LL_GPIO_AF_9 (0x0000009U)
#define LL_GPIO_AF_10 (0x000000AU)
#define LL_GPIO_AF_11 (0x000000BU)
#define LL_GPIO_AF_12 (0x000000CU)
#define LL_GPIO_AF_13 (0x000000DU)
#define LL_GPIO_AF_14 (0x000000EU)
#define LL_GPIO_AF_15 (0x000000FU)
#define LL_GPIO_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_GPIO_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
static inline void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  (((GPIOx->MODER)) = ((((((GPIOx->MODER))) & (~(((0x3UL << (0U)) << ((__CLZ(__RBIT(Pin))) * 2U))))) | ((Mode << ((__CLZ(__RBIT(Pin))) * 2U))))));
}
static inline uint32_t LL_GPIO_GetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
  return (uint32_t)(((GPIOx->MODER) & (((0x3UL << (0U)) << ((__CLZ(__RBIT(Pin))) * 2U)))) >> ((__CLZ(__RBIT(Pin))) * 2U));
}
static inline void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  (((GPIOx->OTYPER)) = ((((((GPIOx->OTYPER))) & (~(PinMask))) | ((PinMask * OutputType)))));
}
static inline uint32_t LL_GPIO_GetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
  return (uint32_t)(((GPIOx->OTYPER) & (Pin)) >> (__CLZ(__RBIT(Pin))));
}
static inline void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Speed)
{
  (((GPIOx->OSPEEDR)) = ((((((GPIOx->OSPEEDR))) & (~(((0x3UL << (0U)) << ((__CLZ(__RBIT(Pin))) * 2U))))) | ((Speed << ((__CLZ(__RBIT(Pin))) * 2U))))));
}
static inline uint32_t LL_GPIO_GetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
  return (uint32_t)(((GPIOx->OSPEEDR) & (((0x3UL << (0U)) << ((__CLZ(__RBIT(Pin))) * 2U)))) >> ((__CLZ(__RBIT(Pin))) * 2U));
}
static inline void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  (((GPIOx->PUPDR)) = ((((((GPIOx->PUPDR))) & (~(((0x3UL << (0U)) << ((__CLZ(__RBIT(Pin))) * 2U))))) | ((Pull << ((__CLZ(__RBIT(Pin))) * 2U))))));
}
static inline uint32_t LL_GPIO_GetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
  return (uint32_t)(((GPIOx->PUPDR) & (((0x3UL << (0U)) << ((__CLZ(__RBIT(Pin))) * 2U)))) >> ((__CLZ(__RBIT(Pin))) * 2U));
}
static inline void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  (((GPIOx->AFR[0])) = ((((((GPIOx->AFR[0]))) & (~(((0xFUL << (0U)) << ((__CLZ(__RBIT(Pin))) * 4U))))) | ((Alternate << ((__CLZ(__RBIT(Pin))) * 4U))))));
}
static inline uint32_t LL_GPIO_GetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
  return (uint32_t)(((GPIOx->AFR[0]) & (((0xFUL << (0U)) << ((__CLZ(__RBIT(Pin))) * 4U)))) >> ((__CLZ(__RBIT(Pin))) * 4U));
}
static inline void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  (((GPIOx->AFR[1])) = ((((((GPIOx->AFR[1]))) & (~(((0xFUL << (0U)) << ((__CLZ(__RBIT(Pin >> 8U))) * 4U))))) | ((Alternate << ((__CLZ(__RBIT(Pin >> 8U))) * 4U))))));
}
static inline uint32_t LL_GPIO_GetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin)
{
  return (uint32_t)(((GPIOx->AFR[1]) & (((0xFUL << (0U)) << ((__CLZ(__RBIT(Pin >> 8U))) * 4U)))) >> ((__CLZ(__RBIT(Pin >> 8U))) * 4U));
}
static inline void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  volatile uint32_t temp;
  ((GPIOx->LCKR) = ((0x1UL << (16U)) | PinMask));
  ((GPIOx->LCKR) = (PinMask));
  ((GPIOx->LCKR) = ((0x1UL << (16U)) | PinMask));
  temp = ((GPIOx->LCKR));
  (void) temp;
}
static inline uint32_t LL_GPIO_IsPinLocked(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return ((((GPIOx->LCKR) & (PinMask)) == (PinMask)) ? 1UL : 0UL);
}
static inline uint32_t LL_GPIO_IsAnyPinLocked(GPIO_TypeDef *GPIOx)
{
  return ((((GPIOx->LCKR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(((GPIOx->IDR)));
}
static inline uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return ((((GPIOx->IDR) & (PinMask)) == (PinMask)) ? 1UL : 0UL);
}
static inline void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
{
  ((GPIOx->ODR) = (PortValue));
}
static inline uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(((GPIOx->ODR)));
}
static inline uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return ((((GPIOx->ODR) & (PinMask)) == (PinMask)) ? 1UL : 0UL);
}
static inline void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  ((GPIOx->BSRR) = (PinMask));
}
static inline void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  ((GPIOx->BRR) = (PinMask));
}
static inline void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = ((GPIOx->ODR));
  ((GPIOx->BSRR) = (((odr & PinMask) << 16u) | (~odr & PinMask)));
}
ErrorStatus LL_GPIO_DeInit(GPIO_TypeDef *GPIOx);
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct);
void LL_GPIO_StructInit(LL_GPIO_InitTypeDef *GPIO_InitStruct);
#define STM32WBxx_LL_SYSTEM_H 
#define VREFBUF_SC0_CAL_ADDR ((uint8_t*) (0x1FFF75F0UL))
#define VREFBUF_SC1_CAL_ADDR ((uint8_t*) (0x1FFF7530UL))
#define LL_SYSCFG_REMAP_FLASH 0x00000000U
#define LL_SYSCFG_REMAP_SYSTEMFLASH SYSCFG_MEMRMP_MEM_MODE_0
#define LL_SYSCFG_REMAP_SRAM (SYSCFG_MEMRMP_MEM_MODE_1 | SYSCFG_MEMRMP_MEM_MODE_0)
#define LL_SYSCFG_REMAP_QUADSPI (SYSCFG_MEMRMP_MEM_MODE_2 | SYSCFG_MEMRMP_MEM_MODE_1)
#define LL_SYSCFG_I2C_FASTMODEPLUS_PB6 SYSCFG_CFGR1_I2C_PB6_FMP
#define LL_SYSCFG_I2C_FASTMODEPLUS_PB7 SYSCFG_CFGR1_I2C_PB7_FMP
#define LL_SYSCFG_I2C_FASTMODEPLUS_PB8 SYSCFG_CFGR1_I2C_PB8_FMP
#define LL_SYSCFG_I2C_FASTMODEPLUS_PB9 SYSCFG_CFGR1_I2C_PB9_FMP
#define LL_SYSCFG_I2C_FASTMODEPLUS_I2C1 SYSCFG_CFGR1_I2C1_FMP
#define LL_SYSCFG_I2C_FASTMODEPLUS_I2C3 SYSCFG_CFGR1_I2C3_FMP
#define LL_SYSCFG_EXTI_PORTA 0U
#define LL_SYSCFG_EXTI_PORTB 1U
#define LL_SYSCFG_EXTI_PORTC 2U
#define LL_SYSCFG_EXTI_PORTD 3U
#define LL_SYSCFG_EXTI_PORTE 4U
#define LL_SYSCFG_EXTI_PORTH 7U
#define LL_SYSCFG_EXTI_LINE0 (uint32_t)((0x000FU << 16U) | 0U)
#define LL_SYSCFG_EXTI_LINE1 (uint32_t)((0x00F0U << 16U) | 0U)
#define LL_SYSCFG_EXTI_LINE2 (uint32_t)((0x0F00U << 16U) | 0U)
#define LL_SYSCFG_EXTI_LINE3 (uint32_t)((0xF000U << 16U) | 0U)
#define LL_SYSCFG_EXTI_LINE4 (uint32_t)((0x000FU << 16U) | 1U)
#define LL_SYSCFG_EXTI_LINE5 (uint32_t)((0x00F0U << 16U) | 1U)
#define LL_SYSCFG_EXTI_LINE6 (uint32_t)((0x0F00U << 16U) | 1U)
#define LL_SYSCFG_EXTI_LINE7 (uint32_t)((0xF000U << 16U) | 1U)
#define LL_SYSCFG_EXTI_LINE8 (uint32_t)((0x000FU << 16U) | 2U)
#define LL_SYSCFG_EXTI_LINE9 (uint32_t)((0x00F0U << 16U) | 2U)
#define LL_SYSCFG_EXTI_LINE10 (uint32_t)((0x0F00U << 16U) | 2U)
#define LL_SYSCFG_EXTI_LINE11 (uint32_t)((0xF000U << 16U) | 2U)
#define LL_SYSCFG_EXTI_LINE12 (uint32_t)((0x000FU << 16U) | 3U)
#define LL_SYSCFG_EXTI_LINE13 (uint32_t)((0x00F0U << 16U) | 3U)
#define LL_SYSCFG_EXTI_LINE14 (uint32_t)((0x0F00U << 16U) | 3U)
#define LL_SYSCFG_EXTI_LINE15 (uint32_t)((0xF000U << 16U) | 3U)
#define LL_SYSCFG_TIMBREAK_ECC SYSCFG_CFGR2_ECCL
#define LL_SYSCFG_TIMBREAK_PVD SYSCFG_CFGR2_PVDL
#define LL_SYSCFG_TIMBREAK_SRAM2_PARITY SYSCFG_CFGR2_SPL
#define LL_SYSCFG_TIMBREAK_LOCKUP SYSCFG_CFGR2_CLL
#define LL_SYSCFG_SRAM2WRP_PAGE0 SYSCFG_SWPR1_PAGE0
#define LL_SYSCFG_SRAM2WRP_PAGE1 SYSCFG_SWPR1_PAGE1
#define LL_SYSCFG_SRAM2WRP_PAGE2 SYSCFG_SWPR1_PAGE2
#define LL_SYSCFG_SRAM2WRP_PAGE3 SYSCFG_SWPR1_PAGE3
#define LL_SYSCFG_SRAM2WRP_PAGE4 SYSCFG_SWPR1_PAGE4
#define LL_SYSCFG_SRAM2WRP_PAGE5 SYSCFG_SWPR1_PAGE5
#define LL_SYSCFG_SRAM2WRP_PAGE6 SYSCFG_SWPR1_PAGE6
#define LL_SYSCFG_SRAM2WRP_PAGE7 SYSCFG_SWPR1_PAGE7
#define LL_SYSCFG_SRAM2WRP_PAGE8 SYSCFG_SWPR1_PAGE8
#define LL_SYSCFG_SRAM2WRP_PAGE9 SYSCFG_SWPR1_PAGE9
#define LL_SYSCFG_SRAM2WRP_PAGE10 SYSCFG_SWPR1_PAGE10
#define LL_SYSCFG_SRAM2WRP_PAGE11 SYSCFG_SWPR1_PAGE11
#define LL_SYSCFG_SRAM2WRP_PAGE12 SYSCFG_SWPR1_PAGE12
#define LL_SYSCFG_SRAM2WRP_PAGE13 SYSCFG_SWPR1_PAGE13
#define LL_SYSCFG_SRAM2WRP_PAGE14 SYSCFG_SWPR1_PAGE14
#define LL_SYSCFG_SRAM2WRP_PAGE15 SYSCFG_SWPR1_PAGE15
#define LL_SYSCFG_SRAM2WRP_PAGE16 SYSCFG_SWPR1_PAGE16
#define LL_SYSCFG_SRAM2WRP_PAGE17 SYSCFG_SWPR1_PAGE17
#define LL_SYSCFG_SRAM2WRP_PAGE18 SYSCFG_SWPR1_PAGE18
#define LL_SYSCFG_SRAM2WRP_PAGE19 SYSCFG_SWPR1_PAGE19
#define LL_SYSCFG_SRAM2WRP_PAGE20 SYSCFG_SWPR1_PAGE20
#define LL_SYSCFG_SRAM2WRP_PAGE21 SYSCFG_SWPR1_PAGE21
#define LL_SYSCFG_SRAM2WRP_PAGE22 SYSCFG_SWPR1_PAGE22
#define LL_SYSCFG_SRAM2WRP_PAGE23 SYSCFG_SWPR1_PAGE23
#define LL_SYSCFG_SRAM2WRP_PAGE24 SYSCFG_SWPR1_PAGE24
#define LL_SYSCFG_SRAM2WRP_PAGE25 SYSCFG_SWPR1_PAGE25
#define LL_SYSCFG_SRAM2WRP_PAGE26 SYSCFG_SWPR1_PAGE26
#define LL_SYSCFG_SRAM2WRP_PAGE27 SYSCFG_SWPR1_PAGE27
#define LL_SYSCFG_SRAM2WRP_PAGE28 SYSCFG_SWPR1_PAGE28
#define LL_SYSCFG_SRAM2WRP_PAGE29 SYSCFG_SWPR1_PAGE29
#define LL_SYSCFG_SRAM2WRP_PAGE30 SYSCFG_SWPR1_PAGE30
#define LL_SYSCFG_SRAM2WRP_PAGE31 SYSCFG_SWPR1_PAGE31
#define LL_SYSCFG_SRAM2WRP_PAGE32 SYSCFG_SWPR2_PAGE32
#define LL_SYSCFG_SRAM2WRP_PAGE33 SYSCFG_SWPR2_PAGE33
#define LL_SYSCFG_SRAM2WRP_PAGE34 SYSCFG_SWPR2_PAGE34
#define LL_SYSCFG_SRAM2WRP_PAGE35 SYSCFG_SWPR2_PAGE35
#define LL_SYSCFG_SRAM2WRP_PAGE36 SYSCFG_SWPR2_PAGE36
#define LL_SYSCFG_SRAM2WRP_PAGE37 SYSCFG_SWPR2_PAGE37
#define LL_SYSCFG_SRAM2WRP_PAGE38 SYSCFG_SWPR2_PAGE38
#define LL_SYSCFG_SRAM2WRP_PAGE39 SYSCFG_SWPR2_PAGE39
#define LL_SYSCFG_SRAM2WRP_PAGE40 SYSCFG_SWPR2_PAGE40
#define LL_SYSCFG_SRAM2WRP_PAGE41 SYSCFG_SWPR2_PAGE41
#define LL_SYSCFG_SRAM2WRP_PAGE42 SYSCFG_SWPR2_PAGE42
#define LL_SYSCFG_SRAM2WRP_PAGE43 SYSCFG_SWPR2_PAGE43
#define LL_SYSCFG_SRAM2WRP_PAGE44 SYSCFG_SWPR2_PAGE44
#define LL_SYSCFG_SRAM2WRP_PAGE45 SYSCFG_SWPR2_PAGE45
#define LL_SYSCFG_SRAM2WRP_PAGE46 SYSCFG_SWPR2_PAGE46
#define LL_SYSCFG_SRAM2WRP_PAGE47 SYSCFG_SWPR2_PAGE47
#define LL_SYSCFG_SRAM2WRP_PAGE48 SYSCFG_SWPR2_PAGE48
#define LL_SYSCFG_SRAM2WRP_PAGE49 SYSCFG_SWPR2_PAGE49
#define LL_SYSCFG_SRAM2WRP_PAGE50 SYSCFG_SWPR2_PAGE50
#define LL_SYSCFG_SRAM2WRP_PAGE51 SYSCFG_SWPR2_PAGE51
#define LL_SYSCFG_SRAM2WRP_PAGE52 SYSCFG_SWPR2_PAGE52
#define LL_SYSCFG_SRAM2WRP_PAGE53 SYSCFG_SWPR2_PAGE53
#define LL_SYSCFG_SRAM2WRP_PAGE54 SYSCFG_SWPR2_PAGE54
#define LL_SYSCFG_SRAM2WRP_PAGE55 SYSCFG_SWPR2_PAGE55
#define LL_SYSCFG_SRAM2WRP_PAGE56 SYSCFG_SWPR2_PAGE56
#define LL_SYSCFG_SRAM2WRP_PAGE57 SYSCFG_SWPR2_PAGE57
#define LL_SYSCFG_SRAM2WRP_PAGE58 SYSCFG_SWPR2_PAGE58
#define LL_SYSCFG_SRAM2WRP_PAGE59 SYSCFG_SWPR2_PAGE59
#define LL_SYSCFG_SRAM2WRP_PAGE60 SYSCFG_SWPR2_PAGE60
#define LL_SYSCFG_SRAM2WRP_PAGE61 SYSCFG_SWPR2_PAGE61
#define LL_SYSCFG_SRAM2WRP_PAGE62 SYSCFG_SWPR2_PAGE62
#define LL_SYSCFG_SRAM2WRP_PAGE63 SYSCFG_SWPR2_PAGE63
#define LL_SYSCFG_GRP1_TIM1 SYSCFG_IMR1_TIM1IM
#define LL_SYSCFG_GRP1_TIM16 SYSCFG_IMR1_TIM16IM
#define LL_SYSCFG_GRP1_TIM17 SYSCFG_IMR1_TIM17IM
#define LL_SYSCFG_GRP1_EXTI5 SYSCFG_IMR1_EXTI5IM
#define LL_SYSCFG_GRP1_EXTI6 SYSCFG_IMR1_EXTI6IM
#define LL_SYSCFG_GRP1_EXTI7 SYSCFG_IMR1_EXTI7IM
#define LL_SYSCFG_GRP1_EXTI8 SYSCFG_IMR1_EXTI8IM
#define LL_SYSCFG_GRP1_EXTI9 SYSCFG_IMR1_EXTI9IM
#define LL_SYSCFG_GRP1_EXTI10 SYSCFG_IMR1_EXTI10IM
#define LL_SYSCFG_GRP1_EXTI11 SYSCFG_IMR1_EXTI11IM
#define LL_SYSCFG_GRP1_EXTI12 SYSCFG_IMR1_EXTI12IM
#define LL_SYSCFG_GRP1_EXTI13 SYSCFG_IMR1_EXTI13IM
#define LL_SYSCFG_GRP1_EXTI14 SYSCFG_IMR1_EXTI14IM
#define LL_SYSCFG_GRP1_EXTI15 SYSCFG_IMR1_EXTI15IM
#define LL_SYSCFG_GRP2_PVM1 SYSCFG_IMR2_PVM1IM
#define LL_SYSCFG_GRP2_PVM3 SYSCFG_IMR2_PVM3IM
#define LL_SYSCFG_GRP2_PVD SYSCFG_IMR2_PVDIM
#define LL_C2_SYSCFG_GRP1_RTCSTAMP_RTCTAMP_LSECSS SYSCFG_C2IMR1_RTCSTAMPTAMPLSECSSIM
#define LL_C2_SYSCFG_GRP1_RTCWKUP SYSCFG_C2IMR1_RTCWKUPIM
#define LL_C2_SYSCFG_GRP1_RTCALARM SYSCFG_C2IMR1_RTCALARMIM
#define LL_C2_SYSCFG_GRP1_RCC SYSCFG_C2IMR1_RCCIM
#define LL_C2_SYSCFG_GRP1_FLASH SYSCFG_C2IMR1_FLASHIM
#define LL_C2_SYSCFG_GRP1_PKA SYSCFG_C2IMR1_PKAIM
#define LL_C2_SYSCFG_GRP1_RNG SYSCFG_C2IMR1_RNGIM
#define LL_C2_SYSCFG_GRP1_AES1 SYSCFG_C2IMR1_AES1IM
#define LL_C2_SYSCFG_GRP1_COMP SYSCFG_C2IMR1_COMPIM
#define LL_C2_SYSCFG_GRP1_ADC SYSCFG_C2IMR1_ADCIM
#define LL_C2_SYSCFG_GRP1_EXTI0 SYSCFG_C2IMR1_EXTI0IM
#define LL_C2_SYSCFG_GRP1_EXTI1 SYSCFG_C2IMR1_EXTI1IM
#define LL_C2_SYSCFG_GRP1_EXTI2 SYSCFG_C2IMR1_EXTI2IM
#define LL_C2_SYSCFG_GRP1_EXTI3 SYSCFG_C2IMR1_EXTI3IM
#define LL_C2_SYSCFG_GRP1_EXTI4 SYSCFG_C2IMR1_EXTI4IM
#define LL_C2_SYSCFG_GRP1_EXTI5 SYSCFG_C2IMR1_EXTI5IM
#define LL_C2_SYSCFG_GRP1_EXTI6 SYSCFG_C2IMR1_EXTI6IM
#define LL_C2_SYSCFG_GRP1_EXTI7 SYSCFG_C2IMR1_EXTI7IM
#define LL_C2_SYSCFG_GRP1_EXTI8 SYSCFG_C2IMR1_EXTI8IM
#define LL_C2_SYSCFG_GRP1_EXTI9 SYSCFG_C2IMR1_EXTI9IM
#define LL_C2_SYSCFG_GRP1_EXTI10 SYSCFG_C2IMR1_EXTI10IM
#define LL_C2_SYSCFG_GRP1_EXTI11 SYSCFG_C2IMR1_EXTI11IM
#define LL_C2_SYSCFG_GRP1_EXTI12 SYSCFG_C2IMR1_EXTI12IM
#define LL_C2_SYSCFG_GRP1_EXTI13 SYSCFG_C2IMR1_EXTI13IM
#define LL_C2_SYSCFG_GRP1_EXTI14 SYSCFG_C2IMR1_EXTI14IM
#define LL_C2_SYSCFG_GRP1_EXTI15 SYSCFG_C2IMR1_EXTI15IM
#define LL_C2_SYSCFG_GRP2_DMA1CH1 SYSCFG_C2IMR2_DMA1CH1IM
#define LL_C2_SYSCFG_GRP2_DMA1CH2 SYSCFG_C2IMR2_DMA1CH2IM
#define LL_C2_SYSCFG_GRP2_DMA1CH3 SYSCFG_C2IMR2_DMA1CH3IM
#define LL_C2_SYSCFG_GRP2_DMA1CH4 SYSCFG_C2IMR2_DMA1CH4IM
#define LL_C2_SYSCFG_GRP2_DMA1CH5 SYSCFG_C2IMR2_DMA1CH5IM
#define LL_C2_SYSCFG_GRP2_DMA1CH6 SYSCFG_C2IMR2_DMA1CH6IM
#define LL_C2_SYSCFG_GRP2_DMA1CH7 SYSCFG_C2IMR2_DMA1CH7IM
#define LL_C2_SYSCFG_GRP2_DMA2CH1 SYSCFG_C2IMR2_DMA2CH1IM
#define LL_C2_SYSCFG_GRP2_DMA2CH2 SYSCFG_C2IMR2_DMA2CH2IM
#define LL_C2_SYSCFG_GRP2_DMA2CH3 SYSCFG_C2IMR2_DMA2CH3IM
#define LL_C2_SYSCFG_GRP2_DMA2CH4 SYSCFG_C2IMR2_DMA2CH4IM
#define LL_C2_SYSCFG_GRP2_DMA2CH5 SYSCFG_C2IMR2_DMA2CH5IM
#define LL_C2_SYSCFG_GRP2_DMA2CH6 SYSCFG_C2IMR2_DMA2CH6IM
#define LL_C2_SYSCFG_GRP2_DMA2CH7 SYSCFG_C2IMR2_DMA2CH7IM
#define LL_C2_SYSCFG_GRP2_DMAMUX1 SYSCFG_C2IMR2_DMAMUX1IM
#define LL_C2_SYSCFG_GRP2_PVM1 SYSCFG_C2IMR2_PVM1IM
#define LL_C2_SYSCFG_GRP2_PVM3 SYSCFG_C2IMR2_PVM3IM
#define LL_C2_SYSCFG_GRP2_PVD SYSCFG_C2IMR2_PVDIM
#define LL_C2_SYSCFG_GRP2_TSC SYSCFG_C2IMR2_TSCIM
#define LL_C2_SYSCFG_GRP2_LCD SYSCFG_C2IMR2_LCDIM
#define LL_SYSCFG_SECURE_ACCESS_AES1 SYSCFG_SIPCR_SAES1
#define LL_SYSCFG_SECURE_ACCESS_AES2 SYSCFG_SIPCR_SAES2
#define LL_SYSCFG_SECURE_ACCESS_PKA SYSCFG_SIPCR_SPKA
#define LL_SYSCFG_SECURE_ACCESS_RNG SYSCFG_SIPCR_SRNG
#define LL_DBGMCU_APB1_GRP1_TIM2_STOP DBGMCU_APB1FZR1_DBG_TIM2_STOP
#define LL_DBGMCU_APB1_GRP1_RTC_STOP DBGMCU_APB1FZR1_DBG_RTC_STOP
#define LL_DBGMCU_APB1_GRP1_WWDG_STOP DBGMCU_APB1FZR1_DBG_WWDG_STOP
#define LL_DBGMCU_APB1_GRP1_IWDG_STOP DBGMCU_APB1FZR1_DBG_IWDG_STOP
#define LL_DBGMCU_APB1_GRP1_I2C1_STOP DBGMCU_APB1FZR1_DBG_I2C1_STOP
#define LL_DBGMCU_APB1_GRP1_I2C3_STOP DBGMCU_APB1FZR1_DBG_I2C3_STOP
#define LL_DBGMCU_APB1_GRP1_LPTIM1_STOP DBGMCU_APB1FZR1_DBG_LPTIM1_STOP
#define LL_C2_DBGMCU_APB1_GRP1_TIM2_STOP DBGMCU_C2APB1FZR1_DBG_TIM2_STOP
#define LL_C2_DBGMCU_APB1_GRP1_RTC_STOP DBGMCU_C2APB1FZR1_DBG_RTC_STOP
#define LL_C2_DBGMCU_APB1_GRP1_IWDG_STOP DBGMCU_C2APB1FZR1_DBG_IWDG_STOP
#define LL_C2_DBGMCU_APB1_GRP1_I2C1_STOP DBGMCU_C2APB1FZR1_DBG_I2C1_STOP
#define LL_C2_DBGMCU_APB1_GRP1_I2C3_STOP DBGMCU_C2APB1FZR1_DBG_I2C3_STOP
#define LL_C2_DBGMCU_APB1_GRP1_LPTIM1_STOP DBGMCU_C2APB1FZR1_DBG_LPTIM1_STOP
#define LL_DBGMCU_APB1_GRP2_LPTIM2_STOP DBGMCU_APB1FZR2_DBG_LPTIM2_STOP
#define LL_C2_DBGMCU_APB1_GRP2_LPTIM2_STOP DBGMCU_C2APB1FZR2_DBG_LPTIM2_STOP
#define LL_DBGMCU_APB2_GRP1_TIM1_STOP DBGMCU_APB2FZR_DBG_TIM1_STOP
#define LL_DBGMCU_APB2_GRP1_TIM16_STOP DBGMCU_APB2FZR_DBG_TIM16_STOP
#define LL_DBGMCU_APB2_GRP1_TIM17_STOP DBGMCU_APB2FZR_DBG_TIM17_STOP
#define LL_C2_DBGMCU_APB2_GRP1_TIM1_STOP DBGMCU_C2APB2FZR_DBG_TIM1_STOP
#define LL_C2_DBGMCU_APB2_GRP1_TIM16_STOP DBGMCU_C2APB2FZR_DBG_TIM16_STOP
#define LL_C2_DBGMCU_APB2_GRP1_TIM17_STOP DBGMCU_C2APB2FZR_DBG_TIM17_STOP
#define LL_VREFBUF_VOLTAGE_SCALE0 0x00000000U
#define LL_VREFBUF_VOLTAGE_SCALE1 VREFBUF_CSR_VRS
#define LL_FLASH_LATENCY_0 FLASH_ACR_LATENCY_0WS
#define LL_FLASH_LATENCY_1 FLASH_ACR_LATENCY_1WS
#define LL_FLASH_LATENCY_2 FLASH_ACR_LATENCY_2WS
#define LL_FLASH_LATENCY_3 FLASH_ACR_LATENCY_3WS
static inline void LL_SYSCFG_SetRemapMemory(uint32_t Memory)
{
  (((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->MEMRMP)) = ((((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->MEMRMP))) & (~((0x7UL << (0U))))) | (Memory))));
}
static inline uint32_t LL_SYSCFG_GetRemapMemory(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->MEMRMP) & ((0x7UL << (0U)))));
}
static inline void LL_SYSCFG_EnableAnalogBooster(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) |= ((0x1UL << (8U))));
}
static inline void LL_SYSCFG_DisableAnalogBooster(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) &= ~((0x1UL << (8U))));
}
static inline void LL_SYSCFG_EnableAnalogGpioSwitch(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) |= ((0x1UL << (9U))));
}
static inline void LL_SYSCFG_DisableAnalogGpioSwitch(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) &= ~((0x1UL << (9U))));
}
static inline void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) |= (ConfigFastModePlus));
}
static inline void LL_SYSCFG_DisableFastModePlus(uint32_t ConfigFastModePlus)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) &= ~(ConfigFastModePlus));
}
static inline void LL_SYSCFG_EnableIT_FPU_IOC(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) |= ((0x01U << (26U))));
}
static inline void LL_SYSCFG_EnableIT_FPU_DZC(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) |= ((0x02U << (26U))));
}
static inline void LL_SYSCFG_EnableIT_FPU_UFC(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) |= ((0x04U << (26U))));
}
static inline void LL_SYSCFG_EnableIT_FPU_OFC(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) |= ((0x08U << (26U))));
}
static inline void LL_SYSCFG_EnableIT_FPU_IDC(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) |= ((0x10U << (26U))));
}
static inline void LL_SYSCFG_EnableIT_FPU_IXC(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) |= ((0x20U << (26U))));
}
static inline void LL_SYSCFG_DisableIT_FPU_IOC(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) &= ~((0x01U << (26U))));
}
static inline void LL_SYSCFG_DisableIT_FPU_DZC(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) &= ~((0x02U << (26U))));
}
static inline void LL_SYSCFG_DisableIT_FPU_UFC(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) &= ~((0x04U << (26U))));
}
static inline void LL_SYSCFG_DisableIT_FPU_OFC(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) &= ~((0x08U << (26U))));
}
static inline void LL_SYSCFG_DisableIT_FPU_IDC(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) &= ~((0x10U << (26U))));
}
static inline void LL_SYSCFG_DisableIT_FPU_IXC(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) &= ~((0x20U << (26U))));
}
static inline uint32_t LL_SYSCFG_IsEnabledIT_FPU_IOC(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) & ((0x01U << (26U)))) == ((0x01U << (26U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SYSCFG_IsEnabledIT_FPU_DZC(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) & ((0x02U << (26U)))) == ((0x02U << (26U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SYSCFG_IsEnabledIT_FPU_UFC(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) & ((0x04U << (26U)))) == ((0x04U << (26U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SYSCFG_IsEnabledIT_FPU_OFC(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) & ((0x08U << (26U)))) == ((0x08U << (26U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SYSCFG_IsEnabledIT_FPU_IDC(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) & ((0x10U << (26U)))) == ((0x10U << (26U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SYSCFG_IsEnabledIT_FPU_IXC(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR1) & ((0x20U << (26U)))) == ((0x20U << (26U)))) ? 1UL : 0UL);
}
static inline void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  (((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->EXTICR[Line & 0x03U])) = ((((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->EXTICR[Line & 0x03U]))) & (~((Line >> 16U)))) | ((Port << (((__CLZ(__RBIT((Line >> 16U))))) & 0x0000000FUL))))));
}
static inline uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->EXTICR[Line & 0x03U]) & ((Line >> 16U))) >> ((__CLZ(__RBIT(Line >> 16U))) & 0x0000000FUL) );
}
static inline void LL_SYSCFG_EnableSRAM2Erase(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->SCSR) |= ((0x1UL << (0U))));
}
static inline uint32_t LL_SYSCFG_IsSRAM2EraseOngoing(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->SCSR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline void LL_SYSCFG_DisableSRAMFetch(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->SCSR) |= ((0x1UL << (31U))));
}
static inline uint32_t LL_SYSCFG_IsEnabledSRAMFetch(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->SCSR) & ((0x1UL << (31U)))) != ((0x1UL << (31U)))) ? 1UL : 0UL);
}
static inline void LL_SYSCFG_SetTIMBreakInputs(uint32_t Break)
{
  (((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR2)) = ((((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR2))) & (~((0x1UL << (0U)) | (0x1UL << (1U)) | (0x1UL << (2U)) | (0x1UL << (3U))))) | (Break))));
}
static inline uint32_t LL_SYSCFG_GetTIMBreakInputs(void)
{
  return (uint32_t)(((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR2) & ((0x1UL << (0U)) | (0x1UL << (1U)) | (0x1UL << (2U)) | (0x1UL << (3U)))));
}
static inline uint32_t LL_SYSCFG_IsActiveFlag_SP(void)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR2) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline void LL_SYSCFG_ClearFlag_SP(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->CFGR2) |= ((0x1UL << (8U))));
}
#define LL_SYSCFG_EnableSRAM2PageWRP LL_SYSCFG_EnableSRAM2PageWRP_0_31
static inline void LL_SYSCFG_EnableSRAM2PageWRP_0_31(uint32_t SRAM2WRP)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->SWPR1) |= (SRAM2WRP));
}
static inline void LL_SYSCFG_EnableSRAM2PageWRP_32_63(uint32_t SRAM2WRP)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->SWPR2) |= (SRAM2WRP));
}
static inline void LL_SYSCFG_LockSRAM2WRP(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->SKR) = (0x00U));
}
static inline void LL_SYSCFG_UnlockSRAM2WRP(void)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->SKR) = (0xCAU));
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->SKR) = (0x53U));
}
static inline void LL_SYSCFG_GRP1_EnableIT(uint32_t Interrupt)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->IMR1) &= ~(Interrupt));
}
static inline void LL_SYSCFG_GRP2_EnableIT(uint32_t Interrupt)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->IMR2) &= ~(Interrupt));
}
static inline void LL_SYSCFG_GRP1_DisableIT(uint32_t Interrupt)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->IMR1) |= (Interrupt));
}
static inline void LL_SYSCFG_GRP2_DisableIT(uint32_t Interrupt)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->IMR2) |= (Interrupt));
}
static inline uint32_t LL_SYSCFG_GRP1_IsEnabledIT(uint32_t Interrupt)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->IMR1) & (Interrupt)) != (Interrupt)) ? 1UL : 0UL);
}
static inline uint32_t LL_SYSCFG_GRP2_IsEnabledIT(uint32_t Interrupt)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->IMR2) & (Interrupt)) != (Interrupt)) ? 1UL : 0UL);
}
static inline void LL_C2_SYSCFG_GRP1_EnableIT(uint32_t Interrupt)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->C2IMR1) &= ~(Interrupt));
}
static inline void LL_C2_SYSCFG_GRP2_EnableIT(uint32_t Interrupt)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->C2IMR2) &= ~(Interrupt));
}
static inline void LL_C2_SYSCFG_GRP1_DisableIT(uint32_t Interrupt)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->C2IMR1) |= (Interrupt));
}
static inline void LL_C2_SYSCFG_GRP2_DisableIT(uint32_t Interrupt)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->C2IMR2) |= (Interrupt));
}
static inline uint32_t LL_C2_SYSCFG_GRP1_IsEnabledIT(uint32_t Interrupt)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->C2IMR1) & (Interrupt)) != (Interrupt)) ? 1UL : 0UL);
}
static inline uint32_t LL_C2_SYSCFG_GRP2_IsEnabledIT(uint32_t Interrupt)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->C2IMR2) & (Interrupt)) != (Interrupt)) ? 1UL : 0UL);
}
static inline void LL_SYSCFG_EnableSecurityAccess(uint32_t SecurityAccess)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->SIPCR) |= (SecurityAccess));
}
static inline void LL_SYSCFG_DisableSecurityAccess(uint32_t SecurityAccess)
{
  ((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->SIPCR) &= ~(SecurityAccess));
}
static inline uint32_t LL_SYSCFG_IsEnabledSecurityAccess(uint32_t SecurityAccess)
{
  return ((((((SYSCFG_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000000UL))->SIPCR) & (SecurityAccess)) == (SecurityAccess)) ? 1UL : 0UL);
}
static inline uint32_t LL_DBGMCU_GetDeviceID(void)
{
  return (uint32_t)(((((DBGMCU_TypeDef *) (0xE0042000UL))->IDCODE) & ((0xFFFUL << (0U)))));
}
static inline uint32_t LL_DBGMCU_GetRevisionID(void)
{
  return (uint32_t)(((((DBGMCU_TypeDef *) (0xE0042000UL))->IDCODE) & ((0xFFFFUL << (16U)))) >> (16U));
}
static inline void LL_DBGMCU_EnableDBGSleepMode(void)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->CR) |= ((0x1UL << (0U))));
}
static inline void LL_DBGMCU_DisableDBGSleepMode(void)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->CR) &= ~((0x1UL << (0U))));
}
static inline void LL_DBGMCU_EnableDBGStopMode(void)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->CR) |= ((0x1UL << (1U))));
}
static inline void LL_DBGMCU_DisableDBGStopMode(void)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->CR) &= ~((0x1UL << (1U))));
}
static inline void LL_DBGMCU_EnableDBGStandbyMode(void)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->CR) |= ((0x1UL << (2U))));
}
static inline void LL_DBGMCU_DisableDBGStandbyMode(void)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->CR) &= ~((0x1UL << (2U))));
}
static inline void LL_DBGMCU_EnableTraceClock(void)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->CR) |= ((0x1UL << (5U))));
}
static inline void LL_DBGMCU_DisableTraceClock(void)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->CR) &= ~((0x1UL << (5U))));
}
static inline uint32_t LL_DBGMCU_IsEnabledTraceClock(void)
{
  return ((((((DBGMCU_TypeDef *) (0xE0042000UL))->CR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline void LL_DBGMCU_EnableTriggerOutput(void)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->CR) |= ((0x1UL << (28U))));
}
static inline void LL_DBGMCU_DisableTriggerOutput(void)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->CR) &= ~((0x1UL << (28U))));
}
static inline uint32_t LL_DBGMCU_IsEnabledTriggerOutput(void)
{
  return ((((((DBGMCU_TypeDef *) (0xE0042000UL))->CR) & ((0x1UL << (28U)))) == ((0x1UL << (28U)))) ? 1UL : 0UL);
}
static inline void LL_DBGMCU_APB1_GRP1_FreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->APB1FZR1) |= (Periphs));
}
static inline void LL_C2_DBGMCU_APB1_GRP1_FreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->C2APB1FZR1) |= (Periphs));
}
static inline void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->APB1FZR2) |= (Periphs));
}
static inline void LL_C2_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->C2APB1FZR2) |= (Periphs));
}
static inline void LL_DBGMCU_APB1_GRP1_UnFreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->APB1FZR1) &= ~(Periphs));
}
static inline void LL_C2_DBGMCU_APB1_GRP1_UnFreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->C2APB1FZR1) &= ~(Periphs));
}
static inline void LL_DBGMCU_APB1_GRP2_UnFreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->APB1FZR2) &= ~(Periphs));
}
static inline void LL_C2_DBGMCU_APB1_GRP2_UnFreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->C2APB1FZR2) &= ~(Periphs));
}
static inline void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->APB2FZR) |= (Periphs));
}
static inline void LL_C2_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->C2APB2FZR) |= (Periphs));
}
static inline void LL_DBGMCU_APB2_GRP1_UnFreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->APB2FZR) &= ~(Periphs));
}
static inline void LL_C2_DBGMCU_APB2_GRP1_UnFreezePeriph(uint32_t Periphs)
{
  ((((DBGMCU_TypeDef *) (0xE0042000UL))->C2APB2FZR) &= ~(Periphs));
}
static inline void LL_VREFBUF_Enable(void)
{
  ((((VREFBUF_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000030UL))->CSR) |= ((0x1UL << (0U))));
}
static inline void LL_VREFBUF_Disable(void)
{
  ((((VREFBUF_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000030UL))->CSR) &= ~((0x1UL << (0U))));
}
static inline void LL_VREFBUF_EnableHIZ(void)
{
  ((((VREFBUF_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000030UL))->CSR) |= ((0x1UL << (1U))));
}
static inline void LL_VREFBUF_DisableHIZ(void)
{
  ((((VREFBUF_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000030UL))->CSR) &= ~((0x1UL << (1U))));
}
static inline void LL_VREFBUF_SetVoltageScaling(uint32_t Scale)
{
  (((((VREFBUF_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000030UL))->CSR)) = ((((((((VREFBUF_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000030UL))->CSR))) & (~((0x1UL << (2U))))) | (Scale))));
}
static inline uint32_t LL_VREFBUF_GetVoltageScaling(void)
{
  return (uint32_t)(((((VREFBUF_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000030UL))->CSR) & ((0x1UL << (2U)))));
}
static inline uint32_t LL_VREFBUF_SC0_GetCalibration(void)
{
  return (uint32_t)(*((uint8_t*) (0x1FFF75F0UL)));
}
static inline uint32_t LL_VREFBUF_SC1_GetCalibration(void)
{
  return (uint32_t)(*((uint8_t*) (0x1FFF7530UL)));
}
static inline uint32_t LL_VREFBUF_IsVREFReady(void)
{
  return ((((((VREFBUF_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000030UL))->CSR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_VREFBUF_GetTrimming(void)
{
  return (uint32_t)(((((VREFBUF_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000030UL))->CCR) & ((0x3FUL << (0U)))));
}
static inline void LL_VREFBUF_SetTrimming(uint32_t Value)
{
  ((((VREFBUF_TypeDef *) (((0x40000000UL) + 0x00010000UL) + 0x00000030UL))->CCR) = (Value));
}
static inline void LL_FLASH_SetLatency(uint32_t Latency)
{
  (((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR)) = ((((((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR))) & (~((0x7UL << (0U))))) | (Latency))));
}
static inline uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) & ((0x7UL << (0U)))));
}
static inline void LL_FLASH_EnablePrefetch(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) |= ((0x1UL << (8U))));
}
static inline void LL_FLASH_DisablePrefetch(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) &= ~((0x1UL << (8U))));
}
static inline uint32_t LL_FLASH_IsPrefetchEnabled(void)
{
  return ((((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline void LL_FLASH_EnableInstCache(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) |= ((0x1UL << (9U))));
}
static inline void LL_FLASH_DisableInstCache(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) &= ~((0x1UL << (9U))));
}
static inline void LL_FLASH_EnableDataCache(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) |= ((0x1UL << (10U))));
}
static inline void LL_FLASH_DisableDataCache(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) &= ~((0x1UL << (10U))));
}
static inline void LL_FLASH_EnableInstCacheReset(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) |= ((0x1UL << (11U))));
}
static inline void LL_FLASH_DisableInstCacheReset(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) &= ~((0x1UL << (11U))));
}
static inline void LL_FLASH_EnableDataCacheReset(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) |= ((0x1UL << (12U))));
}
static inline void LL_FLASH_DisableDataCacheReset(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) &= ~((0x1UL << (12U))));
}
static inline void LL_FLASH_SuspendOperation(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) |= ((0x1UL << (15U))));
}
static inline void LL_FLASH_AllowOperation(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) &= ~((0x1UL << (15U))));
}
static inline uint32_t LL_FLASH_IsOperationSuspended(void)
{
  return ((((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
  return ((((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->SR) & ((0x1UL << (19U)))) == ((0x1UL << (19U)))) ? 1UL : 0UL);
}
static inline void LL_FLASH_SetEmptyFlag(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) |= ((0x1UL << (16U))));
}
static inline void LL_FLASH_ClearEmptyFlag(void)
{
  ((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) &= ~((0x1UL << (16U))));
}
static inline uint32_t LL_FLASH_IsEmptyFlag(void)
{
  return ((((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->ACR) & ((0x1UL << (16U)))) == (0x1UL << (16U))) ? 1UL : 0UL);
}
static inline uint32_t LL_FLASH_GetIPCCBufferAddr(void)
{
  return (uint32_t)(((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->IPCCBR) & ((0x3FFFUL << (0U)))));
}
static inline uint32_t LL_FLASH_GetC2BootResetVect(void)
{
  return (uint32_t)(((((FLASH_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00004000UL))->SRRVR) & ((0x3FFFFUL << (0U)))));
}
static inline uint32_t LL_FLASH_GetUDN(void)
{
  return (uint32_t)(((*((uint32_t *)((uint32_t)0x1FFF7580UL)))));
}
static inline uint32_t LL_FLASH_GetDeviceID(void)
{
  return (uint32_t)((((*((uint32_t *)((uint32_t)0x1FFF7580UL) + 1U)))) & 0x000000FFU);
}
static inline uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (uint32_t)(((((*((uint32_t *)((uint32_t)0x1FFF7580UL) + 1U)))) >> 8U ) & 0x00FFFFFFU);
}
#define STM32WBxx_LL_EXTI_H 
typedef struct
{
  uint32_t Line_0_31;
  uint32_t Line_32_63;
  FunctionalState LineCommand;
  uint8_t Mode;
  uint8_t Trigger;
} LL_EXTI_InitTypeDef;
#define LL_EXTI_LINE_0 EXTI_IMR1_IM0
#define LL_EXTI_LINE_1 EXTI_IMR1_IM1
#define LL_EXTI_LINE_2 EXTI_IMR1_IM2
#define LL_EXTI_LINE_3 EXTI_IMR1_IM3
#define LL_EXTI_LINE_4 EXTI_IMR1_IM4
#define LL_EXTI_LINE_5 EXTI_IMR1_IM5
#define LL_EXTI_LINE_6 EXTI_IMR1_IM6
#define LL_EXTI_LINE_7 EXTI_IMR1_IM7
#define LL_EXTI_LINE_8 EXTI_IMR1_IM8
#define LL_EXTI_LINE_9 EXTI_IMR1_IM9
#define LL_EXTI_LINE_10 EXTI_IMR1_IM10
#define LL_EXTI_LINE_11 EXTI_IMR1_IM11
#define LL_EXTI_LINE_12 EXTI_IMR1_IM12
#define LL_EXTI_LINE_13 EXTI_IMR1_IM13
#define LL_EXTI_LINE_14 EXTI_IMR1_IM14
#define LL_EXTI_LINE_15 EXTI_IMR1_IM15
#define LL_EXTI_LINE_16 EXTI_IMR1_IM16
#define LL_EXTI_LINE_17 EXTI_IMR1_IM17
#define LL_EXTI_LINE_18 EXTI_IMR1_IM18
#define LL_EXTI_LINE_19 EXTI_IMR1_IM19
#define LL_EXTI_LINE_20 EXTI_IMR1_IM20
#define LL_EXTI_LINE_21 EXTI_IMR1_IM21
#define LL_EXTI_LINE_22 EXTI_IMR1_IM22
#define LL_EXTI_LINE_23 EXTI_IMR1_IM23
#define LL_EXTI_LINE_24 EXTI_IMR1_IM24
#define LL_EXTI_LINE_25 EXTI_IMR1_IM25
#define LL_EXTI_LINE_28 EXTI_IMR1_IM28
#define LL_EXTI_LINE_29 EXTI_IMR1_IM29
#define LL_EXTI_LINE_30 EXTI_IMR1_IM30
#define LL_EXTI_LINE_31 EXTI_IMR1_IM31
#define LL_EXTI_LINE_ALL_0_31 (LL_EXTI_LINE_0 | LL_EXTI_LINE_1 | LL_EXTI_LINE_2 | LL_EXTI_LINE_3 | LL_EXTI_LINE_4 | LL_EXTI_LINE_5 | LL_EXTI_LINE_6 | LL_EXTI_LINE_7 | LL_EXTI_LINE_8 | LL_EXTI_LINE_9 | LL_EXTI_LINE_10 | LL_EXTI_LINE_11 | LL_EXTI_LINE_12 | LL_EXTI_LINE_13 | LL_EXTI_LINE_14 | LL_EXTI_LINE_15 | LL_EXTI_LINE_16 | LL_EXTI_LINE_17 | LL_EXTI_LINE_18 | LL_EXTI_LINE_19 | LL_EXTI_LINE_20 | LL_EXTI_LINE_21 | LL_EXTI_LINE_22 | LL_EXTI_LINE_23 | LL_EXTI_LINE_24 | LL_EXTI_LINE_25 | LL_EXTI_LINE_28 | LL_EXTI_LINE_29 | LL_EXTI_LINE_30 | LL_EXTI_LINE_31)
#define LL_EXTI_LINE_33 EXTI_IMR2_IM33
#define LL_EXTI_LINE_36 EXTI_IMR2_IM36
#define LL_EXTI_LINE_37 EXTI_IMR2_IM37
#define LL_EXTI_LINE_38 EXTI_IMR2_IM38
#define LL_EXTI_LINE_39 EXTI_IMR2_IM39
#define LL_EXTI_LINE_40 EXTI_IMR2_IM40
#define LL_EXTI_LINE_41 EXTI_IMR2_IM41
#define LL_EXTI_LINE_42 EXTI_IMR2_IM42
#define LL_EXTI_LINE_43 EXTI_IMR2_IM43
#define LL_EXTI_LINE_44 EXTI_IMR2_IM44
#define LL_EXTI_LINE_45 EXTI_IMR2_IM45
#define LL_EXTI_LINE_46 EXTI_IMR2_IM46
#define LL_EXTI_LINE_48 EXTI_IMR2_IM48
#define LL_EXTI_LINE_ALL_32_63 (LL_EXTI_LINE_33 | LL_EXTI_LINE_36 | LL_EXTI_LINE_37 | LL_EXTI_LINE_38 | LL_EXTI_LINE_39 | LL_EXTI_LINE_40 | LL_EXTI_LINE_41 | LL_EXTI_LINE_42 | LL_EXTI_LINE_43 | LL_EXTI_LINE_44 | LL_EXTI_LINE_45 | LL_EXTI_LINE_46 | LL_EXTI_LINE_48)
#define LL_EXTI_LINE_ALL (0xFFFFFFFFU)
#define LL_EXTI_LINE_NONE (0x00000000U)
#define LL_EXTI_MODE_IT ((uint8_t)0x00U)
#define LL_EXTI_MODE_EVENT ((uint8_t)0x01U)
#define LL_EXTI_MODE_IT_EVENT ((uint8_t)0x02U)
#define LL_EXTI_TRIGGER_NONE ((uint8_t)0x00U)
#define LL_EXTI_TRIGGER_RISING ((uint8_t)0x01U)
#define LL_EXTI_TRIGGER_FALLING ((uint8_t)0x02U)
#define LL_EXTI_TRIGGER_RISING_FALLING ((uint8_t)0x03U)
#define LL_EXTI_WriteReg(__REG__,__VALUE__) WRITE_REG(EXTI->__REG__, (__VALUE__))
#define LL_EXTI_ReadReg(__REG__) READ_REG(EXTI->__REG__)
static inline void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->IMR1) |= (ExtiLine));
}
static inline void LL_C2_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->C2IMR1) |= (ExtiLine));
}
static inline void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->IMR2) |= (ExtiLine));
}
static inline void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->C2IMR2) |= (ExtiLine));
}
static inline void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->IMR1) &= ~(ExtiLine));
}
static inline void LL_C2_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->C2IMR1) &= ~(ExtiLine));
}
static inline void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->IMR2) &= ~(ExtiLine));
}
static inline void LL_C2_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->C2IMR2) &= ~(ExtiLine));
}
static inline uint32_t LL_EXTI_IsEnabledIT_0_31(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->IMR1) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline uint32_t LL_C2_EXTI_IsEnabledIT_0_31(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->C2IMR1) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline uint32_t LL_EXTI_IsEnabledIT_32_63(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->IMR2) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline uint32_t LL_C2_EXTI_IsEnabledIT_32_63(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->C2IMR2) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->EMR1) |= (ExtiLine));
}
static inline void LL_C2_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->C2EMR1) |= (ExtiLine));
}
static inline void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->EMR2) |= (ExtiLine));
}
static inline void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->C2EMR2) |= (ExtiLine));
}
static inline void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->EMR1) &= ~(ExtiLine));
}
static inline void LL_C2_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->C2EMR1) &= ~(ExtiLine));
}
static inline void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->EMR2) &= ~(ExtiLine));
}
static inline void LL_C2_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->C2EMR2) &= ~(ExtiLine));
}
static inline uint32_t LL_EXTI_IsEnabledEvent_0_31(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->EMR1) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline uint32_t LL_C2_EXTI_IsEnabledEvent_0_31(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->C2EMR1) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline uint32_t LL_EXTI_IsEnabledEvent_32_63(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->EMR2) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline uint32_t LL_C2_EXTI_IsEnabledEvent_32_63(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->C2EMR2) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->RTSR1) |= (ExtiLine));
}
static inline void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->RTSR2) |= (ExtiLine));
}
static inline void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->RTSR1) &= ~(ExtiLine));
}
static inline void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->RTSR2) &= ~(ExtiLine));
}
static inline uint32_t LL_EXTI_IsEnabledRisingTrig_0_31(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->RTSR1) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline uint32_t LL_EXTI_IsEnabledRisingTrig_32_63(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->RTSR2) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->FTSR1) |= (ExtiLine));
}
static inline void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->FTSR2) |= (ExtiLine));
}
static inline void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->FTSR1) &= ~(ExtiLine));
}
static inline void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->FTSR2) &= ~(ExtiLine));
}
static inline uint32_t LL_EXTI_IsEnabledFallingTrig_0_31(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->FTSR1) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline uint32_t LL_EXTI_IsEnabledFallingTrig_32_63(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->FTSR2) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline void LL_EXTI_GenerateSWI_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->SWIER1) |= (ExtiLine));
}
static inline void LL_EXTI_GenerateSWI_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->SWIER2) |= (ExtiLine));
}
static inline uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->PR1) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline uint32_t LL_EXTI_IsActiveFlag_32_63(uint32_t ExtiLine)
{
  return ((((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->PR2) & (ExtiLine)) == (ExtiLine)) ? 1UL : 0UL);
}
static inline uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->PR1) & (ExtiLine)));
}
static inline uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
  return (uint32_t)(((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->PR2) & (ExtiLine)));
}
static inline void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->PR1) = (ExtiLine));
}
static inline void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
  ((((EXTI_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000800UL))->PR2) = (ExtiLine));
}
ErrorStatus LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct);
ErrorStatus LL_EXTI_DeInit(void);
void LL_EXTI_StructInit(LL_EXTI_InitTypeDef *EXTI_InitStruct);
#define GPIO_NUMBER (16U)
typedef void (*GpioExtiCallback)(void* ctx);
typedef struct {
    GpioExtiCallback callback;
    void* context;
    volatile _Bool ready;
} GpioInterrupt;
typedef enum {
    GpioModeInput,
    GpioModeOutputPushPull,
    GpioModeOutputOpenDrain,
    GpioModeAltFunctionPushPull,
    GpioModeAltFunctionOpenDrain,
    GpioModeAnalog,
    GpioModeInterruptRise,
    GpioModeInterruptFall,
    GpioModeInterruptRiseFall,
    GpioModeEventRise,
    GpioModeEventFall,
    GpioModeEventRiseFall,
} GpioMode;
typedef enum {
    GpioPullNo,
    GpioPullUp,
    GpioPullDown,
} GpioPull;
typedef enum {
    GpioSpeedLow,
    GpioSpeedMedium,
    GpioSpeedHigh,
    GpioSpeedVeryHigh,
} GpioSpeed;
typedef enum {
    GpioAltFn0MCO = 0,
    GpioAltFn0LSCO = 0,
    GpioAltFn0JTMS_SWDIO = 0,
    GpioAltFn0JTCK_SWCLK = 0,
    GpioAltFn0JTDI = 0,
    GpioAltFn0RTC_OUT = 0,
    GpioAltFn0JTD_TRACE = 0,
    GpioAltFn0NJTRST = 0,
    GpioAltFn0RTC_REFIN = 0,
    GpioAltFn0TRACED0 = 0,
    GpioAltFn0TRACED1 = 0,
    GpioAltFn0TRACED2 = 0,
    GpioAltFn0TRACED3 = 0,
    GpioAltFn0TRIG_INOUT = 0,
    GpioAltFn0TRACECK = 0,
    GpioAltFn0SYS = 0,
    GpioAltFn1TIM1 = 1,
    GpioAltFn1TIM2 = 1,
    GpioAltFn1LPTIM1 = 1,
    GpioAltFn2TIM2 = 2,
    GpioAltFn2TIM1 = 2,
    GpioAltFn3SAI1 = 3,
    GpioAltFn3SPI2 = 3,
    GpioAltFn3TIM1 = 3,
    GpioAltFn4I2C1 = 4,
    GpioAltFn4I2C3 = 4,
    GpioAltFn5SPI1 = 5,
    GpioAltFn5SPI2 = 5,
    GpioAltFn6MCO = 6,
    GpioAltFn6LSCO = 6,
    GpioAltFn6RF_DTB0 = 6,
    GpioAltFn6RF_DTB1 = 6,
    GpioAltFn6RF_DTB2 = 6,
    GpioAltFn6RF_DTB3 = 6,
    GpioAltFn6RF_DTB4 = 6,
    GpioAltFn6RF_DTB5 = 6,
    GpioAltFn6RF_DTB6 = 6,
    GpioAltFn6RF_DTB7 = 6,
    GpioAltFn6RF_DTB8 = 6,
    GpioAltFn6RF_DTB9 = 6,
    GpioAltFn6RF_DTB10 = 6,
    GpioAltFn6RF_DTB11 = 6,
    GpioAltFn6RF_DTB12 = 6,
    GpioAltFn6RF_DTB13 = 6,
    GpioAltFn6RF_DTB14 = 6,
    GpioAltFn6RF_DTB15 = 6,
    GpioAltFn6RF_DTB16 = 6,
    GpioAltFn6RF_DTB17 = 6,
    GpioAltFn6RF_DTB18 = 6,
    GpioAltFn6RF_MISO = 6,
    GpioAltFn6RF_MOSI = 6,
    GpioAltFn6RF_SCK = 6,
    GpioAltFn6RF_NSS = 6,
    GpioAltFn7USART1 = 7,
    GpioAltFn8LPUART1 = 8,
    GpioAltFn8IR = 8,
    GpioAltFn9TSC = 9,
    GpioAltFn10QUADSPI = 10,
    GpioAltFn10USB = 10,
    GpioAltFn11LCD = 11,
    GpioAltFn12COMP1 = 12,
    GpioAltFn12COMP2 = 12,
    GpioAltFn12TIM1 = 12,
    GpioAltFn13SAI1 = 13,
    GpioAltFn14TIM2 = 14,
    GpioAltFn14TIM16 = 14,
    GpioAltFn14TIM17 = 14,
    GpioAltFn14LPTIM2 = 14,
    GpioAltFn15EVENTOUT = 15,
    GpioAltFnUnused = 16,
} GpioAltFn;
typedef struct {
    GPIO_TypeDef* port;
    uint16_t pin;
} GpioPin;
void furi_hal_gpio_init_simple(const GpioPin* gpio, const GpioMode mode);
void furi_hal_gpio_init(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed);
void furi_hal_gpio_init_ex(
    const GpioPin* gpio,
    const GpioMode mode,
    const GpioPull pull,
    const GpioSpeed speed,
    const GpioAltFn alt_fn);
void furi_hal_gpio_add_int_callback(const GpioPin* gpio, GpioExtiCallback cb, void* ctx);
void furi_hal_gpio_enable_int_callback(const GpioPin* gpio);
void furi_hal_gpio_disable_int_callback(const GpioPin* gpio);
void furi_hal_gpio_remove_int_callback(const GpioPin* gpio);
static inline void furi_hal_gpio_write(const GpioPin* gpio, const _Bool state) {
    if(state == 1) {
        gpio->port->BSRR = gpio->pin;
    } else {
        gpio->port->BSRR = (uint32_t)gpio->pin << (16U);
    }
}
static inline void
    furi_hal_gpio_write_port_pin(GPIO_TypeDef* port, uint16_t pin, const _Bool state) {
    if(state == 1) {
        port->BSRR = pin;
    } else {
        port->BSRR = pin << (16U);
    }
}
static inline _Bool furi_hal_gpio_read(const GpioPin* gpio) {
    if((gpio->port->IDR & gpio->pin) != 0x00U) {
        return 1;
    } else {
        return 0;
    }
}
static inline _Bool furi_hal_gpio_read_port_pin(GPIO_TypeDef* port, uint16_t pin) {
    if((port->IDR & pin) != 0x00U) {
        return 1;
    } else {
        return 0;
    }
}
typedef enum {
    CONDITIONAL_SEARCH = 0,
    NORMAL_SEARCH = 1,
} OneWireHostSearchMode;
typedef struct OneWireHost OneWireHost;
OneWireHost* onewire_host_alloc();
void onewire_host_free(OneWireHost* host);
_Bool onewire_host_reset(OneWireHost* host);
_Bool onewire_host_read_bit(OneWireHost* host);
uint8_t onewire_host_read(OneWireHost* host);
void onewire_host_read_bytes(OneWireHost* host, uint8_t* buffer, uint16_t count);
void onewire_host_write_bit(OneWireHost* host, _Bool value);
void onewire_host_write(OneWireHost* host, uint8_t value);
void onewire_host_skip(OneWireHost* host);
void onewire_host_start(OneWireHost* host);
void onewire_host_stop(OneWireHost* host);
void onewire_host_reset_search(OneWireHost* host);
void onewire_host_target_search(OneWireHost* host, uint8_t family_code);
uint8_t onewire_host_search(OneWireHost* host, uint8_t* newAddr, OneWireHostSearchMode mode);
       
typedef struct OneWireDevice OneWireDevice;
typedef struct OneWireSlave OneWireSlave;
typedef void (*OneWireSlaveResultCallback)(void* context);
OneWireSlave* onewire_slave_alloc();
void onewire_slave_free(OneWireSlave* bus);
void onewire_slave_start(OneWireSlave* bus);
void onewire_slave_stop(OneWireSlave* bus);
void onewire_slave_attach(OneWireSlave* bus, OneWireDevice* device);
void onewire_slave_detach(OneWireSlave* bus);
void onewire_slave_set_result_callback(
    OneWireSlave* bus,
    OneWireSlaveResultCallback result_cb,
    void* context);
       
typedef struct OneWireSlave OneWireSlave;
typedef struct OneWireDevice OneWireDevice;
OneWireDevice* onewire_device_alloc(
    uint8_t id_1,
    uint8_t id_2,
    uint8_t id_3,
    uint8_t id_4,
    uint8_t id_5,
    uint8_t id_6,
    uint8_t id_7,
    uint8_t id_8);
void onewire_device_free(OneWireDevice* device);
void onewire_device_send_id(OneWireDevice* device);
void onewire_device_attach(OneWireDevice* device, OneWireSlave* bus);
void onewire_device_detach(OneWireDevice* device);
uint8_t* onewire_device_get_id_p(OneWireDevice* device);
       
       
#define IBUTTON_KEY_DATA_SIZE 8
#define IBUTTON_KEY_NAME_SIZE 22
typedef enum {
    iButtonKeyDS1990,
    iButtonKeyCyfral,
    iButtonKeyMetakom,
} iButtonKeyType;
typedef struct iButtonKey iButtonKey;
iButtonKey* ibutton_key_alloc();
void ibutton_key_free(iButtonKey* key);
void ibutton_key_set(iButtonKey* to, const iButtonKey* from);
void ibutton_key_set_data(iButtonKey* key, uint8_t* data, uint8_t data_count);
void ibutton_key_clear_data(iButtonKey* key);
const uint8_t* ibutton_key_get_data_p(iButtonKey* key);
uint8_t ibutton_key_get_data_size(iButtonKey* key);
void ibutton_key_set_type(iButtonKey* key, iButtonKeyType key_type);
iButtonKeyType ibutton_key_get_type(iButtonKey* key);
const char* ibutton_key_get_string_by_type(iButtonKeyType key_type);
_Bool ibutton_key_get_type_by_string(const char* type_string, iButtonKeyType* key_type);
uint8_t ibutton_key_get_size_by_type(iButtonKeyType key_type);
uint8_t ibutton_key_get_max_size();
_Bool ibutton_key_dallas_crc_is_valid(iButtonKey* key);
_Bool ibutton_key_dallas_is_1990_key(iButtonKey* key);
typedef enum {
    iButtonWorkerWriteOK,
    iButtonWorkerWriteSameKey,
    iButtonWorkerWriteNoDetect,
    iButtonWorkerWriteCannotWrite,
} iButtonWorkerWriteResult;
typedef void (*iButtonWorkerReadCallback)(void* context);
typedef void (*iButtonWorkerWriteCallback)(void* context, iButtonWorkerWriteResult result);
typedef void (*iButtonWorkerEmulateCallback)(void* context, _Bool emulated);
typedef struct iButtonWorker iButtonWorker;
iButtonWorker* ibutton_worker_alloc();
void ibutton_worker_free(iButtonWorker* worker);
void ibutton_worker_start_thread(iButtonWorker* worker);
void ibutton_worker_stop_thread(iButtonWorker* worker);
void ibutton_worker_read_set_callback(
    iButtonWorker* worker,
    iButtonWorkerReadCallback callback,
    void* context);
void ibutton_worker_read_start(iButtonWorker* worker, iButtonKey* key);
void ibutton_worker_write_set_callback(
    iButtonWorker* worker,
    iButtonWorkerWriteCallback callback,
    void* context);
void ibutton_worker_write_start(iButtonWorker* worker, iButtonKey* key);
void ibutton_worker_emulate_set_callback(
    iButtonWorker* worker,
    iButtonWorkerEmulateCallback callback,
    void* context);
void ibutton_worker_emulate_start(iButtonWorker* worker, iButtonKey* key);
void ibutton_worker_stop(iButtonWorker* worker);
       
#define MAXIM_CRC8_INIT 0
uint8_t maxim_crc8(const uint8_t* data, const uint8_t data_size, const uint8_t crc_init);
#define U8G2_H 
#define U8X8_H 
#define _STDARG_H 
#define _ANSI_STDARG_H_ 
#undef __need___va_list
#define __GNUC_VA_LIST 
typedef __builtin_va_list __gnuc_va_list;
#define va_start(v,l) __builtin_va_start(v,l)
#define va_end(v) __builtin_va_end(v)
#define va_arg(v,l) __builtin_va_arg(v,l)
#define va_copy(d,s) __builtin_va_copy(d,s)
#define __va_copy(d,s) __builtin_va_copy(d,s)
typedef __gnuc_va_list va_list;
#define _VA_LIST_ 
#define _VA_LIST 
#define _VA_LIST_DEFINED 
#define _VA_LIST_T_H 
#define __va_list__ 
#define _STDDEF_H 
#define _STDDEF_H_ 
#define _ANSI_STDDEF_H 
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 
typedef int ptrdiff_t;
#undef __need_ptrdiff_t
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 
#define __size_t 
typedef unsigned int size_t;
#undef __need_size_t
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
#undef _BSD_WCHAR_T_
typedef unsigned int wchar_t;
#undef __need_wchar_t
#undef NULL
#define NULL ((void *)0)
#undef __need_NULL
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
#define _GCC_MAX_ALIGN_T 
typedef struct {
  long long __max_align_ll ;
  long double __max_align_ld ;
} max_align_t;
#define _GCC_LIMITS_H_ 
#define _GCC_NEXT_LIMITS_H 
#define _LIBC_LIMITS_H_ 1
#define __NEWLIB_H__ 1
#define _WANT_IO_C99_FORMATS 1
#define _WANT_IO_LONG_LONG 1
#define _WANT_REGISTER_FINI 1
#define _REENT_CHECK_VERIFY 1
#define _MB_LEN_MAX 1
#define HAVE_INITFINI_ARRAY 1
#define _ATEXIT_DYNAMIC_ALLOC 1
#define _HAVE_LONG_DOUBLE 1
#define _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL 1
#define _LDBL_EQ_DBL 1
#define _FVWRITE_IN_STREAMIO 1
#define _FSEEK_OPTIMIZATION 1
#define _WIDE_ORIENT 1
#define _UNBUF_STREAM_OPT 1
#define _RETARGETABLE_LOCKING 1
#define _SYS_CDEFS_H_ 
#define __PMT(args) args
#define __DOTS , ...
#define __THROW 
#define __ASMNAME(cname) __XSTRING (__USER_LABEL_PREFIX__) cname
#define __ptr_t void *
#define __long_double_t long double
#define __attribute_malloc__ 
#define __attribute_pure__ 
#define __attribute_format_strfmon__(a,b) 
#define __flexarr [0]
#define __bounded 
#define __unbounded 
#define __ptrvalue 
#define __has_extension __has_feature
#define __has_feature(x) 0
#define __BEGIN_DECLS 
#define __END_DECLS 
#define __GNUCLIKE_ASM 3
#define __GNUCLIKE_MATH_BUILTIN_CONSTANTS 
#define __GNUCLIKE___TYPEOF 1
#define __GNUCLIKE___OFFSETOF 1
#define __GNUCLIKE___SECTION 1
#define __GNUCLIKE_CTOR_SECTION_HANDLING 1
#define __GNUCLIKE_BUILTIN_CONSTANT_P 1
#define __GNUCLIKE_BUILTIN_VARARGS 1
#define __GNUCLIKE_BUILTIN_STDARG 1
#define __GNUCLIKE_BUILTIN_VAALIST 1
#define __GNUC_VA_LIST_COMPATIBILITY 1
#define __compiler_membar() __asm __volatile(" " : : : "memory")
#define __GNUCLIKE_BUILTIN_NEXT_ARG 1
#define __GNUCLIKE_MATH_BUILTIN_RELOPS 
#define __GNUCLIKE_BUILTIN_MEMCPY 1
#define __CC_SUPPORTS_INLINE 1
#define __CC_SUPPORTS___INLINE 1
#define __CC_SUPPORTS___INLINE__ 1
#define __CC_SUPPORTS___FUNC__ 1
#define __CC_SUPPORTS_WARNING 1
#define __CC_SUPPORTS_VARADIC_XXX 1
#define __CC_SUPPORTS_DYNAMIC_ARRAY_INIT 1
#define __P(protos) protos
#define __CONCAT1(x,y) x ## y
#define __CONCAT(x,y) __CONCAT1(x,y)
#define __STRING(x) #x
#define __XSTRING(x) __STRING(x)
#define __const const
#define __signed signed
#define __volatile volatile
#define __weak_symbol __attribute__((__weak__))
#define __dead2 __attribute__((__noreturn__))
#define __pure2 __attribute__((__const__))
#define __unused __attribute__((__unused__))
#define __used __attribute__((__used__))
#define __packed __attribute__((__packed__))
#define __aligned(x) __attribute__((__aligned__(x)))
#define __section(x) __attribute__((__section__(x)))
#define __alloc_size(x) __attribute__((__alloc_size__(x)))
#define __alloc_size2(n,x) __attribute__((__alloc_size__(n, x)))
#define __alloc_align(x) __attribute__((__alloc_align__(x)))
#define __generic(expr,t,yes,no) _Generic(expr, t: yes, default: no)
#define __min_size(x) static (x)
#define __malloc_like __attribute__((__malloc__))
#define __pure __attribute__((__pure__))
#define __always_inline __inline__ __attribute__((__always_inline__))
#define __noinline __attribute__ ((__noinline__))
#define __nonnull(x) __attribute__((__nonnull__ x))
#define __nonnull_all __attribute__((__nonnull__))
#define __fastcall __attribute__((__fastcall__))
#define __result_use_check __attribute__((__warn_unused_result__))
#define __returns_twice __attribute__((__returns_twice__))
#define __unreachable() __builtin_unreachable()
#define __restrict restrict
#define __predict_true(exp) __builtin_expect((exp), 1)
#define __predict_false(exp) __builtin_expect((exp), 0)
#define __null_sentinel __attribute__((__sentinel__))
#define __exported __attribute__((__visibility__("default")))
#define __hidden __attribute__((__visibility__("hidden")))
#define __offsetof(type,field) offsetof(type, field)
#define __rangeof(type,start,end) (__offsetof(type, end) - __offsetof(type, start))
#define __containerof(x,s,m) ({ const volatile __typeof(((s *)0)->m) *__x = (x); __DEQUALIFY(s *, (const volatile char *)__x - __offsetof(s, m));})
#define __printflike(fmtarg,firstvararg) __attribute__((__format__ (__printf__, fmtarg, firstvararg)))
#define __scanflike(fmtarg,firstvararg) __attribute__((__format__ (__scanf__, fmtarg, firstvararg)))
#define __format_arg(fmtarg) __attribute__((__format_arg__ (fmtarg)))
#define __strfmonlike(fmtarg,firstvararg) __attribute__((__format__ (__strfmon__, fmtarg, firstvararg)))
#define __strftimelike(fmtarg,firstvararg) __attribute__((__format__ (__strftime__, fmtarg, firstvararg)))
#define __printf0like(fmtarg,firstvararg) 
#define __strong_reference(sym,aliassym) extern __typeof (sym) aliassym __attribute__ ((__alias__ (#sym)))
#define __weak_reference(sym,alias) __asm__(".weak " #alias); __asm__(".equ " #alias ", " #sym)
#define __warn_references(sym,msg) __asm__(".section .gnu.warning." #sym); __asm__(".asciz \"" msg "\""); __asm__(".previous")
#define __sym_compat(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@" #verid)
#define __sym_default(sym,impl,verid) __asm__(".symver " #impl ", " #sym "@@" #verid)
#define __FBSDID(s) struct __hack
#define __RCSID(s) struct __hack
#define __RCSID_SOURCE(s) struct __hack
#define __SCCSID(s) struct __hack
#define __COPYRIGHT(s) struct __hack
#define __DECONST(type,var) ((type)(__uintptr_t)(const void *)(var))
#define __DEVOLATILE(type,var) ((type)(__uintptr_t)(volatile void *)(var))
#define __DEQUALIFY(type,var) ((type)(__uintptr_t)(const volatile void *)(var))
#define _Nonnull 
#define _Nullable 
#define _Null_unspecified 
#define __NULLABILITY_PRAGMA_PUSH 
#define __NULLABILITY_PRAGMA_POP 
#define __arg_type_tag(arg_kind,arg_idx,type_tag_idx) 
#define __datatype_type_tag(kind,type) 
#define __lock_annotate(x) 
#define __lockable __lock_annotate(lockable)
#define __locks_exclusive(...) __lock_annotate(exclusive_lock_function(__VA_ARGS__))
#define __locks_shared(...) __lock_annotate(shared_lock_function(__VA_ARGS__))
#define __trylocks_exclusive(...) __lock_annotate(exclusive_trylock_function(__VA_ARGS__))
#define __trylocks_shared(...) __lock_annotate(shared_trylock_function(__VA_ARGS__))
#define __unlocks(...) __lock_annotate(unlock_function(__VA_ARGS__))
#define __asserts_exclusive(...) __lock_annotate(assert_exclusive_lock(__VA_ARGS__))
#define __asserts_shared(...) __lock_annotate(assert_shared_lock(__VA_ARGS__))
#define __requires_exclusive(...) __lock_annotate(exclusive_locks_required(__VA_ARGS__))
#define __requires_shared(...) __lock_annotate(shared_locks_required(__VA_ARGS__))
#define __requires_unlocked(...) __lock_annotate(locks_excluded(__VA_ARGS__))
#define __no_lock_analysis __lock_annotate(no_thread_safety_analysis)
#define __nosanitizeaddress 
#define __nosanitizethread 
#define __guarded_by(x) __lock_annotate(guarded_by(x))
#define __pt_guarded_by(x) __lock_annotate(pt_guarded_by(x))
#define _SYS_SYSLIMITS_H_ 
#define ARG_MAX 65536
#define CHILD_MAX 40
#define LINK_MAX 32767
#define MAX_CANON 255
#define MAX_INPUT 255
#define NAME_MAX 255
#define NGROUPS_MAX 16
#define OPEN_MAX 64
#define PATH_MAX 1024
#define PIPE_BUF 512
#define IOV_MAX 1024
#define BC_BASE_MAX 99
#define BC_DIM_MAX 2048
#define BC_SCALE_MAX 99
#define BC_STRING_MAX 1000
#define COLL_WEIGHTS_MAX 0
#define EXPR_NEST_MAX 32
#define LINE_MAX 2048
#define RE_DUP_MAX 255
#define MB_LEN_MAX _MB_LEN_MAX
#define NL_ARGMAX 32
#define _POSIX2_RE_DUP_MAX 255
#undef _GCC_NEXT_LIMITS_H
#define _LIMITS_H___ 
#undef CHAR_BIT
#define CHAR_BIT __CHAR_BIT__
#undef SCHAR_MIN
#define SCHAR_MIN (-SCHAR_MAX - 1)
#undef SCHAR_MAX
#define SCHAR_MAX __SCHAR_MAX__
#undef UCHAR_MAX
#define UCHAR_MAX (SCHAR_MAX * 2 + 1)
#undef CHAR_MIN
#define CHAR_MIN 0
#undef CHAR_MAX
#define CHAR_MAX UCHAR_MAX
#undef SHRT_MIN
#define SHRT_MIN (-SHRT_MAX - 1)
#undef SHRT_MAX
#define SHRT_MAX __SHRT_MAX__
#undef USHRT_MAX
#define USHRT_MAX (SHRT_MAX * 2 + 1)
#undef INT_MIN
#define INT_MIN (-INT_MAX - 1)
#undef INT_MAX
#define INT_MAX __INT_MAX__
#undef UINT_MAX
#define UINT_MAX (INT_MAX * 2U + 1U)
#undef LONG_MIN
#define LONG_MIN (-LONG_MAX - 1L)
#undef LONG_MAX
#define LONG_MAX __LONG_MAX__
#undef ULONG_MAX
#define ULONG_MAX (LONG_MAX * 2UL + 1UL)
#undef LLONG_MIN
#define LLONG_MIN (-LLONG_MAX - 1LL)
#undef LLONG_MAX
#define LLONG_MAX __LONG_LONG_MAX__
#undef ULLONG_MAX
#define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
#undef LONG_LONG_MIN
#define LONG_LONG_MIN (-LONG_LONG_MAX - 1LL)
#undef LONG_LONG_MAX
#define LONG_LONG_MAX __LONG_LONG_MAX__
#undef ULONG_LONG_MAX
#define ULONG_LONG_MAX (LONG_LONG_MAX * 2ULL + 1ULL)
#define U8X8_NOINLINE __attribute__((noinline))
#define U8X8_SECTION(name) __attribute__((section(name)))
#define U8X8_UNUSED __attribute__((unused))
#define U8X8_FONT_SECTION(name) 
#define u8x8_pgm_read(adr) (*(const uint8_t*)(adr))
#define U8X8_PROGMEM 
typedef struct u8x8_struct u8x8_t;
typedef struct u8x8_display_info_struct u8x8_display_info_t;
typedef struct u8x8_tile_struct u8x8_tile_t;
typedef uint8_t (*u8x8_msg_cb)(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
typedef uint16_t (*u8x8_char_cb)(u8x8_t* u8x8, uint8_t b);
struct u8x8_tile_struct {
    uint8_t* tile_ptr;
    uint8_t cnt;
    uint8_t x_pos;
    uint8_t y_pos;
};
struct u8x8_display_info_struct {
    uint8_t chip_enable_level;
    uint8_t chip_disable_level;
    uint8_t post_chip_enable_wait_ns;
    uint8_t pre_chip_disable_wait_ns;
    uint8_t reset_pulse_width_ms;
    uint8_t post_reset_wait_ms;
    uint8_t sda_setup_time_ns;
    uint8_t sck_pulse_width_ns;
    uint32_t sck_clock_hz;
    uint8_t spi_mode;
    uint8_t i2c_bus_clock_100kHz;
    uint8_t data_setup_time_ns;
    uint8_t write_pulse_width_ns;
    uint8_t tile_width;
    uint8_t tile_height;
    uint8_t default_x_offset;
    uint8_t flipmode_x_offset;
    uint16_t pixel_width;
    uint16_t pixel_height;
};
#define U8X8_PIN_D0 0
#define U8X8_PIN_SPI_CLOCK 0
#define U8X8_PIN_D1 1
#define U8X8_PIN_SPI_DATA 1
#define U8X8_PIN_D2 2
#define U8X8_PIN_D3 3
#define U8X8_PIN_D4 4
#define U8X8_PIN_D5 5
#define U8X8_PIN_D6 6
#define U8X8_PIN_D7 7
#define U8X8_PIN_E 8
#define U8X8_PIN_CS 9
#define U8X8_PIN_DC 10
#define U8X8_PIN_RESET 11
#define U8X8_PIN_I2C_CLOCK 12
#define U8X8_PIN_I2C_DATA 13
#define U8X8_PIN_CS1 14
#define U8X8_PIN_CS2 15
#define U8X8_PIN_OUTPUT_CNT 16
#define U8X8_PIN_MENU_SELECT 16
#define U8X8_PIN_MENU_NEXT 17
#define U8X8_PIN_MENU_PREV 18
#define U8X8_PIN_MENU_HOME 19
#define U8X8_PIN_MENU_UP 20
#define U8X8_PIN_MENU_DOWN 21
#define U8X8_PIN_INPUT_CNT 6
struct u8x8_struct {
    const u8x8_display_info_t* display_info;
    u8x8_char_cb next_cb;
    u8x8_msg_cb display_cb;
    u8x8_msg_cb cad_cb;
    u8x8_msg_cb byte_cb;
    u8x8_msg_cb gpio_and_delay_cb;
    uint32_t bus_clock;
    const uint8_t* font;
    uint16_t encoding;
    uint8_t x_offset;
    uint8_t is_font_inverse_mode;
    uint8_t
        i2c_address;
    uint8_t i2c_started;
    uint8_t utf8_state;
    uint8_t gpio_result;
    uint8_t debounce_default_pin_state;
    uint8_t debounce_last_pin_state;
    uint8_t debounce_state;
    uint8_t debounce_result_msg;
};
#define u8x8_GetCols(u8x8) ((u8x8)->display_info->tile_width)
#define u8x8_GetRows(u8x8) ((u8x8)->display_info->tile_height)
#define u8x8_GetI2CAddress(u8x8) ((u8x8)->i2c_address)
#define u8x8_SetI2CAddress(u8x8,address) ((u8x8)->i2c_address = (address))
#define u8x8_SetGPIOResult(u8x8,val) ((u8x8)->gpio_result = (val))
#define u8x8_GetSPIClockPhase(u8x8) ((u8x8)->display_info->spi_mode & 0x01)
#define u8x8_GetSPIClockPolarity(u8x8) (((u8x8)->display_info->spi_mode & 0x02) >> 1)
#define u8x8_GetSPIClockDefaultLevel(u8x8) (((u8x8)->display_info->spi_mode & 0x02) >> 1)
#define u8x8_GetFontCharWidth(u8x8) u8x8_pgm_read((u8x8)->font + 2)
#define u8x8_GetFontCharHeight(u8x8) u8x8_pgm_read((u8x8)->font + 3)
typedef struct u8log_struct u8log_t;
typedef void (*u8log_cb)(u8log_t* u8log);
struct u8log_struct {
    void* aux_data;
    uint8_t width, height;
    u8log_cb cb;
    uint8_t* screen_buffer;
    uint8_t is_redraw_line_for_each_char;
    int8_t line_height_offset;
    uint8_t cursor_x, cursor_y;
    uint8_t redraw_line;
    uint8_t is_redraw_line;
    uint8_t is_redraw_all;
    uint8_t is_redraw_all_required_for_next_nl;
};
void u8x8_d_helper_display_setup_memory(u8x8_t* u8x8, const u8x8_display_info_t* display_info);
void u8x8_d_helper_display_init(u8x8_t* u8g2);
#define U8X8_MSG_DISPLAY_SETUP_MEMORY 9
#define U8X8_MSG_DISPLAY_INIT 10
#define U8X8_MSG_DISPLAY_SET_POWER_SAVE 11
#define U8X8_MSG_DISPLAY_SET_FLIP_MODE 13
#define U8X8_MSG_DISPLAY_SET_CONTRAST 14
#define U8X8_MSG_DISPLAY_DRAW_TILE 15
#define U8X8_MSG_DISPLAY_REFRESH 16
uint8_t u8x8_dummy_cb(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
void u8x8_SetupDefaults(u8x8_t* u8x8);
void u8x8_Setup(
    u8x8_t* u8x8,
    u8x8_msg_cb display_cb,
    u8x8_msg_cb cad_cb,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
uint8_t u8x8_DrawTile(u8x8_t* u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t* tile_ptr);
void u8x8_SetupMemory(u8x8_t* u8x8);
void u8x8_InitDisplay(u8x8_t* u8x8);
void u8x8_SetPowerSave(u8x8_t* u8x8, uint8_t is_enable);
void u8x8_SetFlipMode(u8x8_t* u8x8, uint8_t mode);
void u8x8_SetContrast(u8x8_t* u8x8, uint8_t value);
void u8x8_ClearDisplayWithTile(u8x8_t* u8x8, const uint8_t* buf) ;
void u8x8_ClearDisplay(u8x8_t* u8x8);
void u8x8_FillDisplay(u8x8_t* u8x8);
void u8x8_RefreshDisplay(
    u8x8_t* u8x8);
void u8x8_ClearLine(u8x8_t* u8x8, uint8_t line);
#define U8X8_MSG_CAD_INIT 20
#define U8X8_MSG_CAD_SEND_CMD 21
#define U8X8_MSG_CAD_SEND_ARG 22
#define U8X8_MSG_CAD_SEND_DATA 23
#define U8X8_MSG_CAD_START_TRANSFER 24
#define U8X8_MSG_CAD_END_TRANSFER 25
#define u8x8_cad_Init(u8x8) ((u8x8)->cad_cb((u8x8), U8X8_MSG_CAD_INIT, 0, NULL))
uint8_t u8x8_cad_SendCmd(u8x8_t* u8x8, uint8_t cmd) ;
uint8_t u8x8_cad_SendArg(u8x8_t* u8x8, uint8_t arg) ;
uint8_t u8x8_cad_SendMultipleArg(u8x8_t* u8x8, uint8_t cnt, uint8_t arg) ;
uint8_t u8x8_cad_SendData(u8x8_t* u8x8, uint8_t cnt, uint8_t* data) ;
uint8_t u8x8_cad_StartTransfer(u8x8_t* u8x8) ;
uint8_t u8x8_cad_EndTransfer(u8x8_t* u8x8) ;
void u8x8_cad_vsendf(u8x8_t* u8x8, const char* fmt, va_list va);
void u8x8_SendF(u8x8_t* u8x8, const char* fmt, ...);
#define U8X8_C(c0) (U8X8_MSG_CAD_SEND_CMD), (c0)
#define U8X8_A(a0) (U8X8_MSG_CAD_SEND_ARG), (a0)
#define U8X8_CA(c0,a0) (U8X8_MSG_CAD_SEND_CMD), (c0), (U8X8_MSG_CAD_SEND_ARG), (a0)
#define U8X8_CAA(c0,a0,a1) (U8X8_MSG_CAD_SEND_CMD), (c0), (U8X8_MSG_CAD_SEND_ARG), (a0), (U8X8_MSG_CAD_SEND_ARG), (a1)
#define U8X8_CAAA(c0,a0,a1,a2) (U8X8_MSG_CAD_SEND_CMD), (c0), (U8X8_MSG_CAD_SEND_ARG), (a0), (U8X8_MSG_CAD_SEND_ARG), (a1), (U8X8_MSG_CAD_SEND_ARG), (a2)
#define U8X8_CAAAA(c0,a0,a1,a2,a3) (U8X8_MSG_CAD_SEND_CMD), (c0), (U8X8_MSG_CAD_SEND_ARG), (a0), (U8X8_MSG_CAD_SEND_ARG), (a1), (U8X8_MSG_CAD_SEND_ARG), (a2), (U8X8_MSG_CAD_SEND_ARG), (a3)
#define U8X8_AAC(a0,a1,c0) (U8X8_MSG_CAD_SEND_ARG), (a0), (U8X8_MSG_CAD_SEND_ARG), (a1), (U8X8_MSG_CAD_SEND_CMD), (c0)
#define U8X8_D1(d0) (U8X8_MSG_CAD_SEND_DATA), (d0)
#define U8X8_A4(a0,a1,a2,a3) U8X8_A(a0), U8X8_A(a1), U8X8_A(a2), U8X8_A(a3)
#define U8X8_A8(a0,a1,a2,a3,a4,a5,a6,a7) U8X8_A4((a0), (a1), (a2), (a3)), U8X8_A4((a4), (a5), (a6), (a7))
#define U8X8_START_TRANSFER() (U8X8_MSG_CAD_START_TRANSFER)
#define U8X8_END_TRANSFER() (U8X8_MSG_CAD_END_TRANSFER)
#define U8X8_DLY(m) (0xfe), (m)
#define U8X8_END() (0xff)
void u8x8_cad_SendSequence(u8x8_t* u8x8, uint8_t const* data);
uint8_t u8x8_cad_empty(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_cad_110(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_cad_001(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_cad_011(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_cad_100(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_cad_st7920_spi(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_cad_st75256_i2c(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_cad_ld7032_i2c(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_cad_uc16xx_i2c(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
#define U8X8_MSG_BYTE_INIT U8X8_MSG_CAD_INIT
#define U8X8_MSG_BYTE_SET_DC 32
#define U8X8_MSG_BYTE_SEND U8X8_MSG_CAD_SEND_DATA
#define U8X8_MSG_BYTE_START_TRANSFER U8X8_MSG_CAD_START_TRANSFER
#define U8X8_MSG_BYTE_END_TRANSFER U8X8_MSG_CAD_END_TRANSFER
uint8_t u8x8_byte_SetDC(u8x8_t* u8x8, uint8_t dc) ;
uint8_t u8x8_byte_SendByte(u8x8_t* u8x8, uint8_t byte) ;
uint8_t u8x8_byte_SendBytes(u8x8_t* u8x8, uint8_t cnt, uint8_t* data) ;
uint8_t u8x8_byte_StartTransfer(u8x8_t* u8x8);
uint8_t u8x8_byte_EndTransfer(u8x8_t* u8x8);
uint8_t u8x8_byte_empty(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_byte_4wire_sw_spi(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_byte_8bit_6800mode(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_byte_8bit_8080mode(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_byte_3wire_sw_spi(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
void u8x8_byte_set_ks0108_cs(u8x8_t* u8x8, uint8_t arg) ;
uint8_t u8x8_byte_ks0108(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_byte_ssd13xx_sw_i2c(
    u8x8_t* u8x8,
    uint8_t msg,
    uint8_t arg_int,
    void* arg_ptr);
uint8_t u8x8_byte_sw_i2c(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_byte_sed1520(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
#define U8X8_MSG_GPIO_AND_DELAY_INIT 40
#define U8X8_MSG_DELAY_MILLI 41
#define U8X8_MSG_DELAY_10MICRO 42
#define U8X8_MSG_DELAY_100NANO 43
#define U8X8_MSG_DELAY_NANO 44
#define U8X8_MSG_DELAY_I2C 45
#define U8X8_MSG_GPIO(x) (64 + (x))
#define U8X8_MSG_GPIO_D0 U8X8_MSG_GPIO(U8X8_PIN_D0)
#define U8X8_MSG_GPIO_SPI_CLOCK U8X8_MSG_GPIO(U8X8_PIN_SPI_CLOCK)
#define U8X8_MSG_GPIO_D1 U8X8_MSG_GPIO(U8X8_PIN_D1)
#define U8X8_MSG_GPIO_SPI_DATA U8X8_MSG_GPIO(U8X8_PIN_SPI_DATA)
#define U8X8_MSG_GPIO_D2 U8X8_MSG_GPIO(U8X8_PIN_D2)
#define U8X8_MSG_GPIO_D3 U8X8_MSG_GPIO(U8X8_PIN_D3)
#define U8X8_MSG_GPIO_D4 U8X8_MSG_GPIO(U8X8_PIN_D4)
#define U8X8_MSG_GPIO_D5 U8X8_MSG_GPIO(U8X8_PIN_D5)
#define U8X8_MSG_GPIO_D6 U8X8_MSG_GPIO(U8X8_PIN_D6)
#define U8X8_MSG_GPIO_D7 U8X8_MSG_GPIO(U8X8_PIN_D7)
#define U8X8_MSG_GPIO_E U8X8_MSG_GPIO(U8X8_PIN_E)
#define U8X8_MSG_GPIO_CS U8X8_MSG_GPIO(U8X8_PIN_CS)
#define U8X8_MSG_GPIO_DC U8X8_MSG_GPIO(U8X8_PIN_DC)
#define U8X8_MSG_GPIO_RESET U8X8_MSG_GPIO(U8X8_PIN_RESET)
#define U8X8_MSG_GPIO_I2C_CLOCK U8X8_MSG_GPIO(U8X8_PIN_I2C_CLOCK)
#define U8X8_MSG_GPIO_I2C_DATA U8X8_MSG_GPIO(U8X8_PIN_I2C_DATA)
#define U8X8_MSG_GPIO_CS1 U8X8_MSG_GPIO(U8X8_PIN_CS1)
#define U8X8_MSG_GPIO_CS2 U8X8_MSG_GPIO(U8X8_PIN_CS2)
#define U8X8_MSG_GPIO_MENU_SELECT U8X8_MSG_GPIO(U8X8_PIN_MENU_SELECT)
#define U8X8_MSG_GPIO_MENU_NEXT U8X8_MSG_GPIO(U8X8_PIN_MENU_NEXT)
#define U8X8_MSG_GPIO_MENU_PREV U8X8_MSG_GPIO(U8X8_PIN_MENU_PREV)
#define U8X8_MSG_GPIO_MENU_HOME U8X8_MSG_GPIO(U8X8_PIN_MENU_HOME)
#define U8X8_MSG_GPIO_MENU_UP U8X8_MSG_GPIO(U8X8_PIN_MENU_UP)
#define U8X8_MSG_GPIO_MENU_DOWN U8X8_MSG_GPIO(U8X8_PIN_MENU_DOWN)
#define u8x8_gpio_Init(u8x8) ((u8x8)->gpio_and_delay_cb((u8x8), U8X8_MSG_GPIO_AND_DELAY_INIT, 0, NULL))
#define u8x8_gpio_SetDC(u8x8,v) u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_DC, (v))
#define u8x8_gpio_SetCS(u8x8,v) u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_CS, (v))
#define u8x8_gpio_SetReset(u8x8,v) u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_RESET, (v))
#define u8x8_gpio_SetSPIClock(u8x8,v) u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_SPI_CLOCK, (v))
#define u8x8_gpio_SetSPIData(u8x8,v) u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_SPI_DATA, (v))
#define u8x8_gpio_SetI2CClock(u8x8,v) u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_I2C_CLOCK, (v))
#define u8x8_gpio_SetI2CData(u8x8,v) u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_I2C_DATA, (v))
void u8x8_gpio_call(u8x8_t* u8x8, uint8_t msg, uint8_t arg) ;
#define u8x8_gpio_Delay(u8x8,msg,dly) u8x8_gpio_call((u8x8), (msg), (dly))
uint8_t u8x8_GetMenuEvent(u8x8_t* u8x8);
void u8x8_SetupStdio(u8x8_t* u8x8);
void u8x8_Setup_SDL_128x64(u8x8_t* u8x8);
void u8x8_Setup_SDL_240x160(u8x8_t* u8x8);
int u8g_sdl_get_key(void);
void u8x8_Setup_TGA_DESC(u8x8_t* u8x8);
void u8x8_Setup_TGA_LCD(u8x8_t* u8x8);
void tga_save(const char* name);
uint8_t u8x8_GetBitmapPixel(u8x8_t* u8x8, uint16_t x, uint16_t y);
void u8x8_SaveBitmapTGA(u8x8_t* u8x8, const char* filename);
void u8x8_SetupBitmap(u8x8_t* u8x8, uint16_t pixel_width, uint16_t pixel_height);
uint8_t u8x8_ConnectBitmapToU8x8(u8x8_t* u8x8);
void u8x8_Setup_Utf8(u8x8_t* u8x8);
void utf8_show(void);
uint8_t u8x8_d_null_cb(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_uc1701_ea_dogs102(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_uc1701_mini12864(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1305_128x32_noname(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1305_128x32_adafruit(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1305_128x64_adafruit(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1306_128x64_vcomh0(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1306_128x64_alt0(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1309_128x64_noname0(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1309_128x64_noname2(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sh1106_128x64_vcomh0(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sh1106_128x64_winstar(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sh1106_72x40_wise(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sh1106_64x32(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sh1107_64x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sh1107_seeed_96x96(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sh1107_128x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sh1107_pimoroni_128x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sh1107_seeed_128x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sh1108_160x160(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sh1122_256x64(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7920_192x32(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7920_128x64(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1306_128x32_winstar(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1306_64x48_er(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1306_48x64_winstar(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1306_64x32_noname(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1306_64x32_1f(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1306_96x16_er(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1306_72x40_er(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ls013b7dh03_128x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ls027b7dh01_400x240(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ls013b7dh05_144x168(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7511_avd_320x240(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7528_nhd_c160100(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7565_ea_dogm128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7565_lm6063(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7565_64128n(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7565_ea_dogm132(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7565_zolen_128x64(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7565_nhd_c12832(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7565_nhd_c12864(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7565_jlx12864(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7565_lm6059(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7565_lx12864(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7565_erc12864(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7565_erc12864_alt(
    u8x8_t* u8x8,
    uint8_t msg,
    uint8_t arg_int,
    void* arg_ptr);
uint8_t u8x8_d_st7567_pi_132x64(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7567_jlx12864(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7567_enh_dg128064(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7567_enh_dg128064i(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7567_64x32(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7567_os12864(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7586s_s028hn118a(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7586s_erc240160(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st7588_jlx12864(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st75256_jlx256128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st75256_wo256x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st75256_jlx256160(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st75256_jlx256160m(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st75256_jlx256160_alt(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st75256_jlx240160(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st75256_jlx25664(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st75256_jlx172104(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st75256_jlx19296(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_st75320_jlx320240(
    u8x8_t* u8x8,
    uint8_t msg,
    uint8_t arg_int,
    void* arg_ptr);
uint8_t u8x8_d_nt7534_tg12864r(
    u8x8_t* u8x8,
    uint8_t msg,
    uint8_t arg_int,
    void* arg_ptr);
uint8_t u8x8_d_ld7032_60x32(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_t6963_240x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_t6963_240x64(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_t6963_128x64(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_t6963_128x64_alt(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_t6963_160x80(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_t6963_256x64(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1316_128x32(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1317_96x96(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1318_128x96(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1318_128x96_xcp(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1322_nhd_256x64(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1322_nhd_128x64(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_a2printer_384x240(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sed1330_240x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ra8835_nhd_240x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ra8835_320x240(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1325_nhd_128x64(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd0323_os128064(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1327_ws_96x64(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1327_seeed_96x96(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1327_ea_w128128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1327_midas_128x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1327_ws_128x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1327_visionox_128x96(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1326_er_256x32(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1329_128x96_noname(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_uc1601_128x32(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_uc1604_jlx19264(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_uc1608_erc24064(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_uc1608_erc240120(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_uc1608_240x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_uc1610_ea_dogxl160(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_uc1611_ea_dogm240(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_uc1611_ea_dogxl240(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t
    u8x8_d_uc1611_ew50850(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t
    u8x8_d_uc1611_cg160160(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_uc1617_jlx128128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_uc1638_160x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ks0108_128x64(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ks0108_erm19264(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sbn1661_122x32(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_sed1520_122x32(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_pcd8544_84x48(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_pcf8812_96x65(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_hx1230_96x68(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1606_172x72(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1607_200x200(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1607_v2_200x200(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1607_gd_200x200(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ssd1607_ws_200x200(
    u8x8_t* u8x8,
    uint8_t msg,
    uint8_t arg_int,
    void* arg_ptr);
uint8_t u8x8_d_il3820_296x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_il3820_v2_296x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_lc7981_160x80(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_lc7981_160x160(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_lc7981_240x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_lc7981_240x64(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ist3020_erc19264(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_ist7920_128x128(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_max7219_64x8(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_max7219_32x8(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_max7219_16x16(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint8_t u8x8_d_max7219_8x8(u8x8_t* u8x8, uint8_t msg, uint8_t arg_int, void* arg_ptr);
uint16_t u8x8_upscale_byte(uint8_t x) ;
void u8x8_utf8_init(u8x8_t* u8x8);
uint16_t u8x8_ascii_next(u8x8_t* u8x8, uint8_t b);
uint16_t u8x8_utf8_next(u8x8_t* u8x8, uint8_t b);
void u8x8_SetFont(u8x8_t* u8x8, const uint8_t* font_8x8);
void u8x8_DrawGlyph(u8x8_t* u8x8, uint8_t x, uint8_t y, uint8_t encoding);
void u8x8_Draw2x2Glyph(u8x8_t* u8x8, uint8_t x, uint8_t y, uint8_t encoding);
void u8x8_Draw1x2Glyph(u8x8_t* u8x8, uint8_t x, uint8_t y, uint8_t encoding);
uint8_t u8x8_DrawString(u8x8_t* u8x8, uint8_t x, uint8_t y, const char* s);
uint8_t
    u8x8_DrawUTF8(u8x8_t* u8x8, uint8_t x, uint8_t y, const char* s);
uint8_t u8x8_Draw2x2String(u8x8_t* u8x8, uint8_t x, uint8_t y, const char* s);
uint8_t u8x8_Draw2x2UTF8(u8x8_t* u8x8, uint8_t x, uint8_t y, const char* s);
uint8_t u8x8_Draw1x2String(u8x8_t* u8x8, uint8_t x, uint8_t y, const char* s);
uint8_t u8x8_Draw1x2UTF8(u8x8_t* u8x8, uint8_t x, uint8_t y, const char* s);
uint8_t u8x8_GetUTF8Len(u8x8_t* u8x8, const char* s);
#define u8x8_SetInverseFont(u8x8,b) (u8x8)->is_font_inverse_mode = (b)
const char* u8x8_u8toa(uint8_t v, uint8_t d);
const char* u8x8_u16toa(uint16_t v, uint8_t d);
const char* u8x8_utoa(uint16_t v);
uint8_t u8x8_GetStringLineCnt(const char* str);
const char* u8x8_GetStringLineStart(uint8_t line_idx, const char* str);
void u8x8_CopyStringLine(char* dest, uint8_t line_idx, const char* str);
uint8_t u8x8_DrawUTF8Line(u8x8_t* u8x8, uint8_t x, uint8_t y, uint8_t w, const char* s);
uint8_t u8x8_DrawUTF8Lines(u8x8_t* u8x8, uint8_t x, uint8_t y, uint8_t w, const char* s);
struct _u8sl_struct {
    uint8_t visible;
    uint8_t total;
    uint8_t first_pos;
    uint8_t current_pos;
    uint8_t x;
    uint8_t y;
};
typedef struct _u8sl_struct u8sl_t;
typedef void (*u8x8_sl_cb)(u8x8_t* u8x8, u8sl_t* u8sl, uint8_t idx, const void* aux);
void u8sl_Next(u8sl_t* u8sl);
void u8sl_Prev(u8sl_t* u8sl);
uint8_t u8x8_UserInterfaceSelectionList(
    u8x8_t* u8x8,
    const char* title,
    uint8_t start_pos,
    const char* sl);
uint8_t u8x8_UserInterfaceMessage(
    u8x8_t* u8x8,
    const char* title1,
    const char* title2,
    const char* title3,
    const char* buttons);
uint8_t u8x8_capture_get_pixel_1(uint16_t x, uint16_t y, uint8_t* dest_ptr, uint8_t tile_width);
uint8_t u8x8_capture_get_pixel_2(uint16_t x, uint16_t y, uint8_t* dest_ptr, uint8_t tile_width);
void u8x8_capture_write_pbm_pre(
    uint8_t tile_width,
    uint8_t tile_height,
    void (*out)(const char* s));
void u8x8_capture_write_pbm_buffer(
    uint8_t* buffer,
    uint8_t tile_width,
    uint8_t tile_height,
    uint8_t (*get_pixel)(uint16_t x, uint16_t y, uint8_t* dest_ptr, uint8_t tile_width),
    void (*out)(const char* s));
void u8x8_capture_write_xbm_pre(
    uint8_t tile_width,
    uint8_t tile_height,
    void (*out)(const char* s));
void u8x8_capture_write_xbm_buffer(
    uint8_t* buffer,
    uint8_t tile_width,
    uint8_t tile_height,
    uint8_t (*get_pixel)(uint16_t x, uint16_t y, uint8_t* dest_ptr, uint8_t tile_width),
    void (*out)(const char* s));
uint8_t u8x8_UserInterfaceInputValue(
    u8x8_t* u8x8,
    const char* title,
    const char* pre,
    uint8_t* value,
    uint8_t lo,
    uint8_t hi,
    uint8_t digits,
    const char* post);
void u8log_Init(u8log_t* u8log, uint8_t width, uint8_t height, uint8_t* buf);
void u8log_SetCallback(u8log_t* u8log, u8log_cb cb, void* aux_data);
void u8log_SetRedrawMode(u8log_t* u8log, uint8_t is_redraw_line_for_each_char);
void u8log_SetLineHeightOffset(u8log_t* u8log, int8_t line_height_offset);
void u8log_WriteString(u8log_t* u8log, const char* s) ;
void u8log_WriteChar(u8log_t* u8log, uint8_t c) ;
void u8log_WriteHex8(u8log_t* u8log, uint8_t b) ;
void u8log_WriteHex16(u8log_t* u8log, uint16_t v);
void u8log_WriteHex32(u8log_t* u8log, uint32_t v);
void u8log_WriteDec8(u8log_t* u8log, uint8_t v, uint8_t d);
void u8log_WriteDec16(u8log_t* u8log, uint16_t v, uint8_t d);
void u8x8_DrawLog(u8x8_t* u8x8, uint8_t x, uint8_t y, u8log_t* u8log);
void u8log_u8x8_cb(u8log_t* u8log);
extern const uint8_t
    u8x8_font_amstrad_cpc_extended_f[] ;
extern const uint8_t
    u8x8_font_amstrad_cpc_extended_r[] ;
extern const uint8_t
    u8x8_font_amstrad_cpc_extended_n[] ;
extern const uint8_t
    u8x8_font_amstrad_cpc_extended_u[] ;
extern const uint8_t u8x8_font_5x7_f[] ;
extern const uint8_t u8x8_font_5x7_r[] ;
extern const uint8_t u8x8_font_5x7_n[] ;
extern const uint8_t u8x8_font_5x8_f[] ;
extern const uint8_t u8x8_font_5x8_r[] ;
extern const uint8_t u8x8_font_5x8_n[] ;
extern const uint8_t u8x8_font_8x13_1x2_f[] ;
extern const uint8_t u8x8_font_8x13_1x2_r[] ;
extern const uint8_t u8x8_font_8x13_1x2_n[] ;
extern const uint8_t u8x8_font_8x13B_1x2_f[] ;
extern const uint8_t u8x8_font_8x13B_1x2_r[] ;
extern const uint8_t u8x8_font_8x13B_1x2_n[] ;
extern const uint8_t u8x8_font_7x14_1x2_f[] ;
extern const uint8_t u8x8_font_7x14_1x2_r[] ;
extern const uint8_t u8x8_font_7x14_1x2_n[] ;
extern const uint8_t u8x8_font_7x14B_1x2_f[] ;
extern const uint8_t u8x8_font_7x14B_1x2_r[] ;
extern const uint8_t u8x8_font_7x14B_1x2_n[] ;
extern const uint8_t
    u8x8_font_open_iconic_arrow_1x1[] ;
extern const uint8_t
    u8x8_font_open_iconic_check_1x1[] ;
extern const uint8_t
    u8x8_font_open_iconic_embedded_1x1[] ;
extern const uint8_t
    u8x8_font_open_iconic_play_1x1[] ;
extern const uint8_t
    u8x8_font_open_iconic_thing_1x1[] ;
extern const uint8_t
    u8x8_font_open_iconic_weather_1x1[] ;
extern const uint8_t
    u8x8_font_open_iconic_arrow_2x2[] ;
extern const uint8_t
    u8x8_font_open_iconic_check_2x2[] ;
extern const uint8_t
    u8x8_font_open_iconic_embedded_2x2[] ;
extern const uint8_t
    u8x8_font_open_iconic_play_2x2[] ;
extern const uint8_t
    u8x8_font_open_iconic_thing_2x2[] ;
extern const uint8_t
    u8x8_font_open_iconic_weather_2x2[] ;
extern const uint8_t
    u8x8_font_open_iconic_arrow_4x4[] ;
extern const uint8_t
    u8x8_font_open_iconic_check_4x4[] ;
extern const uint8_t
    u8x8_font_open_iconic_embedded_4x4[] ;
extern const uint8_t
    u8x8_font_open_iconic_play_4x4[] ;
extern const uint8_t
    u8x8_font_open_iconic_thing_4x4[] ;
extern const uint8_t
    u8x8_font_open_iconic_weather_4x4[] ;
extern const uint8_t
    u8x8_font_open_iconic_arrow_8x8[] ;
extern const uint8_t
    u8x8_font_open_iconic_check_8x8[] ;
extern const uint8_t
    u8x8_font_open_iconic_embedded_8x8[] ;
extern const uint8_t
    u8x8_font_open_iconic_play_8x8[] ;
extern const uint8_t
    u8x8_font_open_iconic_thing_8x8[] ;
extern const uint8_t
    u8x8_font_open_iconic_weather_8x8[] ;
extern const uint8_t u8x8_font_profont29_2x3_f[] ;
extern const uint8_t u8x8_font_profont29_2x3_r[] ;
extern const uint8_t u8x8_font_profont29_2x3_n[] ;
extern const uint8_t u8x8_font_artossans8_r[] ;
extern const uint8_t u8x8_font_artossans8_n[] ;
extern const uint8_t u8x8_font_artossans8_u[] ;
extern const uint8_t u8x8_font_artosserif8_r[] ;
extern const uint8_t u8x8_font_artosserif8_n[] ;
extern const uint8_t u8x8_font_artosserif8_u[] ;
extern const uint8_t
    u8x8_font_chroma48medium8_r[] ;
extern const uint8_t
    u8x8_font_chroma48medium8_n[] ;
extern const uint8_t
    u8x8_font_chroma48medium8_u[] ;
extern const uint8_t
    u8x8_font_saikyosansbold8_n[] ;
extern const uint8_t
    u8x8_font_saikyosansbold8_u[] ;
extern const uint8_t u8x8_font_torussansbold8_r[] ;
extern const uint8_t u8x8_font_torussansbold8_n[] ;
extern const uint8_t u8x8_font_torussansbold8_u[] ;
extern const uint8_t u8x8_font_victoriabold8_r[] ;
extern const uint8_t u8x8_font_victoriabold8_n[] ;
extern const uint8_t u8x8_font_victoriabold8_u[] ;
extern const uint8_t
    u8x8_font_victoriamedium8_r[] ;
extern const uint8_t
    u8x8_font_victoriamedium8_n[] ;
extern const uint8_t
    u8x8_font_victoriamedium8_u[] ;
extern const uint8_t u8x8_font_courB18_2x3_f[] ;
extern const uint8_t u8x8_font_courB18_2x3_r[] ;
extern const uint8_t u8x8_font_courB18_2x3_n[] ;
extern const uint8_t u8x8_font_courR18_2x3_f[] ;
extern const uint8_t u8x8_font_courR18_2x3_r[] ;
extern const uint8_t u8x8_font_courR18_2x3_n[] ;
extern const uint8_t u8x8_font_courB24_3x4_f[] ;
extern const uint8_t u8x8_font_courB24_3x4_r[] ;
extern const uint8_t u8x8_font_courB24_3x4_n[] ;
extern const uint8_t u8x8_font_courR24_3x4_f[] ;
extern const uint8_t u8x8_font_courR24_3x4_r[] ;
extern const uint8_t u8x8_font_courR24_3x4_n[] ;
extern const uint8_t u8x8_font_lucasarts_scumm_subtitle_o_2x2_f[] ;
extern const uint8_t u8x8_font_lucasarts_scumm_subtitle_o_2x2_r[] ;
extern const uint8_t u8x8_font_lucasarts_scumm_subtitle_o_2x2_n[] ;
extern const uint8_t u8x8_font_lucasarts_scumm_subtitle_r_2x2_f[] ;
extern const uint8_t u8x8_font_lucasarts_scumm_subtitle_r_2x2_r[] ;
extern const uint8_t u8x8_font_lucasarts_scumm_subtitle_r_2x2_n[] ;
extern const uint8_t u8x8_font_inr21_2x4_f[] ;
extern const uint8_t u8x8_font_inr21_2x4_r[] ;
extern const uint8_t u8x8_font_inr21_2x4_n[] ;
extern const uint8_t u8x8_font_inr33_3x6_f[] ;
extern const uint8_t u8x8_font_inr33_3x6_r[] ;
extern const uint8_t u8x8_font_inr33_3x6_n[] ;
extern const uint8_t u8x8_font_inr46_4x8_f[] ;
extern const uint8_t u8x8_font_inr46_4x8_r[] ;
extern const uint8_t u8x8_font_inr46_4x8_n[] ;
extern const uint8_t u8x8_font_inb21_2x4_f[] ;
extern const uint8_t u8x8_font_inb21_2x4_r[] ;
extern const uint8_t u8x8_font_inb21_2x4_n[] ;
extern const uint8_t u8x8_font_inb33_3x6_f[] ;
extern const uint8_t u8x8_font_inb33_3x6_r[] ;
extern const uint8_t u8x8_font_inb33_3x6_n[] ;
extern const uint8_t u8x8_font_inb46_4x8_f[] ;
extern const uint8_t u8x8_font_inb46_4x8_r[] ;
extern const uint8_t u8x8_font_inb46_4x8_n[] ;
extern const uint8_t u8x8_font_pressstart2p_f[] ;
extern const uint8_t u8x8_font_pressstart2p_r[] ;
extern const uint8_t u8x8_font_pressstart2p_n[] ;
extern const uint8_t u8x8_font_pressstart2p_u[] ;
extern const uint8_t u8x8_font_pcsenior_f[] ;
extern const uint8_t u8x8_font_pcsenior_r[] ;
extern const uint8_t u8x8_font_pcsenior_n[] ;
extern const uint8_t u8x8_font_pcsenior_u[] ;
extern const uint8_t
    u8x8_font_pxplusibmcgathin_f[] ;
extern const uint8_t
    u8x8_font_pxplusibmcgathin_r[] ;
extern const uint8_t
    u8x8_font_pxplusibmcgathin_n[] ;
extern const uint8_t
    u8x8_font_pxplusibmcgathin_u[] ;
extern const uint8_t u8x8_font_pxplusibmcga_f[] ;
extern const uint8_t u8x8_font_pxplusibmcga_r[] ;
extern const uint8_t u8x8_font_pxplusibmcga_n[] ;
extern const uint8_t u8x8_font_pxplusibmcga_u[] ;
extern const uint8_t
    u8x8_font_pxplustandynewtv_f[] ;
extern const uint8_t
    u8x8_font_pxplustandynewtv_r[] ;
extern const uint8_t
    u8x8_font_pxplustandynewtv_n[] ;
extern const uint8_t
    u8x8_font_pxplustandynewtv_u[] ;
extern const uint8_t
    u8x8_font_px437wyse700a_2x2_f[] ;
extern const uint8_t
    u8x8_font_px437wyse700a_2x2_r[] ;
extern const uint8_t
    u8x8_font_px437wyse700a_2x2_n[] ;
extern const uint8_t
    u8x8_font_px437wyse700b_2x2_f[] ;
extern const uint8_t
    u8x8_font_px437wyse700b_2x2_r[] ;
extern const uint8_t
    u8x8_font_px437wyse700b_2x2_n[] ;
#define U8G2_WITH_HVLINE_SPEED_OPTIMIZATION 
#define U8G2_WITH_INTERSECTION 
#define U8G2_WITH_CLIP_WINDOW_SUPPORT 
#define U8G2_WITH_FONT_ROTATION 
#define U8G2_WITH_UNICODE 
#define U8G2_NOINLINE __attribute__((noinline))
#define U8G2_FONT_SECTION(name) U8X8_FONT_SECTION(name)
#define U8G2_USE_LARGE_FONTS 
typedef uint8_t u8g2_uint_t;
typedef int8_t u8g2_int_t;
typedef int16_t u8g2_long_t;
typedef struct u8g2_struct u8g2_t;
typedef struct u8g2_cb_struct u8g2_cb_t;
typedef void (*u8g2_update_dimension_cb)(u8g2_t* u8g2);
typedef void (*u8g2_update_page_win_cb)(u8g2_t* u8g2);
typedef void (
    *u8g2_draw_l90_cb)(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);
typedef void (*u8g2_draw_ll_hvline_cb)(
    u8g2_t* u8g2,
    u8g2_uint_t x,
    u8g2_uint_t y,
    u8g2_uint_t len,
    uint8_t dir);
typedef uint8_t (*u8g2_get_kerning_cb)(u8g2_t* u8g2, uint16_t e1, uint16_t e2);
struct _u8g2_font_info_t {
    uint8_t glyph_cnt;
    uint8_t bbx_mode;
    uint8_t bits_per_0;
    uint8_t bits_per_1;
    uint8_t bits_per_char_width;
    uint8_t bits_per_char_height;
    uint8_t bits_per_char_x;
    uint8_t bits_per_char_y;
    uint8_t bits_per_delta_x;
    int8_t max_char_width;
    int8_t
        max_char_height;
    int8_t x_offset;
    int8_t y_offset;
    int8_t ascent_A;
    int8_t descent_g;
    int8_t ascent_para;
    int8_t descent_para;
    uint16_t start_pos_upper_A;
    uint16_t start_pos_lower_a;
    uint16_t start_pos_unicode;
};
typedef struct _u8g2_font_info_t u8g2_font_info_t;
struct _u8g2_font_decode_t {
    const uint8_t* decode_ptr;
    u8g2_uint_t target_x;
    u8g2_uint_t target_y;
    int8_t x;
    int8_t y;
    int8_t glyph_width;
    int8_t glyph_height;
    uint8_t decode_bit_pos;
    uint8_t is_transparent;
    uint8_t fg_color;
    uint8_t bg_color;
    uint8_t dir;
};
typedef struct _u8g2_font_decode_t u8g2_font_decode_t;
struct _u8g2_kerning_t {
    uint16_t first_table_cnt;
    uint16_t second_table_cnt;
    const uint16_t* first_encoding_table;
    const uint16_t* index_to_second_table;
    const uint16_t* second_encoding_table;
    const uint8_t* kerning_values;
};
typedef struct _u8g2_kerning_t u8g2_kerning_t;
struct u8g2_cb_struct {
    u8g2_update_dimension_cb update_dimension;
    u8g2_update_page_win_cb update_page_win;
    u8g2_draw_l90_cb draw_l90;
};
typedef u8g2_uint_t (*u8g2_font_calc_vref_fnptr)(u8g2_t* u8g2);
struct u8g2_struct {
    u8x8_t u8x8;
    u8g2_draw_ll_hvline_cb ll_hvline;
    const u8g2_cb_t* cb;
    uint8_t*
        tile_buf_ptr;
    uint8_t tile_buf_height;
    uint8_t tile_curr_row;
    u8g2_uint_t pixel_buf_width;
    u8g2_uint_t pixel_buf_height;
    u8g2_uint_t pixel_curr_row;
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1;
    u8g2_uint_t width;
    u8g2_uint_t height;
    u8g2_uint_t user_x0;
    u8g2_uint_t user_x1;
    u8g2_uint_t user_y0;
    u8g2_uint_t user_y1;
    u8g2_uint_t clip_x0;
    u8g2_uint_t clip_x1;
    u8g2_uint_t clip_y0;
    u8g2_uint_t clip_y1;
    const uint8_t* font;
    u8g2_font_calc_vref_fnptr font_calc_vref;
    u8g2_font_decode_t font_decode;
    u8g2_font_info_t font_info;
    uint8_t is_page_clip_window_intersection;
    uint8_t font_height_mode;
    int8_t font_ref_ascent;
    int8_t font_ref_descent;
    int8_t glyph_x_offset;
    uint8_t bitmap_transparency;
    uint8_t draw_color;
    uint8_t
        is_auto_page_clear;
};
#define u8g2_GetU8x8(u8g2) ((u8x8_t*)(u8g2))
#define u8g2_SetAutoPageClear(u8g2,mode) ((u8g2)->is_auto_page_clear = (mode))
#define u8g2_SetupDisplay(u8g2,display_cb,cad_cb,byte_cb,gpio_and_delay_cb) u8x8_Setup(u8g2_GetU8x8(u8g2), (display_cb), (cad_cb), (byte_cb), (gpio_and_delay_cb))
#define u8g2_InitDisplay(u8g2) u8x8_InitDisplay(u8g2_GetU8x8(u8g2))
#define u8g2_SetPowerSave(u8g2,is_enable) u8x8_SetPowerSave(u8g2_GetU8x8(u8g2), (is_enable))
#define u8g2_SetFlipMode(u8g2,mode) u8x8_SetFlipMode(u8g2_GetU8x8(u8g2), (mode))
#define u8g2_SetContrast(u8g2,value) u8x8_SetContrast(u8g2_GetU8x8(u8g2), (value))
void u8g2_ClearDisplay(u8g2_t* u8g2);
#define u8g2_GetDisplayHeight(u8g2) ((u8g2)->height)
#define u8g2_GetDisplayWidth(u8g2) ((u8g2)->width)
#define u8g2_GetDrawColor(u8g2) ((u8g2)->draw_color)
#define u8g2_SetI2CAddress(u8g2,address) ((u8g2_GetU8x8(u8g2))->i2c_address = (address))
#define u8g2_GetI2CAddress(u8g2) u8x8_GetI2CAddress(u8g2_GetU8x8(u8g2))
void u8g2_draw_l90_r0(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);
extern const u8g2_cb_t u8g2_cb_r0;
extern const u8g2_cb_t u8g2_cb_r1;
extern const u8g2_cb_t u8g2_cb_r2;
extern const u8g2_cb_t u8g2_cb_r3;
extern const u8g2_cb_t u8g2_cb_mirror;
#define U8G2_R0 (&u8g2_cb_r0)
#define U8G2_R1 (&u8g2_cb_r1)
#define U8G2_R2 (&u8g2_cb_r2)
#define U8G2_R3 (&u8g2_cb_r3)
#define U8G2_MIRROR (&u8g2_cb_mirror)
void u8g2_SetMaxClipWindow(u8g2_t* u8g2);
void u8g2_SetClipWindow(
    u8g2_t* u8g2,
    u8g2_uint_t clip_x0,
    u8g2_uint_t clip_y0,
    u8g2_uint_t clip_x1,
    u8g2_uint_t clip_y1);
void u8g2_SetupBuffer(
    u8g2_t* u8g2,
    uint8_t* buf,
    uint8_t tile_buf_height,
    u8g2_draw_ll_hvline_cb ll_hvline_cb,
    const u8g2_cb_t* u8g2_cb);
void u8g2_SetDisplayRotation(u8g2_t* u8g2, const u8g2_cb_t* u8g2_cb);
void u8g2_SendF(u8g2_t* u8g2, const char* fmt, ...);
void u8g2_Setup_null(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
uint8_t* u8g2_m_16_4_1(uint8_t* page_cnt);
uint8_t* u8g2_m_16_4_2(uint8_t* page_cnt);
uint8_t* u8g2_m_16_4_f(uint8_t* page_cnt);
uint8_t* u8g2_m_16_8_1(uint8_t* page_cnt);
uint8_t* u8g2_m_16_8_2(uint8_t* page_cnt);
uint8_t* u8g2_m_16_8_f(uint8_t* page_cnt);
uint8_t* u8g2_m_9_5_1(uint8_t* page_cnt);
uint8_t* u8g2_m_9_5_2(uint8_t* page_cnt);
uint8_t* u8g2_m_9_5_f(uint8_t* page_cnt);
uint8_t* u8g2_m_8_4_1(uint8_t* page_cnt);
uint8_t* u8g2_m_8_4_2(uint8_t* page_cnt);
uint8_t* u8g2_m_8_4_f(uint8_t* page_cnt);
uint8_t* u8g2_m_8_16_1(uint8_t* page_cnt);
uint8_t* u8g2_m_8_16_2(uint8_t* page_cnt);
uint8_t* u8g2_m_8_16_f(uint8_t* page_cnt);
uint8_t* u8g2_m_12_12_1(uint8_t* page_cnt);
uint8_t* u8g2_m_12_12_2(uint8_t* page_cnt);
uint8_t* u8g2_m_12_12_f(uint8_t* page_cnt);
uint8_t* u8g2_m_16_16_1(uint8_t* page_cnt);
uint8_t* u8g2_m_16_16_2(uint8_t* page_cnt);
uint8_t* u8g2_m_16_16_f(uint8_t* page_cnt);
uint8_t* u8g2_m_20_20_1(uint8_t* page_cnt);
uint8_t* u8g2_m_20_20_2(uint8_t* page_cnt);
uint8_t* u8g2_m_20_20_f(uint8_t* page_cnt);
uint8_t* u8g2_m_32_8_1(uint8_t* page_cnt);
uint8_t* u8g2_m_32_8_2(uint8_t* page_cnt);
uint8_t* u8g2_m_32_8_f(uint8_t* page_cnt);
uint8_t* u8g2_m_8_6_1(uint8_t* page_cnt);
uint8_t* u8g2_m_8_6_2(uint8_t* page_cnt);
uint8_t* u8g2_m_8_6_f(uint8_t* page_cnt);
uint8_t* u8g2_m_6_8_1(uint8_t* page_cnt);
uint8_t* u8g2_m_6_8_2(uint8_t* page_cnt);
uint8_t* u8g2_m_6_8_f(uint8_t* page_cnt);
uint8_t* u8g2_m_12_2_1(uint8_t* page_cnt);
uint8_t* u8g2_m_12_2_2(uint8_t* page_cnt);
uint8_t* u8g2_m_12_2_f(uint8_t* page_cnt);
uint8_t* u8g2_m_16_12_1(uint8_t* page_cnt);
uint8_t* u8g2_m_16_12_2(uint8_t* page_cnt);
uint8_t* u8g2_m_16_12_f(uint8_t* page_cnt);
uint8_t* u8g2_m_32_4_1(uint8_t* page_cnt);
uint8_t* u8g2_m_32_4_2(uint8_t* page_cnt);
uint8_t* u8g2_m_32_4_f(uint8_t* page_cnt);
uint8_t* u8g2_m_12_8_1(uint8_t* page_cnt);
uint8_t* u8g2_m_12_8_2(uint8_t* page_cnt);
uint8_t* u8g2_m_12_8_f(uint8_t* page_cnt);
uint8_t* u8g2_m_24_4_1(uint8_t* page_cnt);
uint8_t* u8g2_m_24_4_2(uint8_t* page_cnt);
uint8_t* u8g2_m_24_4_f(uint8_t* page_cnt);
uint8_t* u8g2_m_50_30_1(uint8_t* page_cnt);
uint8_t* u8g2_m_50_30_2(uint8_t* page_cnt);
uint8_t* u8g2_m_50_30_f(uint8_t* page_cnt);
uint8_t* u8g2_m_18_21_1(uint8_t* page_cnt);
uint8_t* u8g2_m_18_21_2(uint8_t* page_cnt);
uint8_t* u8g2_m_18_21_f(uint8_t* page_cnt);
uint8_t* u8g2_m_13_8_1(uint8_t* page_cnt);
uint8_t* u8g2_m_13_8_2(uint8_t* page_cnt);
uint8_t* u8g2_m_13_8_f(uint8_t* page_cnt);
uint8_t* u8g2_m_11_6_1(uint8_t* page_cnt);
uint8_t* u8g2_m_11_6_2(uint8_t* page_cnt);
uint8_t* u8g2_m_11_6_f(uint8_t* page_cnt);
uint8_t* u8g2_m_12_9_1(uint8_t* page_cnt);
uint8_t* u8g2_m_12_9_2(uint8_t* page_cnt);
uint8_t* u8g2_m_12_9_f(uint8_t* page_cnt);
uint8_t* u8g2_m_24_8_1(uint8_t* page_cnt);
uint8_t* u8g2_m_24_8_2(uint8_t* page_cnt);
uint8_t* u8g2_m_24_8_f(uint8_t* page_cnt);
uint8_t* u8g2_m_30_8_1(uint8_t* page_cnt);
uint8_t* u8g2_m_30_8_2(uint8_t* page_cnt);
uint8_t* u8g2_m_30_8_f(uint8_t* page_cnt);
uint8_t* u8g2_m_30_15_1(uint8_t* page_cnt);
uint8_t* u8g2_m_30_15_2(uint8_t* page_cnt);
uint8_t* u8g2_m_30_15_f(uint8_t* page_cnt);
uint8_t* u8g2_m_30_16_1(uint8_t* page_cnt);
uint8_t* u8g2_m_30_16_2(uint8_t* page_cnt);
uint8_t* u8g2_m_30_16_f(uint8_t* page_cnt);
uint8_t* u8g2_m_20_16_1(uint8_t* page_cnt);
uint8_t* u8g2_m_20_16_2(uint8_t* page_cnt);
uint8_t* u8g2_m_20_16_f(uint8_t* page_cnt);
uint8_t* u8g2_m_20_13_1(uint8_t* page_cnt);
uint8_t* u8g2_m_20_13_2(uint8_t* page_cnt);
uint8_t* u8g2_m_20_13_f(uint8_t* page_cnt);
uint8_t* u8g2_m_30_20_1(uint8_t* page_cnt);
uint8_t* u8g2_m_30_20_2(uint8_t* page_cnt);
uint8_t* u8g2_m_30_20_f(uint8_t* page_cnt);
uint8_t* u8g2_m_40_30_1(uint8_t* page_cnt);
uint8_t* u8g2_m_40_30_2(uint8_t* page_cnt);
uint8_t* u8g2_m_40_30_f(uint8_t* page_cnt);
uint8_t* u8g2_m_17_4_1(uint8_t* page_cnt);
uint8_t* u8g2_m_17_4_2(uint8_t* page_cnt);
uint8_t* u8g2_m_17_4_f(uint8_t* page_cnt);
uint8_t* u8g2_m_17_8_1(uint8_t* page_cnt);
uint8_t* u8g2_m_17_8_2(uint8_t* page_cnt);
uint8_t* u8g2_m_17_8_f(uint8_t* page_cnt);
uint8_t* u8g2_m_48_17_1(uint8_t* page_cnt);
uint8_t* u8g2_m_48_17_2(uint8_t* page_cnt);
uint8_t* u8g2_m_48_17_f(uint8_t* page_cnt);
uint8_t* u8g2_m_32_16_1(uint8_t* page_cnt);
uint8_t* u8g2_m_32_16_2(uint8_t* page_cnt);
uint8_t* u8g2_m_32_16_f(uint8_t* page_cnt);
uint8_t* u8g2_m_32_20_1(uint8_t* page_cnt);
uint8_t* u8g2_m_32_20_2(uint8_t* page_cnt);
uint8_t* u8g2_m_32_20_f(uint8_t* page_cnt);
uint8_t* u8g2_m_22_13_1(uint8_t* page_cnt);
uint8_t* u8g2_m_22_13_2(uint8_t* page_cnt);
uint8_t* u8g2_m_22_13_f(uint8_t* page_cnt);
uint8_t* u8g2_m_24_12_1(uint8_t* page_cnt);
uint8_t* u8g2_m_24_12_2(uint8_t* page_cnt);
uint8_t* u8g2_m_24_12_f(uint8_t* page_cnt);
uint8_t* u8g2_m_20_10_1(uint8_t* page_cnt);
uint8_t* u8g2_m_20_10_2(uint8_t* page_cnt);
uint8_t* u8g2_m_20_10_f(uint8_t* page_cnt);
uint8_t* u8g2_m_22_9_1(uint8_t* page_cnt);
uint8_t* u8g2_m_22_9_2(uint8_t* page_cnt);
uint8_t* u8g2_m_22_9_f(uint8_t* page_cnt);
uint8_t* u8g2_m_25_25_1(uint8_t* page_cnt);
uint8_t* u8g2_m_25_25_2(uint8_t* page_cnt);
uint8_t* u8g2_m_25_25_f(uint8_t* page_cnt);
uint8_t* u8g2_m_37_16_1(uint8_t* page_cnt);
uint8_t* u8g2_m_37_16_2(uint8_t* page_cnt);
uint8_t* u8g2_m_37_16_f(uint8_t* page_cnt);
uint8_t* u8g2_m_8_1_1(uint8_t* page_cnt);
uint8_t* u8g2_m_8_1_2(uint8_t* page_cnt);
uint8_t* u8g2_m_8_1_f(uint8_t* page_cnt);
uint8_t* u8g2_m_4_1_1(uint8_t* page_cnt);
uint8_t* u8g2_m_4_1_2(uint8_t* page_cnt);
uint8_t* u8g2_m_4_1_f(uint8_t* page_cnt);
uint8_t* u8g2_m_1_1_1(uint8_t* page_cnt);
uint8_t* u8g2_m_1_1_2(uint8_t* page_cnt);
uint8_t* u8g2_m_1_1_f(uint8_t* page_cnt);
uint8_t* u8g2_m_48_30_1(uint8_t* page_cnt);
uint8_t* u8g2_m_48_30_2(uint8_t* page_cnt);
uint8_t* u8g2_m_48_30_f(uint8_t* page_cnt);
void u8g2_Setup_ssd1305_128x32_noname_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_128x32_adafruit_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_128x32_noname_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_128x32_adafruit_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_128x32_noname_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_128x32_adafruit_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_i2c_128x32_noname_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_i2c_128x32_adafruit_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_i2c_128x32_noname_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_i2c_128x32_adafruit_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_i2c_128x32_noname_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_i2c_128x32_adafruit_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_128x64_adafruit_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_128x64_adafruit_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_128x64_adafruit_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_i2c_128x64_adafruit_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_i2c_128x64_adafruit_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1305_i2c_128x64_adafruit_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x64_noname_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x64_vcomh0_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x64_alt0_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x64_noname_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x64_vcomh0_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x64_alt0_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x64_noname_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x64_vcomh0_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x64_alt0_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x64_noname_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x64_vcomh0_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x64_alt0_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x64_noname_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x64_vcomh0_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x64_alt0_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x64_vcomh0_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x64_alt0_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_72x40_er_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_72x40_er_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_72x40_er_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_72x40_er_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_72x40_er_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_72x40_er_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_128x64_noname_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_128x64_vcomh0_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_128x64_winstar_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_128x64_noname_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_128x64_vcomh0_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_128x64_winstar_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_128x64_noname_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_128x64_vcomh0_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_128x64_winstar_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_128x64_noname_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_128x64_vcomh0_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_128x64_winstar_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_128x64_noname_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_128x64_vcomh0_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_128x64_winstar_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_128x64_noname_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_128x64_vcomh0_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_128x64_winstar_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_72x40_wise_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_72x40_wise_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_72x40_wise_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_72x40_wise_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_72x40_wise_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_72x40_wise_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_64x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_64x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_64x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_64x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_64x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1106_i2c_64x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_64x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_64x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_64x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_64x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_64x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_64x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_seeed_96x96_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_seeed_96x96_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_seeed_96x96_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_seeed_96x96_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_seeed_96x96_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_seeed_96x96_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_128x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_pimoroni_128x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_seeed_128x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_128x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_pimoroni_128x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_seeed_128x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_128x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_pimoroni_128x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_seeed_128x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_128x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_pimoroni_128x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_seeed_128x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_128x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_pimoroni_128x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_seeed_128x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_128x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_pimoroni_128x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1107_i2c_seeed_128x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1108_160x160_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1108_160x160_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1108_160x160_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1108_i2c_160x160_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1108_i2c_160x160_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1108_i2c_160x160_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1122_256x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1122_256x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1122_256x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1122_i2c_256x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1122_i2c_256x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sh1122_i2c_256x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x32_univision_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x32_winstar_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x32_univision_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x32_winstar_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x32_univision_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_128x32_winstar_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x32_univision_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x32_winstar_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x32_univision_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x32_winstar_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x32_univision_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_128x32_winstar_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_64x48_er_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_64x48_er_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_64x48_er_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_64x48_er_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_64x48_er_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_64x48_er_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_48x64_winstar_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_48x64_winstar_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_48x64_winstar_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_48x64_winstar_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_48x64_winstar_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_48x64_winstar_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_64x32_noname_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_64x32_1f_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_64x32_noname_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_64x32_1f_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_64x32_noname_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_64x32_1f_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_64x32_noname_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_64x32_1f_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_64x32_noname_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_64x32_1f_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_64x32_noname_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_64x32_1f_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_96x16_er_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_96x16_er_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_96x16_er_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_96x16_er_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_96x16_er_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1306_i2c_96x16_er_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1309_128x64_noname2_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1309_128x64_noname2_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1309_128x64_noname2_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1309_i2c_128x64_noname2_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1309_i2c_128x64_noname2_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1309_i2c_128x64_noname2_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1309_128x64_noname0_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1309_128x64_noname0_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1309_128x64_noname0_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1309_i2c_128x64_noname0_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1309_i2c_128x64_noname0_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1309_i2c_128x64_noname0_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1316_128x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1316_128x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1316_128x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1316_i2c_128x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1316_i2c_128x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1316_i2c_128x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1317_96x96_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1317_96x96_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1317_96x96_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1317_i2c_96x96_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1317_i2c_96x96_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1317_i2c_96x96_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1318_128x96_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1318_128x96_xcp_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1318_128x96_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1318_128x96_xcp_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1318_128x96_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1318_128x96_xcp_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1318_i2c_128x96_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1318_i2c_128x96_xcp_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1318_i2c_128x96_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1318_i2c_128x96_xcp_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1318_i2c_128x96_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1318_i2c_128x96_xcp_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1325_nhd_128x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1325_nhd_128x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1325_nhd_128x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1325_i2c_nhd_128x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1325_i2c_nhd_128x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1325_i2c_nhd_128x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd0323_os128064_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd0323_os128064_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd0323_os128064_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd0323_i2c_os128064_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd0323_i2c_os128064_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd0323_i2c_os128064_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1326_er_256x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1326_er_256x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1326_er_256x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1326_i2c_er_256x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1326_i2c_er_256x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1326_i2c_er_256x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_ws_96x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_ws_96x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_ws_96x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_ws_96x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_ws_96x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_ws_96x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_seeed_96x96_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_seeed_96x96_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_seeed_96x96_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_seeed_96x96_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_seeed_96x96_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_seeed_96x96_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_ea_w128128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_midas_128x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_ws_128x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_ea_w128128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_midas_128x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_ws_128x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_ea_w128128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_midas_128x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_ws_128x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_ea_w128128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_midas_128x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_ws_128x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_ea_w128128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_midas_128x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_ws_128x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_ea_w128128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_midas_128x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_ws_128x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_visionox_128x96_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_visionox_128x96_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_visionox_128x96_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_visionox_128x96_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_visionox_128x96_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1327_i2c_visionox_128x96_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1329_128x96_noname_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1329_128x96_noname_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1329_128x96_noname_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ld7032_60x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ld7032_60x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ld7032_60x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ld7032_i2c_60x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ld7032_i2c_60x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ld7032_i2c_60x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_p_192x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_p_192x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_p_192x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_192x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_192x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_192x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_s_192x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_s_192x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_s_192x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_p_128x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_p_128x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_p_128x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_128x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_128x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_128x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_s_128x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_s_128x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7920_s_128x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ls013b7dh03_128x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ls013b7dh03_128x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ls013b7dh03_128x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ls027b7dh01_400x240_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ls027b7dh01_400x240_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ls027b7dh01_400x240_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ls013b7dh05_144x168_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ls013b7dh05_144x168_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ls013b7dh05_144x168_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1701_ea_dogs102_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1701_ea_dogs102_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1701_ea_dogs102_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1701_mini12864_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1701_mini12864_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1701_mini12864_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_pcd8544_84x48_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_pcd8544_84x48_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_pcd8544_84x48_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_pcf8812_96x65_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_pcf8812_96x65_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_pcf8812_96x65_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_hx1230_96x68_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_hx1230_96x68_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_hx1230_96x68_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1604_jlx19264_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1604_jlx19264_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1604_jlx19264_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1604_i2c_jlx19264_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1604_i2c_jlx19264_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1604_i2c_jlx19264_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_erc24064_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_erc24064_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_erc24064_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_i2c_erc24064_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_i2c_erc24064_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_i2c_erc24064_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_erc240120_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_erc240120_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_erc240120_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_i2c_erc240120_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_i2c_erc240120_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_i2c_erc240120_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_240x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_240x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_240x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_i2c_240x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_i2c_240x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1608_i2c_240x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1638_160x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1638_160x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1638_160x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1610_ea_dogxl160_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1610_ea_dogxl160_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1610_ea_dogxl160_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1610_i2c_ea_dogxl160_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1610_i2c_ea_dogxl160_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1610_i2c_ea_dogxl160_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_ea_dogm240_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_ea_dogm240_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_ea_dogm240_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_i2c_ea_dogm240_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_i2c_ea_dogm240_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_i2c_ea_dogm240_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_ea_dogxl240_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_ea_dogxl240_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_ea_dogxl240_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_i2c_ea_dogxl240_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_i2c_ea_dogxl240_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_i2c_ea_dogxl240_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_ew50850_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_ew50850_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_ew50850_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_i2c_ew50850_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_i2c_ew50850_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_i2c_ew50850_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_cg160160_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_cg160160_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_cg160160_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_i2c_cg160160_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_i2c_cg160160_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1611_i2c_cg160160_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7511_avd_320x240_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7511_avd_320x240_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7511_avd_320x240_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7528_nhd_c160100_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7528_nhd_c160100_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7528_nhd_c160100_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7528_i2c_nhd_c160100_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7528_i2c_nhd_c160100_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7528_i2c_nhd_c160100_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_ea_dogm128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_lm6063_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_64128n_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_zolen_128x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_lm6059_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_lx12864_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_erc12864_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_erc12864_alt_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_nhd_c12864_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_jlx12864_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_ea_dogm128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_lm6063_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_64128n_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_zolen_128x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_lm6059_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_lx12864_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_erc12864_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_erc12864_alt_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_nhd_c12864_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_jlx12864_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_ea_dogm128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_lm6063_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_64128n_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_zolen_128x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_lm6059_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_lx12864_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_erc12864_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_nhd_c12864_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_jlx12864_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_nhd_c12832_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_nhd_c12832_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_nhd_c12832_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1601_128x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1601_128x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1601_128x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1601_i2c_128x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1601_i2c_128x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_uc1601_i2c_128x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_ea_dogm132_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_ea_dogm132_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7565_ea_dogm132_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_pi_132x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_pi_132x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_pi_132x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_jlx12864_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_enh_dg128064_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_enh_dg128064i_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_os12864_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_jlx12864_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_enh_dg128064_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_enh_dg128064i_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_os12864_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_jlx12864_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_enh_dg128064_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_enh_dg128064i_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_os12864_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_64x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_64x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_64x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_i2c_64x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_i2c_64x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7567_i2c_64x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7586s_s028hn118a_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7586s_s028hn118a_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7586s_s028hn118a_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7586s_erc240160_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7586s_erc240160_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7586s_erc240160_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7588_jlx12864_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7588_jlx12864_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7588_jlx12864_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7588_i2c_jlx12864_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7588_i2c_jlx12864_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st7588_i2c_jlx12864_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx256128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_wo256x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx256128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_wo256x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx256128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_wo256x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx256128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_wo256x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx256128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_wo256x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx256128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_wo256x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx256160_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx256160m_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx256160_alt_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx256160_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx256160m_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx256160_alt_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx256160_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx256160m_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx256160_alt_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx256160_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx256160m_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx256160_alt_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx256160_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx256160m_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx256160_alt_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx256160_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx256160m_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx256160_alt_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx240160_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx240160_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx240160_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx240160_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx240160_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx240160_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx25664_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx25664_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx25664_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx25664_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx25664_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx25664_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx172104_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx172104_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx172104_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx172104_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx172104_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx172104_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx19296_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx19296_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_jlx19296_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx19296_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx19296_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75256_i2c_jlx19296_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75320_jlx320240_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75320_jlx320240_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75320_jlx320240_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75320_i2c_jlx320240_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75320_i2c_jlx320240_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_st75320_i2c_jlx320240_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_nt7534_tg12864r_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_nt7534_tg12864r_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_nt7534_tg12864r_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ist3020_erc19264_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ist3020_erc19264_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ist3020_erc19264_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ist7920_128x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ist7920_128x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ist7920_128x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sbn1661_122x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sbn1661_122x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sbn1661_122x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sed1520_122x32_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sed1520_122x32_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sed1520_122x32_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ks0108_128x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ks0108_128x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ks0108_128x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ks0108_erm19264_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ks0108_erm19264_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ks0108_erm19264_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_lc7981_160x80_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_lc7981_160x80_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_lc7981_160x80_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_lc7981_160x160_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_lc7981_160x160_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_lc7981_160x160_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_lc7981_240x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_lc7981_240x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_lc7981_240x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_lc7981_240x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_lc7981_240x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_lc7981_240x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_240x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_240x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_240x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_240x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_240x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_240x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_256x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_256x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_256x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_128x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_128x64_alt_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_128x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_128x64_alt_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_128x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_128x64_alt_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_160x80_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_160x80_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_t6963_160x80_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1322_nhd_256x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1322_nhd_256x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1322_nhd_256x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1322_nhd_128x64_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1322_nhd_128x64_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1322_nhd_128x64_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1606_172x72_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1606_172x72_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1606_172x72_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1607_200x200_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1607_gd_200x200_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1607_ws_200x200_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1607_200x200_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1607_gd_200x200_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1607_ws_200x200_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1607_200x200_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1607_gd_200x200_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ssd1607_ws_200x200_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_il3820_296x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_il3820_v2_296x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_il3820_296x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_il3820_v2_296x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_il3820_296x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_il3820_v2_296x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sed1330_240x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sed1330_240x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_sed1330_240x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ra8835_nhd_240x128_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ra8835_nhd_240x128_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ra8835_nhd_240x128_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ra8835_320x240_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ra8835_320x240_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_ra8835_320x240_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_max7219_64x8_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_max7219_64x8_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_max7219_64x8_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_max7219_32x8_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_max7219_32x8_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_max7219_32x8_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_max7219_8x8_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_max7219_8x8_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_max7219_8x8_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_a2printer_384x240_1(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_a2printer_384x240_2(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_Setup_a2printer_384x240_f(
    u8g2_t* u8g2,
    const u8g2_cb_t* rotation,
    u8x8_msg_cb byte_cb,
    u8x8_msg_cb gpio_and_delay_cb);
void u8g2_SendBuffer(u8g2_t* u8g2);
void u8g2_ClearBuffer(u8g2_t* u8g2);
void u8g2_SetBufferCurrTileRow(u8g2_t* u8g2, uint8_t row) ;
void u8g2_FirstPage(u8g2_t* u8g2);
uint8_t u8g2_NextPage(u8g2_t* u8g2);
#define u8g2_GetBufferPtr(u8g2) ((u8g2)->tile_buf_ptr)
#define u8g2_GetBufferTileHeight(u8g2) ((u8g2)->tile_buf_height)
#define u8g2_GetBufferTileWidth(u8g2) (u8g2_GetU8x8(u8g2)->display_info->tile_width)
#define u8g2_GetPageCurrTileRow(u8g2) ((u8g2)->tile_curr_row)
#define u8g2_GetBufferCurrTileRow(u8g2) ((u8g2)->tile_curr_row)
void u8g2_UpdateDisplayArea(u8g2_t* u8g2, uint8_t tx, uint8_t ty, uint8_t tw, uint8_t th);
void u8g2_UpdateDisplay(u8g2_t* u8g2);
void u8g2_WriteBufferPBM(u8g2_t* u8g2, void (*out)(const char* s));
void u8g2_WriteBufferXBM(u8g2_t* u8g2, void (*out)(const char* s));
void u8g2_WriteBufferPBM2(u8g2_t* u8g2, void (*out)(const char* s));
void u8g2_WriteBufferXBM2(u8g2_t* u8g2, void (*out)(const char* s));
void u8g2_ll_hvline_vertical_top_lsb(
    u8g2_t* u8g2,
    u8g2_uint_t x,
    u8g2_uint_t y,
    u8g2_uint_t len,
    uint8_t dir);
void u8g2_ll_hvline_horizontal_right_lsb(
    u8g2_t* u8g2,
    u8g2_uint_t x,
    u8g2_uint_t y,
    u8g2_uint_t len,
    uint8_t dir);
void u8g2_DrawHVLine(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);
void u8g2_DrawHLine(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len);
void u8g2_DrawVLine(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len);
void u8g2_DrawPixel(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y);
void u8g2_SetDrawColor(u8g2_t* u8g2, uint8_t color)
    ;
void u8g2_SetBitmapMode(u8g2_t* u8g2, uint8_t is_transparent);
void u8g2_DrawHorizontalBitmap(
    u8g2_t* u8g2,
    u8g2_uint_t x,
    u8g2_uint_t y,
    u8g2_uint_t len,
    const uint8_t* b);
void u8g2_DrawBitmap(
    u8g2_t* u8g2,
    u8g2_uint_t x,
    u8g2_uint_t y,
    u8g2_uint_t cnt,
    u8g2_uint_t h,
    const uint8_t* bitmap);
void u8g2_DrawXBM(
    u8g2_t* u8g2,
    u8g2_uint_t x,
    u8g2_uint_t y,
    u8g2_uint_t w,
    u8g2_uint_t h,
    const uint8_t* bitmap);
void u8g2_DrawXBMP(
    u8g2_t* u8g2,
    u8g2_uint_t x,
    u8g2_uint_t y,
    u8g2_uint_t w,
    u8g2_uint_t h,
    const uint8_t* bitmap);
uint8_t u8g2_IsIntersection(
    u8g2_t* u8g2,
    u8g2_uint_t x0,
    u8g2_uint_t y0,
    u8g2_uint_t x1,
    u8g2_uint_t y1);
#define U8G2_DRAW_UPPER_RIGHT 0x01
#define U8G2_DRAW_UPPER_LEFT 0x02
#define U8G2_DRAW_LOWER_LEFT 0x04
#define U8G2_DRAW_LOWER_RIGHT 0x08
#define U8G2_DRAW_ALL (U8G2_DRAW_UPPER_RIGHT | U8G2_DRAW_UPPER_LEFT | U8G2_DRAW_LOWER_RIGHT | U8G2_DRAW_LOWER_LEFT)
void u8g2_DrawCircle(u8g2_t* u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option);
void u8g2_DrawDisc(u8g2_t* u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option);
void u8g2_DrawEllipse(
    u8g2_t* u8g2,
    u8g2_uint_t x0,
    u8g2_uint_t y0,
    u8g2_uint_t rx,
    u8g2_uint_t ry,
    uint8_t option);
void u8g2_DrawFilledEllipse(
    u8g2_t* u8g2,
    u8g2_uint_t x0,
    u8g2_uint_t y0,
    u8g2_uint_t rx,
    u8g2_uint_t ry,
    uint8_t option);
void u8g2_DrawLine(u8g2_t* u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2);
void u8g2_DrawBox(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h);
void u8g2_DrawFrame(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h);
void u8g2_DrawRBox(
    u8g2_t* u8g2,
    u8g2_uint_t x,
    u8g2_uint_t y,
    u8g2_uint_t w,
    u8g2_uint_t h,
    u8g2_uint_t r);
void u8g2_DrawRFrame(
    u8g2_t* u8g2,
    u8g2_uint_t x,
    u8g2_uint_t y,
    u8g2_uint_t w,
    u8g2_uint_t h,
    u8g2_uint_t r);
void u8g2_ClearPolygonXY(void);
void u8g2_AddPolygonXY(u8g2_t* u8g2, int16_t x, int16_t y);
void u8g2_DrawPolygon(u8g2_t* u8g2);
void u8g2_DrawTriangle(
    u8g2_t* u8g2,
    int16_t x0,
    int16_t y0,
    int16_t x1,
    int16_t y1,
    int16_t x2,
    int16_t y2);
uint8_t u8g2_GetKerning(u8g2_t* u8g2, u8g2_kerning_t* kerning, uint16_t e1, uint16_t e2);
uint8_t u8g2_GetKerningByTable(u8g2_t* u8g2, const uint16_t* kt, uint16_t e1, uint16_t e2);
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) ;
u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) ;
size_t u8g2_GetFontSize(const uint8_t* font_arg);
#define U8G2_FONT_HEIGHT_MODE_TEXT 0
#define U8G2_FONT_HEIGHT_MODE_XTEXT 1
#define U8G2_FONT_HEIGHT_MODE_ALL 2
void u8g2_SetFont(u8g2_t* u8g2, const uint8_t* font);
void u8g2_SetFontMode(u8g2_t* u8g2, uint8_t is_transparent);
uint8_t u8g2_IsGlyph(u8g2_t* u8g2, uint16_t requested_encoding);
int8_t u8g2_GetGlyphWidth(u8g2_t* u8g2, uint16_t requested_encoding);
u8g2_uint_t u8g2_DrawGlyph(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding);
int8_t u8g2_GetStrX(u8g2_t* u8g2, const char* s);
void u8g2_SetFontDirection(u8g2_t* u8g2, uint8_t dir);
u8g2_uint_t u8g2_DrawStr(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, const char* str);
u8g2_uint_t u8g2_DrawUTF8(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, const char* str);
u8g2_uint_t u8g2_DrawExtendedUTF8(
    u8g2_t* u8g2,
    u8g2_uint_t x,
    u8g2_uint_t y,
    uint8_t to_left,
    u8g2_kerning_t* kerning,
    const char* str);
u8g2_uint_t u8g2_DrawExtUTF8(
    u8g2_t* u8g2,
    u8g2_uint_t x,
    u8g2_uint_t y,
    uint8_t to_left,
    const uint16_t* kerning_table,
    const char* str);
#define u8g2_GetMaxCharHeight(u8g2) ((u8g2)->font_info.max_char_height)
#define u8g2_GetMaxCharWidth(u8g2) ((u8g2)->font_info.max_char_width)
#define u8g2_GetAscent(u8g2) ((u8g2)->font_ref_ascent)
#define u8g2_GetDescent(u8g2) ((u8g2)->font_ref_descent)
#define u8g2_GetFontAscent(u8g2) ((u8g2)->font_ref_ascent)
#define u8g2_GetFontDescent(u8g2) ((u8g2)->font_ref_descent)
uint8_t u8g2_IsAllValidUTF8(u8g2_t* u8g2, const char* str);
u8g2_long_t u8g2_GetStrWidth(u8g2_t* u8g2, const char* s);
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t* u8g2, const char* str);
void u8g2_SetFontPosBaseline(u8g2_t* u8g2);
void u8g2_SetFontPosBottom(u8g2_t* u8g2);
void u8g2_SetFontPosTop(u8g2_t* u8g2);
void u8g2_SetFontPosCenter(u8g2_t* u8g2);
void u8g2_SetFontRefHeightText(u8g2_t* u8g2);
void u8g2_SetFontRefHeightExtendedText(u8g2_t* u8g2);
void u8g2_SetFontRefHeightAll(u8g2_t* u8g2);
void u8g2_DrawLog(u8g2_t* u8g2, u8g2_uint_t x, u8g2_uint_t y, u8log_t* u8log);
void u8log_u8g2_cb(u8log_t* u8log);
void u8g2_DrawUTF8Line(
    u8g2_t* u8g2,
    u8g2_uint_t x,
    u8g2_uint_t y,
    u8g2_uint_t w,
    const char* s,
    uint8_t border_size,
    uint8_t is_invert);
u8g2_uint_t u8g2_DrawUTF8Lines(
    u8g2_t* u8g2,
    u8g2_uint_t x,
    u8g2_uint_t y,
    u8g2_uint_t w,
    u8g2_uint_t line_height,
    const char* s);
uint8_t u8g2_UserInterfaceSelectionList(
    u8g2_t* u8g2,
    const char* title,
    uint8_t start_pos,
    const char* sl);
uint8_t u8g2_UserInterfaceMessage(
    u8g2_t* u8g2,
    const char* title1,
    const char* title2,
    const char* title3,
    const char* buttons);
uint8_t u8g2_UserInterfaceInputValue(
    u8g2_t* u8g2,
    const char* title,
    const char* pre,
    uint8_t* value,
    uint8_t lo,
    uint8_t hi,
    uint8_t digits,
    const char* post);
void u8g2_SetupBuffer_SDL_128x64(u8g2_t* u8g2, const u8g2_cb_t* u8g2_cb);
void u8g2_SetupBuffer_SDL_128x64_4(u8g2_t* u8g2, const u8g2_cb_t* u8g2_cb);
void u8g2_SetupBuffer_SDL_128x64_1(u8g2_t* u8g2, const u8g2_cb_t* u8g2_cb);
void u8g2_SetupBuffer_TGA_DESC(u8g2_t* u8g2, const u8g2_cb_t* u8g2_cb);
void u8g2_SetupBuffer_TGA_LCD(u8g2_t* u8g2, const u8g2_cb_t* u8g2_cb);
void u8g2_SetupBitmap(
    u8g2_t* u8g2,
    const u8g2_cb_t* u8g2_cb,
    uint16_t pixel_width,
    uint16_t pixel_height);
void u8g2_SetupBuffer_Utf8(u8g2_t* u8g2, const u8g2_cb_t* u8g2_cb);
#define u8g2_u8toa u8x8_u8toa
#define u8g2_u16toa u8x8_u16toa
extern const uint8_t u8g2_font_u8glib_4_tf[] ;
extern const uint8_t u8g2_font_u8glib_4_tr[] ;
extern const uint8_t u8g2_font_u8glib_4_hf[] ;
extern const uint8_t u8g2_font_u8glib_4_hr[] ;
extern const uint8_t u8g2_font_m2icon_5_tf[] ;
extern const uint8_t u8g2_font_m2icon_7_tf[] ;
extern const uint8_t u8g2_font_m2icon_9_tf[] ;
extern const uint8_t u8g2_font_emoticons21_tr[] ;
extern const uint8_t u8g2_font_battery19_tn[] ;
extern const uint8_t u8g2_font_freedoomr10_tu[] ;
extern const uint8_t u8g2_font_freedoomr10_mu[] ;
extern const uint8_t u8g2_font_freedoomr25_tn[] ;
extern const uint8_t u8g2_font_freedoomr25_mn[] ;
extern const uint8_t
    u8g2_font_7Segments_26x42_mn[] ;
extern const uint8_t
    u8g2_font_amstrad_cpc_extended_8f[] ;
extern const uint8_t
    u8g2_font_amstrad_cpc_extended_8r[] ;
extern const uint8_t
    u8g2_font_amstrad_cpc_extended_8n[] ;
extern const uint8_t
    u8g2_font_amstrad_cpc_extended_8u[] ;
extern const uint8_t u8g2_font_cursor_tf[] ;
extern const uint8_t u8g2_font_cursor_tr[] ;
extern const uint8_t u8g2_font_micro_tr[] ;
extern const uint8_t u8g2_font_micro_tn[] ;
extern const uint8_t u8g2_font_micro_mr[] ;
extern const uint8_t u8g2_font_micro_mn[] ;
extern const uint8_t u8g2_font_4x6_tf[] ;
extern const uint8_t u8g2_font_4x6_tr[] ;
extern const uint8_t u8g2_font_4x6_tn[] ;
extern const uint8_t u8g2_font_4x6_mf[] ;
extern const uint8_t u8g2_font_4x6_mr[] ;
extern const uint8_t u8g2_font_4x6_mn[] ;
extern const uint8_t u8g2_font_4x6_t_cyrillic[] ;
extern const uint8_t u8g2_font_5x7_tf[] ;
extern const uint8_t u8g2_font_5x7_tr[] ;
extern const uint8_t u8g2_font_5x7_tn[] ;
extern const uint8_t u8g2_font_5x7_mf[] ;
extern const uint8_t u8g2_font_5x7_mr[] ;
extern const uint8_t u8g2_font_5x7_mn[] ;
extern const uint8_t u8g2_font_5x7_t_cyrillic[] ;
extern const uint8_t u8g2_font_5x8_tf[] ;
extern const uint8_t u8g2_font_5x8_tr[] ;
extern const uint8_t u8g2_font_5x8_tn[] ;
extern const uint8_t u8g2_font_5x8_mf[] ;
extern const uint8_t u8g2_font_5x8_mr[] ;
extern const uint8_t u8g2_font_5x8_mn[] ;
extern const uint8_t u8g2_font_5x8_t_cyrillic[] ;
extern const uint8_t u8g2_font_6x10_tf[] ;
extern const uint8_t u8g2_font_6x10_tr[] ;
extern const uint8_t u8g2_font_6x10_tn[] ;
extern const uint8_t u8g2_font_6x10_mf[] ;
extern const uint8_t u8g2_font_6x10_mr[] ;
extern const uint8_t u8g2_font_6x10_mn[] ;
extern const uint8_t u8g2_font_6x12_tf[] ;
extern const uint8_t u8g2_font_6x12_tr[] ;
extern const uint8_t u8g2_font_6x12_tn[] ;
extern const uint8_t u8g2_font_6x12_te[] ;
extern const uint8_t u8g2_font_6x12_mf[] ;
extern const uint8_t u8g2_font_6x12_mr[] ;
extern const uint8_t u8g2_font_6x12_mn[] ;
extern const uint8_t u8g2_font_6x12_me[] ;
extern const uint8_t u8g2_font_6x12_t_symbols[] ;
extern const uint8_t u8g2_font_6x12_m_symbols[] ;
extern const uint8_t u8g2_font_6x12_t_cyrillic[] ;
extern const uint8_t u8g2_font_6x13_tf[] ;
extern const uint8_t u8g2_font_6x13_tr[] ;
extern const uint8_t u8g2_font_6x13_tn[] ;
extern const uint8_t u8g2_font_6x13_te[] ;
extern const uint8_t u8g2_font_6x13_mf[] ;
extern const uint8_t u8g2_font_6x13_mr[] ;
extern const uint8_t u8g2_font_6x13_mn[] ;
extern const uint8_t u8g2_font_6x13_me[] ;
extern const uint8_t u8g2_font_6x13_t_hebrew[] ;
extern const uint8_t u8g2_font_6x13_t_cyrillic[] ;
extern const uint8_t u8g2_font_6x13B_tf[] ;
extern const uint8_t u8g2_font_6x13B_tr[] ;
extern const uint8_t u8g2_font_6x13B_tn[] ;
extern const uint8_t u8g2_font_6x13B_mf[] ;
extern const uint8_t u8g2_font_6x13B_mr[] ;
extern const uint8_t u8g2_font_6x13B_mn[] ;
extern const uint8_t u8g2_font_6x13B_t_hebrew[] ;
extern const uint8_t u8g2_font_6x13B_t_cyrillic[] ;
extern const uint8_t u8g2_font_6x13O_tf[] ;
extern const uint8_t u8g2_font_6x13O_tr[] ;
extern const uint8_t u8g2_font_6x13O_tn[] ;
extern const uint8_t u8g2_font_6x13O_mf[] ;
extern const uint8_t u8g2_font_6x13O_mr[] ;
extern const uint8_t u8g2_font_6x13O_mn[] ;
extern const uint8_t u8g2_font_7x13_tf[] ;
extern const uint8_t u8g2_font_7x13_tr[] ;
extern const uint8_t u8g2_font_7x13_tn[] ;
extern const uint8_t u8g2_font_7x13_te[] ;
extern const uint8_t u8g2_font_7x13_mf[] ;
extern const uint8_t u8g2_font_7x13_mr[] ;
extern const uint8_t u8g2_font_7x13_mn[] ;
extern const uint8_t u8g2_font_7x13_me[] ;
extern const uint8_t u8g2_font_7x13_t_symbols[] ;
extern const uint8_t u8g2_font_7x13_m_symbols[] ;
extern const uint8_t u8g2_font_7x13_t_cyrillic[] ;
extern const uint8_t u8g2_font_7x13B_tf[] ;
extern const uint8_t u8g2_font_7x13B_tr[] ;
extern const uint8_t u8g2_font_7x13B_tn[] ;
extern const uint8_t u8g2_font_7x13B_mf[] ;
extern const uint8_t u8g2_font_7x13B_mr[] ;
extern const uint8_t u8g2_font_7x13B_mn[] ;
extern const uint8_t u8g2_font_7x13O_tf[] ;
extern const uint8_t u8g2_font_7x13O_tr[] ;
extern const uint8_t u8g2_font_7x13O_tn[] ;
extern const uint8_t u8g2_font_7x13O_mf[] ;
extern const uint8_t u8g2_font_7x13O_mr[] ;
extern const uint8_t u8g2_font_7x13O_mn[] ;
extern const uint8_t u8g2_font_7x14_tf[] ;
extern const uint8_t u8g2_font_7x14_tr[] ;
extern const uint8_t u8g2_font_7x14_tn[] ;
extern const uint8_t u8g2_font_7x14_mf[] ;
extern const uint8_t u8g2_font_7x14_mr[] ;
extern const uint8_t u8g2_font_7x14_mn[] ;
extern const uint8_t u8g2_font_7x14B_tf[] ;
extern const uint8_t u8g2_font_7x14B_tr[] ;
extern const uint8_t u8g2_font_7x14B_tn[] ;
extern const uint8_t u8g2_font_7x14B_mf[] ;
extern const uint8_t u8g2_font_7x14B_mr[] ;
extern const uint8_t u8g2_font_7x14B_mn[] ;
extern const uint8_t u8g2_font_8x13_tf[] ;
extern const uint8_t u8g2_font_8x13_tr[] ;
extern const uint8_t u8g2_font_8x13_tn[] ;
extern const uint8_t u8g2_font_8x13_te[] ;
extern const uint8_t u8g2_font_8x13_mf[] ;
extern const uint8_t u8g2_font_8x13_mr[] ;
extern const uint8_t u8g2_font_8x13_mn[] ;
extern const uint8_t u8g2_font_8x13_me[] ;
extern const uint8_t u8g2_font_8x13_t_symbols[] ;
extern const uint8_t u8g2_font_8x13_m_symbols[] ;
extern const uint8_t u8g2_font_8x13_t_cyrillic[] ;
extern const uint8_t u8g2_font_8x13B_tf[] ;
extern const uint8_t u8g2_font_8x13B_tr[] ;
extern const uint8_t u8g2_font_8x13B_tn[] ;
extern const uint8_t u8g2_font_8x13B_mf[] ;
extern const uint8_t u8g2_font_8x13B_mr[] ;
extern const uint8_t u8g2_font_8x13B_mn[] ;
extern const uint8_t u8g2_font_8x13O_tf[] ;
extern const uint8_t u8g2_font_8x13O_tr[] ;
extern const uint8_t u8g2_font_8x13O_tn[] ;
extern const uint8_t u8g2_font_8x13O_mf[] ;
extern const uint8_t u8g2_font_8x13O_mr[] ;
extern const uint8_t u8g2_font_8x13O_mn[] ;
extern const uint8_t u8g2_font_9x15_tf[] ;
extern const uint8_t u8g2_font_9x15_tr[] ;
extern const uint8_t u8g2_font_9x15_tn[] ;
extern const uint8_t u8g2_font_9x15_te[] ;
extern const uint8_t u8g2_font_9x15_mf[] ;
extern const uint8_t u8g2_font_9x15_mr[] ;
extern const uint8_t u8g2_font_9x15_mn[] ;
extern const uint8_t u8g2_font_9x15_me[] ;
extern const uint8_t u8g2_font_9x15_t_symbols[] ;
extern const uint8_t u8g2_font_9x15_m_symbols[] ;
extern const uint8_t u8g2_font_9x15_t_cyrillic[] ;
extern const uint8_t u8g2_font_9x15B_tf[] ;
extern const uint8_t u8g2_font_9x15B_tr[] ;
extern const uint8_t u8g2_font_9x15B_tn[] ;
extern const uint8_t u8g2_font_9x15B_mf[] ;
extern const uint8_t u8g2_font_9x15B_mr[] ;
extern const uint8_t u8g2_font_9x15B_mn[] ;
extern const uint8_t u8g2_font_9x18_tf[] ;
extern const uint8_t u8g2_font_9x18_tr[] ;
extern const uint8_t u8g2_font_9x18_tn[] ;
extern const uint8_t u8g2_font_9x18_mf[] ;
extern const uint8_t u8g2_font_9x18_mr[] ;
extern const uint8_t u8g2_font_9x18_mn[] ;
extern const uint8_t u8g2_font_9x18B_tf[] ;
extern const uint8_t u8g2_font_9x18B_tr[] ;
extern const uint8_t u8g2_font_9x18B_tn[] ;
extern const uint8_t u8g2_font_9x18B_mf[] ;
extern const uint8_t u8g2_font_9x18B_mr[] ;
extern const uint8_t u8g2_font_9x18B_mn[] ;
extern const uint8_t u8g2_font_10x20_tf[] ;
extern const uint8_t u8g2_font_10x20_tr[] ;
extern const uint8_t u8g2_font_10x20_tn[] ;
extern const uint8_t u8g2_font_10x20_te[] ;
extern const uint8_t u8g2_font_10x20_mf[] ;
extern const uint8_t u8g2_font_10x20_mr[] ;
extern const uint8_t u8g2_font_10x20_mn[] ;
extern const uint8_t u8g2_font_10x20_me[] ;
extern const uint8_t u8g2_font_10x20_t_greek[] ;
extern const uint8_t u8g2_font_10x20_t_cyrillic[] ;
extern const uint8_t u8g2_font_10x20_t_arabic[] ;
extern const uint8_t u8g2_font_siji_t_6x10[] ;
extern const uint8_t
    u8g2_font_tom_thumb_4x6_t_all[] ;
extern const uint8_t u8g2_font_tom_thumb_4x6_tf[] ;
extern const uint8_t u8g2_font_tom_thumb_4x6_tr[] ;
extern const uint8_t u8g2_font_tom_thumb_4x6_tn[] ;
extern const uint8_t u8g2_font_tom_thumb_4x6_te[] ;
extern const uint8_t u8g2_font_tom_thumb_4x6_mf[] ;
extern const uint8_t u8g2_font_tom_thumb_4x6_mr[] ;
extern const uint8_t u8g2_font_tom_thumb_4x6_mn[] ;
extern const uint8_t u8g2_font_tom_thumb_4x6_me[] ;
extern const uint8_t u8g2_font_t0_11_tf[] ;
extern const uint8_t u8g2_font_t0_11_tr[] ;
extern const uint8_t u8g2_font_t0_11_tn[] ;
extern const uint8_t u8g2_font_t0_11_te[] ;
extern const uint8_t u8g2_font_t0_11_mf[] ;
extern const uint8_t u8g2_font_t0_11_mr[] ;
extern const uint8_t u8g2_font_t0_11_mn[] ;
extern const uint8_t u8g2_font_t0_11_me[] ;
extern const uint8_t u8g2_font_t0_11_t_all[] ;
extern const uint8_t u8g2_font_t0_11b_tf[] ;
extern const uint8_t u8g2_font_t0_11b_tr[] ;
extern const uint8_t u8g2_font_t0_11b_tn[] ;
extern const uint8_t u8g2_font_t0_11b_te[] ;
extern const uint8_t u8g2_font_t0_11b_mf[] ;
extern const uint8_t u8g2_font_t0_11b_mr[] ;
extern const uint8_t u8g2_font_t0_11b_mn[] ;
extern const uint8_t u8g2_font_t0_11b_me[] ;
extern const uint8_t u8g2_font_t0_12_tf[] ;
extern const uint8_t u8g2_font_t0_12_tr[] ;
extern const uint8_t u8g2_font_t0_12_tn[] ;
extern const uint8_t u8g2_font_t0_12_te[] ;
extern const uint8_t u8g2_font_t0_12_mf[] ;
extern const uint8_t u8g2_font_t0_12_mr[] ;
extern const uint8_t u8g2_font_t0_12_mn[] ;
extern const uint8_t u8g2_font_t0_12_me[] ;
extern const uint8_t u8g2_font_t0_12b_tf[] ;
extern const uint8_t u8g2_font_t0_12b_tr[] ;
extern const uint8_t u8g2_font_t0_12b_tn[] ;
extern const uint8_t u8g2_font_t0_12b_te[] ;
extern const uint8_t u8g2_font_t0_12b_mf[] ;
extern const uint8_t u8g2_font_t0_12b_mr[] ;
extern const uint8_t u8g2_font_t0_12b_mn[] ;
extern const uint8_t u8g2_font_t0_12b_me[] ;
extern const uint8_t u8g2_font_t0_13_tf[] ;
extern const uint8_t u8g2_font_t0_13_tr[] ;
extern const uint8_t u8g2_font_t0_13_tn[] ;
extern const uint8_t u8g2_font_t0_13_te[] ;
extern const uint8_t u8g2_font_t0_13_mf[] ;
extern const uint8_t u8g2_font_t0_13_mr[] ;
extern const uint8_t u8g2_font_t0_13_mn[] ;
extern const uint8_t u8g2_font_t0_13_me[] ;
extern const uint8_t u8g2_font_t0_13b_tf[] ;
extern const uint8_t u8g2_font_t0_13b_tr[] ;
extern const uint8_t u8g2_font_t0_13b_tn[] ;
extern const uint8_t u8g2_font_t0_13b_te[] ;
extern const uint8_t u8g2_font_t0_13b_mf[] ;
extern const uint8_t u8g2_font_t0_13b_mr[] ;
extern const uint8_t u8g2_font_t0_13b_mn[] ;
extern const uint8_t u8g2_font_t0_13b_me[] ;
extern const uint8_t u8g2_font_t0_14_tf[] ;
extern const uint8_t u8g2_font_t0_14_tr[] ;
extern const uint8_t u8g2_font_t0_14_tn[] ;
extern const uint8_t u8g2_font_t0_14_te[] ;
extern const uint8_t u8g2_font_t0_14_mf[] ;
extern const uint8_t u8g2_font_t0_14_mr[] ;
extern const uint8_t u8g2_font_t0_14_mn[] ;
extern const uint8_t u8g2_font_t0_14_me[] ;
extern const uint8_t u8g2_font_t0_14b_tf[] ;
extern const uint8_t u8g2_font_t0_14b_tr[] ;
extern const uint8_t u8g2_font_t0_14b_tn[] ;
extern const uint8_t u8g2_font_t0_14b_te[] ;
extern const uint8_t u8g2_font_t0_14b_mf[] ;
extern const uint8_t u8g2_font_t0_14b_mr[] ;
extern const uint8_t u8g2_font_t0_14b_mn[] ;
extern const uint8_t u8g2_font_t0_14b_me[] ;
extern const uint8_t u8g2_font_t0_15_tf[] ;
extern const uint8_t u8g2_font_t0_15_tr[] ;
extern const uint8_t u8g2_font_t0_15_tn[] ;
extern const uint8_t u8g2_font_t0_15_te[] ;
extern const uint8_t u8g2_font_t0_15_mf[] ;
extern const uint8_t u8g2_font_t0_15_mr[] ;
extern const uint8_t u8g2_font_t0_15_mn[] ;
extern const uint8_t u8g2_font_t0_15_me[] ;
extern const uint8_t u8g2_font_t0_15b_tf[] ;
extern const uint8_t u8g2_font_t0_15b_tr[] ;
extern const uint8_t u8g2_font_t0_15b_tn[] ;
extern const uint8_t u8g2_font_t0_15b_te[] ;
extern const uint8_t u8g2_font_t0_15b_mf[] ;
extern const uint8_t u8g2_font_t0_15b_mr[] ;
extern const uint8_t u8g2_font_t0_15b_mn[] ;
extern const uint8_t u8g2_font_t0_15b_me[] ;
extern const uint8_t u8g2_font_t0_16_tf[] ;
extern const uint8_t u8g2_font_t0_16_tr[] ;
extern const uint8_t u8g2_font_t0_16_tn[] ;
extern const uint8_t u8g2_font_t0_16_te[] ;
extern const uint8_t u8g2_font_t0_16_mf[] ;
extern const uint8_t u8g2_font_t0_16_mr[] ;
extern const uint8_t u8g2_font_t0_16_mn[] ;
extern const uint8_t u8g2_font_t0_16_me[] ;
extern const uint8_t u8g2_font_t0_16b_tf[] ;
extern const uint8_t u8g2_font_t0_16b_tr[] ;
extern const uint8_t u8g2_font_t0_16b_tn[] ;
extern const uint8_t u8g2_font_t0_16b_te[] ;
extern const uint8_t u8g2_font_t0_16b_mf[] ;
extern const uint8_t u8g2_font_t0_16b_mr[] ;
extern const uint8_t u8g2_font_t0_16b_mn[] ;
extern const uint8_t u8g2_font_t0_16b_me[] ;
extern const uint8_t u8g2_font_t0_17_tf[] ;
extern const uint8_t u8g2_font_t0_17_tr[] ;
extern const uint8_t u8g2_font_t0_17_tn[] ;
extern const uint8_t u8g2_font_t0_17_te[] ;
extern const uint8_t u8g2_font_t0_17_mf[] ;
extern const uint8_t u8g2_font_t0_17_mr[] ;
extern const uint8_t u8g2_font_t0_17_mn[] ;
extern const uint8_t u8g2_font_t0_17_me[] ;
extern const uint8_t u8g2_font_t0_17b_tf[] ;
extern const uint8_t u8g2_font_t0_17b_tr[] ;
extern const uint8_t u8g2_font_t0_17b_tn[] ;
extern const uint8_t u8g2_font_t0_17b_te[] ;
extern const uint8_t u8g2_font_t0_17b_mf[] ;
extern const uint8_t u8g2_font_t0_17b_mr[] ;
extern const uint8_t u8g2_font_t0_17b_mn[] ;
extern const uint8_t u8g2_font_t0_17b_me[] ;
extern const uint8_t u8g2_font_t0_18_tf[] ;
extern const uint8_t u8g2_font_t0_18_tr[] ;
extern const uint8_t u8g2_font_t0_18_tn[] ;
extern const uint8_t u8g2_font_t0_18_te[] ;
extern const uint8_t u8g2_font_t0_18_mf[] ;
extern const uint8_t u8g2_font_t0_18_mr[] ;
extern const uint8_t u8g2_font_t0_18_mn[] ;
extern const uint8_t u8g2_font_t0_18_me[] ;
extern const uint8_t u8g2_font_t0_18b_tf[] ;
extern const uint8_t u8g2_font_t0_18b_tr[] ;
extern const uint8_t u8g2_font_t0_18b_tn[] ;
extern const uint8_t u8g2_font_t0_18b_te[] ;
extern const uint8_t u8g2_font_t0_18b_mf[] ;
extern const uint8_t u8g2_font_t0_18b_mr[] ;
extern const uint8_t u8g2_font_t0_18b_mn[] ;
extern const uint8_t u8g2_font_t0_18b_me[] ;
extern const uint8_t u8g2_font_t0_22_tf[] ;
extern const uint8_t u8g2_font_t0_22_tr[] ;
extern const uint8_t u8g2_font_t0_22_tn[] ;
extern const uint8_t u8g2_font_t0_22_te[] ;
extern const uint8_t u8g2_font_t0_22_mf[] ;
extern const uint8_t u8g2_font_t0_22_mr[] ;
extern const uint8_t u8g2_font_t0_22_mn[] ;
extern const uint8_t u8g2_font_t0_22_me[] ;
extern const uint8_t u8g2_font_t0_22b_tf[] ;
extern const uint8_t u8g2_font_t0_22b_tr[] ;
extern const uint8_t u8g2_font_t0_22b_tn[] ;
extern const uint8_t u8g2_font_t0_22b_te[] ;
extern const uint8_t u8g2_font_t0_22b_mf[] ;
extern const uint8_t u8g2_font_t0_22b_mr[] ;
extern const uint8_t u8g2_font_t0_22b_mn[] ;
extern const uint8_t u8g2_font_t0_22b_me[] ;
extern const uint8_t
    u8g2_font_open_iconic_all_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_app_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_arrow_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_check_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_email_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_embedded_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_gui_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_human_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_mime_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_other_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_play_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_text_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_thing_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_weather_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_www_1x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_all_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_app_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_arrow_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_check_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_email_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_embedded_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_gui_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_human_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_mime_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_other_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_play_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_text_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_thing_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_weather_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_www_2x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_all_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_app_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_arrow_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_check_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_email_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_embedded_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_gui_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_human_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_mime_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_other_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_play_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_text_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_thing_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_weather_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_www_4x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_all_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_app_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_arrow_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_check_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_email_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_embedded_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_gui_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_human_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_mime_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_other_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_play_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_text_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_thing_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_weather_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_www_6x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_all_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_app_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_arrow_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_check_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_email_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_embedded_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_gui_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_human_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_mime_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_other_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_play_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_text_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_thing_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_weather_8x_t[] ;
extern const uint8_t
    u8g2_font_open_iconic_www_8x_t[] ;
extern const uint8_t u8g2_font_profont10_tf[] ;
extern const uint8_t u8g2_font_profont10_tr[] ;
extern const uint8_t u8g2_font_profont10_tn[] ;
extern const uint8_t u8g2_font_profont10_mf[] ;
extern const uint8_t u8g2_font_profont10_mr[] ;
extern const uint8_t u8g2_font_profont10_mn[] ;
extern const uint8_t u8g2_font_profont11_tf[] ;
extern const uint8_t u8g2_font_profont11_tr[] ;
extern const uint8_t u8g2_font_profont11_tn[] ;
extern const uint8_t u8g2_font_profont11_mf[] ;
extern const uint8_t u8g2_font_profont11_mr[] ;
extern const uint8_t u8g2_font_profont11_mn[] ;
extern const uint8_t u8g2_font_profont12_tf[] ;
extern const uint8_t u8g2_font_profont12_tr[] ;
extern const uint8_t u8g2_font_profont12_tn[] ;
extern const uint8_t u8g2_font_profont12_mf[] ;
extern const uint8_t u8g2_font_profont12_mr[] ;
extern const uint8_t u8g2_font_profont12_mn[] ;
extern const uint8_t u8g2_font_profont15_tf[] ;
extern const uint8_t u8g2_font_profont15_tr[] ;
extern const uint8_t u8g2_font_profont15_tn[] ;
extern const uint8_t u8g2_font_profont15_mf[] ;
extern const uint8_t u8g2_font_profont15_mr[] ;
extern const uint8_t u8g2_font_profont15_mn[] ;
extern const uint8_t u8g2_font_profont17_tf[] ;
extern const uint8_t u8g2_font_profont17_tr[] ;
extern const uint8_t u8g2_font_profont17_tn[] ;
extern const uint8_t u8g2_font_profont17_mf[] ;
extern const uint8_t u8g2_font_profont17_mr[] ;
extern const uint8_t u8g2_font_profont17_mn[] ;
extern const uint8_t u8g2_font_profont22_tf[] ;
extern const uint8_t u8g2_font_profont22_tr[] ;
extern const uint8_t u8g2_font_profont22_tn[] ;
extern const uint8_t u8g2_font_profont22_mf[] ;
extern const uint8_t u8g2_font_profont22_mr[] ;
extern const uint8_t u8g2_font_profont22_mn[] ;
extern const uint8_t u8g2_font_profont29_tf[] ;
extern const uint8_t u8g2_font_profont29_tr[] ;
extern const uint8_t u8g2_font_profont29_tn[] ;
extern const uint8_t u8g2_font_profont29_mf[] ;
extern const uint8_t u8g2_font_profont29_mr[] ;
extern const uint8_t u8g2_font_profont29_mn[] ;
extern const uint8_t u8g2_font_samim_10_t_all[] ;
extern const uint8_t u8g2_font_samim_12_t_all[] ;
extern const uint8_t u8g2_font_samim_14_t_all[] ;
extern const uint8_t u8g2_font_samim_16_t_all[] ;
extern const uint8_t
    u8g2_font_samim_fd_10_t_all[] ;
extern const uint8_t
    u8g2_font_samim_fd_12_t_all[] ;
extern const uint8_t
    u8g2_font_samim_fd_14_t_all[] ;
extern const uint8_t
    u8g2_font_samim_fd_16_t_all[] ;
extern const uint8_t
    u8g2_font_ganj_nameh_sans10_t_all[] ;
extern const uint8_t
    u8g2_font_ganj_nameh_sans12_t_all[] ;
extern const uint8_t
    u8g2_font_ganj_nameh_sans14_t_all[] ;
extern const uint8_t
    u8g2_font_ganj_nameh_sans16_t_all[] ;
extern const uint8_t
    u8g2_font_iranian_sans_8_t_all[] ;
extern const uint8_t
    u8g2_font_iranian_sans_10_t_all[] ;
extern const uint8_t
    u8g2_font_iranian_sans_12_t_all[] ;
extern const uint8_t
    u8g2_font_iranian_sans_14_t_all[] ;
extern const uint8_t
    u8g2_font_iranian_sans_16_t_all[] ;
extern const uint8_t u8g2_font_mozart_nbp_tf[] ;
extern const uint8_t u8g2_font_mozart_nbp_tr[] ;
extern const uint8_t u8g2_font_mozart_nbp_tn[] ;
extern const uint8_t u8g2_font_mozart_nbp_t_all[] ;
extern const uint8_t u8g2_font_mozart_nbp_h_all[] ;
extern const uint8_t u8g2_font_glasstown_nbp_tf[] ;
extern const uint8_t u8g2_font_glasstown_nbp_tr[] ;
extern const uint8_t u8g2_font_glasstown_nbp_tn[] ;
extern const uint8_t
    u8g2_font_glasstown_nbp_t_all[] ;
extern const uint8_t u8g2_font_shylock_nbp_tf[] ;
extern const uint8_t u8g2_font_shylock_nbp_tr[] ;
extern const uint8_t u8g2_font_shylock_nbp_tn[] ;
extern const uint8_t
    u8g2_font_shylock_nbp_t_all[] ;
extern const uint8_t u8g2_font_roentgen_nbp_tf[] ;
extern const uint8_t u8g2_font_roentgen_nbp_tr[] ;
extern const uint8_t u8g2_font_roentgen_nbp_tn[] ;
extern const uint8_t
    u8g2_font_roentgen_nbp_t_all[] ;
extern const uint8_t
    u8g2_font_roentgen_nbp_h_all[] ;
extern const uint8_t
    u8g2_font_calibration_gothic_nbp_tf[] ;
extern const uint8_t
    u8g2_font_calibration_gothic_nbp_tr[] ;
extern const uint8_t
    u8g2_font_calibration_gothic_nbp_tn[] ;
extern const uint8_t u8g2_font_calibration_gothic_nbp_t_all[] ;
extern const uint8_t
    u8g2_font_smart_patrol_nbp_tf[] ;
extern const uint8_t
    u8g2_font_smart_patrol_nbp_tr[] ;
extern const uint8_t
    u8g2_font_smart_patrol_nbp_tn[] ;
extern const uint8_t
    u8g2_font_prospero_bold_nbp_tf[] ;
extern const uint8_t
    u8g2_font_prospero_bold_nbp_tr[] ;
extern const uint8_t
    u8g2_font_prospero_bold_nbp_tn[] ;
extern const uint8_t u8g2_font_prospero_nbp_tf[] ;
extern const uint8_t u8g2_font_prospero_nbp_tr[] ;
extern const uint8_t u8g2_font_prospero_nbp_tn[] ;
extern const uint8_t
    u8g2_font_balthasar_regular_nbp_tf[] ;
extern const uint8_t
    u8g2_font_balthasar_regular_nbp_tr[] ;
extern const uint8_t
    u8g2_font_balthasar_regular_nbp_tn[] ;
extern const uint8_t
    u8g2_font_balthasar_titling_nbp_tf[] ;
extern const uint8_t
    u8g2_font_balthasar_titling_nbp_tr[] ;
extern const uint8_t
    u8g2_font_balthasar_titling_nbp_tn[] ;
extern const uint8_t
    u8g2_font_synchronizer_nbp_tf[] ;
extern const uint8_t
    u8g2_font_synchronizer_nbp_tr[] ;
extern const uint8_t
    u8g2_font_synchronizer_nbp_tn[] ;
extern const uint8_t
    u8g2_font_mercutio_basic_nbp_tf[] ;
extern const uint8_t
    u8g2_font_mercutio_basic_nbp_tr[] ;
extern const uint8_t
    u8g2_font_mercutio_basic_nbp_tn[] ;
extern const uint8_t
    u8g2_font_mercutio_basic_nbp_t_all[] ;
extern const uint8_t
    u8g2_font_mercutio_sc_nbp_tf[] ;
extern const uint8_t
    u8g2_font_mercutio_sc_nbp_tr[] ;
extern const uint8_t
    u8g2_font_mercutio_sc_nbp_tn[] ;
extern const uint8_t
    u8g2_font_mercutio_sc_nbp_t_all[] ;
extern const uint8_t u8g2_font_miranda_nbp_tf[] ;
extern const uint8_t u8g2_font_miranda_nbp_tr[] ;
extern const uint8_t u8g2_font_miranda_nbp_tn[] ;
extern const uint8_t
    u8g2_font_nine_by_five_nbp_tf[] ;
extern const uint8_t
    u8g2_font_nine_by_five_nbp_tr[] ;
extern const uint8_t
    u8g2_font_nine_by_five_nbp_tn[] ;
extern const uint8_t
    u8g2_font_nine_by_five_nbp_t_all[] ;
extern const uint8_t
    u8g2_font_rosencrantz_nbp_tf[] ;
extern const uint8_t
    u8g2_font_rosencrantz_nbp_tr[] ;
extern const uint8_t
    u8g2_font_rosencrantz_nbp_tn[] ;
extern const uint8_t
    u8g2_font_rosencrantz_nbp_t_all[] ;
extern const uint8_t
    u8g2_font_guildenstern_nbp_tf[] ;
extern const uint8_t
    u8g2_font_guildenstern_nbp_tr[] ;
extern const uint8_t
    u8g2_font_guildenstern_nbp_tn[] ;
extern const uint8_t
    u8g2_font_guildenstern_nbp_t_all[] ;
extern const uint8_t u8g2_font_astragal_nbp_tf[] ;
extern const uint8_t u8g2_font_astragal_nbp_tr[] ;
extern const uint8_t u8g2_font_astragal_nbp_tn[] ;
extern const uint8_t
    u8g2_font_habsburgchancery_tf[] ;
extern const uint8_t
    u8g2_font_habsburgchancery_tr[] ;
extern const uint8_t
    u8g2_font_habsburgchancery_tn[] ;
extern const uint8_t
    u8g2_font_habsburgchancery_t_all[] ;
extern const uint8_t u8g2_font_missingplanet_tf[] ;
extern const uint8_t u8g2_font_missingplanet_tr[] ;
extern const uint8_t u8g2_font_missingplanet_tn[] ;
extern const uint8_t
    u8g2_font_missingplanet_t_all[] ;
extern const uint8_t u8g2_font_ordinarybasis_tf[] ;
extern const uint8_t u8g2_font_ordinarybasis_tr[] ;
extern const uint8_t u8g2_font_ordinarybasis_tn[] ;
extern const uint8_t
    u8g2_font_ordinarybasis_t_all[] ;
extern const uint8_t u8g2_font_pixelmordred_tf[] ;
extern const uint8_t u8g2_font_pixelmordred_tr[] ;
extern const uint8_t u8g2_font_pixelmordred_tn[] ;
extern const uint8_t
    u8g2_font_pixelmordred_t_all[] ;
extern const uint8_t u8g2_font_secretaryhand_tf[] ;
extern const uint8_t u8g2_font_secretaryhand_tr[] ;
extern const uint8_t u8g2_font_secretaryhand_tn[] ;
extern const uint8_t
    u8g2_font_secretaryhand_t_all[] ;
extern const uint8_t u8g2_font_beanstalk_mel_tr[] ;
extern const uint8_t u8g2_font_beanstalk_mel_tn[] ;
extern const uint8_t u8g2_font_cube_mel_tr[] ;
extern const uint8_t u8g2_font_cube_mel_tn[] ;
extern const uint8_t
    u8g2_font_mademoiselle_mel_tr[] ;
extern const uint8_t
    u8g2_font_mademoiselle_mel_tn[] ;
extern const uint8_t
    u8g2_font_pieceofcake_mel_tr[] ;
extern const uint8_t
    u8g2_font_pieceofcake_mel_tn[] ;
extern const uint8_t u8g2_font_press_mel_tr[] ;
extern const uint8_t u8g2_font_press_mel_tn[] ;
extern const uint8_t u8g2_font_repress_mel_tr[] ;
extern const uint8_t u8g2_font_repress_mel_tn[] ;
extern const uint8_t u8g2_font_sticker_mel_tr[] ;
extern const uint8_t u8g2_font_sticker_mel_tn[] ;
extern const uint8_t u8g2_font_celibatemonk_tr[] ;
extern const uint8_t
    u8g2_font_disrespectfulteenager_tu[] ;
extern const uint8_t u8g2_font_michaelmouse_tu[] ;
extern const uint8_t u8g2_font_sandyforest_tr[] ;
extern const uint8_t u8g2_font_sandyforest_tn[] ;
extern const uint8_t u8g2_font_sandyforest_tu[] ;
extern const uint8_t
    u8g2_font_cupcakemetoyourleader_tr[] ;
extern const uint8_t
    u8g2_font_cupcakemetoyourleader_tn[] ;
extern const uint8_t
    u8g2_font_cupcakemetoyourleader_tu[] ;
extern const uint8_t u8g2_font_oldwizard_tf[] ;
extern const uint8_t u8g2_font_oldwizard_tr[] ;
extern const uint8_t u8g2_font_oldwizard_tn[] ;
extern const uint8_t u8g2_font_oldwizard_tu[] ;
extern const uint8_t u8g2_font_squirrel_tr[] ;
extern const uint8_t u8g2_font_squirrel_tn[] ;
extern const uint8_t u8g2_font_squirrel_tu[] ;
extern const uint8_t u8g2_font_diodesemimono_tr[] ;
extern const uint8_t u8g2_font_questgiver_tr[] ;
extern const uint8_t u8g2_font_seraphimb1_tr[] ;
extern const uint8_t u8g2_font_jinxedwizards_tr[] ;
extern const uint8_t u8g2_font_lastpriestess_tr[] ;
extern const uint8_t u8g2_font_lastpriestess_tu[] ;
extern const uint8_t u8g2_font_bitcasual_tf[] ;
extern const uint8_t u8g2_font_bitcasual_tr[] ;
extern const uint8_t u8g2_font_bitcasual_tn[] ;
extern const uint8_t u8g2_font_bitcasual_tu[] ;
extern const uint8_t u8g2_font_bitcasual_t_all[] ;
extern const uint8_t u8g2_font_koleeko_tf[] ;
extern const uint8_t u8g2_font_koleeko_tr[] ;
extern const uint8_t u8g2_font_koleeko_tn[] ;
extern const uint8_t u8g2_font_koleeko_tu[] ;
extern const uint8_t u8g2_font_tenfatguys_tf[] ;
extern const uint8_t u8g2_font_tenfatguys_tr[] ;
extern const uint8_t u8g2_font_tenfatguys_tn[] ;
extern const uint8_t u8g2_font_tenfatguys_tu[] ;
extern const uint8_t u8g2_font_tenfatguys_t_all[] ;
extern const uint8_t u8g2_font_tenstamps_mf[] ;
extern const uint8_t u8g2_font_tenstamps_mr[] ;
extern const uint8_t u8g2_font_tenstamps_mn[] ;
extern const uint8_t u8g2_font_tenstamps_mu[] ;
extern const uint8_t u8g2_font_tenthinguys_tf[] ;
extern const uint8_t u8g2_font_tenthinguys_tr[] ;
extern const uint8_t u8g2_font_tenthinguys_tn[] ;
extern const uint8_t u8g2_font_tenthinguys_tu[] ;
extern const uint8_t
    u8g2_font_tenthinguys_t_all[] ;
extern const uint8_t
    u8g2_font_tenthinnerguys_tf[] ;
extern const uint8_t
    u8g2_font_tenthinnerguys_tr[] ;
extern const uint8_t
    u8g2_font_tenthinnerguys_tn[] ;
extern const uint8_t
    u8g2_font_tenthinnerguys_tu[] ;
extern const uint8_t
    u8g2_font_tenthinnerguys_t_all[] ;
extern const uint8_t
    u8g2_font_twelvedings_t_all[] ;
extern const uint8_t u8g2_font_fewture_tf[] ;
extern const uint8_t u8g2_font_fewture_tr[] ;
extern const uint8_t u8g2_font_fewture_tn[] ;
extern const uint8_t u8g2_font_halftone_tf[] ;
extern const uint8_t u8g2_font_halftone_tr[] ;
extern const uint8_t u8g2_font_halftone_tn[] ;
extern const uint8_t u8g2_font_nerhoe_tf[] ;
extern const uint8_t u8g2_font_nerhoe_tr[] ;
extern const uint8_t u8g2_font_nerhoe_tn[] ;
extern const uint8_t u8g2_font_oskool_tf[] ;
extern const uint8_t u8g2_font_oskool_tr[] ;
extern const uint8_t u8g2_font_oskool_tn[] ;
extern const uint8_t u8g2_font_tinytim_tf[] ;
extern const uint8_t u8g2_font_tinytim_tr[] ;
extern const uint8_t u8g2_font_tinytim_tn[] ;
extern const uint8_t u8g2_font_tooseornament_tf[] ;
extern const uint8_t u8g2_font_tooseornament_tr[] ;
extern const uint8_t u8g2_font_tooseornament_tn[] ;
extern const uint8_t u8g2_font_bauhaus2015_tr[] ;
extern const uint8_t u8g2_font_bauhaus2015_tn[] ;
extern const uint8_t
    u8g2_font_finderskeepers_tf[] ;
extern const uint8_t
    u8g2_font_finderskeepers_tr[] ;
extern const uint8_t
    u8g2_font_finderskeepers_tn[] ;
extern const uint8_t
    u8g2_font_sirclivethebold_tr[] ;
extern const uint8_t
    u8g2_font_sirclivethebold_tn[] ;
extern const uint8_t u8g2_font_sirclive_tr[] ;
extern const uint8_t u8g2_font_sirclive_tn[] ;
extern const uint8_t u8g2_font_adventurer_tf[] ;
extern const uint8_t u8g2_font_adventurer_tr[] ;
extern const uint8_t u8g2_font_adventurer_t_all[] ;
extern const uint8_t
    u8g2_font_bracketedbabies_tr[] ;
extern const uint8_t u8g2_font_frikativ_tf[] ;
extern const uint8_t u8g2_font_frikativ_tr[] ;
extern const uint8_t u8g2_font_frikativ_t_all[] ;
extern const uint8_t u8g2_font_fancypixels_tf[] ;
extern const uint8_t u8g2_font_fancypixels_tr[] ;
extern const uint8_t u8g2_font_heavybottom_tr[] ;
extern const uint8_t
    u8g2_font_iconquadpix_m_all[] ;
extern const uint8_t
    u8g2_font_lastapprenticebold_tr[] ;
extern const uint8_t
    u8g2_font_lastapprenticethin_tr[] ;
extern const uint8_t u8g2_font_tallpix_tr[] ;
extern const uint8_t u8g2_font_BBSesque_tf[] ;
extern const uint8_t u8g2_font_BBSesque_tr[] ;
extern const uint8_t u8g2_font_BBSesque_te[] ;
extern const uint8_t
    u8g2_font_Born2bSportySlab_tf[] ;
extern const uint8_t
    u8g2_font_Born2bSportySlab_tr[] ;
extern const uint8_t
    u8g2_font_Born2bSportySlab_te[] ;
extern const uint8_t
    u8g2_font_Born2bSportySlab_t_all[] ;
extern const uint8_t
    u8g2_font_Born2bSportyV2_tf[] ;
extern const uint8_t
    u8g2_font_Born2bSportyV2_tr[] ;
extern const uint8_t
    u8g2_font_Born2bSportyV2_te[] ;
extern const uint8_t u8g2_font_CursivePixel_tr[] ;
extern const uint8_t u8g2_font_Engrish_tf[] ;
extern const uint8_t u8g2_font_Engrish_tr[] ;
extern const uint8_t u8g2_font_ImpactBits_tr[] ;
extern const uint8_t u8g2_font_IPAandRUSLCD_tf[] ;
extern const uint8_t u8g2_font_IPAandRUSLCD_tr[] ;
extern const uint8_t u8g2_font_IPAandRUSLCD_te[] ;
extern const uint8_t u8g2_font_HelvetiPixel_tr[] ;
extern const uint8_t u8g2_font_TimesNewPixel_tr[] ;
extern const uint8_t u8g2_font_BitTypeWriter_tr[] ;
extern const uint8_t u8g2_font_BitTypeWriter_te[] ;
extern const uint8_t u8g2_font_Georgia7px_tf[] ;
extern const uint8_t u8g2_font_Georgia7px_tr[] ;
extern const uint8_t u8g2_font_Georgia7px_te[] ;
extern const uint8_t u8g2_font_Wizzard_tr[] ;
extern const uint8_t
    u8g2_font_HelvetiPixelOutline_tr[] ;
extern const uint8_t
    u8g2_font_HelvetiPixelOutline_te[] ;
extern const uint8_t u8g2_font_Untitled16PixelSansSerifBitmap_tr[] ;
extern const uint8_t u8g2_font_nokiafc22_tf[] ;
extern const uint8_t u8g2_font_nokiafc22_tr[] ;
extern const uint8_t u8g2_font_nokiafc22_tn[] ;
extern const uint8_t u8g2_font_nokiafc22_tu[] ;
extern const uint8_t u8g2_font_VCR_OSD_tf[] ;
extern const uint8_t u8g2_font_VCR_OSD_tr[] ;
extern const uint8_t u8g2_font_VCR_OSD_tn[] ;
extern const uint8_t u8g2_font_VCR_OSD_tu[] ;
extern const uint8_t u8g2_font_VCR_OSD_mf[] ;
extern const uint8_t u8g2_font_VCR_OSD_mr[] ;
extern const uint8_t u8g2_font_VCR_OSD_mn[] ;
extern const uint8_t u8g2_font_VCR_OSD_mu[] ;
extern const uint8_t u8g2_font_Pixellari_tf[] ;
extern const uint8_t u8g2_font_Pixellari_tr[] ;
extern const uint8_t u8g2_font_Pixellari_tn[] ;
extern const uint8_t u8g2_font_Pixellari_tu[] ;
extern const uint8_t u8g2_font_Pixellari_te[] ;
extern const uint8_t u8g2_font_pixelpoiiz_tr[] ;
extern const uint8_t
    u8g2_font_DigitalDiscoThin_tf[] ;
extern const uint8_t
    u8g2_font_DigitalDiscoThin_tr[] ;
extern const uint8_t
    u8g2_font_DigitalDiscoThin_tn[] ;
extern const uint8_t
    u8g2_font_DigitalDiscoThin_tu[] ;
extern const uint8_t
    u8g2_font_DigitalDiscoThin_te[] ;
extern const uint8_t u8g2_font_DigitalDisco_tf[] ;
extern const uint8_t u8g2_font_DigitalDisco_tr[] ;
extern const uint8_t u8g2_font_DigitalDisco_tn[] ;
extern const uint8_t u8g2_font_DigitalDisco_tu[] ;
extern const uint8_t u8g2_font_DigitalDisco_te[] ;
extern const uint8_t u8g2_font_pearfont_tr[] ;
extern const uint8_t u8g2_font_etl14thai_t[] ;
extern const uint8_t u8g2_font_etl16thai_t[] ;
extern const uint8_t u8g2_font_etl24thai_t[] ;
extern const uint8_t u8g2_font_crox1cb_tf[] ;
extern const uint8_t u8g2_font_crox1cb_tr[] ;
extern const uint8_t u8g2_font_crox1cb_tn[] ;
extern const uint8_t u8g2_font_crox1cb_mf[] ;
extern const uint8_t u8g2_font_crox1cb_mr[] ;
extern const uint8_t u8g2_font_crox1cb_mn[] ;
extern const uint8_t u8g2_font_crox1c_tf[] ;
extern const uint8_t u8g2_font_crox1c_tr[] ;
extern const uint8_t u8g2_font_crox1c_tn[] ;
extern const uint8_t u8g2_font_crox1c_mf[] ;
extern const uint8_t u8g2_font_crox1c_mr[] ;
extern const uint8_t u8g2_font_crox1c_mn[] ;
extern const uint8_t u8g2_font_crox1hb_tf[] ;
extern const uint8_t u8g2_font_crox1hb_tr[] ;
extern const uint8_t u8g2_font_crox1hb_tn[] ;
extern const uint8_t u8g2_font_crox1h_tf[] ;
extern const uint8_t u8g2_font_crox1h_tr[] ;
extern const uint8_t u8g2_font_crox1h_tn[] ;
extern const uint8_t u8g2_font_crox1tb_tf[] ;
extern const uint8_t u8g2_font_crox1tb_tr[] ;
extern const uint8_t u8g2_font_crox1tb_tn[] ;
extern const uint8_t u8g2_font_crox1t_tf[] ;
extern const uint8_t u8g2_font_crox1t_tr[] ;
extern const uint8_t u8g2_font_crox1t_tn[] ;
extern const uint8_t u8g2_font_crox2cb_tf[] ;
extern const uint8_t u8g2_font_crox2cb_tr[] ;
extern const uint8_t u8g2_font_crox2cb_tn[] ;
extern const uint8_t u8g2_font_crox2cb_mf[] ;
extern const uint8_t u8g2_font_crox2cb_mr[] ;
extern const uint8_t u8g2_font_crox2cb_mn[] ;
extern const uint8_t u8g2_font_crox2c_tf[] ;
extern const uint8_t u8g2_font_crox2c_tr[] ;
extern const uint8_t u8g2_font_crox2c_tn[] ;
extern const uint8_t u8g2_font_crox2c_mf[] ;
extern const uint8_t u8g2_font_crox2c_mr[] ;
extern const uint8_t u8g2_font_crox2c_mn[] ;
extern const uint8_t u8g2_font_crox2hb_tf[] ;
extern const uint8_t u8g2_font_crox2hb_tr[] ;
extern const uint8_t u8g2_font_crox2hb_tn[] ;
extern const uint8_t u8g2_font_crox2h_tf[] ;
extern const uint8_t u8g2_font_crox2h_tr[] ;
extern const uint8_t u8g2_font_crox2h_tn[] ;
extern const uint8_t u8g2_font_crox2tb_tf[] ;
extern const uint8_t u8g2_font_crox2tb_tr[] ;
extern const uint8_t u8g2_font_crox2tb_tn[] ;
extern const uint8_t u8g2_font_crox2t_tf[] ;
extern const uint8_t u8g2_font_crox2t_tr[] ;
extern const uint8_t u8g2_font_crox2t_tn[] ;
extern const uint8_t u8g2_font_crox3cb_tf[] ;
extern const uint8_t u8g2_font_crox3cb_tr[] ;
extern const uint8_t u8g2_font_crox3cb_tn[] ;
extern const uint8_t u8g2_font_crox3cb_mf[] ;
extern const uint8_t u8g2_font_crox3cb_mr[] ;
extern const uint8_t u8g2_font_crox3cb_mn[] ;
extern const uint8_t u8g2_font_crox3c_tf[] ;
extern const uint8_t u8g2_font_crox3c_tr[] ;
extern const uint8_t u8g2_font_crox3c_tn[] ;
extern const uint8_t u8g2_font_crox3c_mf[] ;
extern const uint8_t u8g2_font_crox3c_mr[] ;
extern const uint8_t u8g2_font_crox3c_mn[] ;
extern const uint8_t u8g2_font_crox3hb_tf[] ;
extern const uint8_t u8g2_font_crox3hb_tr[] ;
extern const uint8_t u8g2_font_crox3hb_tn[] ;
extern const uint8_t u8g2_font_crox3h_tf[] ;
extern const uint8_t u8g2_font_crox3h_tr[] ;
extern const uint8_t u8g2_font_crox3h_tn[] ;
extern const uint8_t u8g2_font_crox3tb_tf[] ;
extern const uint8_t u8g2_font_crox3tb_tr[] ;
extern const uint8_t u8g2_font_crox3tb_tn[] ;
extern const uint8_t u8g2_font_crox3t_tf[] ;
extern const uint8_t u8g2_font_crox3t_tr[] ;
extern const uint8_t u8g2_font_crox3t_tn[] ;
extern const uint8_t u8g2_font_crox4hb_tf[] ;
extern const uint8_t u8g2_font_crox4hb_tr[] ;
extern const uint8_t u8g2_font_crox4hb_tn[] ;
extern const uint8_t u8g2_font_crox4h_tf[] ;
extern const uint8_t u8g2_font_crox4h_tr[] ;
extern const uint8_t u8g2_font_crox4h_tn[] ;
extern const uint8_t u8g2_font_crox4tb_tf[] ;
extern const uint8_t u8g2_font_crox4tb_tr[] ;
extern const uint8_t u8g2_font_crox4tb_tn[] ;
extern const uint8_t u8g2_font_crox4t_tf[] ;
extern const uint8_t u8g2_font_crox4t_tr[] ;
extern const uint8_t u8g2_font_crox4t_tn[] ;
extern const uint8_t u8g2_font_crox5hb_tf[] ;
extern const uint8_t u8g2_font_crox5hb_tr[] ;
extern const uint8_t u8g2_font_crox5hb_tn[] ;
extern const uint8_t u8g2_font_crox5h_tf[] ;
extern const uint8_t u8g2_font_crox5h_tr[] ;
extern const uint8_t u8g2_font_crox5h_tn[] ;
extern const uint8_t u8g2_font_crox5tb_tf[] ;
extern const uint8_t u8g2_font_crox5tb_tr[] ;
extern const uint8_t u8g2_font_crox5tb_tn[] ;
extern const uint8_t u8g2_font_crox5t_tf[] ;
extern const uint8_t u8g2_font_crox5t_tr[] ;
extern const uint8_t u8g2_font_crox5t_tn[] ;
extern const uint8_t u8g2_font_cu12_tf[] ;
extern const uint8_t u8g2_font_cu12_tr[] ;
extern const uint8_t u8g2_font_cu12_tn[] ;
extern const uint8_t u8g2_font_cu12_te[] ;
extern const uint8_t u8g2_font_cu12_hf[] ;
extern const uint8_t u8g2_font_cu12_hr[] ;
extern const uint8_t u8g2_font_cu12_hn[] ;
extern const uint8_t u8g2_font_cu12_he[] ;
extern const uint8_t u8g2_font_cu12_mf[] ;
extern const uint8_t u8g2_font_cu12_mr[] ;
extern const uint8_t u8g2_font_cu12_mn[] ;
extern const uint8_t u8g2_font_cu12_me[] ;
extern const uint8_t u8g2_font_cu12_t_symbols[] ;
extern const uint8_t u8g2_font_cu12_h_symbols[] ;
extern const uint8_t u8g2_font_cu12_t_greek[] ;
extern const uint8_t u8g2_font_cu12_t_cyrillic[] ;
extern const uint8_t u8g2_font_cu12_t_tibetan[] ;
extern const uint8_t u8g2_font_cu12_t_hebrew[] ;
extern const uint8_t u8g2_font_cu12_t_arabic[] ;
extern const uint8_t u8g2_font_unifont_tf[] ;
extern const uint8_t u8g2_font_unifont_tr[] ;
extern const uint8_t u8g2_font_unifont_te[] ;
extern const uint8_t u8g2_font_unifont_t_latin[] ;
extern const uint8_t
    u8g2_font_unifont_t_extended[] ;
extern const uint8_t u8g2_font_unifont_t_72_73[] ;
extern const uint8_t
    u8g2_font_unifont_t_0_72_73[] ;
extern const uint8_t u8g2_font_unifont_t_75[] ;
extern const uint8_t u8g2_font_unifont_t_0_75[] ;
extern const uint8_t u8g2_font_unifont_t_76[] ;
extern const uint8_t u8g2_font_unifont_t_0_76[] ;
extern const uint8_t u8g2_font_unifont_t_77[] ;
extern const uint8_t u8g2_font_unifont_t_0_77[] ;
extern const uint8_t u8g2_font_unifont_t_78_79[] ;
extern const uint8_t
    u8g2_font_unifont_t_0_78_79[] ;
extern const uint8_t u8g2_font_unifont_t_86[] ;
extern const uint8_t u8g2_font_unifont_t_0_86[] ;
extern const uint8_t u8g2_font_unifont_t_greek[] ;
extern const uint8_t
    u8g2_font_unifont_t_cyrillic[] ;
extern const uint8_t u8g2_font_unifont_t_hebrew[] ;
extern const uint8_t
    u8g2_font_unifont_t_bengali[] ;
extern const uint8_t
    u8g2_font_unifont_t_tibetan[] ;
extern const uint8_t u8g2_font_unifont_t_urdu[] ;
extern const uint8_t u8g2_font_unifont_t_polish[] ;
extern const uint8_t
    u8g2_font_unifont_t_devanagari[] ;
extern const uint8_t u8g2_font_unifont_t_arabic[] ;
extern const uint8_t
    u8g2_font_unifont_t_symbols[] ;
extern const uint8_t
    u8g2_font_unifont_h_symbols[] ;
extern const uint8_t
    u8g2_font_unifont_t_emoticons[] ;
extern const uint8_t
    u8g2_font_unifont_t_animals[] ;
extern const uint8_t u8g2_font_unifont_t_domino[] ;
extern const uint8_t u8g2_font_unifont_t_cards[] ;
extern const uint8_t
    u8g2_font_unifont_t_weather[] ;
extern const uint8_t
    u8g2_font_unifont_t_chinese1[] ;
extern const uint8_t
    u8g2_font_unifont_t_chinese2[] ;
extern const uint8_t
    u8g2_font_unifont_t_chinese3[] ;
extern const uint8_t
    u8g2_font_unifont_t_japanese1[] ;
extern const uint8_t
    u8g2_font_unifont_t_japanese2[] ;
extern const uint8_t
    u8g2_font_unifont_t_japanese3[] ;
extern const uint8_t
    u8g2_font_unifont_t_korean1[] ;
extern const uint8_t
    u8g2_font_unifont_t_korean2[] ;
extern const uint8_t
    u8g2_font_unifont_t_vietnamese1[] ;
extern const uint8_t
    u8g2_font_unifont_t_vietnamese2[] ;
extern const uint8_t u8g2_font_gb16st_t_1[] ;
extern const uint8_t u8g2_font_gb16st_t_2[] ;
extern const uint8_t u8g2_font_gb16st_t_3[] ;
extern const uint8_t u8g2_font_gb24st_t_1[] ;
extern const uint8_t u8g2_font_gb24st_t_2[] ;
extern const uint8_t u8g2_font_gb24st_t_3[] ;
extern const uint8_t u8g2_font_wqy12_t_chinese1[] ;
extern const uint8_t u8g2_font_wqy12_t_chinese2[] ;
extern const uint8_t u8g2_font_wqy12_t_chinese3[] ;
extern const uint8_t u8g2_font_wqy12_t_gb2312[] ;
extern const uint8_t u8g2_font_wqy12_t_gb2312a[] ;
extern const uint8_t u8g2_font_wqy12_t_gb2312b[] ;
extern const uint8_t u8g2_font_wqy13_t_chinese1[] ;
extern const uint8_t u8g2_font_wqy13_t_chinese2[] ;
extern const uint8_t u8g2_font_wqy13_t_chinese3[] ;
extern const uint8_t u8g2_font_wqy13_t_gb2312[] ;
extern const uint8_t u8g2_font_wqy13_t_gb2312a[] ;
extern const uint8_t u8g2_font_wqy13_t_gb2312b[] ;
extern const uint8_t u8g2_font_wqy14_t_chinese1[] ;
extern const uint8_t u8g2_font_wqy14_t_chinese2[] ;
extern const uint8_t u8g2_font_wqy14_t_chinese3[] ;
extern const uint8_t u8g2_font_wqy14_t_gb2312[] ;
extern const uint8_t u8g2_font_wqy14_t_gb2312a[] ;
extern const uint8_t u8g2_font_wqy14_t_gb2312b[] ;
extern const uint8_t u8g2_font_wqy15_t_chinese1[] ;
extern const uint8_t u8g2_font_wqy15_t_chinese2[] ;
extern const uint8_t u8g2_font_wqy15_t_chinese3[] ;
extern const uint8_t u8g2_font_wqy15_t_gb2312[] ;
extern const uint8_t u8g2_font_wqy15_t_gb2312a[] ;
extern const uint8_t u8g2_font_wqy15_t_gb2312b[] ;
extern const uint8_t u8g2_font_wqy16_t_chinese1[] ;
extern const uint8_t u8g2_font_wqy16_t_chinese2[] ;
extern const uint8_t u8g2_font_wqy16_t_chinese3[] ;
extern const uint8_t u8g2_font_wqy16_t_gb2312[] ;
extern const uint8_t u8g2_font_wqy16_t_gb2312a[] ;
extern const uint8_t u8g2_font_wqy16_t_gb2312b[] ;
extern const uint8_t u8g2_font_b10_t_japanese1[] ;
extern const uint8_t u8g2_font_b10_t_japanese2[] ;
extern const uint8_t
    u8g2_font_b10_b_t_japanese1[] ;
extern const uint8_t
    u8g2_font_b10_b_t_japanese2[] ;
extern const uint8_t u8g2_font_f10_t_japanese1[] ;
extern const uint8_t u8g2_font_f10_t_japanese2[] ;
extern const uint8_t
    u8g2_font_f10_b_t_japanese1[] ;
extern const uint8_t
    u8g2_font_f10_b_t_japanese2[] ;
extern const uint8_t u8g2_font_b12_t_japanese1[] ;
extern const uint8_t u8g2_font_b12_t_japanese2[] ;
extern const uint8_t u8g2_font_b12_t_japanese3[] ;
extern const uint8_t
    u8g2_font_b12_b_t_japanese1[] ;
extern const uint8_t
    u8g2_font_b12_b_t_japanese2[] ;
extern const uint8_t
    u8g2_font_b12_b_t_japanese3[] ;
extern const uint8_t u8g2_font_f12_t_japanese1[] ;
extern const uint8_t u8g2_font_f12_t_japanese2[] ;
extern const uint8_t
    u8g2_font_f12_b_t_japanese1[] ;
extern const uint8_t
    u8g2_font_f12_b_t_japanese2[] ;
extern const uint8_t u8g2_font_b16_t_japanese1[] ;
extern const uint8_t u8g2_font_b16_t_japanese2[] ;
extern const uint8_t u8g2_font_b16_t_japanese3[] ;
extern const uint8_t
    u8g2_font_b16_b_t_japanese1[] ;
extern const uint8_t
    u8g2_font_b16_b_t_japanese2[] ;
extern const uint8_t
    u8g2_font_b16_b_t_japanese3[] ;
extern const uint8_t u8g2_font_f16_t_japanese1[] ;
extern const uint8_t u8g2_font_f16_t_japanese2[] ;
extern const uint8_t
    u8g2_font_f16_b_t_japanese1[] ;
extern const uint8_t
    u8g2_font_f16_b_t_japanese2[] ;
extern const uint8_t u8g2_font_artossans8_8r[] ;
extern const uint8_t u8g2_font_artossans8_8n[] ;
extern const uint8_t u8g2_font_artossans8_8u[] ;
extern const uint8_t u8g2_font_artosserif8_8r[] ;
extern const uint8_t u8g2_font_artosserif8_8n[] ;
extern const uint8_t u8g2_font_artosserif8_8u[] ;
extern const uint8_t
    u8g2_font_chroma48medium8_8r[] ;
extern const uint8_t
    u8g2_font_chroma48medium8_8n[] ;
extern const uint8_t
    u8g2_font_chroma48medium8_8u[] ;
extern const uint8_t
    u8g2_font_saikyosansbold8_8n[] ;
extern const uint8_t
    u8g2_font_saikyosansbold8_8u[] ;
extern const uint8_t
    u8g2_font_torussansbold8_8r[] ;
extern const uint8_t
    u8g2_font_torussansbold8_8n[] ;
extern const uint8_t
    u8g2_font_torussansbold8_8u[] ;
extern const uint8_t u8g2_font_victoriabold8_8r[] ;
extern const uint8_t u8g2_font_victoriabold8_8n[] ;
extern const uint8_t u8g2_font_victoriabold8_8u[] ;
extern const uint8_t
    u8g2_font_victoriamedium8_8r[] ;
extern const uint8_t
    u8g2_font_victoriamedium8_8n[] ;
extern const uint8_t
    u8g2_font_victoriamedium8_8u[] ;
extern const uint8_t u8g2_font_courB08_tf[] ;
extern const uint8_t u8g2_font_courB08_tr[] ;
extern const uint8_t u8g2_font_courB08_tn[] ;
extern const uint8_t u8g2_font_courB10_tf[] ;
extern const uint8_t u8g2_font_courB10_tr[] ;
extern const uint8_t u8g2_font_courB10_tn[] ;
extern const uint8_t u8g2_font_courB12_tf[] ;
extern const uint8_t u8g2_font_courB12_tr[] ;
extern const uint8_t u8g2_font_courB12_tn[] ;
extern const uint8_t u8g2_font_courB14_tf[] ;
extern const uint8_t u8g2_font_courB14_tr[] ;
extern const uint8_t u8g2_font_courB14_tn[] ;
extern const uint8_t u8g2_font_courB18_tf[] ;
extern const uint8_t u8g2_font_courB18_tr[] ;
extern const uint8_t u8g2_font_courB18_tn[] ;
extern const uint8_t u8g2_font_courB24_tf[] ;
extern const uint8_t u8g2_font_courB24_tr[] ;
extern const uint8_t u8g2_font_courB24_tn[] ;
extern const uint8_t u8g2_font_courR08_tf[] ;
extern const uint8_t u8g2_font_courR08_tr[] ;
extern const uint8_t u8g2_font_courR08_tn[] ;
extern const uint8_t u8g2_font_courR10_tf[] ;
extern const uint8_t u8g2_font_courR10_tr[] ;
extern const uint8_t u8g2_font_courR10_tn[] ;
extern const uint8_t u8g2_font_courR12_tf[] ;
extern const uint8_t u8g2_font_courR12_tr[] ;
extern const uint8_t u8g2_font_courR12_tn[] ;
extern const uint8_t u8g2_font_courR14_tf[] ;
extern const uint8_t u8g2_font_courR14_tr[] ;
extern const uint8_t u8g2_font_courR14_tn[] ;
extern const uint8_t u8g2_font_courR18_tf[] ;
extern const uint8_t u8g2_font_courR18_tr[] ;
extern const uint8_t u8g2_font_courR18_tn[] ;
extern const uint8_t u8g2_font_courR24_tf[] ;
extern const uint8_t u8g2_font_courR24_tr[] ;
extern const uint8_t u8g2_font_courR24_tn[] ;
extern const uint8_t u8g2_font_helvB08_tf[] ;
extern const uint8_t u8g2_font_helvB08_tr[] ;
extern const uint8_t u8g2_font_helvB08_tn[] ;
extern const uint8_t u8g2_font_helvB08_te[] ;
extern const uint8_t u8g2_font_helvB10_tf[] ;
extern const uint8_t u8g2_font_helvB10_tr[] ;
extern const uint8_t u8g2_font_helvB10_tn[] ;
extern const uint8_t u8g2_font_helvB10_te[] ;
extern const uint8_t u8g2_font_helvB12_tf[] ;
extern const uint8_t u8g2_font_helvB12_tr[] ;
extern const uint8_t u8g2_font_helvB12_tn[] ;
extern const uint8_t u8g2_font_helvB12_te[] ;
extern const uint8_t u8g2_font_helvB14_tf[] ;
extern const uint8_t u8g2_font_helvB14_tr[] ;
extern const uint8_t u8g2_font_helvB14_tn[] ;
extern const uint8_t u8g2_font_helvB14_te[] ;
extern const uint8_t u8g2_font_helvB18_tf[] ;
extern const uint8_t u8g2_font_helvB18_tr[] ;
extern const uint8_t u8g2_font_helvB18_tn[] ;
extern const uint8_t u8g2_font_helvB18_te[] ;
extern const uint8_t u8g2_font_helvB24_tf[] ;
extern const uint8_t u8g2_font_helvB24_tr[] ;
extern const uint8_t u8g2_font_helvB24_tn[] ;
extern const uint8_t u8g2_font_helvB24_te[] ;
extern const uint8_t u8g2_font_helvR08_tf[] ;
extern const uint8_t u8g2_font_helvR08_tr[] ;
extern const uint8_t u8g2_font_helvR08_tn[] ;
extern const uint8_t u8g2_font_helvR08_te[] ;
extern const uint8_t u8g2_font_helvR10_tf[] ;
extern const uint8_t u8g2_font_helvR10_tr[] ;
extern const uint8_t u8g2_font_helvR10_tn[] ;
extern const uint8_t u8g2_font_helvR10_te[] ;
extern const uint8_t u8g2_font_helvR12_tf[] ;
extern const uint8_t u8g2_font_helvR12_tr[] ;
extern const uint8_t u8g2_font_helvR12_tn[] ;
extern const uint8_t u8g2_font_helvR12_te[] ;
extern const uint8_t u8g2_font_helvR14_tf[] ;
extern const uint8_t u8g2_font_helvR14_tr[] ;
extern const uint8_t u8g2_font_helvR14_tn[] ;
extern const uint8_t u8g2_font_helvR14_te[] ;
extern const uint8_t u8g2_font_helvR18_tf[] ;
extern const uint8_t u8g2_font_helvR18_tr[] ;
extern const uint8_t u8g2_font_helvR18_tn[] ;
extern const uint8_t u8g2_font_helvR18_te[] ;
extern const uint8_t u8g2_font_helvR24_tf[] ;
extern const uint8_t u8g2_font_helvR24_tr[] ;
extern const uint8_t u8g2_font_helvR24_tn[] ;
extern const uint8_t u8g2_font_helvR24_te[] ;
extern const uint8_t u8g2_font_ncenB08_tf[] ;
extern const uint8_t u8g2_font_ncenB08_tr[] ;
extern const uint8_t u8g2_font_ncenB08_tn[] ;
extern const uint8_t u8g2_font_ncenB08_te[] ;
extern const uint8_t u8g2_font_ncenB10_tf[] ;
extern const uint8_t u8g2_font_ncenB10_tr[] ;
extern const uint8_t u8g2_font_ncenB10_tn[] ;
extern const uint8_t u8g2_font_ncenB10_te[] ;
extern const uint8_t u8g2_font_ncenB12_tf[] ;
extern const uint8_t u8g2_font_ncenB12_tr[] ;
extern const uint8_t u8g2_font_ncenB12_tn[] ;
extern const uint8_t u8g2_font_ncenB12_te[] ;
extern const uint8_t u8g2_font_ncenB14_tf[] ;
extern const uint8_t u8g2_font_ncenB14_tr[] ;
extern const uint8_t u8g2_font_ncenB14_tn[] ;
extern const uint8_t u8g2_font_ncenB14_te[] ;
extern const uint8_t u8g2_font_ncenB18_tf[] ;
extern const uint8_t u8g2_font_ncenB18_tr[] ;
extern const uint8_t u8g2_font_ncenB18_tn[] ;
extern const uint8_t u8g2_font_ncenB18_te[] ;
extern const uint8_t u8g2_font_ncenB24_tf[] ;
extern const uint8_t u8g2_font_ncenB24_tr[] ;
extern const uint8_t u8g2_font_ncenB24_tn[] ;
extern const uint8_t u8g2_font_ncenB24_te[] ;
extern const uint8_t u8g2_font_ncenR08_tf[] ;
extern const uint8_t u8g2_font_ncenR08_tr[] ;
extern const uint8_t u8g2_font_ncenR08_tn[] ;
extern const uint8_t u8g2_font_ncenR08_te[] ;
extern const uint8_t u8g2_font_ncenR10_tf[] ;
extern const uint8_t u8g2_font_ncenR10_tr[] ;
extern const uint8_t u8g2_font_ncenR10_tn[] ;
extern const uint8_t u8g2_font_ncenR10_te[] ;
extern const uint8_t u8g2_font_ncenR12_tf[] ;
extern const uint8_t u8g2_font_ncenR12_tr[] ;
extern const uint8_t u8g2_font_ncenR12_tn[] ;
extern const uint8_t u8g2_font_ncenR12_te[] ;
extern const uint8_t u8g2_font_ncenR14_tf[] ;
extern const uint8_t u8g2_font_ncenR14_tr[] ;
extern const uint8_t u8g2_font_ncenR14_tn[] ;
extern const uint8_t u8g2_font_ncenR14_te[] ;
extern const uint8_t u8g2_font_ncenR18_tf[] ;
extern const uint8_t u8g2_font_ncenR18_tr[] ;
extern const uint8_t u8g2_font_ncenR18_tn[] ;
extern const uint8_t u8g2_font_ncenR18_te[] ;
extern const uint8_t u8g2_font_ncenR24_tf[] ;
extern const uint8_t u8g2_font_ncenR24_tr[] ;
extern const uint8_t u8g2_font_ncenR24_tn[] ;
extern const uint8_t u8g2_font_ncenR24_te[] ;
extern const uint8_t u8g2_font_timB08_tf[] ;
extern const uint8_t u8g2_font_timB08_tr[] ;
extern const uint8_t u8g2_font_timB08_tn[] ;
extern const uint8_t u8g2_font_timB10_tf[] ;
extern const uint8_t u8g2_font_timB10_tr[] ;
extern const uint8_t u8g2_font_timB10_tn[] ;
extern const uint8_t u8g2_font_timB12_tf[] ;
extern const uint8_t u8g2_font_timB12_tr[] ;
extern const uint8_t u8g2_font_timB12_tn[] ;
extern const uint8_t u8g2_font_timB14_tf[] ;
extern const uint8_t u8g2_font_timB14_tr[] ;
extern const uint8_t u8g2_font_timB14_tn[] ;
extern const uint8_t u8g2_font_timB18_tf[] ;
extern const uint8_t u8g2_font_timB18_tr[] ;
extern const uint8_t u8g2_font_timB18_tn[] ;
extern const uint8_t u8g2_font_timB24_tf[] ;
extern const uint8_t u8g2_font_timB24_tr[] ;
extern const uint8_t u8g2_font_timB24_tn[] ;
extern const uint8_t u8g2_font_timR08_tf[] ;
extern const uint8_t u8g2_font_timR08_tr[] ;
extern const uint8_t u8g2_font_timR08_tn[] ;
extern const uint8_t u8g2_font_timR10_tf[] ;
extern const uint8_t u8g2_font_timR10_tr[] ;
extern const uint8_t u8g2_font_timR10_tn[] ;
extern const uint8_t u8g2_font_timR12_tf[] ;
extern const uint8_t u8g2_font_timR12_tr[] ;
extern const uint8_t u8g2_font_timR12_tn[] ;
extern const uint8_t u8g2_font_timR14_tf[] ;
extern const uint8_t u8g2_font_timR14_tr[] ;
extern const uint8_t u8g2_font_timR14_tn[] ;
extern const uint8_t u8g2_font_timR18_tf[] ;
extern const uint8_t u8g2_font_timR18_tr[] ;
extern const uint8_t u8g2_font_timR18_tn[] ;
extern const uint8_t u8g2_font_timR24_tf[] ;
extern const uint8_t u8g2_font_timR24_tr[] ;
extern const uint8_t u8g2_font_timR24_tn[] ;
extern const uint8_t u8g2_font_lubB08_tf[] ;
extern const uint8_t u8g2_font_lubB08_tr[] ;
extern const uint8_t u8g2_font_lubB08_tn[] ;
extern const uint8_t u8g2_font_lubB08_te[] ;
extern const uint8_t u8g2_font_lubB10_tf[] ;
extern const uint8_t u8g2_font_lubB10_tr[] ;
extern const uint8_t u8g2_font_lubB10_tn[] ;
extern const uint8_t u8g2_font_lubB10_te[] ;
extern const uint8_t u8g2_font_lubB12_tf[] ;
extern const uint8_t u8g2_font_lubB12_tr[] ;
extern const uint8_t u8g2_font_lubB12_tn[] ;
extern const uint8_t u8g2_font_lubB12_te[] ;
extern const uint8_t u8g2_font_lubB14_tf[] ;
extern const uint8_t u8g2_font_lubB14_tr[] ;
extern const uint8_t u8g2_font_lubB14_tn[] ;
extern const uint8_t u8g2_font_lubB14_te[] ;
extern const uint8_t u8g2_font_lubB18_tf[] ;
extern const uint8_t u8g2_font_lubB18_tr[] ;
extern const uint8_t u8g2_font_lubB18_tn[] ;
extern const uint8_t u8g2_font_lubB18_te[] ;
extern const uint8_t u8g2_font_lubB19_tf[] ;
extern const uint8_t u8g2_font_lubB19_tr[] ;
extern const uint8_t u8g2_font_lubB19_tn[] ;
extern const uint8_t u8g2_font_lubB19_te[] ;
extern const uint8_t u8g2_font_lubB24_tf[] ;
extern const uint8_t u8g2_font_lubB24_tr[] ;
extern const uint8_t u8g2_font_lubB24_tn[] ;
extern const uint8_t u8g2_font_lubB24_te[] ;
extern const uint8_t u8g2_font_lubBI08_tf[] ;
extern const uint8_t u8g2_font_lubBI08_tr[] ;
extern const uint8_t u8g2_font_lubBI08_tn[] ;
extern const uint8_t u8g2_font_lubBI08_te[] ;
extern const uint8_t u8g2_font_lubBI10_tf[] ;
extern const uint8_t u8g2_font_lubBI10_tr[] ;
extern const uint8_t u8g2_font_lubBI10_tn[] ;
extern const uint8_t u8g2_font_lubBI10_te[] ;
extern const uint8_t u8g2_font_lubBI12_tf[] ;
extern const uint8_t u8g2_font_lubBI12_tr[] ;
extern const uint8_t u8g2_font_lubBI12_tn[] ;
extern const uint8_t u8g2_font_lubBI12_te[] ;
extern const uint8_t u8g2_font_lubBI14_tf[] ;
extern const uint8_t u8g2_font_lubBI14_tr[] ;
extern const uint8_t u8g2_font_lubBI14_tn[] ;
extern const uint8_t u8g2_font_lubBI14_te[] ;
extern const uint8_t u8g2_font_lubBI18_tf[] ;
extern const uint8_t u8g2_font_lubBI18_tr[] ;
extern const uint8_t u8g2_font_lubBI18_tn[] ;
extern const uint8_t u8g2_font_lubBI18_te[] ;
extern const uint8_t u8g2_font_lubBI19_tf[] ;
extern const uint8_t u8g2_font_lubBI19_tr[] ;
extern const uint8_t u8g2_font_lubBI19_tn[] ;
extern const uint8_t u8g2_font_lubBI19_te[] ;
extern const uint8_t u8g2_font_lubBI24_tf[] ;
extern const uint8_t u8g2_font_lubBI24_tr[] ;
extern const uint8_t u8g2_font_lubBI24_tn[] ;
extern const uint8_t u8g2_font_lubBI24_te[] ;
extern const uint8_t u8g2_font_lubI08_tf[] ;
extern const uint8_t u8g2_font_lubI08_tr[] ;
extern const uint8_t u8g2_font_lubI08_tn[] ;
extern const uint8_t u8g2_font_lubI08_te[] ;
extern const uint8_t u8g2_font_lubI10_tf[] ;
extern const uint8_t u8g2_font_lubI10_tr[] ;
extern const uint8_t u8g2_font_lubI10_tn[] ;
extern const uint8_t u8g2_font_lubI10_te[] ;
extern const uint8_t u8g2_font_lubI12_tf[] ;
extern const uint8_t u8g2_font_lubI12_tr[] ;
extern const uint8_t u8g2_font_lubI12_tn[] ;
extern const uint8_t u8g2_font_lubI12_te[] ;
extern const uint8_t u8g2_font_lubI14_tf[] ;
extern const uint8_t u8g2_font_lubI14_tr[] ;
extern const uint8_t u8g2_font_lubI14_tn[] ;
extern const uint8_t u8g2_font_lubI14_te[] ;
extern const uint8_t u8g2_font_lubI18_tf[] ;
extern const uint8_t u8g2_font_lubI18_tr[] ;
extern const uint8_t u8g2_font_lubI18_tn[] ;
extern const uint8_t u8g2_font_lubI18_te[] ;
extern const uint8_t u8g2_font_lubI19_tf[] ;
extern const uint8_t u8g2_font_lubI19_tr[] ;
extern const uint8_t u8g2_font_lubI19_tn[] ;
extern const uint8_t u8g2_font_lubI19_te[] ;
extern const uint8_t u8g2_font_lubI24_tf[] ;
extern const uint8_t u8g2_font_lubI24_tr[] ;
extern const uint8_t u8g2_font_lubI24_tn[] ;
extern const uint8_t u8g2_font_lubI24_te[] ;
extern const uint8_t u8g2_font_luBIS08_tf[] ;
extern const uint8_t u8g2_font_luBIS08_tr[] ;
extern const uint8_t u8g2_font_luBIS08_tn[] ;
extern const uint8_t u8g2_font_luBIS08_te[] ;
extern const uint8_t u8g2_font_luBIS10_tf[] ;
extern const uint8_t u8g2_font_luBIS10_tr[] ;
extern const uint8_t u8g2_font_luBIS10_tn[] ;
extern const uint8_t u8g2_font_luBIS10_te[] ;
extern const uint8_t u8g2_font_luBIS12_tf[] ;
extern const uint8_t u8g2_font_luBIS12_tr[] ;
extern const uint8_t u8g2_font_luBIS12_tn[] ;
extern const uint8_t u8g2_font_luBIS12_te[] ;
extern const uint8_t u8g2_font_luBIS14_tf[] ;
extern const uint8_t u8g2_font_luBIS14_tr[] ;
extern const uint8_t u8g2_font_luBIS14_tn[] ;
extern const uint8_t u8g2_font_luBIS14_te[] ;
extern const uint8_t u8g2_font_luBIS18_tf[] ;
extern const uint8_t u8g2_font_luBIS18_tr[] ;
extern const uint8_t u8g2_font_luBIS18_tn[] ;
extern const uint8_t u8g2_font_luBIS18_te[] ;
extern const uint8_t u8g2_font_luBIS19_tf[] ;
extern const uint8_t u8g2_font_luBIS19_tr[] ;
extern const uint8_t u8g2_font_luBIS19_tn[] ;
extern const uint8_t u8g2_font_luBIS19_te[] ;
extern const uint8_t u8g2_font_luBIS24_tf[] ;
extern const uint8_t u8g2_font_luBIS24_tr[] ;
extern const uint8_t u8g2_font_luBIS24_tn[] ;
extern const uint8_t u8g2_font_luBIS24_te[] ;
extern const uint8_t u8g2_font_lubR08_tf[] ;
extern const uint8_t u8g2_font_lubR08_tr[] ;
extern const uint8_t u8g2_font_lubR08_tn[] ;
extern const uint8_t u8g2_font_lubR08_te[] ;
extern const uint8_t u8g2_font_lubR10_tf[] ;
extern const uint8_t u8g2_font_lubR10_tr[] ;
extern const uint8_t u8g2_font_lubR10_tn[] ;
extern const uint8_t u8g2_font_lubR10_te[] ;
extern const uint8_t u8g2_font_lubR12_tf[] ;
extern const uint8_t u8g2_font_lubR12_tr[] ;
extern const uint8_t u8g2_font_lubR12_tn[] ;
extern const uint8_t u8g2_font_lubR12_te[] ;
extern const uint8_t u8g2_font_lubR14_tf[] ;
extern const uint8_t u8g2_font_lubR14_tr[] ;
extern const uint8_t u8g2_font_lubR14_tn[] ;
extern const uint8_t u8g2_font_lubR14_te[] ;
extern const uint8_t u8g2_font_lubR18_tf[] ;
extern const uint8_t u8g2_font_lubR18_tr[] ;
extern const uint8_t u8g2_font_lubR18_tn[] ;
extern const uint8_t u8g2_font_lubR18_te[] ;
extern const uint8_t u8g2_font_lubR19_tf[] ;
extern const uint8_t u8g2_font_lubR19_tr[] ;
extern const uint8_t u8g2_font_lubR19_tn[] ;
extern const uint8_t u8g2_font_lubR19_te[] ;
extern const uint8_t u8g2_font_lubR24_tf[] ;
extern const uint8_t u8g2_font_lubR24_tr[] ;
extern const uint8_t u8g2_font_lubR24_tn[] ;
extern const uint8_t u8g2_font_lubR24_te[] ;
extern const uint8_t u8g2_font_luBS08_tf[] ;
extern const uint8_t u8g2_font_luBS08_tr[] ;
extern const uint8_t u8g2_font_luBS08_tn[] ;
extern const uint8_t u8g2_font_luBS08_te[] ;
extern const uint8_t u8g2_font_luBS10_tf[] ;
extern const uint8_t u8g2_font_luBS10_tr[] ;
extern const uint8_t u8g2_font_luBS10_tn[] ;
extern const uint8_t u8g2_font_luBS10_te[] ;
extern const uint8_t u8g2_font_luBS12_tf[] ;
extern const uint8_t u8g2_font_luBS12_tr[] ;
extern const uint8_t u8g2_font_luBS12_tn[] ;
extern const uint8_t u8g2_font_luBS12_te[] ;
extern const uint8_t u8g2_font_luBS14_tf[] ;
extern const uint8_t u8g2_font_luBS14_tr[] ;
extern const uint8_t u8g2_font_luBS14_tn[] ;
extern const uint8_t u8g2_font_luBS14_te[] ;
extern const uint8_t u8g2_font_luBS18_tf[] ;
extern const uint8_t u8g2_font_luBS18_tr[] ;
extern const uint8_t u8g2_font_luBS18_tn[] ;
extern const uint8_t u8g2_font_luBS18_te[] ;
extern const uint8_t u8g2_font_luBS19_tf[] ;
extern const uint8_t u8g2_font_luBS19_tr[] ;
extern const uint8_t u8g2_font_luBS19_tn[] ;
extern const uint8_t u8g2_font_luBS19_te[] ;
extern const uint8_t u8g2_font_luBS24_tf[] ;
extern const uint8_t u8g2_font_luBS24_tr[] ;
extern const uint8_t u8g2_font_luBS24_tn[] ;
extern const uint8_t u8g2_font_luBS24_te[] ;
extern const uint8_t u8g2_font_luIS08_tf[] ;
extern const uint8_t u8g2_font_luIS08_tr[] ;
extern const uint8_t u8g2_font_luIS08_tn[] ;
extern const uint8_t u8g2_font_luIS08_te[] ;
extern const uint8_t u8g2_font_luIS10_tf[] ;
extern const uint8_t u8g2_font_luIS10_tr[] ;
extern const uint8_t u8g2_font_luIS10_tn[] ;
extern const uint8_t u8g2_font_luIS10_te[] ;
extern const uint8_t u8g2_font_luIS12_tf[] ;
extern const uint8_t u8g2_font_luIS12_tr[] ;
extern const uint8_t u8g2_font_luIS12_tn[] ;
extern const uint8_t u8g2_font_luIS12_te[] ;
extern const uint8_t u8g2_font_luIS14_tf[] ;
extern const uint8_t u8g2_font_luIS14_tr[] ;
extern const uint8_t u8g2_font_luIS14_tn[] ;
extern const uint8_t u8g2_font_luIS14_te[] ;
extern const uint8_t u8g2_font_luIS18_tf[] ;
extern const uint8_t u8g2_font_luIS18_tr[] ;
extern const uint8_t u8g2_font_luIS18_tn[] ;
extern const uint8_t u8g2_font_luIS18_te[] ;
extern const uint8_t u8g2_font_luIS19_tf[] ;
extern const uint8_t u8g2_font_luIS19_tr[] ;
extern const uint8_t u8g2_font_luIS19_tn[] ;
extern const uint8_t u8g2_font_luIS19_te[] ;
extern const uint8_t u8g2_font_luIS24_tf[] ;
extern const uint8_t u8g2_font_luIS24_tr[] ;
extern const uint8_t u8g2_font_luIS24_tn[] ;
extern const uint8_t u8g2_font_luIS24_te[] ;
extern const uint8_t u8g2_font_luRS08_tf[] ;
extern const uint8_t u8g2_font_luRS08_tr[] ;
extern const uint8_t u8g2_font_luRS08_tn[] ;
extern const uint8_t u8g2_font_luRS08_te[] ;
extern const uint8_t u8g2_font_luRS10_tf[] ;
extern const uint8_t u8g2_font_luRS10_tr[] ;
extern const uint8_t u8g2_font_luRS10_tn[] ;
extern const uint8_t u8g2_font_luRS10_te[] ;
extern const uint8_t u8g2_font_luRS12_tf[] ;
extern const uint8_t u8g2_font_luRS12_tr[] ;
extern const uint8_t u8g2_font_luRS12_tn[] ;
extern const uint8_t u8g2_font_luRS12_te[] ;
extern const uint8_t u8g2_font_luRS14_tf[] ;
extern const uint8_t u8g2_font_luRS14_tr[] ;
extern const uint8_t u8g2_font_luRS14_tn[] ;
extern const uint8_t u8g2_font_luRS14_te[] ;
extern const uint8_t u8g2_font_luRS18_tf[] ;
extern const uint8_t u8g2_font_luRS18_tr[] ;
extern const uint8_t u8g2_font_luRS18_tn[] ;
extern const uint8_t u8g2_font_luRS18_te[] ;
extern const uint8_t u8g2_font_luRS19_tf[] ;
extern const uint8_t u8g2_font_luRS19_tr[] ;
extern const uint8_t u8g2_font_luRS19_tn[] ;
extern const uint8_t u8g2_font_luRS19_te[] ;
extern const uint8_t u8g2_font_luRS24_tf[] ;
extern const uint8_t u8g2_font_luRS24_tr[] ;
extern const uint8_t u8g2_font_luRS24_tn[] ;
extern const uint8_t u8g2_font_luRS24_te[] ;
extern const uint8_t u8g2_font_baby_tf[] ;
extern const uint8_t u8g2_font_baby_tr[] ;
extern const uint8_t u8g2_font_baby_tn[] ;
extern const uint8_t u8g2_font_blipfest_07_tr[] ;
extern const uint8_t u8g2_font_blipfest_07_tn[] ;
extern const uint8_t u8g2_font_chikita_tf[] ;
extern const uint8_t u8g2_font_chikita_tr[] ;
extern const uint8_t u8g2_font_chikita_tn[] ;
extern const uint8_t
    u8g2_font_lucasfont_alternate_tf[] ;
extern const uint8_t
    u8g2_font_lucasfont_alternate_tr[] ;
extern const uint8_t
    u8g2_font_lucasfont_alternate_tn[] ;
extern const uint8_t u8g2_font_p01type_tf[] ;
extern const uint8_t u8g2_font_p01type_tr[] ;
extern const uint8_t u8g2_font_p01type_tn[] ;
extern const uint8_t u8g2_font_pixelle_micro_tr[] ;
extern const uint8_t u8g2_font_pixelle_micro_tn[] ;
extern const uint8_t u8g2_font_robot_de_niro_tf[] ;
extern const uint8_t u8g2_font_robot_de_niro_tr[] ;
extern const uint8_t u8g2_font_robot_de_niro_tn[] ;
extern const uint8_t u8g2_font_trixel_square_tf[] ;
extern const uint8_t u8g2_font_trixel_square_tr[] ;
extern const uint8_t u8g2_font_trixel_square_tn[] ;
extern const uint8_t u8g2_font_haxrcorp4089_tr[] ;
extern const uint8_t u8g2_font_haxrcorp4089_tn[] ;
extern const uint8_t
    u8g2_font_haxrcorp4089_t_cyrillic[] ;
extern const uint8_t u8g2_font_bubble_tr[] ;
extern const uint8_t u8g2_font_bubble_tn[] ;
extern const uint8_t
    u8g2_font_cardimon_pixel_tf[] ;
extern const uint8_t
    u8g2_font_cardimon_pixel_tr[] ;
extern const uint8_t
    u8g2_font_cardimon_pixel_tn[] ;
extern const uint8_t u8g2_font_maniac_tf[] ;
extern const uint8_t u8g2_font_maniac_tr[] ;
extern const uint8_t u8g2_font_maniac_tn[] ;
extern const uint8_t u8g2_font_maniac_te[] ;
extern const uint8_t u8g2_font_lucasarts_scumm_subtitle_o_tf[] ;
extern const uint8_t u8g2_font_lucasarts_scumm_subtitle_o_tr[] ;
extern const uint8_t u8g2_font_lucasarts_scumm_subtitle_o_tn[] ;
extern const uint8_t u8g2_font_lucasarts_scumm_subtitle_r_tf[] ;
extern const uint8_t u8g2_font_lucasarts_scumm_subtitle_r_tr[] ;
extern const uint8_t u8g2_font_lucasarts_scumm_subtitle_r_tn[] ;
extern const uint8_t u8g2_font_fub11_tf[] ;
extern const uint8_t u8g2_font_fub11_tr[] ;
extern const uint8_t u8g2_font_fub11_tn[] ;
extern const uint8_t u8g2_font_fub14_tf[] ;
extern const uint8_t u8g2_font_fub14_tr[] ;
extern const uint8_t u8g2_font_fub14_tn[] ;
extern const uint8_t u8g2_font_fub17_tf[] ;
extern const uint8_t u8g2_font_fub17_tr[] ;
extern const uint8_t u8g2_font_fub17_tn[] ;
extern const uint8_t u8g2_font_fub20_tf[] ;
extern const uint8_t u8g2_font_fub20_tr[] ;
extern const uint8_t u8g2_font_fub20_tn[] ;
extern const uint8_t u8g2_font_fub25_tf[] ;
extern const uint8_t u8g2_font_fub25_tr[] ;
extern const uint8_t u8g2_font_fub25_tn[] ;
extern const uint8_t u8g2_font_fub30_tf[] ;
extern const uint8_t u8g2_font_fub30_tr[] ;
extern const uint8_t u8g2_font_fub30_tn[] ;
extern const uint8_t u8g2_font_fub35_tf[] ;
extern const uint8_t u8g2_font_fub35_tr[] ;
extern const uint8_t u8g2_font_fub35_tn[] ;
extern const uint8_t u8g2_font_fub42_tf[] ;
extern const uint8_t u8g2_font_fub42_tr[] ;
extern const uint8_t u8g2_font_fub42_tn[] ;
extern const uint8_t u8g2_font_fub49_tn[] ;
extern const uint8_t u8g2_font_fub11_t_symbol[] ;
extern const uint8_t u8g2_font_fub14_t_symbol[] ;
extern const uint8_t u8g2_font_fub17_t_symbol[] ;
extern const uint8_t u8g2_font_fub20_t_symbol[] ;
extern const uint8_t u8g2_font_fub25_t_symbol[] ;
extern const uint8_t u8g2_font_fub30_t_symbol[] ;
extern const uint8_t u8g2_font_fub35_t_symbol[] ;
extern const uint8_t u8g2_font_fub42_t_symbol[] ;
extern const uint8_t u8g2_font_fub49_t_symbol[] ;
extern const uint8_t u8g2_font_fur11_tf[] ;
extern const uint8_t u8g2_font_fur11_tr[] ;
extern const uint8_t u8g2_font_fur11_tn[] ;
extern const uint8_t u8g2_font_fur14_tf[] ;
extern const uint8_t u8g2_font_fur14_tr[] ;
extern const uint8_t u8g2_font_fur14_tn[] ;
extern const uint8_t u8g2_font_fur17_tf[] ;
extern const uint8_t u8g2_font_fur17_tr[] ;
extern const uint8_t u8g2_font_fur17_tn[] ;
extern const uint8_t u8g2_font_fur20_tf[] ;
extern const uint8_t u8g2_font_fur20_tr[] ;
extern const uint8_t u8g2_font_fur20_tn[] ;
extern const uint8_t u8g2_font_fur25_tf[] ;
extern const uint8_t u8g2_font_fur25_tr[] ;
extern const uint8_t u8g2_font_fur25_tn[] ;
extern const uint8_t u8g2_font_fur30_tf[] ;
extern const uint8_t u8g2_font_fur30_tr[] ;
extern const uint8_t u8g2_font_fur30_tn[] ;
extern const uint8_t u8g2_font_fur35_tf[] ;
extern const uint8_t u8g2_font_fur35_tr[] ;
extern const uint8_t u8g2_font_fur35_tn[] ;
extern const uint8_t u8g2_font_fur42_tf[] ;
extern const uint8_t u8g2_font_fur42_tr[] ;
extern const uint8_t u8g2_font_fur42_tn[] ;
extern const uint8_t u8g2_font_fur49_tn[] ;
extern const uint8_t u8g2_font_fur11_t_symbol[] ;
extern const uint8_t u8g2_font_fur14_t_symbol[] ;
extern const uint8_t u8g2_font_fur17_t_symbol[] ;
extern const uint8_t u8g2_font_fur20_t_symbol[] ;
extern const uint8_t u8g2_font_fur25_t_symbol[] ;
extern const uint8_t u8g2_font_fur30_t_symbol[] ;
extern const uint8_t u8g2_font_fur35_t_symbol[] ;
extern const uint8_t u8g2_font_fur42_t_symbol[] ;
extern const uint8_t u8g2_font_fur49_t_symbol[] ;
extern const uint8_t u8g2_font_osb18_tf[] ;
extern const uint8_t u8g2_font_osb18_tr[] ;
extern const uint8_t u8g2_font_osb18_tn[] ;
extern const uint8_t u8g2_font_osb21_tf[] ;
extern const uint8_t u8g2_font_osb21_tr[] ;
extern const uint8_t u8g2_font_osb21_tn[] ;
extern const uint8_t u8g2_font_osb26_tf[] ;
extern const uint8_t u8g2_font_osb26_tr[] ;
extern const uint8_t u8g2_font_osb26_tn[] ;
extern const uint8_t u8g2_font_osb29_tf[] ;
extern const uint8_t u8g2_font_osb29_tr[] ;
extern const uint8_t u8g2_font_osb29_tn[] ;
extern const uint8_t u8g2_font_osb35_tf[] ;
extern const uint8_t u8g2_font_osb35_tr[] ;
extern const uint8_t u8g2_font_osb35_tn[] ;
extern const uint8_t u8g2_font_osb41_tf[] ;
extern const uint8_t u8g2_font_osb41_tr[] ;
extern const uint8_t u8g2_font_osb41_tn[] ;
extern const uint8_t u8g2_font_osr18_tf[] ;
extern const uint8_t u8g2_font_osr18_tr[] ;
extern const uint8_t u8g2_font_osr18_tn[] ;
extern const uint8_t u8g2_font_osr21_tf[] ;
extern const uint8_t u8g2_font_osr21_tr[] ;
extern const uint8_t u8g2_font_osr21_tn[] ;
extern const uint8_t u8g2_font_osr26_tf[] ;
extern const uint8_t u8g2_font_osr26_tr[] ;
extern const uint8_t u8g2_font_osr26_tn[] ;
extern const uint8_t u8g2_font_osr29_tf[] ;
extern const uint8_t u8g2_font_osr29_tr[] ;
extern const uint8_t u8g2_font_osr29_tn[] ;
extern const uint8_t u8g2_font_osr35_tf[] ;
extern const uint8_t u8g2_font_osr35_tr[] ;
extern const uint8_t u8g2_font_osr35_tn[] ;
extern const uint8_t u8g2_font_osr41_tf[] ;
extern const uint8_t u8g2_font_osr41_tr[] ;
extern const uint8_t u8g2_font_osr41_tn[] ;
extern const uint8_t u8g2_font_inr16_mf[] ;
extern const uint8_t u8g2_font_inr16_mr[] ;
extern const uint8_t u8g2_font_inr16_mn[] ;
extern const uint8_t u8g2_font_inr19_mf[] ;
extern const uint8_t u8g2_font_inr19_mr[] ;
extern const uint8_t u8g2_font_inr19_mn[] ;
extern const uint8_t u8g2_font_inr21_mf[] ;
extern const uint8_t u8g2_font_inr21_mr[] ;
extern const uint8_t u8g2_font_inr21_mn[] ;
extern const uint8_t u8g2_font_inr24_mf[] ;
extern const uint8_t u8g2_font_inr24_mr[] ;
extern const uint8_t u8g2_font_inr24_mn[] ;
extern const uint8_t u8g2_font_inr24_t_cyrillic[] ;
extern const uint8_t u8g2_font_inr27_mf[] ;
extern const uint8_t u8g2_font_inr27_mr[] ;
extern const uint8_t u8g2_font_inr27_mn[] ;
extern const uint8_t u8g2_font_inr27_t_cyrillic[] ;
extern const uint8_t u8g2_font_inr30_mf[] ;
extern const uint8_t u8g2_font_inr30_mr[] ;
extern const uint8_t u8g2_font_inr30_mn[] ;
extern const uint8_t u8g2_font_inr30_t_cyrillic[] ;
extern const uint8_t u8g2_font_inr33_mf[] ;
extern const uint8_t u8g2_font_inr33_mr[] ;
extern const uint8_t u8g2_font_inr33_mn[] ;
extern const uint8_t u8g2_font_inr33_t_cyrillic[] ;
extern const uint8_t u8g2_font_inr38_mf[] ;
extern const uint8_t u8g2_font_inr38_mr[] ;
extern const uint8_t u8g2_font_inr38_mn[] ;
extern const uint8_t u8g2_font_inr38_t_cyrillic[] ;
extern const uint8_t u8g2_font_inr42_mf[] ;
extern const uint8_t u8g2_font_inr42_mr[] ;
extern const uint8_t u8g2_font_inr42_mn[] ;
extern const uint8_t u8g2_font_inr42_t_cyrillic[] ;
extern const uint8_t u8g2_font_inr46_mf[] ;
extern const uint8_t u8g2_font_inr46_mr[] ;
extern const uint8_t u8g2_font_inr46_mn[] ;
extern const uint8_t u8g2_font_inr46_t_cyrillic[] ;
extern const uint8_t u8g2_font_inr49_mf[] ;
extern const uint8_t u8g2_font_inr49_mr[] ;
extern const uint8_t u8g2_font_inr49_mn[] ;
extern const uint8_t u8g2_font_inr49_t_cyrillic[] ;
extern const uint8_t u8g2_font_inr53_mf[] ;
extern const uint8_t u8g2_font_inr53_mr[] ;
extern const uint8_t u8g2_font_inr53_mn[] ;
extern const uint8_t u8g2_font_inr53_t_cyrillic[] ;
extern const uint8_t u8g2_font_inr57_mn[] ;
extern const uint8_t u8g2_font_inr62_mn[] ;
extern const uint8_t u8g2_font_inb16_mf[] ;
extern const uint8_t u8g2_font_inb16_mr[] ;
extern const uint8_t u8g2_font_inb16_mn[] ;
extern const uint8_t u8g2_font_inb19_mf[] ;
extern const uint8_t u8g2_font_inb19_mr[] ;
extern const uint8_t u8g2_font_inb19_mn[] ;
extern const uint8_t u8g2_font_inb21_mf[] ;
extern const uint8_t u8g2_font_inb21_mr[] ;
extern const uint8_t u8g2_font_inb21_mn[] ;
extern const uint8_t u8g2_font_inb24_mf[] ;
extern const uint8_t u8g2_font_inb24_mr[] ;
extern const uint8_t u8g2_font_inb24_mn[] ;
extern const uint8_t u8g2_font_inb27_mf[] ;
extern const uint8_t u8g2_font_inb27_mr[] ;
extern const uint8_t u8g2_font_inb27_mn[] ;
extern const uint8_t u8g2_font_inb30_mf[] ;
extern const uint8_t u8g2_font_inb30_mr[] ;
extern const uint8_t u8g2_font_inb30_mn[] ;
extern const uint8_t u8g2_font_inb33_mf[] ;
extern const uint8_t u8g2_font_inb33_mr[] ;
extern const uint8_t u8g2_font_inb33_mn[] ;
extern const uint8_t u8g2_font_inb38_mf[] ;
extern const uint8_t u8g2_font_inb38_mr[] ;
extern const uint8_t u8g2_font_inb38_mn[] ;
extern const uint8_t u8g2_font_inb42_mf[] ;
extern const uint8_t u8g2_font_inb42_mr[] ;
extern const uint8_t u8g2_font_inb42_mn[] ;
extern const uint8_t u8g2_font_inb46_mf[] ;
extern const uint8_t u8g2_font_inb46_mr[] ;
extern const uint8_t u8g2_font_inb46_mn[] ;
extern const uint8_t u8g2_font_inb49_mf[] ;
extern const uint8_t u8g2_font_inb49_mr[] ;
extern const uint8_t u8g2_font_inb49_mn[] ;
extern const uint8_t u8g2_font_inb53_mf[] ;
extern const uint8_t u8g2_font_inb53_mr[] ;
extern const uint8_t u8g2_font_inb53_mn[] ;
extern const uint8_t u8g2_font_inb57_mn[] ;
extern const uint8_t u8g2_font_inb63_mn[] ;
extern const uint8_t u8g2_font_logisoso16_tf[] ;
extern const uint8_t u8g2_font_logisoso16_tr[] ;
extern const uint8_t u8g2_font_logisoso16_tn[] ;
extern const uint8_t u8g2_font_logisoso18_tf[] ;
extern const uint8_t u8g2_font_logisoso18_tr[] ;
extern const uint8_t u8g2_font_logisoso18_tn[] ;
extern const uint8_t u8g2_font_logisoso20_tf[] ;
extern const uint8_t u8g2_font_logisoso20_tr[] ;
extern const uint8_t u8g2_font_logisoso20_tn[] ;
extern const uint8_t u8g2_font_logisoso22_tf[] ;
extern const uint8_t u8g2_font_logisoso22_tr[] ;
extern const uint8_t u8g2_font_logisoso22_tn[] ;
extern const uint8_t u8g2_font_logisoso24_tf[] ;
extern const uint8_t u8g2_font_logisoso24_tr[] ;
extern const uint8_t u8g2_font_logisoso24_tn[] ;
extern const uint8_t u8g2_font_logisoso26_tf[] ;
extern const uint8_t u8g2_font_logisoso26_tr[] ;
extern const uint8_t u8g2_font_logisoso26_tn[] ;
extern const uint8_t u8g2_font_logisoso28_tf[] ;
extern const uint8_t u8g2_font_logisoso28_tr[] ;
extern const uint8_t u8g2_font_logisoso28_tn[] ;
extern const uint8_t u8g2_font_logisoso30_tf[] ;
extern const uint8_t u8g2_font_logisoso30_tr[] ;
extern const uint8_t u8g2_font_logisoso30_tn[] ;
extern const uint8_t u8g2_font_logisoso32_tf[] ;
extern const uint8_t u8g2_font_logisoso32_tr[] ;
extern const uint8_t u8g2_font_logisoso32_tn[] ;
extern const uint8_t u8g2_font_logisoso34_tf[] ;
extern const uint8_t u8g2_font_logisoso34_tr[] ;
extern const uint8_t u8g2_font_logisoso34_tn[] ;
extern const uint8_t u8g2_font_logisoso38_tf[] ;
extern const uint8_t u8g2_font_logisoso38_tr[] ;
extern const uint8_t u8g2_font_logisoso38_tn[] ;
extern const uint8_t u8g2_font_logisoso42_tf[] ;
extern const uint8_t u8g2_font_logisoso42_tr[] ;
extern const uint8_t u8g2_font_logisoso42_tn[] ;
extern const uint8_t u8g2_font_logisoso46_tf[] ;
extern const uint8_t u8g2_font_logisoso46_tr[] ;
extern const uint8_t u8g2_font_logisoso46_tn[] ;
extern const uint8_t u8g2_font_logisoso50_tf[] ;
extern const uint8_t u8g2_font_logisoso50_tr[] ;
extern const uint8_t u8g2_font_logisoso50_tn[] ;
extern const uint8_t u8g2_font_logisoso54_tf[] ;
extern const uint8_t u8g2_font_logisoso54_tr[] ;
extern const uint8_t u8g2_font_logisoso54_tn[] ;
extern const uint8_t u8g2_font_logisoso58_tf[] ;
extern const uint8_t u8g2_font_logisoso58_tr[] ;
extern const uint8_t u8g2_font_logisoso58_tn[] ;
extern const uint8_t u8g2_font_logisoso62_tn[] ;
extern const uint8_t u8g2_font_logisoso78_tn[] ;
extern const uint8_t u8g2_font_logisoso92_tn[] ;
extern const uint8_t u8g2_font_pressstart2p_8f[] ;
extern const uint8_t u8g2_font_pressstart2p_8r[] ;
extern const uint8_t u8g2_font_pressstart2p_8n[] ;
extern const uint8_t u8g2_font_pressstart2p_8u[] ;
extern const uint8_t u8g2_font_pcsenior_8f[] ;
extern const uint8_t u8g2_font_pcsenior_8r[] ;
extern const uint8_t u8g2_font_pcsenior_8n[] ;
extern const uint8_t u8g2_font_pcsenior_8u[] ;
extern const uint8_t
    u8g2_font_pxplusibmcgathin_8f[] ;
extern const uint8_t
    u8g2_font_pxplusibmcgathin_8r[] ;
extern const uint8_t
    u8g2_font_pxplusibmcgathin_8n[] ;
extern const uint8_t
    u8g2_font_pxplusibmcgathin_8u[] ;
extern const uint8_t u8g2_font_pxplusibmcga_8f[] ;
extern const uint8_t u8g2_font_pxplusibmcga_8r[] ;
extern const uint8_t u8g2_font_pxplusibmcga_8n[] ;
extern const uint8_t u8g2_font_pxplusibmcga_8u[] ;
extern const uint8_t
    u8g2_font_pxplustandynewtv_8f[] ;
extern const uint8_t
    u8g2_font_pxplustandynewtv_8r[] ;
extern const uint8_t
    u8g2_font_pxplustandynewtv_8n[] ;
extern const uint8_t
    u8g2_font_pxplustandynewtv_8u[] ;
extern const uint8_t
    u8g2_font_pxplustandynewtv_t_all[] ;
extern const uint8_t
    u8g2_font_pxplustandynewtv_8_all[] ;
extern const uint8_t u8g2_font_pxplusibmvga9_tf[] ;
extern const uint8_t u8g2_font_pxplusibmvga9_tr[] ;
extern const uint8_t u8g2_font_pxplusibmvga9_tn[] ;
extern const uint8_t u8g2_font_pxplusibmvga9_mf[] ;
extern const uint8_t u8g2_font_pxplusibmvga9_mr[] ;
extern const uint8_t u8g2_font_pxplusibmvga9_mn[] ;
extern const uint8_t
    u8g2_font_pxplusibmvga9_t_all[] ;
extern const uint8_t
    u8g2_font_pxplusibmvga9_m_all[] ;
extern const uint8_t u8g2_font_pxplusibmvga8_tf[] ;
extern const uint8_t u8g2_font_pxplusibmvga8_tr[] ;
extern const uint8_t u8g2_font_pxplusibmvga8_tn[] ;
extern const uint8_t u8g2_font_pxplusibmvga8_mf[] ;
extern const uint8_t u8g2_font_pxplusibmvga8_mr[] ;
extern const uint8_t u8g2_font_pxplusibmvga8_mn[] ;
extern const uint8_t
    u8g2_font_pxplusibmvga8_t_all[] ;
extern const uint8_t
    u8g2_font_pxplusibmvga8_m_all[] ;
extern const uint8_t u8g2_font_px437wyse700a_tf[] ;
extern const uint8_t u8g2_font_px437wyse700a_tr[] ;
extern const uint8_t u8g2_font_px437wyse700a_tn[] ;
extern const uint8_t u8g2_font_px437wyse700a_mf[] ;
extern const uint8_t u8g2_font_px437wyse700a_mr[] ;
extern const uint8_t u8g2_font_px437wyse700a_mn[] ;
extern const uint8_t u8g2_font_px437wyse700b_tf[] ;
extern const uint8_t u8g2_font_px437wyse700b_tr[] ;
extern const uint8_t u8g2_font_px437wyse700b_tn[] ;
extern const uint8_t u8g2_font_px437wyse700b_mf[] ;
extern const uint8_t u8g2_font_px437wyse700b_mr[] ;
extern const uint8_t u8g2_font_px437wyse700b_mn[] ;
#define u8g_font_10x20 u8g2_font_10x20_tf
#define u8g_font_10x20r u8g2_font_10x20_tr
#define u8g_font_4x6 u8g2_font_4x6_tf
#define u8g_font_4x6r u8g2_font_4x6_tr
#define u8g_font_5x7 u8g2_font_5x7_tf
#define u8g_font_5x7r u8g2_font_5x7_tr
#define u8g_font_5x8 u8g2_font_5x8_tf
#define u8g_font_5x8r u8g2_font_5x8_tr
#define u8g_font_6x10 u8g2_font_6x10_tf
#define u8g_font_6x10r u8g2_font_6x10_tr
#define u8g_font_6x12 u8g2_font_6x12_tf
#define u8g_font_6x12r u8g2_font_6x12_tr
#define u8g_font_6x13B u8g2_font_6x13B_tf
#define u8g_font_6x13Br u8g2_font_6x13B_tr
#define u8g_font_6x13 u8g2_font_6x13_tf
#define u8g_font_6x13r u8g2_font_6x13_tr
#define u8g_font_6x13O u8g2_font_6x13O_tf
#define u8g_font_6x13Or u8g2_font_6x13O_tr
#define u8g_font_7x13B u8g2_font_7x13B_tf
#define u8g_font_7x13Br u8g2_font_7x13B_tr
#define u8g_font_7x13 u8g2_font_7x13_tf
#define u8g_font_7x13r u8g2_font_7x13_tr
#define u8g_font_7x13O u8g2_font_7x13O_tf
#define u8g_font_7x13Or u8g2_font_7x13O_tr
#define u8g_font_7x14B u8g2_font_7x14B_tf
#define u8g_font_7x14Br u8g2_font_7x14B_tr
#define u8g_font_7x14 u8g2_font_7x14_tf
#define u8g_font_7x14r u8g2_font_7x14_tr
#define u8g_font_8x13B u8g2_font_8x13B_tf
#define u8g_font_8x13Br u8g2_font_8x13B_tr
#define u8g_font_8x13 u8g2_font_8x13_tf
#define u8g_font_8x13r u8g2_font_8x13_tr
#define u8g_font_8x13O u8g2_font_8x13O_tf
#define u8g_font_8x13Or u8g2_font_8x13O_tr
#define u8g_font_9x15B u8g2_font_9x15B_tf
#define u8g_font_9x15Br u8g2_font_9x15B_tr
#define u8g_font_9x15 u8g2_font_9x15_tf
#define u8g_font_9x15r u8g2_font_9x15_tr
#define u8g_font_9x18B u8g2_font_9x18B_tf
#define u8g_font_9x18 u8g2_font_9x18_tf
#define u8g_font_9x18Br u8g2_font_9x18B_tr
#define u8g_font_9x18r u8g2_font_9x18_tr
#define u8g_font_cu12 u8g2_font_cu12_tf
#define u8g_font_micro u8g2_font_micro_tf
#define u8g_font_unifont u8g2_font_unifont_t_latin
#define u8g_font_unifontr u8g2_font_unifont_t_latin
#define u8g_font_courB08 u8g2_font_courB08_tf
#define u8g_font_courB08r u8g2_font_courB08_tr
#define u8g_font_courB10 u8g2_font_courB10_tf
#define u8g_font_courB10r u8g2_font_courB10_tr
#define u8g_font_courB12 u8g2_font_courB12_tf
#define u8g_font_courB12r u8g2_font_courB12_tr
#define u8g_font_courB14 u8g2_font_courB14_tf
#define u8g_font_courB14r u8g2_font_courB14_tr
#define u8g_font_courB18 u8g2_font_courB18_tf
#define u8g_font_courB18r u8g2_font_courB18_tr
#define u8g_font_courB24 u8g2_font_courB24_tf
#define u8g_font_courB24r u8g2_font_courB24_tr
#define u8g_font_courB24n u8g2_font_courB24_tn
#define u8g_font_courR08 u8g2_font_courR08_tf
#define u8g_font_courR08r u8g2_font_courR08_tr
#define u8g_font_courR10 u8g2_font_courR10_tf
#define u8g_font_courR10r u8g2_font_courR10_tr
#define u8g_font_courR12 u8g2_font_courR12_tf
#define u8g_font_courR12r u8g2_font_courR12_tr
#define u8g_font_courR14 u8g2_font_courR14_tf
#define u8g_font_courR14r u8g2_font_courR14_tr
#define u8g_font_courR18 u8g2_font_courR18_tf
#define u8g_font_courR18r u8g2_font_courR18_tr
#define u8g_font_courR24 u8g2_font_courR24_tf
#define u8g_font_courR24r u8g2_font_courR24_tr
#define u8g_font_courR24n u8g2_font_courR24_tn
#define u8g_font_helvB08 u8g2_font_helvB08_tf
#define u8g_font_helvB08r u8g2_font_helvB08_tr
#define u8g_font_helvB08n u8g2_font_helvB08_tn
#define u8g_font_helvB10 u8g2_font_helvB10_tf
#define u8g_font_helvB10r u8g2_font_helvB10_tr
#define u8g_font_helvB10n u8g2_font_helvB10_tn
#define u8g_font_helvB12 u8g2_font_helvB12_tf
#define u8g_font_helvB12r u8g2_font_helvB12_tr
#define u8g_font_helvB12n u8g2_font_helvB12_tn
#define u8g_font_helvB14 u8g2_font_helvB14_tf
#define u8g_font_helvB14r u8g2_font_helvB14_tr
#define u8g_font_helvB14n u8g2_font_helvB14_tn
#define u8g_font_helvB18 u8g2_font_helvB18_tf
#define u8g_font_helvB18r u8g2_font_helvB18_tr
#define u8g_font_helvB18n u8g2_font_helvB18_tn
#define u8g_font_helvB24 u8g2_font_helvB24_tf
#define u8g_font_helvB24r u8g2_font_helvB24_tr
#define u8g_font_helvB24n u8g2_font_helvB24_tn
#define u8g_font_helvR08 u8g2_font_helvR08_tf
#define u8g_font_helvR08r u8g2_font_helvR08_tr
#define u8g_font_helvR08n u8g2_font_helvR08_tn
#define u8g_font_helvR10 u8g2_font_helvR10_tf
#define u8g_font_helvR10r u8g2_font_helvR10_tr
#define u8g_font_helvR10n u8g2_font_helvR10_tn
#define u8g_font_helvR12 u8g2_font_helvR12_tf
#define u8g_font_helvR12r u8g2_font_helvR12_tr
#define u8g_font_helvR12n u8g2_font_helvR12_tn
#define u8g_font_helvR14 u8g2_font_helvR14_tf
#define u8g_font_helvR14r u8g2_font_helvR14_tr
#define u8g_font_helvR14n u8g2_font_helvR14_tn
#define u8g_font_helvR18 u8g2_font_helvR18_tf
#define u8g_font_helvR18r u8g2_font_helvR18_tr
#define u8g_font_helvR18n u8g2_font_helvR18_tn
#define u8g_font_helvR24 u8g2_font_helvR24_tf
#define u8g_font_helvR24r u8g2_font_helvR24_tr
#define u8g_font_helvR24n u8g2_font_helvR24_tn
#define u8g_font_ncenB08 u8g2_font_ncenB08_tf
#define u8g_font_ncenB08r u8g2_font_ncenB08_tr
#define u8g_font_ncenB10 u8g2_font_ncenB10_tf
#define u8g_font_ncenB10r u8g2_font_ncenB10_tr
#define u8g_font_ncenB12 u8g2_font_ncenB12_tf
#define u8g_font_ncenB12r u8g2_font_ncenB12_tr
#define u8g_font_ncenB14 u8g2_font_ncenB14_tf
#define u8g_font_ncenB14r u8g2_font_ncenB14_tr
#define u8g_font_ncenB18 u8g2_font_ncenB18_tf
#define u8g_font_ncenB18r u8g2_font_ncenB18_tr
#define u8g_font_ncenB24 u8g2_font_ncenB24_tf
#define u8g_font_ncenB24r u8g2_font_ncenB24_tr
#define u8g_font_ncenB24n u8g2_font_ncenB24_tn
#define u8g_font_ncenR08 u8g2_font_ncenR08_tf
#define u8g_font_ncenR08r u8g2_font_ncenR08_tr
#define u8g_font_ncenR10 u8g2_font_ncenR10_tf
#define u8g_font_ncenR10r u8g2_font_ncenR10_tr
#define u8g_font_ncenR12 u8g2_font_ncenR12_tf
#define u8g_font_ncenR12r u8g2_font_ncenR12_tr
#define u8g_font_ncenR14 u8g2_font_ncenR14_tf
#define u8g_font_ncenR14r u8g2_font_ncenR14_tr
#define u8g_font_ncenR18 u8g2_font_ncenR18_tf
#define u8g_font_ncenR18r u8g2_font_ncenR18_tr
#define u8g_font_ncenR24 u8g2_font_ncenR24_tf
#define u8g_font_ncenR24r u8g2_font_ncenR24_tr
#define u8g_font_ncenR24n u8g2_font_ncenR24_tn
#define u8g_font_timB08 u8g2_font_timB08_tf
#define u8g_font_timB08r u8g2_font_timB08_tr
#define u8g_font_timB10 u8g2_font_timB10_tf
#define u8g_font_timB10r u8g2_font_timB10_tr
#define u8g_font_timB12 u8g2_font_timB12_tf
#define u8g_font_timB12r u8g2_font_timB12_tr
#define u8g_font_timB14 u8g2_font_timB14_tf
#define u8g_font_timB14r u8g2_font_timB14_tr
#define u8g_font_timB18 u8g2_font_timB18_tf
#define u8g_font_timB18r u8g2_font_timB18_tr
#define u8g_font_timB24 u8g2_font_timB24_tf
#define u8g_font_timB24r u8g2_font_timB24_tr
#define u8g_font_timB24n u8g2_font_timB24_tn
#define u8g_font_timR08 u8g2_font_timR08_tf
#define u8g_font_timR08r u8g2_font_timR08_tr
#define u8g_font_timR10 u8g2_font_timR10_tf
#define u8g_font_timR10r u8g2_font_timR10_tr
#define u8g_font_timR12 u8g2_font_timR12_tf
#define u8g_font_timR12r u8g2_font_timR12_tr
#define u8g_font_timR14 u8g2_font_timR14_tf
#define u8g_font_timR14r u8g2_font_timR14_tr
#define u8g_font_timR18 u8g2_font_timR18_tf
#define u8g_font_timR18r u8g2_font_timR18_tr
#define u8g_font_timR24 u8g2_font_timR24_tf
#define u8g_font_timR24r u8g2_font_timR24_tr
#define u8g_font_timR24n u8g2_font_timR24_tn
#define u8g_font_p01type u8g2_font_p01type_tf
#define u8g_font_p01typer u8g2_font_p01type_tr
#define u8g_font_lucasfont_alternate u8g2_font_lucasfont_alternate_tf
#define u8g_font_lucasfont_alternater u8g2_font_lucasfont_alternate_tr
#define u8g_font_chikita u8g2_font_chikita_tf
#define u8g_font_chikitar u8g2_font_chikita_tr
#define u8g_font_pixelle_micro u8g2_font_pixelle_micro_tf
#define u8g_font_pixelle_micror u8g2_font_pixelle_micro_tr
#define u8g_font_trixel_square u8g2_font_trixel_square_tf
#define u8g_font_trixel_squarer u8g2_font_trixel_square_tr
#define u8g_font_robot_de_niro u8g2_font_robot_de_niro_tf
#define u8g_font_robot_de_niror u8g2_font_robot_de_niro_tr
#define u8g_font_baby u8g2_font_baby_tf
#define u8g_font_babyr u8g2_font_baby_tr
#define u8g_font_blipfest_07 u8g2_font_blipfest_07_tr
#define u8g_font_blipfest_07r u8g2_font_blipfest_07_tr
#define u8g_font_blipfest_07n u8g2_font_blipfest_07_tn
#define u8g_font_profont10 u8g2_font_profont10_tf
#define u8g_font_profont10r u8g2_font_profont10_tr
#define u8g_font_profont11 u8g2_font_profont11_tf
#define u8g_font_profont11r u8g2_font_profont11_tr
#define u8g_font_profont12 u8g2_font_profont12_tf
#define u8g_font_profont12r u8g2_font_profont12_tr
#define u8g_font_profont15 u8g2_font_profont15_tf
#define u8g_font_profont15r u8g2_font_profont15_tr
#define u8g_font_profont17 u8g2_font_profont17_tf
#define u8g_font_profont17r u8g2_font_profont17_tr
#define u8g_font_profont22 u8g2_font_profont22_tf
#define u8g_font_profont22r u8g2_font_profont22_tr
#define u8g_font_profont29 u8g2_font_profont29_tf
#define u8g_font_profont29r u8g2_font_profont29_tr
#define STM32WBxx_LL_ADC_H 
#define ADC_SQR1_REGOFFSET (0x00000000UL)
#define ADC_SQR2_REGOFFSET (0x00000100UL)
#define ADC_SQR3_REGOFFSET (0x00000200UL)
#define ADC_SQR4_REGOFFSET (0x00000300UL)
#define ADC_REG_SQRX_REGOFFSET_MASK (ADC_SQR1_REGOFFSET | ADC_SQR2_REGOFFSET | ADC_SQR3_REGOFFSET | ADC_SQR4_REGOFFSET)
#define ADC_SQRX_REGOFFSET_POS (8UL)
#define ADC_REG_RANK_ID_SQRX_MASK (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
#define ADC_REG_RANK_1_SQRX_BITOFFSET_POS ( 6UL)
#define ADC_REG_RANK_2_SQRX_BITOFFSET_POS (12UL)
#define ADC_REG_RANK_3_SQRX_BITOFFSET_POS (18UL)
#define ADC_REG_RANK_4_SQRX_BITOFFSET_POS (24UL)
#define ADC_REG_RANK_5_SQRX_BITOFFSET_POS ( 0UL)
#define ADC_REG_RANK_6_SQRX_BITOFFSET_POS ( 6UL)
#define ADC_REG_RANK_7_SQRX_BITOFFSET_POS (12UL)
#define ADC_REG_RANK_8_SQRX_BITOFFSET_POS (18UL)
#define ADC_REG_RANK_9_SQRX_BITOFFSET_POS (24UL)
#define ADC_REG_RANK_10_SQRX_BITOFFSET_POS ( 0UL)
#define ADC_REG_RANK_11_SQRX_BITOFFSET_POS ( 6UL)
#define ADC_REG_RANK_12_SQRX_BITOFFSET_POS (12UL)
#define ADC_REG_RANK_13_SQRX_BITOFFSET_POS (18UL)
#define ADC_REG_RANK_14_SQRX_BITOFFSET_POS (24UL)
#define ADC_REG_RANK_15_SQRX_BITOFFSET_POS ( 0UL)
#define ADC_REG_RANK_16_SQRX_BITOFFSET_POS ( 6UL)
#define ADC_JDR1_REGOFFSET (0x00000000UL)
#define ADC_JDR2_REGOFFSET (0x00000100UL)
#define ADC_JDR3_REGOFFSET (0x00000200UL)
#define ADC_JDR4_REGOFFSET (0x00000300UL)
#define ADC_INJ_JDRX_REGOFFSET_MASK (ADC_JDR1_REGOFFSET | ADC_JDR2_REGOFFSET | ADC_JDR3_REGOFFSET | ADC_JDR4_REGOFFSET)
#define ADC_INJ_RANK_ID_JSQR_MASK (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
#define ADC_JDRX_REGOFFSET_POS (8UL)
#define ADC_INJ_RANK_1_JSQR_BITOFFSET_POS ( 8UL)
#define ADC_INJ_RANK_2_JSQR_BITOFFSET_POS (14UL)
#define ADC_INJ_RANK_3_JSQR_BITOFFSET_POS (20UL)
#define ADC_INJ_RANK_4_JSQR_BITOFFSET_POS (26UL)
#define ADC_REG_TRIG_EXT_EDGE_DEFAULT (ADC_CFGR_EXTEN_0)
#define ADC_REG_TRIG_SOURCE_MASK (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTSEL) << (4U * 0UL)) | ((ADC_CFGR_EXTSEL) << (4U * 1UL)) | ((ADC_CFGR_EXTSEL) << (4U * 2UL)) | ((ADC_CFGR_EXTSEL) << (4U * 3UL)) )
#define ADC_REG_TRIG_EDGE_MASK (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN) << (4U * 0UL)) | ((ADC_REG_TRIG_EXT_EDGE_DEFAULT) << (4U * 1UL)) | ((ADC_REG_TRIG_EXT_EDGE_DEFAULT) << (4U * 2UL)) | ((ADC_REG_TRIG_EXT_EDGE_DEFAULT) << (4U * 3UL)) )
#define ADC_REG_TRIG_EXTSEL_BITOFFSET_POS ( 6UL)
#define ADC_REG_TRIG_EXTEN_BITOFFSET_POS (10UL)
#define ADC_INJ_TRIG_EXT_EDGE_DEFAULT (ADC_JSQR_JEXTEN_0)
#define ADC_INJ_TRIG_SOURCE_MASK (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTSEL) << (4U * 0UL)) | ((ADC_JSQR_JEXTSEL) << (4U * 1UL)) | ((ADC_JSQR_JEXTSEL) << (4U * 2UL)) | ((ADC_JSQR_JEXTSEL) << (4U * 3UL)) )
#define ADC_INJ_TRIG_EDGE_MASK (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN) << (4U * 0UL)) | ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT) << (4U * 1UL)) | ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT) << (4U * 2UL)) | ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT) << (4U * 3UL)) )
#define ADC_INJ_TRIG_EXTSEL_BITOFFSET_POS ( 2UL)
#define ADC_INJ_TRIG_EXTEN_BITOFFSET_POS ( 6UL)
#define ADC_CHANNEL_ID_NUMBER_MASK (ADC_CFGR_AWD1CH)
#define ADC_CHANNEL_ID_BITFIELD_MASK (ADC_AWD2CR_AWD2CH)
#define ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS (26UL)
#define ADC_CHANNEL_ID_MASK (ADC_CHANNEL_ID_NUMBER_MASK | ADC_CHANNEL_ID_BITFIELD_MASK | ADC_CHANNEL_ID_INTERNAL_CH_MASK)
#define ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 (0x0000001FUL)
#define ADC_CHANNEL_ID_INTERNAL_CH (0x80000000UL)
#define ADC_CHANNEL_ID_INTERNAL_CH_2 (0x00080000UL)
#define ADC_CHANNEL_ID_INTERNAL_CH_MASK (ADC_CHANNEL_ID_INTERNAL_CH | ADC_CHANNEL_ID_INTERNAL_CH_2)
#define ADC_SMPR1_REGOFFSET (0x00000000UL)
#define ADC_SMPR2_REGOFFSET (0x02000000UL)
#define ADC_CHANNEL_SMPRX_REGOFFSET_MASK (ADC_SMPR1_REGOFFSET | ADC_SMPR2_REGOFFSET)
#define ADC_SMPRX_REGOFFSET_POS (25UL)
#define ADC_CHANNEL_SMPx_BITOFFSET_MASK (0x01F00000UL)
#define ADC_CHANNEL_SMPx_BITOFFSET_POS (20UL)
#define ADC_CHANNEL_0_NUMBER (0x00000000UL)
#define ADC_CHANNEL_1_NUMBER ( ADC_CFGR_AWD1CH_0)
#define ADC_CHANNEL_2_NUMBER ( ADC_CFGR_AWD1CH_1 )
#define ADC_CHANNEL_3_NUMBER ( ADC_CFGR_AWD1CH_1 | ADC_CFGR_AWD1CH_0)
#define ADC_CHANNEL_4_NUMBER ( ADC_CFGR_AWD1CH_2 )
#define ADC_CHANNEL_5_NUMBER ( ADC_CFGR_AWD1CH_2 | ADC_CFGR_AWD1CH_0)
#define ADC_CHANNEL_6_NUMBER ( ADC_CFGR_AWD1CH_2 | ADC_CFGR_AWD1CH_1 )
#define ADC_CHANNEL_7_NUMBER ( ADC_CFGR_AWD1CH_2 | ADC_CFGR_AWD1CH_1 | ADC_CFGR_AWD1CH_0)
#define ADC_CHANNEL_8_NUMBER ( ADC_CFGR_AWD1CH_3 )
#define ADC_CHANNEL_9_NUMBER ( ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH_0)
#define ADC_CHANNEL_10_NUMBER ( ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH_1 )
#define ADC_CHANNEL_11_NUMBER ( ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH_1 | ADC_CFGR_AWD1CH_0)
#define ADC_CHANNEL_12_NUMBER ( ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH_2 )
#define ADC_CHANNEL_13_NUMBER ( ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH_2 | ADC_CFGR_AWD1CH_0)
#define ADC_CHANNEL_14_NUMBER ( ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH_2 | ADC_CFGR_AWD1CH_1 )
#define ADC_CHANNEL_15_NUMBER ( ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH_2 | ADC_CFGR_AWD1CH_1 | ADC_CFGR_AWD1CH_0)
#define ADC_CHANNEL_16_NUMBER (ADC_CFGR_AWD1CH_4 )
#define ADC_CHANNEL_17_NUMBER (ADC_CFGR_AWD1CH_4 | ADC_CFGR_AWD1CH_0)
#define ADC_CHANNEL_18_NUMBER (ADC_CFGR_AWD1CH_4 | ADC_CFGR_AWD1CH_1 )
#define ADC_CHANNEL_0_BITFIELD (ADC_AWD2CR_AWD2CH_0)
#define ADC_CHANNEL_1_BITFIELD (ADC_AWD2CR_AWD2CH_1)
#define ADC_CHANNEL_2_BITFIELD (ADC_AWD2CR_AWD2CH_2)
#define ADC_CHANNEL_3_BITFIELD (ADC_AWD2CR_AWD2CH_3)
#define ADC_CHANNEL_4_BITFIELD (ADC_AWD2CR_AWD2CH_4)
#define ADC_CHANNEL_5_BITFIELD (ADC_AWD2CR_AWD2CH_5)
#define ADC_CHANNEL_6_BITFIELD (ADC_AWD2CR_AWD2CH_6)
#define ADC_CHANNEL_7_BITFIELD (ADC_AWD2CR_AWD2CH_7)
#define ADC_CHANNEL_8_BITFIELD (ADC_AWD2CR_AWD2CH_8)
#define ADC_CHANNEL_9_BITFIELD (ADC_AWD2CR_AWD2CH_9)
#define ADC_CHANNEL_10_BITFIELD (ADC_AWD2CR_AWD2CH_10)
#define ADC_CHANNEL_11_BITFIELD (ADC_AWD2CR_AWD2CH_11)
#define ADC_CHANNEL_12_BITFIELD (ADC_AWD2CR_AWD2CH_12)
#define ADC_CHANNEL_13_BITFIELD (ADC_AWD2CR_AWD2CH_13)
#define ADC_CHANNEL_14_BITFIELD (ADC_AWD2CR_AWD2CH_14)
#define ADC_CHANNEL_15_BITFIELD (ADC_AWD2CR_AWD2CH_15)
#define ADC_CHANNEL_16_BITFIELD (ADC_AWD2CR_AWD2CH_16)
#define ADC_CHANNEL_17_BITFIELD (ADC_AWD2CR_AWD2CH_17)
#define ADC_CHANNEL_18_BITFIELD (ADC_AWD2CR_AWD2CH_18)
#define ADC_CHANNEL_0_SMP (ADC_SMPR1_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_1_SMP (ADC_SMPR1_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_2_SMP (ADC_SMPR1_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_3_SMP (ADC_SMPR1_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_4_SMP (ADC_SMPR1_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_5_SMP (ADC_SMPR1_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_6_SMP (ADC_SMPR1_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_7_SMP (ADC_SMPR1_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_8_SMP (ADC_SMPR1_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_9_SMP (ADC_SMPR1_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_10_SMP (ADC_SMPR2_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_11_SMP (ADC_SMPR2_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_12_SMP (ADC_SMPR2_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_13_SMP (ADC_SMPR2_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_14_SMP (ADC_SMPR2_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_15_SMP (ADC_SMPR2_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_16_SMP (ADC_SMPR2_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_17_SMP (ADC_SMPR2_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_CHANNEL_18_SMP (ADC_SMPR2_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOFFSET_POS))
#define ADC_SINGLEDIFF_CALIB_START_MASK (ADC_CR_ADCALDIF)
#define ADC_SINGLEDIFF_CALIB_FACTOR_MASK (ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S)
#define ADC_SINGLEDIFF_CHANNEL_MASK (ADC_CHANNEL_ID_BITFIELD_MASK)
#define ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK (ADC_CALFACT_CALFACT_S_4 | ADC_CALFACT_CALFACT_S_3)
#define ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK (0x00010000UL)
#define ADC_SINGLEDIFF_CALIB_F_BIT_D_POS (16UL)
#define ADC_SINGLEDIFF_CALIB_F_BIT_D_SHIFT4 (ADC_SINGLEDIFF_CALIB_F_BIT_D_POS - 4UL)
#define ADC_AWD_CR1_REGOFFSET (0x00000000UL)
#define ADC_AWD_CR2_REGOFFSET (0x00100000UL)
#define ADC_AWD_CR3_REGOFFSET (0x00200000UL)
#define ADC_AWD_CR12_REGOFFSETGAP_MASK (ADC_AWD2CR_AWD2CH_0)
#define ADC_AWD_CR12_REGOFFSETGAP_VAL (0x00000024UL)
#define ADC_AWD_CRX_REGOFFSET_MASK (ADC_AWD_CR1_REGOFFSET | ADC_AWD_CR2_REGOFFSET | ADC_AWD_CR3_REGOFFSET)
#define ADC_AWD_CRX_REGOFFSET_BITOFFSET_POS (20UL)
#define ADC_AWD_CR1_CHANNEL_MASK (ADC_CFGR_AWD1CH | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define ADC_AWD_CR23_CHANNEL_MASK (ADC_AWD2CR_AWD2CH)
#define ADC_AWD_CR_ALL_CHANNEL_MASK (ADC_AWD_CR1_CHANNEL_MASK | ADC_AWD_CR23_CHANNEL_MASK)
#define ADC_AWD_CRX_REGOFFSET_POS (20UL)
#define ADC_AWD_TR1_REGOFFSET (ADC_AWD_CR1_REGOFFSET)
#define ADC_AWD_TR2_REGOFFSET (ADC_AWD_CR2_REGOFFSET)
#define ADC_AWD_TR3_REGOFFSET (ADC_AWD_CR3_REGOFFSET)
#define ADC_AWD_TRX_REGOFFSET_MASK (ADC_AWD_TR1_REGOFFSET | ADC_AWD_TR2_REGOFFSET | ADC_AWD_TR3_REGOFFSET)
#define ADC_AWD_TRX_REGOFFSET_POS (ADC_AWD_CRX_REGOFFSET_POS)
#define ADC_AWD_TRX_BIT_HIGH_MASK (0x00010000UL)
#define ADC_AWD_TRX_BIT_HIGH_POS (16UL)
#define ADC_AWD_TRX_BIT_HIGH_SHIFT4 (ADC_AWD_TRX_BIT_HIGH_POS - 4UL)
#define ADC_OFR1_REGOFFSET (0x00000000UL)
#define ADC_OFR2_REGOFFSET (0x00000001UL)
#define ADC_OFR3_REGOFFSET (0x00000002UL)
#define ADC_OFR4_REGOFFSET (0x00000003UL)
#define ADC_OFRx_REGOFFSET_MASK (ADC_OFR1_REGOFFSET | ADC_OFR2_REGOFFSET | ADC_OFR3_REGOFFSET | ADC_OFR4_REGOFFSET)
#define ADC_CFGR_RES_BITOFFSET_POS ( 3UL)
#define ADC_CFGR_AWD1SGL_BITOFFSET_POS (22UL)
#define ADC_CFGR_AWD1EN_BITOFFSET_POS (23UL)
#define ADC_CFGR_JAWD1EN_BITOFFSET_POS (24UL)
#define ADC_TR1_HT1_BITOFFSET_POS (16UL)
#define ADC_CR_BITS_PROPERTY_RS (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)
#define VREFINT_CAL_ADDR ((uint16_t*) (0x1FFF75AAUL))
#define VREFINT_CAL_VREF (3600UL)
#define TEMPSENSOR_CAL1_ADDR ((uint16_t*) (0x1FFF75A8UL))
#define TEMPSENSOR_CAL2_ADDR ((uint16_t*) (0x1FFF75CAUL))
#define TEMPSENSOR_CAL1_TEMP (30L)
#define TEMPSENSOR_CAL2_TEMP (130L)
#define TEMPSENSOR_CAL_VREFANALOG (3000UL)
#define __ADC_PTR_REG_OFFSET(__REG__,__REG_OFFFSET__) ((__IO uint32_t *)((uint32_t) ((uint32_t)(&(__REG__)) + ((__REG_OFFFSET__) << 2UL))))
typedef struct
{
  uint32_t CommonClock;
} LL_ADC_CommonInitTypeDef;
typedef struct
{
  uint32_t Resolution;
  uint32_t DataAlignment;
  uint32_t LowPowerMode;
} LL_ADC_InitTypeDef;
typedef struct
{
  uint32_t TriggerSource;
  uint32_t SequencerLength;
  uint32_t SequencerDiscont;
  uint32_t ContinuousMode;
  uint32_t DMATransfer;
  uint32_t Overrun;
} LL_ADC_REG_InitTypeDef;
typedef struct
{
  uint32_t TriggerSource;
  uint32_t SequencerLength;
  uint32_t SequencerDiscont;
  uint32_t TrigAuto;
} LL_ADC_INJ_InitTypeDef;
#define LL_ADC_FLAG_ADRDY ADC_ISR_ADRDY
#define LL_ADC_FLAG_EOC ADC_ISR_EOC
#define LL_ADC_FLAG_EOS ADC_ISR_EOS
#define LL_ADC_FLAG_OVR ADC_ISR_OVR
#define LL_ADC_FLAG_EOSMP ADC_ISR_EOSMP
#define LL_ADC_FLAG_JEOC ADC_ISR_JEOC
#define LL_ADC_FLAG_JEOS ADC_ISR_JEOS
#define LL_ADC_FLAG_JQOVF ADC_ISR_JQOVF
#define LL_ADC_FLAG_AWD1 ADC_ISR_AWD1
#define LL_ADC_FLAG_AWD2 ADC_ISR_AWD2
#define LL_ADC_FLAG_AWD3 ADC_ISR_AWD3
#define LL_ADC_IT_ADRDY ADC_IER_ADRDYIE
#define LL_ADC_IT_EOC ADC_IER_EOCIE
#define LL_ADC_IT_EOS ADC_IER_EOSIE
#define LL_ADC_IT_OVR ADC_IER_OVRIE
#define LL_ADC_IT_EOSMP ADC_IER_EOSMPIE
#define LL_ADC_IT_JEOC ADC_IER_JEOCIE
#define LL_ADC_IT_JEOS ADC_IER_JEOSIE
#define LL_ADC_IT_JQOVF ADC_IER_JQOVFIE
#define LL_ADC_IT_AWD1 ADC_IER_AWD1IE
#define LL_ADC_IT_AWD2 ADC_IER_AWD2IE
#define LL_ADC_IT_AWD3 ADC_IER_AWD3IE
#define LL_ADC_DMA_REG_REGULAR_DATA (0x00000000UL)
#define LL_ADC_CLOCK_SYNC_PCLK_DIV1 (ADC_CCR_CKMODE_0)
#define LL_ADC_CLOCK_SYNC_PCLK_DIV2 (ADC_CCR_CKMODE_1 )
#define LL_ADC_CLOCK_SYNC_PCLK_DIV4 (ADC_CCR_CKMODE_1 | ADC_CCR_CKMODE_0)
#define LL_ADC_CLOCK_ASYNC_DIV1 (0x00000000UL)
#define LL_ADC_CLOCK_ASYNC_DIV2 (ADC_CCR_PRESC_0)
#define LL_ADC_CLOCK_ASYNC_DIV4 (ADC_CCR_PRESC_1 )
#define LL_ADC_CLOCK_ASYNC_DIV6 (ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0)
#define LL_ADC_CLOCK_ASYNC_DIV8 (ADC_CCR_PRESC_2 )
#define LL_ADC_CLOCK_ASYNC_DIV10 (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_0)
#define LL_ADC_CLOCK_ASYNC_DIV12 (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1 )
#define LL_ADC_CLOCK_ASYNC_DIV16 (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0)
#define LL_ADC_CLOCK_ASYNC_DIV32 (ADC_CCR_PRESC_3)
#define LL_ADC_CLOCK_ASYNC_DIV64 (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_0)
#define LL_ADC_CLOCK_ASYNC_DIV128 (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1)
#define LL_ADC_CLOCK_ASYNC_DIV256 (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0)
#define LL_ADC_PATH_INTERNAL_NONE (0x00000000UL)
#define LL_ADC_PATH_INTERNAL_VREFINT (ADC_CCR_VREFEN)
#define LL_ADC_PATH_INTERNAL_TEMPSENSOR (ADC_CCR_TSEN)
#define LL_ADC_PATH_INTERNAL_VBAT (ADC_CCR_VBATEN)
#define LL_ADC_RESOLUTION_12B (0x00000000UL)
#define LL_ADC_RESOLUTION_10B ( ADC_CFGR_RES_0)
#define LL_ADC_RESOLUTION_8B (ADC_CFGR_RES_1 )
#define LL_ADC_RESOLUTION_6B (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)
#define LL_ADC_DATA_ALIGN_RIGHT (0x00000000UL)
#define LL_ADC_DATA_ALIGN_LEFT (ADC_CFGR_ALIGN)
#define LL_ADC_LP_MODE_NONE (0x00000000UL)
#define LL_ADC_LP_AUTOWAIT (ADC_CFGR_AUTDLY)
#define LL_ADC_TRIGGER_FREQ_HIGH (0x00000000UL)
#define LL_ADC_TRIGGER_FREQ_LOW (ADC_CFGR2_LFTRIG)
#define LL_ADC_OFFSET_1 ADC_OFR1_REGOFFSET
#define LL_ADC_OFFSET_2 ADC_OFR2_REGOFFSET
#define LL_ADC_OFFSET_3 ADC_OFR3_REGOFFSET
#define LL_ADC_OFFSET_4 ADC_OFR4_REGOFFSET
#define LL_ADC_OFFSET_DISABLE (0x00000000UL)
#define LL_ADC_OFFSET_ENABLE (ADC_OFR1_OFFSET1_EN)
#define LL_ADC_GROUP_REGULAR (0x00000001UL)
#define LL_ADC_GROUP_INJECTED (0x00000002UL)
#define LL_ADC_GROUP_REGULAR_INJECTED (0x00000003UL)
#define LL_ADC_CHANNEL_0 (ADC_CHANNEL_0_NUMBER | ADC_CHANNEL_0_SMP | ADC_CHANNEL_0_BITFIELD )
#define LL_ADC_CHANNEL_1 (ADC_CHANNEL_1_NUMBER | ADC_CHANNEL_1_SMP | ADC_CHANNEL_1_BITFIELD )
#define LL_ADC_CHANNEL_2 (ADC_CHANNEL_2_NUMBER | ADC_CHANNEL_2_SMP | ADC_CHANNEL_2_BITFIELD )
#define LL_ADC_CHANNEL_3 (ADC_CHANNEL_3_NUMBER | ADC_CHANNEL_3_SMP | ADC_CHANNEL_3_BITFIELD )
#define LL_ADC_CHANNEL_4 (ADC_CHANNEL_4_NUMBER | ADC_CHANNEL_4_SMP | ADC_CHANNEL_4_BITFIELD )
#define LL_ADC_CHANNEL_5 (ADC_CHANNEL_5_NUMBER | ADC_CHANNEL_5_SMP | ADC_CHANNEL_5_BITFIELD )
#define LL_ADC_CHANNEL_6 (ADC_CHANNEL_6_NUMBER | ADC_CHANNEL_6_SMP | ADC_CHANNEL_6_BITFIELD )
#define LL_ADC_CHANNEL_7 (ADC_CHANNEL_7_NUMBER | ADC_CHANNEL_7_SMP | ADC_CHANNEL_7_BITFIELD )
#define LL_ADC_CHANNEL_8 (ADC_CHANNEL_8_NUMBER | ADC_CHANNEL_8_SMP | ADC_CHANNEL_8_BITFIELD )
#define LL_ADC_CHANNEL_9 (ADC_CHANNEL_9_NUMBER | ADC_CHANNEL_9_SMP | ADC_CHANNEL_9_BITFIELD )
#define LL_ADC_CHANNEL_10 (ADC_CHANNEL_10_NUMBER | ADC_CHANNEL_10_SMP | ADC_CHANNEL_10_BITFIELD)
#define LL_ADC_CHANNEL_11 (ADC_CHANNEL_11_NUMBER | ADC_CHANNEL_11_SMP | ADC_CHANNEL_11_BITFIELD)
#define LL_ADC_CHANNEL_12 (ADC_CHANNEL_12_NUMBER | ADC_CHANNEL_12_SMP | ADC_CHANNEL_12_BITFIELD)
#define LL_ADC_CHANNEL_13 (ADC_CHANNEL_13_NUMBER | ADC_CHANNEL_13_SMP | ADC_CHANNEL_13_BITFIELD)
#define LL_ADC_CHANNEL_14 (ADC_CHANNEL_14_NUMBER | ADC_CHANNEL_14_SMP | ADC_CHANNEL_14_BITFIELD)
#define LL_ADC_CHANNEL_15 (ADC_CHANNEL_15_NUMBER | ADC_CHANNEL_15_SMP | ADC_CHANNEL_15_BITFIELD)
#define LL_ADC_CHANNEL_16 (ADC_CHANNEL_16_NUMBER | ADC_CHANNEL_16_SMP | ADC_CHANNEL_16_BITFIELD)
#define LL_ADC_CHANNEL_17 (ADC_CHANNEL_17_NUMBER | ADC_CHANNEL_17_SMP | ADC_CHANNEL_17_BITFIELD)
#define LL_ADC_CHANNEL_18 (ADC_CHANNEL_18_NUMBER | ADC_CHANNEL_18_SMP | ADC_CHANNEL_18_BITFIELD)
#define LL_ADC_CHANNEL_VREFINT (LL_ADC_CHANNEL_0 | ADC_CHANNEL_ID_INTERNAL_CH)
#define LL_ADC_CHANNEL_TEMPSENSOR (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH)
#define LL_ADC_CHANNEL_VBAT (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH)
#define LL_ADC_REG_TRIG_SOFTWARE (0x00000000UL)
#define LL_ADC_REG_TRIG_EXT_TIM1_TRGO (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_REG_TRIG_EXT_TIM1_TRGO2 (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_REG_TRIG_EXT_TIM1_CH1 (ADC_REG_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_REG_TRIG_EXT_TIM1_CH2 (ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_REG_TRIG_EXT_TIM1_CH3 (ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_REG_TRIG_EXT_TIM2_TRGO (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_REG_TRIG_EXT_TIM2_CH2 (ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_REG_TRIG_EXT_EXTI_LINE11 (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_REG_TRIG_EXT_RISING ( ADC_CFGR_EXTEN_0)
#define LL_ADC_REG_TRIG_EXT_FALLING (ADC_CFGR_EXTEN_1 )
#define LL_ADC_REG_TRIG_EXT_RISINGFALLING (ADC_CFGR_EXTEN_1 | ADC_CFGR_EXTEN_0)
#define LL_ADC_REG_CONV_SINGLE (0x00000000UL)
#define LL_ADC_REG_CONV_CONTINUOUS (ADC_CFGR_CONT)
#define LL_ADC_REG_DMA_TRANSFER_NONE (0x00000000UL)
#define LL_ADC_REG_DMA_TRANSFER_LIMITED ( ADC_CFGR_DMAEN)
#define LL_ADC_REG_DMA_TRANSFER_UNLIMITED (ADC_CFGR_DMACFG | ADC_CFGR_DMAEN)
#define LL_ADC_REG_OVR_DATA_PRESERVED (0x00000000UL)
#define LL_ADC_REG_OVR_DATA_OVERWRITTEN (ADC_CFGR_OVRMOD)
#define LL_ADC_REG_SEQ_SCAN_DISABLE (0x00000000UL)
#define LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS ( ADC_SQR1_L_0)
#define LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS ( ADC_SQR1_L_1 )
#define LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS ( ADC_SQR1_L_1 | ADC_SQR1_L_0)
#define LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS ( ADC_SQR1_L_2 )
#define LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS ( ADC_SQR1_L_2 | ADC_SQR1_L_0)
#define LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS ( ADC_SQR1_L_2 | ADC_SQR1_L_1 )
#define LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS ( ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L_0)
#define LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS (ADC_SQR1_L_3 )
#define LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_0)
#define LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_1 )
#define LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_1 | ADC_SQR1_L_0)
#define LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 )
#define LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_0)
#define LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1 )
#define LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L_0)
#define LL_ADC_REG_SEQ_DISCONT_DISABLE (0x00000000UL)
#define LL_ADC_REG_SEQ_DISCONT_1RANK ( ADC_CFGR_DISCEN)
#define LL_ADC_REG_SEQ_DISCONT_2RANKS ( ADC_CFGR_DISCNUM_0 | ADC_CFGR_DISCEN)
#define LL_ADC_REG_SEQ_DISCONT_3RANKS ( ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISCEN)
#define LL_ADC_REG_SEQ_DISCONT_4RANKS ( ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISCNUM_0 | ADC_CFGR_DISCEN)
#define LL_ADC_REG_SEQ_DISCONT_5RANKS (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCEN)
#define LL_ADC_REG_SEQ_DISCONT_6RANKS (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_0 | ADC_CFGR_DISCEN)
#define LL_ADC_REG_SEQ_DISCONT_7RANKS (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISCEN)
#define LL_ADC_REG_SEQ_DISCONT_8RANKS (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISCNUM_0 | ADC_CFGR_DISCEN)
#define LL_ADC_REG_RANK_1 (ADC_SQR1_REGOFFSET | ADC_REG_RANK_1_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_2 (ADC_SQR1_REGOFFSET | ADC_REG_RANK_2_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_3 (ADC_SQR1_REGOFFSET | ADC_REG_RANK_3_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_4 (ADC_SQR1_REGOFFSET | ADC_REG_RANK_4_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_5 (ADC_SQR2_REGOFFSET | ADC_REG_RANK_5_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_6 (ADC_SQR2_REGOFFSET | ADC_REG_RANK_6_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_7 (ADC_SQR2_REGOFFSET | ADC_REG_RANK_7_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_8 (ADC_SQR2_REGOFFSET | ADC_REG_RANK_8_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_9 (ADC_SQR2_REGOFFSET | ADC_REG_RANK_9_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_10 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_10_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_11 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_11_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_12 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_12_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_13 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_13_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_14 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_14_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_15 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_15_SQRX_BITOFFSET_POS)
#define LL_ADC_REG_RANK_16 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_16_SQRX_BITOFFSET_POS)
#define LL_ADC_INJ_TRIG_SOFTWARE (0x00000000UL)
#define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO (ADC_INJ_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2 (ADC_JSQR_JEXTSEL_3 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_INJ_TRIG_EXT_TIM1_CH4 (ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_INJ_TRIG_EXT_TIM2_TRGO (ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_INJ_TRIG_EXT_TIM2_CH1 (ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_INJ_TRIG_EXT_EXTI_LINE15 (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)
#define LL_ADC_INJ_TRIG_EXT_RISING ( ADC_JSQR_JEXTEN_0)
#define LL_ADC_INJ_TRIG_EXT_FALLING (ADC_JSQR_JEXTEN_1 )
#define LL_ADC_INJ_TRIG_EXT_RISINGFALLING (ADC_JSQR_JEXTEN_1 | ADC_JSQR_JEXTEN_0)
#define LL_ADC_INJ_TRIG_INDEPENDENT (0x00000000UL)
#define LL_ADC_INJ_TRIG_FROM_GRP_REGULAR (ADC_CFGR_JAUTO)
#define LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE (0x00000000UL)
#define LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY (ADC_CFGR_JQM)
#define LL_ADC_INJ_QUEUE_DISABLE (ADC_CFGR_JQDIS)
#define LL_ADC_INJ_SEQ_SCAN_DISABLE (0x00000000UL)
#define LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS ( ADC_JSQR_JL_0)
#define LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS (ADC_JSQR_JL_1 )
#define LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS (ADC_JSQR_JL_1 | ADC_JSQR_JL_0)
#define LL_ADC_INJ_SEQ_DISCONT_DISABLE (0x00000000UL)
#define LL_ADC_INJ_SEQ_DISCONT_1RANK (ADC_CFGR_JDISCEN)
#define LL_ADC_INJ_RANK_1 (ADC_JDR1_REGOFFSET | ADC_INJ_RANK_1_JSQR_BITOFFSET_POS)
#define LL_ADC_INJ_RANK_2 (ADC_JDR2_REGOFFSET | ADC_INJ_RANK_2_JSQR_BITOFFSET_POS)
#define LL_ADC_INJ_RANK_3 (ADC_JDR3_REGOFFSET | ADC_INJ_RANK_3_JSQR_BITOFFSET_POS)
#define LL_ADC_INJ_RANK_4 (ADC_JDR4_REGOFFSET | ADC_INJ_RANK_4_JSQR_BITOFFSET_POS)
#define LL_ADC_SAMPLINGTIME_2CYCLES_5 (0x00000000UL)
#define LL_ADC_SAMPLINGTIME_6CYCLES_5 ( ADC_SMPR2_SMP10_0)
#define LL_ADC_SAMPLINGTIME_12CYCLES_5 ( ADC_SMPR2_SMP10_1 )
#define LL_ADC_SAMPLINGTIME_24CYCLES_5 ( ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10_0)
#define LL_ADC_SAMPLINGTIME_47CYCLES_5 (ADC_SMPR2_SMP10_2 )
#define LL_ADC_SAMPLINGTIME_92CYCLES_5 (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_0)
#define LL_ADC_SAMPLINGTIME_247CYCLES_5 (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 )
#define LL_ADC_SAMPLINGTIME_640CYCLES_5 (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10_0)
#define LL_ADC_SINGLE_ENDED ( ADC_CALFACT_CALFACT_S)
#define LL_ADC_DIFFERENTIAL_ENDED (ADC_CR_ADCALDIF | ADC_CALFACT_CALFACT_D)
#define LL_ADC_BOTH_SINGLE_DIFF_ENDED (LL_ADC_SINGLE_ENDED | LL_ADC_DIFFERENTIAL_ENDED)
#define LL_ADC_AWD1 (ADC_AWD_CR1_CHANNEL_MASK | ADC_AWD_CR1_REGOFFSET)
#define LL_ADC_AWD2 (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR2_REGOFFSET)
#define LL_ADC_AWD3 (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR3_REGOFFSET)
#define LL_ADC_AWD_DISABLE (0x00000000UL)
#define LL_ADC_AWD_ALL_CHANNELS_REG (ADC_AWD_CR23_CHANNEL_MASK | ADC_CFGR_AWD1EN )
#define LL_ADC_AWD_ALL_CHANNELS_INJ (ADC_AWD_CR23_CHANNEL_MASK | ADC_CFGR_JAWD1EN )
#define LL_ADC_AWD_ALL_CHANNELS_REG_INJ (ADC_AWD_CR23_CHANNEL_MASK | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN )
#define LL_ADC_AWD_CHANNEL_0_REG ((LL_ADC_CHANNEL_0 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_0_INJ ((LL_ADC_CHANNEL_0 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_0_REG_INJ ((LL_ADC_CHANNEL_0 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_1_REG ((LL_ADC_CHANNEL_1 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_1_INJ ((LL_ADC_CHANNEL_1 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_1_REG_INJ ((LL_ADC_CHANNEL_1 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_2_REG ((LL_ADC_CHANNEL_2 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_2_INJ ((LL_ADC_CHANNEL_2 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_2_REG_INJ ((LL_ADC_CHANNEL_2 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_3_REG ((LL_ADC_CHANNEL_3 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_3_INJ ((LL_ADC_CHANNEL_3 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_3_REG_INJ ((LL_ADC_CHANNEL_3 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_4_REG ((LL_ADC_CHANNEL_4 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_4_INJ ((LL_ADC_CHANNEL_4 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_4_REG_INJ ((LL_ADC_CHANNEL_4 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_5_REG ((LL_ADC_CHANNEL_5 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_5_INJ ((LL_ADC_CHANNEL_5 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_5_REG_INJ ((LL_ADC_CHANNEL_5 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_6_REG ((LL_ADC_CHANNEL_6 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_6_INJ ((LL_ADC_CHANNEL_6 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_6_REG_INJ ((LL_ADC_CHANNEL_6 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_7_REG ((LL_ADC_CHANNEL_7 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_7_INJ ((LL_ADC_CHANNEL_7 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_7_REG_INJ ((LL_ADC_CHANNEL_7 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_8_REG ((LL_ADC_CHANNEL_8 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_8_INJ ((LL_ADC_CHANNEL_8 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_8_REG_INJ ((LL_ADC_CHANNEL_8 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_9_REG ((LL_ADC_CHANNEL_9 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_9_INJ ((LL_ADC_CHANNEL_9 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_9_REG_INJ ((LL_ADC_CHANNEL_9 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_10_REG ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_10_INJ ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_10_REG_INJ ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_11_REG ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_11_INJ ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_11_REG_INJ ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_12_REG ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_12_INJ ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_12_REG_INJ ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_13_REG ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_13_INJ ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_13_REG_INJ ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_14_REG ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_14_INJ ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_14_REG_INJ ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_15_REG ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_15_INJ ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_15_REG_INJ ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_16_REG ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_16_INJ ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_16_REG_INJ ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_17_REG ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_17_INJ ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_17_REG_INJ ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_18_REG ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_18_INJ ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CHANNEL_18_REG_INJ ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CH_VREFINT_REG ((LL_ADC_CHANNEL_VREFINT & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CH_VREFINT_INJ ((LL_ADC_CHANNEL_VREFINT & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CH_VREFINT_REG_INJ ((LL_ADC_CHANNEL_VREFINT & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CH_TEMPSENSOR_REG ((LL_ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CH_TEMPSENSOR_INJ ((LL_ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ ((LL_ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CH_VBAT_REG ((LL_ADC_CHANNEL_VBAT & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CH_VBAT_INJ ((LL_ADC_CHANNEL_VBAT & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_CH_VBAT_REG_INJ ((LL_ADC_CHANNEL_VBAT & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
#define LL_ADC_AWD_THRESHOLD_HIGH (ADC_TR1_HT1 )
#define LL_ADC_AWD_THRESHOLD_LOW ( ADC_TR1_LT1)
#define LL_ADC_AWD_THRESHOLDS_HIGH_LOW (ADC_TR1_HT1 | ADC_TR1_LT1)
#define LL_ADC_OVS_DISABLE (0x00000000UL)
#define LL_ADC_OVS_GRP_REGULAR_CONTINUED ( ADC_CFGR2_ROVSE)
#define LL_ADC_OVS_GRP_REGULAR_RESUMED (ADC_CFGR2_ROVSM | ADC_CFGR2_ROVSE)
#define LL_ADC_OVS_GRP_INJECTED ( ADC_CFGR2_JOVSE )
#define LL_ADC_OVS_GRP_INJ_REG_RESUMED ( ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE)
#define LL_ADC_OVS_REG_CONT (0x00000000UL)
#define LL_ADC_OVS_REG_DISCONT (ADC_CFGR2_TROVS)
#define LL_ADC_OVS_RATIO_2 (0x00000000UL)
#define LL_ADC_OVS_RATIO_4 ( ADC_CFGR2_OVSR_0)
#define LL_ADC_OVS_RATIO_8 ( ADC_CFGR2_OVSR_1 )
#define LL_ADC_OVS_RATIO_16 ( ADC_CFGR2_OVSR_1 | ADC_CFGR2_OVSR_0)
#define LL_ADC_OVS_RATIO_32 (ADC_CFGR2_OVSR_2 )
#define LL_ADC_OVS_RATIO_64 (ADC_CFGR2_OVSR_2 | ADC_CFGR2_OVSR_0)
#define LL_ADC_OVS_RATIO_128 (ADC_CFGR2_OVSR_2 | ADC_CFGR2_OVSR_1 )
#define LL_ADC_OVS_RATIO_256 (ADC_CFGR2_OVSR_2 | ADC_CFGR2_OVSR_1 | ADC_CFGR2_OVSR_0)
#define LL_ADC_OVS_SHIFT_NONE (0x00000000UL)
#define LL_ADC_OVS_SHIFT_RIGHT_1 ( ADC_CFGR2_OVSS_0)
#define LL_ADC_OVS_SHIFT_RIGHT_2 ( ADC_CFGR2_OVSS_1 )
#define LL_ADC_OVS_SHIFT_RIGHT_3 ( ADC_CFGR2_OVSS_1 | ADC_CFGR2_OVSS_0)
#define LL_ADC_OVS_SHIFT_RIGHT_4 ( ADC_CFGR2_OVSS_2 )
#define LL_ADC_OVS_SHIFT_RIGHT_5 ( ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_0)
#define LL_ADC_OVS_SHIFT_RIGHT_6 ( ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 )
#define LL_ADC_OVS_SHIFT_RIGHT_7 ( ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 | ADC_CFGR2_OVSS_0)
#define LL_ADC_OVS_SHIFT_RIGHT_8 (ADC_CFGR2_OVSS_3 )
#define LL_ADC_DELAY_INTERNAL_REGUL_STAB_US ( 20UL)
#define LL_ADC_DELAY_VREFINT_STAB_US ( 12UL)
#define LL_ADC_DELAY_TEMPSENSOR_STAB_US (120UL)
#define LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US ( 15UL)
#define LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES ( 4UL)
#define LL_ADC_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_ADC_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
#define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__) ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0UL) ? ( ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS ) : ( (uint32_t)POSITION_VAL((__CHANNEL__)) ) )
#define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__) (((__DECIMAL_NB__) <= 9UL) ? ( ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) | (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__)) | (ADC_SMPR1_REGOFFSET | (((3UL * (__DECIMAL_NB__))) << ADC_CHANNEL_SMPx_BITOFFSET_POS)) ) : ( ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) | (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__)) | (ADC_SMPR2_REGOFFSET | (((3UL * ((__DECIMAL_NB__) - 10UL))) << ADC_CHANNEL_SMPx_BITOFFSET_POS)) ) )
#define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__) (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0UL)
#define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__) ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
#define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__,__CHANNEL__) ( ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT) || ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR) || ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT) )
#define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__,__GROUP__) (((__GROUP__) == LL_ADC_GROUP_REGULAR) ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL) : ((__GROUP__) == LL_ADC_GROUP_INJECTED) ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL) : (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL) )
#define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__,__AWD_THRESHOLD__) ((__AWD_THRESHOLD__) << ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
#define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__,__AWD_THRESHOLD_12_BITS__) ((__AWD_THRESHOLD_12_BITS__) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
#define __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(__AWD_THRESHOLD_TYPE__,__AWD_THRESHOLDS__) (((__AWD_THRESHOLDS__) >> (((__AWD_THRESHOLD_TYPE__) & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TRX_BIT_HIGH_SHIFT4)) & LL_ADC_AWD_THRESHOLD_LOW)
#define __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(__CALIB_FACTOR_SINGLE_ENDED__,__CALIB_FACTOR_DIFFERENTIAL__) (((__CALIB_FACTOR_DIFFERENTIAL__) << ADC_CALFACT_CALFACT_D_Pos) | (__CALIB_FACTOR_SINGLE_ENDED__))
#define __LL_ADC_COMMON_INSTANCE(__ADCx__) (ADC1_COMMON)
#define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__) (LL_ADC_IsEnabled(ADC1))
#define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__) (0xFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))
#define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,__ADC_RESOLUTION_CURRENT__,__ADC_RESOLUTION_TARGET__) (((__DATA__) << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))) >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)) )
#define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,__ADC_DATA__,__ADC_RESOLUTION__) ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__) / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__) )
#define __LL_ADC_CALC_VREFANALOG_VOLTAGE(__VREFINT_ADC_DATA__,__ADC_RESOLUTION__) (((uint32_t)(*VREFINT_CAL_ADDR) * VREFINT_CAL_VREF) / __LL_ADC_CONVERT_DATA_RESOLUTION((__VREFINT_ADC_DATA__), (__ADC_RESOLUTION__), LL_ADC_RESOLUTION_12B))
#define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,__TEMPSENSOR_ADC_DATA__,__ADC_RESOLUTION__) (((( ((int32_t)((__LL_ADC_CONVERT_DATA_RESOLUTION((__TEMPSENSOR_ADC_DATA__), (__ADC_RESOLUTION__), LL_ADC_RESOLUTION_12B) * (__VREFANALOG_VOLTAGE__)) / TEMPSENSOR_CAL_VREFANALOG) - (int32_t) *TEMPSENSOR_CAL1_ADDR) ) * (int32_t)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP) ) / (int32_t)((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) ) + TEMPSENSOR_CAL1_TEMP )
#define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,__TEMPSENSOR_TYP_CALX_V__,__TEMPSENSOR_CALX_TEMP__,__VREFANALOG_VOLTAGE__,__TEMPSENSOR_ADC_DATA__,__ADC_RESOLUTION__) ((( ( (int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__)) / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)) * 1000UL) - (int32_t)(((__TEMPSENSOR_TYP_CALX_V__)) * 1000UL) ) ) / (int32_t)(__TEMPSENSOR_TYP_AVGSLOPE__) ) + (int32_t)(__TEMPSENSOR_CALX_TEMP__) )
static inline uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
  (void)(Register);
  return (uint32_t)&(ADCx->DR);
}
static inline void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
  (((ADCxy_COMMON->CCR)) = ((((((ADCxy_COMMON->CCR))) & (~((0x3UL << (16U)) | (0xFUL << (18U))))) | (CommonClock))));
}
static inline uint32_t LL_ADC_GetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(((ADCxy_COMMON->CCR) & ((0x3UL << (16U)) | (0xFUL << (18U)))));
}
static inline void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
  (((ADCxy_COMMON->CCR)) = ((((((ADCxy_COMMON->CCR))) & (~((0x1UL << (22U)) | (0x1UL << (23U)) | (0x1UL << (24U))))) | (PathInternal))));
}
static inline void LL_ADC_SetCommonPathInternalChAdd(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
  ((ADCxy_COMMON->CCR) |= (PathInternal));
}
static inline void LL_ADC_SetCommonPathInternalChRem(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
  ((ADCxy_COMMON->CCR) &= ~(PathInternal));
}
static inline uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(((ADCxy_COMMON->CCR) & ((0x1UL << (22U)) | (0x1UL << (23U)) | (0x1UL << (24U)))));
}
static inline void LL_ADC_SetCalibrationFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff, uint32_t CalibrationFactor)
{
  (((ADCx->CALFACT)) = ((((((ADCx->CALFACT))) & (~(SingleDiff & ((0x7FUL << (16U)) | (0x7FUL << (0U)))))) | (CalibrationFactor << (((SingleDiff & (0x00010000UL)) >> ((16UL) - 4UL)) & ~(SingleDiff & (0x7FUL << (0U))))))));
}
static inline uint32_t LL_ADC_GetCalibrationFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
  return (uint32_t)(((ADCx->CALFACT) & ((SingleDiff & ((0x7FUL << (16U)) | (0x7FUL << (0U)))))) >> ((SingleDiff & (0x00010000UL)) >> ((16UL) - 4UL)));
}
static inline void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x3UL << (3U))))) | (Resolution))));
}
static inline uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x3UL << (3U)))));
}
static inline void LL_ADC_SetDataAlignment(ADC_TypeDef *ADCx, uint32_t DataAlignment)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (5U))))) | (DataAlignment))));
}
static inline uint32_t LL_ADC_GetDataAlignment(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (5U)))));
}
static inline void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (14U))))) | (LowPowerMode))));
}
static inline uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (14U)))));
}
static inline void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
  volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));
  (((*preg)) = ((((((*preg))) & (~((0x1UL << (31U)) | (0x1FUL << (26U)) | (0xFFFUL << (0U))))) | ((0x1UL << (31U)) | (Channel & ((0x1FUL << (26U)))) | OffsetLevel))));
}
static inline uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));
  return (uint32_t) ((*preg) & ((0x1FUL << (26U))));
}
static inline uint32_t LL_ADC_GetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));
  return (uint32_t) ((*preg) & ((0xFFFUL << (0U))));
}
static inline void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
  volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));
  (((*preg)) = ((((((*preg))) & (~((0x1UL << (31U))))) | (OffsetState))));
}
static inline uint32_t LL_ADC_GetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->OFR1)) + ((Offsety) << 2UL))));
  return (uint32_t) ((*preg) & ((0x1UL << (31U))));
}
static inline void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x3UL << (10U)) | (0xFUL << (6U))))) | (TriggerSource))));
}
static inline uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
{
  volatile uint32_t TriggerSource = ((ADCx->CFGR) & ((0xFUL << (6U)) | (0x3UL << (10U))));
  uint32_t ShiftExten = ((TriggerSource & (0x3UL << (10U))) >> ((10UL) - 2UL));
  return ((TriggerSource
           & (((((0x00000000UL) & (0xFUL << (6U))) << (4U * 0UL)) | (((0xFUL << (6U))) << (4U * 1UL)) | (((0xFUL << (6U))) << (4U * 2UL)) | (((0xFUL << (6U))) << (4U * 3UL)) ) >> ShiftExten) & (0xFUL << (6U)))
          | ((((((0x00000000UL) & (0x3UL << (10U))) << (4U * 0UL)) | ((((0x1UL << (10U)))) << (4U * 1UL)) | ((((0x1UL << (10U)))) << (4U * 2UL)) | ((((0x1UL << (10U)))) << (4U * 3UL)) ) >> ShiftExten) & (0x3UL << (10U)))
         );
}
static inline uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CFGR) & ((0x3UL << (10U)))) == ((0x00000000UL) & (0x3UL << (10U)))) ? 1UL : 0UL);
}
static inline void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x3UL << (10U))))) | (ExternalTriggerEdge))));
}
static inline uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x3UL << (10U)))));
}
static inline void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
  (((ADCx->SQR1)) = ((((((ADCx->SQR1))) & (~((0xFUL << (0U))))) | (SequencerNbRanks))));
}
static inline uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->SQR1) & ((0xFUL << (0U)))));
}
static inline void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (16U)) | (0x7UL << (17U))))) | (SeqDiscont))));
}
static inline uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (16U)) | (0x7UL << (17U)))));
}
static inline void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
  volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->SQR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));
  (((*preg)) = ((((((*preg))) & (~((0x0000001FUL) << (Rank & ((0x0000001FUL)))))) | (((Channel & ((0x1FUL << (26U)))) >> (26UL)) << (Rank & ((0x0000001FUL)))))));
}
static inline uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->SQR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));
  return (uint32_t)((((*preg) & ((0x0000001FUL) << (Rank & ((0x0000001FUL)))))
                     >> (Rank & ((0x0000001FUL)))) << (26UL)
                   );
}
static inline void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (13U))))) | (Continuous))));
}
static inline uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (13U)))));
}
static inline void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (0U)) | (0x1UL << (1U))))) | (DMATransfer))));
}
static inline uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (0U)) | (0x1UL << (1U)))));
}
static inline void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (12U))))) | (Overrun))));
}
static inline uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (12U)))));
}
static inline void LL_ADC_INJ_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
{
  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((0xFUL << (2U)) | (0x3UL << (6U))))) | (TriggerSource))));
}
static inline uint32_t LL_ADC_INJ_GetTriggerSource(ADC_TypeDef *ADCx)
{
  volatile uint32_t TriggerSource = ((ADCx->JSQR) & ((0xFUL << (2U)) | (0x3UL << (6U))));
  uint32_t ShiftJexten = ((TriggerSource & (0x3UL << (6U))) >> (( 6UL) - 2UL));
  return ((TriggerSource
           & (((((0x00000000UL) & (0xFUL << (2U))) << (4U * 0UL)) | (((0xFUL << (2U))) << (4U * 1UL)) | (((0xFUL << (2U))) << (4U * 2UL)) | (((0xFUL << (2U))) << (4U * 3UL)) ) >> ShiftJexten) & (0xFUL << (2U)))
          | ((((((0x00000000UL) & (0x3UL << (6U))) << (4U * 0UL)) | ((((0x1UL << (6U)))) << (4U * 1UL)) | ((((0x1UL << (6U)))) << (4U * 2UL)) | ((((0x1UL << (6U)))) << (4U * 3UL)) ) >> ShiftJexten) & (0x3UL << (6U)))
         );
}
static inline uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((((ADCx->JSQR) & ((0x3UL << (6U)))) == ((0x00000000UL) & (0x3UL << (6U)))) ? 1UL : 0UL);
}
static inline void LL_ADC_INJ_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((0x3UL << (6U))))) | (ExternalTriggerEdge))));
}
static inline uint32_t LL_ADC_INJ_GetTriggerEdge(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->JSQR) & ((0x3UL << (6U)))));
}
static inline void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((0x3UL << (0U))))) | (SequencerNbRanks))));
}
static inline uint32_t LL_ADC_INJ_GetSequencerLength(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->JSQR) & ((0x3UL << (0U)))));
}
static inline void LL_ADC_INJ_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (20U))))) | (SeqDiscont))));
}
static inline uint32_t LL_ADC_INJ_GetSequencerDiscont(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (20U)))));
}
static inline void LL_ADC_INJ_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((((0x1FUL << (26U))) >> (26UL)) << (Rank & ((0x0000001FUL)))))) | (((Channel & ((0x1FUL << (26U)))) >> (26UL)) << (Rank & ((0x0000001FUL)))))));
}
static inline uint32_t LL_ADC_INJ_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
{
  return (uint32_t)((((ADCx->JSQR) & ((((0x1FUL << (26U))) >> (26UL)) << (Rank & ((0x0000001FUL)))))
                     >> (Rank & ((0x0000001FUL)))) << (26UL)
                   );
}
static inline void LL_ADC_INJ_SetTrigAuto(ADC_TypeDef *ADCx, uint32_t TrigAuto)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (25U))))) | (TrigAuto))));
}
static inline uint32_t LL_ADC_INJ_GetTrigAuto(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (25U)))));
}
static inline void LL_ADC_INJ_SetQueueMode(ADC_TypeDef *ADCx, uint32_t QueueMode)
{
  (((ADCx->CFGR)) = ((((((ADCx->CFGR))) & (~((0x1UL << (21U)) | (0x1UL << (31U))))) | (QueueMode))));
}
static inline uint32_t LL_ADC_INJ_GetQueueMode(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR) & ((0x1UL << (21U)) | (0x1UL << (31U)))));
}
static inline void LL_ADC_INJ_ConfigQueueContext(ADC_TypeDef *ADCx,
                                                   uint32_t TriggerSource,
                                                   uint32_t ExternalTriggerEdge,
                                                   uint32_t SequencerNbRanks,
                                                   uint32_t Rank1_Channel,
                                                   uint32_t Rank2_Channel,
                                                   uint32_t Rank3_Channel,
                                                   uint32_t Rank4_Channel)
{
  uint32_t is_trigger_not_sw = (uint32_t)((TriggerSource != (0x00000000UL)) ? 1UL : 0UL);
  (((ADCx->JSQR)) = ((((((ADCx->JSQR))) & (~((0xFUL << (2U)) | (0x3UL << (6U)) | (0x1FUL << (26U)) | (0x1FUL << (20U)) | (0x1FUL << (14U)) | (0x1FUL << (8U)) | (0x3UL << (0U))))) | ((TriggerSource & (0xFUL << (2U))) | (ExternalTriggerEdge * (is_trigger_not_sw)) | (((Rank4_Channel & ((0x1FUL << (26U)))) >> (26UL)) << (((0x00000300UL) | (26UL)) & ((0x0000001FUL)))) | (((Rank3_Channel & ((0x1FUL << (26U)))) >> (26UL)) << (((0x00000200UL) | (20UL)) & ((0x0000001FUL)))) | (((Rank2_Channel & ((0x1FUL << (26U)))) >> (26UL)) << (((0x00000100UL) | (14UL)) & ((0x0000001FUL)))) | (((Rank1_Channel & ((0x1FUL << (26U)))) >> (26UL)) << (((0x00000000UL) | ( 8UL)) & ((0x0000001FUL)))) | SequencerNbRanks))));
}
static inline void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
  volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->SMPR1)) + ((((Channel & ((0x00000000UL) | (0x02000000UL))) >> (25UL))) << 2UL))));
  (((*preg)) = ((((((*preg))) & (~((0x7UL << (0U)) << ((Channel & (0x01F00000UL)) >> (20UL))))) | (SamplingTime << ((Channel & (0x01F00000UL)) >> (20UL))))));
}
static inline uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->SMPR1)) + ((((Channel & ((0x00000000UL) | (0x02000000UL))) >> (25UL))) << 2UL))));
  return (uint32_t)(((*preg) & ((0x7UL << (0U)) << ((Channel & (0x01F00000UL)) >> (20UL))))
                    >> ((Channel & (0x01F00000UL)) >> (20UL))
                   );
}
static inline void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
  (((ADCx->DIFSEL)) = ((((((ADCx->DIFSEL))) & (~(Channel & (((0x7FFFFUL << (0U))))))) | ((Channel & (((0x7FFFFUL << (0U))))) & ((0x7FFFFUL << (0U)) >> (SingleDiff & ((0x10UL << (0U)) | (0x08UL << (0U)))))))));
}
static inline uint32_t LL_ADC_GetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel)
{
  return (uint32_t)(((ADCx->DIFSEL) & ((Channel & (((0x7FFFFUL << (0U))))))));
}
static inline void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
  volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->CFGR)) + ((((AWDy & ((0x00000000UL) | (0x00100000UL) | (0x00200000UL))) >> (20UL)) + ((AWDy & ((0x00001UL << (0U)))) * (0x00000024UL))) << 2UL))));
  (((*preg)) = ((((((*preg))) & (~((AWDy & (((0x1FUL << (26U)) | (0x1UL << (24U)) | (0x1UL << (23U)) | (0x1UL << (22U))) | ((0x7FFFFUL << (0U)))))))) | (AWDChannelGroup & AWDy))));
}
static inline uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->CFGR)) + ((((AWDy & ((0x00000000UL) | (0x00100000UL) | (0x00200000UL))) >> (20UL)) + ((AWDy & ((0x00001UL << (0U)))) * (0x00000024UL))) << 2UL))));
  uint32_t AnalogWDMonitChannels = (((*preg) & (AWDy)) & AWDy & (((0x1FUL << (26U)) | (0x1UL << (24U)) | (0x1UL << (23U)) | (0x1UL << (22U))) | ((0x7FFFFUL << (0U)))));
  if (AnalogWDMonitChannels != 0UL)
  {
    if (AWDy == (((0x1FUL << (26U)) | (0x1UL << (24U)) | (0x1UL << (23U)) | (0x1UL << (22U))) | (0x00000000UL)))
    {
      if ((AnalogWDMonitChannels & (0x1UL << (22U))) == 0UL)
      {
        AnalogWDMonitChannels = ((AnalogWDMonitChannels
                                  | (((0x7FFFFUL << (0U))))
                                 )
                                 & (~((0x1FUL << (26U))))
                                );
      }
      else
      {
        AnalogWDMonitChannels = (AnalogWDMonitChannels
                                 | ((0x00001UL << (0U)) << (AnalogWDMonitChannels >> (26U)))
                                );
      }
    }
    else
    {
      if ((AnalogWDMonitChannels & ((0x7FFFFUL << (0U)))) == ((0x7FFFFUL << (0U))))
      {
        AnalogWDMonitChannels = (((0x7FFFFUL << (0U)))
                                 | (((0x1UL << (24U)) | (0x1UL << (23U))))
                                );
      }
      else
      {
        AnalogWDMonitChannels = (AnalogWDMonitChannels
                                 | ((0x1UL << (24U)) | (0x1UL << (23U)) | (0x1UL << (22U)))
                                 | (((((AnalogWDMonitChannels) & ((0x7FFFFUL << (0U)))) == 0UL) ? ( ((AnalogWDMonitChannels) & ((0x1FUL << (26U)))) >> (26UL) ) : ( (uint32_t)(__CLZ(__RBIT((AnalogWDMonitChannels)))) ) ) << (26U))
                                );
      }
    }
  }
  return AnalogWDMonitChannels;
}
static inline void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
  volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->TR1)) + ((((AWDy & (((0x00000000UL)) | ((0x00100000UL)) | ((0x00200000UL)))) >> ((20UL)))) << 2UL))));
  (((*preg)) = ((((((*preg))) & (~((0xFFFUL << (16U)) | (0xFFFUL << (0U))))) | ((AWDThresholdHighValue << (16UL)) | AWDThresholdLowValue))));
}
static inline void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdsHighLow,
                                                  uint32_t AWDThresholdValue)
{
  volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->TR1)) + ((((AWDy & (((0x00000000UL)) | ((0x00100000UL)) | ((0x00200000UL)))) >> ((20UL)))) << 2UL))));
  (((*preg)) = ((((((*preg))) & (~(AWDThresholdsHighLow))) | (AWDThresholdValue << ((AWDThresholdsHighLow & (0x00010000UL)) >> ((16UL) - 4UL))))));
}
static inline uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdsHighLow)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->TR1)) + ((((AWDy & (((0x00000000UL)) | ((0x00100000UL)) | ((0x00200000UL)))) >> ((20UL)))) << 2UL))));
  return (uint32_t)(((*preg) & ((AWDThresholdsHighLow | (0xFFFUL << (0U)))))
                    >> (((AWDThresholdsHighLow & (0x00010000UL)) >> ((16UL) - 4UL)) & ~(AWDThresholdsHighLow & (0xFFFUL << (0U))))
                   );
}
static inline void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
  (((ADCx->CFGR2)) = ((((((ADCx->CFGR2))) & (~((0x1UL << (0U)) | (0x1UL << (1U)) | (0x1UL << (10U))))) | (OvsScope))));
}
static inline uint32_t LL_ADC_GetOverSamplingScope(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR2) & ((0x1UL << (0U)) | (0x1UL << (1U)) | (0x1UL << (10U)))));
}
static inline void LL_ADC_SetOverSamplingDiscont(ADC_TypeDef *ADCx, uint32_t OverSamplingDiscont)
{
  (((ADCx->CFGR2)) = ((((((ADCx->CFGR2))) & (~((0x1UL << (9U))))) | (OverSamplingDiscont))));
}
static inline uint32_t LL_ADC_GetOverSamplingDiscont(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR2) & ((0x1UL << (9U)))));
}
static inline void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_t Shift)
{
  (((ADCx->CFGR2)) = ((((((ADCx->CFGR2))) & (~(((0xFUL << (5U)) | (0x7UL << (2U)))))) | ((Shift | Ratio)))));
}
static inline uint32_t LL_ADC_GetOverSamplingRatio(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR2) & ((0x7UL << (2U)))));
}
static inline uint32_t LL_ADC_GetOverSamplingShift(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->CFGR2) & ((0xFUL << (5U)))));
}
static inline void LL_ADC_EnableDeepPowerDown(ADC_TypeDef *ADCx)
{
  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (29U))))));
}
static inline void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
  ((ADCx->CR) &= ~(((0x1UL << (29U)) | ((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U))))));
}
static inline uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (29U)))) == ((0x1UL << (29U)))) ? 1UL : 0UL);
}
static inline void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (28U))))));
}
static inline void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
  ((ADCx->CR) &= ~(((0x1UL << (28U)) | ((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U))))));
}
static inline uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (28U)))) == ((0x1UL << (28U)))) ? 1UL : 0UL);
}
static inline void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (0U))))));
}
static inline void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (1U))))));
}
static inline uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
  (((ADCx->CR)) = ((((((ADCx->CR))) & (~((0x1UL << (30U)) | ((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (31U)) | (SingleDiff & ((0x1UL << (30U))))))));
}
static inline uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (31U)))) == ((0x1UL << (31U)))) ? 1UL : 0UL);
}
static inline void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (2U))))));
}
static inline void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (4U))))));
}
static inline uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
{
  return (uint32_t)(((ADCx->DR) & ((0xFFFFUL << (0U)))));
}
static inline uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
  return (uint16_t)(((ADCx->DR) & ((0xFFFFUL << (0U)))));
}
static inline uint16_t LL_ADC_REG_ReadConversionData10(ADC_TypeDef *ADCx)
{
  return (uint16_t)(((ADCx->DR) & ((0xFFFFUL << (0U)))));
}
static inline uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
{
  return (uint8_t)(((ADCx->DR) & ((0xFFFFUL << (0U)))));
}
static inline uint8_t LL_ADC_REG_ReadConversionData6(ADC_TypeDef *ADCx)
{
  return (uint8_t)(((ADCx->DR) & ((0xFFFFUL << (0U)))));
}
static inline void LL_ADC_INJ_StartConversion(ADC_TypeDef *ADCx)
{
  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (3U))))));
}
static inline void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
  (((ADCx->CR)) = ((((((ADCx->CR))) & (~(((0x1UL << (31U)) | (0x1UL << (5U)) | (0x1UL << (4U)) | (0x1UL << (3U)) | (0x1UL << (2U)) | (0x1UL << (1U)) | (0x1UL << (0U)))))) | ((0x1UL << (5U))))));
}
static inline uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_INJ_IsStopConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((((ADCx->CR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_INJ_ReadConversionData32(ADC_TypeDef *ADCx, uint32_t Rank)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));
  return (uint32_t)(((*preg) & ((0xFFFFUL << (0U))))
                   );
}
static inline uint16_t LL_ADC_INJ_ReadConversionData12(ADC_TypeDef *ADCx, uint32_t Rank)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));
  return (uint16_t)(((*preg) & ((0xFFFFUL << (0U))))
                   );
}
static inline uint16_t LL_ADC_INJ_ReadConversionData10(ADC_TypeDef *ADCx, uint32_t Rank)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));
  return (uint16_t)(((*preg) & ((0xFFFFUL << (0U))))
                   );
}
static inline uint8_t LL_ADC_INJ_ReadConversionData8(ADC_TypeDef *ADCx, uint32_t Rank)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));
  return (uint8_t)(((*preg) & ((0xFFFFUL << (0U))))
                  );
}
static inline uint8_t LL_ADC_INJ_ReadConversionData6(ADC_TypeDef *ADCx, uint32_t Rank)
{
  const volatile uint32_t *preg = ((volatile uint32_t *)((uint32_t) ((uint32_t)(&(ADCx->JDR1)) + ((((Rank & ((0x00000000UL) | (0x00000100UL) | (0x00000200UL) | (0x00000300UL))) >> (8UL))) << 2UL))));
  return (uint8_t)(((*preg) & ((0xFFFFUL << (0U))))
                  );
}
static inline uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsActiveFlag_EOSMP(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsActiveFlag_JEOC(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsActiveFlag_JEOS(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsActiveFlag_JQOVF(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsActiveFlag_AWD1(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsActiveFlag_AWD2(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsActiveFlag_AWD3(ADC_TypeDef *ADCx)
{
  return ((((ADCx->ISR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (0U))));
}
static inline void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (2U))));
}
static inline void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (3U))));
}
static inline void LL_ADC_ClearFlag_OVR(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (4U))));
}
static inline void LL_ADC_ClearFlag_EOSMP(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (1U))));
}
static inline void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (5U))));
}
static inline void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (6U))));
}
static inline void LL_ADC_ClearFlag_JQOVF(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (10U))));
}
static inline void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (7U))));
}
static inline void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (8U))));
}
static inline void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
  ((ADCx->ISR) = ((0x1UL << (9U))));
}
static inline void LL_ADC_EnableIT_ADRDY(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (0U))));
}
static inline void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (2U))));
}
static inline void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (3U))));
}
static inline void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (4U))));
}
static inline void LL_ADC_EnableIT_EOSMP(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (1U))));
}
static inline void LL_ADC_EnableIT_JEOC(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (5U))));
}
static inline void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (6U))));
}
static inline void LL_ADC_EnableIT_JQOVF(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (10U))));
}
static inline void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (7U))));
}
static inline void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (8U))));
}
static inline void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) |= ((0x1UL << (9U))));
}
static inline void LL_ADC_DisableIT_ADRDY(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (0U))));
}
static inline void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (2U))));
}
static inline void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (3U))));
}
static inline void LL_ADC_DisableIT_OVR(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (4U))));
}
static inline void LL_ADC_DisableIT_EOSMP(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (1U))));
}
static inline void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (5U))));
}
static inline void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (6U))));
}
static inline void LL_ADC_DisableIT_JQOVF(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (10U))));
}
static inline void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (7U))));
}
static inline void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (8U))));
}
static inline void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
  ((ADCx->IER) &= ~((0x1UL << (9U))));
}
static inline uint32_t LL_ADC_IsEnabledIT_ADRDY(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsEnabledIT_EOC(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsEnabledIT_EOS(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsEnabledIT_OVR(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsEnabledIT_EOSMP(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsEnabledIT_JEOC(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsEnabledIT_JEOS(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsEnabledIT_JQOVF(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsEnabledIT_AWD1(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsEnabledIT_AWD2(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_ADC_IsEnabledIT_AWD3(ADC_TypeDef *ADCx)
{
  return ((((ADCx->IER) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
ErrorStatus LL_ADC_CommonDeInit(ADC_Common_TypeDef *ADCxy_COMMON);
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct);
void LL_ADC_CommonStructInit(LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct);
ErrorStatus LL_ADC_DeInit(ADC_TypeDef *ADCx);
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct);
void LL_ADC_StructInit(LL_ADC_InitTypeDef *ADC_InitStruct);
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct);
void LL_ADC_REG_StructInit(LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct);
ErrorStatus LL_ADC_INJ_Init(ADC_TypeDef *ADCx, LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct);
void LL_ADC_INJ_StructInit(LL_ADC_INJ_InitTypeDef *ADC_INJ_InitStruct);
#define STM32WBxx_LL_BUS_H 
#define LL_AHB1_GRP1_PERIPH_ALL (0xFFFFFFFFU)
#define LL_AHB1_GRP1_PERIPH_DMA1 RCC_AHB1ENR_DMA1EN
#define LL_AHB1_GRP1_PERIPH_DMA2 RCC_AHB1ENR_DMA2EN
#define LL_AHB1_GRP1_PERIPH_DMAMUX1 RCC_AHB1ENR_DMAMUX1EN
#define LL_AHB1_GRP1_PERIPH_SRAM1 RCC_AHB1SMENR_SRAM1SMEN
#define LL_AHB1_GRP1_PERIPH_CRC RCC_AHB1ENR_CRCEN
#define LL_AHB1_GRP1_PERIPH_TSC RCC_AHB1ENR_TSCEN
#define LL_AHB2_GRP1_PERIPH_ALL (0xFFFFFFFFU)
#define LL_AHB2_GRP1_PERIPH_GPIOA RCC_AHB2ENR_GPIOAEN
#define LL_AHB2_GRP1_PERIPH_GPIOB RCC_AHB2ENR_GPIOBEN
#define LL_AHB2_GRP1_PERIPH_GPIOC RCC_AHB2ENR_GPIOCEN
#define LL_AHB2_GRP1_PERIPH_GPIOD RCC_AHB2ENR_GPIODEN
#define LL_AHB2_GRP1_PERIPH_GPIOE RCC_AHB2ENR_GPIOEEN
#define LL_AHB2_GRP1_PERIPH_GPIOH RCC_AHB2ENR_GPIOHEN
#define LL_AHB2_GRP1_PERIPH_ADC RCC_AHB2ENR_ADCEN
#define LL_AHB2_GRP1_PERIPH_AES1 RCC_AHB2ENR_AES1EN
#define LL_AHB3_GRP1_PERIPH_ALL (0xFFFFFFFFU)
#define LL_AHB3_GRP1_PERIPH_QUADSPI RCC_AHB3ENR_QUADSPIEN
#define LL_AHB3_GRP1_PERIPH_PKA RCC_AHB3ENR_PKAEN
#define LL_AHB3_GRP1_PERIPH_AES2 RCC_AHB3ENR_AES2EN
#define LL_AHB3_GRP1_PERIPH_RNG RCC_AHB3ENR_RNGEN
#define LL_AHB3_GRP1_PERIPH_HSEM RCC_AHB3ENR_HSEMEN
#define LL_AHB3_GRP1_PERIPH_IPCC RCC_AHB3ENR_IPCCEN
#define LL_AHB3_GRP1_PERIPH_SRAM2 RCC_AHB3SMENR_SRAM2SMEN
#define LL_AHB3_GRP1_PERIPH_FLASH RCC_AHB3ENR_FLASHEN
#define LL_APB1_GRP1_PERIPH_ALL (0xFFFFFFFFU)
#define LL_APB1_GRP1_PERIPH_TIM2 RCC_APB1ENR1_TIM2EN
#define LL_APB1_GRP1_PERIPH_LCD RCC_APB1ENR1_LCDEN
#define LL_APB1_GRP1_PERIPH_RTCAPB RCC_APB1ENR1_RTCAPBEN
#define LL_APB1_GRP1_PERIPH_WWDG RCC_APB1ENR1_WWDGEN
#define LL_APB1_GRP1_PERIPH_SPI2 RCC_APB1ENR1_SPI2EN
#define LL_APB1_GRP1_PERIPH_I2C1 RCC_APB1ENR1_I2C1EN
#define LL_APB1_GRP1_PERIPH_I2C3 RCC_APB1ENR1_I2C3EN
#define LL_APB1_GRP1_PERIPH_CRS RCC_APB1ENR1_CRSEN
#define LL_APB1_GRP1_PERIPH_USB RCC_APB1ENR1_USBEN
#define LL_APB1_GRP1_PERIPH_LPTIM1 RCC_APB1ENR1_LPTIM1EN
#define LL_APB1_GRP2_PERIPH_ALL (0xFFFFFFFFU)
#define LL_APB1_GRP2_PERIPH_LPUART1 RCC_APB1ENR2_LPUART1EN
#define LL_APB1_GRP2_PERIPH_LPTIM2 RCC_APB1ENR2_LPTIM2EN
#define LL_APB2_GRP1_PERIPH_ALL (0xFFFFFFFFU)
#define LL_APB2_GRP1_PERIPH_TIM1 RCC_APB2ENR_TIM1EN
#define LL_APB2_GRP1_PERIPH_SPI1 RCC_APB2ENR_SPI1EN
#define LL_APB2_GRP1_PERIPH_USART1 RCC_APB2ENR_USART1EN
#define LL_APB2_GRP1_PERIPH_TIM16 RCC_APB2ENR_TIM16EN
#define LL_APB2_GRP1_PERIPH_TIM17 RCC_APB2ENR_TIM17EN
#define LL_APB2_GRP1_PERIPH_SAI1 RCC_APB2ENR_SAI1EN
#define LL_APB3_GRP1_PERIPH_ALL (0xFFFFFFFFU)
#define LL_APB3_GRP1_PERIPH_RF RCC_APB3RSTR_RFRST
#define LL_C2_AHB1_GRP1_PERIPH_DMA1 RCC_C2AHB1ENR_DMA1EN
#define LL_C2_AHB1_GRP1_PERIPH_DMA2 RCC_C2AHB1ENR_DMA2EN
#define LL_C2_AHB1_GRP1_PERIPH_DMAMUX1 RCC_C2AHB1ENR_DMAMUX1EN
#define LL_C2_AHB1_GRP1_PERIPH_SRAM1 RCC_C2AHB1ENR_SRAM1EN
#define LL_C2_AHB1_GRP1_PERIPH_CRC RCC_C2AHB1ENR_CRCEN
#define LL_C2_AHB1_GRP1_PERIPH_TSC RCC_C2AHB1ENR_TSCEN
#define LL_C2_AHB2_GRP1_PERIPH_GPIOA RCC_C2AHB2ENR_GPIOAEN
#define LL_C2_AHB2_GRP1_PERIPH_GPIOB RCC_C2AHB2ENR_GPIOBEN
#define LL_C2_AHB2_GRP1_PERIPH_GPIOC RCC_C2AHB2ENR_GPIOCEN
#define LL_C2_AHB2_GRP1_PERIPH_GPIOD RCC_C2AHB2ENR_GPIODEN
#define LL_C2_AHB2_GRP1_PERIPH_GPIOE RCC_C2AHB2ENR_GPIOEEN
#define LL_C2_AHB2_GRP1_PERIPH_GPIOH RCC_C2AHB2ENR_GPIOHEN
#define LL_C2_AHB2_GRP1_PERIPH_ADC RCC_C2AHB2ENR_ADCEN
#define LL_C2_AHB2_GRP1_PERIPH_AES1 RCC_C2AHB2ENR_AES1EN
#define LL_C2_AHB3_GRP1_PERIPH_PKA RCC_C2AHB3ENR_PKAEN
#define LL_C2_AHB3_GRP1_PERIPH_AES2 RCC_C2AHB3ENR_AES2EN
#define LL_C2_AHB3_GRP1_PERIPH_RNG RCC_C2AHB3ENR_RNGEN
#define LL_C2_AHB3_GRP1_PERIPH_HSEM RCC_C2AHB3ENR_HSEMEN
#define LL_C2_AHB3_GRP1_PERIPH_IPCC RCC_C2AHB3ENR_IPCCEN
#define LL_C2_AHB3_GRP1_PERIPH_FLASH RCC_C2AHB3ENR_FLASHEN
#define LL_C2_AHB3_GRP1_PERIPH_SRAM2 RCC_C2AHB3SMENR_SRAM2SMEN
#define LL_C2_APB1_GRP1_PERIPH_TIM2 RCC_C2APB1ENR1_TIM2EN
#define LL_C2_APB1_GRP1_PERIPH_LCD RCC_C2APB1ENR1_LCDEN
#define LL_C2_APB1_GRP1_PERIPH_RTCAPB RCC_C2APB1ENR1_RTCAPBEN
#define LL_C2_APB1_GRP1_PERIPH_SPI2 RCC_C2APB1ENR1_SPI2EN
#define LL_C2_APB1_GRP1_PERIPH_I2C1 RCC_C2APB1ENR1_I2C1EN
#define LL_C2_APB1_GRP1_PERIPH_I2C3 RCC_C2APB1ENR1_I2C3EN
#define LL_C2_APB1_GRP1_PERIPH_CRS RCC_C2APB1ENR1_CRSEN
#define LL_C2_APB1_GRP1_PERIPH_USB RCC_C2APB1ENR1_USBEN
#define LL_C2_APB1_GRP1_PERIPH_LPTIM1 RCC_C2APB1ENR1_LPTIM1EN
#define LL_C2_APB1_GRP2_PERIPH_LPUART1 RCC_C2APB1ENR2_LPUART1EN
#define LL_C2_APB1_GRP2_PERIPH_LPTIM2 RCC_C2APB1ENR2_LPTIM2EN
#define LL_C2_APB2_GRP1_PERIPH_TIM1 RCC_C2APB2ENR_TIM1EN
#define LL_C2_APB2_GRP1_PERIPH_SPI1 RCC_C2APB2ENR_SPI1EN
#define LL_C2_APB2_GRP1_PERIPH_USART1 RCC_C2APB2ENR_USART1EN
#define LL_C2_APB2_GRP1_PERIPH_TIM16 RCC_C2APB2ENR_TIM16EN
#define LL_C2_APB2_GRP1_PERIPH_TIM17 RCC_C2APB2ENR_TIM17EN
#define LL_C2_APB2_GRP1_PERIPH_SAI1 RCC_C2APB2ENR_SAI1EN
#define LL_C2_APB3_GRP1_PERIPH_BLE RCC_C2APB3ENR_BLEEN
#define LL_C2_APB3_GRP1_PERIPH_802 RCC_C2APB3ENR_802EN
static inline void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB1ENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB1ENR) & (Periphs));
  (void)tmpreg;
}
static inline uint32_t LL_AHB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB1ENR) & (Periphs)) == (Periphs)) ? 1UL : 0UL);
}
static inline void LL_AHB1_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB1ENR) &= ~(Periphs));
}
static inline void LL_AHB1_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB1RSTR) |= (Periphs));
}
static inline void LL_AHB1_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB1RSTR) &= ~(Periphs));
}
static inline void LL_AHB1_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB1SMENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB1SMENR) & (Periphs));
  (void)tmpreg;
}
static inline void LL_AHB1_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB1SMENR) &= ~(Periphs));
}
static inline void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB2ENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB2ENR) & (Periphs));
  (void)tmpreg;
}
static inline uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB2ENR) & (Periphs)) == (Periphs)) ? 1UL : 0UL);
}
static inline void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB2ENR) &= ~(Periphs));
}
static inline void LL_AHB2_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB2RSTR) |= (Periphs));
}
static inline void LL_AHB2_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB2RSTR) &= ~(Periphs));
}
static inline void LL_AHB2_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB2SMENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB2SMENR) & (Periphs));
  (void)tmpreg;
}
static inline void LL_AHB2_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB2SMENR) &= ~(Periphs));
}
static inline void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB3ENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB3ENR) & (Periphs));
  (void)tmpreg;
}
static inline uint32_t LL_AHB3_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB3ENR) & (Periphs)) == (Periphs)) ? 1UL : 0UL);
}
static inline void LL_AHB3_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB3ENR) &= ~(Periphs));
}
static inline void LL_AHB3_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB3RSTR) |= (Periphs));
}
static inline void LL_AHB3_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB3RSTR) &= ~(Periphs));
}
static inline void LL_AHB3_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB3SMENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB3SMENR) & (Periphs));
  (void)tmpreg;
}
static inline void LL_AHB3_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->AHB3SMENR) &= ~(Periphs));
}
static inline void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1ENR1) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1ENR1) & (Periphs));
  (void)tmpreg;
}
static inline void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1ENR2) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1ENR2) & (Periphs));
  (void)tmpreg;
}
static inline uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1ENR1) & (Periphs)) == (Periphs)) ? 1UL : 0UL);
}
static inline uint32_t LL_APB1_GRP2_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1ENR2) & (Periphs)) == (Periphs)) ? 1UL : 0UL);
}
static inline void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1ENR1) &= ~(Periphs));
}
static inline void LL_APB1_GRP2_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1ENR2) &= ~(Periphs));
}
static inline void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1RSTR1) |= (Periphs));
}
static inline void LL_APB1_GRP2_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1RSTR2) |= (Periphs));
}
static inline void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1RSTR1) &= ~(Periphs));
}
static inline void LL_APB1_GRP2_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1RSTR2) &= ~(Periphs));
}
static inline void LL_APB1_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1SMENR1) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1SMENR1) & (Periphs));
  (void)tmpreg;
}
static inline void LL_APB1_GRP2_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1SMENR2) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1SMENR2) & (Periphs));
  (void)tmpreg;
}
static inline void LL_APB1_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1SMENR1) &= ~(Periphs));
}
static inline void LL_APB1_GRP2_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB1SMENR2) &= ~(Periphs));
}
static inline void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB2ENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB2ENR) & (Periphs));
  (void)tmpreg;
}
static inline uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB2ENR) & (Periphs)) == (Periphs)) ? 1UL : 0UL);
}
static inline void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB2ENR) &= ~(Periphs));
}
static inline void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB2RSTR) |= (Periphs));
}
static inline void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB2RSTR) &= ~(Periphs));
}
static inline void LL_APB2_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB2SMENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB2SMENR) & (Periphs));
  (void)tmpreg;
}
static inline void LL_APB2_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB2SMENR) &= ~(Periphs));
}
static inline void LL_APB3_GRP1_ForceReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB3RSTR) |= (Periphs));
}
static inline void LL_APB3_GRP1_ReleaseReset(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->APB3RSTR) &= ~(Periphs));
}
static inline void LL_C2_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB1ENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB1ENR) & (Periphs));
  (void)tmpreg;
}
static inline uint32_t LL_C2_AHB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB1ENR) & (Periphs)) == (Periphs)) ? 1UL : 0UL);
}
static inline void LL_C2_AHB1_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB1ENR) &= ~(Periphs));
}
static inline void LL_C2_AHB1_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB1SMENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB1SMENR) & (Periphs));
  (void)tmpreg;
}
static inline void LL_C2_AHB1_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB1SMENR) &= ~(Periphs));
}
static inline void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB2ENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB2ENR) & (Periphs));
  (void)tmpreg;
}
static inline uint32_t LL_C2_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB2ENR) & (Periphs)) == (Periphs)) ? 1UL : 0UL);
}
static inline void LL_C2_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB2ENR) &= ~(Periphs));
}
static inline void LL_C2_AHB2_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB2SMENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB2SMENR) & (Periphs));
  (void)tmpreg;
}
static inline void LL_C2_AHB2_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB2SMENR) &= ~(Periphs));
}
static inline void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB3ENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB3ENR) & (Periphs));
  (void)tmpreg;
}
static inline uint32_t LL_C2_AHB3_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB3ENR) & (Periphs)) == (Periphs)) ? 1UL : 0UL);
}
static inline void LL_C2_AHB3_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB3ENR) &= ~(Periphs));
}
static inline void LL_C2_AHB3_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB3SMENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB3SMENR) & (Periphs));
  (void)tmpreg;
}
static inline void LL_C2_AHB3_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2AHB3SMENR) &= ~(Periphs));
}
static inline void LL_C2_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1ENR1) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1ENR1) & (Periphs));
  (void)tmpreg;
}
static inline void LL_C2_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1ENR2) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1ENR2) & (Periphs));
  (void)tmpreg;
}
static inline uint32_t LL_C2_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1ENR1) & (Periphs)) == (Periphs)) ? 1UL : 0UL);
}
static inline uint32_t LL_C2_APB1_GRP2_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1ENR2) & (Periphs)) == (Periphs)) ? 1UL : 0UL);
}
static inline void LL_C2_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1ENR1) &= ~(Periphs));
}
static inline void LL_C2_APB1_GRP2_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1ENR2) &= ~(Periphs));
}
static inline void LL_C2_APB1_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1SMENR1) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1SMENR1) & (Periphs));
  (void)tmpreg;
}
static inline void LL_C2_APB1_GRP2_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1SMENR2) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1SMENR2) & (Periphs));
  (void)tmpreg;
}
static inline void LL_C2_APB1_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1SMENR1) &= ~(Periphs));
}
static inline void LL_C2_APB1_GRP2_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB1SMENR2) &= ~(Periphs));
}
static inline void LL_C2_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB2ENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB2ENR) & (Periphs));
  (void)tmpreg;
}
static inline uint32_t LL_C2_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB2ENR) & (Periphs)) == (Periphs)) ? 1UL : 0UL);
}
static inline void LL_C2_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB2ENR) &= ~(Periphs));
}
static inline void LL_C2_APB2_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB2SMENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB2SMENR) & (Periphs));
  (void)tmpreg;
}
static inline void LL_C2_APB2_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB2SMENR) &= ~(Periphs));
}
static inline void LL_C2_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB3ENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB3ENR) & (Periphs));
  (void)tmpreg;
}
static inline uint32_t LL_C2_APB3_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB3ENR) & (Periphs)) == (Periphs)) ? 1UL : 0UL);
}
static inline void LL_C2_APB3_GRP1_DisableClock(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB3ENR) &= ~(Periphs));
}
static inline void LL_C2_APB3_GRP1_EnableClockSleep(uint32_t Periphs)
{
  volatile uint32_t tmpreg;
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB3SMENR) |= (Periphs));
  tmpreg = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB3SMENR) & (Periphs));
  (void)tmpreg;
}
static inline void LL_C2_APB3_GRP1_DisableClockSleep(uint32_t Periphs)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->C2APB3SMENR) &= ~(Periphs));
}
#define STM32WBxx_LL_COMP_H 
#define LL_COMP_OUTPUT_LEVEL_BITOFFSET_POS (30UL)
typedef struct
{
  uint32_t PowerMode;
  uint32_t InputPlus;
  uint32_t InputMinus;
  uint32_t InputHysteresis;
  uint32_t OutputPolarity;
  uint32_t OutputBlankingSource;
} LL_COMP_InitTypeDef;
#define LL_COMP_WINDOWMODE_DISABLE (0x00000000UL)
#define LL_COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON (COMP_CSR_WINMODE)
#define LL_COMP_POWERMODE_HIGHSPEED (0x00000000UL)
#define LL_COMP_POWERMODE_MEDIUMSPEED (COMP_CSR_PWRMODE_0)
#define LL_COMP_POWERMODE_ULTRALOWPOWER (COMP_CSR_PWRMODE_1 | COMP_CSR_PWRMODE_0)
#define LL_COMP_INPUT_PLUS_IO1 (0x00000000UL)
#define LL_COMP_INPUT_PLUS_IO2 (COMP_CSR_INPSEL_0)
#define LL_COMP_INPUT_PLUS_IO3 (COMP_CSR_INPSEL_1)
#define LL_COMP_INPUT_MINUS_1_4VREFINT ( COMP_CSR_SCALEN | COMP_CSR_BRGEN)
#define LL_COMP_INPUT_MINUS_1_2VREFINT ( COMP_CSR_INMSEL_0 | COMP_CSR_SCALEN | COMP_CSR_BRGEN)
#define LL_COMP_INPUT_MINUS_3_4VREFINT ( COMP_CSR_INMSEL_1 | COMP_CSR_SCALEN | COMP_CSR_BRGEN)
#define LL_COMP_INPUT_MINUS_VREFINT ( COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0 | COMP_CSR_SCALEN )
#define LL_COMP_INPUT_MINUS_IO1 (COMP_CSR_INMSEL_2 | COMP_CSR_INMSEL_1 )
#define LL_COMP_INPUT_MINUS_IO2 (COMP_CSR_INMSEL_2 | COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)
#define LL_COMP_INPUT_MINUS_IO3 ( COMP_CSR_INMESEL_0 | COMP_CSR_INMSEL_2 | COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)
#define LL_COMP_INPUT_MINUS_IO4 (COMP_CSR_INMESEL_1 | COMP_CSR_INMSEL_2 | COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)
#define LL_COMP_INPUT_MINUS_IO5 (COMP_CSR_INMESEL_1 | COMP_CSR_INMESEL_0 | COMP_CSR_INMSEL_2 | COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)
#define LL_COMP_HYSTERESIS_NONE (0x00000000UL)
#define LL_COMP_HYSTERESIS_LOW ( COMP_CSR_HYST_0)
#define LL_COMP_HYSTERESIS_MEDIUM (COMP_CSR_HYST_1 )
#define LL_COMP_HYSTERESIS_HIGH (COMP_CSR_HYST_1 | COMP_CSR_HYST_0)
#define LL_COMP_OUTPUTPOL_NONINVERTED (0x00000000UL)
#define LL_COMP_OUTPUTPOL_INVERTED (COMP_CSR_POLARITY)
#define LL_COMP_BLANKINGSRC_NONE (0x00000000UL)
#define LL_COMP_BLANKINGSRC_TIM1_OC5 (COMP_CSR_BLANKING_0)
#define LL_COMP_BLANKINGSRC_TIM2_OC3 (COMP_CSR_BLANKING_1)
#define LL_COMP_OUTPUT_LEVEL_LOW (0x00000000UL)
#define LL_COMP_OUTPUT_LEVEL_HIGH (0x00000001UL)
#define LL_COMP_DELAY_STARTUP_US ( 80UL)
#define LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US ( 200UL)
#define LL_COMP_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG((__INSTANCE__)->__REG__, (__VALUE__))
#define LL_COMP_ReadReg(__INSTANCE__,__REG__) READ_REG((__INSTANCE__)->__REG__)
#define __LL_COMP_COMMON_INSTANCE(__COMPx__) (COMP12_COMMON)
static inline void LL_COMP_SetCommonWindowMode(COMP_Common_TypeDef *COMPxy_COMMON, uint32_t WindowMode)
{
  (((COMPxy_COMMON->CSR)) = ((((((COMPxy_COMMON->CSR))) & (~((0x1UL << (9U))))) | (WindowMode))));
}
static inline uint32_t LL_COMP_GetCommonWindowMode(COMP_Common_TypeDef *COMPxy_COMMON)
{
  return (uint32_t)(((COMPxy_COMMON->CSR) & ((0x1UL << (9U)))));
}
static inline void LL_COMP_SetPowerMode(COMP_TypeDef *COMPx, uint32_t PowerMode)
{
  (((COMPx->CSR)) = ((((((COMPx->CSR))) & (~((0x3UL << (2U))))) | (PowerMode))));
}
static inline uint32_t LL_COMP_GetPowerMode(COMP_TypeDef *COMPx)
{
  return (uint32_t)(((COMPx->CSR) & ((0x3UL << (2U)))));
}
static inline void LL_COMP_ConfigInputs(COMP_TypeDef *COMPx, uint32_t InputMinus, uint32_t InputPlus)
{
  (((COMPx->CSR)) = ((((((COMPx->CSR))) & (~((0x3UL << (25U)) | (0x7UL << (4U)) | (0x3UL << (7U)) | (0x1UL << (23U)) | (0x1UL << (22U))))) | (InputMinus | InputPlus))));
}
static inline void LL_COMP_SetInputPlus(COMP_TypeDef *COMPx, uint32_t InputPlus)
{
  (((COMPx->CSR)) = ((((((COMPx->CSR))) & (~((0x3UL << (7U))))) | (InputPlus))));
}
static inline uint32_t LL_COMP_GetInputPlus(COMP_TypeDef *COMPx)
{
  return (uint32_t)(((COMPx->CSR) & ((0x3UL << (7U)))));
}
static inline void LL_COMP_SetInputMinus(COMP_TypeDef *COMPx, uint32_t InputMinus)
{
  (((COMPx->CSR)) = ((((((COMPx->CSR))) & (~((0x3UL << (25U)) | (0x7UL << (4U)) | (0x1UL << (23U)) | (0x1UL << (22U))))) | (InputMinus))));
}
static inline uint32_t LL_COMP_GetInputMinus(COMP_TypeDef *COMPx)
{
  return (uint32_t)(((COMPx->CSR) & ((0x3UL << (25U)) | (0x7UL << (4U)) | (0x1UL << (23U)) | (0x1UL << (22U)))));
}
static inline void LL_COMP_SetInputHysteresis(COMP_TypeDef *COMPx, uint32_t InputHysteresis)
{
  (((COMPx->CSR)) = ((((((COMPx->CSR))) & (~((0x3UL << (16U))))) | (InputHysteresis))));
}
static inline uint32_t LL_COMP_GetInputHysteresis(COMP_TypeDef *COMPx)
{
  return (uint32_t)(((COMPx->CSR) & ((0x3UL << (16U)))));
}
static inline void LL_COMP_SetOutputPolarity(COMP_TypeDef *COMPx, uint32_t OutputPolarity)
{
  (((COMPx->CSR)) = ((((((COMPx->CSR))) & (~((0x1UL << (15U))))) | (OutputPolarity))));
}
static inline uint32_t LL_COMP_GetOutputPolarity(COMP_TypeDef *COMPx)
{
  return (uint32_t)(((COMPx->CSR) & ((0x1UL << (15U)))));
}
static inline void LL_COMP_SetOutputBlankingSource(COMP_TypeDef *COMPx, uint32_t BlankingSource)
{
  (((COMPx->CSR)) = ((((((COMPx->CSR))) & (~((0x7UL << (18U))))) | (BlankingSource))));
}
static inline uint32_t LL_COMP_GetOutputBlankingSource(COMP_TypeDef *COMPx)
{
  return (uint32_t)(((COMPx->CSR) & ((0x7UL << (18U)))));
}
static inline void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  ((COMPx->CSR) |= ((0x1UL << (0U))));
}
static inline void LL_COMP_Disable(COMP_TypeDef *COMPx)
{
  ((COMPx->CSR) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_COMP_IsEnabled(COMP_TypeDef *COMPx)
{
  return ((((COMPx->CSR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  ((COMPx->CSR) |= ((0x1UL << (31U))));
}
static inline uint32_t LL_COMP_IsLocked(COMP_TypeDef *COMPx)
{
  return ((((COMPx->CSR) & ((0x1UL << (31U)))) == ((0x1UL << (31U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_COMP_ReadOutputLevel(COMP_TypeDef *COMPx)
{
  return (uint32_t)(((COMPx->CSR) & ((0x1UL << (30U))))
                    >> (30UL));
}
ErrorStatus LL_COMP_DeInit(COMP_TypeDef *COMPx);
ErrorStatus LL_COMP_Init(COMP_TypeDef *COMPx, LL_COMP_InitTypeDef *COMP_InitStruct);
void LL_COMP_StructInit(LL_COMP_InitTypeDef *COMP_InitStruct);
#define STM32WBxx_LL_CORTEX_H 
#define LL_SYSTICK_CLKSOURCE_HCLK_DIV8 0x00000000U
#define LL_SYSTICK_CLKSOURCE_HCLK SysTick_CTRL_CLKSOURCE_Msk
#define LL_HANDLER_FAULT_USG SCB_SHCSR_USGFAULTENA_Msk
#define LL_HANDLER_FAULT_BUS SCB_SHCSR_BUSFAULTENA_Msk
#define LL_HANDLER_FAULT_MEM SCB_SHCSR_MEMFAULTENA_Msk
#define LL_MPU_CTRL_HFNMI_PRIVDEF_NONE 0x00000000U
#define LL_MPU_CTRL_HARDFAULT_NMI MPU_CTRL_HFNMIENA_Msk
#define LL_MPU_CTRL_PRIVILEGED_DEFAULT MPU_CTRL_PRIVDEFENA_Msk
#define LL_MPU_CTRL_HFNMI_PRIVDEF (MPU_CTRL_HFNMIENA_Msk | MPU_CTRL_PRIVDEFENA_Msk)
#define LL_MPU_REGION_NUMBER0 0x00U
#define LL_MPU_REGION_NUMBER1 0x01U
#define LL_MPU_REGION_NUMBER2 0x02U
#define LL_MPU_REGION_NUMBER3 0x03U
#define LL_MPU_REGION_NUMBER4 0x04U
#define LL_MPU_REGION_NUMBER5 0x05U
#define LL_MPU_REGION_NUMBER6 0x06U
#define LL_MPU_REGION_NUMBER7 0x07U
#define LL_MPU_REGION_SIZE_32B (0x04U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_64B (0x05U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_128B (0x06U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_256B (0x07U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_512B (0x08U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_1KB (0x09U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_2KB (0x0AU << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_4KB (0x0BU << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_8KB (0x0CU << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_16KB (0x0DU << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_32KB (0x0EU << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_64KB (0x0FU << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_128KB (0x10U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_256KB (0x11U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_512KB (0x12U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_1MB (0x13U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_2MB (0x14U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_4MB (0x15U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_8MB (0x16U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_16MB (0x17U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_32MB (0x18U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_64MB (0x19U << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_128MB (0x1AU << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_256MB (0x1BU << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_512MB (0x1CU << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_1GB (0x1DU << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_2GB (0x1EU << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_SIZE_4GB (0x1FU << MPU_RASR_SIZE_Pos)
#define LL_MPU_REGION_NO_ACCESS (0x00U << MPU_RASR_AP_Pos)
#define LL_MPU_REGION_PRIV_RW (0x01U << MPU_RASR_AP_Pos)
#define LL_MPU_REGION_PRIV_RW_URO (0x02U << MPU_RASR_AP_Pos)
#define LL_MPU_REGION_FULL_ACCESS (0x03U << MPU_RASR_AP_Pos)
#define LL_MPU_REGION_PRIV_RO (0x05U << MPU_RASR_AP_Pos)
#define LL_MPU_REGION_PRIV_RO_URO (0x06U << MPU_RASR_AP_Pos)
#define LL_MPU_TEX_LEVEL0 (0x00U << MPU_RASR_TEX_Pos)
#define LL_MPU_TEX_LEVEL1 (0x01U << MPU_RASR_TEX_Pos)
#define LL_MPU_TEX_LEVEL2 (0x02U << MPU_RASR_TEX_Pos)
#define LL_MPU_TEX_LEVEL4 (0x04U << MPU_RASR_TEX_Pos)
#define LL_MPU_INSTRUCTION_ACCESS_ENABLE 0x00U
#define LL_MPU_INSTRUCTION_ACCESS_DISABLE MPU_RASR_XN_Msk
#define LL_MPU_ACCESS_SHAREABLE MPU_RASR_S_Msk
#define LL_MPU_ACCESS_NOT_SHAREABLE 0x00U
#define LL_MPU_ACCESS_CACHEABLE MPU_RASR_C_Msk
#define LL_MPU_ACCESS_NOT_CACHEABLE 0x00U
#define LL_MPU_ACCESS_BUFFERABLE MPU_RASR_B_Msk
#define LL_MPU_ACCESS_NOT_BUFFERABLE 0x00U
static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return (((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL & (1UL << 16U)) == ((1UL << 16U))) ? 1UL : 0UL);
}
static inline void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == (1UL << 2U))
  {
    ((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL) |= ((1UL << 2U)));
  }
  else
  {
    ((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL) &= ~((1UL << 2U)));
  }
}
static inline uint32_t LL_SYSTICK_GetClkSource(void)
{
  return ((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL) & ((1UL << 2U)));
}
static inline void LL_SYSTICK_EnableIT(void)
{
  ((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL) |= ((1UL << 1U)));
}
static inline void LL_SYSTICK_DisableIT(void)
{
  ((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL) &= ~((1UL << 1U)));
}
static inline uint32_t LL_SYSTICK_IsEnabledIT(void)
{
  return ((((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL) & ((1UL << 1U))) == ((1UL << 1U))) ? 1UL : 0UL);
}
static inline void LL_LPM_EnableSleep(void)
{
  ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SCR) &= ~(((uint32_t)(1UL << 2U))));
}
static inline void LL_LPM_EnableDeepSleep(void)
{
  ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SCR) |= (((uint32_t)(1UL << 2U))));
}
static inline void LL_LPM_EnableSleepOnExit(void)
{
  ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SCR) |= (((uint32_t)(1UL << 1U))));
}
static inline void LL_LPM_DisableSleepOnExit(void)
{
  ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SCR) &= ~(((uint32_t)(1UL << 1U))));
}
static inline void LL_LPM_EnableEventOnPend(void)
{
  ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SCR) |= (((uint32_t)(1UL << 4U))));
}
static inline void LL_LPM_DisableEventOnPend(void)
{
  ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SCR) &= ~(((uint32_t)(1UL << 4U))));
}
static inline void LL_HANDLER_EnableFault(uint32_t Fault)
{
  ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR) |= (Fault));
}
static inline void LL_HANDLER_DisableFault(uint32_t Fault)
{
  ((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR) &= ~(Fault));
}
static inline uint32_t LL_CPUID_GetImplementer(void)
{
  return (uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CPUID) & ((0xFFUL << 24U))) >> 24U);
}
static inline uint32_t LL_CPUID_GetVariant(void)
{
  return (uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CPUID) & ((0xFUL << 20U))) >> 20U);
}
static inline uint32_t LL_CPUID_GetConstant(void)
{
  return (uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CPUID) & ((0xFUL << 16U))) >> 16U);
}
static inline uint32_t LL_CPUID_GetParNo(void)
{
  return (uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CPUID) & ((0xFFFUL << 4U))) >> 4U);
}
static inline uint32_t LL_CPUID_GetRevision(void)
{
  return (uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->CPUID) & ((0xFUL ))) >> 0U);
}
static inline void LL_MPU_Enable(uint32_t Options)
{
  ((((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL) = (((1UL ) | Options)));
  __DSB();
  __ISB();
}
static inline void LL_MPU_Disable(void)
{
  __DMB();
  ((((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL) = (0U));
}
static inline uint32_t LL_MPU_IsEnabled(void)
{
  return ((((((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL) & ((1UL ))) == ((1UL ))) ? 1UL : 0UL);
}
static inline void LL_MPU_EnableRegion(uint32_t Region)
{
  ((((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR) = (Region));
  ((((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR) |= ((1UL )));
}
static inline void LL_MPU_ConfigRegion(uint32_t Region, uint32_t SubRegionDisable, uint32_t Address, uint32_t Attributes)
{
  ((((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR) = (Region));
  ((((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR) = ((Address & 0xFFFFFFE0U)));
  ((((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR) = (((1UL ) | Attributes | (SubRegionDisable << 8U))));
}
static inline void LL_MPU_DisableRegion(uint32_t Region)
{
  ((((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR) = (Region));
  ((((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR) &= ~((1UL )));
}
#define STM32WBxx_LL_CRC_H 
#define LL_CRC_POLYLENGTH_32B 0x00000000U
#define LL_CRC_POLYLENGTH_16B CRC_CR_POLYSIZE_0
#define LL_CRC_POLYLENGTH_8B CRC_CR_POLYSIZE_1
#define LL_CRC_POLYLENGTH_7B (CRC_CR_POLYSIZE_1 | CRC_CR_POLYSIZE_0)
#define LL_CRC_INDATA_REVERSE_NONE 0x00000000U
#define LL_CRC_INDATA_REVERSE_BYTE CRC_CR_REV_IN_0
#define LL_CRC_INDATA_REVERSE_HALFWORD CRC_CR_REV_IN_1
#define LL_CRC_INDATA_REVERSE_WORD (CRC_CR_REV_IN_1 | CRC_CR_REV_IN_0)
#define LL_CRC_OUTDATA_REVERSE_NONE 0x00000000U
#define LL_CRC_OUTDATA_REVERSE_BIT CRC_CR_REV_OUT
#define LL_CRC_DEFAULT_CRC32_POLY 0x04C11DB7U
#define LL_CRC_DEFAULT_CRC_INITVALUE 0xFFFFFFFFU
#define LL_CRC_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, __VALUE__)
#define LL_CRC_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
static inline void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
  ((CRCx->CR) |= ((0x1UL << (0U))));
}
static inline void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
  (((CRCx->CR)) = ((((((CRCx->CR))) & (~((0x3UL << (3U))))) | (PolySize))));
}
static inline uint32_t LL_CRC_GetPolynomialSize(CRC_TypeDef *CRCx)
{
  return (uint32_t)(((CRCx->CR) & ((0x3UL << (3U)))));
}
static inline void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  (((CRCx->CR)) = ((((((CRCx->CR))) & (~((0x3UL << (5U))))) | (ReverseMode))));
}
static inline uint32_t LL_CRC_GetInputDataReverseMode(CRC_TypeDef *CRCx)
{
  return (uint32_t)(((CRCx->CR) & ((0x3UL << (5U)))));
}
static inline void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  (((CRCx->CR)) = ((((((CRCx->CR))) & (~((0x1UL << (7U))))) | (ReverseMode))));
}
static inline uint32_t LL_CRC_GetOutputDataReverseMode(CRC_TypeDef *CRCx)
{
  return (uint32_t)(((CRCx->CR) & ((0x1UL << (7U)))));
}
static inline void LL_CRC_SetInitialData(CRC_TypeDef *CRCx, uint32_t InitCrc)
{
  ((CRCx->INIT) = (InitCrc));
}
static inline uint32_t LL_CRC_GetInitialData(CRC_TypeDef *CRCx)
{
  return (uint32_t)(((CRCx->INIT)));
}
static inline void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
  ((CRCx->POL) = (PolynomCoef));
}
static inline uint32_t LL_CRC_GetPolynomialCoef(CRC_TypeDef *CRCx)
{
  return (uint32_t)(((CRCx->POL)));
}
static inline void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
  ((CRCx->DR) = (InData));
}
static inline void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
  volatile uint16_t *pReg;
  pReg = (volatile uint16_t *)(volatile void *)(&CRCx->DR);
  *pReg = InData;
}
static inline void LL_CRC_FeedData8(CRC_TypeDef *CRCx, uint8_t InData)
{
  *(uint8_t volatile *)(&CRCx->DR) = (uint8_t) InData;
}
static inline uint32_t LL_CRC_ReadData32(CRC_TypeDef *CRCx)
{
  return (uint32_t)(((CRCx->DR)));
}
static inline uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
  return (uint16_t)((CRCx->DR));
}
static inline uint8_t LL_CRC_ReadData8(CRC_TypeDef *CRCx)
{
  return (uint8_t)((CRCx->DR));
}
static inline uint8_t LL_CRC_ReadData7(CRC_TypeDef *CRCx)
{
  return (uint8_t)(((CRCx->DR)) & 0x7FU);
}
static inline uint32_t LL_CRC_Read_IDR(CRC_TypeDef *CRCx)
{
  return (uint32_t)(((CRCx->IDR)));
}
static inline void LL_CRC_Write_IDR(CRC_TypeDef *CRCx, uint32_t InData)
{
  *((uint32_t volatile *)(&CRCx->IDR)) = (uint32_t) InData;
}
ErrorStatus LL_CRC_DeInit(CRC_TypeDef *CRCx);
#define STM32WBxx_LL_CRS_H 
#define CRS_POSITION_TRIM (CRS_CR_TRIM_Pos)
#define CRS_POSITION_FECAP (CRS_ISR_FECAP_Pos)
#define CRS_POSITION_FELIM (CRS_CFGR_FELIM_Pos)
#define LL_CRS_ISR_SYNCOKF CRS_ISR_SYNCOKF
#define LL_CRS_ISR_SYNCWARNF CRS_ISR_SYNCWARNF
#define LL_CRS_ISR_ERRF CRS_ISR_ERRF
#define LL_CRS_ISR_ESYNCF CRS_ISR_ESYNCF
#define LL_CRS_ISR_SYNCERR CRS_ISR_SYNCERR
#define LL_CRS_ISR_SYNCMISS CRS_ISR_SYNCMISS
#define LL_CRS_ISR_TRIMOVF CRS_ISR_TRIMOVF
#define LL_CRS_CR_SYNCOKIE CRS_CR_SYNCOKIE
#define LL_CRS_CR_SYNCWARNIE CRS_CR_SYNCWARNIE
#define LL_CRS_CR_ERRIE CRS_CR_ERRIE
#define LL_CRS_CR_ESYNCIE CRS_CR_ESYNCIE
#define LL_CRS_SYNC_DIV_1 0x00000000U
#define LL_CRS_SYNC_DIV_2 CRS_CFGR_SYNCDIV_0
#define LL_CRS_SYNC_DIV_4 CRS_CFGR_SYNCDIV_1
#define LL_CRS_SYNC_DIV_8 (CRS_CFGR_SYNCDIV_1 | CRS_CFGR_SYNCDIV_0)
#define LL_CRS_SYNC_DIV_16 CRS_CFGR_SYNCDIV_2
#define LL_CRS_SYNC_DIV_32 (CRS_CFGR_SYNCDIV_2 | CRS_CFGR_SYNCDIV_0)
#define LL_CRS_SYNC_DIV_64 (CRS_CFGR_SYNCDIV_2 | CRS_CFGR_SYNCDIV_1)
#define LL_CRS_SYNC_DIV_128 CRS_CFGR_SYNCDIV
#define LL_CRS_SYNC_SOURCE_GPIO 0x00000000U
#define LL_CRS_SYNC_SOURCE_LSE CRS_CFGR_SYNCSRC_0
#define LL_CRS_SYNC_SOURCE_USB CRS_CFGR_SYNCSRC_1
#define LL_CRS_SYNC_POLARITY_RISING 0x00000000U
#define LL_CRS_SYNC_POLARITY_FALLING CRS_CFGR_SYNCPOL
#define LL_CRS_FREQ_ERROR_DIR_UP 0x00000000U
#define LL_CRS_FREQ_ERROR_DIR_DOWN CRS_ISR_FEDIR
#define LL_CRS_RELOADVALUE_DEFAULT 0x0000BB7FU
#define LL_CRS_ERRORLIMIT_DEFAULT 0x00000022U
#define LL_CRS_HSI48CALIBRATION_DEFAULT 0x00000020U
#define LL_CRS_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_CRS_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
#define __LL_CRS_CALC_CALCULATE_RELOADVALUE(__FTARGET__,__FSYNC__) (((__FTARGET__) / (__FSYNC__)) - 1U)
static inline void LL_CRS_EnableFreqErrorCounter(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) |= ((0x1UL << (5U))));
}
static inline void LL_CRS_DisableFreqErrorCounter(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) &= ~((0x1UL << (5U))));
}
static inline uint32_t LL_CRS_IsEnabledFreqErrorCounter(void)
{
  return ((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline void LL_CRS_EnableAutoTrimming(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) |= ((0x1UL << (6U))));
}
static inline void LL_CRS_DisableAutoTrimming(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) &= ~((0x1UL << (6U))));
}
static inline uint32_t LL_CRS_IsEnabledAutoTrimming(void)
{
  return ((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline void LL_CRS_SetHSI48SmoothTrimming(uint32_t Value)
{
  (((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR)) = ((((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR))) & (~((0x3FUL << (8U))))) | (Value << ((8U))))));
}
static inline uint32_t LL_CRS_GetHSI48SmoothTrimming(void)
{
  return (uint32_t)(((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) & ((0x3FUL << (8U)))) >> ((8U)));
}
static inline void LL_CRS_SetReloadCounter(uint32_t Value)
{
  (((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR)) = ((((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR))) & (~((0xFFFFUL << (0U))))) | (Value))));
}
static inline uint32_t LL_CRS_GetReloadCounter(void)
{
  return (uint32_t)(((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR) & ((0xFFFFUL << (0U)))));
}
static inline void LL_CRS_SetFreqErrorLimit(uint32_t Value)
{
  (((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR)) = ((((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR))) & (~((0xFFUL << (16U))))) | (Value << ((16U))))));
}
static inline uint32_t LL_CRS_GetFreqErrorLimit(void)
{
  return (uint32_t)(((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR) & ((0xFFUL << (16U)))) >> ((16U)));
}
static inline void LL_CRS_SetSyncDivider(uint32_t Divider)
{
  (((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR)) = ((((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR))) & (~((0x7UL << (24U))))) | (Divider))));
}
static inline uint32_t LL_CRS_GetSyncDivider(void)
{
  return (uint32_t)(((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR) & ((0x7UL << (24U)))));
}
static inline void LL_CRS_SetSyncSignalSource(uint32_t Source)
{
  (((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR)) = ((((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR))) & (~((0x3UL << (28U))))) | (Source))));
}
static inline uint32_t LL_CRS_GetSyncSignalSource(void)
{
  return (uint32_t)(((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR) & ((0x3UL << (28U)))));
}
static inline void LL_CRS_SetSyncPolarity(uint32_t Polarity)
{
  (((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR)) = ((((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR))) & (~((0x1UL << (31U))))) | (Polarity))));
}
static inline uint32_t LL_CRS_GetSyncPolarity(void)
{
  return (uint32_t)(((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR) & ((0x1UL << (31U)))));
}
static inline void LL_CRS_ConfigSynchronization(uint32_t HSI48CalibrationValue, uint32_t ErrorLimitValue, uint32_t ReloadValue, uint32_t Settings)
{
  (((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR)) = ((((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR))) & (~((0x3FUL << (8U))))) | (HSI48CalibrationValue))));
  (((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR)) = ((((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CFGR))) & (~((0xFFFFUL << (0U)) | (0xFFUL << (16U)) | (0x7UL << (24U)) | (0x3UL << (28U)) | (0x1UL << (31U))))) | (ReloadValue | (ErrorLimitValue << ((16U))) | Settings))));
}
static inline void LL_CRS_GenerateEvent_SWSYNC(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) |= ((0x1UL << (7U))));
}
static inline uint32_t LL_CRS_GetFreqErrorDirection(void)
{
  return (uint32_t)(((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->ISR) & ((0x1UL << (15U)))));
}
static inline uint32_t LL_CRS_GetFreqErrorCapture(void)
{
  return (uint32_t)(((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->ISR) & ((0xFFFFUL << (16U)))) >> ((16U)));
}
static inline uint32_t LL_CRS_IsActiveFlag_SYNCOK(void)
{
  return ((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->ISR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_CRS_IsActiveFlag_SYNCWARN(void)
{
  return ((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->ISR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_CRS_IsActiveFlag_ERR(void)
{
  return ((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->ISR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_CRS_IsActiveFlag_ESYNC(void)
{
  return ((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->ISR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_CRS_IsActiveFlag_SYNCERR(void)
{
  return ((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->ISR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_CRS_IsActiveFlag_SYNCMISS(void)
{
  return ((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->ISR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_CRS_IsActiveFlag_TRIMOVF(void)
{
  return ((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->ISR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline void LL_CRS_ClearFlag_SYNCOK(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->ICR) = ((0x1UL << (0U))));
}
static inline void LL_CRS_ClearFlag_SYNCWARN(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->ICR) = ((0x1UL << (1U))));
}
static inline void LL_CRS_ClearFlag_ERR(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->ICR) = ((0x1UL << (2U))));
}
static inline void LL_CRS_ClearFlag_ESYNC(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->ICR) = ((0x1UL << (3U))));
}
static inline void LL_CRS_EnableIT_SYNCOK(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) |= ((0x1UL << (0U))));
}
static inline void LL_CRS_DisableIT_SYNCOK(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_CRS_IsEnabledIT_SYNCOK(void)
{
  return ((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_CRS_EnableIT_SYNCWARN(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) |= ((0x1UL << (1U))));
}
static inline void LL_CRS_DisableIT_SYNCWARN(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) &= ~((0x1UL << (1U))));
}
static inline uint32_t LL_CRS_IsEnabledIT_SYNCWARN(void)
{
  return ((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline void LL_CRS_EnableIT_ERR(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) |= ((0x1UL << (2U))));
}
static inline void LL_CRS_DisableIT_ERR(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) &= ~((0x1UL << (2U))));
}
static inline uint32_t LL_CRS_IsEnabledIT_ERR(void)
{
  return ((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline void LL_CRS_EnableIT_ESYNC(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) |= ((0x1UL << (3U))));
}
static inline void LL_CRS_DisableIT_ESYNC(void)
{
  ((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) &= ~((0x1UL << (3U))));
}
static inline uint32_t LL_CRS_IsEnabledIT_ESYNC(void)
{
  return ((((((CRS_TypeDef *) ((0x40000000UL) + 0x00006000UL))->CR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
ErrorStatus LL_CRS_DeInit(void);
#define STM32WBxx_LL_DMA_H 
#define STM32WBxx_LL_DMAMUX_H 
#define DMAMUX_CCR_SIZE 0x00000004UL
#define DMAMUX_RGCR_SIZE 0x00000004UL
#define LL_DMAMUX_CFR_CSOF0 DMAMUX_CFR_CSOF0
#define LL_DMAMUX_CFR_CSOF1 DMAMUX_CFR_CSOF1
#define LL_DMAMUX_CFR_CSOF2 DMAMUX_CFR_CSOF2
#define LL_DMAMUX_CFR_CSOF3 DMAMUX_CFR_CSOF3
#define LL_DMAMUX_CFR_CSOF4 DMAMUX_CFR_CSOF4
#define LL_DMAMUX_CFR_CSOF5 DMAMUX_CFR_CSOF5
#define LL_DMAMUX_CFR_CSOF6 DMAMUX_CFR_CSOF6
#define LL_DMAMUX_CFR_CSOF7 DMAMUX_CFR_CSOF7
#define LL_DMAMUX_CFR_CSOF8 DMAMUX_CFR_CSOF8
#define LL_DMAMUX_CFR_CSOF9 DMAMUX_CFR_CSOF9
#define LL_DMAMUX_CFR_CSOF10 DMAMUX_CFR_CSOF10
#define LL_DMAMUX_CFR_CSOF11 DMAMUX_CFR_CSOF11
#define LL_DMAMUX_CFR_CSOF12 DMAMUX_CFR_CSOF12
#define LL_DMAMUX_CFR_CSOF13 DMAMUX_CFR_CSOF13
#define LL_DMAMUX_RGCFR_RGCOF0 DMAMUX_RGCFR_COF0
#define LL_DMAMUX_RGCFR_RGCOF1 DMAMUX_RGCFR_COF1
#define LL_DMAMUX_RGCFR_RGCOF2 DMAMUX_RGCFR_COF2
#define LL_DMAMUX_RGCFR_RGCOF3 DMAMUX_RGCFR_COF3
#define LL_DMAMUX_CSR_SOF0 DMAMUX_CSR_SOF0
#define LL_DMAMUX_CSR_SOF1 DMAMUX_CSR_SOF1
#define LL_DMAMUX_CSR_SOF2 DMAMUX_CSR_SOF2
#define LL_DMAMUX_CSR_SOF3 DMAMUX_CSR_SOF3
#define LL_DMAMUX_CSR_SOF4 DMAMUX_CSR_SOF4
#define LL_DMAMUX_CSR_SOF5 DMAMUX_CSR_SOF5
#define LL_DMAMUX_CSR_SOF6 DMAMUX_CSR_SOF6
#define LL_DMAMUX_CSR_SOF7 DMAMUX_CSR_SOF7
#define LL_DMAMUX_CSR_SOF8 DMAMUX_CSR_SOF8
#define LL_DMAMUX_CSR_SOF9 DMAMUX_CSR_SOF9
#define LL_DMAMUX_CSR_SOF10 DMAMUX_CSR_SOF10
#define LL_DMAMUX_CSR_SOF11 DMAMUX_CSR_SOF11
#define LL_DMAMUX_CSR_SOF12 DMAMUX_CSR_SOF12
#define LL_DMAMUX_CSR_SOF13 DMAMUX_CSR_SOF13
#define LL_DMAMUX_RGSR_RGOF0 DMAMUX_RGSR_OF0
#define LL_DMAMUX_RGSR_RGOF1 DMAMUX_RGSR_OF1
#define LL_DMAMUX_RGSR_RGOF2 DMAMUX_RGSR_OF2
#define LL_DMAMUX_RGSR_RGOF3 DMAMUX_RGSR_OF3
#define LL_DMAMUX_CCR_SOIE DMAMUX_CxCR_SOIE
#define LL_DMAMUX_RGCR_RGOIE DMAMUX_RGxCR_OIE
#define LL_DMAMUX_REQ_MEM2MEM 0x00000000U
#define LL_DMAMUX_REQ_GENERATOR0 0x00000001U
#define LL_DMAMUX_REQ_GENERATOR1 0x00000002U
#define LL_DMAMUX_REQ_GENERATOR2 0x00000003U
#define LL_DMAMUX_REQ_GENERATOR3 0x00000004U
#define LL_DMAMUX_REQ_ADC1 0x00000005U
#define LL_DMAMUX_REQ_SPI1_RX 0x00000006U
#define LL_DMAMUX_REQ_SPI1_TX 0x00000007U
#define LL_DMAMUX_REQ_SPI2_RX 0x00000008U
#define LL_DMAMUX_REQ_SPI2_TX 0x00000009U
#define LL_DMAMUX_REQ_I2C1_RX 0x0000000AU
#define LL_DMAMUX_REQ_I2C1_TX 0x0000000BU
#define LL_DMAMUX_REQ_I2C3_RX 0x0000000CU
#define LL_DMAMUX_REQ_I2C3_TX 0x0000000DU
#define LL_DMAMUX_REQ_USART1_RX 0x0000000EU
#define LL_DMAMUX_REQ_USART1_TX 0x0000000FU
#define LL_DMAMUX_REQ_LPUART1_RX 0x00000010U
#define LL_DMAMUX_REQ_LPUART1_TX 0x00000011U
#define LL_DMAMUX_REQ_SAI1_A 0x00000012U
#define LL_DMAMUX_REQ_SAI1_B 0x00000013U
#define LL_DMAMUX_REQ_QUADSPI 0x00000014U
#define LL_DMAMUX_REQ_TIM1_CH1 0x00000015U
#define LL_DMAMUX_REQ_TIM1_CH2 0x00000016U
#define LL_DMAMUX_REQ_TIM1_CH3 0x00000017U
#define LL_DMAMUX_REQ_TIM1_CH4 0x00000018U
#define LL_DMAMUX_REQ_TIM1_UP 0x00000019U
#define LL_DMAMUX_REQ_TIM1_TRIG 0x0000001AU
#define LL_DMAMUX_REQ_TIM1_COM 0x0000001BU
#define LL_DMAMUX_REQ_TIM2_CH1 0x0000001CU
#define LL_DMAMUX_REQ_TIM2_CH2 0x0000001DU
#define LL_DMAMUX_REQ_TIM2_CH3 0x0000001EU
#define LL_DMAMUX_REQ_TIM2_CH4 0x0000001FU
#define LL_DMAMUX_REQ_TIM2_UP 0x00000020U
#define LL_DMAMUX_REQ_TIM16_CH1 0x00000021U
#define LL_DMAMUX_REQ_TIM16_UP 0x00000022U
#define LL_DMAMUX_REQ_TIM17_CH1 0x00000023U
#define LL_DMAMUX_REQ_TIM17_UP 0x00000024U
#define LL_DMAMUX_REQ_AES1_IN 0x00000025U
#define LL_DMAMUX_REQ_AES1_OUT 0x00000026U
#define LL_DMAMUX_REQ_AES2_IN 0x00000027U
#define LL_DMAMUX_REQ_AES2_OUT 0x00000028U
#define LL_DMAMUX_CHANNEL_0 0x00000000U
#define LL_DMAMUX_CHANNEL_1 0x00000001U
#define LL_DMAMUX_CHANNEL_2 0x00000002U
#define LL_DMAMUX_CHANNEL_3 0x00000003U
#define LL_DMAMUX_CHANNEL_4 0x00000004U
#define LL_DMAMUX_CHANNEL_5 0x00000005U
#define LL_DMAMUX_CHANNEL_6 0x00000006U
#define LL_DMAMUX_CHANNEL_7 0x00000007U
#define LL_DMAMUX_CHANNEL_8 0x00000008U
#define LL_DMAMUX_CHANNEL_9 0x00000009U
#define LL_DMAMUX_CHANNEL_10 0x0000000AU
#define LL_DMAMUX_CHANNEL_11 0x0000000BU
#define LL_DMAMUX_CHANNEL_12 0x0000000CU
#define LL_DMAMUX_CHANNEL_13 0x0000000DU
#define LL_DMAMUX_SYNC_NO_EVENT 0x00000000U
#define LL_DMAMUX_SYNC_POL_RISING DMAMUX_CxCR_SPOL_0
#define LL_DMAMUX_SYNC_POL_FALLING DMAMUX_CxCR_SPOL_1
#define LL_DMAMUX_SYNC_POL_RISING_FALLING (DMAMUX_CxCR_SPOL_0 | DMAMUX_CxCR_SPOL_1)
#define LL_DMAMUX_SYNC_EXTI_LINE0 0x00000000U
#define LL_DMAMUX_SYNC_EXTI_LINE1 DMAMUX_CxCR_SYNC_ID_0
#define LL_DMAMUX_SYNC_EXTI_LINE2 DMAMUX_CxCR_SYNC_ID_1
#define LL_DMAMUX_SYNC_EXTI_LINE3 (DMAMUX_CxCR_SYNC_ID_1 | DMAMUX_CxCR_SYNC_ID_0)
#define LL_DMAMUX_SYNC_EXTI_LINE4 DMAMUX_CxCR_SYNC_ID_2
#define LL_DMAMUX_SYNC_EXTI_LINE5 (DMAMUX_CxCR_SYNC_ID_2 | DMAMUX_CxCR_SYNC_ID_0)
#define LL_DMAMUX_SYNC_EXTI_LINE6 (DMAMUX_CxCR_SYNC_ID_2 | DMAMUX_CxCR_SYNC_ID_1)
#define LL_DMAMUX_SYNC_EXTI_LINE7 (DMAMUX_CxCR_SYNC_ID_2 | DMAMUX_CxCR_SYNC_ID_1 | DMAMUX_CxCR_SYNC_ID_0)
#define LL_DMAMUX_SYNC_EXTI_LINE8 DMAMUX_CxCR_SYNC_ID_3
#define LL_DMAMUX_SYNC_EXTI_LINE9 (DMAMUX_CxCR_SYNC_ID_3 | DMAMUX_CxCR_SYNC_ID_0)
#define LL_DMAMUX_SYNC_EXTI_LINE10 (DMAMUX_CxCR_SYNC_ID_3 | DMAMUX_CxCR_SYNC_ID_1)
#define LL_DMAMUX_SYNC_EXTI_LINE11 (DMAMUX_CxCR_SYNC_ID_3 | DMAMUX_CxCR_SYNC_ID_1 | DMAMUX_CxCR_SYNC_ID_0)
#define LL_DMAMUX_SYNC_EXTI_LINE12 (DMAMUX_CxCR_SYNC_ID_3 | DMAMUX_CxCR_SYNC_ID_2)
#define LL_DMAMUX_SYNC_EXTI_LINE13 (DMAMUX_CxCR_SYNC_ID_3 | DMAMUX_CxCR_SYNC_ID_2 | DMAMUX_CxCR_SYNC_ID_0)
#define LL_DMAMUX_SYNC_EXTI_LINE14 (DMAMUX_CxCR_SYNC_ID_3 | DMAMUX_CxCR_SYNC_ID_2 | DMAMUX_CxCR_SYNC_ID_1)
#define LL_DMAMUX_SYNC_EXTI_LINE15 (DMAMUX_CxCR_SYNC_ID_3 | DMAMUX_CxCR_SYNC_ID_2 | DMAMUX_CxCR_SYNC_ID_1 | DMAMUX_CxCR_SYNC_ID_0)
#define LL_DMAMUX_SYNC_DMAMUX_CH0 DMAMUX_CxCR_SYNC_ID_4
#define LL_DMAMUX_SYNC_DMAMUX_CH1 (DMAMUX_CxCR_SYNC_ID_4 | DMAMUX_CxCR_SYNC_ID_0)
#define LL_DMAMUX_SYNC_LPTIM1_OUT (DMAMUX_CxCR_SYNC_ID_4 | DMAMUX_CxCR_SYNC_ID_1)
#define LL_DMAMUX_SYNC_LPTIM2_OUT (DMAMUX_CxCR_SYNC_ID_4 | DMAMUX_CxCR_SYNC_ID_1 | DMAMUX_CxCR_SYNC_ID_0)
#define LL_DMAMUX_REQ_GEN_0 0x00000000U
#define LL_DMAMUX_REQ_GEN_1 0x00000001U
#define LL_DMAMUX_REQ_GEN_2 0x00000002U
#define LL_DMAMUX_REQ_GEN_3 0x00000003U
#define LL_DMAMUX_REQ_GEN_NO_EVENT 0x00000000U
#define LL_DMAMUX_REQ_GEN_POL_RISING DMAMUX_RGxCR_GPOL_0
#define LL_DMAMUX_REQ_GEN_POL_FALLING DMAMUX_RGxCR_GPOL_1
#define LL_DMAMUX_REQ_GEN_POL_RISING_FALLING (DMAMUX_RGxCR_GPOL_0 | DMAMUX_RGxCR_GPOL_1)
#define LL_DMAMUX_REQ_GEN_EXTI_LINE0 0x00000000U
#define LL_DMAMUX_REQ_GEN_EXTI_LINE1 DMAMUX_RGxCR_SIG_ID_0
#define LL_DMAMUX_REQ_GEN_EXTI_LINE2 DMAMUX_RGxCR_SIG_ID_1
#define LL_DMAMUX_REQ_GEN_EXTI_LINE3 (DMAMUX_RGxCR_SIG_ID_1 |DMAMUX_RGxCR_SIG_ID_0)
#define LL_DMAMUX_REQ_GEN_EXTI_LINE4 DMAMUX_RGxCR_SIG_ID_2
#define LL_DMAMUX_REQ_GEN_EXTI_LINE5 (DMAMUX_RGxCR_SIG_ID_2 | DMAMUX_RGxCR_SIG_ID_0)
#define LL_DMAMUX_REQ_GEN_EXTI_LINE6 (DMAMUX_RGxCR_SIG_ID_2 | DMAMUX_RGxCR_SIG_ID_1)
#define LL_DMAMUX_REQ_GEN_EXTI_LINE7 (DMAMUX_RGxCR_SIG_ID_2 | DMAMUX_RGxCR_SIG_ID_1 | DMAMUX_RGxCR_SIG_ID_0)
#define LL_DMAMUX_REQ_GEN_EXTI_LINE8 DMAMUX_RGxCR_SIG_ID_3
#define LL_DMAMUX_REQ_GEN_EXTI_LINE9 (DMAMUX_RGxCR_SIG_ID_3 | DMAMUX_RGxCR_SIG_ID_0)
#define LL_DMAMUX_REQ_GEN_EXTI_LINE10 (DMAMUX_RGxCR_SIG_ID_3 | DMAMUX_RGxCR_SIG_ID_1)
#define LL_DMAMUX_REQ_GEN_EXTI_LINE11 (DMAMUX_RGxCR_SIG_ID_3 | DMAMUX_RGxCR_SIG_ID_1 | DMAMUX_RGxCR_SIG_ID_0)
#define LL_DMAMUX_REQ_GEN_EXTI_LINE12 (DMAMUX_RGxCR_SIG_ID_3 | DMAMUX_RGxCR_SIG_ID_2)
#define LL_DMAMUX_REQ_GEN_EXTI_LINE13 (DMAMUX_RGxCR_SIG_ID_3 | DMAMUX_RGxCR_SIG_ID_2 | DMAMUX_RGxCR_SIG_ID_0)
#define LL_DMAMUX_REQ_GEN_EXTI_LINE14 (DMAMUX_RGxCR_SIG_ID_3 | DMAMUX_RGxCR_SIG_ID_2 | DMAMUX_RGxCR_SIG_ID_1)
#define LL_DMAMUX_REQ_GEN_EXTI_LINE15 (DMAMUX_RGxCR_SIG_ID_3 | DMAMUX_RGxCR_SIG_ID_2 | DMAMUX_RGxCR_SIG_ID_1 | DMAMUX_RGxCR_SIG_ID_0)
#define LL_DMAMUX_REQ_GEN_DMAMUX_CH0 DMAMUX_RGxCR_SIG_ID_4
#define LL_DMAMUX_REQ_GEN_DMAMUX_CH1 (DMAMUX_RGxCR_SIG_ID_4 | DMAMUX_RGxCR_SIG_ID_0)
#define LL_DMAMUX_REQ_GEN_LPTIM1_OUT (DMAMUX_RGxCR_SIG_ID_4 | DMAMUX_RGxCR_SIG_ID_1)
#define LL_DMAMUX_REQ_GEN_LPTIM2_OUT (DMAMUX_RGxCR_SIG_ID_4 | DMAMUX_RGxCR_SIG_ID_1 | DMAMUX_RGxCR_SIG_ID_0)
#define LL_DMAMUX_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_DMAMUX_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
static inline void LL_DMAMUX_SetRequestID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel, uint32_t Request)
{
  (void)(DMAMUXx);
  ((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR)) = (((((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR))) & (~((0x3FUL << (0U))))) | (Request))));
}
static inline uint32_t LL_DMAMUX_GetRequestID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  (void)(DMAMUXx);
  return (uint32_t)((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR) & ((0x3FUL << (0U)))));
}
static inline void LL_DMAMUX_SetSyncRequestNb(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel, uint32_t RequestNb)
{
  (void)(DMAMUXx);
  ((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR)) = (((((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR))) & (~((0x1FUL << (19U))))) | (((RequestNb - 1U) << (19U))))));
}
static inline uint32_t LL_DMAMUX_GetSyncRequestNb(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  (void)(DMAMUXx);
  return (uint32_t)((((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR) & ((0x1FUL << (19U))))) >> (19U)) + 1U);
}
static inline void LL_DMAMUX_SetSyncPolarity(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel, uint32_t Polarity)
{
  (void)(DMAMUXx);
  ((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR)) = (((((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR))) & (~((0x3UL << (17U))))) | (Polarity))));
}
static inline uint32_t LL_DMAMUX_GetSyncPolarity(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  (void)(DMAMUXx);
  return (uint32_t)((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR) & ((0x3UL << (17U)))));
}
static inline void LL_DMAMUX_EnableEventGeneration(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  (void)(DMAMUXx);
  (((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR) |= ((0x1UL << (9U))));
}
static inline void LL_DMAMUX_DisableEventGeneration(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  (void)(DMAMUXx);
  (((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR) &= ~((0x1UL << (9U))));
}
static inline uint32_t LL_DMAMUX_IsEnabledEventGeneration(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  (void)(DMAMUXx);
  return (((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline void LL_DMAMUX_EnableSync(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  (void)(DMAMUXx);
  (((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR) |= ((0x1UL << (16U))));
}
static inline void LL_DMAMUX_DisableSync(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  (void)(DMAMUXx);
  (((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR) &= ~((0x1UL << (16U))));
}
static inline uint32_t LL_DMAMUX_IsEnabledSync(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  (void)(DMAMUXx);
  return (((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline void LL_DMAMUX_SetSyncID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel, uint32_t SyncID)
{
  (void)(DMAMUXx);
  ((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR)) = (((((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR))) & (~((0x1FUL << (24U))))) | (SyncID))));
}
static inline uint32_t LL_DMAMUX_GetSyncID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  (void)(DMAMUXx);
  return (uint32_t)((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR) & ((0x1FUL << (24U)))));
}
static inline void LL_DMAMUX_EnableRequestGen(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  (void)(DMAMUXx);
  ((((DMAMUX_RequestGen_TypeDef *)((uint32_t)((uint32_t)((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + (0x00000004UL * (RequestGenChannel)))))->RGCR) |= ((0x1UL << (16U))));
}
static inline void LL_DMAMUX_DisableRequestGen(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  (void)(DMAMUXx);
  ((((DMAMUX_RequestGen_TypeDef *)((uint32_t)((uint32_t)((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + (0x00000004UL * (RequestGenChannel)))))->RGCR) &= ~((0x1UL << (16U))));
}
static inline uint32_t LL_DMAMUX_IsEnabledRequestGen(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_RequestGen_TypeDef *)((uint32_t)((uint32_t)((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + (0x00000004UL * (RequestGenChannel)))))->RGCR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline void LL_DMAMUX_SetRequestGenPolarity(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel, uint32_t Polarity)
{
  (void)(DMAMUXx);
  (((((DMAMUX_RequestGen_TypeDef *)((uint32_t)((uint32_t)((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + (0x00000004UL * (RequestGenChannel)))))->RGCR)) = ((((((((DMAMUX_RequestGen_TypeDef *)((uint32_t)((uint32_t)((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + (0x00000004UL * (RequestGenChannel)))))->RGCR))) & (~((0x3UL << (17U))))) | (Polarity))));
}
static inline uint32_t LL_DMAMUX_GetRequestGenPolarity(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  (void)(DMAMUXx);
  return (uint32_t)(((((DMAMUX_RequestGen_TypeDef *)((uint32_t)((uint32_t)((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + (0x00000004UL * (RequestGenChannel)))))->RGCR) & ((0x3UL << (17U)))));
}
static inline void LL_DMAMUX_SetGenRequestNb(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel, uint32_t RequestNb)
{
  (void)(DMAMUXx);
  (((((DMAMUX_RequestGen_TypeDef *)((uint32_t)((uint32_t)((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + (0x00000004UL * (RequestGenChannel)))))->RGCR)) = ((((((((DMAMUX_RequestGen_TypeDef *)((uint32_t)((uint32_t)((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + (0x00000004UL * (RequestGenChannel)))))->RGCR))) & (~((0x1FUL << (19U))))) | ((RequestNb - 1U) << (19U)))));
}
static inline uint32_t LL_DMAMUX_GetGenRequestNb(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  (void)(DMAMUXx);
  return (uint32_t)((((((DMAMUX_RequestGen_TypeDef *)((uint32_t)((uint32_t)((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + (0x00000004UL * (RequestGenChannel)))))->RGCR) & ((0x1FUL << (19U)))) >> (19U)) + 1U);
}
static inline void LL_DMAMUX_SetRequestSignalID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel, uint32_t RequestSignalID)
{
  (void)(DMAMUXx);
  (((((DMAMUX_RequestGen_TypeDef *)((uint32_t)((uint32_t)((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + (0x00000004UL * (RequestGenChannel)))))->RGCR)) = ((((((((DMAMUX_RequestGen_TypeDef *)((uint32_t)((uint32_t)((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + (0x00000004UL * (RequestGenChannel)))))->RGCR))) & (~((0x1FUL << (0U))))) | (RequestSignalID))));
}
static inline uint32_t LL_DMAMUX_GetRequestSignalID(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  (void)(DMAMUXx);
  return (uint32_t)(((((DMAMUX_RequestGen_TypeDef *)((uint32_t)((uint32_t)((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + (0x00000004UL * (RequestGenChannel)))))->RGCR) & ((0x1FUL << (0U)))));
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO0(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO1(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO2(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO3(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO4(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO5(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO6(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO7(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO8(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO9(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO10(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO11(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO12(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_SO13(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CSR) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_RGO0(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_RequestGenStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000140UL))->RGSR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_RGO1(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_RequestGenStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000140UL))->RGSR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_RGO2(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_RequestGenStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000140UL))->RGSR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMAMUX_IsActiveFlag_RGO3(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  return ((((((DMAMUX_RequestGenStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000140UL))->RGSR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline void LL_DMAMUX_ClearFlag_SO0(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (0U))));
}
static inline void LL_DMAMUX_ClearFlag_SO1(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (1U))));
}
static inline void LL_DMAMUX_ClearFlag_SO2(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (2U))));
}
static inline void LL_DMAMUX_ClearFlag_SO3(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (3U))));
}
static inline void LL_DMAMUX_ClearFlag_SO4(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (4U))));
}
static inline void LL_DMAMUX_ClearFlag_SO5(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (5U))));
}
static inline void LL_DMAMUX_ClearFlag_SO6(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (6U))));
}
static inline void LL_DMAMUX_ClearFlag_SO7(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (7U))));
}
static inline void LL_DMAMUX_ClearFlag_SO8(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (8U))));
}
static inline void LL_DMAMUX_ClearFlag_SO9(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (9U))));
}
static inline void LL_DMAMUX_ClearFlag_SO10(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (10U))));
}
static inline void LL_DMAMUX_ClearFlag_SO11(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (11U))));
}
static inline void LL_DMAMUX_ClearFlag_SO12(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (12U))));
}
static inline void LL_DMAMUX_ClearFlag_SO13(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_ChannelStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000080UL))->CFR) |= ((0x1UL << (13U))));
}
static inline void LL_DMAMUX_ClearFlag_RGO0(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_RequestGenStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000140UL))->RGCFR) |= ((0x1UL << (0U))));
}
static inline void LL_DMAMUX_ClearFlag_RGO1(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_RequestGenStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000140UL))->RGCFR) |= ((0x1UL << (1U))));
}
static inline void LL_DMAMUX_ClearFlag_RGO2(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_RequestGenStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000140UL))->RGCFR) |= ((0x1UL << (2U))));
}
static inline void LL_DMAMUX_ClearFlag_RGO3(DMAMUX_Channel_TypeDef *DMAMUXx)
{
  (void)(DMAMUXx);
  ((((DMAMUX_RequestGenStatus_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000140UL))->RGCFR) |= ((0x1UL << (3U))));
}
static inline void LL_DMAMUX_EnableIT_SO(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  (void)(DMAMUXx);
  (((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR) |= ((0x1UL << (8U))));
}
static inline void LL_DMAMUX_DisableIT_SO(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  (void)(DMAMUXx);
  (((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR) &= ~((0x1UL << (8U))));
}
static inline uint32_t LL_DMAMUX_IsEnabledIT_SO(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t Channel)
{
  (void)(DMAMUXx);
  return ((((((((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + Channel)->CCR) & ((0x1UL << (8U))))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline void LL_DMAMUX_EnableIT_RGO(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  (void)(DMAMUXx);
  (((((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + RequestGenChannel)->RGCR) |= ((0x1UL << (8U))));
}
static inline void LL_DMAMUX_DisableIT_RGO(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  (void)(DMAMUXx);
  (((((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + RequestGenChannel)->RGCR) &= ~((0x1UL << (8U))));
}
static inline uint32_t LL_DMAMUX_IsEnabledIT_RGO(DMAMUX_Channel_TypeDef *DMAMUXx, uint32_t RequestGenChannel)
{
  (void)(DMAMUXx);
  return (((((((DMAMUX_RequestGen_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x00000100UL)) + RequestGenChannel)->RGCR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
#define __LL_DMA_INSTANCE_TO_CHANNEL(__DMA_INSTANCE__,__CHANNEL_INDEX__) (((__DMA_INSTANCE__) == DMA1) ? (DMA1_Channel1 + (__CHANNEL_INDEX__)) : (DMA2_Channel1 + (__CHANNEL_INDEX__)))
#define __LL_DMA_INSTANCE_TO_DMAMUX_CCR(__DMA_INSTANCE__,__CHANNEL_INDEX__) (((__DMA_INSTANCE__) == DMA1) ? (DMAMUX1_Channel0 + (__CHANNEL_INDEX__)) : (DMAMUX1_Channel7 + (__CHANNEL_INDEX__)))
typedef struct
{
  uint32_t PeriphOrM2MSrcAddress;
  uint32_t MemoryOrM2MDstAddress;
  uint32_t Direction;
  uint32_t Mode;
  uint32_t PeriphOrM2MSrcIncMode;
  uint32_t MemoryOrM2MDstIncMode;
  uint32_t PeriphOrM2MSrcDataSize;
  uint32_t MemoryOrM2MDstDataSize;
  uint32_t NbData;
  uint32_t PeriphRequest;
  uint32_t Priority;
} LL_DMA_InitTypeDef;
#define LL_DMA_IFCR_CGIF1 DMA_IFCR_CGIF1
#define LL_DMA_IFCR_CTCIF1 DMA_IFCR_CTCIF1
#define LL_DMA_IFCR_CHTIF1 DMA_IFCR_CHTIF1
#define LL_DMA_IFCR_CTEIF1 DMA_IFCR_CTEIF1
#define LL_DMA_IFCR_CGIF2 DMA_IFCR_CGIF2
#define LL_DMA_IFCR_CTCIF2 DMA_IFCR_CTCIF2
#define LL_DMA_IFCR_CHTIF2 DMA_IFCR_CHTIF2
#define LL_DMA_IFCR_CTEIF2 DMA_IFCR_CTEIF2
#define LL_DMA_IFCR_CGIF3 DMA_IFCR_CGIF3
#define LL_DMA_IFCR_CTCIF3 DMA_IFCR_CTCIF3
#define LL_DMA_IFCR_CHTIF3 DMA_IFCR_CHTIF3
#define LL_DMA_IFCR_CTEIF3 DMA_IFCR_CTEIF3
#define LL_DMA_IFCR_CGIF4 DMA_IFCR_CGIF4
#define LL_DMA_IFCR_CTCIF4 DMA_IFCR_CTCIF4
#define LL_DMA_IFCR_CHTIF4 DMA_IFCR_CHTIF4
#define LL_DMA_IFCR_CTEIF4 DMA_IFCR_CTEIF4
#define LL_DMA_IFCR_CGIF5 DMA_IFCR_CGIF5
#define LL_DMA_IFCR_CTCIF5 DMA_IFCR_CTCIF5
#define LL_DMA_IFCR_CHTIF5 DMA_IFCR_CHTIF5
#define LL_DMA_IFCR_CTEIF5 DMA_IFCR_CTEIF5
#define LL_DMA_IFCR_CGIF6 DMA_IFCR_CGIF6
#define LL_DMA_IFCR_CTCIF6 DMA_IFCR_CTCIF6
#define LL_DMA_IFCR_CHTIF6 DMA_IFCR_CHTIF6
#define LL_DMA_IFCR_CTEIF6 DMA_IFCR_CTEIF6
#define LL_DMA_IFCR_CGIF7 DMA_IFCR_CGIF7
#define LL_DMA_IFCR_CTCIF7 DMA_IFCR_CTCIF7
#define LL_DMA_IFCR_CHTIF7 DMA_IFCR_CHTIF7
#define LL_DMA_IFCR_CTEIF7 DMA_IFCR_CTEIF7
#define LL_DMA_ISR_GIF1 DMA_ISR_GIF1
#define LL_DMA_ISR_TCIF1 DMA_ISR_TCIF1
#define LL_DMA_ISR_HTIF1 DMA_ISR_HTIF1
#define LL_DMA_ISR_TEIF1 DMA_ISR_TEIF1
#define LL_DMA_ISR_GIF2 DMA_ISR_GIF2
#define LL_DMA_ISR_TCIF2 DMA_ISR_TCIF2
#define LL_DMA_ISR_HTIF2 DMA_ISR_HTIF2
#define LL_DMA_ISR_TEIF2 DMA_ISR_TEIF2
#define LL_DMA_ISR_GIF3 DMA_ISR_GIF3
#define LL_DMA_ISR_TCIF3 DMA_ISR_TCIF3
#define LL_DMA_ISR_HTIF3 DMA_ISR_HTIF3
#define LL_DMA_ISR_TEIF3 DMA_ISR_TEIF3
#define LL_DMA_ISR_GIF4 DMA_ISR_GIF4
#define LL_DMA_ISR_TCIF4 DMA_ISR_TCIF4
#define LL_DMA_ISR_HTIF4 DMA_ISR_HTIF4
#define LL_DMA_ISR_TEIF4 DMA_ISR_TEIF4
#define LL_DMA_ISR_GIF5 DMA_ISR_GIF5
#define LL_DMA_ISR_TCIF5 DMA_ISR_TCIF5
#define LL_DMA_ISR_HTIF5 DMA_ISR_HTIF5
#define LL_DMA_ISR_TEIF5 DMA_ISR_TEIF5
#define LL_DMA_ISR_GIF6 DMA_ISR_GIF6
#define LL_DMA_ISR_TCIF6 DMA_ISR_TCIF6
#define LL_DMA_ISR_HTIF6 DMA_ISR_HTIF6
#define LL_DMA_ISR_TEIF6 DMA_ISR_TEIF6
#define LL_DMA_ISR_GIF7 DMA_ISR_GIF7
#define LL_DMA_ISR_TCIF7 DMA_ISR_TCIF7
#define LL_DMA_ISR_HTIF7 DMA_ISR_HTIF7
#define LL_DMA_ISR_TEIF7 DMA_ISR_TEIF7
#define LL_DMA_CCR_TCIE DMA_CCR_TCIE
#define LL_DMA_CCR_HTIE DMA_CCR_HTIE
#define LL_DMA_CCR_TEIE DMA_CCR_TEIE
#define LL_DMA_CHANNEL_1 0x00000001U
#define LL_DMA_CHANNEL_2 0x00000002U
#define LL_DMA_CHANNEL_3 0x00000003U
#define LL_DMA_CHANNEL_4 0x00000004U
#define LL_DMA_CHANNEL_5 0x00000005U
#define LL_DMA_CHANNEL_6 0x00000006U
#define LL_DMA_CHANNEL_7 0x00000007U
#define LL_DMA_CHANNEL_ALL 0xFFFF0000U
#define LL_DMA_DIRECTION_PERIPH_TO_MEMORY 0x00000000U
#define LL_DMA_DIRECTION_MEMORY_TO_PERIPH DMA_CCR_DIR
#define LL_DMA_DIRECTION_MEMORY_TO_MEMORY DMA_CCR_MEM2MEM
#define LL_DMA_MODE_NORMAL 0x00000000U
#define LL_DMA_MODE_CIRCULAR DMA_CCR_CIRC
#define LL_DMA_PERIPH_INCREMENT DMA_CCR_PINC
#define LL_DMA_PERIPH_NOINCREMENT 0x00000000U
#define LL_DMA_MEMORY_INCREMENT DMA_CCR_MINC
#define LL_DMA_MEMORY_NOINCREMENT 0x00000000U
#define LL_DMA_PDATAALIGN_BYTE 0x00000000U
#define LL_DMA_PDATAALIGN_HALFWORD DMA_CCR_PSIZE_0
#define LL_DMA_PDATAALIGN_WORD DMA_CCR_PSIZE_1
#define LL_DMA_MDATAALIGN_BYTE 0x00000000U
#define LL_DMA_MDATAALIGN_HALFWORD DMA_CCR_MSIZE_0
#define LL_DMA_MDATAALIGN_WORD DMA_CCR_MSIZE_1
#define LL_DMA_PRIORITY_LOW 0x00000000U
#define LL_DMA_PRIORITY_MEDIUM DMA_CCR_PL_0
#define LL_DMA_PRIORITY_HIGH DMA_CCR_PL_1
#define LL_DMA_PRIORITY_VERYHIGH DMA_CCR_PL
#define LL_DMA_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_DMA_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
#define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__) (((uint32_t)(__CHANNEL_INSTANCE__) > ((uint32_t)DMA1_Channel7)) ? DMA2 : DMA1)
#define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__) (((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel1)) ? LL_DMA_CHANNEL_1 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel2)) ? LL_DMA_CHANNEL_2 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel3)) ? LL_DMA_CHANNEL_3 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel4)) ? LL_DMA_CHANNEL_4 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel5)) ? LL_DMA_CHANNEL_5 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA2_Channel6)) ? LL_DMA_CHANNEL_6 : LL_DMA_CHANNEL_7)
#define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__,__CHANNEL__) ((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_1))) ? DMA1_Channel1 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_1))) ? DMA2_Channel1 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_2))) ? DMA1_Channel2 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_2))) ? DMA2_Channel2 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_3))) ? DMA1_Channel3 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_3))) ? DMA2_Channel3 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_4))) ? DMA1_Channel4 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_4))) ? DMA2_Channel4 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_5))) ? DMA1_Channel5 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_5))) ? DMA2_Channel5 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_6))) ? DMA1_Channel6 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA2)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_6))) ? DMA2_Channel6 : (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_7))) ? DMA1_Channel7 : DMA2_Channel7)
static inline void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) |= ((0x1UL << (0U))));
}
static inline void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_DMA_IsEnabledChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return (((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
  ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR)) = (((((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR))) & (~((0x1UL << (4U)) | (0x1UL << (14U)) | (0x1UL << (5U)) | (0x1UL << (6U)) | (0x1UL << (7U)) | (0x3UL << (8U)) | (0x3UL << (10U)) | (0x3UL << (12U))))) | (Configuration))));
}
static inline void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
  ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR)) = (((((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR))) & (~((0x1UL << (4U)) | (0x1UL << (14U))))) | (Direction))));
}
static inline uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) & ((0x1UL << (4U)) | (0x1UL << (14U)))));
}
static inline void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
  ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR)) = (((((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR))) & (~((0x1UL << (5U))))) | (Mode))));
}
static inline uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) & ((0x1UL << (5U)))));
}
static inline void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
  ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR)) = (((((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR))) & (~((0x1UL << (6U))))) | (PeriphOrM2MSrcIncMode))));
}
static inline uint32_t LL_DMA_GetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) & ((0x1UL << (6U)))));
}
static inline void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
  ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR)) = (((((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR))) & (~((0x1UL << (7U))))) | (MemoryOrM2MDstIncMode))));
}
static inline uint32_t LL_DMA_GetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) & ((0x1UL << (7U)))));
}
static inline void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
  ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR)) = (((((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR))) & (~((0x3UL << (8U))))) | (PeriphOrM2MSrcDataSize))));
}
static inline uint32_t LL_DMA_GetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) & ((0x3UL << (8U)))));
}
static inline void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
  ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR)) = (((((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR))) & (~((0x3UL << (10U))))) | (MemoryOrM2MDstDataSize))));
}
static inline uint32_t LL_DMA_GetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) & ((0x3UL << (10U)))));
}
static inline void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
  ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR)) = (((((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR))) & (~((0x3UL << (12U))))) | (Priority))));
}
static inline uint32_t LL_DMA_GetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) & ((0x3UL << (12U)))));
}
static inline void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
  ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CNDTR)) = (((((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CNDTR))) & (~((0xFFFFUL << (0U))))) | (NbData))));
}
static inline uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CNDTR) & ((0xFFFFUL << (0U)))));
}
static inline void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
  if (Direction == (0x1UL << (4U)))
  {
    (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CMAR) = (SrcAddress));
    (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CPAR) = (DstAddress));
  }
  else
  {
    (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CPAR) = (SrcAddress));
    (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CMAR) = (DstAddress));
  }
}
static inline void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
  (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CMAR) = (MemoryAddress));
}
static inline void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CPAR) = (PeriphAddress));
}
static inline uint32_t LL_DMA_GetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CMAR)));
}
static inline uint32_t LL_DMA_GetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CPAR)));
}
static inline void LL_DMA_SetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
  (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CPAR) = (MemoryAddress));
}
static inline void LL_DMA_SetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
  (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CMAR) = (MemoryAddress));
}
static inline uint32_t LL_DMA_GetM2MSrcAddress(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CPAR)));
}
static inline uint32_t LL_DMA_GetM2MDstAddress(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CMAR)));
}
static inline void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
  ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + (Channel - 1U)) : (((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x0000001CUL)) + (Channel - 1U)))->CCR)) = (((((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + (Channel - 1U)) : (((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x0000001CUL)) + (Channel - 1U)))->CCR))) & (~((0x3FUL << (0U))))) | (Request))));
}
static inline uint32_t LL_DMA_GetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return ((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL))) + (Channel - 1U)) : (((DMAMUX_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000800UL) + 0x0000001CUL)) + (Channel - 1U)))->CCR) & ((0x3FUL << (0U)))));
}
static inline uint32_t LL_DMA_IsActiveFlag_GI1(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_GI2(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_GI3(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_GI4(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_GI5(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_GI6(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (20U)))) == ((0x1UL << (20U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_GI7(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (24U)))) == ((0x1UL << (24U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (17U)))) == ((0x1UL << (17U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (21U)))) == ((0x1UL << (21U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (25U)))) == ((0x1UL << (25U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_HT2(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_HT3(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_HT4(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_HT5(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (18U)))) == ((0x1UL << (18U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (22U)))) == ((0x1UL << (22U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_HT7(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (26U)))) == ((0x1UL << (26U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TE4(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TE5(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (19U)))) == ((0x1UL << (19U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TE6(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (23U)))) == ((0x1UL << (23U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsActiveFlag_TE7(DMA_TypeDef *DMAx)
{
  return ((((DMAx->ISR) & ((0x1UL << (27U)))) == ((0x1UL << (27U)))) ? 1UL : 0UL);
}
static inline void LL_DMA_ClearFlag_GI1(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (0U))));
}
static inline void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (4U))));
}
static inline void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (8U))));
}
static inline void LL_DMA_ClearFlag_GI4(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (12U))));
}
static inline void LL_DMA_ClearFlag_GI5(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (16U))));
}
static inline void LL_DMA_ClearFlag_GI6(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (20U))));
}
static inline void LL_DMA_ClearFlag_GI7(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (24U))));
}
static inline void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (1U))));
}
static inline void LL_DMA_ClearFlag_TC2(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (5U))));
}
static inline void LL_DMA_ClearFlag_TC3(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (9U))));
}
static inline void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (13U))));
}
static inline void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (17U))));
}
static inline void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (21U))));
}
static inline void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (25U))));
}
static inline void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (2U))));
}
static inline void LL_DMA_ClearFlag_HT2(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (6U))));
}
static inline void LL_DMA_ClearFlag_HT3(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (10U))));
}
static inline void LL_DMA_ClearFlag_HT4(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (14U))));
}
static inline void LL_DMA_ClearFlag_HT5(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (18U))));
}
static inline void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (22U))));
}
static inline void LL_DMA_ClearFlag_HT7(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (26U))));
}
static inline void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (3U))));
}
static inline void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (7U))));
}
static inline void LL_DMA_ClearFlag_TE3(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (11U))));
}
static inline void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (15U))));
}
static inline void LL_DMA_ClearFlag_TE5(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (19U))));
}
static inline void LL_DMA_ClearFlag_TE6(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (23U))));
}
static inline void LL_DMA_ClearFlag_TE7(DMA_TypeDef *DMAx)
{
  ((DMAx->IFCR) = ((0x1UL << (27U))));
}
static inline void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) |= ((0x1UL << (1U))));
}
static inline void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) |= ((0x1UL << (2U))));
}
static inline void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
  (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) |= ((0x1UL << (3U))));
}
static inline void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) &= ~((0x1UL << (1U))));
}
static inline void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) &= ~((0x1UL << (2U))));
}
static inline void LL_DMA_DisableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
  (((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) &= ~((0x1UL << (3U))));
}
static inline uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return (((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsEnabledIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return (((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_DMA_IsEnabledIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
  return (((((((DMAx) == ((DMA_TypeDef *) (((0x40000000UL) + 0x00020000UL) + 0x00000000UL))) ? (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000000UL) + 0x00000008UL)) + (Channel - 1U)) : (((DMA_Channel_TypeDef *) ((((0x40000000UL) + 0x00020000UL) + 0x00000400UL) + 0x00000008UL)) + (Channel - 1U)))->CCR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct);
ErrorStatus LL_DMA_DeInit(DMA_TypeDef *DMAx, uint32_t Channel);
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct);
#define STM32WBxx_LL_HSEM_H 
#define LL_HSEM_COREID_NONE 0U
#define LL_HSEM_COREID_CPU1 HSEM_CR_COREID_CPU1
#define LL_HSEM_COREID_CPU2 HSEM_CR_COREID_CPU2
#define LL_HSEM_COREID HSEM_CR_COREID_CURRENT
#define LL_HSEM_SEMAPHORE_0 HSEM_C1IER_ISE0
#define LL_HSEM_SEMAPHORE_1 HSEM_C1IER_ISE1
#define LL_HSEM_SEMAPHORE_2 HSEM_C1IER_ISE2
#define LL_HSEM_SEMAPHORE_3 HSEM_C1IER_ISE3
#define LL_HSEM_SEMAPHORE_4 HSEM_C1IER_ISE4
#define LL_HSEM_SEMAPHORE_5 HSEM_C1IER_ISE5
#define LL_HSEM_SEMAPHORE_6 HSEM_C1IER_ISE6
#define LL_HSEM_SEMAPHORE_7 HSEM_C1IER_ISE7
#define LL_HSEM_SEMAPHORE_8 HSEM_C1IER_ISE8
#define LL_HSEM_SEMAPHORE_9 HSEM_C1IER_ISE9
#define LL_HSEM_SEMAPHORE_10 HSEM_C1IER_ISE10
#define LL_HSEM_SEMAPHORE_11 HSEM_C1IER_ISE11
#define LL_HSEM_SEMAPHORE_12 HSEM_C1IER_ISE12
#define LL_HSEM_SEMAPHORE_13 HSEM_C1IER_ISE13
#define LL_HSEM_SEMAPHORE_14 HSEM_C1IER_ISE14
#define LL_HSEM_SEMAPHORE_15 HSEM_C1IER_ISE15
#define LL_HSEM_SEMAPHORE_16 HSEM_C1IER_ISE16
#define LL_HSEM_SEMAPHORE_17 HSEM_C1IER_ISE17
#define LL_HSEM_SEMAPHORE_18 HSEM_C1IER_ISE18
#define LL_HSEM_SEMAPHORE_19 HSEM_C1IER_ISE19
#define LL_HSEM_SEMAPHORE_20 HSEM_C1IER_ISE20
#define LL_HSEM_SEMAPHORE_21 HSEM_C1IER_ISE21
#define LL_HSEM_SEMAPHORE_22 HSEM_C1IER_ISE22
#define LL_HSEM_SEMAPHORE_23 HSEM_C1IER_ISE23
#define LL_HSEM_SEMAPHORE_24 HSEM_C1IER_ISE24
#define LL_HSEM_SEMAPHORE_25 HSEM_C1IER_ISE25
#define LL_HSEM_SEMAPHORE_26 HSEM_C1IER_ISE26
#define LL_HSEM_SEMAPHORE_27 HSEM_C1IER_ISE27
#define LL_HSEM_SEMAPHORE_28 HSEM_C1IER_ISE28
#define LL_HSEM_SEMAPHORE_29 HSEM_C1IER_ISE29
#define LL_HSEM_SEMAPHORE_30 HSEM_C1IER_ISE30
#define LL_HSEM_SEMAPHORE_31 HSEM_C1IER_ISE31
#define LL_HSEM_SEMAPHORE_ALL 0xFFFFFFFFU
#define LL_HSEM_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_HSEM_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
static inline uint32_t LL_HSEM_IsSemaphoreLocked(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
  return ((((HSEMx->R[Semaphore]) & ((0x1UL << (31U)))) == ((0x1UL << (31U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_HSEM_GetCoreId(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
  return (uint32_t)(((HSEMx->R[Semaphore]) & ((0xFUL << (8U)))));
}
static inline uint32_t LL_HSEM_GetProcessId(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
  return (uint32_t)(((HSEMx->R[Semaphore]) & ((0xFFUL << (0U)))));
}
static inline void LL_HSEM_SetLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
  ((HSEMx->R[Semaphore]) = (((0x1UL << (31U)) | (0x4U << (8U)) | process)));
}
static inline uint32_t LL_HSEM_2StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
  ((HSEMx->R[Semaphore]) = (((0x1UL << (31U)) | (0x4U << (8U)) | process)));
  return ((HSEMx->R[Semaphore] != ((0x1UL << (31U)) | (0x4U << (8U)) | process)) ? 1UL : 0UL);
}
static inline uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
  return ((HSEMx->RLR[Semaphore] != ((0x1UL << (31U)) | (0x4U << (8U)))) ? 1UL : 0UL);
}
static inline void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
  ((HSEMx->R[Semaphore]) = (((0x4U << (8U)) | process)));
}
static inline uint32_t LL_HSEM_GetStatus(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
  return ((HSEMx->R[Semaphore] != 0U) ? 1UL : 0UL);
}
static inline void LL_HSEM_SetKey(HSEM_TypeDef *HSEMx, uint32_t key)
{
  ((HSEMx->KEYR) = (key << (16U)));
}
static inline uint32_t LL_HSEM_GetKey(HSEM_TypeDef *HSEMx)
{
  return (uint32_t)(((HSEMx->KEYR) & ((0xFFFFUL << (16U)))) >> (16U));
}
static inline void LL_HSEM_ResetAllLock(HSEM_TypeDef *HSEMx, uint32_t key, uint32_t core)
{
  ((HSEMx->CR) = ((key << (16U)) | core));
}
static inline void LL_HSEM_EnableIT_C1IER(HSEM_TypeDef *HSEMx, uint32_t SemaphoreMask)
{
  ((HSEMx->C1IER) |= (SemaphoreMask));
}
static inline void LL_HSEM_DisableIT_C1IER(HSEM_TypeDef *HSEMx, uint32_t SemaphoreMask)
{
  ((HSEMx->C1IER) &= ~(SemaphoreMask));
}
static inline uint32_t LL_HSEM_IsEnabledIT_C1IER(HSEM_TypeDef *HSEMx, uint32_t SemaphoreMask)
{
  return ((((HSEMx->C1IER) & (SemaphoreMask)) == (SemaphoreMask)) ? 1UL : 0UL);
}
static inline void LL_HSEM_EnableIT_C2IER(HSEM_TypeDef *HSEMx, uint32_t SemaphoreMask)
{
  ((HSEMx->C2IER) |= (SemaphoreMask));
}
static inline void LL_HSEM_DisableIT_C2IER(HSEM_TypeDef *HSEMx, uint32_t SemaphoreMask)
{
  ((HSEMx->C2IER) &= ~(SemaphoreMask));
}
static inline uint32_t LL_HSEM_IsEnabledIT_C2IER(HSEM_TypeDef *HSEMx, uint32_t SemaphoreMask)
{
  return ((((HSEMx->C2IER) & (SemaphoreMask)) == (SemaphoreMask)) ? 1UL : 0UL);
}
static inline void LL_HSEM_ClearFlag_C1ICR(HSEM_TypeDef *HSEMx, uint32_t SemaphoreMask)
{
  ((HSEMx->C1ICR) = (SemaphoreMask));
}
static inline uint32_t LL_HSEM_IsActiveFlag_C1ISR(HSEM_TypeDef *HSEMx, uint32_t SemaphoreMask)
{
  return ((((HSEMx->C1ISR) & (SemaphoreMask)) == (SemaphoreMask)) ? 1UL : 0UL);
}
static inline uint32_t LL_HSEM_IsActiveFlag_C1MISR(HSEM_TypeDef *HSEMx, uint32_t SemaphoreMask)
{
  return ((((HSEMx->C1MISR) & (SemaphoreMask)) == (SemaphoreMask)) ? 1UL : 0UL);
}
static inline void LL_HSEM_ClearFlag_C2ICR(HSEM_TypeDef *HSEMx, uint32_t SemaphoreMask)
{
  ((HSEMx->C2ICR) = (SemaphoreMask));
}
static inline uint32_t LL_HSEM_IsActiveFlag_C2ISR(HSEM_TypeDef *HSEMx, uint32_t SemaphoreMask)
{
  return ((((HSEMx->C2ISR) & (SemaphoreMask)) == (SemaphoreMask)) ? 1UL : 0UL);
}
static inline uint32_t LL_HSEM_IsActiveFlag_C2MISR(HSEM_TypeDef *HSEMx, uint32_t SemaphoreMask)
{
  return ((((HSEMx->C2MISR) & (SemaphoreMask)) == (SemaphoreMask)) ? 1UL : 0UL);
}
#define STM32WBxx_LL_I2C_H 
typedef struct
{
  uint32_t PeripheralMode;
  uint32_t Timing;
  uint32_t AnalogFilter;
  uint32_t DigitalFilter;
  uint32_t OwnAddress1;
  uint32_t TypeAcknowledge;
  uint32_t OwnAddrSize;
} LL_I2C_InitTypeDef;
#define LL_I2C_ICR_ADDRCF I2C_ICR_ADDRCF
#define LL_I2C_ICR_NACKCF I2C_ICR_NACKCF
#define LL_I2C_ICR_STOPCF I2C_ICR_STOPCF
#define LL_I2C_ICR_BERRCF I2C_ICR_BERRCF
#define LL_I2C_ICR_ARLOCF I2C_ICR_ARLOCF
#define LL_I2C_ICR_OVRCF I2C_ICR_OVRCF
#define LL_I2C_ICR_PECCF I2C_ICR_PECCF
#define LL_I2C_ICR_TIMOUTCF I2C_ICR_TIMOUTCF
#define LL_I2C_ICR_ALERTCF I2C_ICR_ALERTCF
#define LL_I2C_ISR_TXE I2C_ISR_TXE
#define LL_I2C_ISR_TXIS I2C_ISR_TXIS
#define LL_I2C_ISR_RXNE I2C_ISR_RXNE
#define LL_I2C_ISR_ADDR I2C_ISR_ADDR
#define LL_I2C_ISR_NACKF I2C_ISR_NACKF
#define LL_I2C_ISR_STOPF I2C_ISR_STOPF
#define LL_I2C_ISR_TC I2C_ISR_TC
#define LL_I2C_ISR_TCR I2C_ISR_TCR
#define LL_I2C_ISR_BERR I2C_ISR_BERR
#define LL_I2C_ISR_ARLO I2C_ISR_ARLO
#define LL_I2C_ISR_OVR I2C_ISR_OVR
#define LL_I2C_ISR_PECERR I2C_ISR_PECERR
#define LL_I2C_ISR_TIMEOUT I2C_ISR_TIMEOUT
#define LL_I2C_ISR_ALERT I2C_ISR_ALERT
#define LL_I2C_ISR_BUSY I2C_ISR_BUSY
#define LL_I2C_CR1_TXIE I2C_CR1_TXIE
#define LL_I2C_CR1_RXIE I2C_CR1_RXIE
#define LL_I2C_CR1_ADDRIE I2C_CR1_ADDRIE
#define LL_I2C_CR1_NACKIE I2C_CR1_NACKIE
#define LL_I2C_CR1_STOPIE I2C_CR1_STOPIE
#define LL_I2C_CR1_TCIE I2C_CR1_TCIE
#define LL_I2C_CR1_ERRIE I2C_CR1_ERRIE
#define LL_I2C_MODE_I2C 0x00000000U
#define LL_I2C_MODE_SMBUS_HOST I2C_CR1_SMBHEN
#define LL_I2C_MODE_SMBUS_DEVICE 0x00000000U
#define LL_I2C_MODE_SMBUS_DEVICE_ARP I2C_CR1_SMBDEN
#define LL_I2C_ANALOGFILTER_ENABLE 0x00000000U
#define LL_I2C_ANALOGFILTER_DISABLE I2C_CR1_ANFOFF
#define LL_I2C_ADDRESSING_MODE_7BIT 0x00000000U
#define LL_I2C_ADDRESSING_MODE_10BIT I2C_CR2_ADD10
#define LL_I2C_OWNADDRESS1_7BIT 0x00000000U
#define LL_I2C_OWNADDRESS1_10BIT I2C_OAR1_OA1MODE
#define LL_I2C_OWNADDRESS2_NOMASK I2C_OAR2_OA2NOMASK
#define LL_I2C_OWNADDRESS2_MASK01 I2C_OAR2_OA2MASK01
#define LL_I2C_OWNADDRESS2_MASK02 I2C_OAR2_OA2MASK02
#define LL_I2C_OWNADDRESS2_MASK03 I2C_OAR2_OA2MASK03
#define LL_I2C_OWNADDRESS2_MASK04 I2C_OAR2_OA2MASK04
#define LL_I2C_OWNADDRESS2_MASK05 I2C_OAR2_OA2MASK05
#define LL_I2C_OWNADDRESS2_MASK06 I2C_OAR2_OA2MASK06
#define LL_I2C_OWNADDRESS2_MASK07 I2C_OAR2_OA2MASK07
#define LL_I2C_ACK 0x00000000U
#define LL_I2C_NACK I2C_CR2_NACK
#define LL_I2C_ADDRSLAVE_7BIT 0x00000000U
#define LL_I2C_ADDRSLAVE_10BIT I2C_CR2_ADD10
#define LL_I2C_REQUEST_WRITE 0x00000000U
#define LL_I2C_REQUEST_READ I2C_CR2_RD_WRN
#define LL_I2C_MODE_RELOAD I2C_CR2_RELOAD
#define LL_I2C_MODE_AUTOEND I2C_CR2_AUTOEND
#define LL_I2C_MODE_SOFTEND 0x00000000U
#define LL_I2C_MODE_SMBUS_RELOAD LL_I2C_MODE_RELOAD
#define LL_I2C_MODE_SMBUS_AUTOEND_NO_PEC LL_I2C_MODE_AUTOEND
#define LL_I2C_MODE_SMBUS_SOFTEND_NO_PEC LL_I2C_MODE_SOFTEND
#define LL_I2C_MODE_SMBUS_AUTOEND_WITH_PEC (uint32_t)(LL_I2C_MODE_AUTOEND | I2C_CR2_PECBYTE)
#define LL_I2C_MODE_SMBUS_SOFTEND_WITH_PEC (uint32_t)(LL_I2C_MODE_SOFTEND | I2C_CR2_PECBYTE)
#define LL_I2C_GENERATE_NOSTARTSTOP 0x00000000U
#define LL_I2C_GENERATE_STOP (uint32_t)(0x80000000U | I2C_CR2_STOP)
#define LL_I2C_GENERATE_START_READ (uint32_t)(0x80000000U | I2C_CR2_START | I2C_CR2_RD_WRN)
#define LL_I2C_GENERATE_START_WRITE (uint32_t)(0x80000000U | I2C_CR2_START)
#define LL_I2C_GENERATE_RESTART_7BIT_READ (uint32_t)(0x80000000U | I2C_CR2_START | I2C_CR2_RD_WRN)
#define LL_I2C_GENERATE_RESTART_7BIT_WRITE (uint32_t)(0x80000000U | I2C_CR2_START)
#define LL_I2C_GENERATE_RESTART_10BIT_READ (uint32_t)(0x80000000U | I2C_CR2_START | I2C_CR2_RD_WRN | I2C_CR2_HEAD10R)
#define LL_I2C_GENERATE_RESTART_10BIT_WRITE (uint32_t)(0x80000000U | I2C_CR2_START)
#define LL_I2C_DIRECTION_WRITE 0x00000000U
#define LL_I2C_DIRECTION_READ I2C_ISR_DIR
#define LL_I2C_DMA_REG_DATA_TRANSMIT 0x00000000U
#define LL_I2C_DMA_REG_DATA_RECEIVE 0x00000001U
#define LL_I2C_SMBUS_TIMEOUTA_MODE_SCL_LOW 0x00000000U
#define LL_I2C_SMBUS_TIMEOUTA_MODE_SDA_SCL_HIGH I2C_TIMEOUTR_TIDLE
#define LL_I2C_SMBUS_TIMEOUTA I2C_TIMEOUTR_TIMOUTEN
#define LL_I2C_SMBUS_TIMEOUTB I2C_TIMEOUTR_TEXTEN
#define LL_I2C_SMBUS_ALL_TIMEOUT (uint32_t)(I2C_TIMEOUTR_TIMOUTEN | I2C_TIMEOUTR_TEXTEN)
#define LL_I2C_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_I2C_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
#define __LL_I2C_CONVERT_TIMINGS(__PRESCALER__,__SETUP_TIME__,__HOLD_TIME__,__SCLH_PERIOD__,__SCLL_PERIOD__) ((((uint32_t)(__PRESCALER__) << I2C_TIMINGR_PRESC_Pos) & I2C_TIMINGR_PRESC) | (((uint32_t)(__SETUP_TIME__) << I2C_TIMINGR_SCLDEL_Pos) & I2C_TIMINGR_SCLDEL) | (((uint32_t)(__HOLD_TIME__) << I2C_TIMINGR_SDADEL_Pos) & I2C_TIMINGR_SDADEL) | (((uint32_t)(__SCLH_PERIOD__) << I2C_TIMINGR_SCLH_Pos) & I2C_TIMINGR_SCLH) | (((uint32_t)(__SCLL_PERIOD__) << I2C_TIMINGR_SCLL_Pos) & I2C_TIMINGR_SCLL))
static inline void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (0U))));
}
static inline void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_I2C_IsEnabled(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
  (((I2Cx->CR1)) = ((((((I2Cx->CR1))) & (~((0x1UL << (12U)) | (0xFUL << (8U))))) | (AnalogFilter | (DigitalFilter << (8U))))));
}
static inline void LL_I2C_SetDigitalFilter(I2C_TypeDef *I2Cx, uint32_t DigitalFilter)
{
  (((I2Cx->CR1)) = ((((((I2Cx->CR1))) & (~((0xFUL << (8U))))) | (DigitalFilter << (8U)))));
}
static inline uint32_t LL_I2C_GetDigitalFilter(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->CR1) & ((0xFUL << (8U)))) >> (8U));
}
static inline void LL_I2C_EnableAnalogFilter(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (12U))));
}
static inline void LL_I2C_DisableAnalogFilter(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (12U))));
}
static inline uint32_t LL_I2C_IsEnabledAnalogFilter(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (12U)))) != ((0x1UL << (12U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableDMAReq_TX(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (14U))));
}
static inline void LL_I2C_DisableDMAReq_TX(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (14U))));
}
static inline uint32_t LL_I2C_IsEnabledDMAReq_TX(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableDMAReq_RX(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (15U))));
}
static inline void LL_I2C_DisableDMAReq_RX(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (15U))));
}
static inline uint32_t LL_I2C_IsEnabledDMAReq_RX(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_DMA_GetRegAddr(I2C_TypeDef *I2Cx, uint32_t Direction)
{
  uint32_t data_reg_addr;
  if (Direction == 0x00000000U)
  {
    data_reg_addr = (uint32_t) &(I2Cx->TXDR);
  }
  else
  {
    data_reg_addr = (uint32_t) &(I2Cx->RXDR);
  }
  return data_reg_addr;
}
static inline void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (17U))));
}
static inline void LL_I2C_DisableClockStretching(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (17U))));
}
static inline uint32_t LL_I2C_IsEnabledClockStretching(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (17U)))) != ((0x1UL << (17U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableSlaveByteControl(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (16U))));
}
static inline void LL_I2C_DisableSlaveByteControl(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (16U))));
}
static inline uint32_t LL_I2C_IsEnabledSlaveByteControl(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableWakeUpFromStop(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (18U))));
}
static inline void LL_I2C_DisableWakeUpFromStop(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (18U))));
}
static inline uint32_t LL_I2C_IsEnabledWakeUpFromStop(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (18U)))) == ((0x1UL << (18U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableGeneralCall(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (19U))));
}
static inline void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (19U))));
}
static inline uint32_t LL_I2C_IsEnabledGeneralCall(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (19U)))) == ((0x1UL << (19U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_SetMasterAddressingMode(I2C_TypeDef *I2Cx, uint32_t AddressingMode)
{
  (((I2Cx->CR2)) = ((((((I2Cx->CR2))) & (~((0x1UL << (11U))))) | (AddressingMode))));
}
static inline uint32_t LL_I2C_GetMasterAddressingMode(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->CR2) & ((0x1UL << (11U)))));
}
static inline void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
  (((I2Cx->OAR1)) = ((((((I2Cx->OAR1))) & (~((0x3FFUL << (0U)) | (0x1UL << (10U))))) | (OwnAddress1 | OwnAddrSize))));
}
static inline void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
  ((I2Cx->OAR1) |= ((0x1UL << (15U))));
}
static inline void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
  ((I2Cx->OAR1) &= ~((0x1UL << (15U))));
}
static inline uint32_t LL_I2C_IsEnabledOwnAddress1(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->OAR1) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
  (((I2Cx->OAR2)) = ((((((I2Cx->OAR2))) & (~((0x7FUL << (1U)) | (0x7UL << (8U))))) | (OwnAddress2 | OwnAddrMask))));
}
static inline void LL_I2C_EnableOwnAddress2(I2C_TypeDef *I2Cx)
{
  ((I2Cx->OAR2) |= ((0x1UL << (15U))));
}
static inline void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
  ((I2Cx->OAR2) &= ~((0x1UL << (15U))));
}
static inline uint32_t LL_I2C_IsEnabledOwnAddress2(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->OAR2) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
  ((I2Cx->TIMINGR) = (Timing));
}
static inline uint32_t LL_I2C_GetTimingPrescaler(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->TIMINGR) & ((0xFUL << (28U)))) >> (28U));
}
static inline uint32_t LL_I2C_GetClockLowPeriod(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->TIMINGR) & ((0xFFUL << (0U)))) >> (0U));
}
static inline uint32_t LL_I2C_GetClockHighPeriod(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->TIMINGR) & ((0xFFUL << (8U)))) >> (8U));
}
static inline uint32_t LL_I2C_GetDataHoldTime(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->TIMINGR) & ((0xFUL << (16U)))) >> (16U));
}
static inline uint32_t LL_I2C_GetDataSetupTime(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->TIMINGR) & ((0xFUL << (20U)))) >> (20U));
}
static inline void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
  (((I2Cx->CR1)) = ((((((I2Cx->CR1))) & (~((0x1UL << (20U)) | (0x1UL << (21U))))) | (PeripheralMode))));
}
static inline uint32_t LL_I2C_GetMode(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->CR1) & ((0x1UL << (20U)) | (0x1UL << (21U)))));
}
static inline void LL_I2C_EnableSMBusAlert(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (22U))));
}
static inline void LL_I2C_DisableSMBusAlert(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (22U))));
}
static inline uint32_t LL_I2C_IsEnabledSMBusAlert(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (22U)))) == ((0x1UL << (22U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableSMBusPEC(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (23U))));
}
static inline void LL_I2C_DisableSMBusPEC(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (23U))));
}
static inline uint32_t LL_I2C_IsEnabledSMBusPEC(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (23U)))) == ((0x1UL << (23U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_ConfigSMBusTimeout(I2C_TypeDef *I2Cx, uint32_t TimeoutA, uint32_t TimeoutAMode,
                                               uint32_t TimeoutB)
{
  (((I2Cx->TIMEOUTR)) = ((((((I2Cx->TIMEOUTR))) & (~((0xFFFUL << (0U)) | (0x1UL << (12U)) | (0xFFFUL << (16U))))) | (TimeoutA | TimeoutAMode | (TimeoutB << (16U))))));
}
static inline void LL_I2C_SetSMBusTimeoutA(I2C_TypeDef *I2Cx, uint32_t TimeoutA)
{
  ((I2Cx->TIMEOUTR) = (TimeoutA));
}
static inline uint32_t LL_I2C_GetSMBusTimeoutA(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->TIMEOUTR) & ((0xFFFUL << (0U)))));
}
static inline void LL_I2C_SetSMBusTimeoutAMode(I2C_TypeDef *I2Cx, uint32_t TimeoutAMode)
{
  ((I2Cx->TIMEOUTR) = (TimeoutAMode));
}
static inline uint32_t LL_I2C_GetSMBusTimeoutAMode(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->TIMEOUTR) & ((0x1UL << (12U)))));
}
static inline void LL_I2C_SetSMBusTimeoutB(I2C_TypeDef *I2Cx, uint32_t TimeoutB)
{
  ((I2Cx->TIMEOUTR) = (TimeoutB << (16U)));
}
static inline uint32_t LL_I2C_GetSMBusTimeoutB(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->TIMEOUTR) & ((0xFFFUL << (16U)))) >> (16U));
}
static inline void LL_I2C_EnableSMBusTimeout(I2C_TypeDef *I2Cx, uint32_t ClockTimeout)
{
  ((I2Cx->TIMEOUTR) |= (ClockTimeout));
}
static inline void LL_I2C_DisableSMBusTimeout(I2C_TypeDef *I2Cx, uint32_t ClockTimeout)
{
  ((I2Cx->TIMEOUTR) &= ~(ClockTimeout));
}
static inline uint32_t LL_I2C_IsEnabledSMBusTimeout(I2C_TypeDef *I2Cx, uint32_t ClockTimeout)
{
  return ((((I2Cx->TIMEOUTR) & (((0x1UL << (15U)) | (0x1UL << (31U))))) == (ClockTimeout)) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableIT_TX(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (1U))));
}
static inline void LL_I2C_DisableIT_TX(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (1U))));
}
static inline uint32_t LL_I2C_IsEnabledIT_TX(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (2U))));
}
static inline void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (2U))));
}
static inline uint32_t LL_I2C_IsEnabledIT_RX(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableIT_ADDR(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (3U))));
}
static inline void LL_I2C_DisableIT_ADDR(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (3U))));
}
static inline uint32_t LL_I2C_IsEnabledIT_ADDR(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableIT_NACK(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (4U))));
}
static inline void LL_I2C_DisableIT_NACK(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (4U))));
}
static inline uint32_t LL_I2C_IsEnabledIT_NACK(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableIT_STOP(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (5U))));
}
static inline void LL_I2C_DisableIT_STOP(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (5U))));
}
static inline uint32_t LL_I2C_IsEnabledIT_STOP(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableIT_TC(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (6U))));
}
static inline void LL_I2C_DisableIT_TC(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (6U))));
}
static inline uint32_t LL_I2C_IsEnabledIT_TC(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableIT_ERR(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) |= ((0x1UL << (7U))));
}
static inline void LL_I2C_DisableIT_ERR(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR1) &= ~((0x1UL << (7U))));
}
static inline uint32_t LL_I2C_IsEnabledIT_ERR(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR1) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveFlag_NACK(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveFlag_TC(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveFlag_TCR(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveFlag_BERR(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveFlag_ARLO(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveFlag_OVR(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveSMBusFlag_PECERR(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveSMBusFlag_TIMEOUT(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveSMBusFlag_ALERT(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->ISR) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
  ((I2Cx->ICR) |= ((0x1UL << (3U))));
}
static inline void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
  ((I2Cx->ICR) |= ((0x1UL << (4U))));
}
static inline void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
  ((I2Cx->ICR) |= ((0x1UL << (5U))));
}
static inline void LL_I2C_ClearFlag_TXE(I2C_TypeDef *I2Cx)
{
  ((I2Cx->ISR) = ((0x1UL << (0U))));
}
static inline void LL_I2C_ClearFlag_BERR(I2C_TypeDef *I2Cx)
{
  ((I2Cx->ICR) |= ((0x1UL << (8U))));
}
static inline void LL_I2C_ClearFlag_ARLO(I2C_TypeDef *I2Cx)
{
  ((I2Cx->ICR) |= ((0x1UL << (9U))));
}
static inline void LL_I2C_ClearFlag_OVR(I2C_TypeDef *I2Cx)
{
  ((I2Cx->ICR) |= ((0x1UL << (10U))));
}
static inline void LL_I2C_ClearSMBusFlag_PECERR(I2C_TypeDef *I2Cx)
{
  ((I2Cx->ICR) |= ((0x1UL << (11U))));
}
static inline void LL_I2C_ClearSMBusFlag_TIMEOUT(I2C_TypeDef *I2Cx)
{
  ((I2Cx->ICR) |= ((0x1UL << (12U))));
}
static inline void LL_I2C_ClearSMBusFlag_ALERT(I2C_TypeDef *I2Cx)
{
  ((I2Cx->ICR) |= ((0x1UL << (13U))));
}
static inline void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR2) |= ((0x1UL << (25U))));
}
static inline void LL_I2C_DisableAutoEndMode(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR2) &= ~((0x1UL << (25U))));
}
static inline uint32_t LL_I2C_IsEnabledAutoEndMode(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR2) & ((0x1UL << (25U)))) == ((0x1UL << (25U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_EnableReloadMode(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR2) |= ((0x1UL << (24U))));
}
static inline void LL_I2C_DisableReloadMode(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR2) &= ~((0x1UL << (24U))));
}
static inline uint32_t LL_I2C_IsEnabledReloadMode(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR2) & ((0x1UL << (24U)))) == ((0x1UL << (24U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_SetTransferSize(I2C_TypeDef *I2Cx, uint32_t TransferSize)
{
  (((I2Cx->CR2)) = ((((((I2Cx->CR2))) & (~((0xFFUL << (16U))))) | (TransferSize << (16U)))));
}
static inline uint32_t LL_I2C_GetTransferSize(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->CR2) & ((0xFFUL << (16U)))) >> (16U));
}
static inline void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  (((I2Cx->CR2)) = ((((((I2Cx->CR2))) & (~((0x1UL << (15U))))) | (TypeAcknowledge))));
}
static inline void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR2) |= ((0x1UL << (13U))));
}
static inline void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR2) |= ((0x1UL << (14U))));
}
static inline void LL_I2C_EnableAuto10BitRead(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR2) &= ~((0x1UL << (12U))));
}
static inline void LL_I2C_DisableAuto10BitRead(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR2) |= ((0x1UL << (12U))));
}
static inline uint32_t LL_I2C_IsEnabledAuto10BitRead(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR2) & ((0x1UL << (12U)))) != ((0x1UL << (12U)))) ? 1UL : 0UL);
}
static inline void LL_I2C_SetTransferRequest(I2C_TypeDef *I2Cx, uint32_t TransferRequest)
{
  (((I2Cx->CR2)) = ((((((I2Cx->CR2))) & (~((0x1UL << (10U))))) | (TransferRequest))));
}
static inline uint32_t LL_I2C_GetTransferRequest(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->CR2) & ((0x1UL << (10U)))));
}
static inline void LL_I2C_SetSlaveAddr(I2C_TypeDef *I2Cx, uint32_t SlaveAddr)
{
  (((I2Cx->CR2)) = ((((((I2Cx->CR2))) & (~((0x3FFUL << (0U))))) | (SlaveAddr))));
}
static inline uint32_t LL_I2C_GetSlaveAddr(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->CR2) & ((0x3FFUL << (0U)))));
}
static inline void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
  (((I2Cx->CR2)) = ((((((I2Cx->CR2))) & (~((0x3FFUL << (0U)) | (0x1UL << (11U)) | ((0x1UL << (10U)) & (uint32_t)(Request >> (31U - (10U)))) | (0x1UL << (13U)) | (0x1UL << (14U)) | (0x1UL << (24U)) | (0xFFUL << (16U)) | (0x1UL << (25U)) | (0x1UL << (12U))))) | (SlaveAddr | SlaveAddrSize | (TransferSize << (16U)) | EndMode | Request))));
}
static inline uint32_t LL_I2C_GetTransferDirection(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->ISR) & ((0x1UL << (16U)))));
}
static inline uint32_t LL_I2C_GetAddressMatchCode(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->ISR) & ((0x7FUL << (17U)))) >> (17U) << 1);
}
static inline void LL_I2C_EnableSMBusPECCompare(I2C_TypeDef *I2Cx)
{
  ((I2Cx->CR2) |= ((0x1UL << (26U))));
}
static inline uint32_t LL_I2C_IsEnabledSMBusPECCompare(I2C_TypeDef *I2Cx)
{
  return ((((I2Cx->CR2) & ((0x1UL << (26U)))) == ((0x1UL << (26U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_I2C_GetSMBusPEC(I2C_TypeDef *I2Cx)
{
  return (uint32_t)(((I2Cx->PECR) & ((0xFFUL << (0U)))));
}
static inline uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
  return (uint8_t)(((I2Cx->RXDR) & ((0xFFUL << (0U)))));
}
static inline void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  ((I2Cx->TXDR) = (Data));
}
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct);
ErrorStatus LL_I2C_DeInit(I2C_TypeDef *I2Cx);
void LL_I2C_StructInit(LL_I2C_InitTypeDef *I2C_InitStruct);
#define STM32WBxx_LL_IPCC_H 
#define LL_IPCC_C1TOC2SR_CH1F IPCC_C1TOC2SR_CH1F_Msk
#define LL_IPCC_C1TOC2SR_CH2F IPCC_C1TOC2SR_CH2F_Msk
#define LL_IPCC_C1TOC2SR_CH3F IPCC_C1TOC2SR_CH3F_Msk
#define LL_IPCC_C1TOC2SR_CH4F IPCC_C1TOC2SR_CH4F_Msk
#define LL_IPCC_C1TOC2SR_CH5F IPCC_C1TOC2SR_CH5F_Msk
#define LL_IPCC_C1TOC2SR_CH6F IPCC_C1TOC2SR_CH6F_Msk
#define LL_IPCC_C2TOC1SR_CH1F IPCC_C2TOC1SR_CH1F_Msk
#define LL_IPCC_C2TOC1SR_CH2F IPCC_C2TOC1SR_CH2F_Msk
#define LL_IPCC_C2TOC1SR_CH3F IPCC_C2TOC1SR_CH3F_Msk
#define LL_IPCC_C2TOC1SR_CH4F IPCC_C2TOC1SR_CH4F_Msk
#define LL_IPCC_C2TOC1SR_CH5F IPCC_C2TOC1SR_CH5F_Msk
#define LL_IPCC_C2TOC1SR_CH6F IPCC_C2TOC1SR_CH6F_Msk
#define LL_IPCC_CHANNEL_1 (0x00000001U)
#define LL_IPCC_CHANNEL_2 (0x00000002U)
#define LL_IPCC_CHANNEL_3 (0x00000004U)
#define LL_IPCC_CHANNEL_4 (0x00000008U)
#define LL_IPCC_CHANNEL_5 (0x00000010U)
#define LL_IPCC_CHANNEL_6 (0x00000020U)
#define LL_IPCC_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_IPCC_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
static inline void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
  ((IPCCx->C1CR) |= ((0x1UL << (16U))));
}
static inline void LL_C1_IPCC_DisableIT_TXF(IPCC_TypeDef *IPCCx)
{
  ((IPCCx->C1CR) &= ~((0x1UL << (16U))));
}
static inline uint32_t LL_C1_IPCC_IsEnabledIT_TXF(IPCC_TypeDef const *const IPCCx)
{
  return ((((IPCCx->C1CR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
  ((IPCCx->C1CR) |= ((0x1UL << (0U))));
}
static inline void LL_C1_IPCC_DisableIT_RXO(IPCC_TypeDef *IPCCx)
{
  ((IPCCx->C1CR) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_C1_IPCC_IsEnabledIT_RXO(IPCC_TypeDef const *const IPCCx)
{
  return ((((IPCCx->C1CR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_C2_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
  ((IPCCx->C2CR) |= ((0x1UL << (16U))));
}
static inline void LL_C2_IPCC_DisableIT_TXF(IPCC_TypeDef *IPCCx)
{
  ((IPCCx->C2CR) &= ~((0x1UL << (16U))));
}
static inline uint32_t LL_C2_IPCC_IsEnabledIT_TXF(IPCC_TypeDef const *const IPCCx)
{
  return ((((IPCCx->C2CR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline void LL_C2_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
  ((IPCCx->C2CR) |= ((0x1UL << (0U))));
}
static inline void LL_C2_IPCC_DisableIT_RXO(IPCC_TypeDef *IPCCx)
{
  ((IPCCx->C2CR) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_C2_IPCC_IsEnabledIT_RXO(IPCC_TypeDef const *const IPCCx)
{
  return ((((IPCCx->C2CR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  ((IPCCx->C1MR) &= ~(Channel << (16U)));
}
static inline void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  ((IPCCx->C1MR) |= (Channel << (16U)));
}
static inline uint32_t LL_C1_IPCC_IsEnabledTransmitChannel(IPCC_TypeDef const *const IPCCx, uint32_t Channel)
{
  return ((((IPCCx->C1MR) & (Channel << (16U))) != (Channel << (16U))) ? 1UL : 0UL);
}
static inline void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  ((IPCCx->C1MR) &= ~(Channel));
}
static inline void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  ((IPCCx->C1MR) |= (Channel));
}
static inline uint32_t LL_C1_IPCC_IsEnabledReceiveChannel(IPCC_TypeDef const *const IPCCx, uint32_t Channel)
{
  return ((((IPCCx->C1MR) & (Channel)) != (Channel)) ? 1UL : 0UL);
}
static inline void LL_C2_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  ((IPCCx->C2MR) &= ~(Channel << (16U)));
}
static inline void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  ((IPCCx->C2MR) |= (Channel << ((16U))));
}
static inline uint32_t LL_C2_IPCC_IsEnabledTransmitChannel(IPCC_TypeDef const *const IPCCx, uint32_t Channel)
{
  return ((((IPCCx->C2MR) & (Channel << (16U))) != (Channel << (16U))) ? 1UL : 0UL);
}
static inline void LL_C2_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  ((IPCCx->C2MR) &= ~(Channel));
}
static inline void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  ((IPCCx->C2MR) |= (Channel));
}
static inline uint32_t LL_C2_IPCC_IsEnabledReceiveChannel(IPCC_TypeDef const *const IPCCx, uint32_t Channel)
{
  return ((((IPCCx->C2MR) & (Channel)) != (Channel)) ? 1UL : 0UL);
}
static inline void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  ((IPCCx->C1SCR) = (Channel));
}
static inline void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  ((IPCCx->C1SCR) = (Channel << (16U)));
}
static inline uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef const *const IPCCx, uint32_t Channel)
{
  return ((((IPCCx->C1TOC2SR) & (Channel)) == (Channel)) ? 1UL : 0UL);
}
static inline void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  ((IPCCx->C2SCR) = (Channel));
}
static inline void LL_C2_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
  ((IPCCx->C2SCR) = (Channel << (16U)));
}
static inline uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef const *const IPCCx, uint32_t Channel)
{
  return ((((IPCCx->C2TOC1SR) & (Channel)) == (Channel)) ? 1UL : 0UL);
}
static inline uint32_t LL_IPCC_GetChannelNumber(IPCC_TypeDef *IPCCx)
{
  (void)(IPCCx);
  return 6U;
}
#define STM32WBxx_LL_IWDG_H 
#define LL_IWDG_KEY_RELOAD 0x0000AAAAU
#define LL_IWDG_KEY_ENABLE 0x0000CCCCU
#define LL_IWDG_KEY_WR_ACCESS_ENABLE 0x00005555U
#define LL_IWDG_KEY_WR_ACCESS_DISABLE 0x00000000U
#define LL_IWDG_SR_PVU IWDG_SR_PVU
#define LL_IWDG_SR_RVU IWDG_SR_RVU
#define LL_IWDG_SR_WVU IWDG_SR_WVU
#define LL_IWDG_PRESCALER_4 0x00000000U
#define LL_IWDG_PRESCALER_8 (IWDG_PR_PR_0)
#define LL_IWDG_PRESCALER_16 (IWDG_PR_PR_1)
#define LL_IWDG_PRESCALER_32 (IWDG_PR_PR_1 | IWDG_PR_PR_0)
#define LL_IWDG_PRESCALER_64 (IWDG_PR_PR_2)
#define LL_IWDG_PRESCALER_128 (IWDG_PR_PR_2 | IWDG_PR_PR_0)
#define LL_IWDG_PRESCALER_256 (IWDG_PR_PR_2 | IWDG_PR_PR_1)
#define LL_IWDG_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_IWDG_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
static inline void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
  ((IWDGx->KR) = (0x0000CCCCU));
}
static inline void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
  ((IWDGx->KR) = (0x0000AAAAU));
}
static inline void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  ((IWDGx->KR) = (0x00005555U));
}
static inline void LL_IWDG_DisableWriteAccess(IWDG_TypeDef *IWDGx)
{
  ((IWDGx->KR) = (0x00000000U));
}
static inline void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  ((IWDGx->PR) = ((0x7UL << (0U)) & Prescaler));
}
static inline uint32_t LL_IWDG_GetPrescaler(IWDG_TypeDef *IWDGx)
{
  return (((IWDGx->PR)));
}
static inline void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  ((IWDGx->RLR) = ((0xFFFUL << (0U)) & Counter));
}
static inline uint32_t LL_IWDG_GetReloadCounter(IWDG_TypeDef *IWDGx)
{
  return (((IWDGx->RLR)));
}
static inline void LL_IWDG_SetWindow(IWDG_TypeDef *IWDGx, uint32_t Window)
{
  ((IWDGx->WINR) = ((0xFFFUL << (0U)) & Window));
}
static inline uint32_t LL_IWDG_GetWindow(IWDG_TypeDef *IWDGx)
{
  return (((IWDGx->WINR)));
}
static inline uint32_t LL_IWDG_IsActiveFlag_PVU(IWDG_TypeDef *IWDGx)
{
  return ((((IWDGx->SR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_IWDG_IsActiveFlag_RVU(IWDG_TypeDef *IWDGx)
{
  return ((((IWDGx->SR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_IWDG_IsActiveFlag_WVU(IWDG_TypeDef *IWDGx)
{
  return ((((IWDGx->SR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return ((((IWDGx->SR) & ((0x1UL << (0U)) | (0x1UL << (1U)) | (0x1UL << (2U)))) == 0U) ? 1UL : 0UL);
}
#define STM32WBxx_LL_LPTIM_H 
typedef struct
{
  uint32_t ClockSource;
  uint32_t Prescaler;
  uint32_t Waveform;
  uint32_t Polarity;
} LL_LPTIM_InitTypeDef;
#define LL_LPTIM_ISR_CMPM LPTIM_ISR_CMPM
#define LL_LPTIM_ISR_CMPOK LPTIM_ISR_CMPOK
#define LL_LPTIM_ISR_ARRM LPTIM_ISR_ARRM
#define LL_LPTIM_ISR_EXTTRIG LPTIM_ISR_EXTTRIG
#define LL_LPTIM_ISR_ARROK LPTIM_ISR_ARROK
#define LL_LPTIM_ISR_UP LPTIM_ISR_UP
#define LL_LPTIM_ISR_DOWN LPTIM_ISR_DOWN
#define LL_LPTIM_IER_CMPMIE LPTIM_IER_CMPMIE
#define LL_LPTIM_IER_CMPOKIE LPTIM_IER_CMPOKIE
#define LL_LPTIM_IER_ARRMIE LPTIM_IER_ARRMIE
#define LL_LPTIM_IER_EXTTRIGIE LPTIM_IER_EXTTRIGIE
#define LL_LPTIM_IER_ARROKIE LPTIM_IER_ARROKIE
#define LL_LPTIM_IER_UPIE LPTIM_IER_UPIE
#define LL_LPTIM_IER_DOWNIE LPTIM_IER_DOWNIE
#define LL_LPTIM_OPERATING_MODE_CONTINUOUS LPTIM_CR_CNTSTRT
#define LL_LPTIM_OPERATING_MODE_ONESHOT LPTIM_CR_SNGSTRT
#define LL_LPTIM_UPDATE_MODE_IMMEDIATE 0x00000000U
#define LL_LPTIM_UPDATE_MODE_ENDOFPERIOD LPTIM_CFGR_PRELOAD
#define LL_LPTIM_COUNTER_MODE_INTERNAL 0x00000000U
#define LL_LPTIM_COUNTER_MODE_EXTERNAL LPTIM_CFGR_COUNTMODE
#define LL_LPTIM_OUTPUT_WAVEFORM_PWM 0x00000000U
#define LL_LPTIM_OUTPUT_WAVEFORM_SETONCE LPTIM_CFGR_WAVE
#define LL_LPTIM_OUTPUT_POLARITY_REGULAR 0x00000000U
#define LL_LPTIM_OUTPUT_POLARITY_INVERSE LPTIM_CFGR_WAVPOL
#define LL_LPTIM_PRESCALER_DIV1 0x00000000U
#define LL_LPTIM_PRESCALER_DIV2 LPTIM_CFGR_PRESC_0
#define LL_LPTIM_PRESCALER_DIV4 LPTIM_CFGR_PRESC_1
#define LL_LPTIM_PRESCALER_DIV8 (LPTIM_CFGR_PRESC_1 | LPTIM_CFGR_PRESC_0)
#define LL_LPTIM_PRESCALER_DIV16 LPTIM_CFGR_PRESC_2
#define LL_LPTIM_PRESCALER_DIV32 (LPTIM_CFGR_PRESC_2 | LPTIM_CFGR_PRESC_0)
#define LL_LPTIM_PRESCALER_DIV64 (LPTIM_CFGR_PRESC_2 | LPTIM_CFGR_PRESC_1)
#define LL_LPTIM_PRESCALER_DIV128 LPTIM_CFGR_PRESC
#define LL_LPTIM_TRIG_SOURCE_GPIO 0x00000000U
#define LL_LPTIM_TRIG_SOURCE_RTCALARMA LPTIM_CFGR_TRIGSEL_0
#define LL_LPTIM_TRIG_SOURCE_RTCALARMB LPTIM_CFGR_TRIGSEL_1
#define LL_LPTIM_TRIG_SOURCE_RTCTAMP1 (LPTIM_CFGR_TRIGSEL_1 | LPTIM_CFGR_TRIGSEL_0)
#define LL_LPTIM_TRIG_SOURCE_RTCTAMP2 LPTIM_CFGR_TRIGSEL_2
#define LL_LPTIM_TRIG_SOURCE_RTCTAMP3 (LPTIM_CFGR_TRIGSEL_2 | LPTIM_CFGR_TRIGSEL_0)
#define LL_LPTIM_TRIG_SOURCE_COMP1 (LPTIM_CFGR_TRIGSEL_2 | LPTIM_CFGR_TRIGSEL_1)
#define LL_LPTIM_TRIG_SOURCE_COMP2 LPTIM_CFGR_TRIGSEL
#define LL_LPTIM_TRIG_FILTER_NONE 0x00000000U
#define LL_LPTIM_TRIG_FILTER_2 LPTIM_CFGR_TRGFLT_0
#define LL_LPTIM_TRIG_FILTER_4 LPTIM_CFGR_TRGFLT_1
#define LL_LPTIM_TRIG_FILTER_8 LPTIM_CFGR_TRGFLT
#define LL_LPTIM_TRIG_POLARITY_RISING LPTIM_CFGR_TRIGEN_0
#define LL_LPTIM_TRIG_POLARITY_FALLING LPTIM_CFGR_TRIGEN_1
#define LL_LPTIM_TRIG_POLARITY_RISING_FALLING LPTIM_CFGR_TRIGEN
#define LL_LPTIM_CLK_SOURCE_INTERNAL 0x00000000U
#define LL_LPTIM_CLK_SOURCE_EXTERNAL LPTIM_CFGR_CKSEL
#define LL_LPTIM_CLK_FILTER_NONE 0x00000000U
#define LL_LPTIM_CLK_FILTER_2 LPTIM_CFGR_CKFLT_0
#define LL_LPTIM_CLK_FILTER_4 LPTIM_CFGR_CKFLT_1
#define LL_LPTIM_CLK_FILTER_8 LPTIM_CFGR_CKFLT
#define LL_LPTIM_CLK_POLARITY_RISING 0x00000000U
#define LL_LPTIM_CLK_POLARITY_FALLING LPTIM_CFGR_CKPOL_0
#define LL_LPTIM_CLK_POLARITY_RISING_FALLING LPTIM_CFGR_CKPOL_1
#define LL_LPTIM_ENCODER_MODE_RISING 0x00000000U
#define LL_LPTIM_ENCODER_MODE_FALLING LPTIM_CFGR_CKPOL_0
#define LL_LPTIM_ENCODER_MODE_RISING_FALLING LPTIM_CFGR_CKPOL_1
#define LL_LPTIM_INPUT1_SRC_GPIO 0x00000000U
#define LL_LPTIM_INPUT1_SRC_COMP1 LPTIM_OR_OR_0
#define LL_LPTIM_INPUT1_SRC_COMP2 LPTIM_OR_OR_1
#define LL_LPTIM_INPUT1_SRC_COMP1_COMP2 LPTIM_OR_OR
#define LL_LPTIM_INPUT2_SRC_GPIO 0x00000000U
#define LL_LPTIM_INPUT2_SRC_COMP2 LPTIM_OR_OR_1
#define LL_LPTIM_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG((__INSTANCE__)->__REG__, (__VALUE__))
#define LL_LPTIM_ReadReg(__INSTANCE__,__REG__) READ_REG((__INSTANCE__)->__REG__)
ErrorStatus LL_LPTIM_DeInit(LPTIM_TypeDef *LPTIMx);
void LL_LPTIM_StructInit(LL_LPTIM_InitTypeDef *LPTIM_InitStruct);
ErrorStatus LL_LPTIM_Init(LPTIM_TypeDef *LPTIMx, LL_LPTIM_InitTypeDef *LPTIM_InitStruct);
void LL_LPTIM_Disable(LPTIM_TypeDef *LPTIMx);
static inline void LL_LPTIM_Enable(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->CR) |= ((0x1UL << (0U))));
}
static inline uint32_t LL_LPTIM_IsEnabled(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->CR) & ((0x1UL << (0U)))) == (0x1UL << (0U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_StartCounter(LPTIM_TypeDef *LPTIMx, uint32_t OperatingMode)
{
  (((LPTIMx->CR)) = ((((((LPTIMx->CR))) & (~((0x1UL << (2U)) | (0x1UL << (1U))))) | (OperatingMode))));
}
static inline void LL_LPTIM_EnableResetAfterRead(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->CR) |= ((0x1UL << (4U))));
}
static inline void LL_LPTIM_DisableResetAfterRead(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->CR) &= ~((0x1UL << (4U))));
}
static inline uint32_t LL_LPTIM_IsEnabledResetAfterRead(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->CR) & ((0x1UL << (4U)))) == (0x1UL << (4U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_ResetCounter(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->CR) |= ((0x1UL << (3U))));
}
static inline void LL_LPTIM_SetUpdateMode(LPTIM_TypeDef *LPTIMx, uint32_t UpdateMode)
{
  (((LPTIMx->CFGR)) = ((((((LPTIMx->CFGR))) & (~((0x1UL << (22U))))) | (UpdateMode))));
}
static inline uint32_t LL_LPTIM_GetUpdateMode(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CFGR) & ((0x1UL << (22U)))));
}
static inline void LL_LPTIM_SetAutoReload(LPTIM_TypeDef *LPTIMx, uint32_t AutoReload)
{
  (((LPTIMx->ARR)) = ((((((LPTIMx->ARR))) & (~((0xFFFFUL << (0U))))) | (AutoReload))));
}
static inline uint32_t LL_LPTIM_GetAutoReload(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->ARR) & ((0xFFFFUL << (0U)))));
}
static inline void LL_LPTIM_SetCompare(LPTIM_TypeDef *LPTIMx, uint32_t CompareValue)
{
  (((LPTIMx->CMP)) = ((((((LPTIMx->CMP))) & (~((0xFFFFUL << (0U))))) | (CompareValue))));
}
static inline uint32_t LL_LPTIM_GetCompare(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CMP) & ((0xFFFFUL << (0U)))));
}
static inline uint32_t LL_LPTIM_GetCounter(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CNT) & ((0xFFFFUL << (0U)))));
}
static inline void LL_LPTIM_SetCounterMode(LPTIM_TypeDef *LPTIMx, uint32_t CounterMode)
{
  (((LPTIMx->CFGR)) = ((((((LPTIMx->CFGR))) & (~((0x1UL << (23U))))) | (CounterMode))));
}
static inline uint32_t LL_LPTIM_GetCounterMode(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CFGR) & ((0x1UL << (23U)))));
}
static inline void LL_LPTIM_ConfigOutput(LPTIM_TypeDef *LPTIMx, uint32_t Waveform, uint32_t Polarity)
{
  (((LPTIMx->CFGR)) = ((((((LPTIMx->CFGR))) & (~((0x1UL << (20U)) | (0x1UL << (21U))))) | (Waveform | Polarity))));
}
static inline void LL_LPTIM_SetWaveform(LPTIM_TypeDef *LPTIMx, uint32_t Waveform)
{
  (((LPTIMx->CFGR)) = ((((((LPTIMx->CFGR))) & (~((0x1UL << (20U))))) | (Waveform))));
}
static inline uint32_t LL_LPTIM_GetWaveform(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CFGR) & ((0x1UL << (20U)))));
}
static inline void LL_LPTIM_SetPolarity(LPTIM_TypeDef *LPTIMx, uint32_t Polarity)
{
  (((LPTIMx->CFGR)) = ((((((LPTIMx->CFGR))) & (~((0x1UL << (21U))))) | (Polarity))));
}
static inline uint32_t LL_LPTIM_GetPolarity(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CFGR) & ((0x1UL << (21U)))));
}
static inline void LL_LPTIM_SetPrescaler(LPTIM_TypeDef *LPTIMx, uint32_t Prescaler)
{
  (((LPTIMx->CFGR)) = ((((((LPTIMx->CFGR))) & (~((0x7UL << (9U))))) | (Prescaler))));
}
static inline uint32_t LL_LPTIM_GetPrescaler(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CFGR) & ((0x7UL << (9U)))));
}
static inline void LL_LPTIM_SetInput1Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
  (((LPTIMx->OR)) = ((((((LPTIMx->OR))) & (~((0x3UL << (0U))))) | (Src))));
}
static inline void LL_LPTIM_SetInput2Src(LPTIM_TypeDef *LPTIMx, uint32_t Src)
{
  (((LPTIMx->OR)) = ((((((LPTIMx->OR))) & (~((0x3UL << (0U))))) | (Src))));
}
static inline void LL_LPTIM_EnableTimeout(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->CFGR) |= ((0x1UL << (19U))));
}
static inline void LL_LPTIM_DisableTimeout(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->CFGR) &= ~((0x1UL << (19U))));
}
static inline uint32_t LL_LPTIM_IsEnabledTimeout(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->CFGR) & ((0x1UL << (19U)))) == (0x1UL << (19U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_TrigSw(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->CFGR) &= ~((0x3UL << (17U))));
}
static inline void LL_LPTIM_ConfigTrigger(LPTIM_TypeDef *LPTIMx, uint32_t Source, uint32_t Filter, uint32_t Polarity)
{
  (((LPTIMx->CFGR)) = ((((((LPTIMx->CFGR))) & (~((0x7UL << (13U)) | (0x3UL << (6U)) | (0x3UL << (17U))))) | (Source | Filter | Polarity))));
}
static inline uint32_t LL_LPTIM_GetTriggerSource(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CFGR) & ((0x7UL << (13U)))));
}
static inline uint32_t LL_LPTIM_GetTriggerFilter(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CFGR) & ((0x3UL << (6U)))));
}
static inline uint32_t LL_LPTIM_GetTriggerPolarity(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CFGR) & ((0x3UL << (17U)))));
}
static inline void LL_LPTIM_SetClockSource(LPTIM_TypeDef *LPTIMx, uint32_t ClockSource)
{
  (((LPTIMx->CFGR)) = ((((((LPTIMx->CFGR))) & (~((0x1UL << (0U))))) | (ClockSource))));
}
static inline uint32_t LL_LPTIM_GetClockSource(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CFGR) & ((0x1UL << (0U)))));
}
static inline void LL_LPTIM_ConfigClock(LPTIM_TypeDef *LPTIMx, uint32_t ClockFilter, uint32_t ClockPolarity)
{
  (((LPTIMx->CFGR)) = ((((((LPTIMx->CFGR))) & (~((0x3UL << (3U)) | (0x3UL << (1U))))) | (ClockFilter | ClockPolarity))));
}
static inline uint32_t LL_LPTIM_GetClockPolarity(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CFGR) & ((0x3UL << (1U)))));
}
static inline uint32_t LL_LPTIM_GetClockFilter(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CFGR) & ((0x3UL << (3U)))));
}
static inline void LL_LPTIM_SetEncoderMode(LPTIM_TypeDef *LPTIMx, uint32_t EncoderMode)
{
  (((LPTIMx->CFGR)) = ((((((LPTIMx->CFGR))) & (~((0x3UL << (1U))))) | (EncoderMode))));
}
static inline uint32_t LL_LPTIM_GetEncoderMode(LPTIM_TypeDef *LPTIMx)
{
  return (uint32_t)(((LPTIMx->CFGR) & ((0x3UL << (1U)))));
}
static inline void LL_LPTIM_EnableEncoderMode(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->CFGR) |= ((0x1UL << (24U))));
}
static inline void LL_LPTIM_DisableEncoderMode(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->CFGR) &= ~((0x1UL << (24U))));
}
static inline uint32_t LL_LPTIM_IsEnabledEncoderMode(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->CFGR) & ((0x1UL << (24U)))) == (0x1UL << (24U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_ClearFLAG_CMPM(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->ICR) |= ((0x1UL << (0U))));
}
static inline uint32_t LL_LPTIM_IsActiveFlag_CMPM(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->ISR) & ((0x1UL << (0U)))) == (0x1UL << (0U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_ClearFLAG_ARRM(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->ICR) |= ((0x1UL << (1U))));
}
static inline uint32_t LL_LPTIM_IsActiveFlag_ARRM(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->ISR) & ((0x1UL << (1U)))) == (0x1UL << (1U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_ClearFlag_EXTTRIG(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->ICR) |= ((0x1UL << (2U))));
}
static inline uint32_t LL_LPTIM_IsActiveFlag_EXTTRIG(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->ISR) & ((0x1UL << (2U)))) == (0x1UL << (2U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_ClearFlag_CMPOK(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->ICR) |= ((0x1UL << (3U))));
}
static inline uint32_t LL_LPTIM_IsActiveFlag_CMPOK(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->ISR) & ((0x1UL << (3U)))) == (0x1UL << (3U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_ClearFlag_ARROK(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->ICR) |= ((0x1UL << (4U))));
}
static inline uint32_t LL_LPTIM_IsActiveFlag_ARROK(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->ISR) & ((0x1UL << (4U)))) == (0x1UL << (4U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_ClearFlag_UP(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->ICR) |= ((0x1UL << (5U))));
}
static inline uint32_t LL_LPTIM_IsActiveFlag_UP(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->ISR) & ((0x1UL << (5U)))) == (0x1UL << (5U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_ClearFlag_DOWN(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->ICR) |= ((0x1UL << (6U))));
}
static inline uint32_t LL_LPTIM_IsActiveFlag_DOWN(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->ISR) & ((0x1UL << (6U)))) == (0x1UL << (6U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_EnableIT_CMPM(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) |= ((0x1UL << (0U))));
}
static inline void LL_LPTIM_DisableIT_CMPM(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_LPTIM_IsEnabledIT_CMPM(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->IER) & ((0x1UL << (0U)))) == (0x1UL << (0U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_EnableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) |= ((0x1UL << (1U))));
}
static inline void LL_LPTIM_DisableIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) &= ~((0x1UL << (1U))));
}
static inline uint32_t LL_LPTIM_IsEnabledIT_ARRM(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->IER) & ((0x1UL << (1U)))) == (0x1UL << (1U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_EnableIT_EXTTRIG(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) |= ((0x1UL << (2U))));
}
static inline void LL_LPTIM_DisableIT_EXTTRIG(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) &= ~((0x1UL << (2U))));
}
static inline uint32_t LL_LPTIM_IsEnabledIT_EXTTRIG(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->IER) & ((0x1UL << (2U)))) == (0x1UL << (2U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_EnableIT_CMPOK(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) |= ((0x1UL << (3U))));
}
static inline void LL_LPTIM_DisableIT_CMPOK(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) &= ~((0x1UL << (3U))));
}
static inline uint32_t LL_LPTIM_IsEnabledIT_CMPOK(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->IER) & ((0x1UL << (3U)))) == (0x1UL << (3U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_EnableIT_ARROK(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) |= ((0x1UL << (4U))));
}
static inline void LL_LPTIM_DisableIT_ARROK(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) &= ~((0x1UL << (4U))));
}
static inline uint32_t LL_LPTIM_IsEnabledIT_ARROK(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->IER) & ((0x1UL << (4U)))) == (0x1UL << (4U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_EnableIT_UP(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) |= ((0x1UL << (5U))));
}
static inline void LL_LPTIM_DisableIT_UP(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) &= ~((0x1UL << (5U))));
}
static inline uint32_t LL_LPTIM_IsEnabledIT_UP(LPTIM_TypeDef *LPTIMx)
{
  return (((((LPTIMx->IER) & ((0x1UL << (5U)))) == (0x1UL << (5U))) ? 1UL : 0UL));
}
static inline void LL_LPTIM_EnableIT_DOWN(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) |= ((0x1UL << (6U))));
}
static inline void LL_LPTIM_DisableIT_DOWN(LPTIM_TypeDef *LPTIMx)
{
  ((LPTIMx->IER) &= ~((0x1UL << (6U))));
}
static inline uint32_t LL_LPTIM_IsEnabledIT_DOWN(LPTIM_TypeDef *LPTIMx)
{
  return ((((LPTIMx->IER) & ((0x1UL << (6U)))) == (0x1UL << (6U))) ? 1UL : 0UL);
}
#define STM32WBxx_LL_LPUART_H 
static const uint16_t LPUART_PRESCALER_TAB[] =
{
  (uint16_t)1,
  (uint16_t)2,
  (uint16_t)4,
  (uint16_t)6,
  (uint16_t)8,
  (uint16_t)10,
  (uint16_t)12,
  (uint16_t)16,
  (uint16_t)32,
  (uint16_t)64,
  (uint16_t)128,
  (uint16_t)256
};
#define LPUART_LPUARTDIV_FREQ_MUL 256U
#define LPUART_BRR_MASK 0x000FFFFFU
#define LPUART_BRR_MIN_VALUE 0x00000300U
typedef struct
{
  uint32_t PrescalerValue;
  uint32_t BaudRate;
  uint32_t DataWidth;
  uint32_t StopBits;
  uint32_t Parity;
  uint32_t TransferDirection;
  uint32_t HardwareFlowControl;
} LL_LPUART_InitTypeDef;
#define LL_LPUART_ICR_PECF USART_ICR_PECF
#define LL_LPUART_ICR_FECF USART_ICR_FECF
#define LL_LPUART_ICR_NCF USART_ICR_NECF
#define LL_LPUART_ICR_ORECF USART_ICR_ORECF
#define LL_LPUART_ICR_IDLECF USART_ICR_IDLECF
#define LL_LPUART_ICR_TXFECF USART_ICR_TXFECF
#define LL_LPUART_ICR_TCCF USART_ICR_TCCF
#define LL_LPUART_ICR_CTSCF USART_ICR_CTSCF
#define LL_LPUART_ICR_CMCF USART_ICR_CMCF
#define LL_LPUART_ICR_WUCF USART_ICR_WUCF
#define LL_LPUART_ISR_PE USART_ISR_PE
#define LL_LPUART_ISR_FE USART_ISR_FE
#define LL_LPUART_ISR_NE USART_ISR_NE
#define LL_LPUART_ISR_ORE USART_ISR_ORE
#define LL_LPUART_ISR_IDLE USART_ISR_IDLE
#define LL_LPUART_ISR_RXNE_RXFNE USART_ISR_RXNE_RXFNE
#define LL_LPUART_ISR_TC USART_ISR_TC
#define LL_LPUART_ISR_TXE_TXFNF USART_ISR_TXE_TXFNF
#define LL_LPUART_ISR_CTSIF USART_ISR_CTSIF
#define LL_LPUART_ISR_CTS USART_ISR_CTS
#define LL_LPUART_ISR_BUSY USART_ISR_BUSY
#define LL_LPUART_ISR_CMF USART_ISR_CMF
#define LL_LPUART_ISR_SBKF USART_ISR_SBKF
#define LL_LPUART_ISR_RWU USART_ISR_RWU
#define LL_LPUART_ISR_WUF USART_ISR_WUF
#define LL_LPUART_ISR_TEACK USART_ISR_TEACK
#define LL_LPUART_ISR_REACK USART_ISR_REACK
#define LL_LPUART_ISR_TXFE USART_ISR_TXFE
#define LL_LPUART_ISR_RXFF USART_ISR_RXFF
#define LL_LPUART_ISR_RXFT USART_ISR_RXFT
#define LL_LPUART_ISR_TXFT USART_ISR_TXFT
#define LL_LPUART_CR1_IDLEIE USART_CR1_IDLEIE
#define LL_LPUART_CR1_RXNEIE_RXFNEIE USART_CR1_RXNEIE_RXFNEIE
#define LL_LPUART_CR1_TCIE USART_CR1_TCIE
#define LL_LPUART_CR1_TXEIE_TXFNFIE USART_CR1_TXEIE_TXFNFIE
#define LL_LPUART_CR1_PEIE USART_CR1_PEIE
#define LL_LPUART_CR1_CMIE USART_CR1_CMIE
#define LL_LPUART_CR1_TXFEIE USART_CR1_TXFEIE
#define LL_LPUART_CR1_RXFFIE USART_CR1_RXFFIE
#define LL_LPUART_CR3_EIE USART_CR3_EIE
#define LL_LPUART_CR3_CTSIE USART_CR3_CTSIE
#define LL_LPUART_CR3_WUFIE USART_CR3_WUFIE
#define LL_LPUART_CR3_TXFTIE USART_CR3_TXFTIE
#define LL_LPUART_CR3_RXFTIE USART_CR3_RXFTIE
#define LL_LPUART_FIFOTHRESHOLD_1_8 0x00000000U
#define LL_LPUART_FIFOTHRESHOLD_1_4 0x00000001U
#define LL_LPUART_FIFOTHRESHOLD_1_2 0x00000002U
#define LL_LPUART_FIFOTHRESHOLD_3_4 0x00000003U
#define LL_LPUART_FIFOTHRESHOLD_7_8 0x00000004U
#define LL_LPUART_FIFOTHRESHOLD_8_8 0x00000005U
#define LL_LPUART_DIRECTION_NONE 0x00000000U
#define LL_LPUART_DIRECTION_RX USART_CR1_RE
#define LL_LPUART_DIRECTION_TX USART_CR1_TE
#define LL_LPUART_DIRECTION_TX_RX (USART_CR1_TE |USART_CR1_RE)
#define LL_LPUART_PARITY_NONE 0x00000000U
#define LL_LPUART_PARITY_EVEN USART_CR1_PCE
#define LL_LPUART_PARITY_ODD (USART_CR1_PCE | USART_CR1_PS)
#define LL_LPUART_WAKEUP_IDLELINE 0x00000000U
#define LL_LPUART_WAKEUP_ADDRESSMARK USART_CR1_WAKE
#define LL_LPUART_DATAWIDTH_7B USART_CR1_M1
#define LL_LPUART_DATAWIDTH_8B 0x00000000U
#define LL_LPUART_DATAWIDTH_9B USART_CR1_M0
#define LL_LPUART_PRESCALER_DIV1 0x00000000U
#define LL_LPUART_PRESCALER_DIV2 (USART_PRESC_PRESCALER_0)
#define LL_LPUART_PRESCALER_DIV4 (USART_PRESC_PRESCALER_1)
#define LL_LPUART_PRESCALER_DIV6 (USART_PRESC_PRESCALER_1 | USART_PRESC_PRESCALER_0)
#define LL_LPUART_PRESCALER_DIV8 (USART_PRESC_PRESCALER_2)
#define LL_LPUART_PRESCALER_DIV10 (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_0)
#define LL_LPUART_PRESCALER_DIV12 (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1)
#define LL_LPUART_PRESCALER_DIV16 (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1 | USART_PRESC_PRESCALER_0)
#define LL_LPUART_PRESCALER_DIV32 (USART_PRESC_PRESCALER_3)
#define LL_LPUART_PRESCALER_DIV64 (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_0)
#define LL_LPUART_PRESCALER_DIV128 (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1)
#define LL_LPUART_PRESCALER_DIV256 (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1 | USART_PRESC_PRESCALER_0)
#define LL_LPUART_STOPBITS_1 0x00000000U
#define LL_LPUART_STOPBITS_2 USART_CR2_STOP_1
#define LL_LPUART_TXRX_STANDARD 0x00000000U
#define LL_LPUART_TXRX_SWAPPED (USART_CR2_SWAP)
#define LL_LPUART_RXPIN_LEVEL_STANDARD 0x00000000U
#define LL_LPUART_RXPIN_LEVEL_INVERTED (USART_CR2_RXINV)
#define LL_LPUART_TXPIN_LEVEL_STANDARD 0x00000000U
#define LL_LPUART_TXPIN_LEVEL_INVERTED (USART_CR2_TXINV)
#define LL_LPUART_BINARY_LOGIC_POSITIVE 0x00000000U
#define LL_LPUART_BINARY_LOGIC_NEGATIVE USART_CR2_DATAINV
#define LL_LPUART_BITORDER_LSBFIRST 0x00000000U
#define LL_LPUART_BITORDER_MSBFIRST USART_CR2_MSBFIRST
#define LL_LPUART_ADDRESS_DETECT_4B 0x00000000U
#define LL_LPUART_ADDRESS_DETECT_7B USART_CR2_ADDM7
#define LL_LPUART_HWCONTROL_NONE 0x00000000U
#define LL_LPUART_HWCONTROL_RTS USART_CR3_RTSE
#define LL_LPUART_HWCONTROL_CTS USART_CR3_CTSE
#define LL_LPUART_HWCONTROL_RTS_CTS (USART_CR3_RTSE | USART_CR3_CTSE)
#define LL_LPUART_WAKEUP_ON_ADDRESS 0x00000000U
#define LL_LPUART_WAKEUP_ON_STARTBIT USART_CR3_WUS_1
#define LL_LPUART_WAKEUP_ON_RXNE (USART_CR3_WUS_0 | USART_CR3_WUS_1)
#define LL_LPUART_DE_POLARITY_HIGH 0x00000000U
#define LL_LPUART_DE_POLARITY_LOW USART_CR3_DEP
#define LL_LPUART_DMA_REG_DATA_TRANSMIT 0x00000000U
#define LL_LPUART_DMA_REG_DATA_RECEIVE 0x00000001U
#define LL_LPUART_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_LPUART_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
#define __LL_LPUART_DIV(__PERIPHCLK__,__PRESCALER__,__BAUDRATE__) (uint32_t) ((((((uint64_t)(__PERIPHCLK__)/(uint64_t)(LPUART_PRESCALER_TAB[(uint16_t)(__PRESCALER__)])) * LPUART_LPUARTDIV_FREQ_MUL) + (uint32_t)((__BAUDRATE__)/2U))/(__BAUDRATE__)) & LPUART_BRR_MASK)
static inline void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR1) |= ((0x1UL << (0U))));
}
static inline void LL_LPUART_Disable(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR1) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_LPUART_IsEnabled(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR1) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_LPUART_EnableFIFO(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR1) |= ((0x1UL << (29U))));
}
static inline void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR1) &= ~((0x1UL << (29U))));
}
static inline uint32_t LL_LPUART_IsEnabledFIFO(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR1) & ((0x1UL << (29U)))) == ((0x1UL << (29U)))) ? 1UL : 0UL);
}
static inline void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
  do { uint32_t val; do { val = (__LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) & ~((0x7UL << (29U)))) | (Threshold << (29U)); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline uint32_t LL_LPUART_GetTXFIFOThreshold(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR3) & ((0x7UL << (29U)))) >> (29U));
}
static inline void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
  do { uint32_t val; do { val = (__LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) & ~((0x7UL << (25U)))) | (Threshold << (25U)); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline uint32_t LL_LPUART_GetRXFIFOThreshold(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR3) & ((0x7UL << (25U)))) >> (25U));
}
static inline void LL_LPUART_ConfigFIFOsThreshold(USART_TypeDef *LPUARTx, uint32_t TXThreshold, uint32_t RXThreshold)
{
  do { uint32_t val; do { val = (__LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) & ~((0x7UL << (29U)) | (0x7UL << (25U)))) | ((TXThreshold << (29U)) | (RXThreshold << (25U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline void LL_LPUART_EnableInStopMode(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) | ((0x1UL << (1U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableInStopMode(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) & ~((0x1UL << (1U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline uint32_t LL_LPUART_IsEnabledInStopMode(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR1) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline void LL_LPUART_EnableDirectionRx(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) | ((0x1UL << (2U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableDirectionRx(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) & ~((0x1UL << (2U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_EnableDirectionTx(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) | ((0x1UL << (3U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableDirectionTx(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) & ~((0x1UL << (3U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_SetTransferDirection(USART_TypeDef *LPUARTx, uint32_t TransferDirection)
{
  do { uint32_t val; do { val = (__LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) & ~((0x1UL << (2U)) | (0x1UL << (3U)))) | (TransferDirection); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline uint32_t LL_LPUART_GetTransferDirection(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR1) & ((0x1UL << (2U)) | (0x1UL << (3U)))));
}
static inline void LL_LPUART_SetParity(USART_TypeDef *LPUARTx, uint32_t Parity)
{
  (((LPUARTx->CR1)) = ((((((LPUARTx->CR1))) & (~((0x1UL << (9U)) | (0x1UL << (10U))))) | (Parity))));
}
static inline uint32_t LL_LPUART_GetParity(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR1) & ((0x1UL << (9U)) | (0x1UL << (10U)))));
}
static inline void LL_LPUART_SetWakeUpMethod(USART_TypeDef *LPUARTx, uint32_t Method)
{
  (((LPUARTx->CR1)) = ((((((LPUARTx->CR1))) & (~((0x1UL << (11U))))) | (Method))));
}
static inline uint32_t LL_LPUART_GetWakeUpMethod(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR1) & ((0x1UL << (11U)))));
}
static inline void LL_LPUART_SetDataWidth(USART_TypeDef *LPUARTx, uint32_t DataWidth)
{
  (((LPUARTx->CR1)) = ((((((LPUARTx->CR1))) & (~((uint32_t)((0x1UL << (28U)) | (0x1UL << (12U)))))) | (DataWidth))));
}
static inline uint32_t LL_LPUART_GetDataWidth(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR1) & ((uint32_t)((0x1UL << (28U)) | (0x1UL << (12U))))));
}
static inline void LL_LPUART_EnableMuteMode(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) | ((0x1UL << (13U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableMuteMode(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) & ~((0x1UL << (13U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline uint32_t LL_LPUART_IsEnabledMuteMode(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR1) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
static inline void LL_LPUART_SetPrescaler(USART_TypeDef *LPUARTx, uint32_t PrescalerValue)
{
  (((LPUARTx->PRESC)) = ((((((LPUARTx->PRESC))) & (~((0xFUL << (0U))))) | ((uint16_t)PrescalerValue))));
}
static inline uint32_t LL_LPUART_GetPrescaler(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->PRESC) & ((0xFUL << (0U)))));
}
static inline void LL_LPUART_SetStopBitsLength(USART_TypeDef *LPUARTx, uint32_t StopBits)
{
  (((LPUARTx->CR2)) = ((((((LPUARTx->CR2))) & (~((0x3UL << (12U))))) | (StopBits))));
}
static inline uint32_t LL_LPUART_GetStopBitsLength(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR2) & ((0x3UL << (12U)))));
}
static inline void LL_LPUART_ConfigCharacter(USART_TypeDef *LPUARTx, uint32_t DataWidth, uint32_t Parity,
                                               uint32_t StopBits)
{
  (((LPUARTx->CR1)) = ((((((LPUARTx->CR1))) & (~((0x1UL << (9U)) | (0x1UL << (10U)) | (uint32_t)((0x1UL << (28U)) | (0x1UL << (12U)))))) | (Parity | DataWidth))));
  (((LPUARTx->CR2)) = ((((((LPUARTx->CR2))) & (~((0x3UL << (12U))))) | (StopBits))));
}
static inline void LL_LPUART_SetTXRXSwap(USART_TypeDef *LPUARTx, uint32_t SwapConfig)
{
  (((LPUARTx->CR2)) = ((((((LPUARTx->CR2))) & (~((0x1UL << (15U))))) | (SwapConfig))));
}
static inline uint32_t LL_LPUART_GetTXRXSwap(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR2) & ((0x1UL << (15U)))));
}
static inline void LL_LPUART_SetRXPinLevel(USART_TypeDef *LPUARTx, uint32_t PinInvMethod)
{
  (((LPUARTx->CR2)) = ((((((LPUARTx->CR2))) & (~((0x1UL << (16U))))) | (PinInvMethod))));
}
static inline uint32_t LL_LPUART_GetRXPinLevel(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR2) & ((0x1UL << (16U)))));
}
static inline void LL_LPUART_SetTXPinLevel(USART_TypeDef *LPUARTx, uint32_t PinInvMethod)
{
  (((LPUARTx->CR2)) = ((((((LPUARTx->CR2))) & (~((0x1UL << (17U))))) | (PinInvMethod))));
}
static inline uint32_t LL_LPUART_GetTXPinLevel(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR2) & ((0x1UL << (17U)))));
}
static inline void LL_LPUART_SetBinaryDataLogic(USART_TypeDef *LPUARTx, uint32_t DataLogic)
{
  (((LPUARTx->CR2)) = ((((((LPUARTx->CR2))) & (~((0x1UL << (18U))))) | (DataLogic))));
}
static inline uint32_t LL_LPUART_GetBinaryDataLogic(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR2) & ((0x1UL << (18U)))));
}
static inline void LL_LPUART_SetTransferBitOrder(USART_TypeDef *LPUARTx, uint32_t BitOrder)
{
  (((LPUARTx->CR2)) = ((((((LPUARTx->CR2))) & (~((0x1UL << (19U))))) | (BitOrder))));
}
static inline uint32_t LL_LPUART_GetTransferBitOrder(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR2) & ((0x1UL << (19U)))));
}
static inline void LL_LPUART_ConfigNodeAddress(USART_TypeDef *LPUARTx, uint32_t AddressLen, uint32_t NodeAddress)
{
  (((LPUARTx->CR2)) = ((((((LPUARTx->CR2))) & (~((0xFFUL << (24U)) | (0x1UL << (4U))))) | ((uint32_t)(AddressLen | (NodeAddress << (24U)))))));
}
static inline uint32_t LL_LPUART_GetNodeAddress(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR2) & ((0xFFUL << (24U)))) >> (24U));
}
static inline uint32_t LL_LPUART_GetNodeAddressLen(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR2) & ((0x1UL << (4U)))));
}
static inline void LL_LPUART_EnableRTSHWFlowCtrl(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR3) |= ((0x1UL << (8U))));
}
static inline void LL_LPUART_DisableRTSHWFlowCtrl(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR3) &= ~((0x1UL << (8U))));
}
static inline void LL_LPUART_EnableCTSHWFlowCtrl(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR3) |= ((0x1UL << (9U))));
}
static inline void LL_LPUART_DisableCTSHWFlowCtrl(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR3) &= ~((0x1UL << (9U))));
}
static inline void LL_LPUART_SetHWFlowCtrl(USART_TypeDef *LPUARTx, uint32_t HardwareFlowControl)
{
  (((LPUARTx->CR3)) = ((((((LPUARTx->CR3))) & (~((0x1UL << (8U)) | (0x1UL << (9U))))) | (HardwareFlowControl))));
}
static inline uint32_t LL_LPUART_GetHWFlowCtrl(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR3) & ((0x1UL << (8U)) | (0x1UL << (9U)))));
}
static inline void LL_LPUART_EnableOverrunDetect(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR3) &= ~((0x1UL << (12U))));
}
static inline void LL_LPUART_DisableOverrunDetect(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR3) |= ((0x1UL << (12U))));
}
static inline uint32_t LL_LPUART_IsEnabledOverrunDetect(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR3) & ((0x1UL << (12U)))) != (0x1UL << (12U))) ? 1UL : 0UL);
}
static inline void LL_LPUART_SetWKUPType(USART_TypeDef *LPUARTx, uint32_t Type)
{
  (((LPUARTx->CR3)) = ((((((LPUARTx->CR3))) & (~((0x3UL << (20U))))) | (Type))));
}
static inline uint32_t LL_LPUART_GetWKUPType(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR3) & ((0x3UL << (20U)))));
}
static inline void LL_LPUART_SetBaudRate(USART_TypeDef *LPUARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                           uint32_t BaudRate)
{
  if (BaudRate != 0U)
  {
    LPUARTx->BRR = (uint32_t) ((((((uint64_t)(PeriphClk)/(uint64_t)(LPUART_PRESCALER_TAB[(uint16_t)(PrescalerValue)])) * 256U) + (uint32_t)((BaudRate)/2U))/(BaudRate)) & 0x000FFFFFU);
  }
}
static inline uint32_t LL_LPUART_GetBaudRate(USART_TypeDef *LPUARTx, uint32_t PeriphClk, uint32_t PrescalerValue)
{
  uint32_t lpuartdiv;
  uint32_t brrresult;
  uint32_t periphclkpresc = (uint32_t)(PeriphClk / (LPUART_PRESCALER_TAB[(uint16_t)PrescalerValue]));
  lpuartdiv = LPUARTx->BRR & 0x000FFFFFU;
  if (lpuartdiv >= 0x00000300U)
  {
    brrresult = (uint32_t)(((uint64_t)(periphclkpresc) * 256U) / lpuartdiv);
  }
  else
  {
    brrresult = 0x0UL;
  }
  return (brrresult);
}
static inline void LL_LPUART_EnableHalfDuplex(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR3) |= ((0x1UL << (3U))));
}
static inline void LL_LPUART_DisableHalfDuplex(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR3) &= ~((0x1UL << (3U))));
}
static inline uint32_t LL_LPUART_IsEnabledHalfDuplex(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR3) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline void LL_LPUART_SetDEDeassertionTime(USART_TypeDef *LPUARTx, uint32_t Time)
{
  (((LPUARTx->CR1)) = ((((((LPUARTx->CR1))) & (~((0x1FUL << (16U))))) | (Time << (16U)))));
}
static inline uint32_t LL_LPUART_GetDEDeassertionTime(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR1) & ((0x1FUL << (16U)))) >> (16U));
}
static inline void LL_LPUART_SetDEAssertionTime(USART_TypeDef *LPUARTx, uint32_t Time)
{
  (((LPUARTx->CR1)) = ((((((LPUARTx->CR1))) & (~((0x1FUL << (21U))))) | (Time << (21U)))));
}
static inline uint32_t LL_LPUART_GetDEAssertionTime(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR1) & ((0x1FUL << (21U)))) >> (21U));
}
static inline void LL_LPUART_EnableDEMode(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR3) |= ((0x1UL << (14U))));
}
static inline void LL_LPUART_DisableDEMode(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR3) &= ~((0x1UL << (14U))));
}
static inline uint32_t LL_LPUART_IsEnabledDEMode(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR3) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline void LL_LPUART_SetDESignalPolarity(USART_TypeDef *LPUARTx, uint32_t Polarity)
{
  (((LPUARTx->CR3)) = ((((((LPUARTx->CR3))) & (~((0x1UL << (15U))))) | (Polarity))));
}
static inline uint32_t LL_LPUART_GetDESignalPolarity(USART_TypeDef *LPUARTx)
{
  return (uint32_t)(((LPUARTx->CR3) & ((0x1UL << (15U)))));
}
static inline uint32_t LL_LPUART_IsActiveFlag_PE(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_FE(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_NE(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_ORE(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_IDLE(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
#define LL_LPUART_IsActiveFlag_RXNE LL_LPUART_IsActiveFlag_RXNE_RXFNE
static inline uint32_t LL_LPUART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_TC(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
#define LL_LPUART_IsActiveFlag_TXE LL_LPUART_IsActiveFlag_TXE_TXFNF
static inline uint32_t LL_LPUART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_nCTS(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_CTS(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_BUSY(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_CM(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (17U)))) == ((0x1UL << (17U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_SBK(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (18U)))) == ((0x1UL << (18U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_RWU(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (19U)))) == ((0x1UL << (19U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_WKUP(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (20U)))) == ((0x1UL << (20U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_TEACK(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (21U)))) == ((0x1UL << (21U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_REACK(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (22U)))) == ((0x1UL << (22U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_TXFE(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (23U)))) == ((0x1UL << (23U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_RXFF(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (24U)))) == ((0x1UL << (24U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_TXFT(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (27U)))) == ((0x1UL << (27U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsActiveFlag_RXFT(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->ISR) & ((0x1UL << (26U)))) == ((0x1UL << (26U)))) ? 1UL : 0UL);
}
static inline void LL_LPUART_ClearFlag_PE(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->ICR) = ((0x1UL << (0U))));
}
static inline void LL_LPUART_ClearFlag_FE(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->ICR) = ((0x1UL << (1U))));
}
static inline void LL_LPUART_ClearFlag_NE(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->ICR) = ((0x1UL << (2U))));
}
static inline void LL_LPUART_ClearFlag_ORE(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->ICR) = ((0x1UL << (3U))));
}
static inline void LL_LPUART_ClearFlag_IDLE(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->ICR) = ((0x1UL << (4U))));
}
static inline void LL_LPUART_ClearFlag_TXFE(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->ICR) = ((0x1UL << (5U))));
}
static inline void LL_LPUART_ClearFlag_TC(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->ICR) = ((0x1UL << (6U))));
}
static inline void LL_LPUART_ClearFlag_nCTS(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->ICR) = ((0x1UL << (9U))));
}
static inline void LL_LPUART_ClearFlag_CM(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->ICR) = ((0x1UL << (17U))));
}
static inline void LL_LPUART_ClearFlag_WKUP(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->ICR) = ((0x1UL << (20U))));
}
static inline void LL_LPUART_EnableIT_IDLE(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) | ((0x1UL << (4U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
#define LL_LPUART_EnableIT_RXNE LL_LPUART_EnableIT_RXNE_RXFNE
static inline void LL_LPUART_EnableIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) | ((0x1UL << (5U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_EnableIT_TC(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) | ((0x1UL << (6U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
#define LL_LPUART_EnableIT_TXE LL_LPUART_EnableIT_TXE_TXFNF
static inline void LL_LPUART_EnableIT_TXE_TXFNF(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) | ((0x1UL << (7U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_EnableIT_PE(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) | ((0x1UL << (8U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_EnableIT_CM(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) | ((0x1UL << (14U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_EnableIT_TXFE(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) | ((0x1UL << (30U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_EnableIT_RXFF(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) | ((0x1UL << (31U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_EnableIT_ERROR(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) | ((0x1UL << (0U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline void LL_LPUART_EnableIT_CTS(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) | ((0x1UL << (10U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline void LL_LPUART_EnableIT_WKUP(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) | ((0x1UL << (22U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline void LL_LPUART_EnableIT_TXFT(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) | ((0x1UL << (23U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline void LL_LPUART_EnableIT_RXFT(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) | ((0x1UL << (28U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableIT_IDLE(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) & ~((0x1UL << (4U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
#define LL_LPUART_DisableIT_RXNE LL_LPUART_DisableIT_RXNE_RXFNE
static inline void LL_LPUART_DisableIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) & ~((0x1UL << (5U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableIT_TC(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) & ~((0x1UL << (6U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
#define LL_LPUART_DisableIT_TXE LL_LPUART_DisableIT_TXE_TXFNF
static inline void LL_LPUART_DisableIT_TXE_TXFNF(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) & ~((0x1UL << (7U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableIT_PE(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) & ~((0x1UL << (8U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableIT_CM(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) & ~((0x1UL << (14U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableIT_TXFE(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) & ~((0x1UL << (30U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableIT_RXFF(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR1)) & ~((0x1UL << (31U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR1))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableIT_ERROR(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) & ~((0x1UL << (0U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableIT_CTS(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) & ~((0x1UL << (10U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableIT_WKUP(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) & ~((0x1UL << (22U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableIT_TXFT(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) & ~((0x1UL << (23U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableIT_RXFT(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) & ~((0x1UL << (28U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline uint32_t LL_LPUART_IsEnabledIT_IDLE(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR1) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
#define LL_LPUART_IsEnabledIT_RXNE LL_LPUART_IsEnabledIT_RXNE_RXFNE
static inline uint32_t LL_LPUART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR1) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsEnabledIT_TC(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR1) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
#define LL_LPUART_IsEnabledIT_TXE LL_LPUART_IsEnabledIT_TXE_TXFNF
static inline uint32_t LL_LPUART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR1) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsEnabledIT_PE(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR1) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsEnabledIT_CM(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR1) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsEnabledIT_TXFE(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR1) & ((0x1UL << (30U)))) == ((0x1UL << (30U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsEnabledIT_RXFF(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR1) & ((0x1UL << (31U)))) == ((0x1UL << (31U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsEnabledIT_ERROR(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR3) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsEnabledIT_CTS(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR3) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsEnabledIT_WKUP(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR3) & ((0x1UL << (22U)))) == ((0x1UL << (22U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsEnabledIT_TXFT(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR3) & ((0x1UL << (23U)))) == ((0x1UL << (23U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_IsEnabledIT_RXFT(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR3) & ((0x1UL << (28U)))) == ((0x1UL << (28U)))) ? 1UL : 0UL);
}
static inline void LL_LPUART_EnableDMAReq_RX(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) | ((0x1UL << (6U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableDMAReq_RX(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) & ~((0x1UL << (6U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline uint32_t LL_LPUART_IsEnabledDMAReq_RX(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR3) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline void LL_LPUART_EnableDMAReq_TX(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) | ((0x1UL << (7U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline void LL_LPUART_DisableDMAReq_TX(USART_TypeDef *LPUARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(LPUARTx->CR3)) & ~((0x1UL << (7U))); } while ((__STREXW(val,(volatile uint32_t *)&(LPUARTx->CR3))) != 0U); } while(0);
}
static inline uint32_t LL_LPUART_IsEnabledDMAReq_TX(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR3) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline void LL_LPUART_EnableDMADeactOnRxErr(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR3) |= ((0x1UL << (13U))));
}
static inline void LL_LPUART_DisableDMADeactOnRxErr(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->CR3) &= ~((0x1UL << (13U))));
}
static inline uint32_t LL_LPUART_IsEnabledDMADeactOnRxErr(USART_TypeDef *LPUARTx)
{
  return ((((LPUARTx->CR3) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_LPUART_DMA_GetRegAddr(USART_TypeDef *LPUARTx, uint32_t Direction)
{
  uint32_t data_reg_addr;
  if (Direction == 0x00000000U)
  {
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
  }
  else
  {
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
  }
  return data_reg_addr;
}
static inline uint8_t LL_LPUART_ReceiveData8(USART_TypeDef *LPUARTx)
{
  return (uint8_t)(((LPUARTx->RDR) & ((0x01FFUL << (0U)))) & 0xFFU);
}
static inline uint16_t LL_LPUART_ReceiveData9(USART_TypeDef *LPUARTx)
{
  return (uint16_t)(((LPUARTx->RDR) & ((0x01FFUL << (0U)))));
}
static inline void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
  LPUARTx->TDR = Value;
}
static inline void LL_LPUART_TransmitData9(USART_TypeDef *LPUARTx, uint16_t Value)
{
  LPUARTx->TDR = Value & 0x1FFUL;
}
static inline void LL_LPUART_RequestBreakSending(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->RQR) |= ((uint16_t)(0x1UL << (1U))));
}
static inline void LL_LPUART_RequestEnterMuteMode(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->RQR) |= ((uint16_t)(0x1UL << (2U))));
}
static inline void LL_LPUART_RequestRxDataFlush(USART_TypeDef *LPUARTx)
{
  ((LPUARTx->RQR) |= ((uint16_t)(0x1UL << (3U))));
}
ErrorStatus LL_LPUART_DeInit(USART_TypeDef *LPUARTx);
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, LL_LPUART_InitTypeDef *LPUART_InitStruct);
void LL_LPUART_StructInit(LL_LPUART_InitTypeDef *LPUART_InitStruct);
#define STM32WBxx_LL_PKA_H 
typedef struct
{
  uint32_t Mode;
} LL_PKA_InitTypeDef;
#define LL_PKA_SR_ADDRERRF PKA_SR_ADDRERRF
#define LL_PKA_SR_RAMERRF PKA_SR_RAMERRF
#define LL_PKA_SR_PROCENDF PKA_SR_PROCENDF
#define LL_PKA_SR_BUSY PKA_SR_BUSY
#define LL_PKA_CR_ADDRERRIE PKA_CR_ADDRERRIE
#define LL_PKA_CR_RAMERRIE PKA_CR_RAMERRIE
#define LL_PKA_CR_PROCENDIE PKA_CR_PROCENDIE
#define LL_PKA_CLRFR_PROCENDFC PKA_CLRFR_PROCENDFC
#define LL_PKA_CLRFR_RAMERRFC PKA_CLRFR_RAMERRFC
#define LL_PKA_CLRFR_ADDRERRFC PKA_CLRFR_ADDRERRFC
#define LL_PKA_MODE_MONTGOMERY_PARAM_MOD_EXP ((uint32_t)0x00000000U)
#define LL_PKA_MODE_MONTGOMERY_PARAM ((uint32_t)0x00000001U)
#define LL_PKA_MODE_MODULAR_EXP ((uint32_t)0x00000002U)
#define LL_PKA_MODE_MONTGOMERY_PARAM_ECC ((uint32_t)0x00000020U)
#define LL_PKA_MODE_ECC_KP_PRIMITIVE ((uint32_t)0x00000022U)
#define LL_PKA_MODE_ECDSA_SIGNATURE ((uint32_t)0x00000024U)
#define LL_PKA_MODE_ECDSA_VERIFICATION ((uint32_t)0x00000026U)
#define LL_PKA_MODE_POINT_CHECK ((uint32_t)0x00000028U)
#define LL_PKA_MODE_RSA_CRT_EXP ((uint32_t)0x00000007U)
#define LL_PKA_MODE_MODULAR_INV ((uint32_t)0x00000008U)
#define LL_PKA_MODE_ARITHMETIC_ADD ((uint32_t)0x00000009U)
#define LL_PKA_MODE_ARITHMETIC_SUB ((uint32_t)0x0000000AU)
#define LL_PKA_MODE_ARITHMETIC_MUL ((uint32_t)0x0000000BU)
#define LL_PKA_MODE_COMPARISON ((uint32_t)0x0000000CU)
#define LL_PKA_MODE_MODULAR_REDUC ((uint32_t)0x0000000DU)
#define LL_PKA_MODE_MODULAR_ADD ((uint32_t)0x0000000EU)
#define LL_PKA_MODE_MODULAR_SUB ((uint32_t)0x0000000FU)
#define LL_PKA_MODE_MONTGOMERY_MUL ((uint32_t)0x00000010U)
#define LL_PKA_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_PKA_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
static inline void LL_PKA_Config(PKA_TypeDef *PKAx, uint32_t Mode)
{
  (((PKAx->CR)) = ((((((PKAx->CR))) & (~(((0x3FUL << (8U)))))) | ((Mode << (8U))))));
}
static inline void LL_PKA_Enable(PKA_TypeDef *PKAx)
{
  ((PKAx->CR) |= ((0x1UL << (0U))));
}
static inline void LL_PKA_Disable(PKA_TypeDef *PKAx)
{
  ((PKAx->CR) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_PKA_IsEnabled(PKA_TypeDef *PKAx)
{
  return ((((PKAx->CR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_PKA_SetMode(PKA_TypeDef *PKAx, uint32_t Mode)
{
  (((PKAx->CR)) = ((((((PKAx->CR))) & (~((0x3FUL << (8U))))) | (Mode << (8U)))));
}
static inline uint32_t LL_PKA_GetMode(PKA_TypeDef *PKAx)
{
  return (uint32_t)(((PKAx->CR) & ((0x3FUL << (8U)))) >> (8U));
}
static inline void LL_PKA_Start(PKA_TypeDef *PKAx)
{
  ((PKAx->CR) |= ((0x1UL << (1U))));
}
static inline void LL_PKA_EnableIT_ADDRERR(PKA_TypeDef *PKAx)
{
  ((PKAx->CR) |= ((0x1UL << (20U))));
}
static inline void LL_PKA_EnableIT_RAMERR(PKA_TypeDef *PKAx)
{
  ((PKAx->CR) |= ((0x1UL << (19U))));
}
static inline void LL_PKA_EnableIT_PROCEND(PKA_TypeDef *PKAx)
{
  ((PKAx->CR) |= ((0x1UL << (17U))));
}
static inline void LL_PKA_DisableIT_ADDERR(PKA_TypeDef *PKAx)
{
  ((PKAx->CR) &= ~((0x1UL << (20U))));
}
static inline void LL_PKA_DisableIT_RAMERR(PKA_TypeDef *PKAx)
{
  ((PKAx->CR) &= ~((0x1UL << (19U))));
}
static inline void LL_PKA_DisableIT_PROCEND(PKA_TypeDef *PKAx)
{
  ((PKAx->CR) &= ~((0x1UL << (17U))));
}
static inline uint32_t LL_PKA_IsEnabledIT_ADDRERR(PKA_TypeDef *PKAx)
{
  return ((((PKAx->CR) & ((0x1UL << (20U)))) == ((0x1UL << (20U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PKA_IsEnabledIT_RAMERR(PKA_TypeDef *PKAx)
{
  return ((((PKAx->CR) & ((0x1UL << (19U)))) == ((0x1UL << (19U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PKA_IsEnabledIT_PROCEND(PKA_TypeDef *PKAx)
{
  return ((((PKAx->CR) & ((0x1UL << (17U)))) == ((0x1UL << (17U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PKA_IsActiveFlag_ADDRERR(PKA_TypeDef *PKAx)
{
  return ((((PKAx->SR) & ((0x1UL << (20U)))) == ((0x1UL << (20U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PKA_IsActiveFlag_RAMERR(PKA_TypeDef *PKAx)
{
  return ((((PKAx->SR) & ((0x1UL << (19U)))) == ((0x1UL << (19U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PKA_IsActiveFlag_PROCEND(PKA_TypeDef *PKAx)
{
  return ((((PKAx->SR) & ((0x1UL << (17U)))) == ((0x1UL << (17U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PKA_IsActiveFlag_BUSY(PKA_TypeDef *PKAx)
{
  return ((((PKAx->SR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline void LL_PKA_ClearFlag_ADDERR(PKA_TypeDef *PKAx)
{
  ((PKAx->CLRFR) |= ((0x1UL << (20U))));
}
static inline void LL_PKA_ClearFlag_RAMERR(PKA_TypeDef *PKAx)
{
  ((PKAx->CLRFR) |= ((0x1UL << (19U))));
}
static inline void LL_PKA_ClearFlag_PROCEND(PKA_TypeDef *PKAx)
{
  ((PKAx->CLRFR) |= ((0x1UL << (17U))));
}
ErrorStatus LL_PKA_DeInit(PKA_TypeDef *PKAx);
ErrorStatus LL_PKA_Init(PKA_TypeDef *PKAx, LL_PKA_InitTypeDef *PKA_InitStruct);
void LL_PKA_StructInit(LL_PKA_InitTypeDef *PKA_InitStruct);
#define STM32WBxx_LL_PWR_H 
#define SMPS_VOLTAGE_CAL_ADDR ((uint32_t*) (0x1FFF7558UL))
#define SMPS_VOLTAGE_CAL_POS (8UL)
#define SMPS_VOLTAGE_CAL (0xFUL << SMPS_VOLTAGE_CAL_POS)
#define SMPS_VOLTAGE_CAL_VOLTAGE_MV (1500UL)
#define SMPS_VOLTAGE_BASE_MV (1200UL)
#define SMPS_VOLTAGE_STEP_MV ( 50UL)
#define LL_PWR_SCR_CWUF PWR_SCR_CWUF
#define LL_PWR_SCR_CWUF5 PWR_SCR_CWUF5
#define LL_PWR_SCR_CWUF4 PWR_SCR_CWUF4
#define LL_PWR_SCR_CWUF3 PWR_SCR_CWUF3
#define LL_PWR_SCR_CWUF2 PWR_SCR_CWUF2
#define LL_PWR_SCR_CWUF1 PWR_SCR_CWUF1
#define LL_PWR_SCR_CC2HF PWR_SCR_CC2HF
#define LL_PWR_SCR_CBLEAF PWR_SCR_CBLEAF
#define LL_PWR_SCR_CCRPEF PWR_SCR_CCRPEF
#define LL_PWR_SCR_C802AF PWR_SCR_C802AF
#define LL_PWR_SCR_C802WUF PWR_SCR_C802WUF
#define LL_PWR_SCR_CBLEWUF PWR_SCR_CBLEWUF
#define LL_PWR_SCR_CBORHF PWR_SCR_CBORHF
#define LL_PWR_SCR_CSMPSFBF PWR_SCR_CSMPSFBF
#define LL_PWR_EXTSCR_CCRPF PWR_EXTSCR_CCRPF
#define LL_PWR_EXTSCR_C2CSSF PWR_EXTSCR_C2CSSF
#define LL_PWR_EXTSCR_C1CSSF PWR_EXTSCR_C1CSSF
#define LL_PWR_SR1_WUFI PWR_SR1_WUFI
#define LL_PWR_SR1_WUF5 PWR_SR1_WUF5
#define LL_PWR_SR1_WUF4 PWR_SR1_WUF4
#define LL_PWR_SR1_WUF3 PWR_SR1_WUF3
#define LL_PWR_SR1_WUF2 PWR_SR1_WUF2
#define LL_PWR_SR1_WUF1 PWR_SR1_WUF1
#define LL_PWR_SR2_PVMO3 PWR_SR2_PVMO3
#define LL_PWR_SR2_PVMO1 PWR_SR2_PVMO1
#define LL_PWR_SR2_PVDO PWR_SR2_PVDO
#define LL_PWR_SR2_VOSF PWR_SR2_VOSF
#define LL_PWR_SR2_REGLPF PWR_SR2_REGLPF
#define LL_PWR_SR2_REGLPS PWR_SR2_REGLPS
#define LL_PWR_FLAG_BORH PWR_SR1_BORHF
#define LL_PWR_FLAG_SMPS PWR_SR2_SMPSF
#define LL_PWR_FLAG_SMPSB PWR_SR2_SMPSBF
#define LL_PWR_FLAG_SMPSFB PWR_SR1_SMPSFB
#define LL_PWR_FLAG_BLEWU PWR_SR1_BLEWUF
#define LL_PWR_FLAG_BLEA PWR_SR1_BLEAF
#define LL_PWR_FLAG_802WU PWR_SR1_802WUF
#define LL_PWR_FLAG_802A PWR_SR1_802AF
#define LL_PWR_FLAG_CRPE PWR_SR1_CRPEF
#define LL_PWR_FLAG_CRP PWR_EXTSCR_CRPF
#define LL_PWR_EXTSCR_C1SBF PWR_EXTSCR_C1SBF
#define LL_PWR_EXTSCR_C1STOPF PWR_EXTSCR_C1STOPF
#define LL_PWR_EXTSCR_C1DS PWR_EXTSCR_C1DS
#define LL_PWR_EXTSCR_C2SBF PWR_EXTSCR_C2SBF
#define LL_PWR_EXTSCR_C2STOPF PWR_EXTSCR_C2STOPF
#define LL_PWR_EXTSCR_C2DS PWR_EXTSCR_C2DS
#define LL_PWR_SR1_C2HF PWR_SR1_C2HF
#define LL_PWR_REGU_VOLTAGE_SCALE1 (PWR_CR1_VOS_0)
#define LL_PWR_REGU_VOLTAGE_SCALE2 (PWR_CR1_VOS_1)
#define LL_PWR_MODE_STOP0 (0x000000000U)
#define LL_PWR_MODE_STOP1 (PWR_CR1_LPMS_0)
#define LL_PWR_MODE_STOP2 (PWR_CR1_LPMS_1)
#define LL_PWR_MODE_STANDBY (PWR_CR1_LPMS_1 | PWR_CR1_LPMS_0)
#define LL_PWR_MODE_SHUTDOWN (PWR_CR1_LPMS_2)
#define LL_PWR_FLASH_LPRUN_MODE_IDLE (0x000000000U)
#define LL_PWR_FLASH_LPRUN_MODE_POWER_DOWN (PWR_CR1_FPDR)
#define LL_PWR_FLASH_SLEEP_MODE_IDLE (0x000000000U)
#define LL_PWR_FLASH_SLEEP_MODE_POWER_DOWN (PWR_CR1_FPDS)
#define LL_PWR_PVM_VDDUSB_1_2V (PWR_CR2_PVME1)
#define LL_PWR_PVM_VDDA_1_62V (PWR_CR2_PVME3)
#define LL_PWR_PVDLEVEL_0 (0x00000000U)
#define LL_PWR_PVDLEVEL_1 (PWR_CR2_PLS_0)
#define LL_PWR_PVDLEVEL_2 (PWR_CR2_PLS_1)
#define LL_PWR_PVDLEVEL_3 (PWR_CR2_PLS_1 | PWR_CR2_PLS_0)
#define LL_PWR_PVDLEVEL_4 (PWR_CR2_PLS_2)
#define LL_PWR_PVDLEVEL_5 (PWR_CR2_PLS_2 | PWR_CR2_PLS_0)
#define LL_PWR_PVDLEVEL_6 (PWR_CR2_PLS_2 | PWR_CR2_PLS_1)
#define LL_PWR_PVDLEVEL_7 (PWR_CR2_PLS_2 | PWR_CR2_PLS_1 | PWR_CR2_PLS_0)
#define LL_PWR_WAKEUP_PIN1 (PWR_CR3_EWUP1)
#define LL_PWR_WAKEUP_PIN2 (PWR_CR3_EWUP2)
#define LL_PWR_WAKEUP_PIN3 (PWR_CR3_EWUP3)
#define LL_PWR_WAKEUP_PIN4 (PWR_CR3_EWUP4)
#define LL_PWR_WAKEUP_PIN5 (PWR_CR3_EWUP5)
#define LL_PWR_BATT_CHARG_RESISTOR_5K (0x00000000U)
#define LL_PWR_BATT_CHARGRESISTOR_1_5K (PWR_CR4_VBRS)
#define LL_PWR_GPIO_A ((uint32_t)(&(PWR->PUCRA)))
#define LL_PWR_GPIO_B ((uint32_t)(&(PWR->PUCRB)))
#define LL_PWR_GPIO_C ((uint32_t)(&(PWR->PUCRC)))
#define LL_PWR_GPIO_D ((uint32_t)(&(PWR->PUCRD)))
#define LL_PWR_GPIO_E ((uint32_t)(&(PWR->PUCRE)))
#define LL_PWR_GPIO_H ((uint32_t)(&(PWR->PUCRH)))
#define LL_PWR_GPIO_BIT_0 (PWR_PUCRC_PC0)
#define LL_PWR_GPIO_BIT_1 (PWR_PUCRC_PC1)
#define LL_PWR_GPIO_BIT_2 (PWR_PUCRC_PC2)
#define LL_PWR_GPIO_BIT_3 (PWR_PUCRC_PC3)
#define LL_PWR_GPIO_BIT_4 (PWR_PUCRC_PC4)
#define LL_PWR_GPIO_BIT_5 (PWR_PUCRC_PC5)
#define LL_PWR_GPIO_BIT_6 (PWR_PUCRC_PC6)
#define LL_PWR_GPIO_BIT_7 (PWR_PUCRC_PC7)
#define LL_PWR_GPIO_BIT_8 (PWR_PUCRC_PC8)
#define LL_PWR_GPIO_BIT_9 (PWR_PUCRC_PC9)
#define LL_PWR_GPIO_BIT_10 (PWR_PUCRC_PC10)
#define LL_PWR_GPIO_BIT_11 (PWR_PUCRC_PC11)
#define LL_PWR_GPIO_BIT_12 (PWR_PUCRC_PC12)
#define LL_PWR_GPIO_BIT_13 (PWR_PUCRC_PC13)
#define LL_PWR_GPIO_BIT_14 (PWR_PUCRC_PC14)
#define LL_PWR_GPIO_BIT_15 (PWR_PUCRC_PC15)
#define LL_PWR_BOR_SYSTEM_RESET (0x00000000U)
#define LL_PWR_BOR_SMPS_FORCE_BYPASS (PWR_CR5_BORHC)
#define LL_PWR_SMPS_BYPASS (PWR_SR2_SMPSBF)
#define LL_PWR_SMPS_STEP_DOWN (PWR_SR2_SMPSF)
#define LL_PWR_SMPS_STARTUP_CURRENT_80MA (0x00000000U)
#define LL_PWR_SMPS_STARTUP_CURRENT_100MA ( PWR_CR5_SMPSSC_0)
#define LL_PWR_SMPS_STARTUP_CURRENT_120MA ( PWR_CR5_SMPSSC_1 )
#define LL_PWR_SMPS_STARTUP_CURRENT_140MA ( PWR_CR5_SMPSSC_1 | PWR_CR5_SMPSSC_0)
#define LL_PWR_SMPS_STARTUP_CURRENT_160MA (PWR_CR5_SMPSSC_2 )
#define LL_PWR_SMPS_STARTUP_CURRENT_180MA (PWR_CR5_SMPSSC_2 | PWR_CR5_SMPSSC_0)
#define LL_PWR_SMPS_STARTUP_CURRENT_200MA (PWR_CR5_SMPSSC_2 | PWR_CR5_SMPSSC_1 )
#define LL_PWR_SMPS_STARTUP_CURRENT_220MA (PWR_CR5_SMPSSC_2 | PWR_CR5_SMPSSC_1 | PWR_CR5_SMPSSC_0)
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V20 (0x00000000U)
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V25 ( PWR_CR5_SMPSVOS_0)
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V30 ( PWR_CR5_SMPSVOS_1 )
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V35 ( PWR_CR5_SMPSVOS_1 | PWR_CR5_SMPSVOS_0)
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40 ( PWR_CR5_SMPSVOS_2 )
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V45 ( PWR_CR5_SMPSVOS_2 | PWR_CR5_SMPSVOS_0)
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 ( PWR_CR5_SMPSVOS_2 | PWR_CR5_SMPSVOS_1 )
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V55 ( PWR_CR5_SMPSVOS_2 | PWR_CR5_SMPSVOS_1 | PWR_CR5_SMPSVOS_0)
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V60 (PWR_CR5_SMPSVOS_3 )
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V65 (PWR_CR5_SMPSVOS_3 | PWR_CR5_SMPSVOS_0)
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V70 (PWR_CR5_SMPSVOS_3 | PWR_CR5_SMPSVOS_1 )
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V75 (PWR_CR5_SMPSVOS_3 | PWR_CR5_SMPSVOS_1 | PWR_CR5_SMPSVOS_0)
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V80 (PWR_CR5_SMPSVOS_3 | PWR_CR5_SMPSVOS_2 )
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85 (PWR_CR5_SMPSVOS_3 | PWR_CR5_SMPSVOS_2 | PWR_CR5_SMPSVOS_0)
#define LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90 (PWR_CR5_SMPSVOS_3 | PWR_CR5_SMPSVOS_2 | PWR_CR5_SMPSVOS_1 )
#define LL_PWR_WriteReg(__REG__,__VALUE__) WRITE_REG(PWR->__REG__, (__VALUE__))
#define LL_PWR_ReadReg(__REG__) READ_REG(PWR->__REG__)
static inline void LL_PWR_EnterLowPowerRunMode(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1) |= ((0x1UL << (14U))));
}
static inline void LL_PWR_ExitLowPowerRunMode(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1) &= ~((0x1UL << (14U))));
}
static inline uint32_t LL_PWR_IsEnabledLowPowerRunMode(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1))) & (~((0x3UL << (9U))))) | (VoltageScaling))));
}
static inline uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1) & ((0x3UL << (9U)))));
}
static inline void LL_PWR_EnableBkUpAccess(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1) |= ((0x1UL << (8U))));
}
static inline void LL_PWR_DisableBkUpAccess(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1) &= ~((0x1UL << (8U))));
}
static inline uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
  (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1))) & (~((0x7UL << (0U))))) | (LowPowerMode))));
}
static inline uint32_t LL_PWR_GetPowerMode(void)
{
  return (uint32_t)(((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1) & ((0x7UL << (0U)))));
}
static inline void LL_PWR_SetFlashPowerModeLPRun(uint32_t FlashLowPowerMode)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1) = (0x0000C1B0UL));
  (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1))) & (~((0x1UL << (4U))))) | (FlashLowPowerMode))));
}
static inline uint32_t LL_PWR_GetFlashPowerModeLPRun(void)
{
  return (uint32_t)(((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1) & ((0x1UL << (4U)))));
}
static inline void LL_PWR_SetFlashPowerModeSleep(uint32_t FlashLowPowerMode)
{
  (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1))) & (~((0x1UL << (5U))))) | (FlashLowPowerMode))));
}
static inline uint32_t LL_PWR_GetFlashPowerModeSleep(void)
{
  return (uint32_t)(((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR1) & ((0x1UL << (5U)))));
}
static inline void LL_PWR_EnableVddUSB(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR2) |= ((0x1UL << (10U))));
}
static inline void LL_PWR_DisableVddUSB(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR2) &= ~((0x1UL << (10U))));
}
static inline uint32_t LL_PWR_IsEnabledVddUSB(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR2) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_EnablePVM(uint32_t PeriphVoltage)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR2) |= (PeriphVoltage));
}
static inline void LL_PWR_DisablePVM(uint32_t PeriphVoltage)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR2) &= ~(PeriphVoltage));
}
static inline uint32_t LL_PWR_IsEnabledPVM(uint32_t PeriphVoltage)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR2) & (PeriphVoltage)) == (PeriphVoltage)) ? 1UL : 0UL);
}
static inline void LL_PWR_SetPVDLevel(uint32_t PVDLevel)
{
  (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR2)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR2))) & (~((0x7UL << (1U))))) | (PVDLevel))));
}
static inline uint32_t LL_PWR_GetPVDLevel(void)
{
  return (uint32_t)(((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR2) & ((0x7UL << (1U)))));
}
static inline void LL_PWR_EnablePVD(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR2) |= ((0x1UL << (0U))));
}
static inline void LL_PWR_DisablePVD(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR2) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_PWR_IsEnabledPVD(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR2) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_EnableInternWU(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) |= ((0x1UL << (15U))));
}
static inline void LL_PWR_DisableInternWU(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) &= ~((0x1UL << (15U))));
}
static inline uint32_t LL_PWR_IsEnabledInternWU(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_EnablePUPDCfg(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) |= ((0x1UL << (10U))));
}
static inline void LL_PWR_DisablePUPDCfg(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) &= ~((0x1UL << (10U))));
}
static inline uint32_t LL_PWR_IsEnabledPUPDCfg(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_EnableSRAM2Retention(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) |= ((0x1UL << (9U))));
}
static inline void LL_PWR_DisableSRAM2Retention(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) &= ~((0x1UL << (9U))));
}
static inline uint32_t LL_PWR_IsEnabledSRAM2Retention(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_EnableWakeUpPin(uint32_t WakeUpPin)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) |= (WakeUpPin));
}
static inline void LL_PWR_DisableWakeUpPin(uint32_t WakeUpPin)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) &= ~(WakeUpPin));
}
static inline uint32_t LL_PWR_IsEnabledWakeUpPin(uint32_t WakeUpPin)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) & (WakeUpPin)) == (WakeUpPin)) ? 1UL : 0UL);
}
static inline void LL_PWR_SetBattChargResistor(uint32_t Resistor)
{
  (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR4)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR4))) & (~((0x1UL << (9U))))) | (Resistor))));
}
static inline uint32_t LL_PWR_GetBattChargResistor(void)
{
  return (uint32_t)(((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR4) & ((0x1UL << (9U)))));
}
static inline void LL_PWR_EnableBatteryCharging(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR4) |= ((0x1UL << (8U))));
}
static inline void LL_PWR_DisableBatteryCharging(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR4) &= ~((0x1UL << (8U))));
}
static inline uint32_t LL_PWR_IsEnabledBatteryCharging(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR4) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_SetWakeUpPinPolarityLow(uint32_t WakeUpPin)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR4) |= (WakeUpPin));
}
static inline void LL_PWR_SetWakeUpPinPolarityHigh(uint32_t WakeUpPin)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR4) &= ~(WakeUpPin));
}
static inline uint32_t LL_PWR_IsWakeUpPinPolarityLow(uint32_t WakeUpPin)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR4) & (WakeUpPin)) == (WakeUpPin)) ? 1UL : 0UL);
}
static inline void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
  ((*((volatile uint32_t *)GPIO)) |= (GPIONumber));
}
static inline void LL_PWR_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
  ((*((volatile uint32_t *)GPIO)) &= ~(GPIONumber));
}
static inline uint32_t LL_PWR_IsEnabledGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
  return ((((*((volatile uint32_t *)GPIO)) & (GPIONumber)) == (GPIONumber)) ? 1UL : 0UL);
}
static inline void LL_PWR_EnableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
  ((*((volatile uint32_t *)(GPIO + 4UL))) |= (GPIONumber));
}
static inline void LL_PWR_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
  ((*((volatile uint32_t *)(GPIO + 4UL))) &= ~(GPIONumber));
}
static inline uint32_t LL_PWR_IsEnabledGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
  return ((((*((volatile uint32_t *)(GPIO + 4UL))) & (GPIONumber)) == (GPIONumber)) ? 1UL : 0UL);
}
static inline void LL_PWR_SetBORConfig(uint32_t BORConfiguration)
{
  (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5))) & (~((0x1UL << (8U))))) | (BORConfiguration))));
}
static inline uint32_t LL_PWR_GetBORConfig(void)
{
  return (uint32_t)(((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5) & ((0x1UL << (8U)))));
}
static inline void LL_PWR_SMPS_SetMode(uint32_t OperatingMode)
{
  (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5))) & (~((0x1UL << (15U))))) | ((OperatingMode & (0x1UL << (1U))) << ((15U) - (1U))))));
}
static inline uint32_t LL_PWR_SMPS_GetMode(void)
{
  uint32_t OperatingMode = (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5) & ((0x1UL << (15U)))) >> ((15U) - (1U)));
  OperatingMode = (OperatingMode | ((~OperatingMode >> 1U) & (0x1UL << (0U))));
  return OperatingMode;
}
static inline uint32_t LL_PWR_SMPS_GetEffectiveMode(void)
{
  return (uint32_t)(((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR2) & (((0x1UL << (1U)) | (0x1UL << (0U))))));
}
static inline void LL_PWR_SMPS_Enable(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5) |= ((0x1UL << (15U))));
}
static inline void LL_PWR_SMPS_Disable(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5) &= ~((0x1UL << (15U))));
}
static inline uint32_t LL_PWR_SMPS_IsEnabled(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
  (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5))) & (~((0x7UL << (4U))))) | (StartupCurrent))));
}
static inline uint32_t LL_PWR_SMPS_GetStartupCurrent(void)
{
  return (uint32_t)(((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5) & ((0x7UL << (4U)))));
}
static inline void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
  volatile const uint32_t OutputVoltageLevel_calibration = (((*((uint32_t*) (0x1FFF7558UL))) & (0xFUL << (8UL))) >> (8UL));
  int32_t TrimmingSteps;
  int32_t OutputVoltageLevelTrimmed;
  if(OutputVoltageLevel_calibration == 0UL)
  {
    (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5))) & (~((0xFUL << (0U))))) | (OutputVoltageLevel))));
  }
  else
  {
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(( (0x04U << (0U)) | (0x02U << (0U)) ) >> (0U)));
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> (0U))) + (int32_t)TrimmingSteps);
    if(OutputVoltageLevelTrimmed < 0)
    {
      OutputVoltageLevelTrimmed = 0;
    }
    else
    {
      if(OutputVoltageLevelTrimmed > (int32_t)(0xFUL << (0U)))
      {
        OutputVoltageLevelTrimmed = (int32_t)(0xFUL << (0U));
      }
    }
    (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5))) & (~((0xFUL << (0U))))) | ((uint32_t)OutputVoltageLevelTrimmed))));
  }
}
static inline uint32_t LL_PWR_SMPS_GetOutputVoltageLevel(void)
{
  volatile const uint32_t OutputVoltageLevel_calibration = (((*((uint32_t*) (0x1FFF7558UL))) & (0xFUL << (8UL))) >> (8UL));
  int32_t TrimmingSteps;
  int32_t OutputVoltageLevelTrimmed;
  if(OutputVoltageLevel_calibration == 0UL)
  {
    return (uint32_t)(((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5) & ((0xFUL << (0U)))));
  }
  else
  {
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(( (0x04U << (0U)) | (0x02U << (0U)) ) >> (0U)));
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR5) & ((0xFUL << (0U))))) - TrimmingSteps);
    if(OutputVoltageLevelTrimmed < 0)
    {
      OutputVoltageLevelTrimmed = (int32_t)(0x00000000U);
    }
    else
    {
      if(OutputVoltageLevelTrimmed > (int32_t)(0xFUL << (0U)))
      {
        OutputVoltageLevelTrimmed = (int32_t)((0x08U << (0U)) | (0x04U << (0U)) | (0x02U << (0U)) );
      }
    }
    return (uint32_t)OutputVoltageLevelTrimmed;
  }
}
static inline void LL_PWR_EnableBootC2(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR4) |= ((0x1UL << (15U))));
}
static inline void LL_PWR_DisableBootC2(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR4) &= ~((0x1UL << (15U))));
}
static inline uint32_t LL_PWR_IsEnabledBootC2(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR4) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
  (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1))) & (~((0x7UL << (0U))))) | (LowPowerMode))));
}
static inline uint32_t LL_C2_PWR_GetPowerMode(void)
{
  return (uint32_t)(((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1) & ((0x7UL << (0U)))));
}
static inline void LL_C2_PWR_SetFlashPowerModeLPRun(uint32_t FlashLowPowerMode)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1) = (0x0000C1B0UL));
  (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1))) & (~((0x1UL << (4U))))) | (FlashLowPowerMode))));
}
static inline uint32_t LL_C2_PWR_GetFlashPowerModeLPRun(void)
{
  return (uint32_t)(((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1) & ((0x1UL << (4U)))));
}
static inline void LL_C2_PWR_SetFlashPowerModeSleep(uint32_t FlashLowPowerMode)
{
  (((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1)) = ((((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1))) & (~((0x1UL << (5U))))) | (FlashLowPowerMode))));
}
static inline uint32_t LL_C2_PWR_GetFlashPowerModeSleep(void)
{
  return (uint32_t)(((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1) & ((0x1UL << (5U)))));
}
static inline void LL_C2_PWR_EnableInternWU(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) |= ((0x1UL << (15U))));
}
static inline void LL_C2_PWR_DisableInternWU(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) &= ~((0x1UL << (15U))));
}
static inline uint32_t LL_C2_PWR_IsEnabledInternWU(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline void LL_C2_PWR_EnableWakeUpPin(uint32_t WakeUpPin)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) |= (WakeUpPin));
}
static inline void LL_C2_PWR_DisableWakeUpPin(uint32_t WakeUpPin)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) &= ~(WakeUpPin));
}
static inline uint32_t LL_C2_PWR_IsEnabledWakeUpPin(uint32_t WakeUpPin)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) & (WakeUpPin)) == (WakeUpPin)) ? 1UL : 0UL);
}
static inline void LL_C2_PWR_EnablePUPDCfg(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) |= ((0x1UL << (12U))));
}
static inline void LL_C2_PWR_DisablePUPDCfg(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) &= ~((0x1UL << (12U))));
}
static inline uint32_t LL_C2_PWR_IsEnabledPUPDCfg(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}
static inline void LL_C2_PWR_WakeUp_BLE(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1) |= ((0x1UL << (14U))));
}
static inline uint32_t LL_C2_PWR_IsWokenUp_BLE(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline void LL_C2_PWR_WakeUp_802_15_4(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1) |= ((0x1UL << (15U))));
}
static inline uint32_t LL_C2_PWR_IsWokenUp_802_15_4(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR1) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_InternWU(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_WU5(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_WU4(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_WU3(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_WU2(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_WU1(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_ClearFlag_WU(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1FUL << (0U))));
}
static inline void LL_PWR_ClearFlag_WU5(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1UL << (4U))));
}
static inline void LL_PWR_ClearFlag_WU4(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1UL << (3U))));
}
static inline void LL_PWR_ClearFlag_WU3(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1UL << (2U))));
}
static inline void LL_PWR_ClearFlag_WU2(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1UL << (1U))));
}
static inline void LL_PWR_ClearFlag_WU1(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1UL << (0U))));
}
static inline uint32_t LL_PWR_IsActiveFlag_PVMO3(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR2) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_PVMO1(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR2) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_PVDO(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR2) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR2) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_REGLPF(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR2) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_REGLPS(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR2) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_BORH(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_ClearFlag_BORH(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1UL << (8U))));
}
static inline uint32_t LL_PWR_IsActiveFlag_SMPSFB(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_ClearFlag_SMPSFB(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1UL << (7U))));
}
static inline uint32_t LL_PWR_IsActiveFlag_BLEWU(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_802WU(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_BLEA(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_802A(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_CRPE(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_CRP(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->EXTSCR) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_ClearFlag_BLEWU(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1UL << (9U))));
}
static inline void LL_PWR_ClearFlag_802WU(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1UL << (10U))));
}
static inline void LL_PWR_ClearFlag_BLEA(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1UL << (12U))));
}
static inline void LL_PWR_ClearFlag_802A(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1UL << (13U))));
}
static inline void LL_PWR_ClearFlag_CRPE(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1UL << (11U))));
}
static inline void LL_PWR_ClearFlag_CRP(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->EXTSCR) = ((0x1UL << (2U))));
}
static inline uint32_t LL_PWR_IsActiveFlag_C2H(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SR1) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_C1STOP(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->EXTSCR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_C1SB(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->EXTSCR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_C1DS(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->EXTSCR) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_C2STOP(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->EXTSCR) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->EXTSCR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->EXTSCR) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_ClearFlag_C2H(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->SCR) = ((0x1UL << (14U))));
}
static inline void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->EXTSCR) = ((0x1UL << (0U))));
}
static inline void LL_PWR_ClearFlag_C2STOP_C2STB(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->EXTSCR) = ((0x1UL << (1U))));
}
static inline void LL_PWR_EnableIT_BORH_SMPSFB(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) |= ((0x1UL << (8U))));
}
static inline void LL_PWR_DisableIT_BORH_SMPSFB(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) &= ~((0x1UL << (8U))));
}
static inline uint32_t LL_PWR_IsEnabledIT_BORH_SMPSFB(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_EnableIT_BLEA(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) |= ((0x1UL << (12U))));
}
static inline void LL_PWR_EnableIT_802A(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) |= ((0x1UL << (13U))));
}
static inline void LL_PWR_DisableIT_BLEA(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) &= ~((0x1UL << (12U))));
}
static inline void LL_PWR_DisableIT_802A(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) &= ~((0x1UL << (13U))));
}
static inline uint32_t LL_PWR_IsEnabledIT_BLEA(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_PWR_IsEnabledIT_802A(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_EnableIT_CRPE(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) |= ((0x1UL << (11U))));
}
static inline void LL_PWR_DisableIT_CRPE(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) &= ~((0x1UL << (11U))));
}
static inline uint32_t LL_PWR_IsEnabledIT_CRPE(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}
static inline void LL_PWR_EnableIT_HoldCPU2(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) |= ((0x1UL << (14U))));
}
static inline void LL_PWR_DisableIT_HoldCPU2(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) &= ~((0x1UL << (14U))));
}
static inline uint32_t LL_PWR_IsEnabledIT_HoldCPU2(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->CR3) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline void LL_C2_PWR_EnableIT_BLEWU(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) |= ((0x1UL << (9U))));
}
static inline void LL_C2_PWR_EnableIT_802WU(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) |= ((0x1UL << (10U))));
}
static inline void LL_C2_PWR_DisableIT_BLEWU(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) &= ~((0x1UL << (9U))));
}
static inline void LL_C2_PWR_DisableIT_802WU(void)
{
  ((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) &= ~((0x1UL << (10U))));
}
static inline uint32_t LL_C2_PWR_IsEnabledIT_BLEWU(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_C2_PWR_IsEnabledIT_802WU(void)
{
  return ((((((PWR_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000400UL))->C2CR3) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
ErrorStatus LL_PWR_DeInit(void);
#define STM32WBxx_LL_RCC_H 
#define HSE_CONTROL_UNLOCK_KEY 0xCAFECAFEU
typedef struct
{
  uint32_t SYSCLK_Frequency;
  uint32_t HCLK1_Frequency;
  uint32_t HCLK2_Frequency;
  uint32_t HCLK4_Frequency;
  uint32_t HCLK5_Frequency;
  uint32_t PCLK1_Frequency;
  uint32_t PCLK2_Frequency;
} LL_RCC_ClocksTypeDef;
#define HSE_VALUE 32000000U
#define HSI_VALUE 16000000U
#define LSE_VALUE 32768U
#define LSI_VALUE 32000U
#define HSI48_VALUE 48000000U
#define LL_RCC_CICR_LSI1RDYC RCC_CICR_LSI1RDYC
#define LL_RCC_CICR_LSI2RDYC RCC_CICR_LSI2RDYC
#define LL_RCC_CICR_LSERDYC RCC_CICR_LSERDYC
#define LL_RCC_CICR_MSIRDYC RCC_CICR_MSIRDYC
#define LL_RCC_CICR_HSIRDYC RCC_CICR_HSIRDYC
#define LL_RCC_CICR_HSERDYC RCC_CICR_HSERDYC
#define LL_RCC_CICR_PLLRDYC RCC_CICR_PLLRDYC
#define LL_RCC_CICR_HSI48RDYC RCC_CICR_HSI48RDYC
#define LL_RCC_CICR_PLLSAI1RDYC RCC_CICR_PLLSAI1RDYC
#define LL_RCC_CICR_LSECSSC RCC_CICR_LSECSSC
#define LL_RCC_CICR_CSSC RCC_CICR_CSSC
#define LL_RCC_CIFR_LSI1RDYF RCC_CIFR_LSI1RDYF
#define LL_RCC_CIFR_LSI2RDYF RCC_CIFR_LSI2RDYF
#define LL_RCC_CIFR_LSERDYF RCC_CIFR_LSERDYF
#define LL_RCC_CIFR_MSIRDYF RCC_CIFR_MSIRDYF
#define LL_RCC_CIFR_HSIRDYF RCC_CIFR_HSIRDYF
#define LL_RCC_CIFR_HSERDYF RCC_CIFR_HSERDYF
#define LL_RCC_CIFR_PLLRDYF RCC_CIFR_PLLRDYF
#define LL_RCC_CIFR_HSI48RDYF RCC_CIFR_HSI48RDYF
#define LL_RCC_CIFR_PLLSAI1RDYF RCC_CIFR_PLLSAI1RDYF
#define LL_RCC_CIFR_LSECSSF RCC_CIFR_LSECSSF
#define LL_RCC_CIFR_CSSF RCC_CIFR_CSSF
#define LL_RCC_CSR_LPWRRSTF RCC_CSR_LPWRRSTF
#define LL_RCC_CSR_OBLRSTF RCC_CSR_OBLRSTF
#define LL_RCC_CSR_PINRSTF RCC_CSR_PINRSTF
#define LL_RCC_CSR_SFTRSTF RCC_CSR_SFTRSTF
#define LL_RCC_CSR_IWDGRSTF RCC_CSR_IWDGRSTF
#define LL_RCC_CSR_WWDGRSTF RCC_CSR_WWDGRSTF
#define LL_RCC_CSR_BORRSTF RCC_CSR_BORRSTF
#define LL_RCC_CIER_LSI1RDYIE RCC_CIER_LSI1RDYIE
#define LL_RCC_CIER_LSI2RDYIE RCC_CIER_LSI2RDYIE
#define LL_RCC_CIER_LSERDYIE RCC_CIER_LSERDYIE
#define LL_RCC_CIER_MSIRDYIE RCC_CIER_MSIRDYIE
#define LL_RCC_CIER_HSIRDYIE RCC_CIER_HSIRDYIE
#define LL_RCC_CIER_HSERDYIE RCC_CIER_HSERDYIE
#define LL_RCC_CIER_PLLRDYIE RCC_CIER_PLLRDYIE
#define LL_RCC_CIER_HSI48RDYIE RCC_CIER_HSI48RDYIE
#define LL_RCC_CIER_PLLSAI1RDYIE RCC_CIER_PLLSAI1RDYIE
#define LL_RCC_CIER_LSECSSIE RCC_CIER_LSECSSIE
#define LL_RCC_LSEDRIVE_LOW 0x00000000U
#define LL_RCC_LSEDRIVE_MEDIUMLOW RCC_BDCR_LSEDRV_0
#define LL_RCC_LSEDRIVE_MEDIUMHIGH RCC_BDCR_LSEDRV_1
#define LL_RCC_LSEDRIVE_HIGH RCC_BDCR_LSEDRV
#define LL_RCC_MSIRANGE_0 RCC_CR_MSIRANGE_0
#define LL_RCC_MSIRANGE_1 RCC_CR_MSIRANGE_1
#define LL_RCC_MSIRANGE_2 RCC_CR_MSIRANGE_2
#define LL_RCC_MSIRANGE_3 RCC_CR_MSIRANGE_3
#define LL_RCC_MSIRANGE_4 RCC_CR_MSIRANGE_4
#define LL_RCC_MSIRANGE_5 RCC_CR_MSIRANGE_5
#define LL_RCC_MSIRANGE_6 RCC_CR_MSIRANGE_6
#define LL_RCC_MSIRANGE_7 RCC_CR_MSIRANGE_7
#define LL_RCC_MSIRANGE_8 RCC_CR_MSIRANGE_8
#define LL_RCC_MSIRANGE_9 RCC_CR_MSIRANGE_9
#define LL_RCC_MSIRANGE_10 RCC_CR_MSIRANGE_10
#define LL_RCC_MSIRANGE_11 RCC_CR_MSIRANGE_11
#define LL_RCC_HSE_CURRENTMAX_0 0x000000000U
#define LL_RCC_HSE_CURRENTMAX_1 RCC_HSECR_HSEGMC0
#define LL_RCC_HSE_CURRENTMAX_2 RCC_HSECR_HSEGMC1
#define LL_RCC_HSE_CURRENTMAX_3 (RCC_HSECR_HSEGMC1|RCC_HSECR_HSEGMC0)
#define LL_RCC_HSE_CURRENTMAX_4 RCC_HSECR_HSEGMC2
#define LL_RCC_HSE_CURRENTMAX_5 (RCC_HSECR_HSEGMC2|RCC_HSECR_HSEGMC0)
#define LL_RCC_HSE_CURRENTMAX_6 (RCC_HSECR_HSEGMC2|RCC_HSECR_HSEGMC1)
#define LL_RCC_HSE_CURRENTMAX_7 (RCC_HSECR_HSEGMC2|RCC_HSECR_HSEGMC1|RCC_HSECR_HSEGMC0)
#define LL_RCC_HSEAMPTHRESHOLD_1_2 (0x000000000U)
#define LL_RCC_HSEAMPTHRESHOLD_3_4 RCC_HSECR_HSES
#define LL_RCC_LSCO_CLKSOURCE_LSI 0x00000000U
#define LL_RCC_LSCO_CLKSOURCE_LSE RCC_BDCR_LSCOSEL
#define LL_RCC_SYS_CLKSOURCE_MSI 0x00000000U
#define LL_RCC_SYS_CLKSOURCE_HSI RCC_CFGR_SW_0
#define LL_RCC_SYS_CLKSOURCE_HSE RCC_CFGR_SW_1
#define LL_RCC_SYS_CLKSOURCE_PLL (RCC_CFGR_SW_1 | RCC_CFGR_SW_0)
#define LL_RCC_SYS_CLKSOURCE_STATUS_MSI 0x00000000U
#define LL_RCC_SYS_CLKSOURCE_STATUS_HSI RCC_CFGR_SWS_0
#define LL_RCC_SYS_CLKSOURCE_STATUS_HSE RCC_CFGR_SWS_1
#define LL_RCC_SYS_CLKSOURCE_STATUS_PLL (RCC_CFGR_SWS_1 | RCC_CFGR_SWS_0)
#define LL_RCC_RF_CLKSOURCE_HSI 0x00000000U
#define LL_RCC_RF_CLKSOURCE_HSE_DIV2 RCC_EXTCFGR_RFCSS
#define LL_RCC_SYSCLK_DIV_1 0x00000000U
#define LL_RCC_SYSCLK_DIV_2 RCC_CFGR_HPRE_3
#define LL_RCC_SYSCLK_DIV_3 RCC_CFGR_HPRE_0
#define LL_RCC_SYSCLK_DIV_4 (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_0)
#define LL_RCC_SYSCLK_DIV_5 RCC_CFGR_HPRE_1
#define LL_RCC_SYSCLK_DIV_6 (RCC_CFGR_HPRE_2 | RCC_CFGR_HPRE_0)
#define LL_RCC_SYSCLK_DIV_8 (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_1)
#define LL_RCC_SYSCLK_DIV_10 (RCC_CFGR_HPRE_2 | RCC_CFGR_HPRE_1)
#define LL_RCC_SYSCLK_DIV_16 (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_1 | RCC_CFGR_HPRE_0)
#define LL_RCC_SYSCLK_DIV_32 (RCC_CFGR_HPRE_2 | RCC_CFGR_HPRE_1 | RCC_CFGR_HPRE_0)
#define LL_RCC_SYSCLK_DIV_64 (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_2)
#define LL_RCC_SYSCLK_DIV_128 (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_2 | RCC_CFGR_HPRE_0)
#define LL_RCC_SYSCLK_DIV_256 (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_2 | RCC_CFGR_HPRE_1)
#define LL_RCC_SYSCLK_DIV_512 (RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_2 | RCC_CFGR_HPRE_1 | RCC_CFGR_HPRE_0)
#define LL_RCC_APB1_DIV_1 0x00000000U
#define LL_RCC_APB1_DIV_2 RCC_CFGR_PPRE1_2
#define LL_RCC_APB1_DIV_4 (RCC_CFGR_PPRE1_2 | RCC_CFGR_PPRE1_0)
#define LL_RCC_APB1_DIV_8 (RCC_CFGR_PPRE1_2 | RCC_CFGR_PPRE1_1)
#define LL_RCC_APB1_DIV_16 (RCC_CFGR_PPRE1_2 | RCC_CFGR_PPRE1_1 | RCC_CFGR_PPRE1_0)
#define LL_RCC_APB2_DIV_1 0x00000000U
#define LL_RCC_APB2_DIV_2 RCC_CFGR_PPRE2_2
#define LL_RCC_APB2_DIV_4 (RCC_CFGR_PPRE2_2 | RCC_CFGR_PPRE2_0)
#define LL_RCC_APB2_DIV_8 (RCC_CFGR_PPRE2_2 | RCC_CFGR_PPRE2_1)
#define LL_RCC_APB2_DIV_16 (RCC_CFGR_PPRE2_2 | RCC_CFGR_PPRE2_1 | RCC_CFGR_PPRE2_0)
#define LL_RCC_STOP_WAKEUPCLOCK_MSI 0x00000000U
#define LL_RCC_STOP_WAKEUPCLOCK_HSI RCC_CFGR_STOPWUCK
#define LL_RCC_MCO1SOURCE_NOCLOCK 0x00000000U
#define LL_RCC_MCO1SOURCE_SYSCLK RCC_CFGR_MCOSEL_0
#define LL_RCC_MCO1SOURCE_MSI RCC_CFGR_MCOSEL_1
#define LL_RCC_MCO1SOURCE_HSI (RCC_CFGR_MCOSEL_0| RCC_CFGR_MCOSEL_1)
#define LL_RCC_MCO1SOURCE_HSE RCC_CFGR_MCOSEL_2
#define LL_RCC_MCO1SOURCE_PLLCLK (RCC_CFGR_MCOSEL_0|RCC_CFGR_MCOSEL_2)
#define LL_RCC_MCO1SOURCE_LSI1 (RCC_CFGR_MCOSEL_1|RCC_CFGR_MCOSEL_2)
#define LL_RCC_MCO1SOURCE_LSI2 (RCC_CFGR_MCOSEL_0|RCC_CFGR_MCOSEL_1|RCC_CFGR_MCOSEL_2)
#define LL_RCC_MCO1SOURCE_LSE RCC_CFGR_MCOSEL_3
#define LL_RCC_MCO1SOURCE_HSI48 (RCC_CFGR_MCOSEL_0|RCC_CFGR_MCOSEL_3)
#define LL_RCC_MCO1SOURCE_HSE_BEFORE_STAB (RCC_CFGR_MCOSEL_2|RCC_CFGR_MCOSEL_3)
#define LL_RCC_MCO1_DIV_1 0x00000000U
#define LL_RCC_MCO1_DIV_2 RCC_CFGR_MCOPRE_0
#define LL_RCC_MCO1_DIV_4 RCC_CFGR_MCOPRE_1
#define LL_RCC_MCO1_DIV_8 (RCC_CFGR_MCOPRE_1 | RCC_CFGR_MCOPRE_0)
#define LL_RCC_MCO1_DIV_16 RCC_CFGR_MCOPRE_2
#define LL_RCC_SMPS_CLKSOURCE_HSI 0x00000000U
#define LL_RCC_SMPS_CLKSOURCE_MSI RCC_SMPSCR_SMPSSEL_0
#define LL_RCC_SMPS_CLKSOURCE_HSE RCC_SMPSCR_SMPSSEL_1
#define LL_RCC_SMPS_CLKSOURCE_STATUS_HSI 0x00000000U
#define LL_RCC_SMPS_CLKSOURCE_STATUS_MSI RCC_SMPSCR_SMPSSWS_0
#define LL_RCC_SMPS_CLKSOURCE_STATUS_HSE RCC_SMPSCR_SMPSSWS_1
#define LL_RCC_SMPS_CLKSOURCE_STATUS_NO_CLOCK (RCC_SMPSCR_SMPSSWS_0|RCC_SMPSCR_SMPSSWS_1)
#define LL_RCC_SMPS_DIV_0 (0x00000000U)
#define LL_RCC_SMPS_DIV_1 RCC_SMPSCR_SMPSDIV_0
#define LL_RCC_SMPS_DIV_2 RCC_SMPSCR_SMPSDIV_1
#define LL_RCC_SMPS_DIV_3 (RCC_SMPSCR_SMPSDIV_0|RCC_SMPSCR_SMPSDIV_1)
#define LL_RCC_PERIPH_FREQUENCY_NO 0x00000000U
#define LL_RCC_PERIPH_FREQUENCY_NA 0xFFFFFFFFU
#define LL_RCC_USART1_CLKSOURCE_PCLK2 0x00000000U
#define LL_RCC_USART1_CLKSOURCE_SYSCLK RCC_CCIPR_USART1SEL_0
#define LL_RCC_USART1_CLKSOURCE_HSI RCC_CCIPR_USART1SEL_1
#define LL_RCC_USART1_CLKSOURCE_LSE RCC_CCIPR_USART1SEL
#define LL_RCC_LPUART1_CLKSOURCE_PCLK1 0x00000000U
#define LL_RCC_LPUART1_CLKSOURCE_SYSCLK RCC_CCIPR_LPUART1SEL_0
#define LL_RCC_LPUART1_CLKSOURCE_HSI RCC_CCIPR_LPUART1SEL_1
#define LL_RCC_LPUART1_CLKSOURCE_LSE RCC_CCIPR_LPUART1SEL
#define LL_RCC_I2C1_CLKSOURCE_PCLK1 (uint32_t)((RCC_CCIPR_I2C1SEL << 4) | (0x00000000U >> 4))
#define LL_RCC_I2C1_CLKSOURCE_SYSCLK (uint32_t)((RCC_CCIPR_I2C1SEL << 4) | (RCC_CCIPR_I2C1SEL_0 >> 4))
#define LL_RCC_I2C1_CLKSOURCE_HSI (uint32_t)((RCC_CCIPR_I2C1SEL << 4) | (RCC_CCIPR_I2C1SEL_1 >> 4))
#define LL_RCC_I2C3_CLKSOURCE_PCLK1 (uint32_t)((RCC_CCIPR_I2C3SEL << 4) | (0x00000000U >> 4))
#define LL_RCC_I2C3_CLKSOURCE_SYSCLK (uint32_t)((RCC_CCIPR_I2C3SEL << 4) | (RCC_CCIPR_I2C3SEL_0 >> 4))
#define LL_RCC_I2C3_CLKSOURCE_HSI (uint32_t)((RCC_CCIPR_I2C3SEL << 4) | (RCC_CCIPR_I2C3SEL_1 >> 4))
#define LL_RCC_LPTIM1_CLKSOURCE_PCLK1 (uint32_t)(RCC_CCIPR_LPTIM1SEL | (0x00000000U >> 16))
#define LL_RCC_LPTIM1_CLKSOURCE_LSI (uint32_t)(RCC_CCIPR_LPTIM1SEL | (RCC_CCIPR_LPTIM1SEL_0 >> 16))
#define LL_RCC_LPTIM1_CLKSOURCE_HSI (uint32_t)(RCC_CCIPR_LPTIM1SEL | (RCC_CCIPR_LPTIM1SEL_1 >> 16))
#define LL_RCC_LPTIM1_CLKSOURCE_LSE (uint32_t)(RCC_CCIPR_LPTIM1SEL | (RCC_CCIPR_LPTIM1SEL >> 16))
#define LL_RCC_LPTIM2_CLKSOURCE_PCLK1 (uint32_t)(RCC_CCIPR_LPTIM2SEL | (0x00000000U >> 16))
#define LL_RCC_LPTIM2_CLKSOURCE_LSI (uint32_t)(RCC_CCIPR_LPTIM2SEL | (RCC_CCIPR_LPTIM2SEL_0 >> 16))
#define LL_RCC_LPTIM2_CLKSOURCE_HSI (uint32_t)(RCC_CCIPR_LPTIM2SEL | (RCC_CCIPR_LPTIM2SEL_1 >> 16))
#define LL_RCC_LPTIM2_CLKSOURCE_LSE (uint32_t)(RCC_CCIPR_LPTIM2SEL | (RCC_CCIPR_LPTIM2SEL >> 16))
#define LL_RCC_SAI1_CLKSOURCE_PLLSAI1 0x00000000U
#define LL_RCC_SAI1_CLKSOURCE_PLL RCC_CCIPR_SAI1SEL_0
#define LL_RCC_SAI1_CLKSOURCE_HSI RCC_CCIPR_SAI1SEL_1
#define LL_RCC_SAI1_CLKSOURCE_PIN RCC_CCIPR_SAI1SEL
#define LL_RCC_CLK48_CLKSOURCE_HSI48 0x00000000U
#define LL_RCC_CLK48_CLKSOURCE_PLLSAI1 RCC_CCIPR_CLK48SEL_0
#define LL_RCC_CLK48_CLKSOURCE_PLL RCC_CCIPR_CLK48SEL_1
#define LL_RCC_CLK48_CLKSOURCE_MSI RCC_CCIPR_CLK48SEL
#define LL_RCC_USB_CLKSOURCE_HSI48 LL_RCC_CLK48_CLKSOURCE_HSI48
#define LL_RCC_USB_CLKSOURCE_PLLSAI1 LL_RCC_CLK48_CLKSOURCE_PLLSAI1
#define LL_RCC_USB_CLKSOURCE_PLL LL_RCC_CLK48_CLKSOURCE_PLL
#define LL_RCC_USB_CLKSOURCE_MSI LL_RCC_CLK48_CLKSOURCE_MSI
#define LL_RCC_ADC_CLKSOURCE_NONE 0x00000000U
#define LL_RCC_ADC_CLKSOURCE_PLLSAI1 RCC_CCIPR_ADCSEL_0
#define LL_RCC_ADC_CLKSOURCE_PLL RCC_CCIPR_ADCSEL_1
#define LL_RCC_ADC_CLKSOURCE_SYSCLK RCC_CCIPR_ADCSEL
#define LL_RCC_RNG_CLKSOURCE_CLK48 0x00000000U
#define LL_RCC_RNG_CLKSOURCE_LSI RCC_CCIPR_RNGSEL_0
#define LL_RCC_RNG_CLKSOURCE_LSE RCC_CCIPR_RNGSEL_1
#define LL_RCC_USART1_CLKSOURCE RCC_CCIPR_USART1SEL
#define LL_RCC_LPUART1_CLKSOURCE RCC_CCIPR_LPUART1SEL
#define LL_RCC_I2C1_CLKSOURCE RCC_CCIPR_I2C1SEL
#define LL_RCC_I2C3_CLKSOURCE RCC_CCIPR_I2C3SEL
#define LL_RCC_LPTIM1_CLKSOURCE RCC_CCIPR_LPTIM1SEL
#define LL_RCC_LPTIM2_CLKSOURCE RCC_CCIPR_LPTIM2SEL
#define LL_RCC_SAI1_CLKSOURCE RCC_CCIPR_SAI1SEL
#define LL_RCC_CLK48_CLKSOURCE RCC_CCIPR_CLK48SEL
#define LL_RCC_USB_CLKSOURCE LL_RCC_CLK48_CLKSOURCE
#define LL_RCC_RNG_CLKSOURCE RCC_CCIPR_RNGSEL
#define LL_RCC_ADC_CLKSOURCE RCC_CCIPR_ADCSEL
#define LL_RCC_RTC_CLKSOURCE_NONE 0x00000000U
#define LL_RCC_RTC_CLKSOURCE_LSE RCC_BDCR_RTCSEL_0
#define LL_RCC_RTC_CLKSOURCE_LSI RCC_BDCR_RTCSEL_1
#define LL_RCC_RTC_CLKSOURCE_HSE_DIV32 RCC_BDCR_RTCSEL
#define LL_RCC_RFWKP_CLKSOURCE_NONE 0x00000000U
#define LL_RCC_RFWKP_CLKSOURCE_LSE RCC_CSR_RFWKPSEL_0
#define LL_RCC_RFWKP_CLKSOURCE_HSE_DIV1024 RCC_CSR_RFWKPSEL
#define LL_RCC_PLLSOURCE_NONE 0x00000000U
#define LL_RCC_PLLSOURCE_MSI RCC_PLLCFGR_PLLSRC_0
#define LL_RCC_PLLSOURCE_HSI RCC_PLLCFGR_PLLSRC_1
#define LL_RCC_PLLSOURCE_HSE (RCC_PLLCFGR_PLLSRC_1 | RCC_PLLCFGR_PLLSRC_0)
#define LL_RCC_PLLM_DIV_1 0x00000000U
#define LL_RCC_PLLM_DIV_2 (RCC_PLLCFGR_PLLM_0)
#define LL_RCC_PLLM_DIV_3 (RCC_PLLCFGR_PLLM_1)
#define LL_RCC_PLLM_DIV_4 ((RCC_PLLCFGR_PLLM_1 | RCC_PLLCFGR_PLLM_0))
#define LL_RCC_PLLM_DIV_5 (RCC_PLLCFGR_PLLM_2)
#define LL_RCC_PLLM_DIV_6 ((RCC_PLLCFGR_PLLM_2 | RCC_PLLCFGR_PLLM_0))
#define LL_RCC_PLLM_DIV_7 ((RCC_PLLCFGR_PLLM_2 | RCC_PLLCFGR_PLLM_1))
#define LL_RCC_PLLM_DIV_8 (RCC_PLLCFGR_PLLM)
#define LL_RCC_PLLR_DIV_2 (RCC_PLLCFGR_PLLR_0)
#define LL_RCC_PLLR_DIV_3 (RCC_PLLCFGR_PLLR_1)
#define LL_RCC_PLLR_DIV_4 (RCC_PLLCFGR_PLLR_1|RCC_PLLCFGR_PLLR_0)
#define LL_RCC_PLLR_DIV_5 (RCC_PLLCFGR_PLLR_2)
#define LL_RCC_PLLR_DIV_6 (RCC_PLLCFGR_PLLR_2|RCC_PLLCFGR_PLLR_0)
#define LL_RCC_PLLR_DIV_7 (RCC_PLLCFGR_PLLR_2|RCC_PLLCFGR_PLLR_1)
#define LL_RCC_PLLR_DIV_8 (RCC_PLLCFGR_PLLR)
#define LL_RCC_PLLP_DIV_2 (RCC_PLLCFGR_PLLP_0)
#define LL_RCC_PLLP_DIV_3 (RCC_PLLCFGR_PLLP_1)
#define LL_RCC_PLLP_DIV_4 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1)
#define LL_RCC_PLLP_DIV_5 (RCC_PLLCFGR_PLLP_2)
#define LL_RCC_PLLP_DIV_6 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_2)
#define LL_RCC_PLLP_DIV_7 (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_2)
#define LL_RCC_PLLP_DIV_8 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_2)
#define LL_RCC_PLLP_DIV_9 (RCC_PLLCFGR_PLLP_3)
#define LL_RCC_PLLP_DIV_10 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_3)
#define LL_RCC_PLLP_DIV_11 (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_3)
#define LL_RCC_PLLP_DIV_12 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_3)
#define LL_RCC_PLLP_DIV_13 (RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_3)
#define LL_RCC_PLLP_DIV_14 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_3)
#define LL_RCC_PLLP_DIV_15 (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_3)
#define LL_RCC_PLLP_DIV_16 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_3)
#define LL_RCC_PLLP_DIV_17 (RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_18 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_19 (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_20 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_21 (RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_22 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_23 (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_24 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_25 (RCC_PLLCFGR_PLLP_3|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_26 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_3|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_27 (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_3|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_28 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_3|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_29 (RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_3|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_30 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_3|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_31 (RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_3|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLP_DIV_32 (RCC_PLLCFGR_PLLP_0|RCC_PLLCFGR_PLLP_1|RCC_PLLCFGR_PLLP_2|RCC_PLLCFGR_PLLP_3|RCC_PLLCFGR_PLLP_4)
#define LL_RCC_PLLQ_DIV_2 (RCC_PLLCFGR_PLLQ_0)
#define LL_RCC_PLLQ_DIV_3 (RCC_PLLCFGR_PLLQ_1)
#define LL_RCC_PLLQ_DIV_4 (RCC_PLLCFGR_PLLQ_1|RCC_PLLCFGR_PLLQ_0)
#define LL_RCC_PLLQ_DIV_5 (RCC_PLLCFGR_PLLQ_2)
#define LL_RCC_PLLQ_DIV_6 (RCC_PLLCFGR_PLLQ_2|RCC_PLLCFGR_PLLQ_0)
#define LL_RCC_PLLQ_DIV_7 (RCC_PLLCFGR_PLLQ_2|RCC_PLLCFGR_PLLQ_1)
#define LL_RCC_PLLQ_DIV_8 (RCC_PLLCFGR_PLLQ)
#define LL_RCC_PLLSAI1Q_DIV_2 (RCC_PLLSAI1CFGR_PLLQ_0)
#define LL_RCC_PLLSAI1Q_DIV_3 (RCC_PLLSAI1CFGR_PLLQ_1)
#define LL_RCC_PLLSAI1Q_DIV_4 (RCC_PLLSAI1CFGR_PLLQ_1 | RCC_PLLSAI1CFGR_PLLQ_0)
#define LL_RCC_PLLSAI1Q_DIV_5 (RCC_PLLSAI1CFGR_PLLQ_2)
#define LL_RCC_PLLSAI1Q_DIV_6 (RCC_PLLSAI1CFGR_PLLQ_2 | RCC_PLLSAI1CFGR_PLLQ_0)
#define LL_RCC_PLLSAI1Q_DIV_7 (RCC_PLLSAI1CFGR_PLLQ_2 | RCC_PLLSAI1CFGR_PLLQ_1)
#define LL_RCC_PLLSAI1Q_DIV_8 (RCC_PLLSAI1CFGR_PLLQ_2 | RCC_PLLSAI1CFGR_PLLQ_1 | RCC_PLLSAI1CFGR_PLLQ_0)
#define LL_RCC_PLLSAI1P_DIV_2 (RCC_PLLSAI1CFGR_PLLP_0)
#define LL_RCC_PLLSAI1P_DIV_3 (RCC_PLLSAI1CFGR_PLLP_1)
#define LL_RCC_PLLSAI1P_DIV_4 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1)
#define LL_RCC_PLLSAI1P_DIV_5 (RCC_PLLSAI1CFGR_PLLP_2)
#define LL_RCC_PLLSAI1P_DIV_6 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_2)
#define LL_RCC_PLLSAI1P_DIV_7 (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_2)
#define LL_RCC_PLLSAI1P_DIV_8 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_2)
#define LL_RCC_PLLSAI1P_DIV_9 (RCC_PLLSAI1CFGR_PLLP_3)
#define LL_RCC_PLLSAI1P_DIV_10 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_3)
#define LL_RCC_PLLSAI1P_DIV_11 (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_3)
#define LL_RCC_PLLSAI1P_DIV_12 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_3)
#define LL_RCC_PLLSAI1P_DIV_13 (RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_3)
#define LL_RCC_PLLSAI1P_DIV_14 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_3)
#define LL_RCC_PLLSAI1P_DIV_15 (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_3)
#define LL_RCC_PLLSAI1P_DIV_16 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_3)
#define LL_RCC_PLLSAI1P_DIV_17 (RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_18 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_19 (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_20 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_21 (RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_22 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_23 (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_24 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_25 (RCC_PLLSAI1CFGR_PLLP_3|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_26 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_3|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_27 (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_3|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_28 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_3|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_29 (RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_3|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_30 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_3|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_31 (RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_3|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1P_DIV_32 (RCC_PLLSAI1CFGR_PLLP_0|RCC_PLLSAI1CFGR_PLLP_1|RCC_PLLSAI1CFGR_PLLP_2|RCC_PLLSAI1CFGR_PLLP_3|RCC_PLLSAI1CFGR_PLLP_4)
#define LL_RCC_PLLSAI1R_DIV_2 (RCC_PLLSAI1CFGR_PLLR_0)
#define LL_RCC_PLLSAI1R_DIV_3 (RCC_PLLSAI1CFGR_PLLR_1)
#define LL_RCC_PLLSAI1R_DIV_4 (RCC_PLLSAI1CFGR_PLLR_1 | RCC_PLLSAI1CFGR_PLLR_0)
#define LL_RCC_PLLSAI1R_DIV_5 (RCC_PLLSAI1CFGR_PLLR_2)
#define LL_RCC_PLLSAI1R_DIV_6 (RCC_PLLSAI1CFGR_PLLR_2 | RCC_PLLSAI1CFGR_PLLR_0)
#define LL_RCC_PLLSAI1R_DIV_7 (RCC_PLLSAI1CFGR_PLLR_2 | RCC_PLLSAI1CFGR_PLLR_1)
#define LL_RCC_PLLSAI1R_DIV_8 (RCC_PLLSAI1CFGR_PLLR_2 | RCC_PLLSAI1CFGR_PLLR_1 | RCC_PLLSAI1CFGR_PLLR_0)
#define LL_RCC_WriteReg(__REG__,__VALUE__) WRITE_REG(RCC->__REG__, (__VALUE__))
#define LL_RCC_ReadReg(__REG__) READ_REG(RCC->__REG__)
#define __LL_RCC_CALC_PLLCLK_FREQ(__INPUTFREQ__,__PLLM__,__PLLN__,__PLLR__) ((__INPUTFREQ__) * (__PLLN__) / ((((__PLLM__)>> RCC_PLLCFGR_PLLM_Pos) + 1U)) / (((__PLLR__) >> RCC_PLLCFGR_PLLR_Pos) + 1U))
#define __LL_RCC_CALC_PLLCLK_SAI_FREQ(__INPUTFREQ__,__PLLM__,__PLLN__,__PLLP__) ((__INPUTFREQ__) * (__PLLN__) / ((((__PLLM__)>> RCC_PLLCFGR_PLLM_Pos) + 1U))/ (((__PLLP__) >> RCC_PLLCFGR_PLLP_Pos) + 1U))
#define __LL_RCC_CALC_PLLCLK_ADC_FREQ(__INPUTFREQ__,__PLLM__,__PLLN__,__PLLP__) ((__INPUTFREQ__) * (__PLLN__) / ((((__PLLM__)>> RCC_PLLCFGR_PLLM_Pos) + 1U)) / (((__PLLP__) >> RCC_PLLCFGR_PLLP_Pos) + 1U))
#define __LL_RCC_CALC_PLLCLK_48M_FREQ(__INPUTFREQ__,__PLLM__,__PLLN__,__PLLQ__) ((__INPUTFREQ__) * (__PLLN__) / ((((__PLLM__)>> RCC_PLLCFGR_PLLM_Pos) + 1U)) / (((__PLLQ__) >> RCC_PLLCFGR_PLLQ_Pos) + 1U))
#define __LL_RCC_CALC_PLLSAI1_SAI_FREQ(__INPUTFREQ__,__PLLM__,__PLLSAI1N__,__PLLSAI1P__) ((__INPUTFREQ__) * (__PLLSAI1N__) / ((((__PLLM__)>> RCC_PLLCFGR_PLLM_Pos) + 1U)) / (((__PLLSAI1P__) >> RCC_PLLSAI1CFGR_PLLP_Pos) + 1U))
#define __LL_RCC_CALC_PLLSAI1_48M_FREQ(__INPUTFREQ__,__PLLM__,__PLLSAI1N__,__PLLSAI1Q__) ((__INPUTFREQ__) * (__PLLSAI1N__) / ((((__PLLM__)>> RCC_PLLCFGR_PLLM_Pos) + 1U)) / (((__PLLSAI1Q__) >> RCC_PLLSAI1CFGR_PLLQ_Pos) + 1U))
#define __LL_RCC_CALC_PLLSAI1_ADC_FREQ(__INPUTFREQ__,__PLLM__,__PLLSAI1N__,__PLLSAI1R__) ((__INPUTFREQ__) * (__PLLSAI1N__) / ((((__PLLM__)>> RCC_PLLCFGR_PLLM_Pos) + 1U)) / (((__PLLSAI1R__) >> RCC_PLLSAI1CFGR_PLLR_Pos) + 1U))
#define __LL_RCC_CALC_HCLK1_FREQ(__SYSCLKFREQ__,__CPU1PRESCALER__) ((__SYSCLKFREQ__) / AHBPrescTable[((__CPU1PRESCALER__) & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos])
#define __LL_RCC_CALC_HCLK2_FREQ(__SYSCLKFREQ__,__CPU2PRESCALER__) ((__SYSCLKFREQ__) / AHBPrescTable[((__CPU2PRESCALER__) & RCC_EXTCFGR_C2HPRE) >> RCC_EXTCFGR_C2HPRE_Pos])
#define __LL_RCC_CALC_HCLK4_FREQ(__SYSCLKFREQ__,__AHB4PRESCALER__) ((__SYSCLKFREQ__) / AHBPrescTable[(((__AHB4PRESCALER__) >> 4U) & RCC_EXTCFGR_SHDHPRE) >> RCC_EXTCFGR_SHDHPRE_Pos])
#define __LL_RCC_CALC_PCLK1_FREQ(__HCLKFREQ__,__APB1PRESCALER__) ((__HCLKFREQ__) >> (APBPrescTable[(((__APB1PRESCALER__) & RCC_CFGR_PPRE1_Msk) >> RCC_CFGR_PPRE1_Pos)] & 31U))
#define __LL_RCC_CALC_PCLK2_FREQ(__HCLKFREQ__,__APB2PRESCALER__) ((__HCLKFREQ__) >> (APBPrescTable[(((__APB2PRESCALER__) & RCC_CFGR_PPRE2_Msk) >> RCC_CFGR_PPRE2_Pos)] & 31U))
#define __LL_RCC_CALC_MSI_FREQ(__MSIRANGE__) MSIRangeTable[((__MSIRANGE__) & RCC_CR_MSIRANGE_Msk) >> RCC_CR_MSIRANGE_Pos]
static inline void LL_RCC_HSE_EnableDiv2(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) |= ((0x1UL << (20U))));
}
static inline void LL_RCC_HSE_DisableDiv2(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) &= ~((0x1UL << (20U))));
}
static inline uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) & ((0x1UL << (20U)))) == ((0x1UL << (20U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_HSE_EnableCSS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) |= ((0x1UL << (19U))));
}
static inline void LL_RCC_HSE_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) |= ((0x1UL << (16U))));
}
static inline void LL_RCC_HSE_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) &= ~((0x1UL << (16U))));
}
static inline uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) & ((0x1UL << (17U)))) == ((0x1UL << (17U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_HSE_IsClockControlLocked(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->HSECR) & ((0x1UL << (0U)))) != ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->HSECR) = (0xCAFECAFEU));
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->HSECR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->HSECR))) & (~((0x3FUL << (8U))))) | (Value << (8U)))));
}
static inline uint32_t LL_RCC_HSE_GetCapacitorTuning(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->HSECR) & ((0x3FUL << (8U)))) >> (8U));
}
static inline void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->HSECR) = (0xCAFECAFEU));
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->HSECR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->HSECR))) & (~((0x7UL << (4U))))) | (CurrentMax))));
}
static inline uint32_t LL_RCC_HSE_GetCurrentControl(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->HSECR) & ((0x7UL << (4U)))));
}
static inline void LL_RCC_HSE_SetSenseAmplifier(uint32_t SenseAmplifier)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->HSECR) = (0xCAFECAFEU));
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->HSECR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->HSECR))) & (~((0x1UL << (3U))))) | (SenseAmplifier))));
}
static inline uint32_t LL_RCC_HSE_GetSenseAmplifier(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->HSECR) & ((0x1UL << (3U)))));
}
static inline void LL_RCC_HSI_EnableInStopMode(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) |= ((0x1UL << (9U))));
}
static inline void LL_RCC_HSI_DisableInStopMode(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) &= ~((0x1UL << (9U))));
}
static inline uint32_t LL_RCC_HSI_IsEnabledInStopMode(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_HSI_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) |= ((0x1UL << (8U))));
}
static inline void LL_RCC_HSI_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) &= ~((0x1UL << (8U))));
}
static inline uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_HSI_EnableAutoFromStop(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) |= ((0x1UL << (11U))));
}
static inline void LL_RCC_HSI_DisableAutoFromStop(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) &= ~((0x1UL << (11U))));
}
static inline uint32_t LL_RCC_HSI_GetCalibration(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->ICSCR) & ((0xFFUL << (16U)))) >> (16U));
}
static inline void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->ICSCR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->ICSCR))) & (~((0x7FUL << (24U))))) | (Value << (24U)))));
}
static inline uint32_t LL_RCC_HSI_GetCalibTrimming(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->ICSCR) & ((0x7FUL << (24U)))) >> (24U));
}
static inline void LL_RCC_HSI48_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CRRCR) |= ((0x1UL << (0U))));
}
static inline void LL_RCC_HSI48_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CRRCR) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_RCC_HSI48_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CRRCR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_HSI48_GetCalibration(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CRRCR) & ((0x1FFUL << (7U)))) >> (7U));
}
static inline void LL_RCC_LSE_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) |= ((0x1UL << (0U))));
}
static inline void LL_RCC_LSE_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_RCC_LSE_IsEnabled(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_LSE_EnableBypass(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) |= ((0x1UL << (2U))));
}
static inline void LL_RCC_LSE_DisableBypass(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) &= ~((0x1UL << (2U))));
}
static inline void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR))) & (~((0x3UL << (3U))))) | (LSEDrive))));
}
static inline uint32_t LL_RCC_LSE_GetDriveCapability(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) & ((0x3UL << (3U)))));
}
static inline void LL_RCC_LSE_EnableCSS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) |= ((0x1UL << (5U))));
}
static inline void LL_RCC_LSE_DisableCSS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) &= ~((0x1UL << (5U))));
}
static inline uint32_t LL_RCC_LSE_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_LSE_IsCSSDetected(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_LSI1_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) |= ((0x1UL << (0U))));
}
static inline void LL_RCC_LSI1_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_RCC_LSI1_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_LSI2_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) |= ((0x1UL << (2U))));
}
static inline void LL_RCC_LSI2_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) &= ~((0x1UL << (2U))));
}
static inline uint32_t LL_RCC_LSI2_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR))) & (~((0xFUL << (8U))))) | (Value << (8U)))));
}
static inline uint32_t LL_RCC_LSI2_GetTrimming(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) & ((0xFUL << (8U)))) >> (8U));
}
static inline void LL_RCC_MSI_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) |= ((0x1UL << (0U))));
}
static inline void LL_RCC_MSI_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_MSI_EnablePLLMode(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) |= ((0x1UL << (2U))));
}
static inline void LL_RCC_MSI_DisablePLLMode(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) &= ~((0x1UL << (2U))));
}
static inline void LL_RCC_MSI_SetRange(uint32_t Range)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR))) & (~((0xFUL << (4U))))) | (Range))));
}
static inline uint32_t LL_RCC_MSI_GetRange(void)
{
  uint32_t msiRange = ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) & ((0xFUL << (4U))));
  if (msiRange > (0xBU << (4U)))
  {
    msiRange = (0xBU << (4U));
  }
  return msiRange;
}
static inline uint32_t LL_RCC_MSI_GetCalibration(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->ICSCR) & ((0xFFUL << (0U)))) >> (0U));
}
static inline void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->ICSCR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->ICSCR))) & (~((0xFFUL << (8U))))) | (Value << (8U)))));
}
static inline uint32_t LL_RCC_MSI_GetCalibTrimming(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->ICSCR) & ((0xFFUL << (8U)))) >> (8U));
}
static inline void LL_RCC_LSCO_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) |= ((0x1UL << (24U))));
}
static inline void LL_RCC_LSCO_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) &= ~((0x1UL << (24U))));
}
static inline void LL_RCC_LSCO_SetSource(uint32_t Source)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR))) & (~((0x1UL << (25U))))) | (Source))));
}
static inline uint32_t LL_RCC_LSCO_GetSource(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) & ((0x1UL << (25U)))));
}
static inline void LL_RCC_SetSysClkSource(uint32_t Source)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR))) & (~((0x3UL << (0U))))) | (Source))));
}
static inline uint32_t LL_RCC_GetSysClkSource(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR) & ((0x3UL << (2U)))));
}
static inline uint32_t LL_RCC_GetRFClockSource(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->EXTCFGR) & ((0x1UL << (20U)))));
}
static inline void LL_RCC_SetRFWKPClockSource(uint32_t Source)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR))) & (~((0x3UL << (14U))))) | (Source))));
}
static inline uint32_t LL_RCC_GetRFWKPClockSource(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) & ((0x3UL << (14U)))));
}
static inline uint32_t LL_RCC_IsRFUnderReset(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR))) & (~((0xFUL << (4U))))) | (Prescaler))));
}
static inline void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->EXTCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->EXTCFGR))) & (~((0xFUL << (4U))))) | (Prescaler))));
}
static inline void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->EXTCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->EXTCFGR))) & (~((0xFUL << (0U))))) | (Prescaler >> 4))));
}
static inline void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR))) & (~((0x7UL << (8U))))) | (Prescaler))));
}
static inline void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR))) & (~((0x7UL << (11U))))) | (Prescaler))));
}
static inline uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR) & ((0xFUL << (4U)))));
}
static inline uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->EXTCFGR) & ((0xFUL << (4U)))));
}
static inline uint32_t LL_RCC_GetAHB4Prescaler(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->EXTCFGR) & ((0xFUL << (0U)))) << 4);
}
static inline uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR) & ((0x7UL << (8U)))));
}
static inline uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR) & ((0x7UL << (11U)))));
}
static inline void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR))) & (~((0x1UL << (15U))))) | (Clock))));
}
static inline uint32_t LL_RCC_GetClkAfterWakeFromStop(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR) & ((0x1UL << (15U)))));
}
static inline void LL_RCC_SetSMPSClockSource(uint32_t SMPSSource)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->SMPSCR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->SMPSCR))) & (~((0x3UL << (0U))))) | (SMPSSource))));
}
static inline uint32_t LL_RCC_GetSMPSClockSelection(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->SMPSCR) & ((0x3UL << (0U)))));
}
static inline uint32_t LL_RCC_GetSMPSClockSource(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->SMPSCR) & ((0x3UL << (8U)))));
}
static inline void LL_RCC_SetSMPSPrescaler(uint32_t Prescaler)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->SMPSCR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->SMPSCR))) & (~((0x3UL << (4U))))) | (Prescaler))));
}
static inline uint32_t LL_RCC_GetSMPSPrescaler(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->SMPSCR) & ((0x3UL << (4U)))));
}
static inline void LL_RCC_ConfigMCO(uint32_t MCOxSource, uint32_t MCOxPrescaler)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR))) & (~((0xFUL << (24U)) | (0x7UL << (28U))))) | (MCOxSource | MCOxPrescaler))));
}
static inline void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR))) & (~((0x3UL << (0U))))) | (USARTxSource))));
}
static inline void LL_RCC_SetLPUARTClockSource(uint32_t LPUARTxSource)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR))) & (~((0x3UL << (10U))))) | (LPUARTxSource))));
}
static inline void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR))) & (~(((I2CxSource >> 4) & 0x000FF000U)))) | (((I2CxSource << 4) & 0x000FF000U)))));
}
static inline void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR))) & (~((LPTIMxSource & 0xFFFF0000U)))) | ((LPTIMxSource << 16)))));
}
static inline void LL_RCC_SetSAIClockSource(uint32_t SAIxSource)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR))) & (~((0x3UL << (22U))))) | (SAIxSource))));
}
static inline void LL_RCC_SetRNGClockSource(uint32_t RNGxSource)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR))) & (~((0x3UL << (30U))))) | (RNGxSource))));
}
static inline void LL_RCC_SetCLK48ClockSource(uint32_t CLK48xSource)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR))) & (~((0x3UL << (26U))))) | (CLK48xSource))));
}
static inline void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
{
  LL_RCC_SetCLK48ClockSource(USBxSource);
}
static inline void LL_RCC_ConfigRNGClockSource(uint32_t RNGxSource, uint32_t CLK48xSource)
{
  if (RNGxSource == 0x00000000U)
  {
    LL_RCC_SetCLK48ClockSource(CLK48xSource);
  }
  LL_RCC_SetRNGClockSource(RNGxSource);
}
static inline void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR))) & (~((0x3UL << (28U))))) | (ADCxSource))));
}
static inline uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR) & (USARTx)));
}
static inline uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR) & (LPUARTx)));
}
static inline uint32_t LL_RCC_GetI2CClockSource(uint32_t I2Cx)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR) & (I2Cx)) >> 4) | (I2Cx << 4));
}
static inline uint32_t LL_RCC_GetLPTIMClockSource(uint32_t LPTIMx)
{
  return (uint32_t)((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR) & (LPTIMx)) >> 16) | LPTIMx);
}
static inline uint32_t LL_RCC_GetSAIClockSource(uint32_t SAIx)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR) & (SAIx)));
}
static inline uint32_t LL_RCC_GetRNGClockSource(uint32_t RNGx)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR) & (RNGx)));
}
static inline uint32_t LL_RCC_GetCLK48ClockSource(uint32_t CLK48x)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR) & (CLK48x)));
}
static inline uint32_t LL_RCC_GetUSBClockSource(uint32_t USBx)
{
  return LL_RCC_GetCLK48ClockSource(USBx);
}
static inline uint32_t LL_RCC_GetADCClockSource(uint32_t ADCx)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CCIPR) & (ADCx)));
}
static inline void LL_RCC_SetRTCClockSource(uint32_t Source)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR))) & (~((0x3UL << (8U))))) | (Source))));
}
static inline uint32_t LL_RCC_GetRTCClockSource(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) & ((0x3UL << (8U)))));
}
static inline void LL_RCC_EnableRTC(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) |= ((0x1UL << (15U))));
}
static inline void LL_RCC_DisableRTC(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) &= ~((0x1UL << (15U))));
}
static inline uint32_t LL_RCC_IsEnabledRTC(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_ForceBackupDomainReset(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) |= ((0x1UL << (16U))));
}
static inline void LL_RCC_ReleaseBackupDomainReset(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->BDCR) &= ~((0x1UL << (16U))));
}
static inline void LL_RCC_PLL_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) |= ((0x1UL << (24U))));
}
static inline void LL_RCC_PLL_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) &= ~((0x1UL << (24U))));
}
static inline uint32_t LL_RCC_PLL_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) & ((0x1UL << (25U)))) == ((0x1UL << (25U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR))) & (~((0x3UL << (0U)) | (0x7UL << (4U)) | (0x7FUL << (8U)) | (0x7UL << (29U))))) | (Source | PLLM | (PLLN << (8U)) | PLLR))));
}
static inline void LL_RCC_PLL_ConfigDomain_SAI(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR))) & (~((0x3UL << (0U)) | (0x7UL << (4U)) | (0x7FUL << (8U)) | (0x1FUL << (17U))))) | (Source | PLLM | (PLLN << (8U)) | PLLP))));
}
static inline void LL_RCC_PLL_ConfigDomain_ADC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR))) & (~((0x3UL << (0U)) | (0x7UL << (4U)) | (0x7FUL << (8U)) | (0x1FUL << (17U))))) | (Source | PLLM | (PLLN << (8U)) | PLLP))));
}
static inline void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR))) & (~((0x3UL << (0U)) | (0x7UL << (4U)) | (0x7FUL << (8U)) | (0x7UL << (25U))))) | (Source | PLLM | (PLLN << (8U)) | PLLQ))));
}
static inline uint32_t LL_RCC_PLL_GetN(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) & ((0x7FUL << (8U)))) >> (8U));
}
static inline uint32_t LL_RCC_PLL_GetP(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) & ((0x1FUL << (17U)))));
}
static inline uint32_t LL_RCC_PLL_GetQ(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) & ((0x7UL << (25U)))));
}
static inline uint32_t LL_RCC_PLL_GetR(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) & ((0x7UL << (29U)))));
}
static inline uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) & ((0x7UL << (4U)))));
}
static inline void LL_RCC_PLL_EnableDomain_SAI(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) |= ((0x1UL << (16U))));
}
static inline void LL_RCC_PLL_DisableDomain_SAI(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) &= ~((0x1UL << (16U))));
}
static inline uint32_t LL_RCC_PLL_IsEnabledDomain_SAI(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_PLL_EnableDomain_ADC(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) |= ((0x1UL << (16U))));
}
static inline void LL_RCC_PLL_DisableDomain_ADC(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) &= ~((0x1UL << (16U))));
}
static inline uint32_t LL_RCC_PLL_IsEnabledDomain_ADC(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_PLL_EnableDomain_48M(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) |= ((0x1UL << (24U))));
}
static inline void LL_RCC_PLL_DisableDomain_48M(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) &= ~((0x1UL << (24U))));
}
static inline uint32_t LL_RCC_PLL_IsEnabledDomain_48M(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) & ((0x1UL << (24U)))) == ((0x1UL << (24U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_PLL_EnableDomain_SYS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) |= ((0x1UL << (28U))));
}
static inline void LL_RCC_PLL_DisableDomain_SYS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) &= ~((0x1UL << (28U))));
}
static inline uint32_t LL_RCC_PLL_IsEnabledDomain_SYS(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) & ((0x1UL << (28U)))) == ((0x1UL << (28U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_PLLSAI1_Enable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) |= ((0x1UL << (26U))));
}
static inline void LL_RCC_PLLSAI1_Disable(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) &= ~((0x1UL << (26U))));
}
static inline uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CR) & ((0x1UL << (27U)))) == ((0x1UL << (27U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_PLLSAI1_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR))) & (~((0x3UL << (0U)) | (0x7UL << (4U))))) | (Source | PLLM))));
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR))) & (~((0x7FUL << (8U)) | (0x7UL << (25U))))) | ((PLLN << (8U)) | PLLQ))));
}
static inline void LL_RCC_PLLSAI1_ConfigDomain_SAI(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR))) & (~((0x3UL << (0U)) | (0x7UL << (4U))))) | (Source | PLLM))));
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR))) & (~((0x7FUL << (8U)) | (0x1FUL << (17U))))) | ((PLLN << (8U)) | PLLP))));
}
static inline void LL_RCC_PLLSAI1_ConfigDomain_ADC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR))) & (~((0x3UL << (0U)) | (0x7UL << (4U))))) | (Source | PLLM))));
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR))) & (~((0x7FUL << (8U)) | (0x7UL << (29U))))) | ((PLLN << (8U)) | PLLR))));
}
static inline uint32_t LL_RCC_PLLSAI1_GetN(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR) & ((0x7FUL << (8U)))) >> (8U));
}
static inline uint32_t LL_RCC_PLLSAI1_GetP(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR) & ((0x1FUL << (17U)))));
}
static inline uint32_t LL_RCC_PLLSAI1_GetQ(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR) & ((0x7UL << (25U)))));
}
static inline uint32_t LL_RCC_PLLSAI1_GetR(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR) & ((0x7UL << (29U)))));
}
static inline void LL_RCC_PLLSAI1_EnableDomain_SAI(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR) |= ((0x1UL << (16U))));
}
static inline void LL_RCC_PLLSAI1_DisableDomain_SAI(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR) &= ~((0x1UL << (16U))));
}
static inline uint32_t LL_RCC_PLLSAI1_IsEnabledDomain_SAI(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_PLLSAI1_EnableDomain_48M(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR) |= ((0x1UL << (24U))));
}
static inline void LL_RCC_PLLSAI1_DisableDomain_48M(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR) &= ~((0x1UL << (24U))));
}
static inline uint32_t LL_RCC_PLLSAI1_IsEnabledDomain_48M(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR) & ((0x1UL << (24U)))) == ((0x1UL << (24U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_PLLSAI1_EnableDomain_ADC(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR) |= ((0x1UL << (28U))));
}
static inline void LL_RCC_PLLSAI1_DisableDomain_ADC(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR) &= ~((0x1UL << (28U))));
}
static inline uint32_t LL_RCC_PLLSAI1_IsEnabledDomain_ADC(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLSAI1CFGR) & ((0x1UL << (28U)))) == ((0x1UL << (28U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_ClearFlag_LSI1RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CICR) |= ((0x1UL << (0U))));
}
static inline void LL_RCC_ClearFlag_LSI2RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CICR) |= ((0x1UL << (11U))));
}
static inline void LL_RCC_ClearFlag_LSERDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CICR) |= ((0x1UL << (1U))));
}
static inline void LL_RCC_ClearFlag_MSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CICR) |= ((0x1UL << (2U))));
}
static inline void LL_RCC_ClearFlag_HSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CICR) |= ((0x1UL << (3U))));
}
static inline void LL_RCC_ClearFlag_HSERDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CICR) |= ((0x1UL << (4U))));
}
static inline void LL_RCC_PLL_SetMainSource(uint32_t PLLSource)
{
  (((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR)) = ((((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR))) & (~((0x3UL << (0U))))) | (PLLSource))));
}
static inline uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->PLLCFGR) & ((0x3UL << (0U)))));
}
static inline void LL_RCC_ClearFlag_PLLRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CICR) |= ((0x1UL << (5U))));
}
static inline void LL_RCC_ClearFlag_HSI48RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CICR) |= ((0x1UL << (10U))));
}
static inline void LL_RCC_ClearFlag_PLLSAI1RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CICR) |= ((0x1UL << (6U))));
}
static inline void LL_RCC_ClearFlag_HSECSS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CICR) |= ((0x1UL << (8U))));
}
static inline void LL_RCC_ClearFlag_LSECSS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CICR) |= ((0x1UL << (9U))));
}
static inline uint32_t LL_RCC_IsActiveFlag_LSI1RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIFR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_LSI2RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIFR) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_LSERDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIFR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_MSIRDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIFR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_HSIRDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIFR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_HSERDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIFR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_PLLRDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIFR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_HSI48RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIFR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_PLLSAI1RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIFR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_HSECSS(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIFR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_LSECSS(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIFR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->EXTCFGR) & ((0x1UL << (17U)))) == ((0x1UL << (17U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->EXTCFGR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR) & ((0x1UL << (17U)))) == ((0x1UL << (17U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CFGR) & ((0x1UL << (18U)))) == ((0x1UL << (18U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_IWDGRST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) & ((0x1UL << (29U)))) == ((0x1UL << (29U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_LPWRRST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) & ((0x1UL << (31U)))) == ((0x1UL << (31U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_OBLRST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) & ((0x1UL << (25U)))) == ((0x1UL << (25U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) & ((0x1UL << (26U)))) == ((0x1UL << (26U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) & ((0x1UL << (28U)))) == ((0x1UL << (28U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_WWDGRST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) & ((0x1UL << (30U)))) == ((0x1UL << (30U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsActiveFlag_BORRST(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) & ((0x1UL << (27U)))) == ((0x1UL << (27U)))) ? 1UL : 0UL);
}
static inline void LL_RCC_ClearResetFlags(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CSR) |= ((0x1UL << (23U))));
}
static inline void LL_RCC_EnableIT_LSI1RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) |= ((0x1UL << (0U))));
}
static inline void LL_RCC_EnableIT_LSI2RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) |= ((0x1UL << (11U))));
}
static inline void LL_RCC_EnableIT_LSERDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) |= ((0x1UL << (1U))));
}
static inline void LL_RCC_EnableIT_MSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) |= ((0x1UL << (2U))));
}
static inline void LL_RCC_EnableIT_HSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) |= ((0x1UL << (3U))));
}
static inline void LL_RCC_EnableIT_HSERDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) |= ((0x1UL << (4U))));
}
static inline void LL_RCC_EnableIT_PLLRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) |= ((0x1UL << (5U))));
}
static inline void LL_RCC_EnableIT_HSI48RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) |= ((0x1UL << (10U))));
}
static inline void LL_RCC_EnableIT_PLLSAI1RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) |= ((0x1UL << (6U))));
}
static inline void LL_RCC_EnableIT_LSECSS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) |= ((0x1UL << (9U))));
}
static inline void LL_RCC_DisableIT_LSI1RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) &= ~((0x1UL << (0U))));
}
static inline void LL_RCC_DisableIT_LSI2RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) &= ~((0x1UL << (11U))));
}
static inline void LL_RCC_DisableIT_LSERDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) &= ~((0x1UL << (1U))));
}
static inline void LL_RCC_DisableIT_MSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) &= ~((0x1UL << (2U))));
}
static inline void LL_RCC_DisableIT_HSIRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) &= ~((0x1UL << (3U))));
}
static inline void LL_RCC_DisableIT_HSERDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) &= ~((0x1UL << (4U))));
}
static inline void LL_RCC_DisableIT_PLLRDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) &= ~((0x1UL << (5U))));
}
static inline void LL_RCC_DisableIT_HSI48RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) &= ~((0x1UL << (10U))));
}
static inline void LL_RCC_DisableIT_PLLSAI1RDY(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) &= ~((0x1UL << (6U))));
}
static inline void LL_RCC_DisableIT_LSECSS(void)
{
  ((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) &= ~((0x1UL << (9U))));
}
static inline uint32_t LL_RCC_IsEnabledIT_LSI1RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsEnabledIT_LSI2RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsEnabledIT_LSERDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsEnabledIT_MSIRDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsEnabledIT_HSIRDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsEnabledIT_HSERDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsEnabledIT_PLLRDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsEnabledIT_HSI48RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsEnabledIT_PLLSAI1RDY(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RCC_IsEnabledIT_LSECSS(void)
{
  return ((((((RCC_TypeDef *) (((0x40000000UL) + 0x18000000UL) + 0x00000000UL))->CIER) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
ErrorStatus LL_RCC_DeInit(void);
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks);
uint32_t LL_RCC_GetSMPSClockFreq(void);
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource);
uint32_t LL_RCC_GetI2CClockFreq(uint32_t I2CxSource);
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource);
uint32_t LL_RCC_GetLPTIMClockFreq(uint32_t LPTIMxSource);
uint32_t LL_RCC_GetSAIClockFreq(uint32_t SAIxSource);
uint32_t LL_RCC_GetCLK48ClockFreq(uint32_t CLK48xSource);
uint32_t LL_RCC_GetRNGClockFreq(uint32_t RNGxSource);
uint32_t LL_RCC_GetUSBClockFreq(uint32_t USBxSource);
uint32_t LL_RCC_GetADCClockFreq(uint32_t ADCxSource);
uint32_t LL_RCC_GetRTCClockFreq(void);
uint32_t LL_RCC_GetRFWKPClockFreq(void);
#define STM32WBxx_LL_RNG_H 
typedef struct
{
  uint32_t ClockErrorDetection;
} LL_RNG_InitTypeDef;
#define LL_RNG_CED_ENABLE 0x00000000U
#define LL_RNG_CED_DISABLE RNG_CR_CED
#define LL_RNG_SR_DRDY RNG_SR_DRDY
#define LL_RNG_SR_CECS RNG_SR_CECS
#define LL_RNG_SR_SECS RNG_SR_SECS
#define LL_RNG_SR_CEIS RNG_SR_CEIS
#define LL_RNG_SR_SEIS RNG_SR_SEIS
#define LL_RNG_CR_IE RNG_CR_IE
#define LL_RNG_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_RNG_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
static inline void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
  ((RNGx->CR) |= ((0x1UL << (2U))));
}
static inline void LL_RNG_Disable(RNG_TypeDef *RNGx)
{
  ((RNGx->CR) &= ~((0x1UL << (2U))));
}
static inline uint32_t LL_RNG_IsEnabled(RNG_TypeDef *RNGx)
{
  return ((((RNGx->CR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline void LL_RNG_EnableClkErrorDetect(RNG_TypeDef *RNGx)
{
  ((RNGx->CR) &= ~((0x1UL << (5U))));
}
static inline void LL_RNG_DisableClkErrorDetect(RNG_TypeDef *RNGx)
{
  ((RNGx->CR) |= ((0x1UL << (5U))));
}
static inline uint32_t LL_RNG_IsEnabledClkErrorDetect(RNG_TypeDef *RNGx)
{
  return ((((RNGx->CR) & ((0x1UL << (5U)))) != ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RNG_IsActiveFlag_DRDY(RNG_TypeDef *RNGx)
{
  return ((((RNGx->SR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RNG_IsActiveFlag_CECS(RNG_TypeDef *RNGx)
{
  return ((((RNGx->SR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RNG_IsActiveFlag_SECS(RNG_TypeDef *RNGx)
{
  return ((((RNGx->SR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RNG_IsActiveFlag_CEIS(RNG_TypeDef *RNGx)
{
  return ((((RNGx->SR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RNG_IsActiveFlag_SEIS(RNG_TypeDef *RNGx)
{
  return ((((RNGx->SR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline void LL_RNG_ClearFlag_CEIS(RNG_TypeDef *RNGx)
{
  ((RNGx->SR) = (~(0x1UL << (5U))));
}
static inline void LL_RNG_ClearFlag_SEIS(RNG_TypeDef *RNGx)
{
  ((RNGx->SR) = (~(0x1UL << (6U))));
}
static inline void LL_RNG_EnableIT(RNG_TypeDef *RNGx)
{
  ((RNGx->CR) |= ((0x1UL << (3U))));
}
static inline void LL_RNG_DisableIT(RNG_TypeDef *RNGx)
{
  ((RNGx->CR) &= ~((0x1UL << (3U))));
}
static inline uint32_t LL_RNG_IsEnabledIT(RNG_TypeDef *RNGx)
{
  return ((((RNGx->CR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RNG_ReadRandData32(RNG_TypeDef *RNGx)
{
  return (uint32_t)(((RNGx->DR)));
}
ErrorStatus LL_RNG_Init(RNG_TypeDef *RNGx, LL_RNG_InitTypeDef *RNG_InitStruct);
void LL_RNG_StructInit(LL_RNG_InitTypeDef *RNG_InitStruct);
ErrorStatus LL_RNG_DeInit(RNG_TypeDef *RNGx);
#define STM32WBxx_LL_RTC_H 
#define RTC_WRITE_PROTECTION_DISABLE ((uint8_t)0xFFU)
#define RTC_WRITE_PROTECTION_ENABLE_1 ((uint8_t)0xCAU)
#define RTC_WRITE_PROTECTION_ENABLE_2 ((uint8_t)0x53U)
#define RTC_OFFSET_WEEKDAY (uint32_t)24U
#define RTC_OFFSET_DAY (uint32_t)16U
#define RTC_OFFSET_MONTH (uint32_t)8U
#define RTC_OFFSET_HOUR (uint32_t)16U
#define RTC_OFFSET_MINUTE (uint32_t)8U
typedef struct
{
  uint32_t HourFormat;
  uint32_t AsynchPrescaler;
  uint32_t SynchPrescaler;
} LL_RTC_InitTypeDef;
typedef struct
{
  uint32_t TimeFormat;
  uint8_t Hours;
  uint8_t Minutes;
  uint8_t Seconds;
} LL_RTC_TimeTypeDef;
typedef struct
{
  uint8_t WeekDay;
  uint8_t Month;
  uint8_t Day;
  uint8_t Year;
} LL_RTC_DateTypeDef;
typedef struct
{
  LL_RTC_TimeTypeDef AlarmTime;
  uint32_t AlarmMask;
  uint32_t AlarmDateWeekDaySel;
  uint8_t AlarmDateWeekDay;
} LL_RTC_AlarmTypeDef;
#define LL_RTC_FORMAT_BIN 0x000000000U
#define LL_RTC_FORMAT_BCD 0x000000001U
#define LL_RTC_ALMA_DATEWEEKDAYSEL_DATE 0x00000000U
#define LL_RTC_ALMA_DATEWEEKDAYSEL_WEEKDAY RTC_ALRMAR_WDSEL
#define LL_RTC_ALMB_DATEWEEKDAYSEL_DATE 0x00000000U
#define LL_RTC_ALMB_DATEWEEKDAYSEL_WEEKDAY RTC_ALRMBR_WDSEL
#define LL_RTC_ISR_ITSF RTC_ISR_ITSF
#define LL_RTC_ISR_RECALPF RTC_ISR_RECALPF
#define LL_RTC_ISR_TAMP3F RTC_ISR_TAMP3F
#define LL_RTC_ISR_TAMP2F RTC_ISR_TAMP2F
#define LL_RTC_ISR_TAMP1F RTC_ISR_TAMP1F
#define LL_RTC_ISR_TSOVF RTC_ISR_TSOVF
#define LL_RTC_ISR_TSF RTC_ISR_TSF
#define LL_RTC_ISR_WUTF RTC_ISR_WUTF
#define LL_RTC_ISR_ALRBF RTC_ISR_ALRBF
#define LL_RTC_ISR_ALRAF RTC_ISR_ALRAF
#define LL_RTC_ISR_INITF RTC_ISR_INITF
#define LL_RTC_ISR_RSF RTC_ISR_RSF
#define LL_RTC_ISR_INITS RTC_ISR_INITS
#define LL_RTC_ISR_SHPF RTC_ISR_SHPF
#define LL_RTC_ISR_WUTWF RTC_ISR_WUTWF
#define LL_RTC_ISR_ALRBWF RTC_ISR_ALRBWF
#define LL_RTC_ISR_ALRAWF RTC_ISR_ALRAWF
#define LL_RTC_CR_TSIE RTC_CR_TSIE
#define LL_RTC_CR_WUTIE RTC_CR_WUTIE
#define LL_RTC_CR_ALRBIE RTC_CR_ALRBIE
#define LL_RTC_CR_ALRAIE RTC_CR_ALRAIE
#define LL_RTC_TAMPCR_TAMP3IE RTC_TAMPCR_TAMP3IE
#define LL_RTC_TAMPCR_TAMP2IE RTC_TAMPCR_TAMP2IE
#define LL_RTC_TAMPCR_TAMP1IE RTC_TAMPCR_TAMP1IE
#define LL_RTC_TAMPCR_TAMPIE RTC_TAMPCR_TAMPIE
#define LL_RTC_WEEKDAY_MONDAY ((uint8_t)0x01U)
#define LL_RTC_WEEKDAY_TUESDAY ((uint8_t)0x02U)
#define LL_RTC_WEEKDAY_WEDNESDAY ((uint8_t)0x03U)
#define LL_RTC_WEEKDAY_THURSDAY ((uint8_t)0x04U)
#define LL_RTC_WEEKDAY_FRIDAY ((uint8_t)0x05U)
#define LL_RTC_WEEKDAY_SATURDAY ((uint8_t)0x06U)
#define LL_RTC_WEEKDAY_SUNDAY ((uint8_t)0x07U)
#define LL_RTC_MONTH_JANUARY ((uint8_t)0x01U)
#define LL_RTC_MONTH_FEBRUARY ((uint8_t)0x02U)
#define LL_RTC_MONTH_MARCH ((uint8_t)0x03U)
#define LL_RTC_MONTH_APRIL ((uint8_t)0x04U)
#define LL_RTC_MONTH_MAY ((uint8_t)0x05U)
#define LL_RTC_MONTH_JUNE ((uint8_t)0x06U)
#define LL_RTC_MONTH_JULY ((uint8_t)0x07U)
#define LL_RTC_MONTH_AUGUST ((uint8_t)0x08U)
#define LL_RTC_MONTH_SEPTEMBER ((uint8_t)0x09U)
#define LL_RTC_MONTH_OCTOBER ((uint8_t)0x10U)
#define LL_RTC_MONTH_NOVEMBER ((uint8_t)0x11U)
#define LL_RTC_MONTH_DECEMBER ((uint8_t)0x12U)
#define LL_RTC_HOURFORMAT_24HOUR 0x00000000U
#define LL_RTC_HOURFORMAT_AMPM RTC_CR_FMT
#define LL_RTC_ALARMOUT_DISABLE 0x00000000U
#define LL_RTC_ALARMOUT_ALMA RTC_CR_OSEL_0
#define LL_RTC_ALARMOUT_ALMB RTC_CR_OSEL_1
#define LL_RTC_ALARMOUT_WAKEUP RTC_CR_OSEL
#define LL_RTC_ALARM_OUTPUTTYPE_OPENDRAIN 0x00000000U
#define LL_RTC_ALARM_OUTPUTTYPE_PUSHPULL RTC_OR_ALARMOUTTYPE
#define LL_RTC_OUTPUTPOLARITY_PIN_HIGH 0x00000000U
#define LL_RTC_OUTPUTPOLARITY_PIN_LOW RTC_CR_POL
#define LL_RTC_TIME_FORMAT_AM_OR_24 0x00000000U
#define LL_RTC_TIME_FORMAT_PM RTC_TR_PM
#define LL_RTC_SHIFT_SECOND_DELAY 0x00000000U
#define LL_RTC_SHIFT_SECOND_ADVANCE RTC_SHIFTR_ADD1S
#define LL_RTC_ALMA_MASK_NONE 0x00000000U
#define LL_RTC_ALMA_MASK_DATEWEEKDAY RTC_ALRMAR_MSK4
#define LL_RTC_ALMA_MASK_HOURS RTC_ALRMAR_MSK3
#define LL_RTC_ALMA_MASK_MINUTES RTC_ALRMAR_MSK2
#define LL_RTC_ALMA_MASK_SECONDS RTC_ALRMAR_MSK1
#define LL_RTC_ALMA_MASK_ALL (RTC_ALRMAR_MSK4 | RTC_ALRMAR_MSK3 | RTC_ALRMAR_MSK2 | RTC_ALRMAR_MSK1)
#define LL_RTC_ALMA_TIME_FORMAT_AM 0x00000000U
#define LL_RTC_ALMA_TIME_FORMAT_PM RTC_ALRMAR_PM
#define LL_RTC_ALMB_MASK_NONE 0x00000000U
#define LL_RTC_ALMB_MASK_DATEWEEKDAY RTC_ALRMBR_MSK4
#define LL_RTC_ALMB_MASK_HOURS RTC_ALRMBR_MSK3
#define LL_RTC_ALMB_MASK_MINUTES RTC_ALRMBR_MSK2
#define LL_RTC_ALMB_MASK_SECONDS RTC_ALRMBR_MSK1
#define LL_RTC_ALMB_MASK_ALL (RTC_ALRMBR_MSK4 | RTC_ALRMBR_MSK3 | RTC_ALRMBR_MSK2 | RTC_ALRMBR_MSK1)
#define LL_RTC_ALMB_TIME_FORMAT_AM 0x00000000U
#define LL_RTC_ALMB_TIME_FORMAT_PM RTC_ALRMBR_PM
#define LL_RTC_TIMESTAMP_EDGE_RISING 0x00000000U
#define LL_RTC_TIMESTAMP_EDGE_FALLING RTC_CR_TSEDGE
#define LL_RTC_TS_TIME_FORMAT_AM 0x00000000U
#define LL_RTC_TS_TIME_FORMAT_PM RTC_TSTR_PM
#define LL_RTC_TAMPER_1 RTC_TAMPCR_TAMP1E
#define LL_RTC_TAMPER_2 RTC_TAMPCR_TAMP2E
#define LL_RTC_TAMPER_3 RTC_TAMPCR_TAMP3E
#define LL_RTC_TAMPER_MASK_TAMPER1 RTC_TAMPCR_TAMP1MF
#define LL_RTC_TAMPER_MASK_TAMPER2 RTC_TAMPCR_TAMP2MF
#define LL_RTC_TAMPER_MASK_TAMPER3 RTC_TAMPCR_TAMP3MF
#define LL_RTC_TAMPER_NOERASE_TAMPER1 RTC_TAMPCR_TAMP1NOERASE
#define LL_RTC_TAMPER_NOERASE_TAMPER2 RTC_TAMPCR_TAMP2NOERASE
#define LL_RTC_TAMPER_NOERASE_TAMPER3 RTC_TAMPCR_TAMP3NOERASE
#define LL_RTC_TAMPER_DURATION_1RTCCLK 0x00000000U
#define LL_RTC_TAMPER_DURATION_2RTCCLK RTC_TAMPCR_TAMPPRCH_0
#define LL_RTC_TAMPER_DURATION_4RTCCLK RTC_TAMPCR_TAMPPRCH_1
#define LL_RTC_TAMPER_DURATION_8RTCCLK RTC_TAMPCR_TAMPPRCH
#define LL_RTC_TAMPER_FILTER_DISABLE 0x00000000U
#define LL_RTC_TAMPER_FILTER_2SAMPLE RTC_TAMPCR_TAMPFLT_0
#define LL_RTC_TAMPER_FILTER_4SAMPLE RTC_TAMPCR_TAMPFLT_1
#define LL_RTC_TAMPER_FILTER_8SAMPLE RTC_TAMPCR_TAMPFLT
#define LL_RTC_TAMPER_SAMPLFREQDIV_32768 0x00000000U
#define LL_RTC_TAMPER_SAMPLFREQDIV_16384 RTC_TAMPCR_TAMPFREQ_0
#define LL_RTC_TAMPER_SAMPLFREQDIV_8192 RTC_TAMPCR_TAMPFREQ_1
#define LL_RTC_TAMPER_SAMPLFREQDIV_4096 (RTC_TAMPCR_TAMPFREQ_1 | RTC_TAMPCR_TAMPFREQ_0)
#define LL_RTC_TAMPER_SAMPLFREQDIV_2048 RTC_TAMPCR_TAMPFREQ_2
#define LL_RTC_TAMPER_SAMPLFREQDIV_1024 (RTC_TAMPCR_TAMPFREQ_2 | RTC_TAMPCR_TAMPFREQ_0)
#define LL_RTC_TAMPER_SAMPLFREQDIV_512 (RTC_TAMPCR_TAMPFREQ_2 | RTC_TAMPCR_TAMPFREQ_1)
#define LL_RTC_TAMPER_SAMPLFREQDIV_256 RTC_TAMPCR_TAMPFREQ
#define LL_RTC_TAMPER_ACTIVELEVEL_TAMP1 RTC_TAMPCR_TAMP1TRG
#define LL_RTC_TAMPER_ACTIVELEVEL_TAMP2 RTC_TAMPCR_TAMP2TRG
#define LL_RTC_TAMPER_ACTIVELEVEL_TAMP3 RTC_TAMPCR_TAMP3TRG
#define LL_RTC_WAKEUPCLOCK_DIV_16 0x00000000U
#define LL_RTC_WAKEUPCLOCK_DIV_8 (RTC_CR_WUCKSEL_0)
#define LL_RTC_WAKEUPCLOCK_DIV_4 (RTC_CR_WUCKSEL_1)
#define LL_RTC_WAKEUPCLOCK_DIV_2 (RTC_CR_WUCKSEL_1 | RTC_CR_WUCKSEL_0)
#define LL_RTC_WAKEUPCLOCK_CKSPRE (RTC_CR_WUCKSEL_2)
#define LL_RTC_WAKEUPCLOCK_CKSPRE_WUT (RTC_CR_WUCKSEL_2 | RTC_CR_WUCKSEL_1)
#define LL_RTC_BKP_DR0 0x00000000U
#define LL_RTC_BKP_DR1 0x00000001U
#define LL_RTC_BKP_DR2 0x00000002U
#define LL_RTC_BKP_DR3 0x00000003U
#define LL_RTC_BKP_DR4 0x00000004U
#define LL_RTC_BKP_DR5 0x00000005U
#define LL_RTC_BKP_DR6 0x00000006U
#define LL_RTC_BKP_DR7 0x00000007U
#define LL_RTC_BKP_DR8 0x00000008U
#define LL_RTC_BKP_DR9 0x00000009U
#define LL_RTC_BKP_DR10 0x0000000AU
#define LL_RTC_BKP_DR11 0x0000000BU
#define LL_RTC_BKP_DR12 0x0000000CU
#define LL_RTC_BKP_DR13 0x0000000DU
#define LL_RTC_BKP_DR14 0x0000000EU
#define LL_RTC_BKP_DR15 0x0000000FU
#define LL_RTC_BKP_DR16 0x00000010U
#define LL_RTC_BKP_DR17 0x00000011U
#define LL_RTC_BKP_DR18 0x00000012U
#define LL_RTC_BKP_DR19 0x00000013U
#define LL_RTC_CALIB_OUTPUT_NONE 0x00000000U
#define LL_RTC_CALIB_OUTPUT_1HZ (RTC_CR_COE | RTC_CR_COSEL)
#define LL_RTC_CALIB_OUTPUT_512HZ (RTC_CR_COE)
#define LL_RTC_CALIB_INSERTPULSE_NONE 0x00000000U
#define LL_RTC_CALIB_INSERTPULSE_SET RTC_CALR_CALP
#define LL_RTC_CALIB_PERIOD_32SEC 0x00000000U
#define LL_RTC_CALIB_PERIOD_16SEC RTC_CALR_CALW16
#define LL_RTC_CALIB_PERIOD_8SEC RTC_CALR_CALW8
#define LL_RTC_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_RTC_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
#define __LL_RTC_CONVERT_BIN2BCD(__VALUE__) (uint8_t)((((__VALUE__) / 10U) << 4U) | ((__VALUE__) % 10U))
#define __LL_RTC_CONVERT_BCD2BIN(__VALUE__) (uint8_t)((((uint8_t)((__VALUE__) & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U ) + ((__VALUE__) & (uint8_t)0x0FU))
#define __LL_RTC_GET_WEEKDAY(__RTC_DATE__) (((__RTC_DATE__) >> RTC_OFFSET_WEEKDAY) & 0x000000FFU)
#define __LL_RTC_GET_YEAR(__RTC_DATE__) ((__RTC_DATE__) & 0x000000FFU)
#define __LL_RTC_GET_MONTH(__RTC_DATE__) (((__RTC_DATE__) >>RTC_OFFSET_MONTH) & 0x000000FFU)
#define __LL_RTC_GET_DAY(__RTC_DATE__) (((__RTC_DATE__) >>RTC_OFFSET_DAY) & 0x000000FFU)
#define __LL_RTC_GET_HOUR(__RTC_TIME__) (((__RTC_TIME__) >> RTC_OFFSET_HOUR) & 0x000000FFU)
#define __LL_RTC_GET_MINUTE(__RTC_TIME__) (((__RTC_TIME__) >> RTC_OFFSET_MINUTE) & 0x000000FFU)
#define __LL_RTC_GET_SECOND(__RTC_TIME__) ((__RTC_TIME__) & 0x000000FFU)
static inline void LL_RTC_SetHourFormat(RTC_TypeDef *RTCx, uint32_t HourFormat)
{
  (((RTCx->CR)) = ((((((RTCx->CR))) & (~((0x1UL << (6U))))) | (HourFormat))));
}
static inline uint32_t LL_RTC_GetHourFormat(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->CR) & ((0x1UL << (6U)))));
}
static inline void LL_RTC_SetAlarmOutEvent(RTC_TypeDef *RTCx, uint32_t AlarmOutput)
{
  (((RTCx->CR)) = ((((((RTCx->CR))) & (~((0x3UL << (21U))))) | (AlarmOutput))));
}
static inline uint32_t LL_RTC_GetAlarmOutEvent(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->CR) & ((0x3UL << (21U)))));
}
static inline void LL_RTC_SetAlarmOutputType(RTC_TypeDef *RTCx, uint32_t Output)
{
  (((RTCx->OR)) = ((((((RTCx->OR))) & (~((0x1UL << (0U))))) | (Output))));
}
static inline uint32_t LL_RTC_GetAlarmOutputType(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->OR) & ((0x1UL << (0U)))));
}
static inline void LL_RTC_EnableInitMode(RTC_TypeDef *RTCx)
{
  ((RTCx->ISR) = (0xFFFFFFFFU));
}
static inline void LL_RTC_DisableInitMode(RTC_TypeDef *RTCx)
{
  ((RTCx->ISR) = ((uint32_t)~(0x1UL << (7U))));
}
static inline void LL_RTC_SetOutputPolarity(RTC_TypeDef *RTCx, uint32_t Polarity)
{
  (((RTCx->CR)) = ((((((RTCx->CR))) & (~((0x1UL << (20U))))) | (Polarity))));
}
static inline uint32_t LL_RTC_GetOutputPolarity(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->CR) & ((0x1UL << (20U)))));
}
static inline void LL_RTC_EnableShadowRegBypass(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (5U))));
}
static inline void LL_RTC_DisableShadowRegBypass(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) &= ~((0x1UL << (5U))));
}
static inline uint32_t LL_RTC_IsShadowRegBypassEnabled(RTC_TypeDef *RTCx)
{
  return ((((RTCx->CR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline void LL_RTC_EnableRefClock(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (4U))));
}
static inline void LL_RTC_DisableRefClock(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) &= ~((0x1UL << (4U))));
}
static inline void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
  (((RTCx->PRER)) = ((((((RTCx->PRER))) & (~((0x7FUL << (16U))))) | (AsynchPrescaler << (16U)))));
}
static inline void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
  (((RTCx->PRER)) = ((((((RTCx->PRER))) & (~((0x7FFFUL << (0U))))) | (SynchPrescaler))));
}
static inline uint32_t LL_RTC_GetAsynchPrescaler(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->PRER) & ((0x7FUL << (16U)))) >> (16U));
}
static inline uint32_t LL_RTC_GetSynchPrescaler(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->PRER) & ((0x7FFFUL << (0U)))));
}
static inline void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
  ((RTCx->WPR) = (((uint8_t)0xFFU)));
}
static inline void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  ((RTCx->WPR) = (((uint8_t)0xCAU)));
  ((RTCx->WPR) = (((uint8_t)0x53U)));
}
static inline void LL_RTC_EnableOutRemap(RTC_TypeDef *RTCx)
{
  ((RTCx->OR) |= ((0x1UL << (1U))));
}
static inline void LL_RTC_DisableOutRemap(RTC_TypeDef *RTCx)
{
  ((RTCx->OR) &= ~((0x1UL << (1U))));
}
static inline void LL_RTC_TIME_SetFormat(RTC_TypeDef *RTCx, uint32_t TimeFormat)
{
  (((RTCx->TR)) = ((((((RTCx->TR))) & (~((0x1UL << (22U))))) | (TimeFormat))));
}
static inline uint32_t LL_RTC_TIME_GetFormat(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TR) & ((0x1UL << (22U)))));
}
static inline void LL_RTC_TIME_SetHour(RTC_TypeDef *RTCx, uint32_t Hours)
{
  (((RTCx->TR)) = ((((((RTCx->TR))) & (~(((0x3UL << (20U)) | (0xFUL << (16U)))))) | ((((Hours & 0xF0U) << ((20U) - 4U)) | ((Hours & 0x0FU) << (16U)))))));
}
static inline uint32_t LL_RTC_TIME_GetHour(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->TR) & (((0x3UL << (20U)) | (0xFUL << (16U)))));
  return (uint32_t)((((temp & (0x3UL << (20U))) >> (20U)) << 4U) | ((temp & (0xFUL << (16U))) >> (16U)));
}
static inline void LL_RTC_TIME_SetMinute(RTC_TypeDef *RTCx, uint32_t Minutes)
{
  (((RTCx->TR)) = ((((((RTCx->TR))) & (~(((0x7UL << (12U)) | (0xFUL << (8U)))))) | ((((Minutes & 0xF0U) << ((12U) - 4U)) | ((Minutes & 0x0FU) << (8U)))))));
}
static inline uint32_t LL_RTC_TIME_GetMinute(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->TR) & (((0x7UL << (12U)) | (0xFUL << (8U)))));
  return (uint32_t)((((temp & (0x7UL << (12U))) >> (12U)) << 4U) | ((temp & (0xFUL << (8U))) >> (8U)));
}
static inline void LL_RTC_TIME_SetSecond(RTC_TypeDef *RTCx, uint32_t Seconds)
{
  (((RTCx->TR)) = ((((((RTCx->TR))) & (~(((0x7UL << (4U)) | (0xFUL << (0U)))))) | ((((Seconds & 0xF0U) << ((4U) - 4U)) | ((Seconds & 0x0FU) << (0U)))))));
}
static inline uint32_t LL_RTC_TIME_GetSecond(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->TR) & (((0x7UL << (4U)) | (0xFUL << (0U)))));
  return (uint32_t)((((temp & (0x7UL << (4U))) >> (4U)) << 4U) | ((temp & (0xFUL << (0U))) >> (0U)));
}
static inline void LL_RTC_TIME_Config(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes,
                                        uint32_t Seconds)
{
  uint32_t temp;
  temp = Format12_24 | (((Hours & 0xF0U) << ((20U) - 4U)) | ((Hours & 0x0FU) << (16U))) | (((Minutes & 0xF0U) << ((12U) - 4U)) | ((Minutes & 0x0FU) << (8U))) | (((Seconds & 0xF0U) << ((4U) - 4U)) | ((Seconds & 0x0FU) << (0U)));
  (((RTCx->TR)) = ((((((RTCx->TR))) & (~(((0x1UL << (22U)) | (0x3UL << (20U)) | (0xFUL << (16U)) | (0x7UL << (12U)) | (0xFUL << (8U)) | (0x7UL << (4U)) | (0xFUL << (0U)))))) | (temp))));
}
static inline uint32_t LL_RTC_TIME_Get(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->TR) & (((0x3UL << (20U)) | (0xFUL << (16U)) | (0x7UL << (12U)) | (0xFUL << (8U)) | (0x7UL << (4U)) | (0xFUL << (0U)))));
  return (uint32_t)((((((temp & (0x3UL << (20U))) >> (20U)) << 4U) | ((temp & (0xFUL << (16U))) >> (16U))) << (uint32_t)16U) | (((((temp & (0x7UL << (12U))) >> (12U)) << 4U) | ((temp & (0xFUL << (8U))) >> (8U))) << (uint32_t)8U) | ((((temp & (0x7UL << (4U))) >> (4U)) << 4U) | ((temp & (0xFUL << (0U))) >> (0U))));
}
static inline void LL_RTC_TIME_EnableDayLightStore(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (18U))));
}
static inline void LL_RTC_TIME_DisableDayLightStore(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) &= ~((0x1UL << (18U))));
}
static inline uint32_t LL_RTC_TIME_IsDayLightStoreEnabled(RTC_TypeDef *RTCx)
{
  return ((((RTCx->CR) & ((0x1UL << (18U)))) == ((0x1UL << (18U)))) ? 1UL : 0UL);
}
static inline void LL_RTC_TIME_DecHour(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (17U))));
}
static inline void LL_RTC_TIME_IncHour(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (16U))));
}
static inline uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->SSR) & ((0xFFFFUL << (0U)))));
}
static inline void LL_RTC_TIME_Synchronize(RTC_TypeDef *RTCx, uint32_t ShiftSecond, uint32_t Fraction)
{
  ((RTCx->SHIFTR) = (ShiftSecond | Fraction));
}
static inline void LL_RTC_DATE_SetYear(RTC_TypeDef *RTCx, uint32_t Year)
{
  (((RTCx->DR)) = ((((((RTCx->DR))) & (~(((0xFUL << (20U)) | (0xFUL << (16U)))))) | ((((Year & 0xF0U) << ((20U) - 4U)) | ((Year & 0x0FU) << (16U)))))));
}
static inline uint32_t LL_RTC_DATE_GetYear(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->DR) & (((0xFUL << (20U)) | (0xFUL << (16U)))));
  return (uint32_t)((((temp & (0xFUL << (20U))) >> (20U)) << 4U) | ((temp & (0xFUL << (16U))) >> (16U)));
}
static inline void LL_RTC_DATE_SetWeekDay(RTC_TypeDef *RTCx, uint32_t WeekDay)
{
  (((RTCx->DR)) = ((((((RTCx->DR))) & (~((0x7UL << (13U))))) | (WeekDay << (13U)))));
}
static inline uint32_t LL_RTC_DATE_GetWeekDay(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->DR) & ((0x7UL << (13U)))) >> (13U));
}
static inline void LL_RTC_DATE_SetMonth(RTC_TypeDef *RTCx, uint32_t Month)
{
  (((RTCx->DR)) = ((((((RTCx->DR))) & (~(((0x1UL << (12U)) | (0xFUL << (8U)))))) | ((((Month & 0xF0U) << ((12U) - 4U)) | ((Month & 0x0FU) << (8U)))))));
}
static inline uint32_t LL_RTC_DATE_GetMonth(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->DR) & (((0x1UL << (12U)) | (0xFUL << (8U)))));
  return (uint32_t)((((temp & (0x1UL << (12U))) >> (12U)) << 4U) | ((temp & (0xFUL << (8U))) >> (8U)));
}
static inline void LL_RTC_DATE_SetDay(RTC_TypeDef *RTCx, uint32_t Day)
{
  (((RTCx->DR)) = ((((((RTCx->DR))) & (~(((0x3UL << (4U)) | (0xFUL << (0U)))))) | ((((Day & 0xF0U) << ((4U) - 4U)) | ((Day & 0x0FU) << (0U)))))));
}
static inline uint32_t LL_RTC_DATE_GetDay(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->DR) & (((0x3UL << (4U)) | (0xFUL << (0U)))));
  return (uint32_t)((((temp & (0x3UL << (4U))) >> (4U)) << 4U) | ((temp & (0xFUL << (0U))) >> (0U)));
}
static inline void LL_RTC_DATE_Config(RTC_TypeDef *RTCx, uint32_t WeekDay, uint32_t Day, uint32_t Month,
                                        uint32_t Year)
{
  uint32_t temp;
  temp = (WeekDay << (13U)) | (((Year & 0xF0U) << ((20U) - 4U)) | ((Year & 0x0FU) << (16U))) | (((Month & 0xF0U) << ((12U) - 4U)) | ((Month & 0x0FU) << (8U))) | (((Day & 0xF0U) << ((4U) - 4U)) | ((Day & 0x0FU) << (0U)));
  (((RTCx->DR)) = ((((((RTCx->DR))) & (~(((0x7UL << (13U)) | (0x1UL << (12U)) | (0xFUL << (8U)) | (0x3UL << (4U)) | (0xFUL << (0U)) | (0xFUL << (20U)) | (0xFUL << (16U)))))) | (temp))));
}
static inline uint32_t LL_RTC_DATE_Get(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->DR) & (((0x7UL << (13U)) | (0x1UL << (12U)) | (0xFUL << (8U)) | (0x3UL << (4U)) | (0xFUL << (0U)) | (0xFUL << (20U)) | (0xFUL << (16U)))));
  return (uint32_t)((((temp & (0x7UL << (13U))) >> (13U)) << (uint32_t)24U) | (((((temp & (0x3UL << (4U))) >> (4U)) << 4U) | ((temp & (0xFUL << (0U))) >> (0U))) << (uint32_t)16U) | (((((temp & (0x1UL << (12U))) >> (12U)) << 4U) | ((temp & (0xFUL << (8U))) >> (8U))) << (uint32_t)8U) | ((((temp & (0xFUL << (20U))) >> (20U)) << 4U) | ((temp & (0xFUL << (16U))) >> (16U))));
}
static inline void LL_RTC_ALMA_Enable(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (8U))));
}
static inline void LL_RTC_ALMA_Disable(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) &= ~((0x1UL << (8U))));
}
static inline void LL_RTC_ALMA_SetMask(RTC_TypeDef *RTCx, uint32_t Mask)
{
  (((RTCx->ALRMAR)) = ((((((RTCx->ALRMAR))) & (~((0x1UL << (31U)) | (0x1UL << (23U)) | (0x1UL << (15U)) | (0x1UL << (7U))))) | (Mask))));
}
static inline uint32_t LL_RTC_ALMA_GetMask(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->ALRMAR) & ((0x1UL << (31U)) | (0x1UL << (23U)) | (0x1UL << (15U)) | (0x1UL << (7U)))));
}
static inline void LL_RTC_ALMA_EnableWeekday(RTC_TypeDef *RTCx)
{
  ((RTCx->ALRMAR) |= ((0x1UL << (30U))));
}
static inline void LL_RTC_ALMA_DisableWeekday(RTC_TypeDef *RTCx)
{
  ((RTCx->ALRMAR) &= ~((0x1UL << (30U))));
}
static inline void LL_RTC_ALMA_SetDay(RTC_TypeDef *RTCx, uint32_t Day)
{
  (((RTCx->ALRMAR)) = ((((((RTCx->ALRMAR))) & (~(((0x3UL << (28U)) | (0xFUL << (24U)))))) | ((((Day & 0xF0U) << ((28U) - 4U)) | ((Day & 0x0FU) << (24U)))))));
}
static inline uint32_t LL_RTC_ALMA_GetDay(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->ALRMAR) & (((0x3UL << (28U)) | (0xFUL << (24U)))));
  return (uint32_t)((((temp & (0x3UL << (28U))) >> (28U)) << 4U) | ((temp & (0xFUL << (24U))) >> (24U)));
}
static inline void LL_RTC_ALMA_SetWeekDay(RTC_TypeDef *RTCx, uint32_t WeekDay)
{
  (((RTCx->ALRMAR)) = ((((((RTCx->ALRMAR))) & (~((0xFUL << (24U))))) | (WeekDay << (24U)))));
}
static inline uint32_t LL_RTC_ALMA_GetWeekDay(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->ALRMAR) & ((0xFUL << (24U)))) >> (24U));
}
static inline void LL_RTC_ALMA_SetTimeFormat(RTC_TypeDef *RTCx, uint32_t TimeFormat)
{
  (((RTCx->ALRMAR)) = ((((((RTCx->ALRMAR))) & (~((0x1UL << (22U))))) | (TimeFormat))));
}
static inline uint32_t LL_RTC_ALMA_GetTimeFormat(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->ALRMAR) & ((0x1UL << (22U)))));
}
static inline void LL_RTC_ALMA_SetHour(RTC_TypeDef *RTCx, uint32_t Hours)
{
  (((RTCx->ALRMAR)) = ((((((RTCx->ALRMAR))) & (~(((0x3UL << (20U)) | (0xFUL << (16U)))))) | ((((Hours & 0xF0U) << ((20U) - 4U)) | ((Hours & 0x0FU) << (16U)))))));
}
static inline uint32_t LL_RTC_ALMA_GetHour(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->ALRMAR) & (((0x3UL << (20U)) | (0xFUL << (16U)))));
  return (uint32_t)((((temp & (0x3UL << (20U))) >> (20U)) << 4U) | ((temp & (0xFUL << (16U))) >> (16U)));
}
static inline void LL_RTC_ALMA_SetMinute(RTC_TypeDef *RTCx, uint32_t Minutes)
{
  (((RTCx->ALRMAR)) = ((((((RTCx->ALRMAR))) & (~(((0x7UL << (12U)) | (0xFUL << (8U)))))) | ((((Minutes & 0xF0U) << ((12U) - 4U)) | ((Minutes & 0x0FU) << (8U)))))));
}
static inline uint32_t LL_RTC_ALMA_GetMinute(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->ALRMAR) & (((0x7UL << (12U)) | (0xFUL << (8U)))));
  return (uint32_t)((((temp & (0x7UL << (12U))) >> (12U)) << 4U) | ((temp & (0xFUL << (8U))) >> (8U)));
}
static inline void LL_RTC_ALMA_SetSecond(RTC_TypeDef *RTCx, uint32_t Seconds)
{
  (((RTCx->ALRMAR)) = ((((((RTCx->ALRMAR))) & (~(((0x7UL << (4U)) | (0xFUL << (0U)))))) | ((((Seconds & 0xF0U) << ((4U) - 4U)) | ((Seconds & 0x0FU) << (0U)))))));
}
static inline uint32_t LL_RTC_ALMA_GetSecond(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->ALRMAR) & (((0x7UL << (4U)) | (0xFUL << (0U)))));
  return (uint32_t)((((temp & (0x7UL << (4U))) >> (4U)) << 4U) | ((temp & (0xFUL << (0U))) >> (0U)));
}
static inline void LL_RTC_ALMA_ConfigTime(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes,
                                            uint32_t Seconds)
{
  uint32_t temp;
  temp = Format12_24 | (((Hours & 0xF0U) << ((20U) - 4U)) | ((Hours & 0x0FU) << (16U))) | (((Minutes & 0xF0U) << ((12U) - 4U)) | ((Minutes & 0x0FU) << (8U))) | (((Seconds & 0xF0U) << ((4U) - 4U)) | ((Seconds & 0x0FU) << (0U)));
  (((RTCx->ALRMAR)) = ((((((RTCx->ALRMAR))) & (~((0x1UL << (22U)) | (0x3UL << (20U)) | (0xFUL << (16U)) | (0x7UL << (12U)) | (0xFUL << (8U)) | (0x7UL << (4U)) | (0xFUL << (0U))))) | (temp))));
}
static inline uint32_t LL_RTC_ALMA_GetTime(RTC_TypeDef *RTCx)
{
  return (uint32_t)((LL_RTC_ALMA_GetHour(RTCx) << (uint32_t)16U) | (LL_RTC_ALMA_GetMinute(RTCx) << (uint32_t)8U) | LL_RTC_ALMA_GetSecond(RTCx));
}
static inline void LL_RTC_ALMA_SetSubSecondMask(RTC_TypeDef *RTCx, uint32_t Mask)
{
  (((RTCx->ALRMASSR)) = ((((((RTCx->ALRMASSR))) & (~((0xFUL << (24U))))) | (Mask << (24U)))));
}
static inline uint32_t LL_RTC_ALMA_GetSubSecondMask(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->ALRMASSR) & ((0xFUL << (24U)))) >> (24U));
}
static inline void LL_RTC_ALMA_SetSubSecond(RTC_TypeDef *RTCx, uint32_t Subsecond)
{
  (((RTCx->ALRMASSR)) = ((((((RTCx->ALRMASSR))) & (~((0x7FFFUL << (0U))))) | (Subsecond))));
}
static inline uint32_t LL_RTC_ALMA_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->ALRMASSR) & ((0x7FFFUL << (0U)))));
}
static inline void LL_RTC_ALMB_Enable(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (9U))));
}
static inline void LL_RTC_ALMB_Disable(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) &= ~((0x1UL << (9U))));
}
static inline void LL_RTC_ALMB_SetMask(RTC_TypeDef *RTCx, uint32_t Mask)
{
  (((RTCx->ALRMBR)) = ((((((RTCx->ALRMBR))) & (~((0x1UL << (31U)) | (0x1UL << (23U)) | (0x1UL << (15U)) | (0x1UL << (7U))))) | (Mask))));
}
static inline uint32_t LL_RTC_ALMB_GetMask(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->ALRMBR) & ((0x1UL << (31U)) | (0x1UL << (23U)) | (0x1UL << (15U)) | (0x1UL << (7U)))));
}
static inline void LL_RTC_ALMB_EnableWeekday(RTC_TypeDef *RTCx)
{
  ((RTCx->ALRMBR) |= ((0x1UL << (30U))));
}
static inline void LL_RTC_ALMB_DisableWeekday(RTC_TypeDef *RTCx)
{
  ((RTCx->ALRMBR) &= ~((0x1UL << (30U))));
}
static inline void LL_RTC_ALMB_SetDay(RTC_TypeDef *RTCx, uint32_t Day)
{
  (((RTCx->ALRMBR)) = ((((((RTCx->ALRMBR))) & (~(((0x3UL << (28U)) | (0xFUL << (24U)))))) | ((((Day & 0xF0U) << ((28U) - 4U)) | ((Day & 0x0FU) << (24U)))))));
}
static inline uint32_t LL_RTC_ALMB_GetDay(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->ALRMBR) & (((0x3UL << (28U)) | (0xFUL << (24U)))));
  return (uint32_t)((((temp & (0x3UL << (28U))) >> (28U)) << 4U) | ((temp & (0xFUL << (24U))) >> (24U)));
}
static inline void LL_RTC_ALMB_SetWeekDay(RTC_TypeDef *RTCx, uint32_t WeekDay)
{
  (((RTCx->ALRMBR)) = ((((((RTCx->ALRMBR))) & (~((0xFUL << (24U))))) | (WeekDay << (24U)))));
}
static inline uint32_t LL_RTC_ALMB_GetWeekDay(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->ALRMBR) & ((0xFUL << (24U)))) >> (24U));
}
static inline void LL_RTC_ALMB_SetTimeFormat(RTC_TypeDef *RTCx, uint32_t TimeFormat)
{
  (((RTCx->ALRMBR)) = ((((((RTCx->ALRMBR))) & (~((0x1UL << (22U))))) | (TimeFormat))));
}
static inline uint32_t LL_RTC_ALMB_GetTimeFormat(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->ALRMBR) & ((0x1UL << (22U)))));
}
static inline void LL_RTC_ALMB_SetHour(RTC_TypeDef *RTCx, uint32_t Hours)
{
  (((RTCx->ALRMBR)) = ((((((RTCx->ALRMBR))) & (~(((0x3UL << (20U)) | (0xFUL << (16U)))))) | ((((Hours & 0xF0U) << ((20U) - 4U)) | ((Hours & 0x0FU) << (16U)))))));
}
static inline uint32_t LL_RTC_ALMB_GetHour(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->ALRMBR) & (((0x3UL << (20U)) | (0xFUL << (16U)))));
  return (uint32_t)((((temp & (0x3UL << (20U))) >> (20U)) << 4U) | ((temp & (0xFUL << (16U))) >> (16U)));
}
static inline void LL_RTC_ALMB_SetMinute(RTC_TypeDef *RTCx, uint32_t Minutes)
{
  (((RTCx->ALRMBR)) = ((((((RTCx->ALRMBR))) & (~(((0x7UL << (12U)) | (0xFUL << (8U)))))) | ((((Minutes & 0xF0U) << ((12U) - 4U)) | ((Minutes & 0x0FU) << (8U)))))));
}
static inline uint32_t LL_RTC_ALMB_GetMinute(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->ALRMBR) & (((0x7UL << (12U)) | (0xFUL << (8U)))));
  return (uint32_t)((((temp & (0x7UL << (12U))) >> (12U)) << 4U) | ((temp & (0xFUL << (8U))) >> (8U)));
}
static inline void LL_RTC_ALMB_SetSecond(RTC_TypeDef *RTCx, uint32_t Seconds)
{
  (((RTCx->ALRMBR)) = ((((((RTCx->ALRMBR))) & (~(((0x7UL << (4U)) | (0xFUL << (0U)))))) | ((((Seconds & 0xF0U) << ((4U) - 4U)) | ((Seconds & 0x0FU) << (0U)))))));
}
static inline uint32_t LL_RTC_ALMB_GetSecond(RTC_TypeDef *RTCx)
{
  uint32_t temp;
  temp = ((RTCx->ALRMBR) & (((0x7UL << (4U)) | (0xFUL << (0U)))));
  return (uint32_t)((((temp & (0x7UL << (4U))) >> (4U)) << 4U) | ((temp & (0xFUL << (0U))) >> (0U)));
}
static inline void LL_RTC_ALMB_ConfigTime(RTC_TypeDef *RTCx, uint32_t Format12_24, uint32_t Hours, uint32_t Minutes,
                                            uint32_t Seconds)
{
  uint32_t temp;
  temp = Format12_24 | (((Hours & 0xF0U) << ((20U) - 4U)) | ((Hours & 0x0FU) << (16U))) | (((Minutes & 0xF0U) << ((12U) - 4U)) | ((Minutes & 0x0FU) << (8U))) | (((Seconds & 0xF0U) << ((4U) - 4U)) | ((Seconds & 0x0FU) << (0U)));
  (((RTCx->ALRMBR)) = ((((((RTCx->ALRMBR))) & (~((0x1UL << (22U)) | (0x3UL << (20U)) | (0xFUL << (16U)) | (0x7UL << (12U)) | (0xFUL << (8U)) | (0x7UL << (4U)) | (0xFUL << (0U))))) | (temp))));
}
static inline uint32_t LL_RTC_ALMB_GetTime(RTC_TypeDef *RTCx)
{
  return (uint32_t)((LL_RTC_ALMB_GetHour(RTCx) << (uint32_t)16U) | (LL_RTC_ALMB_GetMinute(RTCx) << (uint32_t)8U) | LL_RTC_ALMB_GetSecond(RTCx));
}
static inline void LL_RTC_ALMB_SetSubSecondMask(RTC_TypeDef *RTCx, uint32_t Mask)
{
  (((RTCx->ALRMBSSR)) = ((((((RTCx->ALRMBSSR))) & (~((0xFUL << (24U))))) | (Mask << (24U)))));
}
static inline uint32_t LL_RTC_ALMB_GetSubSecondMask(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->ALRMBSSR) & ((0xFUL << (24U)))) >> (24U));
}
static inline void LL_RTC_ALMB_SetSubSecond(RTC_TypeDef *RTCx, uint32_t Subsecond)
{
  (((RTCx->ALRMBSSR)) = ((((((RTCx->ALRMBSSR))) & (~((0x7FFFUL << (0U))))) | (Subsecond))));
}
static inline uint32_t LL_RTC_ALMB_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->ALRMBSSR) & ((0x7FFFUL << (0U)))));
}
static inline void LL_RTC_TS_EnableInternalEvent(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (24U))));
}
static inline void LL_RTC_TS_DisableInternalEvent(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) &= ~((0x1UL << (24U))));
}
static inline void LL_RTC_TS_Enable(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (11U))));
}
static inline void LL_RTC_TS_Disable(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) &= ~((0x1UL << (11U))));
}
static inline void LL_RTC_TS_SetActiveEdge(RTC_TypeDef *RTCx, uint32_t Edge)
{
  (((RTCx->CR)) = ((((((RTCx->CR))) & (~((0x1UL << (3U))))) | (Edge))));
}
static inline uint32_t LL_RTC_TS_GetActiveEdge(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->CR) & ((0x1UL << (3U)))));
}
static inline uint32_t LL_RTC_TS_GetTimeFormat(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TSTR) & ((0x1UL << (22U)))));
}
static inline uint32_t LL_RTC_TS_GetHour(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TSTR) & ((0x3UL << (20U)) | (0xFUL << (16U)))) >> (16U));
}
static inline uint32_t LL_RTC_TS_GetMinute(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TSTR) & ((0x7UL << (12U)) | (0xFUL << (8U)))) >> (8U));
}
static inline uint32_t LL_RTC_TS_GetSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TSTR) & ((0x7UL << (4U)) | (0xFUL << (0U)))));
}
static inline uint32_t LL_RTC_TS_GetTime(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TSTR) & ((0x3UL << (20U)) | (0xFUL << (16U)) | (0x7UL << (12U)) | (0xFUL << (8U)) | (0x7UL << (4U)) | (0xFUL << (0U)))));
}
static inline uint32_t LL_RTC_TS_GetWeekDay(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TSDR) & ((0x7UL << (13U)))) >> (13U));
}
static inline uint32_t LL_RTC_TS_GetMonth(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TSDR) & ((0x1UL << (12U)) | (0xFUL << (8U)))) >> (8U));
}
static inline uint32_t LL_RTC_TS_GetDay(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TSDR) & ((0x3UL << (4U)) | (0xFUL << (0U)))));
}
static inline uint32_t LL_RTC_TS_GetDate(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TSDR) & ((0x7UL << (13U)) | (0x1UL << (12U)) | (0xFUL << (8U)) | (0x3UL << (4U)) | (0xFUL << (0U)))));
}
static inline uint32_t LL_RTC_TS_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TSSSR) & ((0xFFFFUL << (0U)))));
}
static inline void LL_RTC_TS_EnableOnTamper(RTC_TypeDef *RTCx)
{
  ((RTCx->TAMPCR) |= ((0x1UL << (7U))));
}
static inline void LL_RTC_TS_DisableOnTamper(RTC_TypeDef *RTCx)
{
  ((RTCx->TAMPCR) &= ~((0x1UL << (7U))));
}
static inline void LL_RTC_TAMPER_Enable(RTC_TypeDef *RTCx, uint32_t Tamper)
{
  ((RTCx->TAMPCR) |= (Tamper));
}
static inline void LL_RTC_TAMPER_Disable(RTC_TypeDef *RTCx, uint32_t Tamper)
{
  ((RTCx->TAMPCR) &= ~(Tamper));
}
static inline void LL_RTC_TAMPER_EnableMask(RTC_TypeDef *RTCx, uint32_t Mask)
{
  ((RTCx->TAMPCR) |= (Mask));
}
static inline void LL_RTC_TAMPER_DisableMask(RTC_TypeDef *RTCx, uint32_t Mask)
{
  ((RTCx->TAMPCR) &= ~(Mask));
}
static inline void LL_RTC_TAMPER_EnableEraseBKP(RTC_TypeDef *RTCx, uint32_t Tamper)
{
  ((RTCx->TAMPCR) &= ~(Tamper));
}
static inline void LL_RTC_TAMPER_DisableEraseBKP(RTC_TypeDef *RTCx, uint32_t Tamper)
{
  ((RTCx->TAMPCR) |= (Tamper));
}
static inline void LL_RTC_TAMPER_DisablePullUp(RTC_TypeDef *RTCx)
{
  ((RTCx->TAMPCR) |= ((0x1UL << (15U))));
}
static inline void LL_RTC_TAMPER_EnablePullUp(RTC_TypeDef *RTCx)
{
  ((RTCx->TAMPCR) &= ~((0x1UL << (15U))));
}
static inline void LL_RTC_TAMPER_SetPrecharge(RTC_TypeDef *RTCx, uint32_t Duration)
{
  (((RTCx->TAMPCR)) = ((((((RTCx->TAMPCR))) & (~((0x3UL << (13U))))) | (Duration))));
}
static inline uint32_t LL_RTC_TAMPER_GetPrecharge(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TAMPCR) & ((0x3UL << (13U)))));
}
static inline void LL_RTC_TAMPER_SetFilterCount(RTC_TypeDef *RTCx, uint32_t FilterCount)
{
  (((RTCx->TAMPCR)) = ((((((RTCx->TAMPCR))) & (~((0x3UL << (11U))))) | (FilterCount))));
}
static inline uint32_t LL_RTC_TAMPER_GetFilterCount(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TAMPCR) & ((0x3UL << (11U)))));
}
static inline void LL_RTC_TAMPER_SetSamplingFreq(RTC_TypeDef *RTCx, uint32_t SamplingFreq)
{
  (((RTCx->TAMPCR)) = ((((((RTCx->TAMPCR))) & (~((0x7UL << (8U))))) | (SamplingFreq))));
}
static inline uint32_t LL_RTC_TAMPER_GetSamplingFreq(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->TAMPCR) & ((0x7UL << (8U)))));
}
static inline void LL_RTC_TAMPER_EnableActiveLevel(RTC_TypeDef *RTCx, uint32_t Tamper)
{
  ((RTCx->TAMPCR) |= (Tamper));
}
static inline void LL_RTC_TAMPER_DisableActiveLevel(RTC_TypeDef *RTCx, uint32_t Tamper)
{
  ((RTCx->TAMPCR) &= ~(Tamper));
}
static inline void LL_RTC_WAKEUP_Enable(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (10U))));
}
static inline void LL_RTC_WAKEUP_Disable(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) &= ~((0x1UL << (10U))));
}
static inline uint32_t LL_RTC_WAKEUP_IsEnabled(RTC_TypeDef *RTCx)
{
  return ((((RTCx->CR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
  (((RTCx->CR)) = ((((((RTCx->CR))) & (~((0x7UL << (0U))))) | (WakeupClock))));
}
static inline uint32_t LL_RTC_WAKEUP_GetClock(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->CR) & ((0x7UL << (0U)))));
}
static inline void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
  (((RTCx->WUTR)) = ((((((RTCx->WUTR))) & (~((0xFFFFUL << (0U))))) | (Value))));
}
static inline uint32_t LL_RTC_WAKEUP_GetAutoReload(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->WUTR) & ((0xFFFFUL << (0U)))));
}
static inline void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
  volatile uint32_t *tmp;
  tmp = &(RTCx->BKP0R) + BackupRegister;
  *tmp = Data;
}
static inline uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
  const volatile uint32_t *tmp;
  tmp = &(RTCx->BKP0R) + BackupRegister;
  return *tmp;
}
static inline void LL_RTC_CAL_SetOutputFreq(RTC_TypeDef *RTCx, uint32_t Frequency)
{
  (((RTCx->CR)) = ((((((RTCx->CR))) & (~((0x1UL << (23U)) | (0x1UL << (19U))))) | (Frequency))));
}
static inline uint32_t LL_RTC_CAL_GetOutputFreq(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->CR) & ((0x1UL << (23U)) | (0x1UL << (19U)))));
}
static inline void LL_RTC_CAL_SetPulse(RTC_TypeDef *RTCx, uint32_t Pulse)
{
  (((RTCx->CALR)) = ((((((RTCx->CALR))) & (~((0x1UL << (15U))))) | (Pulse))));
}
static inline uint32_t LL_RTC_CAL_IsPulseInserted(RTC_TypeDef *RTCx)
{
  return ((((RTCx->CALR) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline void LL_RTC_CAL_SetPeriod(RTC_TypeDef *RTCx, uint32_t Period)
{
  (((RTCx->CALR)) = ((((((RTCx->CALR))) & (~((0x1UL << (14U)) | (0x1UL << (13U))))) | (Period))));
}
static inline uint32_t LL_RTC_CAL_GetPeriod(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->CALR) & ((0x1UL << (14U)) | (0x1UL << (13U)))));
}
static inline void LL_RTC_CAL_SetMinus(RTC_TypeDef *RTCx, uint32_t CalibMinus)
{
  (((RTCx->CALR)) = ((((((RTCx->CALR))) & (~((0x1FFUL << (0U))))) | (CalibMinus))));
}
static inline uint32_t LL_RTC_CAL_GetMinus(RTC_TypeDef *RTCx)
{
  return (uint32_t)(((RTCx->CALR) & ((0x1FFUL << (0U)))));
}
static inline uint32_t LL_RTC_IsActiveFlag_ITS(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (17U)))) == ((0x1UL << (17U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_RECALP(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_TAMP3(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_TAMP2(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_TAMP1(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_TSOV(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_TS(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_WUT(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_ALRB(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_ALRA(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline void LL_RTC_ClearFlag_ITS(RTC_TypeDef *RTCx)
{
  ((RTCx->ISR) = ((~(((0x1UL << (17U)) | (0x1UL << (7U))) & 0x0000FFFFU) | (RTCx->ISR & (0x1UL << (7U))))));
}
static inline void LL_RTC_ClearFlag_TAMP3(RTC_TypeDef *RTCx)
{
  ((RTCx->ISR) = ((~(((0x1UL << (15U)) | (0x1UL << (7U))) & 0x0000FFFFU) | (RTCx->ISR & (0x1UL << (7U))))));
}
static inline void LL_RTC_ClearFlag_TAMP2(RTC_TypeDef *RTCx)
{
  ((RTCx->ISR) = ((~(((0x1UL << (14U)) | (0x1UL << (7U))) & 0x0000FFFFU) | (RTCx->ISR & (0x1UL << (7U))))));
}
static inline void LL_RTC_ClearFlag_TAMP1(RTC_TypeDef *RTCx)
{
  ((RTCx->ISR) = ((~(((0x1UL << (13U)) | (0x1UL << (7U))) & 0x0000FFFFU) | (RTCx->ISR & (0x1UL << (7U))))));
}
static inline void LL_RTC_ClearFlag_TSOV(RTC_TypeDef *RTCx)
{
  ((RTCx->ISR) = ((~(((0x1UL << (12U)) | (0x1UL << (7U))) & 0x0000FFFFU) | (RTCx->ISR & (0x1UL << (7U))))));
}
static inline void LL_RTC_ClearFlag_TS(RTC_TypeDef *RTCx)
{
  ((RTCx->ISR) = ((~(((0x1UL << (11U)) | (0x1UL << (7U))) & 0x0000FFFFU) | (RTCx->ISR & (0x1UL << (7U))))));
}
static inline void LL_RTC_ClearFlag_WUT(RTC_TypeDef *RTCx)
{
  ((RTCx->ISR) = ((~(((0x1UL << (10U)) | (0x1UL << (7U))) & 0x0000FFFFU) | (RTCx->ISR & (0x1UL << (7U))))));
}
static inline void LL_RTC_ClearFlag_ALRB(RTC_TypeDef *RTCx)
{
  ((RTCx->ISR) = ((~(((0x1UL << (9U)) | (0x1UL << (7U))) & 0x0000FFFFU) | (RTCx->ISR & (0x1UL << (7U))))));
}
static inline void LL_RTC_ClearFlag_ALRA(RTC_TypeDef *RTCx)
{
  ((RTCx->ISR) = ((~(((0x1UL << (8U)) | (0x1UL << (7U))) & 0x0000FFFFU) | (RTCx->ISR & (0x1UL << (7U))))));
}
static inline uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline void LL_RTC_ClearFlag_RS(RTC_TypeDef *RTCx)
{
  ((RTCx->ISR) = ((~(((0x1UL << (5U)) | (0x1UL << (7U))) & 0x0000FFFFU) | (RTCx->ISR & (0x1UL << (7U))))));
}
static inline uint32_t LL_RTC_IsActiveFlag_INITS(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_SHP(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_WUTW(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_ALRBW(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsActiveFlag_ALRAW(RTC_TypeDef *RTCx)
{
  return ((((RTCx->ISR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_RTC_EnableIT_TS(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (15U))));
}
static inline void LL_RTC_DisableIT_TS(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) &= ~((0x1UL << (15U))));
}
static inline void LL_RTC_EnableIT_WUT(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (14U))));
}
static inline void LL_RTC_DisableIT_WUT(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) &= ~((0x1UL << (14U))));
}
static inline void LL_RTC_EnableIT_ALRB(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (13U))));
}
static inline void LL_RTC_DisableIT_ALRB(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) &= ~((0x1UL << (13U))));
}
static inline void LL_RTC_EnableIT_ALRA(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) |= ((0x1UL << (12U))));
}
static inline void LL_RTC_DisableIT_ALRA(RTC_TypeDef *RTCx)
{
  ((RTCx->CR) &= ~((0x1UL << (12U))));
}
static inline void LL_RTC_EnableIT_TAMP3(RTC_TypeDef *RTCx)
{
  ((RTCx->TAMPCR) |= ((0x1UL << (22U))));
}
static inline void LL_RTC_DisableIT_TAMP3(RTC_TypeDef *RTCx)
{
  ((RTCx->TAMPCR) &= ~((0x1UL << (22U))));
}
static inline void LL_RTC_EnableIT_TAMP2(RTC_TypeDef *RTCx)
{
  ((RTCx->TAMPCR) |= ((0x1UL << (19U))));
}
static inline void LL_RTC_DisableIT_TAMP2(RTC_TypeDef *RTCx)
{
  ((RTCx->TAMPCR) &= ~((0x1UL << (19U))));
}
static inline void LL_RTC_EnableIT_TAMP1(RTC_TypeDef *RTCx)
{
  ((RTCx->TAMPCR) |= ((0x1UL << (16U))));
}
static inline void LL_RTC_DisableIT_TAMP1(RTC_TypeDef *RTCx)
{
  ((RTCx->TAMPCR) &= ~((0x1UL << (16U))));
}
static inline void LL_RTC_EnableIT_TAMP(RTC_TypeDef *RTCx)
{
  ((RTCx->TAMPCR) |= ((0x1UL << (2U))));
}
static inline void LL_RTC_DisableIT_TAMP(RTC_TypeDef *RTCx)
{
  ((RTCx->TAMPCR) &= ~((0x1UL << (2U))));
}
static inline uint32_t LL_RTC_IsEnabledIT_TS(RTC_TypeDef *RTCx)
{
  return ((((RTCx->CR) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsEnabledIT_WUT(RTC_TypeDef *RTCx)
{
  return ((((RTCx->CR) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsEnabledIT_ALRB(RTC_TypeDef *RTCx)
{
  return ((((RTCx->CR) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsEnabledIT_ALRA(RTC_TypeDef *RTCx)
{
  return ((((RTCx->CR) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsEnabledIT_TAMP3(RTC_TypeDef *RTCx)
{
  return ((((RTCx->TAMPCR) & ((0x1UL << (22U)))) == ((0x1UL << (22U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsEnabledIT_TAMP2(RTC_TypeDef *RTCx)
{
  return ((((RTCx->TAMPCR) & ((0x1UL << (19U)))) == ((0x1UL << (19U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsEnabledIT_TAMP1(RTC_TypeDef *RTCx)
{
  return ((((RTCx->TAMPCR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_RTC_IsEnabledIT_TAMP(RTC_TypeDef *RTCx)
{
  return ((((RTCx->TAMPCR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
ErrorStatus LL_RTC_DeInit(RTC_TypeDef *RTCx);
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct);
void LL_RTC_StructInit(LL_RTC_InitTypeDef *RTC_InitStruct);
ErrorStatus LL_RTC_TIME_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_TimeTypeDef *RTC_TimeStruct);
void LL_RTC_TIME_StructInit(LL_RTC_TimeTypeDef *RTC_TimeStruct);
ErrorStatus LL_RTC_DATE_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_DateTypeDef *RTC_DateStruct);
void LL_RTC_DATE_StructInit(LL_RTC_DateTypeDef *RTC_DateStruct);
ErrorStatus LL_RTC_ALMA_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_AlarmTypeDef *RTC_AlarmStruct);
ErrorStatus LL_RTC_ALMB_Init(RTC_TypeDef *RTCx, uint32_t RTC_Format, LL_RTC_AlarmTypeDef *RTC_AlarmStruct);
void LL_RTC_ALMA_StructInit(LL_RTC_AlarmTypeDef *RTC_AlarmStruct);
void LL_RTC_ALMB_StructInit(LL_RTC_AlarmTypeDef *RTC_AlarmStruct);
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx);
ErrorStatus LL_RTC_ExitInitMode(RTC_TypeDef *RTCx);
ErrorStatus LL_RTC_WaitForSynchro(RTC_TypeDef *RTCx);
#define STM32WBxx_LL_SPI_H 
typedef struct
{
  uint32_t TransferDirection;
  uint32_t Mode;
  uint32_t DataWidth;
  uint32_t ClockPolarity;
  uint32_t ClockPhase;
  uint32_t NSS;
  uint32_t BaudRate;
  uint32_t BitOrder;
  uint32_t CRCCalculation;
  uint32_t CRCPoly;
} LL_SPI_InitTypeDef;
#define LL_SPI_SR_RXNE SPI_SR_RXNE
#define LL_SPI_SR_TXE SPI_SR_TXE
#define LL_SPI_SR_BSY SPI_SR_BSY
#define LL_SPI_SR_CRCERR SPI_SR_CRCERR
#define LL_SPI_SR_MODF SPI_SR_MODF
#define LL_SPI_SR_OVR SPI_SR_OVR
#define LL_SPI_SR_FRE SPI_SR_FRE
#define LL_SPI_CR2_RXNEIE SPI_CR2_RXNEIE
#define LL_SPI_CR2_TXEIE SPI_CR2_TXEIE
#define LL_SPI_CR2_ERRIE SPI_CR2_ERRIE
#define LL_SPI_MODE_MASTER (SPI_CR1_MSTR | SPI_CR1_SSI)
#define LL_SPI_MODE_SLAVE 0x00000000U
#define LL_SPI_PROTOCOL_MOTOROLA 0x00000000U
#define LL_SPI_PROTOCOL_TI (SPI_CR2_FRF)
#define LL_SPI_PHASE_1EDGE 0x00000000U
#define LL_SPI_PHASE_2EDGE (SPI_CR1_CPHA)
#define LL_SPI_POLARITY_LOW 0x00000000U
#define LL_SPI_POLARITY_HIGH (SPI_CR1_CPOL)
#define LL_SPI_BAUDRATEPRESCALER_DIV2 0x00000000U
#define LL_SPI_BAUDRATEPRESCALER_DIV4 (SPI_CR1_BR_0)
#define LL_SPI_BAUDRATEPRESCALER_DIV8 (SPI_CR1_BR_1)
#define LL_SPI_BAUDRATEPRESCALER_DIV16 (SPI_CR1_BR_1 | SPI_CR1_BR_0)
#define LL_SPI_BAUDRATEPRESCALER_DIV32 (SPI_CR1_BR_2)
#define LL_SPI_BAUDRATEPRESCALER_DIV64 (SPI_CR1_BR_2 | SPI_CR1_BR_0)
#define LL_SPI_BAUDRATEPRESCALER_DIV128 (SPI_CR1_BR_2 | SPI_CR1_BR_1)
#define LL_SPI_BAUDRATEPRESCALER_DIV256 (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0)
#define LL_SPI_LSB_FIRST (SPI_CR1_LSBFIRST)
#define LL_SPI_MSB_FIRST 0x00000000U
#define LL_SPI_FULL_DUPLEX 0x00000000U
#define LL_SPI_SIMPLEX_RX (SPI_CR1_RXONLY)
#define LL_SPI_HALF_DUPLEX_RX (SPI_CR1_BIDIMODE)
#define LL_SPI_HALF_DUPLEX_TX (SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE)
#define LL_SPI_NSS_SOFT (SPI_CR1_SSM)
#define LL_SPI_NSS_HARD_INPUT 0x00000000U
#define LL_SPI_NSS_HARD_OUTPUT (((uint32_t)SPI_CR2_SSOE << 16U))
#define LL_SPI_DATAWIDTH_4BIT (SPI_CR2_DS_0 | SPI_CR2_DS_1)
#define LL_SPI_DATAWIDTH_5BIT (SPI_CR2_DS_2)
#define LL_SPI_DATAWIDTH_6BIT (SPI_CR2_DS_2 | SPI_CR2_DS_0)
#define LL_SPI_DATAWIDTH_7BIT (SPI_CR2_DS_2 | SPI_CR2_DS_1)
#define LL_SPI_DATAWIDTH_8BIT (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0)
#define LL_SPI_DATAWIDTH_9BIT (SPI_CR2_DS_3)
#define LL_SPI_DATAWIDTH_10BIT (SPI_CR2_DS_3 | SPI_CR2_DS_0)
#define LL_SPI_DATAWIDTH_11BIT (SPI_CR2_DS_3 | SPI_CR2_DS_1)
#define LL_SPI_DATAWIDTH_12BIT (SPI_CR2_DS_3 | SPI_CR2_DS_1 | SPI_CR2_DS_0)
#define LL_SPI_DATAWIDTH_13BIT (SPI_CR2_DS_3 | SPI_CR2_DS_2)
#define LL_SPI_DATAWIDTH_14BIT (SPI_CR2_DS_3 | SPI_CR2_DS_2 | SPI_CR2_DS_0)
#define LL_SPI_DATAWIDTH_15BIT (SPI_CR2_DS_3 | SPI_CR2_DS_2 | SPI_CR2_DS_1)
#define LL_SPI_DATAWIDTH_16BIT (SPI_CR2_DS_3 | SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0)
#define LL_SPI_CRCCALCULATION_DISABLE 0x00000000U
#define LL_SPI_CRCCALCULATION_ENABLE (SPI_CR1_CRCEN)
#define LL_SPI_CRC_8BIT 0x00000000U
#define LL_SPI_CRC_16BIT (SPI_CR1_CRCL)
#define LL_SPI_RX_FIFO_TH_HALF 0x00000000U
#define LL_SPI_RX_FIFO_TH_QUARTER (SPI_CR2_FRXTH)
#define LL_SPI_RX_FIFO_EMPTY 0x00000000U
#define LL_SPI_RX_FIFO_QUARTER_FULL (SPI_SR_FRLVL_0)
#define LL_SPI_RX_FIFO_HALF_FULL (SPI_SR_FRLVL_1)
#define LL_SPI_RX_FIFO_FULL (SPI_SR_FRLVL_1 | SPI_SR_FRLVL_0)
#define LL_SPI_TX_FIFO_EMPTY 0x00000000U
#define LL_SPI_TX_FIFO_QUARTER_FULL (SPI_SR_FTLVL_0)
#define LL_SPI_TX_FIFO_HALF_FULL (SPI_SR_FTLVL_1)
#define LL_SPI_TX_FIFO_FULL (SPI_SR_FTLVL_1 | SPI_SR_FTLVL_0)
#define LL_SPI_DMA_PARITY_EVEN 0x00000000U
#define LL_SPI_DMA_PARITY_ODD 0x00000001U
#define LL_SPI_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_SPI_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
static inline void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) |= ((0x1UL << (6U))));
}
static inline void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) &= ~((0x1UL << (6U))));
}
static inline uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CR1) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline void LL_SPI_SetMode(SPI_TypeDef *SPIx, uint32_t Mode)
{
  (((SPIx->CR1)) = ((((((SPIx->CR1))) & (~((0x1UL << (2U)) | (0x1UL << (8U))))) | (Mode))));
}
static inline uint32_t LL_SPI_GetMode(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR1) & ((0x1UL << (2U)) | (0x1UL << (8U)))));
}
static inline void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  (((SPIx->CR2)) = ((((((SPIx->CR2))) & (~((0x1UL << (4U))))) | (Standard))));
}
static inline uint32_t LL_SPI_GetStandard(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR2) & ((0x1UL << (4U)))));
}
static inline void LL_SPI_SetClockPhase(SPI_TypeDef *SPIx, uint32_t ClockPhase)
{
  (((SPIx->CR1)) = ((((((SPIx->CR1))) & (~((0x1UL << (0U))))) | (ClockPhase))));
}
static inline uint32_t LL_SPI_GetClockPhase(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR1) & ((0x1UL << (0U)))));
}
static inline void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
  (((SPIx->CR1)) = ((((((SPIx->CR1))) & (~((0x1UL << (1U))))) | (ClockPolarity))));
}
static inline uint32_t LL_SPI_GetClockPolarity(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR1) & ((0x1UL << (1U)))));
}
static inline void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t BaudRate)
{
  (((SPIx->CR1)) = ((((((SPIx->CR1))) & (~((0x7UL << (3U))))) | (BaudRate))));
}
static inline uint32_t LL_SPI_GetBaudRatePrescaler(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR1) & ((0x7UL << (3U)))));
}
static inline void LL_SPI_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
{
  (((SPIx->CR1)) = ((((((SPIx->CR1))) & (~((0x1UL << (7U))))) | (BitOrder))));
}
static inline uint32_t LL_SPI_GetTransferBitOrder(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR1) & ((0x1UL << (7U)))));
}
static inline void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
  (((SPIx->CR1)) = ((((((SPIx->CR1))) & (~((0x1UL << (10U)) | (0x1UL << (15U)) | (0x1UL << (14U))))) | (TransferDirection))));
}
static inline uint32_t LL_SPI_GetTransferDirection(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR1) & ((0x1UL << (10U)) | (0x1UL << (15U)) | (0x1UL << (14U)))));
}
static inline void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
{
  (((SPIx->CR2)) = ((((((SPIx->CR2))) & (~((0xFUL << (8U))))) | (DataWidth))));
}
static inline uint32_t LL_SPI_GetDataWidth(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR2) & ((0xFUL << (8U)))));
}
static inline void LL_SPI_SetRxFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
  (((SPIx->CR2)) = ((((((SPIx->CR2))) & (~((0x1UL << (12U))))) | (Threshold))));
}
static inline uint32_t LL_SPI_GetRxFIFOThreshold(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR2) & ((0x1UL << (12U)))));
}
static inline void LL_SPI_EnableCRC(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) |= ((0x1UL << (13U))));
}
static inline void LL_SPI_DisableCRC(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) &= ~((0x1UL << (13U))));
}
static inline uint32_t LL_SPI_IsEnabledCRC(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CR1) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
static inline void LL_SPI_SetCRCWidth(SPI_TypeDef *SPIx, uint32_t CRCLength)
{
  (((SPIx->CR1)) = ((((((SPIx->CR1))) & (~((0x1UL << (11U))))) | (CRCLength))));
}
static inline uint32_t LL_SPI_GetCRCWidth(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR1) & ((0x1UL << (11U)))));
}
static inline void LL_SPI_SetCRCNext(SPI_TypeDef *SPIx)
{
  ((SPIx->CR1) |= ((0x1UL << (12U))));
}
static inline void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
  ((SPIx->CRCPR) = ((uint16_t)CRCPoly));
}
static inline uint32_t LL_SPI_GetCRCPolynomial(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CRCPR)));
}
static inline uint32_t LL_SPI_GetRxCRC(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->RXCRCR)));
}
static inline uint32_t LL_SPI_GetTxCRC(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->TXCRCR)));
}
static inline void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
  (((SPIx->CR1)) = ((((((SPIx->CR1))) & (~((0x1UL << (9U))))) | (NSS))));
  (((SPIx->CR2)) = ((((((SPIx->CR2))) & (~((0x1UL << (2U))))) | (((uint32_t)(NSS >> 16U))))));
}
static inline uint32_t LL_SPI_GetNSSMode(SPI_TypeDef *SPIx)
{
  uint32_t Ssm = (((SPIx->CR1) & ((0x1UL << (9U)))));
  uint32_t Ssoe = (((SPIx->CR2) & ((0x1UL << (2U)))) << 16U);
  return (Ssm | Ssoe);
}
static inline void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
  ((SPIx->CR2) |= ((0x1UL << (3U))));
}
static inline void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
  ((SPIx->CR2) &= ~((0x1UL << (3U))));
}
static inline uint32_t LL_SPI_IsEnabledNSSPulse(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CR2) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SPI_IsActiveFlag_CRCERR(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SPI_IsActiveFlag_MODF(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SPI_IsActiveFlag_OVR(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SPI_IsActiveFlag_FRE(SPI_TypeDef *SPIx)
{
  return ((((SPIx->SR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SPI_GetRxFIFOLevel(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->SR) & ((0x3UL << (9U)))));
}
static inline uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->SR) & ((0x3UL << (11U)))));
}
static inline void LL_SPI_ClearFlag_CRCERR(SPI_TypeDef *SPIx)
{
  ((SPIx->SR) &= ~((0x1UL << (4U))));
}
static inline void LL_SPI_ClearFlag_MODF(SPI_TypeDef *SPIx)
{
  volatile uint32_t tmpreg_sr;
  tmpreg_sr = SPIx->SR;
  (void) tmpreg_sr;
  ((SPIx->CR1) &= ~((0x1UL << (6U))));
}
static inline void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
  volatile uint32_t tmpreg;
  tmpreg = SPIx->DR;
  (void) tmpreg;
  tmpreg = SPIx->SR;
  (void) tmpreg;
}
static inline void LL_SPI_ClearFlag_FRE(SPI_TypeDef *SPIx)
{
  volatile uint32_t tmpreg;
  tmpreg = SPIx->SR;
  (void) tmpreg;
}
static inline void LL_SPI_EnableIT_ERR(SPI_TypeDef *SPIx)
{
  ((SPIx->CR2) |= ((0x1UL << (5U))));
}
static inline void LL_SPI_EnableIT_RXNE(SPI_TypeDef *SPIx)
{
  ((SPIx->CR2) |= ((0x1UL << (6U))));
}
static inline void LL_SPI_EnableIT_TXE(SPI_TypeDef *SPIx)
{
  ((SPIx->CR2) |= ((0x1UL << (7U))));
}
static inline void LL_SPI_DisableIT_ERR(SPI_TypeDef *SPIx)
{
  ((SPIx->CR2) &= ~((0x1UL << (5U))));
}
static inline void LL_SPI_DisableIT_RXNE(SPI_TypeDef *SPIx)
{
  ((SPIx->CR2) &= ~((0x1UL << (6U))));
}
static inline void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
  ((SPIx->CR2) &= ~((0x1UL << (7U))));
}
static inline uint32_t LL_SPI_IsEnabledIT_ERR(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CR2) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SPI_IsEnabledIT_RXNE(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CR2) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_SPI_IsEnabledIT_TXE(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CR2) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline void LL_SPI_EnableDMAReq_RX(SPI_TypeDef *SPIx)
{
  ((SPIx->CR2) |= ((0x1UL << (0U))));
}
static inline void LL_SPI_DisableDMAReq_RX(SPI_TypeDef *SPIx)
{
  ((SPIx->CR2) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_SPI_IsEnabledDMAReq_RX(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CR2) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
  ((SPIx->CR2) |= ((0x1UL << (1U))));
}
static inline void LL_SPI_DisableDMAReq_TX(SPI_TypeDef *SPIx)
{
  ((SPIx->CR2) &= ~((0x1UL << (1U))));
}
static inline uint32_t LL_SPI_IsEnabledDMAReq_TX(SPI_TypeDef *SPIx)
{
  return ((((SPIx->CR2) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline void LL_SPI_SetDMAParity_RX(SPI_TypeDef *SPIx, uint32_t Parity)
{
  (((SPIx->CR2)) = ((((((SPIx->CR2))) & (~((0x1UL << (13U))))) | ((Parity << (13U))))));
}
static inline uint32_t LL_SPI_GetDMAParity_RX(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR2) & ((0x1UL << (13U)))) >> (13U));
}
static inline void LL_SPI_SetDMAParity_TX(SPI_TypeDef *SPIx, uint32_t Parity)
{
  (((SPIx->CR2)) = ((((((SPIx->CR2))) & (~((0x1UL << (14U))))) | ((Parity << (14U))))));
}
static inline uint32_t LL_SPI_GetDMAParity_TX(SPI_TypeDef *SPIx)
{
  return (uint32_t)(((SPIx->CR2) & ((0x1UL << (14U)))) >> (14U));
}
static inline uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
  return (uint32_t) &(SPIx->DR);
}
static inline uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (*((volatile uint8_t *)&SPIx->DR));
}
static inline uint16_t LL_SPI_ReceiveData16(SPI_TypeDef *SPIx)
{
  return (uint16_t)(((SPIx->DR)));
}
static inline void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
  volatile uint8_t *spidr = ((volatile uint8_t *)&SPIx->DR);
  *spidr = TxData;
}
static inline void LL_SPI_TransmitData16(SPI_TypeDef *SPIx, uint16_t TxData)
{
  volatile uint16_t *spidr = ((volatile uint16_t *)&SPIx->DR);
  *spidr = TxData;
}
ErrorStatus LL_SPI_DeInit(SPI_TypeDef *SPIx);
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct);
void LL_SPI_StructInit(LL_SPI_InitTypeDef *SPI_InitStruct);
#define __STM32WBxx_LL_TIM_H 
static const uint8_t OFFSET_TAB_CCMRx[] =
{
  0x00U,
  0x00U,
  0x00U,
  0x00U,
  0x04U,
  0x04U,
  0x04U,
  0x3CU,
  0x3CU
};
static const uint8_t SHIFT_TAB_OCxx[] =
{
  0U,
  0U,
  8U,
  0U,
  0U,
  0U,
  8U,
  0U,
  8U
};
static const uint8_t SHIFT_TAB_ICxx[] =
{
  0U,
  0U,
  8U,
  0U,
  0U,
  0U,
  8U,
  0U,
  0U
};
static const uint8_t SHIFT_TAB_CCxP[] =
{
  0U,
  2U,
  4U,
  6U,
  8U,
  10U,
  12U,
  16U,
  20U
};
static const uint8_t SHIFT_TAB_OISx[] =
{
  0U,
  1U,
  2U,
  3U,
  4U,
  5U,
  6U,
  8U,
  10U
};
#define TIM_POSITION_BRK_SOURCE (POSITION_VAL(Source) & 0x1FUL)
#define TIMx_AF1_BKINP TIM1_AF1_BKINP
#define TIMx_AF1_ETRSEL TIM1_AF1_ETRSEL
#define TIMx_OR_RMP_SHIFT 16U
#define TIMx_OR_RMP_MASK 0x0000FFFFU
#define TIM1_OR_RMP_MASK ((TIM1_OR_ETR_ADC1_RMP | TIM1_OR_TI1_RMP) << TIMx_OR_RMP_SHIFT)
#define TIM2_OR_RMP_MASK ((TIM2_OR_TI4_RMP | TIM2_OR_ETR_RMP | TIM2_OR_ITR1_RMP) << TIMx_OR_RMP_SHIFT)
#define TIM16_OR_RMP_MASK (TIM16_OR_TI1_RMP << TIMx_OR_RMP_SHIFT)
#define TIM17_OR_RMP_MASK (TIM17_OR_TI1_RMP << TIMx_OR_RMP_SHIFT)
#define DT_DELAY_1 ((uint8_t)0x7F)
#define DT_DELAY_2 ((uint8_t)0x3F)
#define DT_DELAY_3 ((uint8_t)0x1F)
#define DT_DELAY_4 ((uint8_t)0x1F)
#define DT_RANGE_1 ((uint8_t)0x00)
#define DT_RANGE_2 ((uint8_t)0x80)
#define DT_RANGE_3 ((uint8_t)0xC0)
#define DT_RANGE_4 ((uint8_t)0xE0)
#define TIM_GET_CHANNEL_INDEX(__CHANNEL__) (((__CHANNEL__) == LL_TIM_CHANNEL_CH1) ? 0U : ((__CHANNEL__) == LL_TIM_CHANNEL_CH1N) ? 1U : ((__CHANNEL__) == LL_TIM_CHANNEL_CH2) ? 2U : ((__CHANNEL__) == LL_TIM_CHANNEL_CH2N) ? 3U : ((__CHANNEL__) == LL_TIM_CHANNEL_CH3) ? 4U : ((__CHANNEL__) == LL_TIM_CHANNEL_CH3N) ? 5U : ((__CHANNEL__) == LL_TIM_CHANNEL_CH4) ? 6U : ((__CHANNEL__) == LL_TIM_CHANNEL_CH5) ? 7U : 8U)
#define TIM_CALC_DTS(__TIMCLK__,__CKD__) (((__CKD__) == LL_TIM_CLOCKDIVISION_DIV1) ? ((uint64_t)1000000000000U/(__TIMCLK__)) : ((__CKD__) == LL_TIM_CLOCKDIVISION_DIV2) ? ((uint64_t)1000000000000U/((__TIMCLK__) >> 1U)) : ((uint64_t)1000000000000U/((__TIMCLK__) >> 2U)))
typedef struct
{
  uint16_t Prescaler;
  uint32_t CounterMode;
  uint32_t Autoreload;
  uint32_t ClockDivision;
  uint32_t RepetitionCounter;
} LL_TIM_InitTypeDef;
typedef struct
{
  uint32_t OCMode;
  uint32_t OCState;
  uint32_t OCNState;
  uint32_t CompareValue;
  uint32_t OCPolarity;
  uint32_t OCNPolarity;
  uint32_t OCIdleState;
  uint32_t OCNIdleState;
} LL_TIM_OC_InitTypeDef;
typedef struct
{
  uint32_t ICPolarity;
  uint32_t ICActiveInput;
  uint32_t ICPrescaler;
  uint32_t ICFilter;
} LL_TIM_IC_InitTypeDef;
typedef struct
{
  uint32_t EncoderMode;
  uint32_t IC1Polarity;
  uint32_t IC1ActiveInput;
  uint32_t IC1Prescaler;
  uint32_t IC1Filter;
  uint32_t IC2Polarity;
  uint32_t IC2ActiveInput;
  uint32_t IC2Prescaler;
  uint32_t IC2Filter;
} LL_TIM_ENCODER_InitTypeDef;
typedef struct
{
  uint32_t IC1Polarity;
  uint32_t IC1Prescaler;
  uint32_t IC1Filter;
  uint32_t CommutationDelay;
} LL_TIM_HALLSENSOR_InitTypeDef;
typedef struct
{
  uint32_t OSSRState;
  uint32_t OSSIState;
  uint32_t LockLevel;
  uint8_t DeadTime;
  uint16_t BreakState;
  uint32_t BreakPolarity;
  uint32_t BreakFilter;
  uint32_t BreakAFMode;
  uint32_t Break2State;
  uint32_t Break2Polarity;
  uint32_t Break2Filter;
  uint32_t Break2AFMode;
  uint32_t AutomaticOutput;
} LL_TIM_BDTR_InitTypeDef;
#define LL_TIM_SR_UIF TIM_SR_UIF
#define LL_TIM_SR_CC1IF TIM_SR_CC1IF
#define LL_TIM_SR_CC2IF TIM_SR_CC2IF
#define LL_TIM_SR_CC3IF TIM_SR_CC3IF
#define LL_TIM_SR_CC4IF TIM_SR_CC4IF
#define LL_TIM_SR_CC5IF TIM_SR_CC5IF
#define LL_TIM_SR_CC6IF TIM_SR_CC6IF
#define LL_TIM_SR_COMIF TIM_SR_COMIF
#define LL_TIM_SR_TIF TIM_SR_TIF
#define LL_TIM_SR_BIF TIM_SR_BIF
#define LL_TIM_SR_B2IF TIM_SR_B2IF
#define LL_TIM_SR_CC1OF TIM_SR_CC1OF
#define LL_TIM_SR_CC2OF TIM_SR_CC2OF
#define LL_TIM_SR_CC3OF TIM_SR_CC3OF
#define LL_TIM_SR_CC4OF TIM_SR_CC4OF
#define LL_TIM_SR_SBIF TIM_SR_SBIF
#define LL_TIM_BREAK_DISABLE 0x00000000U
#define LL_TIM_BREAK_ENABLE TIM_BDTR_BKE
#define LL_TIM_BREAK2_DISABLE 0x00000000U
#define LL_TIM_BREAK2_ENABLE TIM_BDTR_BK2E
#define LL_TIM_AUTOMATICOUTPUT_DISABLE 0x00000000U
#define LL_TIM_AUTOMATICOUTPUT_ENABLE TIM_BDTR_AOE
#define LL_TIM_DIER_UIE TIM_DIER_UIE
#define LL_TIM_DIER_CC1IE TIM_DIER_CC1IE
#define LL_TIM_DIER_CC2IE TIM_DIER_CC2IE
#define LL_TIM_DIER_CC3IE TIM_DIER_CC3IE
#define LL_TIM_DIER_CC4IE TIM_DIER_CC4IE
#define LL_TIM_DIER_COMIE TIM_DIER_COMIE
#define LL_TIM_DIER_TIE TIM_DIER_TIE
#define LL_TIM_DIER_BIE TIM_DIER_BIE
#define LL_TIM_UPDATESOURCE_REGULAR 0x00000000U
#define LL_TIM_UPDATESOURCE_COUNTER TIM_CR1_URS
#define LL_TIM_ONEPULSEMODE_SINGLE TIM_CR1_OPM
#define LL_TIM_ONEPULSEMODE_REPETITIVE 0x00000000U
#define LL_TIM_COUNTERMODE_UP 0x00000000U
#define LL_TIM_COUNTERMODE_DOWN TIM_CR1_DIR
#define LL_TIM_COUNTERMODE_CENTER_DOWN TIM_CR1_CMS_0
#define LL_TIM_COUNTERMODE_CENTER_UP TIM_CR1_CMS_1
#define LL_TIM_COUNTERMODE_CENTER_UP_DOWN TIM_CR1_CMS
#define LL_TIM_CLOCKDIVISION_DIV1 0x00000000U
#define LL_TIM_CLOCKDIVISION_DIV2 TIM_CR1_CKD_0
#define LL_TIM_CLOCKDIVISION_DIV4 TIM_CR1_CKD_1
#define LL_TIM_COUNTERDIRECTION_UP 0x00000000U
#define LL_TIM_COUNTERDIRECTION_DOWN TIM_CR1_DIR
#define LL_TIM_CCUPDATESOURCE_COMG_ONLY 0x00000000U
#define LL_TIM_CCUPDATESOURCE_COMG_AND_TRGI TIM_CR2_CCUS
#define LL_TIM_CCDMAREQUEST_CC 0x00000000U
#define LL_TIM_CCDMAREQUEST_UPDATE TIM_CR2_CCDS
#define LL_TIM_LOCKLEVEL_OFF 0x00000000U
#define LL_TIM_LOCKLEVEL_1 TIM_BDTR_LOCK_0
#define LL_TIM_LOCKLEVEL_2 TIM_BDTR_LOCK_1
#define LL_TIM_LOCKLEVEL_3 TIM_BDTR_LOCK
#define LL_TIM_CHANNEL_CH1 TIM_CCER_CC1E
#define LL_TIM_CHANNEL_CH1N TIM_CCER_CC1NE
#define LL_TIM_CHANNEL_CH2 TIM_CCER_CC2E
#define LL_TIM_CHANNEL_CH2N TIM_CCER_CC2NE
#define LL_TIM_CHANNEL_CH3 TIM_CCER_CC3E
#define LL_TIM_CHANNEL_CH3N TIM_CCER_CC3NE
#define LL_TIM_CHANNEL_CH4 TIM_CCER_CC4E
#define LL_TIM_CHANNEL_CH5 TIM_CCER_CC5E
#define LL_TIM_CHANNEL_CH6 TIM_CCER_CC6E
#define LL_TIM_OCSTATE_DISABLE 0x00000000U
#define LL_TIM_OCSTATE_ENABLE TIM_CCER_CC1E
#define LL_TIM_OCMODE_FROZEN 0x00000000U
#define LL_TIM_OCMODE_ACTIVE TIM_CCMR1_OC1M_0
#define LL_TIM_OCMODE_INACTIVE TIM_CCMR1_OC1M_1
#define LL_TIM_OCMODE_TOGGLE (TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0)
#define LL_TIM_OCMODE_FORCED_INACTIVE TIM_CCMR1_OC1M_2
#define LL_TIM_OCMODE_FORCED_ACTIVE (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_0)
#define LL_TIM_OCMODE_PWM1 (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1)
#define LL_TIM_OCMODE_PWM2 (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_0)
#define LL_TIM_OCMODE_RETRIG_OPM1 TIM_CCMR1_OC1M_3
#define LL_TIM_OCMODE_RETRIG_OPM2 (TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M_0)
#define LL_TIM_OCMODE_COMBINED_PWM1 (TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M_2)
#define LL_TIM_OCMODE_COMBINED_PWM2 (TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_2)
#define LL_TIM_OCMODE_ASSYMETRIC_PWM1 (TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2)
#define LL_TIM_OCMODE_ASSYMETRIC_PWM2 (TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1M)
#define LL_TIM_OCPOLARITY_HIGH 0x00000000U
#define LL_TIM_OCPOLARITY_LOW TIM_CCER_CC1P
#define LL_TIM_OCIDLESTATE_LOW 0x00000000U
#define LL_TIM_OCIDLESTATE_HIGH TIM_CR2_OIS1
#define LL_TIM_GROUPCH5_NONE 0x00000000U
#define LL_TIM_GROUPCH5_OC1REFC TIM_CCR5_GC5C1
#define LL_TIM_GROUPCH5_OC2REFC TIM_CCR5_GC5C2
#define LL_TIM_GROUPCH5_OC3REFC TIM_CCR5_GC5C3
#define LL_TIM_ACTIVEINPUT_DIRECTTI (TIM_CCMR1_CC1S_0 << 16U)
#define LL_TIM_ACTIVEINPUT_INDIRECTTI (TIM_CCMR1_CC1S_1 << 16U)
#define LL_TIM_ACTIVEINPUT_TRC (TIM_CCMR1_CC1S << 16U)
#define LL_TIM_ICPSC_DIV1 0x00000000U
#define LL_TIM_ICPSC_DIV2 (TIM_CCMR1_IC1PSC_0 << 16U)
#define LL_TIM_ICPSC_DIV4 (TIM_CCMR1_IC1PSC_1 << 16U)
#define LL_TIM_ICPSC_DIV8 (TIM_CCMR1_IC1PSC << 16U)
#define LL_TIM_IC_FILTER_FDIV1 0x00000000U
#define LL_TIM_IC_FILTER_FDIV1_N2 (TIM_CCMR1_IC1F_0 << 16U)
#define LL_TIM_IC_FILTER_FDIV1_N4 (TIM_CCMR1_IC1F_1 << 16U)
#define LL_TIM_IC_FILTER_FDIV1_N8 ((TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0) << 16U)
#define LL_TIM_IC_FILTER_FDIV2_N6 (TIM_CCMR1_IC1F_2 << 16U)
#define LL_TIM_IC_FILTER_FDIV2_N8 ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_0) << 16U)
#define LL_TIM_IC_FILTER_FDIV4_N6 ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1) << 16U)
#define LL_TIM_IC_FILTER_FDIV4_N8 ((TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0) << 16U)
#define LL_TIM_IC_FILTER_FDIV8_N6 (TIM_CCMR1_IC1F_3 << 16U)
#define LL_TIM_IC_FILTER_FDIV8_N8 ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_0) << 16U)
#define LL_TIM_IC_FILTER_FDIV16_N5 ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1) << 16U)
#define LL_TIM_IC_FILTER_FDIV16_N6 ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0) << 16U)
#define LL_TIM_IC_FILTER_FDIV16_N8 ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2) << 16U)
#define LL_TIM_IC_FILTER_FDIV32_N5 ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_0) << 16U)
#define LL_TIM_IC_FILTER_FDIV32_N6 ((TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1) << 16U)
#define LL_TIM_IC_FILTER_FDIV32_N8 (TIM_CCMR1_IC1F << 16U)
#define LL_TIM_IC_POLARITY_RISING 0x00000000U
#define LL_TIM_IC_POLARITY_FALLING TIM_CCER_CC1P
#define LL_TIM_IC_POLARITY_BOTHEDGE (TIM_CCER_CC1P | TIM_CCER_CC1NP)
#define LL_TIM_CLOCKSOURCE_INTERNAL 0x00000000U
#define LL_TIM_CLOCKSOURCE_EXT_MODE1 (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)
#define LL_TIM_CLOCKSOURCE_EXT_MODE2 TIM_SMCR_ECE
#define LL_TIM_ENCODERMODE_X2_TI1 TIM_SMCR_SMS_0
#define LL_TIM_ENCODERMODE_X2_TI2 TIM_SMCR_SMS_1
#define LL_TIM_ENCODERMODE_X4_TI12 (TIM_SMCR_SMS_1 | TIM_SMCR_SMS_0)
#define LL_TIM_TRGO_RESET 0x00000000U
#define LL_TIM_TRGO_ENABLE TIM_CR2_MMS_0
#define LL_TIM_TRGO_UPDATE TIM_CR2_MMS_1
#define LL_TIM_TRGO_CC1IF (TIM_CR2_MMS_1 | TIM_CR2_MMS_0)
#define LL_TIM_TRGO_OC1REF TIM_CR2_MMS_2
#define LL_TIM_TRGO_OC2REF (TIM_CR2_MMS_2 | TIM_CR2_MMS_0)
#define LL_TIM_TRGO_OC3REF (TIM_CR2_MMS_2 | TIM_CR2_MMS_1)
#define LL_TIM_TRGO_OC4REF (TIM_CR2_MMS_2 | TIM_CR2_MMS_1 | TIM_CR2_MMS_0)
#define LL_TIM_TRGO2_RESET 0x00000000U
#define LL_TIM_TRGO2_ENABLE TIM_CR2_MMS2_0
#define LL_TIM_TRGO2_UPDATE TIM_CR2_MMS2_1
#define LL_TIM_TRGO2_CC1F (TIM_CR2_MMS2_1 | TIM_CR2_MMS2_0)
#define LL_TIM_TRGO2_OC1 TIM_CR2_MMS2_2
#define LL_TIM_TRGO2_OC2 (TIM_CR2_MMS2_2 | TIM_CR2_MMS2_0)
#define LL_TIM_TRGO2_OC3 (TIM_CR2_MMS2_2 | TIM_CR2_MMS2_1)
#define LL_TIM_TRGO2_OC4 (TIM_CR2_MMS2_2 | TIM_CR2_MMS2_1 | TIM_CR2_MMS2_0)
#define LL_TIM_TRGO2_OC5 TIM_CR2_MMS2_3
#define LL_TIM_TRGO2_OC6 (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_0)
#define LL_TIM_TRGO2_OC4_RISINGFALLING (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_1)
#define LL_TIM_TRGO2_OC6_RISINGFALLING (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_1 | TIM_CR2_MMS2_0)
#define LL_TIM_TRGO2_OC4_RISING_OC6_RISING (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_2)
#define LL_TIM_TRGO2_OC4_RISING_OC6_FALLING (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_2 | TIM_CR2_MMS2_0)
#define LL_TIM_TRGO2_OC5_RISING_OC6_RISING (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_2 |TIM_CR2_MMS2_1)
#define LL_TIM_TRGO2_OC5_RISING_OC6_FALLING (TIM_CR2_MMS2_3 | TIM_CR2_MMS2_2 | TIM_CR2_MMS2_1 | TIM_CR2_MMS2_0)
#define LL_TIM_SLAVEMODE_DISABLED 0x00000000U
#define LL_TIM_SLAVEMODE_RESET TIM_SMCR_SMS_2
#define LL_TIM_SLAVEMODE_GATED (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_0)
#define LL_TIM_SLAVEMODE_TRIGGER (TIM_SMCR_SMS_2 | TIM_SMCR_SMS_1)
#define LL_TIM_SLAVEMODE_COMBINED_RESETTRIGGER TIM_SMCR_SMS_3
#define LL_TIM_TS_ITR0 0x00000000U
#define LL_TIM_TS_ITR1 TIM_SMCR_TS_0
#define LL_TIM_TS_ITR2 TIM_SMCR_TS_1
#define LL_TIM_TS_ITR3 (TIM_SMCR_TS_0 | TIM_SMCR_TS_1)
#define LL_TIM_TS_TI1F_ED TIM_SMCR_TS_2
#define LL_TIM_TS_TI1FP1 (TIM_SMCR_TS_2 | TIM_SMCR_TS_0)
#define LL_TIM_TS_TI2FP2 (TIM_SMCR_TS_2 | TIM_SMCR_TS_1)
#define LL_TIM_TS_ETRF (TIM_SMCR_TS_2 | TIM_SMCR_TS_1 | TIM_SMCR_TS_0)
#define LL_TIM_ETR_POLARITY_NONINVERTED 0x00000000U
#define LL_TIM_ETR_POLARITY_INVERTED TIM_SMCR_ETP
#define LL_TIM_ETR_PRESCALER_DIV1 0x00000000U
#define LL_TIM_ETR_PRESCALER_DIV2 TIM_SMCR_ETPS_0
#define LL_TIM_ETR_PRESCALER_DIV4 TIM_SMCR_ETPS_1
#define LL_TIM_ETR_PRESCALER_DIV8 TIM_SMCR_ETPS
#define LL_TIM_ETR_FILTER_FDIV1 0x00000000U
#define LL_TIM_ETR_FILTER_FDIV1_N2 TIM_SMCR_ETF_0
#define LL_TIM_ETR_FILTER_FDIV1_N4 TIM_SMCR_ETF_1
#define LL_TIM_ETR_FILTER_FDIV1_N8 (TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)
#define LL_TIM_ETR_FILTER_FDIV2_N6 TIM_SMCR_ETF_2
#define LL_TIM_ETR_FILTER_FDIV2_N8 (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)
#define LL_TIM_ETR_FILTER_FDIV4_N6 (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)
#define LL_TIM_ETR_FILTER_FDIV4_N8 (TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)
#define LL_TIM_ETR_FILTER_FDIV8_N6 TIM_SMCR_ETF_3
#define LL_TIM_ETR_FILTER_FDIV8_N8 (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_0)
#define LL_TIM_ETR_FILTER_FDIV16_N5 (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1)
#define LL_TIM_ETR_FILTER_FDIV16_N6 (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_1 | TIM_SMCR_ETF_0)
#define LL_TIM_ETR_FILTER_FDIV16_N8 (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2)
#define LL_TIM_ETR_FILTER_FDIV32_N5 (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_0)
#define LL_TIM_ETR_FILTER_FDIV32_N6 (TIM_SMCR_ETF_3 | TIM_SMCR_ETF_2 | TIM_SMCR_ETF_1)
#define LL_TIM_ETR_FILTER_FDIV32_N8 TIM_SMCR_ETF
#define LL_TIM_ETRSOURCE_LEGACY 0x00000000U
#define LL_TIM_ETRSOURCE_COMP1 TIM1_AF1_ETRSEL_0
#define LL_TIM_ETRSOURCE_COMP2 TIM1_AF1_ETRSEL_1
#define LL_TIM_ETRSOURCE_GPIO LL_TIM_ETRSOURCE_LEGACY
#define LL_TIM_ETRSOURCE_ADC1_AWD1 LL_TIM_ETRSOURCE_LEGACY
#define LL_TIM_ETRSOURCE_ADC1_AWD2 LL_TIM_ETRSOURCE_LEGACY
#define LL_TIM_ETRSOURCE_ADC1_AWD3 LL_TIM_ETRSOURCE_LEGACY
#define LL_TIM_BREAK_POLARITY_LOW 0x00000000U
#define LL_TIM_BREAK_POLARITY_HIGH TIM_BDTR_BKP
#define LL_TIM_BREAK_FILTER_FDIV1 0x00000000U
#define LL_TIM_BREAK_FILTER_FDIV1_N2 0x00010000U
#define LL_TIM_BREAK_FILTER_FDIV1_N4 0x00020000U
#define LL_TIM_BREAK_FILTER_FDIV1_N8 0x00030000U
#define LL_TIM_BREAK_FILTER_FDIV2_N6 0x00040000U
#define LL_TIM_BREAK_FILTER_FDIV2_N8 0x00050000U
#define LL_TIM_BREAK_FILTER_FDIV4_N6 0x00060000U
#define LL_TIM_BREAK_FILTER_FDIV4_N8 0x00070000U
#define LL_TIM_BREAK_FILTER_FDIV8_N6 0x00080000U
#define LL_TIM_BREAK_FILTER_FDIV8_N8 0x00090000U
#define LL_TIM_BREAK_FILTER_FDIV16_N5 0x000A0000U
#define LL_TIM_BREAK_FILTER_FDIV16_N6 0x000B0000U
#define LL_TIM_BREAK_FILTER_FDIV16_N8 0x000C0000U
#define LL_TIM_BREAK_FILTER_FDIV32_N5 0x000D0000U
#define LL_TIM_BREAK_FILTER_FDIV32_N6 0x000E0000U
#define LL_TIM_BREAK_FILTER_FDIV32_N8 0x000F0000U
#define LL_TIM_BREAK2_POLARITY_LOW 0x00000000U
#define LL_TIM_BREAK2_POLARITY_HIGH TIM_BDTR_BK2P
#define LL_TIM_BREAK2_FILTER_FDIV1 0x00000000U
#define LL_TIM_BREAK2_FILTER_FDIV1_N2 0x00100000U
#define LL_TIM_BREAK2_FILTER_FDIV1_N4 0x00200000U
#define LL_TIM_BREAK2_FILTER_FDIV1_N8 0x00300000U
#define LL_TIM_BREAK2_FILTER_FDIV2_N6 0x00400000U
#define LL_TIM_BREAK2_FILTER_FDIV2_N8 0x00500000U
#define LL_TIM_BREAK2_FILTER_FDIV4_N6 0x00600000U
#define LL_TIM_BREAK2_FILTER_FDIV4_N8 0x00700000U
#define LL_TIM_BREAK2_FILTER_FDIV8_N6 0x00800000U
#define LL_TIM_BREAK2_FILTER_FDIV8_N8 0x00900000U
#define LL_TIM_BREAK2_FILTER_FDIV16_N5 0x00A00000U
#define LL_TIM_BREAK2_FILTER_FDIV16_N6 0x00B00000U
#define LL_TIM_BREAK2_FILTER_FDIV16_N8 0x00C00000U
#define LL_TIM_BREAK2_FILTER_FDIV32_N5 0x00D00000U
#define LL_TIM_BREAK2_FILTER_FDIV32_N6 0x00E00000U
#define LL_TIM_BREAK2_FILTER_FDIV32_N8 0x00F00000U
#define LL_TIM_OSSI_DISABLE 0x00000000U
#define LL_TIM_OSSI_ENABLE TIM_BDTR_OSSI
#define LL_TIM_OSSR_DISABLE 0x00000000U
#define LL_TIM_OSSR_ENABLE TIM_BDTR_OSSR
#define LL_TIM_BREAK_INPUT_BKIN 0x00000000U
#define LL_TIM_BREAK_INPUT_BKIN2 0x00000004U
#define LL_TIM_BKIN_SOURCE_BKIN TIM1_AF1_BKINE
#define LL_TIM_BKIN_SOURCE_BKCOMP1 TIM1_AF1_BKCMP1E
#define LL_TIM_BKIN_SOURCE_BKCOMP2 TIM1_AF1_BKCMP2E
#define LL_TIM_BKIN_POLARITY_LOW TIM1_AF1_BKINP
#define LL_TIM_BKIN_POLARITY_HIGH 0x00000000U
#define LL_TIM_BREAK_AFMODE_INPUT 0x00000000U
#define LL_TIM_BREAK_AFMODE_BIDIRECTIONAL TIM_BDTR_BKBID
#define LL_TIM_BREAK2_AFMODE_INPUT 0x00000000U
#define LL_TIM_BREAK2_AFMODE_BIDIRECTIONAL TIM_BDTR_BK2BID
#define LL_TIM_DMABURST_BASEADDR_CR1 0x00000000U
#define LL_TIM_DMABURST_BASEADDR_CR2 TIM_DCR_DBA_0
#define LL_TIM_DMABURST_BASEADDR_SMCR TIM_DCR_DBA_1
#define LL_TIM_DMABURST_BASEADDR_DIER (TIM_DCR_DBA_1 | TIM_DCR_DBA_0)
#define LL_TIM_DMABURST_BASEADDR_SR TIM_DCR_DBA_2
#define LL_TIM_DMABURST_BASEADDR_EGR (TIM_DCR_DBA_2 | TIM_DCR_DBA_0)
#define LL_TIM_DMABURST_BASEADDR_CCMR1 (TIM_DCR_DBA_2 | TIM_DCR_DBA_1)
#define LL_TIM_DMABURST_BASEADDR_CCMR2 (TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)
#define LL_TIM_DMABURST_BASEADDR_CCER TIM_DCR_DBA_3
#define LL_TIM_DMABURST_BASEADDR_CNT (TIM_DCR_DBA_3 | TIM_DCR_DBA_0)
#define LL_TIM_DMABURST_BASEADDR_PSC (TIM_DCR_DBA_3 | TIM_DCR_DBA_1)
#define LL_TIM_DMABURST_BASEADDR_ARR (TIM_DCR_DBA_3 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)
#define LL_TIM_DMABURST_BASEADDR_RCR (TIM_DCR_DBA_3 | TIM_DCR_DBA_2)
#define LL_TIM_DMABURST_BASEADDR_CCR1 (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_0)
#define LL_TIM_DMABURST_BASEADDR_CCR2 (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1)
#define LL_TIM_DMABURST_BASEADDR_CCR3 (TIM_DCR_DBA_3 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)
#define LL_TIM_DMABURST_BASEADDR_CCR4 TIM_DCR_DBA_4
#define LL_TIM_DMABURST_BASEADDR_BDTR (TIM_DCR_DBA_4 | TIM_DCR_DBA_0)
#define LL_TIM_DMABURST_BASEADDR_OR (TIM_DCR_DBA_4 | TIM_DCR_DBA_2)
#define LL_TIM_DMABURST_BASEADDR_CCMR3 (TIM_DCR_DBA_4 | TIM_DCR_DBA_2 | TIM_DCR_DBA_0)
#define LL_TIM_DMABURST_BASEADDR_CCR5 (TIM_DCR_DBA_4 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1)
#define LL_TIM_DMABURST_BASEADDR_CCR6 (TIM_DCR_DBA_4 | TIM_DCR_DBA_2 | TIM_DCR_DBA_1 | TIM_DCR_DBA_0)
#define LL_TIM_DMABURST_BASEADDR_AF1 (TIM_DCR_DBA_4 | TIM_DCR_DBA_3)
#define LL_TIM_DMABURST_BASEADDR_AF2 (TIM_DCR_DBA_4 | TIM_DCR_DBA_3 | TIM_DCR_DBA_0)
#define LL_TIM_DMABURST_LENGTH_1TRANSFER 0x00000000U
#define LL_TIM_DMABURST_LENGTH_2TRANSFERS TIM_DCR_DBL_0
#define LL_TIM_DMABURST_LENGTH_3TRANSFERS TIM_DCR_DBL_1
#define LL_TIM_DMABURST_LENGTH_4TRANSFERS (TIM_DCR_DBL_1 | TIM_DCR_DBL_0)
#define LL_TIM_DMABURST_LENGTH_5TRANSFERS TIM_DCR_DBL_2
#define LL_TIM_DMABURST_LENGTH_6TRANSFERS (TIM_DCR_DBL_2 | TIM_DCR_DBL_0)
#define LL_TIM_DMABURST_LENGTH_7TRANSFERS (TIM_DCR_DBL_2 | TIM_DCR_DBL_1)
#define LL_TIM_DMABURST_LENGTH_8TRANSFERS (TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)
#define LL_TIM_DMABURST_LENGTH_9TRANSFERS TIM_DCR_DBL_3
#define LL_TIM_DMABURST_LENGTH_10TRANSFERS (TIM_DCR_DBL_3 | TIM_DCR_DBL_0)
#define LL_TIM_DMABURST_LENGTH_11TRANSFERS (TIM_DCR_DBL_3 | TIM_DCR_DBL_1)
#define LL_TIM_DMABURST_LENGTH_12TRANSFERS (TIM_DCR_DBL_3 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)
#define LL_TIM_DMABURST_LENGTH_13TRANSFERS (TIM_DCR_DBL_3 | TIM_DCR_DBL_2)
#define LL_TIM_DMABURST_LENGTH_14TRANSFERS (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_0)
#define LL_TIM_DMABURST_LENGTH_15TRANSFERS (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1)
#define LL_TIM_DMABURST_LENGTH_16TRANSFERS (TIM_DCR_DBL_3 | TIM_DCR_DBL_2 | TIM_DCR_DBL_1 | TIM_DCR_DBL_0)
#define LL_TIM_DMABURST_LENGTH_17TRANSFERS TIM_DCR_DBL_4
#define LL_TIM_DMABURST_LENGTH_18TRANSFERS (TIM_DCR_DBL_4 | TIM_DCR_DBL_0)
#define LL_TIM_TIM1_ETR_ADC1_RMP_NC TIM1_OR_RMP_MASK
#define LL_TIM_TIM1_ETR_ADC1_RMP_AWD1 (TIM1_OR_ETR_ADC1_RMP_0 | TIM1_OR_RMP_MASK)
#define LL_TIM_TIM1_ETR_ADC1_RMP_AWD2 (TIM1_OR_ETR_ADC1_RMP_1 | TIM1_OR_RMP_MASK)
#define LL_TIM_TIM1_ETR_ADC1_RMP_AWD3 (TIM1_OR_ETR_ADC1_RMP | TIM1_OR_RMP_MASK)
#define LL_TIM_TIM1_TI1_RMP_GPIO TIM1_OR_RMP_MASK
#define LL_TIM_TIM1_TI1_RMP_COMP1 (TIM1_OR_TI1_RMP | TIM1_OR_RMP_MASK)
#define LL_TIM_TIM2_ITR1_RMP_NONE TIM2_OR_RMP_MASK
#define LL_TIM_TIM2_ITR1_RMP_USB_SOF (TIM2_OR_ITR1_RMP)
#define LL_TIM_TIM2_ETR_RMP_GPIO TIM2_OR_RMP_MASK
#define LL_TIM_TIM2_ETR_RMP_LSE (TIM2_OR_ETR_RMP | TIM2_OR_RMP_MASK)
#define LL_TIM_TIM2_TI4_RMP_GPIO TIM2_OR_RMP_MASK
#define LL_TIM_TIM2_TI4_RMP_COMP1 (TIM2_OR_TI4_RMP_0 | TIM2_OR_RMP_MASK)
#define LL_TIM_TIM2_TI4_RMP_COMP2 (TIM2_OR_TI4_RMP_1 | TIM2_OR_RMP_MASK)
#define LL_TIM_TIM2_TI4_RMP_COMP1_COMP2 (TIM2_OR_TI4_RMP | TIM2_OR_RMP_MASK)
#define LL_TIM_TIM16_TI1_RMP_GPIO TIM16_OR_RMP_MASK
#define LL_TIM_TIM16_TI1_RMP_LSI (TIM16_OR_TI1_RMP_0 | TIM16_OR_RMP_MASK)
#define LL_TIM_TIM16_TI1_RMP_LSE (TIM16_OR_TI1_RMP_1 | TIM16_OR_RMP_MASK)
#define LL_TIM_TIM16_TI1_RMP_RTC (TIM16_OR_TI1_RMP_1 | TIM16_OR_TI1_RMP_0 | TIM16_OR_RMP_MASK)
#define LL_TIM_TIM17_TI1_RMP_GPIO TIM17_OR_RMP_MASK
#define LL_TIM_TIM17_TI1_RMP_MSI (TIM17_OR_TI1_RMP_0 | TIM17_OR_RMP_MASK)
#define LL_TIM_TIM17_TI1_RMP_HSE_32 (TIM17_OR_TI1_RMP_1 | TIM17_OR_RMP_MASK)
#define LL_TIM_TIM17_TI1_RMP_MCO (TIM17_OR_TI1_RMP | TIM17_OR_RMP_MASK)
#define LL_TIM_OCREF_CLR_INT_OCREF_CLR 0x00000000U
#define LL_TIM_OCREF_CLR_INT_ETR TIM_SMCR_OCCS
#define LL_TIM_BKIN_SOURCE_DFBK LL_TIM_BKIN_SOURCE_DF1BK
#define LL_TIM_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG((__INSTANCE__)->__REG__, (__VALUE__))
#define LL_TIM_ReadReg(__INSTANCE__,__REG__) READ_REG((__INSTANCE__)->__REG__)
#define __LL_TIM_GETFLAG_UIFCPY(__CNT__) (READ_BIT((__CNT__), TIM_CNT_UIFCPY) >> TIM_CNT_UIFCPY_Pos)
#define __LL_TIM_CALC_DEADTIME(__TIMCLK__,__CKD__,__DT__) ( (((uint64_t)((__DT__)*1000U)) < ((DT_DELAY_1+1U) * TIM_CALC_DTS((__TIMCLK__), (__CKD__)))) ? (uint8_t)(((uint64_t)((__DT__)*1000U) / TIM_CALC_DTS((__TIMCLK__), (__CKD__))) & DT_DELAY_1) : (((uint64_t)((__DT__)*1000U)) < ((64U + (DT_DELAY_2+1U)) * 2U * TIM_CALC_DTS((__TIMCLK__), (__CKD__)))) ? (uint8_t)(DT_RANGE_2 | ((uint8_t)((uint8_t)((((uint64_t)((__DT__)*1000U))/ TIM_CALC_DTS((__TIMCLK__), (__CKD__))) >> 1U) - (uint8_t) 64) & DT_DELAY_2)) : (((uint64_t)((__DT__)*1000U)) < ((32U + (DT_DELAY_3+1U)) * 8U * TIM_CALC_DTS((__TIMCLK__), (__CKD__)))) ? (uint8_t)(DT_RANGE_3 | ((uint8_t)((uint8_t)(((((uint64_t)(__DT__)*1000U))/ TIM_CALC_DTS((__TIMCLK__), (__CKD__))) >> 3U) - (uint8_t) 32) & DT_DELAY_3)) : (((uint64_t)((__DT__)*1000U)) < ((32U + (DT_DELAY_4+1U)) * 16U * TIM_CALC_DTS((__TIMCLK__), (__CKD__)))) ? (uint8_t)(DT_RANGE_4 | ((uint8_t)((uint8_t)(((((uint64_t)(__DT__)*1000U))/ TIM_CALC_DTS((__TIMCLK__), (__CKD__))) >> 4U) - (uint8_t) 32) & DT_DELAY_4)) : 0U)
#define __LL_TIM_CALC_PSC(__TIMCLK__,__CNTCLK__) (((__TIMCLK__) >= (__CNTCLK__)) ? (uint32_t)(((__TIMCLK__)/(__CNTCLK__)) - 1U) : 0U)
#define __LL_TIM_CALC_ARR(__TIMCLK__,__PSC__,__FREQ__) ((((__TIMCLK__)/((__PSC__) + 1U)) >= (__FREQ__)) ? (((__TIMCLK__)/((__FREQ__) * ((__PSC__) + 1U))) - 1U) : 0U)
#define __LL_TIM_CALC_DELAY(__TIMCLK__,__PSC__,__DELAY__) ((uint32_t)(((uint64_t)(__TIMCLK__) * (uint64_t)(__DELAY__)) / ((uint64_t)1000000U * (uint64_t)((__PSC__) + 1U))))
#define __LL_TIM_CALC_PULSE(__TIMCLK__,__PSC__,__DELAY__,__PULSE__) ((uint32_t)(__LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__PULSE__)) + __LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__DELAY__))))
#define __LL_TIM_GET_ICPSC_RATIO(__ICPSC__) ((uint32_t)(0x01U << (((__ICPSC__) >> 16U) >> TIM_CCMR1_IC1PSC_Pos)))
static inline void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) |= ((0x1UL << (0U))));
}
static inline void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_TIM_IsEnabledCounter(TIM_TypeDef *TIMx)
{
  return ((((TIMx->CR1) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableUpdateEvent(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) &= ~((0x1UL << (1U))));
}
static inline void LL_TIM_DisableUpdateEvent(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) |= ((0x1UL << (1U))));
}
static inline uint32_t LL_TIM_IsEnabledUpdateEvent(TIM_TypeDef *TIMx)
{
  return ((((TIMx->CR1) & ((0x1UL << (1U)))) == (uint32_t)RESET) ? 1UL : 0UL);
}
static inline void LL_TIM_SetUpdateSource(TIM_TypeDef *TIMx, uint32_t UpdateSource)
{
  (((TIMx->CR1)) = ((((((TIMx->CR1))) & (~((0x1UL << (2U))))) | (UpdateSource))));
}
static inline uint32_t LL_TIM_GetUpdateSource(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CR1) & ((0x1UL << (2U)))));
}
static inline void LL_TIM_SetOnePulseMode(TIM_TypeDef *TIMx, uint32_t OnePulseMode)
{
  (((TIMx->CR1)) = ((((((TIMx->CR1))) & (~((0x1UL << (3U))))) | (OnePulseMode))));
}
static inline uint32_t LL_TIM_GetOnePulseMode(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CR1) & ((0x1UL << (3U)))));
}
static inline void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
  (((TIMx->CR1)) = ((((((TIMx->CR1))) & (~(((0x1UL << (4U)) | (0x3UL << (5U)))))) | (CounterMode))));
}
static inline uint32_t LL_TIM_GetCounterMode(TIM_TypeDef *TIMx)
{
  uint32_t counter_mode;
  counter_mode = (uint32_t)(((TIMx->CR1) & ((0x3UL << (5U)))));
  if (counter_mode == 0U)
  {
    counter_mode = (uint32_t)(((TIMx->CR1) & ((0x1UL << (4U)))));
  }
  return counter_mode;
}
static inline void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) |= ((0x1UL << (7U))));
}
static inline void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) &= ~((0x1UL << (7U))));
}
static inline uint32_t LL_TIM_IsEnabledARRPreload(TIM_TypeDef *TIMx)
{
  return ((((TIMx->CR1) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_SetClockDivision(TIM_TypeDef *TIMx, uint32_t ClockDivision)
{
  (((TIMx->CR1)) = ((((((TIMx->CR1))) & (~((0x3UL << (8U))))) | (ClockDivision))));
}
static inline uint32_t LL_TIM_GetClockDivision(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CR1) & ((0x3UL << (8U)))));
}
static inline void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
  ((TIMx->CNT) = (Counter));
}
static inline uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CNT)));
}
static inline uint32_t LL_TIM_GetDirection(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CR1) & ((0x1UL << (4U)))));
}
static inline void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
  ((TIMx->PSC) = (Prescaler));
}
static inline uint32_t LL_TIM_GetPrescaler(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->PSC)));
}
static inline void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
  ((TIMx->ARR) = (AutoReload));
}
static inline uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->ARR)));
}
static inline void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
  ((TIMx->RCR) = (RepetitionCounter));
}
static inline uint32_t LL_TIM_GetRepetitionCounter(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->RCR)));
}
static inline void LL_TIM_EnableUIFRemap(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) |= ((0x1UL << (11U))));
}
static inline void LL_TIM_DisableUIFRemap(TIM_TypeDef *TIMx)
{
  ((TIMx->CR1) &= ~((0x1UL << (11U))));
}
static inline uint32_t LL_TIM_IsActiveUIFCPY(uint32_t Counter)
{
  return (((Counter & (0x1UL << (31U))) == ((0x1UL << (31U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_CC_EnablePreload(TIM_TypeDef *TIMx)
{
  ((TIMx->CR2) |= ((0x1UL << (0U))));
}
static inline void LL_TIM_CC_DisablePreload(TIM_TypeDef *TIMx)
{
  ((TIMx->CR2) &= ~((0x1UL << (0U))));
}
static inline void LL_TIM_CC_SetUpdate(TIM_TypeDef *TIMx, uint32_t CCUpdateSource)
{
  (((TIMx->CR2)) = ((((((TIMx->CR2))) & (~((0x1UL << (2U))))) | (CCUpdateSource))));
}
static inline void LL_TIM_CC_SetDMAReqTrigger(TIM_TypeDef *TIMx, uint32_t DMAReqTrigger)
{
  (((TIMx->CR2)) = ((((((TIMx->CR2))) & (~((0x1UL << (3U))))) | (DMAReqTrigger))));
}
static inline uint32_t LL_TIM_CC_GetDMAReqTrigger(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CR2) & ((0x1UL << (3U)))));
}
static inline void LL_TIM_CC_SetLockLevel(TIM_TypeDef *TIMx, uint32_t LockLevel)
{
  (((TIMx->BDTR)) = ((((((TIMx->BDTR))) & (~((0x3UL << (8U))))) | (LockLevel))));
}
static inline void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  ((TIMx->CCER) |= (Channels));
}
static inline void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  ((TIMx->CCER) &= ~(Channels));
}
static inline uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((((TIMx->CCER) & (Channels)) == (Channels)) ? 1UL : 0UL);
}
static inline void LL_TIM_OC_ConfigOutput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) &= ~(((0x3UL << (0U)) << SHIFT_TAB_OCxx[iChannel])));
  (((TIMx->CCER)) = ((((((TIMx->CCER))) & (~(((0x1UL << (1U)) << SHIFT_TAB_CCxP[iChannel])))) | ((Configuration & (0x1UL << (1U))) << SHIFT_TAB_CCxP[iChannel]))));
  (((TIMx->CR2)) = ((((((TIMx->CR2))) & (~(((0x1UL << (8U)) << SHIFT_TAB_OISx[iChannel])))) | ((Configuration & (0x1UL << (8U))) << SHIFT_TAB_OISx[iChannel]))));
}
static inline void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  (((*pReg)) = ((((((*pReg))) & (~((((0x1007UL << (4U)) | (0x3UL << (0U))) << SHIFT_TAB_OCxx[iChannel])))) | (Mode << SHIFT_TAB_OCxx[iChannel]))));
}
static inline uint32_t LL_TIM_OC_GetMode(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  return (((*pReg) & ((((0x1007UL << (4U)) | (0x3UL << (0U))) << SHIFT_TAB_OCxx[iChannel]))) >> SHIFT_TAB_OCxx[iChannel]);
}
static inline void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  (((TIMx->CCER)) = ((((((TIMx->CCER))) & (~(((0x1UL << (1U)) << SHIFT_TAB_CCxP[iChannel])))) | (Polarity << SHIFT_TAB_CCxP[iChannel]))));
}
static inline uint32_t LL_TIM_OC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  return (((TIMx->CCER) & (((0x1UL << (1U)) << SHIFT_TAB_CCxP[iChannel]))) >> SHIFT_TAB_CCxP[iChannel]);
}
static inline void LL_TIM_OC_SetIdleState(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t IdleState)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  (((TIMx->CR2)) = ((((((TIMx->CR2))) & (~(((0x1UL << (8U)) << SHIFT_TAB_OISx[iChannel])))) | (IdleState << SHIFT_TAB_OISx[iChannel]))));
}
static inline uint32_t LL_TIM_OC_GetIdleState(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  return (((TIMx->CR2) & (((0x1UL << (8U)) << SHIFT_TAB_OISx[iChannel]))) >> SHIFT_TAB_OISx[iChannel]);
}
static inline void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) |= (((0x1UL << (2U)) << SHIFT_TAB_OCxx[iChannel])));
}
static inline void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) &= ~(((0x1UL << (2U)) << SHIFT_TAB_OCxx[iChannel])));
}
static inline uint32_t LL_TIM_OC_IsEnabledFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  uint32_t bitfield = (0x1UL << (2U)) << SHIFT_TAB_OCxx[iChannel];
  return ((((*pReg) & (bitfield)) == bitfield) ? 1UL : 0UL);
}
static inline void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) |= (((0x1UL << (3U)) << SHIFT_TAB_OCxx[iChannel])));
}
static inline void LL_TIM_OC_DisablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) &= ~(((0x1UL << (3U)) << SHIFT_TAB_OCxx[iChannel])));
}
static inline uint32_t LL_TIM_OC_IsEnabledPreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  uint32_t bitfield = (0x1UL << (3U)) << SHIFT_TAB_OCxx[iChannel];
  return ((((*pReg) & (bitfield)) == bitfield) ? 1UL : 0UL);
}
static inline void LL_TIM_OC_EnableClear(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) |= (((0x1UL << (7U)) << SHIFT_TAB_OCxx[iChannel])));
}
static inline void LL_TIM_OC_DisableClear(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  ((*pReg) &= ~(((0x1UL << (7U)) << SHIFT_TAB_OCxx[iChannel])));
}
static inline uint32_t LL_TIM_OC_IsEnabledClear(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  uint32_t bitfield = (0x1UL << (7U)) << SHIFT_TAB_OCxx[iChannel];
  return ((((*pReg) & (bitfield)) == bitfield) ? 1UL : 0UL);
}
static inline void LL_TIM_OC_SetDeadTime(TIM_TypeDef *TIMx, uint32_t DeadTime)
{
  (((TIMx->BDTR)) = ((((((TIMx->BDTR))) & (~((0xFFUL << (0U))))) | (DeadTime))));
}
static inline void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  ((TIMx->CCR1) = (CompareValue));
}
static inline void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  ((TIMx->CCR2) = (CompareValue));
}
static inline void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  ((TIMx->CCR3) = (CompareValue));
}
static inline void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  ((TIMx->CCR4) = (CompareValue));
}
static inline void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  (((TIMx->CCR5)) = ((((((TIMx->CCR5))) & (~((0xFFFFFFFFUL << (0U))))) | (CompareValue))));
}
static inline void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  ((TIMx->CCR6) = (CompareValue));
}
static inline uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR1)));
}
static inline uint32_t LL_TIM_OC_GetCompareCH2(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR2)));
}
static inline uint32_t LL_TIM_OC_GetCompareCH3(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR3)));
}
static inline uint32_t LL_TIM_OC_GetCompareCH4(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR4)));
}
static inline uint32_t LL_TIM_OC_GetCompareCH5(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR5) & ((0xFFFFFFFFUL << (0U)))));
}
static inline uint32_t LL_TIM_OC_GetCompareCH6(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR6)));
}
static inline void LL_TIM_SetCH5CombinedChannels(TIM_TypeDef *TIMx, uint32_t GroupCH5)
{
  (((TIMx->CCR5)) = ((((((TIMx->CCR5))) & (~(((0x1UL << (31U)) | (0x1UL << (30U)) | (0x1UL << (29U)))))) | (GroupCH5))));
}
static inline void LL_TIM_IC_Config(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Configuration)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  (((*pReg)) = ((((((*pReg))) & (~((((0xFUL << (4U)) | (0x3UL << (2U)) | (0x3UL << (0U))) << SHIFT_TAB_ICxx[iChannel])))) | (((Configuration >> 16U) & ((0xFUL << (4U)) | (0x3UL << (2U)) | (0x3UL << (0U)))) << SHIFT_TAB_ICxx[iChannel]))));
  (((TIMx->CCER)) = ((((((TIMx->CCER))) & (~((((0x1UL << (3U)) | (0x1UL << (1U))) << SHIFT_TAB_CCxP[iChannel])))) | ((Configuration & ((0x1UL << (3U)) | (0x1UL << (1U)))) << SHIFT_TAB_CCxP[iChannel]))));
}
static inline void LL_TIM_IC_SetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICActiveInput)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  (((*pReg)) = ((((((*pReg))) & (~((((0x3UL << (0U))) << SHIFT_TAB_ICxx[iChannel])))) | ((ICActiveInput >> 16U) << SHIFT_TAB_ICxx[iChannel]))));
}
static inline uint32_t LL_TIM_IC_GetActiveInput(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  return ((((*pReg) & ((((0x3UL << (0U))) << SHIFT_TAB_ICxx[iChannel]))) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
}
static inline void LL_TIM_IC_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPrescaler)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  (((*pReg)) = ((((((*pReg))) & (~((((0x3UL << (2U))) << SHIFT_TAB_ICxx[iChannel])))) | ((ICPrescaler >> 16U) << SHIFT_TAB_ICxx[iChannel]))));
}
static inline uint32_t LL_TIM_IC_GetPrescaler(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  return ((((*pReg) & ((((0x3UL << (2U))) << SHIFT_TAB_ICxx[iChannel]))) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
}
static inline void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  (((*pReg)) = ((((((*pReg))) & (~((((0xFUL << (4U))) << SHIFT_TAB_ICxx[iChannel])))) | ((ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]))));
}
static inline uint32_t LL_TIM_IC_GetFilter(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  const volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  return ((((*pReg) & ((((0xFUL << (4U))) << SHIFT_TAB_ICxx[iChannel]))) >> SHIFT_TAB_ICxx[iChannel]) << 16U);
}
static inline void LL_TIM_IC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICPolarity)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  (((TIMx->CCER)) = ((((((TIMx->CCER))) & (~((((0x1UL << (3U)) | (0x1UL << (1U))) << SHIFT_TAB_CCxP[iChannel])))) | (ICPolarity << SHIFT_TAB_CCxP[iChannel]))));
}
static inline uint32_t LL_TIM_IC_GetPolarity(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = (((Channel) == (0x1UL << (0U))) ? 0U : ((Channel) == (0x1UL << (2U))) ? 1U : ((Channel) == (0x1UL << (4U))) ? 2U : ((Channel) == (0x1UL << (6U))) ? 3U : ((Channel) == (0x1UL << (8U))) ? 4U : ((Channel) == (0x1UL << (10U))) ? 5U : ((Channel) == (0x1UL << (12U))) ? 6U : ((Channel) == (0x1UL << (16U))) ? 7U : 8U);
  return (((TIMx->CCER) & ((((0x1UL << (3U)) | (0x1UL << (1U))) << SHIFT_TAB_CCxP[iChannel]))) >>
          SHIFT_TAB_CCxP[iChannel]);
}
static inline void LL_TIM_IC_EnableXORCombination(TIM_TypeDef *TIMx)
{
  ((TIMx->CR2) |= ((0x1UL << (7U))));
}
static inline void LL_TIM_IC_DisableXORCombination(TIM_TypeDef *TIMx)
{
  ((TIMx->CR2) &= ~((0x1UL << (7U))));
}
static inline uint32_t LL_TIM_IC_IsEnabledXORCombination(TIM_TypeDef *TIMx)
{
  return ((((TIMx->CR2) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline uint32_t LL_TIM_IC_GetCaptureCH1(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR1)));
}
static inline uint32_t LL_TIM_IC_GetCaptureCH2(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR2)));
}
static inline uint32_t LL_TIM_IC_GetCaptureCH3(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR3)));
}
static inline uint32_t LL_TIM_IC_GetCaptureCH4(TIM_TypeDef *TIMx)
{
  return (uint32_t)(((TIMx->CCR4)));
}
static inline void LL_TIM_EnableExternalClock(TIM_TypeDef *TIMx)
{
  ((TIMx->SMCR) |= ((0x1UL << (14U))));
}
static inline void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
{
  ((TIMx->SMCR) &= ~((0x1UL << (14U))));
}
static inline uint32_t LL_TIM_IsEnabledExternalClock(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SMCR) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  (((TIMx->SMCR)) = ((((((TIMx->SMCR))) & (~((0x10007UL << (0U)) | (0x1UL << (14U))))) | (ClockSource))));
}
static inline void LL_TIM_SetEncoderMode(TIM_TypeDef *TIMx, uint32_t EncoderMode)
{
  (((TIMx->SMCR)) = ((((((TIMx->SMCR))) & (~((0x10007UL << (0U))))) | (EncoderMode))));
}
static inline void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  (((TIMx->CR2)) = ((((((TIMx->CR2))) & (~((0x7UL << (4U))))) | (TimerSynchronization))));
}
static inline void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
  (((TIMx->CR2)) = ((((((TIMx->CR2))) & (~((0xFUL << (20U))))) | (ADCSynchronization))));
}
static inline void LL_TIM_SetSlaveMode(TIM_TypeDef *TIMx, uint32_t SlaveMode)
{
  (((TIMx->SMCR)) = ((((((TIMx->SMCR))) & (~((0x10007UL << (0U))))) | (SlaveMode))));
}
static inline void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  (((TIMx->SMCR)) = ((((((TIMx->SMCR))) & (~((0x30007UL << (4U))))) | (TriggerInput))));
}
static inline void LL_TIM_EnableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  ((TIMx->SMCR) |= ((0x1UL << (7U))));
}
static inline void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  ((TIMx->SMCR) &= ~((0x1UL << (7U))));
}
static inline uint32_t LL_TIM_IsEnabledMasterSlaveMode(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SMCR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
                                      uint32_t ETRFilter)
{
  (((TIMx->SMCR)) = ((((((TIMx->SMCR))) & (~((0x1UL << (15U)) | (0x3UL << (12U)) | (0xFUL << (8U))))) | (ETRPolarity | ETRPrescaler | ETRFilter))));
}
static inline void LL_TIM_SetETRSource(TIM_TypeDef *TIMx, uint32_t ETRSource)
{
  (((TIMx->AF1)) = ((((((TIMx->AF1))) & (~((0x7UL << (14U))))) | (ETRSource))));
}
static inline void LL_TIM_EnableBRK(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) |= ((0x1UL << (12U))));
}
static inline void LL_TIM_DisableBRK(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) &= ~((0x1UL << (12U))));
}
static inline void LL_TIM_ConfigBRK(TIM_TypeDef *TIMx, uint32_t BreakPolarity, uint32_t BreakFilter,
                                      uint32_t BreakAFMode)
{
  (((TIMx->BDTR)) = ((((((TIMx->BDTR))) & (~((0x1UL << (13U)) | (0xFUL << (16U)) | (0x1UL << (28U))))) | (BreakPolarity | BreakFilter | BreakAFMode))));
}
static inline void LL_TIM_DisarmBRK(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) |= ((0x1UL << (26U))));
}
static inline void LL_TIM_ReArmBRK(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) &= ~((0x1UL << (26U))));
}
static inline void LL_TIM_EnableBRK2(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) |= ((0x1UL << (24U))));
}
static inline void LL_TIM_DisableBRK2(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) &= ~((0x1UL << (24U))));
}
static inline void LL_TIM_ConfigBRK2(TIM_TypeDef *TIMx, uint32_t Break2Polarity, uint32_t Break2Filter,
                                       uint32_t Break2AFMode)
{
  (((TIMx->BDTR)) = ((((((TIMx->BDTR))) & (~((0x1UL << (25U)) | (0xFUL << (20U)) | (0x1UL << (29U))))) | (Break2Polarity | Break2Filter | Break2AFMode))));
}
static inline void LL_TIM_DisarmBRK2(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) |= ((0x1UL << (27U))));
}
static inline void LL_TIM_ReArmBRK2(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) &= ~((0x1UL << (27U))));
}
static inline void LL_TIM_SetOffStates(TIM_TypeDef *TIMx, uint32_t OffStateIdle, uint32_t OffStateRun)
{
  (((TIMx->BDTR)) = ((((((TIMx->BDTR))) & (~((0x1UL << (10U)) | (0x1UL << (11U))))) | (OffStateIdle | OffStateRun))));
}
static inline void LL_TIM_EnableAutomaticOutput(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) |= ((0x1UL << (14U))));
}
static inline void LL_TIM_DisableAutomaticOutput(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) &= ~((0x1UL << (14U))));
}
static inline uint32_t LL_TIM_IsEnabledAutomaticOutput(TIM_TypeDef *TIMx)
{
  return ((((TIMx->BDTR) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) |= ((0x1UL << (15U))));
}
static inline void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
{
  ((TIMx->BDTR) &= ~((0x1UL << (15U))));
}
static inline uint32_t LL_TIM_IsEnabledAllOutputs(TIM_TypeDef *TIMx)
{
  return ((((TIMx->BDTR) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableBreakInputSource(TIM_TypeDef *TIMx, uint32_t BreakInput, uint32_t Source)
{
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->AF1) + BreakInput));
  ((*pReg) |= (Source));
}
static inline void LL_TIM_DisableBreakInputSource(TIM_TypeDef *TIMx, uint32_t BreakInput, uint32_t Source)
{
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->AF1) + BreakInput));
  ((*pReg) &= ~(Source));
}
static inline void LL_TIM_SetBreakInputSourcePolarity(TIM_TypeDef *TIMx, uint32_t BreakInput, uint32_t Source,
                                                        uint32_t Polarity)
{
  volatile uint32_t *pReg = (volatile uint32_t *)((uint32_t)((uint32_t)(&TIMx->AF1) + BreakInput));
  (((*pReg)) = ((((((*pReg))) & (~(((0x1UL << (9U)) << ((__CLZ(__RBIT(Source))) & 0x1FUL))))) | ((Polarity << ((__CLZ(__RBIT(Source))) & 0x1FUL))))));
}
static inline void LL_TIM_ConfigDMABurst(TIM_TypeDef *TIMx, uint32_t DMABurstBaseAddress, uint32_t DMABurstLength)
{
  (((TIMx->DCR)) = ((((((TIMx->DCR))) & (~(((0x1FUL << (8U)) | (0x1FUL << (0U)))))) | ((DMABurstBaseAddress | DMABurstLength)))));
}
static inline void LL_TIM_SetRemap(TIM_TypeDef *TIMx, uint32_t Remap)
{
  (((TIMx->OR)) = ((((((TIMx->OR))) & (~((Remap >> 16U)))) | ((Remap & 0x0000FFFFU)))));
}
static inline void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSource)
{
  (((TIMx->SMCR)) = ((((((TIMx->SMCR))) & (~((0x1UL << (3U))))) | (OCRefClearInputSource))));
}
static inline void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (0U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (1U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_CC1(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (2U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_CC2(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (3U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_CC3(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (4U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_CC4(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_CC5(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (16U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_CC5(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_CC6(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (17U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_CC6(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (17U)))) == ((0x1UL << (17U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_COM(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (5U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_COM(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_TRIG(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (6U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_TRIG(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (7U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_BRK2(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (8U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_CC1OVR(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (9U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_CC1OVR(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_CC2OVR(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (10U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_CC2OVR(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_CC3OVR(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (11U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_CC3OVR(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_CC4OVR(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (12U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_CC4OVR(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_ClearFlag_SYSBRK(TIM_TypeDef *TIMx)
{
  ((TIMx->SR) = (~((0x1UL << (13U)))));
}
static inline uint32_t LL_TIM_IsActiveFlag_SYSBRK(TIM_TypeDef *TIMx)
{
  return ((((TIMx->SR) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (0U))));
}
static inline void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableIT_CC1(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (1U))));
}
static inline void LL_TIM_DisableIT_CC1(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (1U))));
}
static inline uint32_t LL_TIM_IsEnabledIT_CC1(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableIT_CC2(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (2U))));
}
static inline void LL_TIM_DisableIT_CC2(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (2U))));
}
static inline uint32_t LL_TIM_IsEnabledIT_CC2(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableIT_CC3(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (3U))));
}
static inline void LL_TIM_DisableIT_CC3(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (3U))));
}
static inline uint32_t LL_TIM_IsEnabledIT_CC3(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableIT_CC4(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (4U))));
}
static inline void LL_TIM_DisableIT_CC4(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (4U))));
}
static inline uint32_t LL_TIM_IsEnabledIT_CC4(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableIT_COM(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (5U))));
}
static inline void LL_TIM_DisableIT_COM(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (5U))));
}
static inline uint32_t LL_TIM_IsEnabledIT_COM(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableIT_TRIG(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (6U))));
}
static inline void LL_TIM_DisableIT_TRIG(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (6U))));
}
static inline uint32_t LL_TIM_IsEnabledIT_TRIG(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (7U))));
}
static inline void LL_TIM_DisableIT_BRK(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (7U))));
}
static inline uint32_t LL_TIM_IsEnabledIT_BRK(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (8U))));
}
static inline void LL_TIM_DisableDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (8U))));
}
static inline uint32_t LL_TIM_IsEnabledDMAReq_UPDATE(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableDMAReq_CC1(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (9U))));
}
static inline void LL_TIM_DisableDMAReq_CC1(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (9U))));
}
static inline uint32_t LL_TIM_IsEnabledDMAReq_CC1(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableDMAReq_CC2(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (10U))));
}
static inline void LL_TIM_DisableDMAReq_CC2(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (10U))));
}
static inline uint32_t LL_TIM_IsEnabledDMAReq_CC2(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableDMAReq_CC3(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (11U))));
}
static inline void LL_TIM_DisableDMAReq_CC3(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (11U))));
}
static inline uint32_t LL_TIM_IsEnabledDMAReq_CC3(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (12U))));
}
static inline void LL_TIM_DisableDMAReq_CC4(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (12U))));
}
static inline uint32_t LL_TIM_IsEnabledDMAReq_CC4(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableDMAReq_COM(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (13U))));
}
static inline void LL_TIM_DisableDMAReq_COM(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (13U))));
}
static inline uint32_t LL_TIM_IsEnabledDMAReq_COM(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_EnableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) |= ((0x1UL << (14U))));
}
static inline void LL_TIM_DisableDMAReq_TRIG(TIM_TypeDef *TIMx)
{
  ((TIMx->DIER) &= ~((0x1UL << (14U))));
}
static inline uint32_t LL_TIM_IsEnabledDMAReq_TRIG(TIM_TypeDef *TIMx)
{
  return ((((TIMx->DIER) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1UL : 0UL);
}
static inline void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (0U))));
}
static inline void LL_TIM_GenerateEvent_CC1(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (1U))));
}
static inline void LL_TIM_GenerateEvent_CC2(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (2U))));
}
static inline void LL_TIM_GenerateEvent_CC3(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (3U))));
}
static inline void LL_TIM_GenerateEvent_CC4(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (4U))));
}
static inline void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (5U))));
}
static inline void LL_TIM_GenerateEvent_TRIG(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (6U))));
}
static inline void LL_TIM_GenerateEvent_BRK(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (7U))));
}
static inline void LL_TIM_GenerateEvent_BRK2(TIM_TypeDef *TIMx)
{
  ((TIMx->EGR) |= ((0x1UL << (8U))));
}
ErrorStatus LL_TIM_DeInit(TIM_TypeDef *TIMx);
void LL_TIM_StructInit(LL_TIM_InitTypeDef *TIM_InitStruct);
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct);
void LL_TIM_OC_StructInit(LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct);
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct);
void LL_TIM_IC_StructInit(LL_TIM_IC_InitTypeDef *TIM_ICInitStruct);
ErrorStatus LL_TIM_IC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_IC_InitTypeDef *TIM_IC_InitStruct);
void LL_TIM_ENCODER_StructInit(LL_TIM_ENCODER_InitTypeDef *TIM_EncoderInitStruct);
ErrorStatus LL_TIM_ENCODER_Init(TIM_TypeDef *TIMx, LL_TIM_ENCODER_InitTypeDef *TIM_EncoderInitStruct);
void LL_TIM_HALLSENSOR_StructInit(LL_TIM_HALLSENSOR_InitTypeDef *TIM_HallSensorInitStruct);
ErrorStatus LL_TIM_HALLSENSOR_Init(TIM_TypeDef *TIMx, LL_TIM_HALLSENSOR_InitTypeDef *TIM_HallSensorInitStruct);
void LL_TIM_BDTR_StructInit(LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct);
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct);
#define STM32WBxx_LL_USART_H 
static const uint16_t USART_PRESCALER_TAB[] =
{
  (uint16_t)1,
  (uint16_t)2,
  (uint16_t)4,
  (uint16_t)6,
  (uint16_t)8,
  (uint16_t)10,
  (uint16_t)12,
  (uint16_t)16,
  (uint16_t)32,
  (uint16_t)64,
  (uint16_t)128,
  (uint16_t)256
};
typedef struct
{
  uint32_t PrescalerValue;
  uint32_t BaudRate;
  uint32_t DataWidth;
  uint32_t StopBits;
  uint32_t Parity;
  uint32_t TransferDirection;
  uint32_t HardwareFlowControl;
  uint32_t OverSampling;
} LL_USART_InitTypeDef;
typedef struct
{
  uint32_t ClockOutput;
  uint32_t ClockPolarity;
  uint32_t ClockPhase;
  uint32_t LastBitClockPulse;
} LL_USART_ClockInitTypeDef;
#define LL_USART_ICR_PECF USART_ICR_PECF
#define LL_USART_ICR_FECF USART_ICR_FECF
#define LL_USART_ICR_NECF USART_ICR_NECF
#define LL_USART_ICR_ORECF USART_ICR_ORECF
#define LL_USART_ICR_IDLECF USART_ICR_IDLECF
#define LL_USART_ICR_TXFECF USART_ICR_TXFECF
#define LL_USART_ICR_TCCF USART_ICR_TCCF
#define LL_USART_ICR_TCBGTCF USART_ICR_TCBGTCF
#define LL_USART_ICR_LBDCF USART_ICR_LBDCF
#define LL_USART_ICR_CTSCF USART_ICR_CTSCF
#define LL_USART_ICR_RTOCF USART_ICR_RTOCF
#define LL_USART_ICR_EOBCF USART_ICR_EOBCF
#define LL_USART_ICR_UDRCF USART_ICR_UDRCF
#define LL_USART_ICR_CMCF USART_ICR_CMCF
#define LL_USART_ICR_WUCF USART_ICR_WUCF
#define LL_USART_ISR_PE USART_ISR_PE
#define LL_USART_ISR_FE USART_ISR_FE
#define LL_USART_ISR_NE USART_ISR_NE
#define LL_USART_ISR_ORE USART_ISR_ORE
#define LL_USART_ISR_IDLE USART_ISR_IDLE
#define LL_USART_ISR_RXNE_RXFNE USART_ISR_RXNE_RXFNE
#define LL_USART_ISR_TC USART_ISR_TC
#define LL_USART_ISR_TXE_TXFNF USART_ISR_TXE_TXFNF
#define LL_USART_ISR_LBDF USART_ISR_LBDF
#define LL_USART_ISR_CTSIF USART_ISR_CTSIF
#define LL_USART_ISR_CTS USART_ISR_CTS
#define LL_USART_ISR_RTOF USART_ISR_RTOF
#define LL_USART_ISR_EOBF USART_ISR_EOBF
#define LL_USART_ISR_UDR USART_ISR_UDR
#define LL_USART_ISR_ABRE USART_ISR_ABRE
#define LL_USART_ISR_ABRF USART_ISR_ABRF
#define LL_USART_ISR_BUSY USART_ISR_BUSY
#define LL_USART_ISR_CMF USART_ISR_CMF
#define LL_USART_ISR_SBKF USART_ISR_SBKF
#define LL_USART_ISR_RWU USART_ISR_RWU
#define LL_USART_ISR_WUF USART_ISR_WUF
#define LL_USART_ISR_TEACK USART_ISR_TEACK
#define LL_USART_ISR_REACK USART_ISR_REACK
#define LL_USART_ISR_TXFE USART_ISR_TXFE
#define LL_USART_ISR_RXFF USART_ISR_RXFF
#define LL_USART_ISR_TCBGT USART_ISR_TCBGT
#define LL_USART_ISR_RXFT USART_ISR_RXFT
#define LL_USART_ISR_TXFT USART_ISR_TXFT
#define LL_USART_CR1_IDLEIE USART_CR1_IDLEIE
#define LL_USART_CR1_RXNEIE_RXFNEIE USART_CR1_RXNEIE_RXFNEIE
#define LL_USART_CR1_TCIE USART_CR1_TCIE
#define LL_USART_CR1_TXEIE_TXFNFIE USART_CR1_TXEIE_TXFNFIE
#define LL_USART_CR1_PEIE USART_CR1_PEIE
#define LL_USART_CR1_CMIE USART_CR1_CMIE
#define LL_USART_CR1_RTOIE USART_CR1_RTOIE
#define LL_USART_CR1_EOBIE USART_CR1_EOBIE
#define LL_USART_CR1_TXFEIE USART_CR1_TXFEIE
#define LL_USART_CR1_RXFFIE USART_CR1_RXFFIE
#define LL_USART_CR2_LBDIE USART_CR2_LBDIE
#define LL_USART_CR3_EIE USART_CR3_EIE
#define LL_USART_CR3_CTSIE USART_CR3_CTSIE
#define LL_USART_CR3_WUFIE USART_CR3_WUFIE
#define LL_USART_CR3_TXFTIE USART_CR3_TXFTIE
#define LL_USART_CR3_TCBGTIE USART_CR3_TCBGTIE
#define LL_USART_CR3_RXFTIE USART_CR3_RXFTIE
#define LL_USART_FIFOTHRESHOLD_1_8 0x00000000U
#define LL_USART_FIFOTHRESHOLD_1_4 0x00000001U
#define LL_USART_FIFOTHRESHOLD_1_2 0x00000002U
#define LL_USART_FIFOTHRESHOLD_3_4 0x00000003U
#define LL_USART_FIFOTHRESHOLD_7_8 0x00000004U
#define LL_USART_FIFOTHRESHOLD_8_8 0x00000005U
#define LL_USART_DIRECTION_NONE 0x00000000U
#define LL_USART_DIRECTION_RX USART_CR1_RE
#define LL_USART_DIRECTION_TX USART_CR1_TE
#define LL_USART_DIRECTION_TX_RX (USART_CR1_TE |USART_CR1_RE)
#define LL_USART_PARITY_NONE 0x00000000U
#define LL_USART_PARITY_EVEN USART_CR1_PCE
#define LL_USART_PARITY_ODD (USART_CR1_PCE | USART_CR1_PS)
#define LL_USART_WAKEUP_IDLELINE 0x00000000U
#define LL_USART_WAKEUP_ADDRESSMARK USART_CR1_WAKE
#define LL_USART_DATAWIDTH_7B USART_CR1_M1
#define LL_USART_DATAWIDTH_8B 0x00000000U
#define LL_USART_DATAWIDTH_9B USART_CR1_M0
#define LL_USART_OVERSAMPLING_16 0x00000000U
#define LL_USART_OVERSAMPLING_8 USART_CR1_OVER8
#define LL_USART_CLOCK_DISABLE 0x00000000U
#define LL_USART_CLOCK_ENABLE USART_CR2_CLKEN
#define LL_USART_LASTCLKPULSE_NO_OUTPUT 0x00000000U
#define LL_USART_LASTCLKPULSE_OUTPUT USART_CR2_LBCL
#define LL_USART_PHASE_1EDGE 0x00000000U
#define LL_USART_PHASE_2EDGE USART_CR2_CPHA
#define LL_USART_POLARITY_LOW 0x00000000U
#define LL_USART_POLARITY_HIGH USART_CR2_CPOL
#define LL_USART_PRESCALER_DIV1 0x00000000U
#define LL_USART_PRESCALER_DIV2 (USART_PRESC_PRESCALER_0)
#define LL_USART_PRESCALER_DIV4 (USART_PRESC_PRESCALER_1)
#define LL_USART_PRESCALER_DIV6 (USART_PRESC_PRESCALER_1 | USART_PRESC_PRESCALER_0)
#define LL_USART_PRESCALER_DIV8 (USART_PRESC_PRESCALER_2)
#define LL_USART_PRESCALER_DIV10 (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_0)
#define LL_USART_PRESCALER_DIV12 (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1)
#define LL_USART_PRESCALER_DIV16 (USART_PRESC_PRESCALER_2 | USART_PRESC_PRESCALER_1 | USART_PRESC_PRESCALER_0)
#define LL_USART_PRESCALER_DIV32 (USART_PRESC_PRESCALER_3)
#define LL_USART_PRESCALER_DIV64 (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_0)
#define LL_USART_PRESCALER_DIV128 (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1)
#define LL_USART_PRESCALER_DIV256 (USART_PRESC_PRESCALER_3 | USART_PRESC_PRESCALER_1 | USART_PRESC_PRESCALER_0)
#define LL_USART_STOPBITS_0_5 USART_CR2_STOP_0
#define LL_USART_STOPBITS_1 0x00000000U
#define LL_USART_STOPBITS_1_5 (USART_CR2_STOP_0 | USART_CR2_STOP_1)
#define LL_USART_STOPBITS_2 USART_CR2_STOP_1
#define LL_USART_TXRX_STANDARD 0x00000000U
#define LL_USART_TXRX_SWAPPED (USART_CR2_SWAP)
#define LL_USART_RXPIN_LEVEL_STANDARD 0x00000000U
#define LL_USART_RXPIN_LEVEL_INVERTED (USART_CR2_RXINV)
#define LL_USART_TXPIN_LEVEL_STANDARD 0x00000000U
#define LL_USART_TXPIN_LEVEL_INVERTED (USART_CR2_TXINV)
#define LL_USART_BINARY_LOGIC_POSITIVE 0x00000000U
#define LL_USART_BINARY_LOGIC_NEGATIVE USART_CR2_DATAINV
#define LL_USART_BITORDER_LSBFIRST 0x00000000U
#define LL_USART_BITORDER_MSBFIRST USART_CR2_MSBFIRST
#define LL_USART_AUTOBAUD_DETECT_ON_STARTBIT 0x00000000U
#define LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE USART_CR2_ABRMODE_0
#define LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME USART_CR2_ABRMODE_1
#define LL_USART_AUTOBAUD_DETECT_ON_55_FRAME (USART_CR2_ABRMODE_1 | USART_CR2_ABRMODE_0)
#define LL_USART_ADDRESS_DETECT_4B 0x00000000U
#define LL_USART_ADDRESS_DETECT_7B USART_CR2_ADDM7
#define LL_USART_HWCONTROL_NONE 0x00000000U
#define LL_USART_HWCONTROL_RTS USART_CR3_RTSE
#define LL_USART_HWCONTROL_CTS USART_CR3_CTSE
#define LL_USART_HWCONTROL_RTS_CTS (USART_CR3_RTSE | USART_CR3_CTSE)
#define LL_USART_WAKEUP_ON_ADDRESS 0x00000000U
#define LL_USART_WAKEUP_ON_STARTBIT USART_CR3_WUS_1
#define LL_USART_WAKEUP_ON_RXNE (USART_CR3_WUS_0 | USART_CR3_WUS_1)
#define LL_USART_IRDA_POWER_NORMAL 0x00000000U
#define LL_USART_IRDA_POWER_LOW USART_CR3_IRLP
#define LL_USART_LINBREAK_DETECT_10B 0x00000000U
#define LL_USART_LINBREAK_DETECT_11B USART_CR2_LBDL
#define LL_USART_DE_POLARITY_HIGH 0x00000000U
#define LL_USART_DE_POLARITY_LOW USART_CR3_DEP
#define LL_USART_DMA_REG_DATA_TRANSMIT 0x00000000U
#define LL_USART_DMA_REG_DATA_RECEIVE 0x00000001U
#define LL_USART_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_USART_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
#define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__,__PRESCALER__,__BAUDRATE__) (((((__PERIPHCLK__)/(uint32_t)(USART_PRESCALER_TAB[(__PRESCALER__)]))*2U) + ((__BAUDRATE__)/2U))/(__BAUDRATE__))
#define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__,__PRESCALER__,__BAUDRATE__) ((((__PERIPHCLK__)/(uint32_t)(USART_PRESCALER_TAB[(__PRESCALER__)])) + ((__BAUDRATE__)/2U))/(__BAUDRATE__))
static inline void LL_USART_Enable(USART_TypeDef *USARTx)
{
  ((USARTx->CR1) |= ((0x1UL << (0U))));
}
static inline void LL_USART_Disable(USART_TypeDef *USARTx)
{
  ((USARTx->CR1) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1U : 0U);
}
static inline void LL_USART_EnableFIFO(USART_TypeDef *USARTx)
{
  ((USARTx->CR1) |= ((0x1UL << (29U))));
}
static inline void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
  ((USARTx->CR1) &= ~((0x1UL << (29U))));
}
static inline uint32_t LL_USART_IsEnabledFIFO(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (29U)))) == ((0x1UL << (29U)))) ? 1U : 0U);
}
static inline void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  do { uint32_t val; do { val = (__LDREXW((volatile uint32_t *)&(USARTx->CR3)) & ~((0x7UL << (29U)))) | (Threshold << (29U)); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline uint32_t LL_USART_GetTXFIFOThreshold(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR3) & ((0x7UL << (29U)))) >> (29U));
}
static inline void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  do { uint32_t val; do { val = (__LDREXW((volatile uint32_t *)&(USARTx->CR3)) & ~((0x7UL << (25U)))) | (Threshold << (25U)); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline uint32_t LL_USART_GetRXFIFOThreshold(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR3) & ((0x7UL << (25U)))) >> (25U));
}
static inline void LL_USART_ConfigFIFOsThreshold(USART_TypeDef *USARTx, uint32_t TXThreshold, uint32_t RXThreshold)
{
  do { uint32_t val; do { val = (__LDREXW((volatile uint32_t *)&(USARTx->CR3)) & ~((0x7UL << (29U)) | (0x7UL << (25U)))) | ((TXThreshold << (29U)) | (RXThreshold << (25U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_EnableInStopMode(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (1U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_DisableInStopMode(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (1U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline uint32_t LL_USART_IsEnabledInStopMode(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1U : 0U);
}
static inline void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (2U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (2U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (3U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (3U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirection)
{
  do { uint32_t val; do { val = (__LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (2U)) | (0x1UL << (3U)))) | (TransferDirection); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline uint32_t LL_USART_GetTransferDirection(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR1) & ((0x1UL << (2U)) | (0x1UL << (3U)))));
}
static inline void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
{
  (((USARTx->CR1)) = ((((((USARTx->CR1))) & (~((0x1UL << (9U)) | (0x1UL << (10U))))) | (Parity))));
}
static inline uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR1) & ((0x1UL << (9U)) | (0x1UL << (10U)))));
}
static inline void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
{
  (((USARTx->CR1)) = ((((((USARTx->CR1))) & (~((0x1UL << (11U))))) | (Method))));
}
static inline uint32_t LL_USART_GetWakeUpMethod(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR1) & ((0x1UL << (11U)))));
}
static inline void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
{
  (((USARTx->CR1)) = ((((((USARTx->CR1))) & (~((uint32_t)((0x1UL << (28U)) | (0x1UL << (12U)))))) | (DataWidth))));
}
static inline uint32_t LL_USART_GetDataWidth(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR1) & ((uint32_t)((0x1UL << (28U)) | (0x1UL << (12U))))));
}
static inline void LL_USART_EnableMuteMode(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (13U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_DisableMuteMode(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (13U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline uint32_t LL_USART_IsEnabledMuteMode(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1U : 0U);
}
static inline void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
{
  (((USARTx->CR1)) = ((((((USARTx->CR1))) & (~((0x1UL << (15U))))) | (OverSampling))));
}
static inline uint32_t LL_USART_GetOverSampling(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR1) & ((0x1UL << (15U)))));
}
static inline void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPulse)
{
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0x1UL << (8U))))) | (LastBitClockPulse))));
}
static inline uint32_t LL_USART_GetLastClkPulseOutput(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR2) & ((0x1UL << (8U)))));
}
static inline void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
{
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0x1UL << (9U))))) | (ClockPhase))));
}
static inline uint32_t LL_USART_GetClockPhase(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR2) & ((0x1UL << (9U)))));
}
static inline void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
{
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0x1UL << (10U))))) | (ClockPolarity))));
}
static inline uint32_t LL_USART_GetClockPolarity(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR2) & ((0x1UL << (10U)))));
}
static inline void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity, uint32_t LBCPOutput)
{
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0x1UL << (9U)) | (0x1UL << (10U)) | (0x1UL << (8U))))) | (Phase | Polarity | LBCPOutput))));
}
static inline void LL_USART_SetPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
{
  (((USARTx->PRESC)) = ((((((USARTx->PRESC))) & (~((0xFUL << (0U))))) | ((uint16_t)PrescalerValue))));
}
static inline uint32_t LL_USART_GetPrescaler(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->PRESC) & ((0xFUL << (0U)))));
}
static inline void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) |= ((0x1UL << (11U))));
}
static inline void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~((0x1UL << (11U))));
}
static inline uint32_t LL_USART_IsEnabledSCLKOutput(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR2) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1U : 0U);
}
static inline void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0x3UL << (12U))))) | (StopBits))));
}
static inline uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR2) & ((0x3UL << (12U)))));
}
static inline void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity,
                                              uint32_t StopBits)
{
  (((USARTx->CR1)) = ((((((USARTx->CR1))) & (~((0x1UL << (9U)) | (0x1UL << (10U)) | (uint32_t)((0x1UL << (28U)) | (0x1UL << (12U)))))) | (Parity | DataWidth))));
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0x3UL << (12U))))) | (StopBits))));
}
static inline void LL_USART_SetTXRXSwap(USART_TypeDef *USARTx, uint32_t SwapConfig)
{
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0x1UL << (15U))))) | (SwapConfig))));
}
static inline uint32_t LL_USART_GetTXRXSwap(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR2) & ((0x1UL << (15U)))));
}
static inline void LL_USART_SetRXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
{
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0x1UL << (16U))))) | (PinInvMethod))));
}
static inline uint32_t LL_USART_GetRXPinLevel(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR2) & ((0x1UL << (16U)))));
}
static inline void LL_USART_SetTXPinLevel(USART_TypeDef *USARTx, uint32_t PinInvMethod)
{
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0x1UL << (17U))))) | (PinInvMethod))));
}
static inline uint32_t LL_USART_GetTXPinLevel(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR2) & ((0x1UL << (17U)))));
}
static inline void LL_USART_SetBinaryDataLogic(USART_TypeDef *USARTx, uint32_t DataLogic)
{
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0x1UL << (18U))))) | (DataLogic))));
}
static inline uint32_t LL_USART_GetBinaryDataLogic(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR2) & ((0x1UL << (18U)))));
}
static inline void LL_USART_SetTransferBitOrder(USART_TypeDef *USARTx, uint32_t BitOrder)
{
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0x1UL << (19U))))) | (BitOrder))));
}
static inline uint32_t LL_USART_GetTransferBitOrder(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR2) & ((0x1UL << (19U)))));
}
static inline void LL_USART_EnableAutoBaudRate(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) |= ((0x1UL << (20U))));
}
static inline void LL_USART_DisableAutoBaudRate(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~((0x1UL << (20U))));
}
static inline uint32_t LL_USART_IsEnabledAutoBaud(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR2) & ((0x1UL << (20U)))) == ((0x1UL << (20U)))) ? 1U : 0U);
}
static inline void LL_USART_SetAutoBaudRateMode(USART_TypeDef *USARTx, uint32_t AutoBaudRateMode)
{
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0x3UL << (21U))))) | (AutoBaudRateMode))));
}
static inline uint32_t LL_USART_GetAutoBaudRateMode(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR2) & ((0x3UL << (21U)))));
}
static inline void LL_USART_EnableRxTimeout(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) |= ((0x1UL << (23U))));
}
static inline void LL_USART_DisableRxTimeout(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~((0x1UL << (23U))));
}
static inline uint32_t LL_USART_IsEnabledRxTimeout(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR2) & ((0x1UL << (23U)))) == ((0x1UL << (23U)))) ? 1U : 0U);
}
static inline void LL_USART_ConfigNodeAddress(USART_TypeDef *USARTx, uint32_t AddressLen, uint32_t NodeAddress)
{
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0xFFUL << (24U)) | (0x1UL << (4U))))) | ((uint32_t)(AddressLen | (NodeAddress << (24U)))))));
}
static inline uint32_t LL_USART_GetNodeAddress(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR2) & ((0xFFUL << (24U)))) >> (24U));
}
static inline uint32_t LL_USART_GetNodeAddressLen(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR2) & ((0x1UL << (4U)))));
}
static inline void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) |= ((0x1UL << (8U))));
}
static inline void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) &= ~((0x1UL << (8U))));
}
static inline void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) |= ((0x1UL << (9U))));
}
static inline void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) &= ~((0x1UL << (9U))));
}
static inline void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  (((USARTx->CR3)) = ((((((USARTx->CR3))) & (~((0x1UL << (8U)) | (0x1UL << (9U))))) | (HardwareFlowControl))));
}
static inline uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR3) & ((0x1UL << (8U)) | (0x1UL << (9U)))));
}
static inline void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) |= ((0x1UL << (11U))));
}
static inline void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) &= ~((0x1UL << (11U))));
}
static inline uint32_t LL_USART_IsEnabledOneBitSamp(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1U : 0U);
}
static inline void LL_USART_EnableOverrunDetect(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) &= ~((0x1UL << (12U))));
}
static inline void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) |= ((0x1UL << (12U))));
}
static inline uint32_t LL_USART_IsEnabledOverrunDetect(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (12U)))) != (0x1UL << (12U))) ? 1U : 0U);
}
static inline void LL_USART_SetWKUPType(USART_TypeDef *USARTx, uint32_t Type)
{
  (((USARTx->CR3)) = ((((((USARTx->CR3))) & (~((0x3UL << (20U))))) | (Type))));
}
static inline uint32_t LL_USART_GetWKUPType(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR3) & ((0x3UL << (20U)))));
}
static inline void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t PrescalerValue, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
  uint32_t usartdiv;
  uint32_t brrtemp;
  if (OverSampling == (0x1UL << (15U)))
  {
    usartdiv = (uint16_t)((((((PeriphClk)/(uint32_t)(USART_PRESCALER_TAB[((uint16_t)PrescalerValue)]))*2U) + ((BaudRate)/2U))/(BaudRate)));
    brrtemp = usartdiv & 0xFFF0U;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    USARTx->BRR = brrtemp;
  }
  else
  {
    USARTx->BRR = (uint16_t)(((((PeriphClk)/(uint32_t)(USART_PRESCALER_TAB[((uint16_t)PrescalerValue)])) + ((BaudRate)/2U))/(BaudRate)));
  }
}
static inline uint32_t LL_USART_GetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t PrescalerValue, uint32_t OverSampling)
{
  uint32_t usartdiv;
  uint32_t brrresult = 0x0U;
  uint32_t periphclkpresc = (uint32_t)(PeriphClk / (uint32_t)(USART_PRESCALER_TAB[(uint16_t)PrescalerValue]));
  usartdiv = USARTx->BRR;
  if(usartdiv == 0U)
  {
  }
  else if (OverSampling == (0x1UL << (15U)))
  {
    usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
    if(usartdiv != 0U)
    {
      brrresult = (periphclkpresc * 2U) / usartdiv;
    }
  }
  else
  {
    if ((usartdiv & 0xFFFFU) != 0U)
    {
      brrresult = periphclkpresc / usartdiv;
    }
  }
  return (brrresult);
}
static inline void LL_USART_SetRxTimeout(USART_TypeDef *USARTx, uint32_t Timeout)
{
  (((USARTx->RTOR)) = ((((((USARTx->RTOR))) & (~((0xFFFFFFUL << (0U))))) | (Timeout))));
}
static inline uint32_t LL_USART_GetRxTimeout(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->RTOR) & ((0xFFFFFFUL << (0U)))));
}
static inline void LL_USART_SetBlockLength(USART_TypeDef *USARTx, uint32_t BlockLength)
{
  (((USARTx->RTOR)) = ((((((USARTx->RTOR))) & (~((0xFFUL << (24U))))) | (BlockLength << (24U)))));
}
static inline uint32_t LL_USART_GetBlockLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->RTOR) & ((0xFFUL << (24U)))) >> (24U));
}
static inline void LL_USART_EnableIrda(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) |= ((0x1UL << (1U))));
}
static inline void LL_USART_DisableIrda(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) &= ~((0x1UL << (1U))));
}
static inline uint32_t LL_USART_IsEnabledIrda(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1U : 0U);
}
static inline void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
{
  (((USARTx->CR3)) = ((((((USARTx->CR3))) & (~((0x1UL << (2U))))) | (PowerMode))));
}
static inline uint32_t LL_USART_GetIrdaPowerMode(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR3) & ((0x1UL << (2U)))));
}
static inline void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
{
  (((USARTx->GTPR)) = ((((((USARTx->GTPR))) & (~((0xFFUL << (0U))))) | ((uint16_t)PrescalerValue))));
}
static inline uint32_t LL_USART_GetIrdaPrescaler(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->GTPR) & ((0xFFUL << (0U)))));
}
static inline void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) |= ((0x1UL << (4U))));
}
static inline void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) &= ~((0x1UL << (4U))));
}
static inline uint32_t LL_USART_IsEnabledSmartcardNACK(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1U : 0U);
}
static inline void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) |= ((0x1UL << (5U))));
}
static inline void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) &= ~((0x1UL << (5U))));
}
static inline uint32_t LL_USART_IsEnabledSmartcard(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1U : 0U);
}
static inline void LL_USART_SetSmartcardAutoRetryCount(USART_TypeDef *USARTx, uint32_t AutoRetryCount)
{
  (((USARTx->CR3)) = ((((((USARTx->CR3))) & (~((0x7UL << (17U))))) | (AutoRetryCount << (17U)))));
}
static inline uint32_t LL_USART_GetSmartcardAutoRetryCount(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR3) & ((0x7UL << (17U)))) >> (17U));
}
static inline void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
{
  (((USARTx->GTPR)) = ((((((USARTx->GTPR))) & (~((0xFFUL << (0U))))) | ((uint16_t)PrescalerValue))));
}
static inline uint32_t LL_USART_GetSmartcardPrescaler(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->GTPR) & ((0xFFUL << (0U)))));
}
static inline void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
{
  (((USARTx->GTPR)) = ((((((USARTx->GTPR))) & (~((0xFFUL << (8U))))) | (GuardTime << (8U)))));
}
static inline uint32_t LL_USART_GetSmartcardGuardTime(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->GTPR) & ((0xFFUL << (8U)))) >> (8U));
}
static inline void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) |= ((0x1UL << (3U))));
}
static inline void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) &= ~((0x1UL << (3U))));
}
static inline uint32_t LL_USART_IsEnabledHalfDuplex(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1U : 0U);
}
static inline void LL_USART_EnableSPISlave(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) |= ((0x1UL << (0U))));
}
static inline void LL_USART_DisableSPISlave(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~((0x1UL << (0U))));
}
static inline uint32_t LL_USART_IsEnabledSPISlave(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR2) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1U : 0U);
}
static inline void LL_USART_EnableSPISlaveSelect(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~((0x1UL << (3U))));
}
static inline void LL_USART_DisableSPISlaveSelect(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) |= ((0x1UL << (3U))));
}
static inline uint32_t LL_USART_IsEnabledSPISlaveSelect(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR2) & ((0x1UL << (3U)))) != ((0x1UL << (3U)))) ? 1U : 0U);
}
static inline void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
{
  (((USARTx->CR2)) = ((((((USARTx->CR2))) & (~((0x1UL << (5U))))) | (LINBDLength))));
}
static inline uint32_t LL_USART_GetLINBrkDetectionLen(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR2) & ((0x1UL << (5U)))));
}
static inline void LL_USART_EnableLIN(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) |= ((0x1UL << (14U))));
}
static inline void LL_USART_DisableLIN(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~((0x1UL << (14U))));
}
static inline uint32_t LL_USART_IsEnabledLIN(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR2) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1U : 0U);
}
static inline void LL_USART_SetDEDeassertionTime(USART_TypeDef *USARTx, uint32_t Time)
{
  (((USARTx->CR1)) = ((((((USARTx->CR1))) & (~((0x1FUL << (16U))))) | (Time << (16U)))));
}
static inline uint32_t LL_USART_GetDEDeassertionTime(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR1) & ((0x1FUL << (16U)))) >> (16U));
}
static inline void LL_USART_SetDEAssertionTime(USART_TypeDef *USARTx, uint32_t Time)
{
  (((USARTx->CR1)) = ((((((USARTx->CR1))) & (~((0x1FUL << (21U))))) | (Time << (21U)))));
}
static inline uint32_t LL_USART_GetDEAssertionTime(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR1) & ((0x1FUL << (21U)))) >> (21U));
}
static inline void LL_USART_EnableDEMode(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) |= ((0x1UL << (14U))));
}
static inline void LL_USART_DisableDEMode(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) &= ~((0x1UL << (14U))));
}
static inline uint32_t LL_USART_IsEnabledDEMode(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1U : 0U);
}
static inline void LL_USART_SetDESignalPolarity(USART_TypeDef *USARTx, uint32_t Polarity)
{
  (((USARTx->CR3)) = ((((((USARTx->CR3))) & (~((0x1UL << (15U))))) | (Polarity))));
}
static inline uint32_t LL_USART_GetDESignalPolarity(USART_TypeDef *USARTx)
{
  return (uint32_t)(((USARTx->CR3) & ((0x1UL << (15U)))));
}
static inline void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~(((0x1UL << (14U)) | (0x1UL << (11U)))));
  ((USARTx->CR3) &= ~(((0x1UL << (5U)) | (0x1UL << (1U)) | (0x1UL << (3U)))));
}
static inline void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~(((0x1UL << (14U)))));
  ((USARTx->CR3) &= ~(((0x1UL << (5U)) | (0x1UL << (1U)) | (0x1UL << (3U)))));
  ((USARTx->CR2) |= ((0x1UL << (11U))));
}
static inline void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~(((0x1UL << (11U)) | (0x3UL << (12U)))));
  ((USARTx->CR3) &= ~(((0x1UL << (1U)) | (0x1UL << (5U)) | (0x1UL << (3U)))));
  ((USARTx->CR2) |= ((0x1UL << (14U))));
}
static inline void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~(((0x1UL << (14U)) | (0x1UL << (11U)))));
  ((USARTx->CR3) &= ~(((0x1UL << (5U)) | (0x1UL << (1U)))));
  ((USARTx->CR3) |= ((0x1UL << (3U))));
}
static inline void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~(((0x1UL << (14U)))));
  ((USARTx->CR3) &= ~(((0x1UL << (1U)) | (0x1UL << (3U)))));
  ((USARTx->CR2) |= (((0x1U << (12U)) | (0x2U << (12U)) | (0x1UL << (11U)))));
  ((USARTx->CR3) |= ((0x1UL << (5U))));
}
static inline void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~(((0x1UL << (14U)) | (0x1UL << (11U)) | (0x3UL << (12U)))));
  ((USARTx->CR3) &= ~(((0x1UL << (5U)) | (0x1UL << (3U)))));
  ((USARTx->CR3) |= ((0x1UL << (1U))));
}
static inline void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~(((0x1UL << (14U)) | (0x1UL << (11U)))));
  ((USARTx->CR3) &= ~(((0x1UL << (5U)) | (0x1UL << (3U)) | (0x1UL << (1U)))));
}
static inline uint32_t LL_USART_IsActiveFlag_PE(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_FE(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (1U)))) == ((0x1UL << (1U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_NE(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (2U)))) == ((0x1UL << (2U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (3U)))) == ((0x1UL << (3U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1U : 0U);
}
#define LL_USART_IsActiveFlag_RXNE LL_USART_IsActiveFlag_RXNE_RXFNE
static inline uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1U : 0U);
}
#define LL_USART_IsActiveFlag_TXE LL_USART_IsActiveFlag_TXE_TXFNF
static inline uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_LBD(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_nCTS(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_CTS(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_RTO(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (11U)))) == ((0x1UL << (11U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_EOB(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (12U)))) == ((0x1UL << (12U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_UDR(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_ABRE(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_ABR(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (15U)))) == ((0x1UL << (15U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_BUSY(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (16U)))) == ((0x1UL << (16U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_CM(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (17U)))) == ((0x1UL << (17U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_SBK(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (18U)))) == ((0x1UL << (18U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_RWU(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (19U)))) == ((0x1UL << (19U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_WKUP(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (20U)))) == ((0x1UL << (20U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (21U)))) == ((0x1UL << (21U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (22U)))) == ((0x1UL << (22U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_TXFE(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (23U)))) == ((0x1UL << (23U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_RXFF(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (24U)))) == ((0x1UL << (24U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_TCBGT(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (25U)))) == ((0x1UL << (25U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_TXFT(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (27U)))) == ((0x1UL << (27U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsActiveFlag_RXFT(USART_TypeDef *USARTx)
{
  return ((((USARTx->ISR) & ((0x1UL << (26U)))) == ((0x1UL << (26U)))) ? 1U : 0U);
}
static inline void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (0U))));
}
static inline void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (1U))));
}
static inline void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (2U))));
}
static inline void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (3U))));
}
static inline void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (4U))));
}
static inline void LL_USART_ClearFlag_TXFE(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (5U))));
}
static inline void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (6U))));
}
static inline void LL_USART_ClearFlag_TCBGT(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (7U))));
}
static inline void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (8U))));
}
static inline void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (9U))));
}
static inline void LL_USART_ClearFlag_RTO(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (11U))));
}
static inline void LL_USART_ClearFlag_EOB(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (12U))));
}
static inline void LL_USART_ClearFlag_UDR(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (13U))));
}
static inline void LL_USART_ClearFlag_CM(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (17U))));
}
static inline void LL_USART_ClearFlag_WKUP(USART_TypeDef *USARTx)
{
  ((USARTx->ICR) = ((0x1UL << (20U))));
}
static inline void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (4U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
#define LL_USART_EnableIT_RXNE LL_USART_EnableIT_RXNE_RXFNE
static inline void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (5U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (6U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
#define LL_USART_EnableIT_TXE LL_USART_EnableIT_TXE_TXFNF
static inline void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (7U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (8U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_EnableIT_CM(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (14U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_EnableIT_RTO(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (26U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_EnableIT_EOB(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (27U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_EnableIT_TXFE(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (30U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_EnableIT_RXFF(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) | ((0x1UL << (31U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) |= ((0x1UL << (6U))));
}
static inline void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) | ((0x1UL << (0U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) | ((0x1UL << (10U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_EnableIT_WKUP(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) | ((0x1UL << (22U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_EnableIT_TXFT(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) | ((0x1UL << (23U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_EnableIT_TCBGT(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) | ((0x1UL << (24U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_EnableIT_RXFT(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) | ((0x1UL << (28U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (4U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
#define LL_USART_DisableIT_RXNE LL_USART_DisableIT_RXNE_RXFNE
static inline void LL_USART_DisableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (5U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (6U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
#define LL_USART_DisableIT_TXE LL_USART_DisableIT_TXE_TXFNF
static inline void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (7U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (8U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_CM(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (14U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_RTO(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (26U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_EOB(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (27U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_TXFE(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (30U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_RXFF(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR1)) & ~((0x1UL << (31U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR1))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
{
  ((USARTx->CR2) &= ~((0x1UL << (6U))));
}
static inline void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) & ~((0x1UL << (0U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) & ~((0x1UL << (10U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_WKUP(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) & ~((0x1UL << (22U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_TXFT(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) & ~((0x1UL << (23U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_TCBGT(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) & ~((0x1UL << (24U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_DisableIT_RXFT(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) & ~((0x1UL << (28U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline uint32_t LL_USART_IsEnabledIT_IDLE(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (4U)))) == ((0x1UL << (4U)))) ? 1U : 0U);
}
#define LL_USART_IsEnabledIT_RXNE LL_USART_IsEnabledIT_RXNE_RXFNE
static inline uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (5U)))) == ((0x1UL << (5U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_TC(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1U : 0U);
}
#define LL_USART_IsEnabledIT_TXE LL_USART_IsEnabledIT_TXE_TXFNF
static inline uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_PE(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (8U)))) == ((0x1UL << (8U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_CM(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (14U)))) == ((0x1UL << (14U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_RTO(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (26U)))) == ((0x1UL << (26U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_EOB(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (27U)))) == ((0x1UL << (27U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_TXFE(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (30U)))) == ((0x1UL << (30U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_RXFF(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR1) & ((0x1UL << (31U)))) == ((0x1UL << (31U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_LBD(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR2) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_CTS(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (10U)))) == ((0x1UL << (10U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_WKUP(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (22U)))) == ((0x1UL << (22U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_TXFT(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (23U)))) == ((0x1UL << (23U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_TCBGT(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (24U)))) == ((0x1UL << (24U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_IsEnabledIT_RXFT(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (28U)))) == ((0x1UL << (28U)))) ? 1U : 0U);
}
static inline void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) | ((0x1UL << (6U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) & ~((0x1UL << (6U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline uint32_t LL_USART_IsEnabledDMAReq_RX(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (6U)))) == ((0x1UL << (6U)))) ? 1U : 0U);
}
static inline void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) | ((0x1UL << (7U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline void LL_USART_DisableDMAReq_TX(USART_TypeDef *USARTx)
{
  do { uint32_t val; do { val = __LDREXW((volatile uint32_t *)&(USARTx->CR3)) & ~((0x1UL << (7U))); } while ((__STREXW(val,(volatile uint32_t *)&(USARTx->CR3))) != 0U); } while(0);
}
static inline uint32_t LL_USART_IsEnabledDMAReq_TX(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1U : 0U);
}
static inline void LL_USART_EnableDMADeactOnRxErr(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) |= ((0x1UL << (13U))));
}
static inline void LL_USART_DisableDMADeactOnRxErr(USART_TypeDef *USARTx)
{
  ((USARTx->CR3) &= ~((0x1UL << (13U))));
}
static inline uint32_t LL_USART_IsEnabledDMADeactOnRxErr(USART_TypeDef *USARTx)
{
  return ((((USARTx->CR3) & ((0x1UL << (13U)))) == ((0x1UL << (13U)))) ? 1U : 0U);
}
static inline uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
  uint32_t data_reg_addr;
  if (Direction == 0x00000000U)
  {
    data_reg_addr = (uint32_t) &(USARTx->TDR);
  }
  else
  {
    data_reg_addr = (uint32_t) &(USARTx->RDR);
  }
  return data_reg_addr;
}
static inline uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(((USARTx->RDR) & ((0x01FFUL << (0U)))) & 0xFFU);
}
static inline uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
  return (uint16_t)(((USARTx->RDR) & ((0x01FFUL << (0U)))));
}
static inline void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
}
static inline void LL_USART_TransmitData9(USART_TypeDef *USARTx, uint16_t Value)
{
  USARTx->TDR = (uint16_t)(Value & 0x1FFUL);
}
static inline void LL_USART_RequestAutoBaudRate(USART_TypeDef *USARTx)
{
  ((USARTx->RQR) |= ((uint16_t)(0x1UL << (0U))));
}
static inline void LL_USART_RequestBreakSending(USART_TypeDef *USARTx)
{
  ((USARTx->RQR) |= ((uint16_t)(0x1UL << (1U))));
}
static inline void LL_USART_RequestEnterMuteMode(USART_TypeDef *USARTx)
{
  ((USARTx->RQR) |= ((uint16_t)(0x1UL << (2U))));
}
static inline void LL_USART_RequestRxDataFlush(USART_TypeDef *USARTx)
{
  ((USARTx->RQR) |= ((uint16_t)(0x1UL << (3U))));
}
static inline void LL_USART_RequestTxDataFlush(USART_TypeDef *USARTx)
{
  ((USARTx->RQR) |= ((uint16_t)(0x1UL << (4U))));
}
ErrorStatus LL_USART_DeInit(USART_TypeDef *USARTx);
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct);
void LL_USART_StructInit(LL_USART_InitTypeDef *USART_InitStruct);
ErrorStatus LL_USART_ClockInit(USART_TypeDef *USARTx, LL_USART_ClockInitTypeDef *USART_ClockInitStruct);
void LL_USART_ClockStructInit(LL_USART_ClockInitTypeDef *USART_ClockInitStruct);
#define STM32WBxx_LL_UTILS_H 
#define LL_MAX_DELAY 0xFFFFFFFFU
#define UID_BASE_ADDRESS UID_BASE
#define FLASHSIZE_BASE_ADDRESS FLASHSIZE_BASE
#define PACKAGE_BASE_ADDRESS PACKAGE_BASE
typedef struct
{
  uint32_t PLLM;
  uint32_t PLLN;
  uint32_t PLLR;
} LL_UTILS_PLLInitTypeDef;
typedef struct
{
  uint32_t CPU1CLKDivider;
  uint32_t CPU2CLKDivider;
  uint32_t AHB4CLKDivider;
  uint32_t APB1CLKDivider;
  uint32_t APB2CLKDivider;
} LL_UTILS_ClkInitTypeDef;
#define LL_UTILS_HSEBYPASS_OFF 0x00000000U
#define LL_UTILS_HSEBYPASS_ON 0x00000001U
#define LL_UTILS_PACKAGETYPE_CSP100 0x00000011U
#define LL_UTILS_PACKAGETYPE_QFN68 0x00000013U
#define LL_UTILS_PACKAGETYPE_QFN48 0x0000000AU
static inline uint32_t LL_GetUID_Word0(void)
{
  return (uint32_t)(((*((uint32_t *)((uint32_t)0x1FFF7590UL)))));
}
static inline uint32_t LL_GetUID_Word1(void)
{
  return (uint32_t)(((*((uint32_t *)(((uint32_t)0x1FFF7590UL) + 4U)))));
}
static inline uint32_t LL_GetUID_Word2(void)
{
  return (uint32_t)(((*((uint32_t *)(((uint32_t)0x1FFF7590UL) + 8U)))));
}
static inline uint32_t LL_GetFlashSize(void)
{
  return (uint32_t)(((*((uint32_t *)((uint32_t)0x1FFF75E0UL)))) & 0x0000FFFFUL);
}
static inline uint32_t LL_GetPackageType(void)
{
  return (uint32_t)(((*((uint32_t *)((uint32_t)0x1FFF7500UL)))) & 0x1FU);
}
static inline void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)((HCLKFrequency / Ticks) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL );
}
void LL_Init1msTick(uint32_t HCLKFrequency);
void LL_mDelay(uint32_t Delay);
void LL_SetSystemCoreClock(uint32_t HCLKFrequency);
ErrorStatus LL_SetFlashLatency(uint32_t HCLK4Frequency);
ErrorStatus LL_PLL_ConfigSystemClock_MSI(LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct,
                                         LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct);
ErrorStatus LL_PLL_ConfigSystemClock_HSI(LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct,
                                         LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct);
ErrorStatus LL_PLL_ConfigSystemClock_HSE(uint32_t HSEBypass,
                                         LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct);
#define STM32WBxx_LL_WWDG_H 
#define LL_WWDG_CFR_EWI WWDG_CFR_EWI
#define LL_WWDG_PRESCALER_1 0x00000000u
#define LL_WWDG_PRESCALER_2 WWDG_CFR_WDGTB_0
#define LL_WWDG_PRESCALER_4 WWDG_CFR_WDGTB_1
#define LL_WWDG_PRESCALER_8 (WWDG_CFR_WDGTB_0 | WWDG_CFR_WDGTB_1)
#define LL_WWDG_PRESCALER_16 WWDG_CFR_WDGTB_2
#define LL_WWDG_PRESCALER_32 (WWDG_CFR_WDGTB_2 | WWDG_CFR_WDGTB_0)
#define LL_WWDG_PRESCALER_64 (WWDG_CFR_WDGTB_2 | WWDG_CFR_WDGTB_1)
#define LL_WWDG_PRESCALER_128 (WWDG_CFR_WDGTB_2 | WWDG_CFR_WDGTB_1 | WWDG_CFR_WDGTB_0)
#define LL_WWDG_WriteReg(__INSTANCE__,__REG__,__VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
#define LL_WWDG_ReadReg(__INSTANCE__,__REG__) READ_REG(__INSTANCE__->__REG__)
static inline void LL_WWDG_Enable(WWDG_TypeDef *WWDGx)
{
  ((WWDGx->CR) |= ((0x1UL << (7U))));
}
static inline uint32_t LL_WWDG_IsEnabled(WWDG_TypeDef *WWDGx)
{
  return ((((WWDGx->CR) & ((0x1UL << (7U)))) == ((0x1UL << (7U)))) ? 1UL : 0UL);
}
static inline void LL_WWDG_SetCounter(WWDG_TypeDef *WWDGx, uint32_t Counter)
{
  (((WWDGx->CR)) = ((((((WWDGx->CR))) & (~((0x7FUL << (0U))))) | (Counter))));
}
static inline uint32_t LL_WWDG_GetCounter(WWDG_TypeDef *WWDGx)
{
  return (((WWDGx->CR) & ((0x7FUL << (0U)))));
}
static inline void LL_WWDG_SetPrescaler(WWDG_TypeDef *WWDGx, uint32_t Prescaler)
{
  (((WWDGx->CFR)) = ((((((WWDGx->CFR))) & (~((0x7UL << (11U))))) | (Prescaler))));
}
static inline uint32_t LL_WWDG_GetPrescaler(WWDG_TypeDef *WWDGx)
{
  return (((WWDGx->CFR) & ((0x7UL << (11U)))));
}
static inline void LL_WWDG_SetWindow(WWDG_TypeDef *WWDGx, uint32_t Window)
{
  (((WWDGx->CFR)) = ((((((WWDGx->CFR))) & (~((0x7FUL << (0U))))) | (Window))));
}
static inline uint32_t LL_WWDG_GetWindow(WWDG_TypeDef *WWDGx)
{
  return (((WWDGx->CFR) & ((0x7FUL << (0U)))));
}
static inline uint32_t LL_WWDG_IsActiveFlag_EWKUP(WWDG_TypeDef *WWDGx)
{
  return ((((WWDGx->SR) & ((0x1UL << (0U)))) == ((0x1UL << (0U)))) ? 1UL : 0UL);
}
static inline void LL_WWDG_ClearFlag_EWKUP(WWDG_TypeDef *WWDGx)
{
  ((WWDGx->SR) = (~(0x1UL << (0U))));
}
static inline void LL_WWDG_EnableIT_EWKUP(WWDG_TypeDef *WWDGx)
{
  ((WWDGx->CFR) |= ((0x1UL << (9U))));
}
static inline uint32_t LL_WWDG_IsEnabledIT_EWKUP(WWDG_TypeDef *WWDGx)
{
  return ((((WWDGx->CFR) & ((0x1UL << (9U)))) == ((0x1UL << (9U)))) ? 1UL : 0UL);
}
#define INC_FREERTOS_H 
       
#pragma GCC diagnostic ignored "-Wredundant-decls"
extern uint32_t SystemCoreClock;
#define CMSIS_device_header "stm32wbxx.h"
#define configENABLE_FPU 1
#define configENABLE_MPU 0
#define configUSE_PREEMPTION 1
#define configSUPPORT_STATIC_ALLOCATION 1
#define configSUPPORT_DYNAMIC_ALLOCATION 1
#define configUSE_IDLE_HOOK 0
#define configUSE_TICK_HOOK 0
#define configCPU_CLOCK_HZ (SystemCoreClock)
#define configTICK_RATE_HZ_RAW 1000
#define configTICK_RATE_HZ ((TickType_t)configTICK_RATE_HZ_RAW)
#define configMAX_PRIORITIES (32)
#define configMINIMAL_STACK_SIZE ((uint16_t)128)
#define configMAX_TASK_NAME_LEN (16)
#define configGENERATE_RUN_TIME_STATS 0
#define configUSE_TRACE_FACILITY 1
#define configUSE_16_BIT_TICKS 0
#define configUSE_MUTEXES 1
#define configQUEUE_REGISTRY_SIZE 0
#define configCHECK_FOR_STACK_OVERFLOW 0
#define configUSE_RECURSIVE_MUTEXES 1
#define configUSE_COUNTING_SEMAPHORES 1
#define configENABLE_BACKWARD_COMPATIBILITY 0
#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
#define configUSE_TICKLESS_IDLE 2
#define configRECORD_STACK_HIGH_ADDRESS 1
#define configUSE_NEWLIB_REENTRANT 0
#define configMESSAGE_BUFFER_LENGTH_TYPE size_t
#define configNUM_THREAD_LOCAL_STORAGE_POINTERS 1
#define configEXPECTED_IDLE_TIME_BEFORE_SLEEP 4
#define configUSE_CO_ROUTINES 0
#define configUSE_TIMERS 1
#define configTIMER_TASK_PRIORITY (2)
#define configTIMER_QUEUE_LENGTH 32
#define configTIMER_TASK_STACK_DEPTH 256
#define configTIMER_SERVICE_TASK_NAME "TimersSrv"
#define configIDLE_TASK_NAME "(-_-)"
#define INCLUDE_xTaskGetHandle 1
#define INCLUDE_eTaskGetState 1
#define INCLUDE_uxTaskGetStackHighWaterMark 1
#define INCLUDE_uxTaskPriorityGet 1
#define INCLUDE_vTaskCleanUpResources 0
#define INCLUDE_vTaskDelay 1
#define INCLUDE_vTaskDelayUntil 1
#define INCLUDE_vTaskDelete 1
#define INCLUDE_vTaskPrioritySet 1
#define INCLUDE_vTaskSuspend 1
#define INCLUDE_xQueueGetMutexHolder 1
#define INCLUDE_xTaskGetCurrentTaskHandle 1
#define INCLUDE_xTaskGetSchedulerState 1
#define INCLUDE_xTimerPendFunctionCall 1
#define configTASK_NOTIFICATION_ARRAY_ENTRIES 2
extern void furi_thread_catch();
#define configTASK_RETURN_ADDRESS (furi_thread_catch + 2)
#define USE_FreeRTOS_HEAP_4 
#define configPRIO_BITS __NVIC_PRIO_BITS
#define configLIBRARY_LOWEST_INTERRUPT_PRIORITY 15
#define configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY 5
#define configKERNEL_INTERRUPT_PRIORITY (configLIBRARY_LOWEST_INTERRUPT_PRIORITY << (8 - configPRIO_BITS))
#define configMAX_SYSCALL_INTERRUPT_PRIORITY (configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY << (8 - configPRIO_BITS))
#define vPortSVCHandler SVC_Handler
#define xPortPendSVHandler PendSV_Handler
#define USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION 1
#define configOVERRIDE_DEFAULT_TICK_CONFIGURATION 1
#define traceTASK_SWITCHED_IN() extern void furi_hal_mpu_set_stack_protection(uint32_t* stack); furi_hal_mpu_set_stack_protection((uint32_t*)pxCurrentTCB->pxStack)
#define PROJDEFS_H 
typedef void (*TaskFunction_t)( void * );
#define pdMS_TO_TICKS(xTimeInMs) ( ( TickType_t ) ( ( ( TickType_t ) ( xTimeInMs ) * ( TickType_t ) configTICK_RATE_HZ ) / ( TickType_t ) 1000 ) )
#define pdFALSE ( ( BaseType_t ) 0 )
#define pdTRUE ( ( BaseType_t ) 1 )
#define pdPASS ( pdTRUE )
#define pdFAIL ( pdFALSE )
#define errQUEUE_EMPTY ( ( BaseType_t ) 0 )
#define errQUEUE_FULL ( ( BaseType_t ) 0 )
#define errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY ( -1 )
#define errQUEUE_BLOCKED ( -4 )
#define errQUEUE_YIELD ( -5 )
#define configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES 0
#define pdINTEGRITY_CHECK_VALUE 0x5a5a5a5aUL
#define pdFREERTOS_ERRNO_NONE 0
#define pdFREERTOS_ERRNO_ENOENT 2
#define pdFREERTOS_ERRNO_EINTR 4
#define pdFREERTOS_ERRNO_EIO 5
#define pdFREERTOS_ERRNO_ENXIO 6
#define pdFREERTOS_ERRNO_EBADF 9
#define pdFREERTOS_ERRNO_EAGAIN 11
#define pdFREERTOS_ERRNO_EWOULDBLOCK 11
#define pdFREERTOS_ERRNO_ENOMEM 12
#define pdFREERTOS_ERRNO_EACCES 13
#define pdFREERTOS_ERRNO_EFAULT 14
#define pdFREERTOS_ERRNO_EBUSY 16
#define pdFREERTOS_ERRNO_EEXIST 17
#define pdFREERTOS_ERRNO_EXDEV 18
#define pdFREERTOS_ERRNO_ENODEV 19
#define pdFREERTOS_ERRNO_ENOTDIR 20
#define pdFREERTOS_ERRNO_EISDIR 21
#define pdFREERTOS_ERRNO_EINVAL 22
#define pdFREERTOS_ERRNO_ENOSPC 28
#define pdFREERTOS_ERRNO_ESPIPE 29
#define pdFREERTOS_ERRNO_EROFS 30
#define pdFREERTOS_ERRNO_EUNATCH 42
#define pdFREERTOS_ERRNO_EBADE 50
#define pdFREERTOS_ERRNO_EFTYPE 79
#define pdFREERTOS_ERRNO_ENMFILE 89
#define pdFREERTOS_ERRNO_ENOTEMPTY 90
#define pdFREERTOS_ERRNO_ENAMETOOLONG 91
#define pdFREERTOS_ERRNO_EOPNOTSUPP 95
#define pdFREERTOS_ERRNO_ENOBUFS 105
#define pdFREERTOS_ERRNO_ENOPROTOOPT 109
#define pdFREERTOS_ERRNO_EADDRINUSE 112
#define pdFREERTOS_ERRNO_ETIMEDOUT 116
#define pdFREERTOS_ERRNO_EINPROGRESS 119
#define pdFREERTOS_ERRNO_EALREADY 120
#define pdFREERTOS_ERRNO_EADDRNOTAVAIL 125
#define pdFREERTOS_ERRNO_EISCONN 127
#define pdFREERTOS_ERRNO_ENOTCONN 128
#define pdFREERTOS_ERRNO_ENOMEDIUM 135
#define pdFREERTOS_ERRNO_EILSEQ 138
#define pdFREERTOS_ERRNO_ECANCELED 140
#define pdFREERTOS_LITTLE_ENDIAN 0
#define pdFREERTOS_BIG_ENDIAN 1
#define pdLITTLE_ENDIAN pdFREERTOS_LITTLE_ENDIAN
#define pdBIG_ENDIAN pdFREERTOS_BIG_ENDIAN
#define PORTABLE_H 
#define DEPRECATED_DEFINITIONS_H 
#define PORTMACRO_H 
#define portCHAR char
#define portFLOAT float
#define portDOUBLE double
#define portLONG long
#define portSHORT short
#define portSTACK_TYPE uint32_t
#define portBASE_TYPE long
    typedef uint32_t StackType_t;
    typedef long BaseType_t;
    typedef unsigned long UBaseType_t;
        typedef uint32_t TickType_t;
#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
#define portTICK_TYPE_IS_ATOMIC 1
#define portSTACK_GROWTH ( -1 )
#define portTICK_PERIOD_MS ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
#define portBYTE_ALIGNMENT 8
#define portDONT_DISCARD __attribute__( ( used ) )
#define portYIELD() { portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; __asm volatile ( "dsb" ::: "memory" ); __asm volatile ( "isb" ); }
#define portNVIC_INT_CTRL_REG ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
#define portNVIC_PENDSVSET_BIT ( 1UL << 28UL )
#define portEND_SWITCHING_ISR(xSwitchRequired) do { if( xSwitchRequired != pdFALSE ) portYIELD(); } while( 0 )
#define portYIELD_FROM_ISR(x) portEND_SWITCHING_ISR( x )
    extern void vPortEnterCritical( void );
    extern void vPortExitCritical( void );
#define portSET_INTERRUPT_MASK_FROM_ISR() ulPortRaiseBASEPRI()
#define portCLEAR_INTERRUPT_MASK_FROM_ISR(x) vPortSetBASEPRI( x )
#define portDISABLE_INTERRUPTS() vPortRaiseBASEPRI()
#define portENABLE_INTERRUPTS() vPortSetBASEPRI( 0 )
#define portENTER_CRITICAL() vPortEnterCritical()
#define portEXIT_CRITICAL() vPortExitCritical()
#define portTASK_FUNCTION_PROTO(vFunction,pvParameters) void vFunction( void * pvParameters )
#define portTASK_FUNCTION(vFunction,pvParameters) void vFunction( void * pvParameters )
        extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
#define portSUPPRESS_TICKS_AND_SLEEP(xExpectedIdleTime) vPortSuppressTicksAndSleep( xExpectedIdleTime )
        static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
        {
            uint8_t ucReturn;
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
            return ucReturn;
        }
#define portRECORD_READY_PRIORITY(uxPriority,uxReadyPriorities) ( uxReadyPriorities ) |= ( 1UL << ( uxPriority ) )
#define portRESET_READY_PRIORITY(uxPriority,uxReadyPriorities) ( uxReadyPriorities ) &= ~( 1UL << ( uxPriority ) )
#define portGET_HIGHEST_PRIORITY(uxTopPriority,uxReadyPriorities) uxTopPriority = ( 31UL - ( uint32_t ) ucPortCountLeadingZeros( ( uxReadyPriorities ) ) )
#define portNOP() 
#define portINLINE __inline
#define portFORCE_INLINE inline __attribute__( ( always_inline ) )
    inline static BaseType_t xPortIsInsideInterrupt( void )
    {
        uint32_t ulCurrentInterrupt;
        BaseType_t xReturn;
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
        if( ulCurrentInterrupt == 0 )
        {
            xReturn = ( ( BaseType_t ) 0 );
        }
        else
        {
            xReturn = ( ( BaseType_t ) 1 );
        }
        return xReturn;
    }
    inline static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;
        __asm volatile
        (
            "	mov %0, %1												\n" "	msr basepri, %0											\n" "	isb														\n" "	dsb														\n" : "=r" ( ulNewBASEPRI ) : "i" ( (5 << (8 - 4U)) ) : "memory"
        );
    }
    inline static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
        __asm volatile
        (
            "	mrs %0, basepri											\n" "	mov %1, %2												\n" "	msr basepri, %1											\n" "	isb														\n" "	dsb														\n" : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( (5 << (8 - 4U)) ) : "memory"
        );
        return ulOriginalBASEPRI;
    }
    inline static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
#define portMEMORY_BARRIER() __asm volatile ( "" ::: "memory" )
#define portBYTE_ALIGNMENT_MASK ( 0x0007 )
#define portNUM_CONFIGURABLE_REGIONS 1
#define portHAS_STACK_OVERFLOW_CHECKING 0
#define portARCH_NAME NULL
#define MPU_WRAPPERS_H 
#define PRIVILEGED_FUNCTION 
#define PRIVILEGED_DATA 
#define FREERTOS_SYSTEM_CALL 
#define portUSING_MPU_WRAPPERS 0
  StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters ) ;
typedef struct HeapRegion
{
 uint8_t *pucStartAddress;
 size_t xSizeInBytes;
} HeapRegion_t;
typedef struct xHeapStats
{
 size_t xAvailableHeapSpaceInBytes;
 size_t xSizeOfLargestFreeBlockInBytes;
 size_t xSizeOfSmallestFreeBlockInBytes;
 size_t xNumberOfFreeBlocks;
 size_t xMinimumEverFreeBytesRemaining;
 size_t xNumberOfSuccessfulAllocations;
 size_t xNumberOfSuccessfulFrees;
} HeapStats_t;
void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) ;
void vPortGetHeapStats( HeapStats_t *pxHeapStats );
void *pvPortMalloc( size_t xSize ) ;
void vPortFree( void *pv ) ;
void vPortInitialiseBlocks( void ) ;
size_t xPortGetFreeHeapSize( void ) ;
size_t xPortGetMinimumEverFreeHeapSize( void ) ;
BaseType_t xPortStartScheduler( void ) ;
void vPortEndScheduler( void ) ;
#define INCLUDE_xTaskGetIdleTaskHandle 0
#define INCLUDE_xTaskAbortDelay 0
#define INCLUDE_xSemaphoreGetMutexHolder INCLUDE_xQueueGetMutexHolder
#define INCLUDE_uxTaskGetStackHighWaterMark2 0
#define INCLUDE_xTaskResumeFromISR 1
#define configUSE_DAEMON_TASK_STARTUP_HOOK 0
#define configUSE_APPLICATION_TASK_TAG 0
#define configUSE_ALTERNATIVE_API 0
#define portCRITICAL_NESTING_IN_TCB 0
#define configIDLE_SHOULD_YIELD 1
#define configASSERT(x) 
#define configASSERT_DEFINED 0
#define configPRECONDITION(X) configASSERT(X)
#define configPRECONDITION_DEFINED 0
#define portSOFTWARE_BARRIER() 
#define portCLEAN_UP_TCB(pxTCB) ( void ) pxTCB
#define portPRE_TASK_DELETE_HOOK(pvTaskToDelete,pxYieldPending) 
#define portSETUP_TCB(pxTCB) ( void ) pxTCB
#define vQueueAddToRegistry(xQueue,pcName) 
#define vQueueUnregisterQueue(xQueue) 
#define pcQueueGetName(xQueue) 
#define portPOINTER_SIZE_TYPE uint32_t
#define traceSTART() 
#define traceEND() 
#define traceINCREASE_TICK_COUNT(x) 
#define traceLOW_POWER_IDLE_BEGIN() 
#define traceLOW_POWER_IDLE_END() 
#define traceTASK_SWITCHED_OUT() 
#define traceTASK_PRIORITY_INHERIT(pxTCBOfMutexHolder,uxInheritedPriority) 
#define traceTASK_PRIORITY_DISINHERIT(pxTCBOfMutexHolder,uxOriginalPriority) 
#define traceBLOCKING_ON_QUEUE_RECEIVE(pxQueue) 
#define traceBLOCKING_ON_QUEUE_PEEK(pxQueue) 
#define traceBLOCKING_ON_QUEUE_SEND(pxQueue) 
#define configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H 0
#define traceMOVED_TASK_TO_READY_STATE(pxTCB) 
#define tracePOST_MOVED_TASK_TO_READY_STATE(pxTCB) 
#define traceQUEUE_CREATE(pxNewQueue) 
#define traceQUEUE_CREATE_FAILED(ucQueueType) 
#define traceCREATE_MUTEX(pxNewQueue) 
#define traceCREATE_MUTEX_FAILED() 
#define traceGIVE_MUTEX_RECURSIVE(pxMutex) 
#define traceGIVE_MUTEX_RECURSIVE_FAILED(pxMutex) 
#define traceTAKE_MUTEX_RECURSIVE(pxMutex) 
#define traceTAKE_MUTEX_RECURSIVE_FAILED(pxMutex) 
#define traceCREATE_COUNTING_SEMAPHORE() 
#define traceCREATE_COUNTING_SEMAPHORE_FAILED() 
#define traceQUEUE_SEND(pxQueue) 
#define traceQUEUE_SEND_FAILED(pxQueue) 
#define traceQUEUE_RECEIVE(pxQueue) 
#define traceQUEUE_PEEK(pxQueue) 
#define traceQUEUE_PEEK_FAILED(pxQueue) 
#define traceQUEUE_PEEK_FROM_ISR(pxQueue) 
#define traceQUEUE_RECEIVE_FAILED(pxQueue) 
#define traceQUEUE_SEND_FROM_ISR(pxQueue) 
#define traceQUEUE_SEND_FROM_ISR_FAILED(pxQueue) 
#define traceQUEUE_RECEIVE_FROM_ISR(pxQueue) 
#define traceQUEUE_RECEIVE_FROM_ISR_FAILED(pxQueue) 
#define traceQUEUE_PEEK_FROM_ISR_FAILED(pxQueue) 
#define traceQUEUE_DELETE(pxQueue) 
#define traceTASK_CREATE(pxNewTCB) 
#define traceTASK_CREATE_FAILED() 
#define traceTASK_DELETE(pxTaskToDelete) 
#define traceTASK_DELAY_UNTIL(x) 
#define traceTASK_DELAY() 
#define traceTASK_PRIORITY_SET(pxTask,uxNewPriority) 
#define traceTASK_SUSPEND(pxTaskToSuspend) 
#define traceTASK_RESUME(pxTaskToResume) 
#define traceTASK_RESUME_FROM_ISR(pxTaskToResume) 
#define traceTASK_INCREMENT_TICK(xTickCount) 
#define traceTIMER_CREATE(pxNewTimer) 
#define traceTIMER_CREATE_FAILED() 
#define traceTIMER_COMMAND_SEND(xTimer,xMessageID,xMessageValueValue,xReturn) 
#define traceTIMER_EXPIRED(pxTimer) 
#define traceTIMER_COMMAND_RECEIVED(pxTimer,xMessageID,xMessageValue) 
#define traceMALLOC(pvAddress,uiSize) 
#define traceFREE(pvAddress,uiSize) 
#define traceEVENT_GROUP_CREATE(xEventGroup) 
#define traceEVENT_GROUP_CREATE_FAILED() 
#define traceEVENT_GROUP_SYNC_BLOCK(xEventGroup,uxBitsToSet,uxBitsToWaitFor) 
#define traceEVENT_GROUP_SYNC_END(xEventGroup,uxBitsToSet,uxBitsToWaitFor,xTimeoutOccurred) ( void ) xTimeoutOccurred
#define traceEVENT_GROUP_WAIT_BITS_BLOCK(xEventGroup,uxBitsToWaitFor) 
#define traceEVENT_GROUP_WAIT_BITS_END(xEventGroup,uxBitsToWaitFor,xTimeoutOccurred) ( void ) xTimeoutOccurred
#define traceEVENT_GROUP_CLEAR_BITS(xEventGroup,uxBitsToClear) 
#define traceEVENT_GROUP_CLEAR_BITS_FROM_ISR(xEventGroup,uxBitsToClear) 
#define traceEVENT_GROUP_SET_BITS(xEventGroup,uxBitsToSet) 
#define traceEVENT_GROUP_SET_BITS_FROM_ISR(xEventGroup,uxBitsToSet) 
#define traceEVENT_GROUP_DELETE(xEventGroup) 
#define tracePEND_FUNC_CALL(xFunctionToPend,pvParameter1,ulParameter2,ret) 
#define tracePEND_FUNC_CALL_FROM_ISR(xFunctionToPend,pvParameter1,ulParameter2,ret) 
#define traceQUEUE_REGISTRY_ADD(xQueue,pcQueueName) 
#define traceTASK_NOTIFY_TAKE_BLOCK() 
#define traceTASK_NOTIFY_TAKE() 
#define traceTASK_NOTIFY_WAIT_BLOCK() 
#define traceTASK_NOTIFY_WAIT() 
#define traceTASK_NOTIFY() 
#define traceTASK_NOTIFY_FROM_ISR() 
#define traceTASK_NOTIFY_GIVE_FROM_ISR() 
#define traceSTREAM_BUFFER_CREATE_FAILED(xIsMessageBuffer) 
#define traceSTREAM_BUFFER_CREATE_STATIC_FAILED(xReturn,xIsMessageBuffer) 
#define traceSTREAM_BUFFER_CREATE(pxStreamBuffer,xIsMessageBuffer) 
#define traceSTREAM_BUFFER_DELETE(xStreamBuffer) 
#define traceSTREAM_BUFFER_RESET(xStreamBuffer) 
#define traceBLOCKING_ON_STREAM_BUFFER_SEND(xStreamBuffer) 
#define traceSTREAM_BUFFER_SEND(xStreamBuffer,xBytesSent) 
#define traceSTREAM_BUFFER_SEND_FAILED(xStreamBuffer) 
#define traceSTREAM_BUFFER_SEND_FROM_ISR(xStreamBuffer,xBytesSent) 
#define traceBLOCKING_ON_STREAM_BUFFER_RECEIVE(xStreamBuffer) 
#define traceSTREAM_BUFFER_RECEIVE(xStreamBuffer,xReceivedLength) 
#define traceSTREAM_BUFFER_RECEIVE_FAILED(xStreamBuffer) 
#define traceSTREAM_BUFFER_RECEIVE_FROM_ISR(xStreamBuffer,xReceivedLength) 
#define portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() 
#define configUSE_MALLOC_FAILED_HOOK 0
#define portPRIVILEGE_BIT ( ( UBaseType_t ) 0x00 )
#define portYIELD_WITHIN_API portYIELD
#define configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING(x) 
#define configPRE_SLEEP_PROCESSING(x) 
#define configPOST_SLEEP_PROCESSING(x) 
#define configUSE_QUEUE_SETS 0
#define portTASK_USES_FLOATING_POINT() 
#define portALLOCATE_SECURE_CONTEXT(ulSecureStackSize) 
#define configUSE_TIME_SLICING 1
#define configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS 0
#define configUSE_STATS_FORMATTING_FUNCTIONS 0
#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 
#define mtCOVERAGE_TEST_MARKER() 
#define mtCOVERAGE_TEST_DELAY() 
#define portASSERT_IF_IN_ISR() 
#define configAPPLICATION_ALLOCATED_HEAP 0
#define configUSE_TASK_NOTIFICATIONS 1
#define configUSE_POSIX_ERRNO 0
#define configSTACK_DEPTH_TYPE uint16_t
#define configINITIAL_TICK_COUNT 0
#define portTICK_TYPE_ENTER_CRITICAL() 
#define portTICK_TYPE_EXIT_CRITICAL() 
#define portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR() 0
#define portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR(x) ( void ) x
#define configPRINTF(X) 
#define configMAX(a,b) ( ( ( a ) > ( b ) ) ? ( a ) : ( b ) )
#define configMIN(a,b) ( ( ( a ) < ( b ) ) ? ( a ) : ( b ) )
#define configUSE_TASK_FPU_SUPPORT 1
#define configENABLE_TRUSTZONE 1
#define configRUN_FREERTOS_SECURE_ONLY 0
#define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( portUSING_MPU_WRAPPERS == 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) || ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) )
struct xSTATIC_LIST_ITEM
{
 TickType_t xDummy2;
 void *pvDummy3[ 4 ];
};
typedef struct xSTATIC_LIST_ITEM StaticListItem_t;
struct xSTATIC_MINI_LIST_ITEM
{
 TickType_t xDummy2;
 void *pvDummy3[ 2 ];
};
typedef struct xSTATIC_MINI_LIST_ITEM StaticMiniListItem_t;
typedef struct xSTATIC_LIST
{
 UBaseType_t uxDummy2;
 void *pvDummy3;
 StaticMiniListItem_t xDummy4;
} StaticList_t;
typedef struct xSTATIC_TCB
{
 void *pxDummy1;
 StaticListItem_t xDummy3[ 2 ];
 UBaseType_t uxDummy5;
 void *pxDummy6;
 uint8_t ucDummy7[ (16) ];
  void *pxDummy8;
  UBaseType_t uxDummy10[ 2 ];
  UBaseType_t uxDummy12[ 2 ];
  void *pvDummy15[ 1 ];
  uint32_t ulDummy18;
  uint8_t ucDummy19;
  uint8_t uxDummy20;
} StaticTask_t;
typedef struct xSTATIC_QUEUE
{
 void *pvDummy1[ 3 ];
 union
 {
  void *pvDummy2;
  UBaseType_t uxDummy2;
 } u;
 StaticList_t xDummy3[ 2 ];
 UBaseType_t uxDummy4[ 3 ];
 uint8_t ucDummy5[ 2 ];
  uint8_t ucDummy6;
  UBaseType_t uxDummy8;
  uint8_t ucDummy9;
} StaticQueue_t;
typedef StaticQueue_t StaticSemaphore_t;
typedef struct xSTATIC_EVENT_GROUP
{
 TickType_t xDummy1;
 StaticList_t xDummy2;
  UBaseType_t uxDummy3;
   uint8_t ucDummy4;
} StaticEventGroup_t;
typedef struct xSTATIC_TIMER
{
 void *pvDummy1;
 StaticListItem_t xDummy2;
 TickType_t xDummy3;
 void *pvDummy5;
 TaskFunction_t pvDummy6;
  UBaseType_t uxDummy7;
 uint8_t ucDummy8;
} StaticTimer_t;
typedef struct xSTATIC_STREAM_BUFFER
{
 size_t uxDummy1[ 4 ];
 void * pvDummy2[ 3 ];
 uint8_t ucDummy3;
  UBaseType_t uxDummy4;
} StaticStreamBuffer_t;
typedef StaticStreamBuffer_t StaticMessageBuffer_t;
#define STREAM_BUFFER_H 
struct StreamBufferDef_t;
typedef struct StreamBufferDef_t * StreamBufferHandle_t;
#define xStreamBufferCreate(xBufferSizeBytes,xTriggerLevelBytes) xStreamBufferGenericCreate( xBufferSizeBytes, xTriggerLevelBytes, pdFALSE )
#define xStreamBufferCreateStatic(xBufferSizeBytes,xTriggerLevelBytes,pucStreamBufferStorageArea,pxStaticStreamBuffer) xStreamBufferGenericCreateStatic( xBufferSizeBytes, xTriggerLevelBytes, pdFALSE, pucStreamBufferStorageArea, pxStaticStreamBuffer )
size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
        const void *pvTxData,
        size_t xDataLengthBytes,
        TickType_t xTicksToWait ) ;
size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
         const void *pvTxData,
         size_t xDataLengthBytes,
         BaseType_t * const pxHigherPriorityTaskWoken ) ;
size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
        void *pvRxData,
        size_t xBufferLengthBytes,
        TickType_t xTicksToWait ) ;
size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
         void *pvRxData,
         size_t xBufferLengthBytes,
         BaseType_t * const pxHigherPriorityTaskWoken ) ;
void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer ) ;
BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer ) ;
BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer ) ;
BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer ) ;
size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer ) ;
size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer ) ;
BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel ) ;
BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken ) ;
BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken ) ;
StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes,
             size_t xTriggerLevelBytes,
             BaseType_t xIsMessageBuffer ) ;
StreamBufferHandle_t xStreamBufferGenericCreateStatic( size_t xBufferSizeBytes,
                size_t xTriggerLevelBytes,
                BaseType_t xIsMessageBuffer,
                uint8_t * const pucStreamBufferStorageArea,
                StaticStreamBuffer_t * const pxStaticStreamBuffer ) ;
size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer ) ;
 void vStreamBufferSetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer, UBaseType_t uxStreamBufferNumber ) ;
 UBaseType_t uxStreamBufferGetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer ) ;
 uint8_t ucStreamBufferGetStreamBufferType( StreamBufferHandle_t xStreamBuffer ) ;
#define _STDIO_H_ 
#define _ANSIDECL_H_ 
#define __SYS_CONFIG_H__ 
#define __IEEE_LITTLE_ENDIAN 
#define _SUPPORTS_ERREXCEPT 
#define __OBSOLETE_MATH_DEFAULT 1
#define __OBSOLETE_MATH __OBSOLETE_MATH_DEFAULT
#define _POINTER_INT long
#undef __RAND_MAX
#define __RAND_MAX 0x7fffffff
#define __EXPORT 
#define __IMPORT 
#define _READ_WRITE_RETURN_TYPE int
#define _READ_WRITE_BUFSIZE_TYPE int
#define _BEGIN_STD_C 
#define _END_STD_C 
#define _NOTHROW 
#define _LONG_DOUBLE long double
#define _ATTRIBUTE(attrs) __attribute__ (attrs)
#define _ELIDABLE_INLINE static __inline__
#define _NOINLINE __attribute__ ((__noinline__))
#define _NOINLINE_STATIC _NOINLINE static
#define _FSTDIO 
#define __need_size_t 
#define __need_NULL 
#undef __need_ptrdiff_t
#undef __need_size_t
#undef __need_wchar_t
#undef NULL
#define NULL ((void *)0)
#undef __need_NULL
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
#define __need___va_list 
#define _SYS_REENT_H_ 
#define _SYS__TYPES_H 
#define __need_size_t 
#define __need_wint_t 
#undef __need_ptrdiff_t
#undef __need_size_t
#undef __need_wchar_t
#define _WINT_T 
typedef unsigned int wint_t;
#undef __need_wint_t
#undef NULL
#define NULL ((void *)0)
#undef __need_NULL
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
#define _MACHINE__TYPES_H 
typedef long __blkcnt_t;
typedef long __blksize_t;
typedef __uint64_t __fsblkcnt_t;
typedef __uint32_t __fsfilcnt_t;
typedef long _off_t;
typedef int __pid_t;
typedef short __dev_t;
typedef unsigned short __uid_t;
typedef unsigned short __gid_t;
typedef __uint32_t __id_t;
typedef unsigned short __ino_t;
typedef __uint32_t __mode_t;
 typedef long long _off64_t;
typedef _off_t __off_t;
typedef _off64_t __loff_t;
typedef long __key_t;
typedef long _fpos_t;
#undef __size_t
typedef unsigned int __size_t;
#define unsigned signed
typedef signed int _ssize_t;
#undef unsigned
typedef _ssize_t __ssize_t;
typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;
typedef void *_iconv_t;
#define _CLOCK_T_ unsigned long
typedef unsigned long __clock_t;
#define _TIME_T_ __int_least64_t
typedef __int_least64_t __time_t;
#define _CLOCKID_T_ unsigned long
typedef unsigned long __clockid_t;
#define _TIMER_T_ unsigned long
typedef unsigned long __timer_t;
typedef __uint8_t __sa_family_t;
typedef __uint32_t __socklen_t;
typedef int __nl_item;
typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;
typedef __builtin_va_list __va_list;
#define _NULL 0
#define __Long long
typedef unsigned long __ULong;
#define __SYS_LOCK_H__ 
struct __lock;
typedef struct __lock * _LOCK_T;
#define _LOCK_RECURSIVE_T _LOCK_T
#define __LOCK_INIT(class,lock) extern struct __lock __lock_ ## lock; class _LOCK_T lock = &__lock_ ## lock
#define __LOCK_INIT_RECURSIVE(class,lock) __LOCK_INIT(class,lock)
extern void __retarget_lock_init(_LOCK_T *lock);
#define __lock_init(lock) __retarget_lock_init(&lock)
extern void __retarget_lock_init_recursive(_LOCK_T *lock);
#define __lock_init_recursive(lock) __retarget_lock_init_recursive(&lock)
extern void __retarget_lock_close(_LOCK_T lock);
#define __lock_close(lock) __retarget_lock_close(lock)
extern void __retarget_lock_close_recursive(_LOCK_T lock);
#define __lock_close_recursive(lock) __retarget_lock_close_recursive(lock)
extern void __retarget_lock_acquire(_LOCK_T lock);
#define __lock_acquire(lock) __retarget_lock_acquire(lock)
extern void __retarget_lock_acquire_recursive(_LOCK_T lock);
#define __lock_acquire_recursive(lock) __retarget_lock_acquire_recursive(lock)
extern int __retarget_lock_try_acquire(_LOCK_T lock);
#define __lock_try_acquire(lock) __retarget_lock_try_acquire(lock)
extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);
#define __lock_try_acquire_recursive(lock) __retarget_lock_try_acquire_recursive(lock)
extern void __retarget_lock_release(_LOCK_T lock);
#define __lock_release(lock) __retarget_lock_release(lock)
extern void __retarget_lock_release_recursive(_LOCK_T lock);
#define __lock_release_recursive(lock) __retarget_lock_release_recursive(lock)
typedef _LOCK_T _flock_t;
struct _reent;
struct __locale_t;
struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};
struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};
#define _ATEXIT_SIZE 32
struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];
 __ULong _fntypes;
 __ULong _is_cxa;
};
struct _atexit {
 struct _atexit *_next;
 int _ind;
 void (*_fns[32])(void);
        struct _on_exit_args _on_exit_args;
};
#define _ATEXIT_INIT {_NULL, 0, {_NULL}, {{_NULL}, {_NULL}, 0, 0}}
#define _REENT_INIT_ATEXIT _NULL, _ATEXIT_INIT,
struct __sbuf {
 unsigned char *_base;
 int _size;
};
#define _REENT_SMALL_CHECK_INIT(ptr) 
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;
  void * _cookie;
  int (*_read) (struct _reent *, void *,
        char *, int);
  int (*_write) (struct _reent *, void *,
         const char *,
         int);
  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);
  int (*_close) (struct _reent *, void *);
  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;
  unsigned char _ubuf[3];
  unsigned char _nbuf[1];
  struct __sbuf _lb;
  int _blksize;
  _off_t _offset;
  struct _reent *_data;
  _flock_t _lock;
  _mbstate_t _mbstate;
  int _flags2;
};
typedef struct __sFILE __FILE;
struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
#define _RAND48_SEED_0 (0x330e)
#define _RAND48_SEED_1 (0xabcd)
#define _RAND48_SEED_2 (0x1234)
#define _RAND48_MULT_0 (0xe66d)
#define _RAND48_MULT_1 (0xdeec)
#define _RAND48_MULT_2 (0x0005)
#define _RAND48_ADD (0x000b)
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;
};
#define _REENT_EMERGENCY_SIZE 25
#define _REENT_ASCTIME_SIZE 26
#define _REENT_SIGNAL_SIZE 24
struct _reent
{
  int _errno;
  __FILE *_stdin, *_stdout, *_stderr;
  int _inc;
  char _emergency[25];
  int _unspecified_locale_info;
  struct __locale_t *_locale;
  int __sdidinit;
  void (*__cleanup) (struct _reent *);
  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;
  int _cvtlen;
  char *_cvtbuf;
  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
   int _h_errno;
        } _reent;
      struct
        {
#define _N_LISTS 30
          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;
  struct _atexit *_atexit;
  struct _atexit _atexit0;
  void (**(_sig_func))(int);
  struct _glue __sglue;
  __FILE __sf[3];
};
#define _REENT_STDIO_STREAM(var,index) &(var)->__sf[index]
#define _REENT_INIT(var) { 0, _REENT_STDIO_STREAM(&(var), 0), _REENT_STDIO_STREAM(&(var), 1), _REENT_STDIO_STREAM(&(var), 2), 0, "", 0, _NULL, 0, _NULL, _NULL, 0, _NULL, _NULL, 0, _NULL, { { 0, _NULL, "", {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 1, { {_RAND48_SEED_0, _RAND48_SEED_1, _RAND48_SEED_2}, {_RAND48_MULT_0, _RAND48_MULT_1, _RAND48_MULT_2}, _RAND48_ADD }, {0, {0}}, {0, {0}}, {0, {0}}, "", "", 0, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}} } }, _REENT_INIT_ATEXIT _NULL, {_NULL, 0, _NULL} }
#define _REENT_INIT_PTR_ZEROED(var) { (var)->_stdin = _REENT_STDIO_STREAM(var, 0); (var)->_stdout = _REENT_STDIO_STREAM(var, 1); (var)->_stderr = _REENT_STDIO_STREAM(var, 2); (var)->_new._reent._rand_next = 1; (var)->_new._reent._r48._seed[0] = _RAND48_SEED_0; (var)->_new._reent._r48._seed[1] = _RAND48_SEED_1; (var)->_new._reent._r48._seed[2] = _RAND48_SEED_2; (var)->_new._reent._r48._mult[0] = _RAND48_MULT_0; (var)->_new._reent._r48._mult[1] = _RAND48_MULT_1; (var)->_new._reent._r48._mult[2] = _RAND48_MULT_2; (var)->_new._reent._r48._add = _RAND48_ADD; }
#define _REENT_CHECK_RAND48(ptr) 
#define _REENT_CHECK_MP(ptr) 
#define _REENT_CHECK_TM(ptr) 
#define _REENT_CHECK_ASCTIME_BUF(ptr) 
#define _REENT_CHECK_EMERGENCY(ptr) 
#define _REENT_CHECK_MISC(ptr) 
#define _REENT_CHECK_SIGNAL_BUF(ptr) 
#define _REENT_SIGNGAM(ptr) ((ptr)->_new._reent._gamma_signgam)
#define _REENT_RAND_NEXT(ptr) ((ptr)->_new._reent._rand_next)
#define _REENT_RAND48_SEED(ptr) ((ptr)->_new._reent._r48._seed)
#define _REENT_RAND48_MULT(ptr) ((ptr)->_new._reent._r48._mult)
#define _REENT_RAND48_ADD(ptr) ((ptr)->_new._reent._r48._add)
#define _REENT_MP_RESULT(ptr) ((ptr)->_result)
#define _REENT_MP_RESULT_K(ptr) ((ptr)->_result_k)
#define _REENT_MP_P5S(ptr) ((ptr)->_p5s)
#define _REENT_MP_FREELIST(ptr) ((ptr)->_freelist)
#define _REENT_ASCTIME_BUF(ptr) ((ptr)->_new._reent._asctime_buf)
#define _REENT_TM(ptr) (&(ptr)->_new._reent._localtime_buf)
#define _REENT_EMERGENCY(ptr) ((ptr)->_emergency)
#define _REENT_STRTOK_LAST(ptr) ((ptr)->_new._reent._strtok_last)
#define _REENT_MBLEN_STATE(ptr) ((ptr)->_new._reent._mblen_state)
#define _REENT_MBTOWC_STATE(ptr) ((ptr)->_new._reent._mbtowc_state)
#define _REENT_WCTOMB_STATE(ptr) ((ptr)->_new._reent._wctomb_state)
#define _REENT_MBRLEN_STATE(ptr) ((ptr)->_new._reent._mbrlen_state)
#define _REENT_MBRTOWC_STATE(ptr) ((ptr)->_new._reent._mbrtowc_state)
#define _REENT_MBSRTOWCS_STATE(ptr) ((ptr)->_new._reent._mbsrtowcs_state)
#define _REENT_WCRTOMB_STATE(ptr) ((ptr)->_new._reent._wcrtomb_state)
#define _REENT_WCSRTOMBS_STATE(ptr) ((ptr)->_new._reent._wcsrtombs_state)
#define _REENT_L64A_BUF(ptr) ((ptr)->_new._reent._l64a_buf)
#define _REENT_SIGNAL_BUF(ptr) ((ptr)->_new._reent._signal_buf)
#define _REENT_GETDATE_ERR_P(ptr) (&((ptr)->_new._reent._getdate_err))
#define _REENT_INIT_PTR(var) { memset((var), 0, sizeof(*(var))); _REENT_INIT_PTR_ZEROED(var); }
#define _Kmax (sizeof (size_t) << 3)
#define __ATTRIBUTE_IMPURE_PTR__ 
extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;
void _reclaim_reent (struct _reent *);
#define _REENT _impure_ptr
#define _GLOBAL_REENT _global_impure_ptr
#define _GLOBAL_ATEXIT (_GLOBAL_REENT->_atexit)
typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;
typedef __intptr_t register_t;
#define __BIT_TYPES_DEFINED__ 1
#define _SYS_TYPES_H 
#define __MACHINE_ENDIAN_H__ 
#define _LITTLE_ENDIAN 1234
#define _BIG_ENDIAN 4321
#define _PDP_ENDIAN 3412
#define _BYTE_ORDER _LITTLE_ENDIAN
#define _QUAD_HIGHWORD 1
#define _QUAD_LOWWORD 0
#define LITTLE_ENDIAN _LITTLE_ENDIAN
#define BIG_ENDIAN _BIG_ENDIAN
#define PDP_ENDIAN _PDP_ENDIAN
#define BYTE_ORDER _BYTE_ORDER
#define __bswap16(_x) __builtin_bswap16(_x)
#define __bswap32(_x) __builtin_bswap32(_x)
#define __bswap64(_x) __builtin_bswap64(_x)
#define __htonl(_x) __bswap32(_x)
#define __htons(_x) __bswap16(_x)
#define __ntohl(_x) __bswap32(_x)
#define __ntohs(_x) __bswap16(_x)
#define _SYS_SELECT_H 
#define _SYS__SIGSET_H_ 
typedef unsigned long __sigset_t;
#define _SYS__TIMEVAL_H_ 
typedef __suseconds_t suseconds_t;
#define _SUSECONDS_T_DECLARED 
typedef __int_least64_t time_t;
#define __time_t_defined 
#define _TIME_T_DECLARED 
#define _TIMEVAL_DEFINED 
struct timeval {
 time_t tv_sec;
 suseconds_t tv_usec;
};
#define _SYS_TIMESPEC_H_ 
#define _SYS__TIMESPEC_H_ 
struct timespec {
 time_t tv_sec;
 long tv_nsec;
};
#define TIMEVAL_TO_TIMESPEC(tv,ts) do { (ts)->tv_sec = (tv)->tv_sec; (ts)->tv_nsec = (tv)->tv_usec * 1000; } while (0)
#define TIMESPEC_TO_TIMEVAL(tv,ts) do { (tv)->tv_sec = (ts)->tv_sec; (tv)->tv_usec = (ts)->tv_nsec / 1000; } while (0)
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};
#define _SIGSET_T_DECLARED 
typedef __sigset_t sigset_t;
#define _SYS_TYPES_FD_SET 
#define FD_SETSIZE 64
typedef unsigned long __fd_mask;
typedef __fd_mask fd_mask;
#define _NFDBITS ((int)sizeof(__fd_mask) * 8)
#define NFDBITS _NFDBITS
#define _howmany(x,y) (((x) + ((y) - 1)) / (y))
typedef struct fd_set {
 __fd_mask __fds_bits[(((64) + ((((int)sizeof(__fd_mask) * 8)) - 1)) / (((int)sizeof(__fd_mask) * 8)))];
} fd_set;
#define fds_bits __fds_bits
#define __fdset_mask(n) ((__fd_mask)1 << ((n) % _NFDBITS))
#define FD_CLR(n,p) ((p)->__fds_bits[(n)/_NFDBITS] &= ~__fdset_mask(n))
#define FD_COPY(f,t) (void)(*(t) = *(f))
#define FD_ISSET(n,p) (((p)->__fds_bits[(n)/_NFDBITS] & __fdset_mask(n)) != 0)
#define FD_SET(n,p) ((p)->__fds_bits[(n)/_NFDBITS] |= __fdset_mask(n))
#define FD_ZERO(p) do { fd_set *_p; __size_t _n; _p = (p); _n = _howmany(FD_SETSIZE, _NFDBITS); while (_n > 0) _p->__fds_bits[--_n] = 0; } while (0)

int select (int __n, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, struct timeval *__timeout);
int pselect (int __n, fd_set *__readfds, fd_set *__writefds, fd_set *__exceptfds, const struct timespec *__timeout, const sigset_t *__set);

#define physadr physadr_t
#define quad quad_t
typedef __uint32_t in_addr_t;
#define _IN_ADDR_T_DECLARED 
typedef __uint16_t in_port_t;
#define _IN_PORT_T_DECLARED 
typedef __uintptr_t u_register_t;
typedef unsigned char u_char;
#define __u_char_defined 
typedef unsigned short u_short;
#define __u_short_defined 
typedef unsigned int u_int;
#define __u_int_defined 
typedef unsigned long u_long;
#define __u_long_defined 
#define _BSDTYPES_DEFINED 
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;
typedef __blkcnt_t blkcnt_t;
#define _BLKCNT_T_DECLARED 
typedef __blksize_t blksize_t;
#define _BLKSIZE_T_DECLARED 
typedef unsigned long clock_t;
#define __clock_t_defined 
#define _CLOCK_T_DECLARED 
typedef long daddr_t;
#define __daddr_t_defined 
typedef char * caddr_t;
#define __caddr_t_defined 
typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;
#define _FSBLKCNT_T_DECLARED 
typedef __id_t id_t;
#define _ID_T_DECLARED 
typedef __ino_t ino_t;
#define _INO_T_DECLARED 
typedef __off_t off_t;
#define _OFF_T_DECLARED 
typedef __dev_t dev_t;
#define _DEV_T_DECLARED 
typedef __uid_t uid_t;
#define _UID_T_DECLARED 
typedef __gid_t gid_t;
#define _GID_T_DECLARED 
typedef __pid_t pid_t;
#define _PID_T_DECLARED 
typedef __key_t key_t;
#define _KEY_T_DECLARED 
typedef _ssize_t ssize_t;
#define _SSIZE_T_DECLARED 
typedef __mode_t mode_t;
#define _MODE_T_DECLARED 
typedef __nlink_t nlink_t;
#define _NLINK_T_DECLARED 
typedef __clockid_t clockid_t;
#define __clockid_t_defined 
#define _CLOCKID_T_DECLARED 
typedef __timer_t timer_t;
#define __timer_t_defined 
#define _TIMER_T_DECLARED 
typedef __useconds_t useconds_t;
#define _USECONDS_T_DECLARED 
typedef __int64_t sbintime_t;
#define _SYS__PTHREADTYPES_H_ 
#define _SYS_SCHED_H_ 
#define SCHED_OTHER 0
#define SCHED_FIFO 1
#define SCHED_RR 2
struct sched_param {
  int sched_priority;
};
typedef __uint32_t pthread_t;
#define PTHREAD_SCOPE_PROCESS 0
#define PTHREAD_SCOPE_SYSTEM 1
#define PTHREAD_INHERIT_SCHED 1
#define PTHREAD_EXPLICIT_SCHED 2
#define PTHREAD_CREATE_DETACHED 0
#define PTHREAD_CREATE_JOINABLE 1
typedef struct {
  int is_initialized;
  void *stackaddr;
  int stacksize;
  int contentionscope;
  int inheritsched;
  int schedpolicy;
  struct sched_param schedparam;
  int detachstate;
} pthread_attr_t;
typedef __uint32_t pthread_mutex_t;
typedef struct {
  int is_initialized;
  int recursive;
} pthread_mutexattr_t;
#define _PTHREAD_MUTEX_INITIALIZER ((pthread_mutex_t) 0xFFFFFFFF)
typedef __uint32_t pthread_cond_t;
#define _PTHREAD_COND_INITIALIZER ((pthread_cond_t) 0xFFFFFFFF)
typedef struct {
  int is_initialized;
  clock_t clock;
} pthread_condattr_t;
typedef __uint32_t pthread_key_t;
typedef struct {
  int is_initialized;
  int init_executed;
} pthread_once_t;
#define _PTHREAD_ONCE_INIT { 1, 0 }
#undef __need_inttypes

typedef __FILE FILE;
#define __FILE_defined 
typedef _fpos_t fpos_t;
#define _NEWLIB_STDIO_H 
#define _flockfile(fp) (((fp)->_flags & __SSTR) ? 0 : __lock_acquire_recursive((fp)->_lock))
#define _funlockfile(fp) (((fp)->_flags & __SSTR) ? 0 : __lock_release_recursive((fp)->_lock))
#define __SLBF 0x0001
#define __SNBF 0x0002
#define __SRD 0x0004
#define __SWR 0x0008
#define __SRW 0x0010
#define __SEOF 0x0020
#define __SERR 0x0040
#define __SMBF 0x0080
#define __SAPP 0x0100
#define __SSTR 0x0200
#define __SOPT 0x0400
#define __SNPT 0x0800
#define __SOFF 0x1000
#define __SORD 0x2000
#define __SL64 0x8000
#define __SNLK 0x0001
#define __SWID 0x2000
#define _IOFBF 0
#define _IOLBF 1
#define _IONBF 2
#define EOF (-1)
#define BUFSIZ 1024
#define FOPEN_MAX 20
#define FILENAME_MAX 1024
#define L_tmpnam FILENAME_MAX
#define P_tmpdir "/tmp"
#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2
#define TMP_MAX 26
#define stdin (_REENT->_stdin)
#define stdout (_REENT->_stdout)
#define stderr (_REENT->_stderr)
#define _stdin_r(x) ((x)->_stdin)
#define _stdout_r(x) ((x)->_stdout)
#define _stderr_r(x) ((x)->_stderr)
#define __VALIST __gnuc_va_list
char * ctermid (char *);
char * cuserid (char *);
FILE * tmpfile (void);
char * tmpnam (char *);
char * tempnam (const char *, const char *) ;
int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *, const char *, FILE *);
void setbuf (FILE *, char *);
int setvbuf (FILE *, char *, int, size_t);
int fprintf (FILE *, const char *, ...)
               ;
int fscanf (FILE *, const char *, ...)
               ;
int printf (const char *, ...)
               ;
int scanf (const char *, ...)
               ;
int sscanf (const char *, const char *, ...)
               ;
int vfprintf (FILE *, const char *, __gnuc_va_list)
               ;
int vprintf (const char *, __gnuc_va_list)
               ;
int vsprintf (char *, const char *, __gnuc_va_list)
               ;
int fgetc (FILE *);
char * fgets (char *, int, FILE *);
int fputc (int, FILE *);
int fputs (const char *, FILE *);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void *, size_t _size, size_t _n, FILE *);
size_t fwrite (const void * , size_t _size, size_t _n, FILE *);
int fgetpos (FILE *, fpos_t *);
int fseek (FILE *, long, int);
int fsetpos (FILE *, const fpos_t *);
long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);
FILE * fopen (const char * _name, const char * _type);
int sprintf (char *, const char *, ...)
               ;
int remove (const char *);
int rename (const char *, const char *);
int fseeko (FILE *, off_t, int);
off_t ftello (FILE *);
int fcloseall (void);
int snprintf (char *, size_t, const char *, ...)
               ;
int vsnprintf (char *, size_t, const char *, __gnuc_va_list)
               ;
int vfscanf (FILE *, const char *, __gnuc_va_list)
               ;
int vscanf (const char *, __gnuc_va_list)
               ;
int vsscanf (const char *, const char *, __gnuc_va_list)
               ;
int asprintf (char **, const char *, ...)
               ;
int vasprintf (char **, const char *, __gnuc_va_list)
               ;
int asiprintf (char **, const char *, ...)
               ;
char * asniprintf (char *, size_t *, const char *, ...)
               ;
char * asnprintf (char *, size_t *, const char *, ...)
               ;
int diprintf (int, const char *, ...)
               ;
int fiprintf (FILE *, const char *, ...)
               ;
int fiscanf (FILE *, const char *, ...)
               ;
int iprintf (const char *, ...)
               ;
int iscanf (const char *, ...)
               ;
int siprintf (char *, const char *, ...)
               ;
int siscanf (const char *, const char *, ...)
               ;
int sniprintf (char *, size_t, const char *, ...)
               ;
int vasiprintf (char **, const char *, __gnuc_va_list)
               ;
char * vasniprintf (char *, size_t *, const char *, __gnuc_va_list)
               ;
char * vasnprintf (char *, size_t *, const char *, __gnuc_va_list)
               ;
int vdiprintf (int, const char *, __gnuc_va_list)
               ;
int vfiprintf (FILE *, const char *, __gnuc_va_list)
               ;
int vfiscanf (FILE *, const char *, __gnuc_va_list)
               ;
int viprintf (const char *, __gnuc_va_list)
               ;
int viscanf (const char *, __gnuc_va_list)
               ;
int vsiprintf (char *, const char *, __gnuc_va_list)
               ;
int vsiscanf (const char *, const char *, __gnuc_va_list)
               ;
int vsniprintf (char *, size_t, const char *, __gnuc_va_list)
               ;
FILE * fdopen (int, const char *);
int fileno (FILE *);
int pclose (FILE *);
FILE * popen (const char *, const char *);
void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);
int getw (FILE *);
int putw (int, FILE *);
int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);
int dprintf (int, const char *, ...)
               ;
FILE * fmemopen (void *, size_t, const char *);
FILE * open_memstream (char **, size_t *);
int vdprintf (int, const char *, __gnuc_va_list)
               ;
int renameat (int, const char *, int, const char *);
int _asiprintf_r (struct _reent *, char **, const char *, ...)
               ;
char * _asniprintf_r (struct _reent *, char *, size_t *, const char *, ...)
               ;
char * _asnprintf_r (struct _reent *, char *, size_t *, const char *, ...)
               ;
int _asprintf_r (struct _reent *, char **, const char *, ...)
               ;
int _diprintf_r (struct _reent *, int, const char *, ...)
               ;
int _dprintf_r (struct _reent *, int, const char *, ...)
               ;
int _fclose_r (struct _reent *, FILE *);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
int _fflush_r (struct _reent *, FILE *);
int _fgetc_r (struct _reent *, FILE *);
int _fgetc_unlocked_r (struct _reent *, FILE *);
char * _fgets_r (struct _reent *, char *, int, FILE *);
char * _fgets_unlocked_r (struct _reent *, char *, int, FILE *);
int _fgetpos_r (struct _reent *, FILE *, fpos_t *);
int _fsetpos_r (struct _reent *, FILE *, const fpos_t *);
int _fiprintf_r (struct _reent *, FILE *, const char *, ...)
               ;
int _fiscanf_r (struct _reent *, FILE *, const char *, ...)
               ;
FILE * _fmemopen_r (struct _reent *, void *, size_t, const char *);
FILE * _fopen_r (struct _reent *, const char *, const char *);
FILE * _freopen_r (struct _reent *, const char *, const char *, FILE *);
int _fprintf_r (struct _reent *, FILE *, const char *, ...)
               ;
int _fpurge_r (struct _reent *, FILE *);
int _fputc_r (struct _reent *, int, FILE *);
int _fputc_unlocked_r (struct _reent *, int, FILE *);
int _fputs_r (struct _reent *, const char *, FILE *);
int _fputs_unlocked_r (struct _reent *, const char *, FILE *);
size_t _fread_r (struct _reent *, void *, size_t _size, size_t _n, FILE *);
size_t _fread_unlocked_r (struct _reent *, void *, size_t _size, size_t _n, FILE *);
int _fscanf_r (struct _reent *, FILE *, const char *, ...)
               ;
int _fseek_r (struct _reent *, FILE *, long, int);
int _fseeko_r (struct _reent *, FILE *, _off_t, int);
long _ftell_r (struct _reent *, FILE *);
_off_t _ftello_r (struct _reent *, FILE *);
void _rewind_r (struct _reent *, FILE *);
size_t _fwrite_r (struct _reent *, const void *, size_t _size, size_t _n, FILE *);
size_t _fwrite_unlocked_r (struct _reent *, const void *, size_t _size, size_t _n, FILE *);
int _getc_r (struct _reent *, FILE *);
int _getc_unlocked_r (struct _reent *, FILE *);
int _getchar_r (struct _reent *);
int _getchar_unlocked_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...)
               ;
int _iscanf_r (struct _reent *, const char *, ...)
               ;
FILE * _open_memstream_r (struct _reent *, char **, size_t *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *, ...)
               ;
int _putc_r (struct _reent *, int, FILE *);
int _putc_unlocked_r (struct _reent *, int, FILE *);
int _putchar_unlocked_r (struct _reent *, int);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *,
      const char *_old, const char *_new);
int _scanf_r (struct _reent *, const char *, ...)
               ;
int _siprintf_r (struct _reent *, char *, const char *, ...)
               ;
int _siscanf_r (struct _reent *, const char *, const char *, ...)
               ;
int _sniprintf_r (struct _reent *, char *, size_t, const char *, ...)
               ;
int _snprintf_r (struct _reent *, char *, size_t, const char *, ...)
               ;
int _sprintf_r (struct _reent *, char *, const char *, ...)
               ;
int _sscanf_r (struct _reent *, const char *, const char *, ...)
               ;
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _ungetc_r (struct _reent *, int, FILE *);
int _vasiprintf_r (struct _reent *, char **, const char *, __gnuc_va_list)
               ;
char * _vasniprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list)
               ;
char * _vasnprintf_r (struct _reent*, char *, size_t *, const char *, __gnuc_va_list)
               ;
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list)
               ;
int _vdiprintf_r (struct _reent *, int, const char *, __gnuc_va_list)
               ;
int _vdprintf_r (struct _reent *, int, const char *, __gnuc_va_list)
               ;
int _vfiprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               ;
int _vfiscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               ;
int _vfprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               ;
int _vfscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list)
               ;
int _viprintf_r (struct _reent *, const char *, __gnuc_va_list)
               ;
int _viscanf_r (struct _reent *, const char *, __gnuc_va_list)
               ;
int _vprintf_r (struct _reent *, const char *, __gnuc_va_list)
               ;
int _vscanf_r (struct _reent *, const char *, __gnuc_va_list)
               ;
int _vsiprintf_r (struct _reent *, char *, const char *, __gnuc_va_list)
               ;
int _vsiscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list)
               ;
int _vsniprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list)
               ;
int _vsnprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list)
               ;
int _vsprintf_r (struct _reent *, char *, const char *, __gnuc_va_list)
               ;
int _vsscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list)
               ;
int fpurge (FILE *);
ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);
void clearerr_unlocked (FILE *);
int feof_unlocked (FILE *);
int ferror_unlocked (FILE *);
int fileno_unlocked (FILE *);
int fflush_unlocked (FILE *);
int fgetc_unlocked (FILE *);
int fputc_unlocked (int, FILE *);
size_t fread_unlocked (void *, size_t _size, size_t _n, FILE *);
size_t fwrite_unlocked (const void * , size_t _size, size_t _n, FILE *);
char * fgets_unlocked (char *, int, FILE *);
int fputs_unlocked (const char *, FILE *);
int __srget_r (struct _reent *, FILE *);
int __swbuf_r (struct _reent *, int, FILE *);
FILE *funopen (const void *__cookie,
  int (*__readfn)(void *__cookie, char *__buf,
    int __n),
  int (*__writefn)(void *__cookie, const char *__buf,
     int __n),
  fpos_t (*__seekfn)(void *__cookie, fpos_t __off, int __whence),
  int (*__closefn)(void *__cookie));
FILE *_funopen_r (struct _reent *, const void *__cookie,
  int (*__readfn)(void *__cookie, char *__buf,
    int __n),
  int (*__writefn)(void *__cookie, const char *__buf,
     int __n),
  fpos_t (*__seekfn)(void *__cookie, fpos_t __off, int __whence),
  int (*__closefn)(void *__cookie));
#define fropen(__cookie,__fn) funopen(__cookie, __fn, (int (*)())0, (fpos_t (*)())0, (int (*)())0)
#define fwopen(__cookie,__fn) funopen(__cookie, (int (*)())0, __fn, (fpos_t (*)())0, (int (*)())0)
typedef ssize_t cookie_read_function_t(void *__cookie, char *__buf, size_t __n);
typedef ssize_t cookie_write_function_t(void *__cookie, const char *__buf,
     size_t __n);
typedef int cookie_seek_function_t(void *__cookie, off_t *__off, int __whence);
typedef int cookie_close_function_t(void *__cookie);
typedef struct
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
FILE *fopencookie (void *__cookie,
  const char *__mode, cookie_io_functions_t __functions);
FILE *_fopencookie_r (struct _reent *, void *__cookie,
  const char *__mode, cookie_io_functions_t __functions);
#define __sgetc_raw_r(__ptr,__f) (--(__f)->_r < 0 ? __srget_r(__ptr, __f) : (int)(*(__f)->_p++))
#define __sgetc_r(__ptr,__p) __sgetc_raw_r(__ptr, __p)
static inline int __sputc_r(struct _reent *_ptr, int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf_r(_ptr, _c, _p));
}
#define __sfeof(p) ((int)(((p)->_flags & __SEOF) != 0))
#define __sferror(p) ((int)(((p)->_flags & __SERR) != 0))
#define __sclearerr(p) ((void)((p)->_flags &= ~(__SERR|__SEOF)))
#define __sfileno(p) ((p)->_file)
#define feof(p) __sfeof(p)
#define ferror(p) __sferror(p)
#define clearerr(p) __sclearerr(p)
#define feof_unlocked(p) __sfeof(p)
#define ferror_unlocked(p) __sferror(p)
#define clearerr_unlocked(p) __sclearerr(p)
static inline int
_getchar_unlocked(void)
{
 struct _reent *_ptr;
 _ptr = _impure_ptr;
 return ((--(((_ptr)->_stdin))->_r < 0 ? __srget_r(_ptr, ((_ptr)->_stdin)) : (int)(*(((_ptr)->_stdin))->_p++)));
}
static inline int
_putchar_unlocked(int _c)
{
 struct _reent *_ptr;
 _ptr = _impure_ptr;
 return (__sputc_r(_ptr, _c, ((_ptr)->_stdout)));
}
#define getchar_unlocked() _getchar_unlocked()
#define putchar_unlocked(_c) _putchar_unlocked(_c)
#define fast_putc(x,p) (--(p)->_w < 0 ? __swbuf_r(_REENT, (int)(x), p) == EOF : (*(p)->_p = (x), (p)->_p++, 0))
#define L_cuserid 9
#define L_ctermid 16

#define _STRING_H_ 
#define __need_size_t 
#define __need_NULL 
#undef __need_ptrdiff_t
#undef __need_size_t
#undef __need_wchar_t
#undef NULL
#define NULL ((void *)0)
#undef __need_NULL
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
#define _SYS__LOCALE_H 
struct __locale_t;
typedef struct __locale_t *locale_t;
#define _STRINGS_H_ 

int bcmp(const void *, const void *, size_t) ;
void bcopy(const void *, void *, size_t);
void bzero(void *, size_t);
void explicit_bzero(void *, size_t);
int ffs(int) ;
int ffsl(long) ;
int ffsll(long long) ;
int fls(int) ;
int flsl(long) ;
int flsll(long long) ;
char *index(const char *, int) ;
char *rindex(const char *, int) ;
int strcasecmp(const char *, const char *) ;
int strncasecmp(const char *, const char *, size_t) ;
int strcasecmp_l (const char *, const char *, locale_t);
int strncasecmp_l (const char *, const char *, size_t, locale_t);


void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void *, const void *, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *, const char *);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *, const char *);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *, const char *, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *, const char *, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);
char *strtok (char *, const char *);
size_t strxfrm (char *, const char *, size_t);
int strcoll_l (const char *, const char *, locale_t);
char *strerror_l (int, locale_t);
size_t strxfrm_l (char *, const char *, size_t, locale_t);
char *strtok_r (char *, const char *, char **);
int timingsafe_bcmp (const void *, const void *, size_t);
int timingsafe_memcmp (const void *, const void *, size_t);
void * memccpy (void *, const void *, int, size_t);
void * mempcpy (void *, const void *, size_t);
void * memmem (const void *, size_t, const void *, size_t);
void * memrchr (const void *, int, size_t);
void * rawmemchr (const void *, int);
char *stpcpy (char *, const char *);
char *stpncpy (char *, const char *, size_t);
char *strcasestr (const char *, const char *);
char *strchrnul (const char *, int);
char *strdup (const char *) ;
char *_strdup_r (struct _reent *, const char *);
char *strndup (const char *, size_t) ;
char *_strndup_r (struct _reent *, const char *, size_t);
char *strerror_r (int, char *, size_t);
char * _strerror_r (struct _reent *, int, int, int *);
size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);
size_t strnlen (const char *, size_t);
char *strsep (char **, const char *);
char *strnstr(const char *, const char *, size_t) ;
char *strlwr (char *);
char *strupr (char *);
char *strsignal (int __signo);
int strverscmp (const char *, const char *);
#define strdupa(__s) (__extension__ ({const char *__sin = (__s); size_t __len = strlen (__sin) + 1; char * __sout = (char *) __builtin_alloca (__len); (char *) memcpy (__sout, __sin, __len);}))
#define strndupa(__s,__n) (__extension__ ({const char *__sin = (__s); size_t __len = strnlen (__sin, (__n)) + 1; char *__sout = (char *) __builtin_alloca (__len); __sout[__len-1] = '\0'; (char *) memcpy (__sout, __sin, __len-1);}))
#define basename basename
char * basename (const char *) ;

void _putchar(char character);
int __wrap_printf(const char* format, ...);
int __wrap_vsnprintf(char* str, size_t size, const char* format, va_list args);
int __wrap_puts(const char* str);
int __wrap_putchar(int ch);
int __wrap_putc(int ch, FILE* stream);
int __wrap_snprintf(char* str, size_t size, const char* format, ...);
int __wrap_fflush(FILE* stream);
 void __wrap___assert(const char* file, int line, const char* e);
 void
    __wrap___assert_func(const char* file, int line, const char* func, const char* e);
       
uint8_t value_index_uint32(const uint32_t value, const uint32_t values[], uint8_t values_count);
uint8_t value_index_float(const float value, const float values[], uint8_t values_count);
uint8_t value_index_bool(const _Bool value, const _Bool values[], uint8_t values_count);
       
typedef enum {
    ManchesterEventShortLow = 0,
    ManchesterEventShortHigh = 2,
    ManchesterEventLongLow = 4,
    ManchesterEventLongHigh = 6,
    ManchesterEventReset = 8
} ManchesterEvent;
typedef enum {
    ManchesterStateStart1 = 0,
    ManchesterStateMid1 = 1,
    ManchesterStateMid0 = 2,
    ManchesterStateStart0 = 3
} ManchesterState;
_Bool manchester_advance(
    ManchesterState state,
    ManchesterEvent event,
    ManchesterState* next_state,
    _Bool* data);
       
typedef struct {
    _Bool prev_bit;
    uint8_t step;
} ManchesterEncoderState;
typedef enum {
    ManchesterEncoderResultShortLow = 0b00,
    ManchesterEncoderResultLongLow = 0b01,
    ManchesterEncoderResultLongHigh = 0b10,
    ManchesterEncoderResultShortHigh = 0b11,
} ManchesterEncoderResult;
void manchester_encoder_reset(ManchesterEncoderState* state);
_Bool manchester_encoder_advance(
    ManchesterEncoderState* state,
    const _Bool curr_bit,
    ManchesterEncoderResult* result);
ManchesterEncoderResult manchester_encoder_finish(ManchesterEncoderState* state);
       
       
#define _STDLIB_H_ 
#define __need_size_t 
#define __need_wchar_t 
#define __need_NULL 
#undef __need_ptrdiff_t
#undef __need_size_t
#undef __need_wchar_t
#undef NULL
#define NULL ((void *)0)
#undef __need_NULL
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
#define _MACHSTDLIB_H_ 
#define _NEWLIB_ALLOCA_H 
#undef alloca
#define alloca(size) __builtin_alloca(size)

typedef struct
{
  int quot;
  int rem;
} div_t;
typedef struct
{
  long quot;
  long rem;
} ldiv_t;
typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;
#define __compar_fn_t_defined 
typedef int (*__compar_fn_t) (const void *, const void *);
#define EXIT_FAILURE 1
#define EXIT_SUCCESS 0
#define RAND_MAX __RAND_MAX
int __locale_mb_cur_max (void);
#define MB_CUR_MAX __locale_mb_cur_max()
void abort (void) ;
int abs (int);
__uint32_t arc4random (void);
__uint32_t arc4random_uniform (__uint32_t);
void arc4random_buf (void *, size_t);
int atexit (void (*__func)(void));
double atof (const char *__nptr);
float atoff (const char *__nptr);
int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void *__key,
         const void *__base,
         size_t __nmemb,
         size_t __size,
         __compar_fn_t _compar);
void *calloc(size_t, size_t)
      ;
div_t div (int __numer, int __denom);
void exit (int __status) ;
void free (void *) ;
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);
char * secure_getenv (const char *__string);
char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);
extern char *suboptarg;
int getsubopt (char **, char * const *, char **);
long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void *malloc(size_t) ;
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *, const char *, size_t);
int _mbtowc_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *, const char *, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
size_t wcstombs (char *, const wchar_t *, size_t);
size_t _wcstombs_r (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *);
char * mkdtemp (char *);
int mkostemp (char *, int);
int mkostemps (char *, int, int);
int mkstemp (char *);
int mkstemps (char *, int);
char * mktemp (char *) ;
char * _mkdtemp_r (struct _reent *, char *);
int _mkostemp_r (struct _reent *, char *, int);
int _mkostemps_r (struct _reent *, char *, int, int);
int _mkstemp_r (struct _reent *, char *);
int _mkstemps_r (struct _reent *, char *, int);
char * _mktemp_r (struct _reent *, char *) ;
void qsort (void *__base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void *realloc(void *, size_t) ;
void *reallocarray(void *, size_t, size_t) ;
void *reallocf(void *, size_t) ;
char * realpath (const char * path, char * resolved_path);
int rpmatch (const char *response);
void setkey (const char *__key);
void srand (unsigned __seed);
double strtod (const char * __n, char ** __end_PTR);
double _strtod_r (struct _reent *,const char * __n, char ** __end_PTR);
float strtof (const char * __n, char ** __end_PTR);
#define strtodf strtof
long strtol (const char * __n, char ** __end_PTR, int __base);
long _strtol_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);
unsigned long strtoul (const char * __n, char ** __end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char * __n, char ** __end_PTR, int __base);
double strtod_l (const char *, char **, locale_t);
float strtof_l (const char *, char **, locale_t);
extern long double strtold_l (const char *, char **,
         locale_t);
long strtol_l (const char *, char **, int, locale_t);
unsigned long strtoul_l (const char *, char **, int,
    locale_t __loc);
long long strtoll_l (const char *, char **, int, locale_t);
unsigned long long strtoull_l (const char *, char **, int,
          locale_t __loc);
int system (const char *__string);
long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);
int on_exit (void (*__func)(int, void *),void *__arg);
void _Exit (int __status) ;
int putenv (char *__string);
int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);
int setenv (const char *__string, const char *__value, int __overwrite);
int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);
char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);
char * itoa (int, char *, int);
char * utoa (unsigned, char *, int);
int rand_r (unsigned *__seed);
double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);
char * initstate (unsigned, char *, size_t);
long random (void);
char * setstate (char *);
void srandom (unsigned);
long long atoll (const char *__nptr);
long long _atoll_r (struct _reent *, const char *__nptr);
long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char * __n, char ** __end_PTR, int __base);
long long _strtoll_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);
unsigned long long strtoull (const char * __n, char ** __end_PTR, int __base);
unsigned long long _strtoull_r (struct _reent *, const char * __n, char ** __end_PTR, int __base);
void cfree (void *);
int unsetenv (const char *__string);
int _unsetenv_r (struct _reent *, const char *__string);
int posix_memalign (void **, size_t, size_t)
     ;
char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);
void * _malloc_r (struct _reent *, size_t) ;
void * _calloc_r (struct _reent *, size_t, size_t) ;
void _free_r (struct _reent *, void *) ;
void * _realloc_r (struct _reent *, void *, size_t) ;
void _mstats_r (struct _reent *, char *);
int _system_r (struct _reent *, const char *);
void __eprintf (const char *, const char *, unsigned int, const char *);
void qsort_r (void *__base, size_t __nmemb, size_t __size, int (*_compar)(const void *, const void *, void *), void *__thunk);
extern long double _strtold_r (struct _reent *, const char *, char **);
extern long double strtold (const char *, char **);
void * aligned_alloc(size_t, size_t)
     ;
int at_quick_exit(void (*)(void));
 void
 quick_exit(int);

       
#define _STDNORETURN_H 
#define noreturn _Noreturn
#define FURI_NORETURN noreturn
 void __furi_crash();
 void __furi_halt();
#define furi_crash(message) do { register const void* r12 asm("r12") = (void*)message; asm volatile("sukima%=:" : : "r"(r12)); __furi_crash(); } while(0)
#define furi_halt(message) do { register const void* r12 asm("r12") = (void*)message; asm volatile("sukima%=:" : : "r"(r12)); __furi_halt(); } while(0)
#define furi_check(__e) do { if(!(__e)) { furi_crash("furi_check failed\r\n"); } } while(0)
#define furi_assert(__e) do { ((void)(__e)); } while(0)
       
       
#define FURI_RETURNS_NONNULL __attribute__((returns_nonnull))
#define MAX(a,b) ({ __typeof__(a) _a = (a); __typeof__(b) _b = (b); _a > _b ? _a : _b; })
#define MIN(a,b) ({ __typeof__(a) _a = (a); __typeof__(b) _b = (b); _a < _b ? _a : _b; })
#define ROUND_UP_TO(a,b) ({ __typeof__(a) _a = (a); __typeof__(b) _b = (b); _a / _b + !!(_a % _b); })
#define CLAMP(x,upper,lower) (MIN(upper, MAX(x, lower)))
#define COUNT_OF(x) (sizeof(x) / sizeof(x[0]))
#define FURI_SWAP(x,y) do { typeof(x) SWAP = x; x = y; y = SWAP; } while(0)
#define PLACE_IN_SECTION(x) __attribute__((section(x)))
#define ALIGN(n) __attribute__((aligned(n)))
#define __weak __attribute__((weak))
#define UNUSED(X) (void)(X)
#define STRINGIFY(x) #x
#define TOSTRING(x) STRINGIFY(x)
#define REVERSE_BYTES_U32(x) ((((x)&0x000000FF) << 24) | (((x)&0x0000FF00) << 8) | (((x)&0x00FF0000) >> 8) | (((x)&0xFF000000) >> 24))
#define FURI_BIT(x,n) (((x) >> (n)) & 1)
#define FURI_BIT_SET(x,n) ({ __typeof__(x) _x = (1); (x) |= (_x << (n)); })
#define FURI_BIT_CLEAR(x,n) ({ __typeof__(x) _x = (1); (x) &= ~(_x << (n)); })
#define FURI_SW_MEMBARRIER() asm volatile("" : : : "memory")
#define INC_TASK_H 
#define LIST_H 
#define configLIST_VOLATILE 
#define listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE 
#define listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE 
#define listFIRST_LIST_INTEGRITY_CHECK_VALUE 
#define listSECOND_LIST_INTEGRITY_CHECK_VALUE 
#define listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem) 
#define listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE(pxItem) 
#define listSET_LIST_INTEGRITY_CHECK_1_VALUE(pxList) 
#define listSET_LIST_INTEGRITY_CHECK_2_VALUE(pxList) 
#define listTEST_LIST_ITEM_INTEGRITY(pxItem) 
#define listTEST_LIST_INTEGRITY(pxList) 
struct xLIST;
struct xLIST_ITEM
{
   
    TickType_t xItemValue;
    struct xLIST_ITEM * pxNext;
    struct xLIST_ITEM * pxPrevious;
    void * pvOwner;
    struct xLIST * pxContainer;
   
};
typedef struct xLIST_ITEM ListItem_t;
struct xMINI_LIST_ITEM
{
   
    TickType_t xItemValue;
    struct xLIST_ITEM * pxNext;
    struct xLIST_ITEM * pxPrevious;
};
typedef struct xMINI_LIST_ITEM MiniListItem_t;
typedef struct xLIST
{
   
    volatile UBaseType_t uxNumberOfItems;
    ListItem_t * pxIndex;
    MiniListItem_t xListEnd;
   
} List_t;
#define listSET_LIST_ITEM_OWNER(pxListItem,pxOwner) ( ( pxListItem )->pvOwner = ( void * ) ( pxOwner ) )
#define listGET_LIST_ITEM_OWNER(pxListItem) ( ( pxListItem )->pvOwner )
#define listSET_LIST_ITEM_VALUE(pxListItem,xValue) ( ( pxListItem )->xItemValue = ( xValue ) )
#define listGET_LIST_ITEM_VALUE(pxListItem) ( ( pxListItem )->xItemValue )
#define listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxList) ( ( ( pxList )->xListEnd ).pxNext->xItemValue )
#define listGET_HEAD_ENTRY(pxList) ( ( ( pxList )->xListEnd ).pxNext )
#define listGET_NEXT(pxListItem) ( ( pxListItem )->pxNext )
#define listGET_END_MARKER(pxList) ( ( ListItem_t const * ) ( &( ( pxList )->xListEnd ) ) )
#define listLIST_IS_EMPTY(pxList) ( ( ( pxList )->uxNumberOfItems == ( UBaseType_t ) 0 ) ? pdTRUE : pdFALSE )
#define listCURRENT_LIST_LENGTH(pxList) ( ( pxList )->uxNumberOfItems )
#define listGET_OWNER_OF_NEXT_ENTRY(pxTCB,pxList) { List_t * const pxConstList = ( pxList ); ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( void * ) ( pxConstList )->pxIndex == ( void * ) &( ( pxConstList )->xListEnd ) ) { ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; } ( pxTCB ) = ( pxConstList )->pxIndex->pvOwner; }
#define listREMOVE_ITEM(pxItemToRemove) { List_t * const pxList = ( pxItemToRemove )->pxContainer; ( pxItemToRemove )->pxNext->pxPrevious = ( pxItemToRemove )->pxPrevious; ( pxItemToRemove )->pxPrevious->pxNext = ( pxItemToRemove )->pxNext; if( pxList->pxIndex == ( pxItemToRemove ) ) { pxList->pxIndex = ( pxItemToRemove )->pxPrevious; } ( pxItemToRemove )->pxContainer = NULL; ( pxList->uxNumberOfItems )--; }
#define listINSERT_END(pxList,pxNewListItem) { ListItem_t * const pxIndex = ( pxList )->pxIndex; listTEST_LIST_INTEGRITY( ( pxList ) ); listTEST_LIST_ITEM_INTEGRITY( ( pxNewListItem ) ); ( pxNewListItem )->pxNext = pxIndex; ( pxNewListItem )->pxPrevious = pxIndex->pxPrevious; pxIndex->pxPrevious->pxNext = ( pxNewListItem ); pxIndex->pxPrevious = ( pxNewListItem ); ( pxNewListItem )->pxContainer = ( pxList ); ( ( pxList )->uxNumberOfItems )++; }
#define listGET_OWNER_OF_HEAD_ENTRY(pxList) ( ( &( ( pxList )->xListEnd ) )->pxNext->pvOwner )
#define listIS_CONTAINED_WITHIN(pxList,pxListItem) ( ( ( pxListItem )->pxContainer == ( pxList ) ) ? ( pdTRUE ) : ( pdFALSE ) )
#define listLIST_ITEM_CONTAINER(pxListItem) ( ( pxListItem )->pxContainer )
#define listLIST_IS_INITIALISED(pxList) ( ( pxList )->xListEnd.xItemValue == portMAX_DELAY )
void vListInitialise( List_t * const pxList ) ;
void vListInitialiseItem( ListItem_t * const pxItem ) ;
void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem ) ;
void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem ) ;
UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove ) ;
#define tskKERNEL_VERSION_NUMBER "V10.4.4+"
#define tskKERNEL_VERSION_MAJOR 10
#define tskKERNEL_VERSION_MINOR 4
#define tskKERNEL_VERSION_BUILD 4
#define tskMPU_REGION_READ_ONLY ( 1UL << 0UL )
#define tskMPU_REGION_READ_WRITE ( 1UL << 1UL )
#define tskMPU_REGION_EXECUTE_NEVER ( 1UL << 2UL )
#define tskMPU_REGION_NORMAL_MEMORY ( 1UL << 3UL )
#define tskMPU_REGION_DEVICE_MEMORY ( 1UL << 4UL )
#define tskDEFAULT_INDEX_TO_NOTIFY ( 0 )
struct tskTaskControlBlock;
typedef struct tskTaskControlBlock * TaskHandle_t;
typedef BaseType_t (* TaskHookFunction_t)( void * );
typedef enum
{
    eRunning = 0,
    eReady,
    eBlocked,
    eSuspended,
    eDeleted,
    eInvalid
} eTaskState;
typedef enum
{
    eNoAction = 0,
    eSetBits,
    eIncrement,
    eSetValueWithOverwrite,
    eSetValueWithoutOverwrite
} eNotifyAction;
typedef struct xTIME_OUT
{
    BaseType_t xOverflowCount;
    TickType_t xTimeOnEntering;
} TimeOut_t;
typedef struct xMEMORY_REGION
{
    void * pvBaseAddress;
    uint32_t ulLengthInBytes;
    uint32_t ulParameters;
} MemoryRegion_t;
typedef struct xTASK_PARAMETERS
{
    TaskFunction_t pvTaskCode;
    const char * pcName;
    uint16_t usStackDepth;
    void * pvParameters;
    UBaseType_t uxPriority;
    StackType_t * puxStackBuffer;
    MemoryRegion_t xRegions[ 1 ];
} TaskParameters_t;
typedef struct xTASK_STATUS
{
    TaskHandle_t xHandle;
    const char * pcTaskName;
    UBaseType_t xTaskNumber;
    eTaskState eCurrentState;
    UBaseType_t uxCurrentPriority;
    UBaseType_t uxBasePriority;
    configRUN_TIME_COUNTER_TYPE ulRunTimeCounter;
    StackType_t * pxStackBase;
    uint16_t usStackHighWaterMark;
} TaskStatus_t;
typedef enum
{
    eAbortSleep = 0,
    eStandardSleep,
        eNoTasksWaitingTimeout
} eSleepModeStatus;
#define tskIDLE_PRIORITY ( ( UBaseType_t ) 0U )
#define taskYIELD() portYIELD()
#define taskENTER_CRITICAL() portENTER_CRITICAL()
#define taskENTER_CRITICAL_FROM_ISR() portSET_INTERRUPT_MASK_FROM_ISR()
#define taskEXIT_CRITICAL() portEXIT_CRITICAL()
#define taskEXIT_CRITICAL_FROM_ISR(x) portCLEAR_INTERRUPT_MASK_FROM_ISR( x )
#define taskDISABLE_INTERRUPTS() portDISABLE_INTERRUPTS()
#define taskENABLE_INTERRUPTS() portENABLE_INTERRUPTS()
#define taskSCHEDULER_SUSPENDED ( ( BaseType_t ) 0 )
#define taskSCHEDULER_NOT_STARTED ( ( BaseType_t ) 1 )
#define taskSCHEDULER_RUNNING ( ( BaseType_t ) 2 )
    BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
                            const char * const pcName,
                            const uint16_t usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask ) ;
    TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
                                    const char * const pcName,
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer ) ;
void vTaskAllocateMPURegions( TaskHandle_t xTask,
                              const MemoryRegion_t * const pxRegions ) ;
void vTaskDelete( TaskHandle_t xTaskToDelete ) ;
void vTaskDelay( const TickType_t xTicksToDelay ) ;
BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                            const TickType_t xTimeIncrement ) ;
#define vTaskDelayUntil(pxPreviousWakeTime,xTimeIncrement) { ( void ) xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement ); }
BaseType_t xTaskAbortDelay( TaskHandle_t xTask ) ;
UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask ) ;
UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask ) ;
eTaskState eTaskGetState( TaskHandle_t xTask ) ;
void vTaskGetInfo( TaskHandle_t xTask,
                   TaskStatus_t * pxTaskStatus,
                   BaseType_t xGetFreeStackSpace,
                   eTaskState eState ) ;
void vTaskPrioritySet( TaskHandle_t xTask,
                       UBaseType_t uxNewPriority ) ;
void vTaskSuspend( TaskHandle_t xTaskToSuspend ) ;
void vTaskResume( TaskHandle_t xTaskToResume ) ;
BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) ;
void vTaskStartScheduler( void ) ;
void vTaskEndScheduler( void ) ;
void vTaskSuspendAll( void ) ;
BaseType_t xTaskResumeAll( void ) ;
TickType_t xTaskGetTickCount( void ) ;
TickType_t xTaskGetTickCountFromISR( void ) ;
UBaseType_t uxTaskGetNumberOfTasks( void ) ;
char * pcTaskGetName( TaskHandle_t xTaskToQuery ) ;
TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) ;
UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) ;
uint16_t uxTaskGetStackHighWaterMark2( TaskHandle_t xTask ) ;
    void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
                                            BaseType_t xIndex,
                                            void * pvValue ) ;
    void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
                                               BaseType_t xIndex ) ;
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        uint32_t * pulIdleTaskStackSize );
BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
                                         void * pvParameter ) ;
TaskHandle_t xTaskGetIdleTaskHandle( void ) ;
UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
                                  const UBaseType_t uxArraySize,
                                  configRUN_TIME_COUNTER_TYPE * const pulTotalRunTime ) ;
void vTaskList( char * pcWriteBuffer ) ;
void vTaskGetRunTimeStats( char * pcWriteBuffer ) ;
configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimeCounter( void ) ;
configRUN_TIME_COUNTER_TYPE ulTaskGetIdleRunTimePercent( void ) ;
BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                               UBaseType_t uxIndexToNotify,
                               uint32_t ulValue,
                               eNotifyAction eAction,
                               uint32_t * pulPreviousNotificationValue ) ;
#define xTaskNotify(xTaskToNotify,ulValue,eAction) xTaskGenericNotify( ( xTaskToNotify ), ( tskDEFAULT_INDEX_TO_NOTIFY ), ( ulValue ), ( eAction ), NULL )
#define xTaskNotifyIndexed(xTaskToNotify,uxIndexToNotify,ulValue,eAction) xTaskGenericNotify( ( xTaskToNotify ), ( uxIndexToNotify ), ( ulValue ), ( eAction ), NULL )
#define xTaskNotifyAndQuery(xTaskToNotify,ulValue,eAction,pulPreviousNotifyValue) xTaskGenericNotify( ( xTaskToNotify ), ( tskDEFAULT_INDEX_TO_NOTIFY ), ( ulValue ), ( eAction ), ( pulPreviousNotifyValue ) )
#define xTaskNotifyAndQueryIndexed(xTaskToNotify,uxIndexToNotify,ulValue,eAction,pulPreviousNotifyValue) xTaskGenericNotify( ( xTaskToNotify ), ( uxIndexToNotify ), ( ulValue ), ( eAction ), ( pulPreviousNotifyValue ) )
BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
                                      UBaseType_t uxIndexToNotify,
                                      uint32_t ulValue,
                                      eNotifyAction eAction,
                                      uint32_t * pulPreviousNotificationValue,
                                      BaseType_t * pxHigherPriorityTaskWoken ) ;
#define xTaskNotifyFromISR(xTaskToNotify,ulValue,eAction,pxHigherPriorityTaskWoken) xTaskGenericNotifyFromISR( ( xTaskToNotify ), ( tskDEFAULT_INDEX_TO_NOTIFY ), ( ulValue ), ( eAction ), NULL, ( pxHigherPriorityTaskWoken ) )
#define xTaskNotifyIndexedFromISR(xTaskToNotify,uxIndexToNotify,ulValue,eAction,pxHigherPriorityTaskWoken) xTaskGenericNotifyFromISR( ( xTaskToNotify ), ( uxIndexToNotify ), ( ulValue ), ( eAction ), NULL, ( pxHigherPriorityTaskWoken ) )
#define xTaskNotifyAndQueryIndexedFromISR(xTaskToNotify,uxIndexToNotify,ulValue,eAction,pulPreviousNotificationValue,pxHigherPriorityTaskWoken) xTaskGenericNotifyFromISR( ( xTaskToNotify ), ( uxIndexToNotify ), ( ulValue ), ( eAction ), ( pulPreviousNotificationValue ), ( pxHigherPriorityTaskWoken ) )
#define xTaskNotifyAndQueryFromISR(xTaskToNotify,ulValue,eAction,pulPreviousNotificationValue,pxHigherPriorityTaskWoken) xTaskGenericNotifyFromISR( ( xTaskToNotify ), ( tskDEFAULT_INDEX_TO_NOTIFY ), ( ulValue ), ( eAction ), ( pulPreviousNotificationValue ), ( pxHigherPriorityTaskWoken ) )
BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                   uint32_t ulBitsToClearOnEntry,
                                   uint32_t ulBitsToClearOnExit,
                                   uint32_t * pulNotificationValue,
                                   TickType_t xTicksToWait ) ;
#define xTaskNotifyWait(ulBitsToClearOnEntry,ulBitsToClearOnExit,pulNotificationValue,xTicksToWait) xTaskGenericNotifyWait( tskDEFAULT_INDEX_TO_NOTIFY, ( ulBitsToClearOnEntry ), ( ulBitsToClearOnExit ), ( pulNotificationValue ), ( xTicksToWait ) )
#define xTaskNotifyWaitIndexed(uxIndexToWaitOn,ulBitsToClearOnEntry,ulBitsToClearOnExit,pulNotificationValue,xTicksToWait) xTaskGenericNotifyWait( ( uxIndexToWaitOn ), ( ulBitsToClearOnEntry ), ( ulBitsToClearOnExit ), ( pulNotificationValue ), ( xTicksToWait ) )
#define xTaskNotifyGive(xTaskToNotify) xTaskGenericNotify( ( xTaskToNotify ), ( tskDEFAULT_INDEX_TO_NOTIFY ), ( 0 ), eIncrement, NULL )
#define xTaskNotifyGiveIndexed(xTaskToNotify,uxIndexToNotify) xTaskGenericNotify( ( xTaskToNotify ), ( uxIndexToNotify ), ( 0 ), eIncrement, NULL )
void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                    UBaseType_t uxIndexToNotify,
                                    BaseType_t * pxHigherPriorityTaskWoken ) ;
#define vTaskNotifyGiveFromISR(xTaskToNotify,pxHigherPriorityTaskWoken) vTaskGenericNotifyGiveFromISR( ( xTaskToNotify ), ( tskDEFAULT_INDEX_TO_NOTIFY ), ( pxHigherPriorityTaskWoken ) );
#define vTaskNotifyGiveIndexedFromISR(xTaskToNotify,uxIndexToNotify,pxHigherPriorityTaskWoken) vTaskGenericNotifyGiveFromISR( ( xTaskToNotify ), ( uxIndexToNotify ), ( pxHigherPriorityTaskWoken ) );
uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                  BaseType_t xClearCountOnExit,
                                  TickType_t xTicksToWait ) ;
#define ulTaskNotifyTake(xClearCountOnExit,xTicksToWait) ulTaskGenericNotifyTake( ( tskDEFAULT_INDEX_TO_NOTIFY ), ( xClearCountOnExit ), ( xTicksToWait ) )
#define ulTaskNotifyTakeIndexed(uxIndexToWaitOn,xClearCountOnExit,xTicksToWait) ulTaskGenericNotifyTake( ( uxIndexToWaitOn ), ( xClearCountOnExit ), ( xTicksToWait ) )
BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                         UBaseType_t uxIndexToClear ) ;
#define xTaskNotifyStateClear(xTask) xTaskGenericNotifyStateClear( ( xTask ), ( tskDEFAULT_INDEX_TO_NOTIFY ) )
#define xTaskNotifyStateClearIndexed(xTask,uxIndexToClear) xTaskGenericNotifyStateClear( ( xTask ), ( uxIndexToClear ) )
uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                        UBaseType_t uxIndexToClear,
                                        uint32_t ulBitsToClear ) ;
#define ulTaskNotifyValueClear(xTask,ulBitsToClear) ulTaskGenericNotifyValueClear( ( xTask ), ( tskDEFAULT_INDEX_TO_NOTIFY ), ( ulBitsToClear ) )
#define ulTaskNotifyValueClearIndexed(xTask,uxIndexToClear,ulBitsToClear) ulTaskGenericNotifyValueClear( ( xTask ), ( uxIndexToClear ), ( ulBitsToClear ) )
void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) ;
BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait ) ;
BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp ) ;
BaseType_t xTaskIncrementTick( void ) ;
void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait ) ;
void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait ) ;
void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                      TickType_t xTicksToWait,
                                      const BaseType_t xWaitIndefinitely ) ;
BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) ;
void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue ) ;
 void vTaskSwitchContext( void ) ;
TickType_t uxTaskResetEventItemValue( void ) ;
TaskHandle_t xTaskGetCurrentTaskHandle( void ) ;
void vTaskMissedYield( void ) ;
BaseType_t xTaskGetSchedulerState( void ) ;
BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) ;
BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) ;
void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                          UBaseType_t uxHighestPriorityWaitingTask ) ;
UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) ;
void vTaskSetTaskNumber( TaskHandle_t xTask,
                         const UBaseType_t uxHandle ) ;
void vTaskStepTick( const TickType_t xTicksToJump ) ;
eSleepModeStatus eTaskConfirmSleepModeStatus( void ) ;
TaskHandle_t pvTaskIncrementMutexHeldCount( void ) ;
void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut ) ;
#define FURI_WARN_UNUSED __attribute__((warn_unused_result))
#define FURI_IS_IRQ_MASKED() (__get_PRIMASK() != 0U)
#define FURI_IS_IRQ_MODE() (__get_IPSR() != 0U)
#define FURI_IS_ISR() (FURI_IS_IRQ_MODE() || FURI_IS_IRQ_MASKED())
#define FURI_CRITICAL_ENTER() uint32_t __isrm = 0; bool __from_isr = FURI_IS_ISR(); bool __kernel_running = (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING); if(__from_isr) { __isrm = taskENTER_CRITICAL_FROM_ISR(); } else if(__kernel_running) { taskENTER_CRITICAL(); } else { __disable_irq(); }
#define FURI_CRITICAL_EXIT() if(__from_isr) { taskEXIT_CRITICAL_FROM_ISR(__isrm); } else if(__kernel_running) { taskEXIT_CRITICAL(); } else { __enable_irq(); }
       
       
typedef enum {
    FuriWaitForever = 0xFFFFFFFFU,
} FuriWait;
typedef enum {
    FuriFlagWaitAny = 0x00000000U,
    FuriFlagWaitAll = 0x00000001U,
    FuriFlagNoClear = 0x00000002U,
    FuriFlagError = 0x80000000U,
    FuriFlagErrorUnknown = 0xFFFFFFFFU,
    FuriFlagErrorTimeout = 0xFFFFFFFEU,
    FuriFlagErrorResource = 0xFFFFFFFDU,
    FuriFlagErrorParameter = 0xFFFFFFFCU,
    FuriFlagErrorISR = 0xFFFFFFFAU,
} FuriFlag;
typedef enum {
    FuriStatusOk = 0,
    FuriStatusError =
        -1,
    FuriStatusErrorTimeout = -2,
    FuriStatusErrorResource = -3,
    FuriStatusErrorParameter = -4,
    FuriStatusErrorNoMemory =
        -5,
    FuriStatusErrorISR =
        -6,
    FuriStatusReserved = 0x7FFFFFFF
} FuriStatus;
typedef void FuriEventFlag;
FuriEventFlag* furi_event_flag_alloc();
void furi_event_flag_free(FuriEventFlag* instance);
uint32_t furi_event_flag_set(FuriEventFlag* instance, uint32_t flags);
uint32_t furi_event_flag_clear(FuriEventFlag* instance, uint32_t flags);
uint32_t furi_event_flag_get(FuriEventFlag* instance);
uint32_t furi_event_flag_wait(
    FuriEventFlag* instance,
    uint32_t flags,
    uint32_t options,
    uint32_t timeout);
       
_Bool furi_kernel_is_irq_or_masked();
int32_t furi_kernel_lock();
int32_t furi_kernel_unlock();
int32_t furi_kernel_restore_lock(int32_t lock);
uint32_t furi_kernel_get_tick_frequency();
void furi_delay_tick(uint32_t ticks);
FuriStatus furi_delay_until_tick(uint32_t tick);
uint32_t furi_get_tick(void);
uint32_t furi_ms_to_ticks(uint32_t milliseconds);
void furi_delay_ms(uint32_t milliseconds);
void furi_delay_us(uint32_t microseconds);
       
typedef enum {
    FuriLogLevelDefault = 0,
    FuriLogLevelNone = 1,
    FuriLogLevelError = 2,
    FuriLogLevelWarn = 3,
    FuriLogLevelInfo = 4,
    FuriLogLevelDebug = 5,
    FuriLogLevelTrace = 6,
} FuriLogLevel;
#define FURI_LOG_CLR(clr) "\033[0;" clr "m"
#define FURI_LOG_CLR_RESET "\033[0m"
#define FURI_LOG_CLR_BLACK "30"
#define FURI_LOG_CLR_RED "31"
#define FURI_LOG_CLR_GREEN "32"
#define FURI_LOG_CLR_BROWN "33"
#define FURI_LOG_CLR_BLUE "34"
#define FURI_LOG_CLR_PURPLE "35"
#define FURI_LOG_CLR_E FURI_LOG_CLR(FURI_LOG_CLR_RED)
#define FURI_LOG_CLR_W FURI_LOG_CLR(FURI_LOG_CLR_BROWN)
#define FURI_LOG_CLR_I FURI_LOG_CLR(FURI_LOG_CLR_GREEN)
#define FURI_LOG_CLR_D FURI_LOG_CLR(FURI_LOG_CLR_BLUE)
#define FURI_LOG_CLR_T FURI_LOG_CLR(FURI_LOG_CLR_PURPLE)
typedef void (*FuriLogPuts)(const char* data);
typedef uint32_t (*FuriLogTimestamp)(void);
void furi_log_init();
void furi_log_print_format(FuriLogLevel level, const char* tag, const char* format, ...)
    ;
void furi_log_set_level(FuriLogLevel level);
FuriLogLevel furi_log_get_level();
void furi_log_set_puts(FuriLogPuts puts);
void furi_log_set_timestamp(FuriLogTimestamp timestamp);
#define FURI_LOG_E(tag,format,...) furi_log_print_format(FuriLogLevelError, tag, format, ##__VA_ARGS__)
#define FURI_LOG_W(tag,format,...) furi_log_print_format(FuriLogLevelWarn, tag, format, ##__VA_ARGS__)
#define FURI_LOG_I(tag,format,...) furi_log_print_format(FuriLogLevelInfo, tag, format, ##__VA_ARGS__)
#define FURI_LOG_D(tag,format,...) furi_log_print_format(FuriLogLevelDebug, tag, format, ##__VA_ARGS__)
#define FURI_LOG_T(tag,format,...) furi_log_print_format(FuriLogLevelTrace, tag, format, ##__VA_ARGS__)
       
#define FURI_MEMMGR_GUARD 1
size_t memmgr_get_free_heap(void);
size_t memmgr_get_total_heap(void);
size_t memmgr_get_minimum_free_heap(void);
void* aligned_malloc(size_t size, size_t alignment);
void aligned_free(void* p);
void* memmgr_alloc_from_pool(size_t size);
size_t memmgr_pool_get_free(void);
size_t memmgr_pool_get_max_block(void);
       
       
typedef enum {
    FuriThreadStateStopped,
    FuriThreadStateStarting,
    FuriThreadStateRunning,
} FuriThreadState;
typedef enum {
    FuriThreadPriorityNone = 0,
    FuriThreadPriorityIdle = 1,
    FuriThreadPriorityLowest = 14,
    FuriThreadPriorityLow = 15,
    FuriThreadPriorityNormal = 16,
    FuriThreadPriorityHigh = 17,
    FuriThreadPriorityHighest = 18,
    FuriThreadPriorityIsr = 32,
} FuriThreadPriority;
typedef struct FuriThread FuriThread;
typedef void* FuriThreadId;
typedef int32_t (*FuriThreadCallback)(void* context);
typedef void (*FuriThreadStdoutWriteCallback)(const char* data, size_t size);
typedef void (*FuriThreadStateCallback)(FuriThreadState state, void* context);
FuriThread* furi_thread_alloc();
FuriThread* furi_thread_alloc_ex(
    const char* name,
    uint32_t stack_size,
    FuriThreadCallback callback,
    void* context);
void furi_thread_free(FuriThread* thread);
void furi_thread_set_name(FuriThread* thread, const char* name);
void furi_thread_mark_as_service(FuriThread* thread);
void furi_thread_set_stack_size(FuriThread* thread, size_t stack_size);
void furi_thread_set_callback(FuriThread* thread, FuriThreadCallback callback);
void furi_thread_set_context(FuriThread* thread, void* context);
void furi_thread_set_priority(FuriThread* thread, FuriThreadPriority priority);
void furi_thread_set_state_callback(FuriThread* thread, FuriThreadStateCallback callback);
void furi_thread_set_state_context(FuriThread* thread, void* context);
FuriThreadState furi_thread_get_state(FuriThread* thread);
void furi_thread_start(FuriThread* thread);
_Bool furi_thread_join(FuriThread* thread);
FuriThreadId furi_thread_get_id(FuriThread* thread);
void furi_thread_enable_heap_trace(FuriThread* thread);
void furi_thread_disable_heap_trace(FuriThread* thread);
size_t furi_thread_get_heap_size(FuriThread* thread);
int32_t furi_thread_get_return_code(FuriThread* thread);
FuriThreadId furi_thread_get_current_id();
FuriThread* furi_thread_get_current();
void furi_thread_yield();
uint32_t furi_thread_flags_set(FuriThreadId thread_id, uint32_t flags);
uint32_t furi_thread_flags_clear(uint32_t flags);
uint32_t furi_thread_flags_get(void);
uint32_t furi_thread_flags_wait(uint32_t flags, uint32_t options, uint32_t timeout);
uint32_t furi_thread_enumerate(FuriThreadId* thread_array, uint32_t array_items);
const char* furi_thread_get_name(FuriThreadId thread_id);
uint32_t furi_thread_get_stack_space(FuriThreadId thread_id);
FuriThreadStdoutWriteCallback furi_thread_get_stdout_callback();
_Bool furi_thread_set_stdout_callback(FuriThreadStdoutWriteCallback callback);
size_t furi_thread_stdout_write(const char* data, size_t size);
int32_t furi_thread_stdout_flush();
void furi_thread_suspend(FuriThreadId thread_id);
void furi_thread_resume(FuriThreadId thread_id);
_Bool furi_thread_is_suspended(FuriThreadId thread_id);
#define MEMMGR_HEAP_UNKNOWN 0xFFFFFFFF
void memmgr_heap_enable_thread_trace(FuriThreadId taks_handle);
void memmgr_heap_disable_thread_trace(FuriThreadId taks_handle);
size_t memmgr_heap_get_thread_memory(FuriThreadId taks_handle);
size_t memmgr_heap_get_max_free_block();
void memmgr_heap_printf_free_blocks();
       
typedef void FuriMessageQueue;
FuriMessageQueue* furi_message_queue_alloc(uint32_t msg_count, uint32_t msg_size);
void furi_message_queue_free(FuriMessageQueue* instance);
FuriStatus
    furi_message_queue_put(FuriMessageQueue* instance, const void* msg_ptr, uint32_t timeout);
FuriStatus furi_message_queue_get(FuriMessageQueue* instance, void* msg_ptr, uint32_t timeout);
uint32_t furi_message_queue_get_capacity(FuriMessageQueue* instance);
uint32_t furi_message_queue_get_message_size(FuriMessageQueue* instance);
uint32_t furi_message_queue_get_count(FuriMessageQueue* instance);
uint32_t furi_message_queue_get_space(FuriMessageQueue* instance);
FuriStatus furi_message_queue_reset(FuriMessageQueue* instance);
       
typedef enum {
    FuriMutexTypeNormal,
    FuriMutexTypeRecursive,
} FuriMutexType;
typedef void FuriMutex;
FuriMutex* furi_mutex_alloc(FuriMutexType type);
void furi_mutex_free(FuriMutex* instance);
FuriStatus furi_mutex_acquire(FuriMutex* instance, uint32_t timeout);
FuriStatus furi_mutex_release(FuriMutex* instance);
FuriThreadId furi_mutex_get_owner(FuriMutex* instance);
       
typedef void (*FuriPubSubCallback)(const void* message, void* context);
typedef struct FuriPubSub FuriPubSub;
typedef struct FuriPubSubSubscription FuriPubSubSubscription;
FuriPubSub* furi_pubsub_alloc();
void furi_pubsub_free(FuriPubSub* pubsub);
FuriPubSubSubscription*
    furi_pubsub_subscribe(FuriPubSub* pubsub, FuriPubSubCallback callback, void* callback_context);
void furi_pubsub_unsubscribe(FuriPubSub* pubsub, FuriPubSubSubscription* pubsub_subscription);
void furi_pubsub_publish(FuriPubSub* pubsub, void* message);
       
void furi_record_init();
_Bool furi_record_exists(const char* name);
void furi_record_create(const char* name, void* data);
_Bool furi_record_destroy(const char* name);
 void* furi_record_open(const char* name);
void furi_record_close(const char* name);
       
typedef void FuriSemaphore;
FuriSemaphore* furi_semaphore_alloc(uint32_t max_count, uint32_t initial_count);
void furi_semaphore_free(FuriSemaphore* instance);
FuriStatus furi_semaphore_acquire(FuriSemaphore* instance, uint32_t timeout);
FuriStatus furi_semaphore_release(FuriSemaphore* instance);
uint32_t furi_semaphore_get_count(FuriSemaphore* instance);
       
typedef void (*FuriTimerCallback)(void* context);
typedef enum {
    FuriTimerTypeOnce = 0,
    FuriTimerTypePeriodic = 1
} FuriTimerType;
typedef void FuriTimer;
FuriTimer* furi_timer_alloc(FuriTimerCallback func, FuriTimerType type, void* context);
void furi_timer_free(FuriTimer* instance);
FuriStatus furi_timer_start(FuriTimer* instance, uint32_t ticks);
FuriStatus furi_timer_stop(FuriTimer* instance);
uint32_t furi_timer_is_running(FuriTimer* instance);
       
typedef struct {
    void* value;
    size_t size;
    FuriMutex* mutex;
} ValueMutex;
_Bool init_mutex(ValueMutex* valuemutex, void* value, size_t size);
_Bool delete_mutex(ValueMutex* valuemutex);
void* acquire_mutex(ValueMutex* valuemutex, uint32_t timeout);
static inline void* acquire_mutex_block(ValueMutex* valuemutex) {
    return acquire_mutex(valuemutex, FuriWaitForever);
}
#define with_value_mutex(value_mutex,function_body) { void* p = acquire_mutex_block(value_mutex); furi_check(p); ({ void __fn__ function_body __fn__; })(p); release_mutex(value_mutex, p); }
_Bool release_mutex(ValueMutex* valuemutex, const void* value);
_Bool read_mutex(ValueMutex* valuemutex, void* data, size_t len, uint32_t timeout);
_Bool write_mutex(ValueMutex* valuemutex, void* data, size_t len, uint32_t timeout);
inline static _Bool write_mutex_block(ValueMutex* valuemutex, void* data, size_t len) {
    return write_mutex(valuemutex, data, len, FuriWaitForever);
}
inline static _Bool read_mutex_block(ValueMutex* valuemutex, void* data, size_t len) {
    return read_mutex(valuemutex, data, len, FuriWaitForever);
}
       
#define MSTARLIB_MACRO_H 
#define _CTYPE_H_ 

int isalnum (int __c);
int isalpha (int __c);
int iscntrl (int __c);
int isdigit (int __c);
int isgraph (int __c);
int islower (int __c);
int isprint (int __c);
int ispunct (int __c);
int isspace (int __c);
int isupper (int __c);
int isxdigit (int __c);
int tolower (int __c);
int toupper (int __c);
int isblank (int __c);
int isascii (int __c);
int toascii (int __c);
#define _tolower(__c) ((unsigned char)(__c) - 'A' + 'a')
#define _toupper(__c) ((unsigned char)(__c) - 'a' + 'A')
extern int isalnum_l (int __c, locale_t __l);
extern int isalpha_l (int __c, locale_t __l);
extern int isblank_l (int __c, locale_t __l);
extern int iscntrl_l (int __c, locale_t __l);
extern int isdigit_l (int __c, locale_t __l);
extern int isgraph_l (int __c, locale_t __l);
extern int islower_l (int __c, locale_t __l);
extern int isprint_l (int __c, locale_t __l);
extern int ispunct_l (int __c, locale_t __l);
extern int isspace_l (int __c, locale_t __l);
extern int isupper_l (int __c, locale_t __l);
extern int isxdigit_l(int __c, locale_t __l);
extern int tolower_l (int __c, locale_t __l);
extern int toupper_l (int __c, locale_t __l);
extern int isascii_l (int __c, locale_t __l);
extern int toascii_l (int __c, locale_t __l);
#define _U 01
#define _L 02
#define _N 04
#define _S 010
#define _P 020
#define _C 040
#define _X 0100
#define _B 0200
extern const char _ctype_[];
#define __locale_ctype_ptr() _ctype_
#define __CTYPE_PTR (__locale_ctype_ptr ())
#define __ctype_lookup(__c) ((__CTYPE_PTR+sizeof(""[__c]))[(int)(__c)])
#define isalpha(__c) (__ctype_lookup(__c)&(_U|_L))
#define isupper(__c) ((__ctype_lookup(__c)&(_U|_L))==_U)
#define islower(__c) ((__ctype_lookup(__c)&(_U|_L))==_L)
#define isdigit(__c) (__ctype_lookup(__c)&_N)
#define isxdigit(__c) (__ctype_lookup(__c)&(_X|_N))
#define isspace(__c) (__ctype_lookup(__c)&_S)
#define ispunct(__c) (__ctype_lookup(__c)&_P)
#define isalnum(__c) (__ctype_lookup(__c)&(_U|_L|_N))
#define isprint(__c) (__ctype_lookup(__c)&(_P|_U|_L|_N|_B))
#define isgraph(__c) (__ctype_lookup(__c)&(_P|_U|_L|_N))
#define iscntrl(__c) (__ctype_lookup(__c)&_C)
#define isblank(__c) __extension__ ({ __typeof__ (__c) __x = (__c); (__ctype_lookup(__x)&_B) || (int) (__x) == '\t';})
static inline const char *
__locale_ctype_ptr_l(locale_t _l)
{
 (void)_l;
 return _ctype_;
}
#define __ctype_lookup_l(__c,__l) ((__locale_ctype_ptr_l(__l)+sizeof(""[__c]))[(int)(__c)])
#define isalpha_l(__c,__l) (__ctype_lookup_l(__c,__l)&(_U|_L))
#define isupper_l(__c,__l) ((__ctype_lookup_l(__c,__l)&(_U|_L))==_U)
#define islower_l(__c,__l) ((__ctype_lookup_l(__c,__l)&(_U|_L))==_L)
#define isdigit_l(__c,__l) (__ctype_lookup_l(__c,__l)&_N)
#define isxdigit_l(__c,__l) (__ctype_lookup_l(__c,__l)&(_X|_N))
#define isspace_l(__c,__l) (__ctype_lookup_l(__c,__l)&_S)
#define ispunct_l(__c,__l) (__ctype_lookup_l(__c,__l)&_P)
#define isalnum_l(__c,__l) (__ctype_lookup_l(__c,__l)&(_U|_L|_N))
#define isprint_l(__c,__l) (__ctype_lookup_l(__c,__l)&(_P|_U|_L|_N|_B))
#define isgraph_l(__c,__l) (__ctype_lookup_l(__c,__l)&(_P|_U|_L|_N))
#define iscntrl_l(__c,__l) (__ctype_lookup_l(__c,__l)&_C)
#define isblank_l(__c,__l) __extension__ ({ __typeof__ (__c) __x = (__c); (__ctype_lookup_l(__x,__l)&_B) || (int) (__x) == '\t';})
#define isascii(__c) ((unsigned)(__c)<=0177)
#define toascii(__c) ((__c)&0177)
#define isascii_l(__c,__l) ((__l),(unsigned)(__c)<=0177)
#define toascii_l(__c,__l) ((__l),(__c)&0177)
#define toupper(__c) __extension__ ({ __typeof__ (__c) __x = (__c); islower (__x) ? (int) __x - 'a' + 'A' : (int) __x;})
#define tolower(__c) __extension__ ({ __typeof__ (__c) __x = (__c); isupper (__x) ? (int) __x - 'A' + 'a' : (int) __x;})

#undef assert
#define assert(__e) ((void)0)
void __assert (const char *, int, const char *)
     ;
void __assert_func (const char *, int, const char *, const char *)
     ;
#define static_assert _Static_assert
#define M_USE_STDIO 1
#define M_USE_STDARG 1
#define M_CORE_VERSION_MAJOR 0
#define M_CORE_VERSION_MINOR 6
#define M_CORE_VERSION_PATCHLEVEL 0
#define M_ASSUME(x) (! __builtin_constant_p (!!(x) || !(x)) || (x) ? (void) 0 : __builtin_unreachable())
#define M_LIKELY(cond) __builtin_expect(!!(cond), 1)
#define M_UNLIKELY(cond) __builtin_expect(!!(cond), 0)
#define M_ALIGN_FOR_CACHELINE_EXCLUSION 64
#define M_ATTR_DEPRECATED __attribute__((deprecated))
#define M_ATTR_EXTENSION __extension__
#define M_BEGIN_PROTECTED_CODE _Pragma("GCC diagnostic push") _Pragma("GCC diagnostic ignored \"-Wformat-nonliteral\"")
#define M_END_PROTECTED_CODE _Pragma("GCC diagnostic pop")

#pragma GCC diagnostic push

#pragma GCC diagnostic ignored "-Wformat-nonliteral"

#define M_MEMORY_ALLOC(type) malloc (sizeof (type))
#define M_MEMORY_DEL(ptr) free(ptr)
#define M_MEMORY_REALLOC(type,ptr,n) (M_UNLIKELY ((n) > SIZE_MAX / sizeof(type)) ? NULL : realloc ((ptr), (n)*sizeof (type)))
#define M_MEMORY_FREE(ptr) free(ptr)
#define M_ASSERT(expr) assert(expr)
#define M_ASSERT_SLOW(n) (void) 0
#define M_ASSERT_INIT(expr,object) { if (!(expr)) { fprintf(stderr, "ERROR(M*LIB): Cannot initialize %s at (%s:%s:%d): %s\n", (object), __FILE__, __func__, __LINE__, #expr); abort(); } } while (0)
#define M_ASSERT_INDEX(index,max) do { M_ASSERT((index) < (max)); } while (0)
#define M_STATIC_FAILURE(error,msg) static_assert(false, #error ": " msg);
#define M_STATIC_ASSERT(cond,error,msg) M_ATTR_EXTENSION ({ static_assert(cond, #error ": " msg); })
#define M_MAX_NB_ARGUMENT 52
#define M_C2I(a,...) a ## __VA_ARGS__
#define M_C(a,...) M_C2I(a, __VA_ARGS__)
#define M_C3I(a,b,...) a ## b ## __VA_ARGS__
#define M_C3(a,b,...) M_C3I(a ,b, __VA_ARGS__)
#define M_C4I(a,b,c,...) a ## b ## c ## __VA_ARGS__
#define M_C4(a,b,c,...) M_C4I(a ,b, c, __VA_ARGS__)
#define M_INC(x) M_C(M_INC_, x)
#define M_INC_0 1
#define M_INC_1 2
#define M_INC_2 3
#define M_INC_3 4
#define M_INC_4 5
#define M_INC_5 6
#define M_INC_6 7
#define M_INC_7 8
#define M_INC_8 9
#define M_INC_9 10
#define M_INC_10 11
#define M_INC_11 12
#define M_INC_12 13
#define M_INC_13 14
#define M_INC_14 15
#define M_INC_15 16
#define M_INC_16 17
#define M_INC_17 18
#define M_INC_18 19
#define M_INC_19 20
#define M_INC_20 21
#define M_INC_21 22
#define M_INC_22 23
#define M_INC_23 24
#define M_INC_24 25
#define M_INC_25 26
#define M_INC_26 27
#define M_INC_27 28
#define M_INC_28 29
#define M_INC_29 30
#define M_INC_30 31
#define M_INC_31 32
#define M_INC_32 33
#define M_INC_33 34
#define M_INC_34 35
#define M_INC_35 36
#define M_INC_36 37
#define M_INC_37 38
#define M_INC_38 39
#define M_INC_39 40
#define M_INC_40 41
#define M_INC_41 42
#define M_INC_42 43
#define M_INC_43 44
#define M_INC_44 45
#define M_INC_45 46
#define M_INC_46 47
#define M_INC_47 48
#define M_INC_48 49
#define M_INC_49 50
#define M_INC_50 51
#define M_INC_51 52
#define M_INC_52 53
#define M_INC_53 M_OVERFLOW
#define M_INC_M_OVERFLOW M_OVERFLOW
#define M_DEC(x) M_C(M_DEC_, x)
#define M_DEC_M_UNDERFLOW M_UNDERFLOW
#define M_DEC_0 M_UNDERFLOW
#define M_DEC_1 0
#define M_DEC_2 1
#define M_DEC_3 2
#define M_DEC_4 3
#define M_DEC_5 4
#define M_DEC_6 5
#define M_DEC_7 6
#define M_DEC_8 7
#define M_DEC_9 8
#define M_DEC_10 9
#define M_DEC_11 10
#define M_DEC_12 11
#define M_DEC_13 12
#define M_DEC_14 13
#define M_DEC_15 14
#define M_DEC_16 15
#define M_DEC_17 16
#define M_DEC_18 17
#define M_DEC_19 18
#define M_DEC_20 19
#define M_DEC_21 20
#define M_DEC_22 21
#define M_DEC_23 22
#define M_DEC_24 23
#define M_DEC_25 24
#define M_DEC_26 25
#define M_DEC_27 26
#define M_DEC_28 27
#define M_DEC_29 28
#define M_DEC_30 29
#define M_DEC_31 30
#define M_DEC_32 31
#define M_DEC_33 32
#define M_DEC_34 33
#define M_DEC_35 34
#define M_DEC_36 35
#define M_DEC_37 36
#define M_DEC_38 37
#define M_DEC_39 38
#define M_DEC_40 39
#define M_DEC_41 40
#define M_DEC_42 41
#define M_DEC_43 42
#define M_DEC_44 43
#define M_DEC_45 44
#define M_DEC_46 45
#define M_DEC_47 46
#define M_DEC_48 47
#define M_DEC_49 48
#define M_DEC_50 49
#define M_DEC_51 50
#define M_DEC_52 51
#define M_ADD(x,y) M_ADDI(M_C(M_ADDI_, y), x)
#define M_ADDI(f,n) f(n)
#define M_ADDI_0(n) n
#define M_ADDI_1(n) M_INC(n)
#define M_ADDI_2(n) M_INC(M_INC(n))
#define M_ADDI_3(n) M_INC(M_INC(M_INC(n)))
#define M_ADDI_4(n) M_INC(M_INC(M_INC(M_INC(n))))
#define M_ADDI_5(n) M_INC(M_INC(M_INC(M_INC(M_INC(n)))))
#define M_ADDI_6(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))
#define M_ADDI_7(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))
#define M_ADDI_8(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))
#define M_ADDI_9(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))
#define M_ADDI_10(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))
#define M_ADDI_11(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))
#define M_ADDI_12(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))
#define M_ADDI_13(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))
#define M_ADDI_14(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))
#define M_ADDI_15(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))
#define M_ADDI_16(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))
#define M_ADDI_17(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))
#define M_ADDI_18(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))
#define M_ADDI_19(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))
#define M_ADDI_20(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))
#define M_ADDI_21(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))
#define M_ADDI_22(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))
#define M_ADDI_23(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))
#define M_ADDI_24(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))
#define M_ADDI_25(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))
#define M_ADDI_26(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))
#define M_ADDI_27(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))))
#define M_ADDI_28(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))))
#define M_ADDI_29(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))))))
#define M_ADDI_30(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))))))
#define M_ADDI_31(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))))))))
#define M_ADDI_32(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))))))))
#define M_ADDI_33(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))))))))))
#define M_ADDI_34(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))))))))))
#define M_ADDI_35(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))))))))))))
#define M_ADDI_36(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))))))))))))
#define M_ADDI_37(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))))))))))))))
#define M_ADDI_38(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))))))))))))))
#define M_ADDI_39(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))))))))))))))))
#define M_ADDI_40(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))))))))))))))))
#define M_ADDI_41(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))))))))))))))))))
#define M_ADDI_42(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))))))))))))))))))
#define M_ADDI_43(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))))))))))))))))))))
#define M_ADDI_44(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))))))))))))))))))))
#define M_ADDI_45(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))))))))))))))))))))))
#define M_ADDI_46(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))))))))))))))))))))))
#define M_ADDI_47(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))))))))))))))))))))))))
#define M_ADDI_48(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))))))))))))))))))))))))
#define M_ADDI_49(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))))))))))))))))))))))))))
#define M_ADDI_50(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_ADDI_51(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n)))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_ADDI_52(n) M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(M_INC(n))))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_SUB(x,y) M_SUBI(M_C(M_SUBI_, y), x)
#define M_SUBI(f,n) f(n)
#define M_SUBI_0(n) n
#define M_SUBI_1(n) M_DEC(n)
#define M_SUBI_2(n) M_DEC(M_DEC(n))
#define M_SUBI_3(n) M_DEC(M_DEC(M_DEC(n)))
#define M_SUBI_4(n) M_DEC(M_DEC(M_DEC(M_DEC(n))))
#define M_SUBI_5(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))
#define M_SUBI_6(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))
#define M_SUBI_7(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))
#define M_SUBI_8(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))
#define M_SUBI_9(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))
#define M_SUBI_10(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))
#define M_SUBI_11(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))
#define M_SUBI_12(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))
#define M_SUBI_13(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))
#define M_SUBI_14(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))
#define M_SUBI_15(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))
#define M_SUBI_16(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))
#define M_SUBI_17(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))
#define M_SUBI_18(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))
#define M_SUBI_19(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))
#define M_SUBI_20(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))
#define M_SUBI_21(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))
#define M_SUBI_22(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))
#define M_SUBI_23(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))
#define M_SUBI_24(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))
#define M_SUBI_25(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))
#define M_SUBI_26(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))
#define M_SUBI_27(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))))
#define M_SUBI_28(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))))
#define M_SUBI_29(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))))))
#define M_SUBI_30(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))))))
#define M_SUBI_31(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))))))))
#define M_SUBI_32(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))))))))
#define M_SUBI_33(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))))))))))
#define M_SUBI_34(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))))))))))
#define M_SUBI_35(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))))))))))))
#define M_SUBI_36(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))))))))))))
#define M_SUBI_37(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))))))))))))))
#define M_SUBI_38(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))))))))))))))
#define M_SUBI_39(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))))))))))))))))
#define M_SUBI_40(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))))))))))))))))
#define M_SUBI_41(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))))))))))))))))))
#define M_SUBI_42(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))))))))))))))))))
#define M_SUBI_43(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))))))))))))))))))))
#define M_SUBI_44(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))))))))))))))))))))
#define M_SUBI_45(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))))))))))))))))))))))
#define M_SUBI_46(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))))))))))))))))))))))
#define M_SUBI_47(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))))))))))))))))))))))))
#define M_SUBI_48(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))))))))))))))))))))))))
#define M_SUBI_49(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))))))))))))))))))))))))))
#define M_SUBI_50(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_SUBI_51(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n)))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_SUBI_52(n) M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(M_DEC(n))))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_RETI_ARG(f,...) f(__VA_ARGS__)
#define M_RET_ARG(n,...) M_RETI_ARG(M_C(M_RET_ARG, n), __VA_ARGS__)
#define M_RETI_ARG1(_1,...) _1
#define M_RET_ARG1(...) M_RETI_ARG1(__VA_ARGS__,)
#define M_RETI_ARG2(_1,_2,...) _2
#define M_RET_ARG2(...) M_RETI_ARG2(__VA_ARGS__,)
#define M_RETI_ARG3(_1,_2,_3,...) _3
#define M_RET_ARG3(...) M_RETI_ARG3(__VA_ARGS__,)
#define M_RETI_ARG4(_1,_2,_3,_4,...) _4
#define M_RET_ARG4(...) M_RETI_ARG4(__VA_ARGS__,)
#define M_RETI_ARG5(_1,_2,_3,_4,_5,...) _5
#define M_RET_ARG5(...) M_RETI_ARG5(__VA_ARGS__,)
#define M_RETI_ARG6(_1,_2,_3,_4,_5,_6,...) _6
#define M_RET_ARG6(...) M_RETI_ARG6(__VA_ARGS__,)
#define M_RETI_ARG7(_1,_2,_3,_4,_5,_6,_7,...) _7
#define M_RET_ARG7(...) M_RETI_ARG7(__VA_ARGS__,)
#define M_RETI_ARG8(_1,_2,_3,_4,_5,_6,_7,_8,...) _8
#define M_RET_ARG8(...) M_RETI_ARG8(__VA_ARGS__,)
#define M_RETI_ARG9(_1,_2,_3,_4,_5,_6,_7,_8,_9,...) _9
#define M_RET_ARG9(...) M_RETI_ARG9(__VA_ARGS__,)
#define M_RETI_ARG10(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,...) _10
#define M_RET_ARG10(...) M_RETI_ARG10(__VA_ARGS__,)
#define M_RETI_ARG11(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,...) _11
#define M_RET_ARG11(...) M_RETI_ARG11(__VA_ARGS__,)
#define M_RETI_ARG12(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,...) _12
#define M_RET_ARG12(...) M_RETI_ARG12(__VA_ARGS__,)
#define M_RETI_ARG13(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,...) _13
#define M_RET_ARG13(...) M_RETI_ARG13(__VA_ARGS__,)
#define M_RETI_ARG14(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,...) _14
#define M_RET_ARG14(...) M_RETI_ARG14(__VA_ARGS__,)
#define M_RETI_ARG15(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,...) _15
#define M_RET_ARG15(...) M_RETI_ARG15(__VA_ARGS__,)
#define M_RETI_ARG16(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,...) _16
#define M_RET_ARG16(...) M_RETI_ARG16(__VA_ARGS__,)
#define M_RETI_ARG17(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,...) _17
#define M_RET_ARG17(...) M_RETI_ARG17(__VA_ARGS__,)
#define M_RETI_ARG18(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,...) _18
#define M_RET_ARG18(...) M_RETI_ARG18(__VA_ARGS__,)
#define M_RETI_ARG19(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,...) _19
#define M_RET_ARG19(...) M_RETI_ARG19(__VA_ARGS__,)
#define M_RETI_ARG20(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,...) _20
#define M_RET_ARG20(...) M_RETI_ARG20(__VA_ARGS__,)
#define M_RETI_ARG21(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,...) _21
#define M_RET_ARG21(...) M_RETI_ARG21(__VA_ARGS__,)
#define M_RETI_ARG22(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,...) _22
#define M_RET_ARG22(...) M_RETI_ARG22(__VA_ARGS__,)
#define M_RETI_ARG23(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,...) _23
#define M_RET_ARG23(...) M_RETI_ARG23(__VA_ARGS__,)
#define M_RETI_ARG24(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,...) _24
#define M_RET_ARG24(...) M_RETI_ARG24(__VA_ARGS__,)
#define M_RETI_ARG25(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,...) _25
#define M_RET_ARG25(...) M_RETI_ARG25(__VA_ARGS__,)
#define M_RETI_ARG26(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,...) _26
#define M_RET_ARG26(...) M_RETI_ARG26(__VA_ARGS__,)
#define M_RETI_ARG27(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,...) _27
#define M_RET_ARG27(...) M_RETI_ARG27(__VA_ARGS__,)
#define M_RETI_ARG28(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,...) _28
#define M_RET_ARG28(...) M_RETI_ARG28(__VA_ARGS__,)
#define M_RETI_ARG29(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,...) _29
#define M_RET_ARG29(...) M_RETI_ARG29(__VA_ARGS__,)
#define M_RETI_ARG30(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,...) _30
#define M_RET_ARG30(...) M_RETI_ARG30(__VA_ARGS__,)
#define M_RETI_ARG31(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,...) _31
#define M_RET_ARG31(...) M_RETI_ARG31(__VA_ARGS__,)
#define M_RETI_ARG32(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,...) _32
#define M_RET_ARG32(...) M_RETI_ARG32(__VA_ARGS__,)
#define M_RETI_ARG33(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,...) _33
#define M_RET_ARG33(...) M_RETI_ARG33(__VA_ARGS__,)
#define M_RETI_ARG34(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,...) _34
#define M_RET_ARG34(...) M_RETI_ARG34(__VA_ARGS__,)
#define M_RETI_ARG35(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,...) _35
#define M_RET_ARG35(...) M_RETI_ARG35(__VA_ARGS__,)
#define M_RETI_ARG36(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,...) _36
#define M_RET_ARG36(...) M_RETI_ARG36(__VA_ARGS__,)
#define M_RETI_ARG37(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,...) _37
#define M_RET_ARG37(...) M_RETI_ARG37(__VA_ARGS__,)
#define M_RETI_ARG38(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,...) _38
#define M_RET_ARG38(...) M_RETI_ARG38(__VA_ARGS__,)
#define M_RETI_ARG39(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,...) _39
#define M_RET_ARG39(...) M_RETI_ARG39(__VA_ARGS__,)
#define M_RETI_ARG40(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,...) _40
#define M_RET_ARG40(...) M_RETI_ARG40(__VA_ARGS__,)
#define M_RETI_ARG41(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,...) _41
#define M_RET_ARG41(...) M_RETI_ARG41(__VA_ARGS__,)
#define M_RETI_ARG42(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,...) _42
#define M_RET_ARG42(...) M_RETI_ARG42(__VA_ARGS__,)
#define M_RETI_ARG43(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,...) _43
#define M_RET_ARG43(...) M_RETI_ARG43(__VA_ARGS__,)
#define M_RETI_ARG44(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,...) _44
#define M_RET_ARG44(...) M_RETI_ARG44(__VA_ARGS__,)
#define M_RETI_ARG45(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,...) _45
#define M_RET_ARG45(...) M_RETI_ARG45(__VA_ARGS__,)
#define M_RETI_ARG46(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,...) _46
#define M_RET_ARG46(...) M_RETI_ARG46(__VA_ARGS__,)
#define M_RETI_ARG47(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,...) _47
#define M_RET_ARG47(...) M_RETI_ARG47(__VA_ARGS__,)
#define M_RETI_ARG48(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,...) _48
#define M_RET_ARG48(...) M_RETI_ARG48(__VA_ARGS__,)
#define M_RETI_ARG49(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,...) _49
#define M_RET_ARG49(...) M_RETI_ARG49(__VA_ARGS__,)
#define M_RETI_ARG50(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,...) _50
#define M_RET_ARG50(...) M_RETI_ARG50(__VA_ARGS__,)
#define M_RETI_ARG51(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,...) _51
#define M_RET_ARG51(...) M_RETI_ARG51(__VA_ARGS__,)
#define M_RETI_ARG52(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,...) _52
#define M_RET_ARG52(...) M_RETI_ARG52(__VA_ARGS__,)
#define M_RETI_ARG53(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,...) _53
#define M_RET_ARG53(...) M_RETI_ARG53(__VA_ARGS__,)
#define M_RETI_ARG54(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,...) _54
#define M_RET_ARG54(...) M_RETI_ARG54(__VA_ARGS__,)
#define M_RETI_ARG55(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,...) _55
#define M_RET_ARG55(...) M_RETI_ARG55(__VA_ARGS__,)
#define M_RETI_ARG56(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,...) _56
#define M_RET_ARG56(...) M_RETI_ARG56(__VA_ARGS__,)
#define M_RETI_ARG57(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,...) _57
#define M_RET_ARG57(...) M_RETI_ARG57(__VA_ARGS__,)
#define M_RETI_ARG58(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,...) _58
#define M_RET_ARG58(...) M_RETI_ARG58(__VA_ARGS__,)
#define M_RETI_ARG59(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,...) _59
#define M_RET_ARG59(...) M_RETI_ARG59(__VA_ARGS__,)
#define M_RETI_ARG60(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,...) _60
#define M_RET_ARG60(...) M_RETI_ARG60(__VA_ARGS__,)
#define M_RETI_ARG61(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,...) _61
#define M_RET_ARG61(...) M_RETI_ARG61(__VA_ARGS__,)
#define M_RETI_ARG62(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,...) _62
#define M_RET_ARG62(...) M_RETI_ARG62(__VA_ARGS__,)
#define M_RETI_ARG63(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,...) _63
#define M_RET_ARG63(...) M_RETI_ARG63(__VA_ARGS__,)
#define M_RETI_ARG64(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,...) _64
#define M_RET_ARG64(...) M_RETI_ARG64(__VA_ARGS__,)
#define M_RETI_ARG65(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,...) _65
#define M_RET_ARG65(...) M_RETI_ARG65(__VA_ARGS__,)
#define M_RETI_ARG66(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,...) _66
#define M_RET_ARG66(...) M_RETI_ARG66(__VA_ARGS__,)
#define M_RETI_ARG67(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,...) _67
#define M_RET_ARG67(...) M_RETI_ARG67(__VA_ARGS__,)
#define M_RETI_ARG68(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,...) _68
#define M_RET_ARG68(...) M_RETI_ARG68(__VA_ARGS__,)
#define M_RETI_ARG69(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,...) _69
#define M_RET_ARG69(...) M_RETI_ARG69(__VA_ARGS__,)
#define M_RETI_ARG70(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,...) _70
#define M_RET_ARG70(...) M_RETI_ARG70(__VA_ARGS__,)
#define M_RETI_ARG71(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,...) _71
#define M_RET_ARG71(...) M_RETI_ARG71(__VA_ARGS__,)
#define M_RETI_ARG72(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,...) _72
#define M_RET_ARG72(...) M_RETI_ARG72(__VA_ARGS__,)
#define M_RETI_ARG73(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,...) _73
#define M_RET_ARG73(...) M_RETI_ARG73(__VA_ARGS__,)
#define M_RETI_ARG74(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,...) _74
#define M_RET_ARG74(...) M_RETI_ARG74(__VA_ARGS__,)
#define M_RETI_ARG75(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,...) _75
#define M_RET_ARG75(...) M_RETI_ARG75(__VA_ARGS__,)
#define M_RETI_ARG76(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,...) _76
#define M_RET_ARG76(...) M_RETI_ARG76(__VA_ARGS__,)
#define M_PAIR_1(a,b) a
#define M_PAIR_2(a,b) b
#define M_SKIPI(f,...) f(__VA_ARGS__)
#define M_SKIP_ARGS(n,...) M_SKIPI(M_C(M_SKIPI_, n), __VA_ARGS__)
#define M_SKIPI_0(...) __VA_ARGS__
#define M_SKIPI_1(_1,...) __VA_ARGS__
#define M_SKIPI_2(_1,_2,...) __VA_ARGS__
#define M_SKIPI_3(_1,_2,_3,...) __VA_ARGS__
#define M_SKIPI_4(_1,_2,_3,_4,...) __VA_ARGS__
#define M_SKIPI_5(_1,_2,_3,_4,_5,...) __VA_ARGS__
#define M_SKIPI_6(_1,_2,_3,_4,_5,_6,...) __VA_ARGS__
#define M_SKIPI_7(_1,_2,_3,_4,_5,_6,_7,...) __VA_ARGS__
#define M_SKIPI_8(_1,_2,_3,_4,_5,_6,_7,_8,...) __VA_ARGS__
#define M_SKIPI_9(_1,_2,_3,_4,_5,_6,_7,_8,_9,...) __VA_ARGS__
#define M_SKIPI_10(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,...) __VA_ARGS__
#define M_SKIPI_11(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,...) __VA_ARGS__
#define M_SKIPI_12(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,...) __VA_ARGS__
#define M_SKIPI_13(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,...) __VA_ARGS__
#define M_SKIPI_14(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,...) __VA_ARGS__
#define M_SKIPI_15(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,...) __VA_ARGS__
#define M_SKIPI_16(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,...) __VA_ARGS__
#define M_SKIPI_17(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,...) __VA_ARGS__
#define M_SKIPI_18(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,...) __VA_ARGS__
#define M_SKIPI_19(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,...) __VA_ARGS__
#define M_SKIPI_20(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,...) __VA_ARGS__
#define M_SKIPI_21(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,...) __VA_ARGS__
#define M_SKIPI_22(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,...) __VA_ARGS__
#define M_SKIPI_23(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,...) __VA_ARGS__
#define M_SKIPI_24(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,...) __VA_ARGS__
#define M_SKIPI_25(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,...) __VA_ARGS__
#define M_SKIPI_26(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,...) __VA_ARGS__
#define M_SKIPI_27(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,...) __VA_ARGS__
#define M_SKIPI_28(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,...) __VA_ARGS__
#define M_SKIPI_29(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,...) __VA_ARGS__
#define M_SKIPI_30(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,...) __VA_ARGS__
#define M_SKIPI_31(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,...) __VA_ARGS__
#define M_SKIPI_32(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,...) __VA_ARGS__
#define M_SKIPI_33(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,...) __VA_ARGS__
#define M_SKIPI_34(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,...) __VA_ARGS__
#define M_SKIPI_35(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,...) __VA_ARGS__
#define M_SKIPI_36(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,...) __VA_ARGS__
#define M_SKIPI_37(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,...) __VA_ARGS__
#define M_SKIPI_38(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,...) __VA_ARGS__
#define M_SKIPI_39(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,...) __VA_ARGS__
#define M_SKIPI_40(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,...) __VA_ARGS__
#define M_SKIPI_41(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,...) __VA_ARGS__
#define M_SKIPI_42(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,...) __VA_ARGS__
#define M_SKIPI_43(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,...) __VA_ARGS__
#define M_SKIPI_44(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,...) __VA_ARGS__
#define M_SKIPI_45(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,...) __VA_ARGS__
#define M_SKIPI_46(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,...) __VA_ARGS__
#define M_SKIPI_47(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,...) __VA_ARGS__
#define M_SKIPI_48(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,...) __VA_ARGS__
#define M_SKIPI_49(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,...) __VA_ARGS__
#define M_SKIPI_50(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,...) __VA_ARGS__
#define M_SKIPI_51(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,...) __VA_ARGS__
#define M_SKIPI_52(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,...) __VA_ARGS__
#define M_KEEPI(f,...) f(__VA_ARGS__)
#define M_KEEP_ARGS(n,...) M_KEEPI(M_C(M_KEEPI_, n), __VA_ARGS__)
#define M_KEEPI_0(...) 
#define M_KEEPI_1(_1,...) _1
#define M_KEEPI_2(_1,_2,...) _1, _2
#define M_KEEPI_3(_1,_2,_3,...) _1, _2, _3
#define M_KEEPI_4(_1,_2,_3,_4,...) _1, _2, _3, _4
#define M_KEEPI_5(_1,_2,_3,_4,_5,...) _1, _2, _3, _4, _5
#define M_KEEPI_6(_1,_2,_3,_4,_5,_6,...) _1, _2, _3, _4, _5, _6
#define M_KEEPI_7(_1,_2,_3,_4,_5,_6,_7,...) _1, _2, _3, _4, _5, _6, _7
#define M_KEEPI_8(_1,_2,_3,_4,_5,_6,_7,_8,...) _1, _2, _3, _4, _5, _6, _7, _8
#define M_KEEPI_9(_1,_2,_3,_4,_5,_6,_7,_8,_9,...) _1, _2, _3, _4, _5, _6, _7, _8, _9
#define M_KEEPI_10(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10
#define M_KEEPI_11(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11
#define M_KEEPI_12(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12
#define M_KEEPI_13(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13
#define M_KEEPI_14(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14
#define M_KEEPI_15(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15
#define M_KEEPI_16(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16
#define M_KEEPI_17(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17
#define M_KEEPI_18(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18
#define M_KEEPI_19(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19
#define M_KEEPI_20(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20
#define M_KEEPI_21(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21
#define M_KEEPI_22(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22
#define M_KEEPI_23(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23
#define M_KEEPI_24(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24
#define M_KEEPI_25(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25
#define M_KEEPI_26(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26
#define M_KEEPI_27(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27
#define M_KEEPI_28(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28
#define M_KEEPI_29(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29
#define M_KEEPI_30(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30
#define M_KEEPI_31(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31
#define M_KEEPI_32(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32
#define M_KEEPI_33(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33
#define M_KEEPI_34(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34
#define M_KEEPI_35(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35
#define M_KEEPI_36(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36
#define M_KEEPI_37(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37
#define M_KEEPI_38(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38
#define M_KEEPI_39(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39
#define M_KEEPI_40(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40
#define M_KEEPI_41(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41
#define M_KEEPI_42(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42
#define M_KEEPI_43(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43
#define M_KEEPI_44(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44
#define M_KEEPI_45(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45
#define M_KEEPI_46(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46
#define M_KEEPI_47(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47
#define M_KEEPI_48(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48
#define M_KEEPI_49(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49
#define M_KEEPI_50(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50
#define M_KEEPI_51(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51
#define M_KEEPI_52(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,...) _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52
#define M_MID_ARGS(first,len,...) M_MIDI(M_KEEP_ARGS,len, M_SKIP_ARGS(first, __VA_ARGS__))
#define M_MIDI(f,...) f(__VA_ARGS__)
#define M_GET_AT(array,index) M_GETI_AT0(M_C(M_RET_ARG, M_INC(index)), array)
#define M_GETI_AT0(func,array) func ( M_ID array , dummy )
#define M_TOBOOLI_0 1, 0,
#define M_BOOL(x) M_RET_ARG2(M_C(M_TOBOOLI_, x), 1, useless)
#define M_INVI_0 1
#define M_INVI_1 0
#define M_INV(x) M_C(M_INVI_, x)
#define M_ANDI_00 0
#define M_ANDI_01 0
#define M_ANDI_10 0
#define M_ANDI_11 1
#define M_AND(x,y) M_C3(M_ANDI_, x, y)
#define M_ORI_00 0
#define M_ORI_01 1
#define M_ORI_10 1
#define M_ORI_11 1
#define M_OR(x,y) M_C3(M_ORI_, x, y)
#define M_IFI_0(true_c,...) __VA_ARGS__
#define M_IFI_1(true_c,...) true_c
#define M_IF(c) M_C(M_IFI_, M_BOOL(c))
#define M_COMMA_P(...) M_RETI_ARG76(__VA_ARGS__, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, useless)
#define M_AS_STR(x) M_AS_STRI(x)
#define M_AS_STRI(x) #x
#define M_EMPTYI_DETECT(...) ,
#define M_EMPTYI_P_C1(...) M_COMMA_P(M_EMPTYI_DETECT __VA_ARGS__ () )
#define M_EMPTYI_P_C2(...) M_COMMA_P(M_EMPTYI_DETECT __VA_ARGS__)
#define M_EMPTYI_P_C3(...) M_COMMA_P(__VA_ARGS__ () )
#define M_EMPTY_P(...) M_AND(M_EMPTYI_P_C1(__VA_ARGS__), M_INV(M_OR(M_OR(M_EMPTYI_P_C2(__VA_ARGS__), M_COMMA_P(__VA_ARGS__)),M_EMPTYI_P_C3(__VA_ARGS__))))
#define M_DEFERRED_COMMA ,
#define M_IF_EMPTY(...) M_IF(M_EMPTY_P(__VA_ARGS__))
#define M_PARENTHESISI_DETECT1(...) ,
#define M_PARENTHESISI_DETECT2(...) 
#define M_PARENTHESIS_P(...) M_AND(M_AND(M_COMMA_P(M_PARENTHESISI_DETECT1 __VA_ARGS__), M_INV(M_COMMA_P(__VA_ARGS__))), M_EMPTY_P(M_PARENTHESISI_DETECT2 __VA_ARGS__))
#define M_KEYWORD_P(refFunc,testedFunc) M_COMMA_P(M_C4(M_PATTERN_, refFunc, _, testedFunc))
#define M_PATTERN_and_and ,
#define M_PATTERN_or_or ,
#define M_PATTERN_sum_sum ,
#define M_PATTERN_sum_add ,
#define M_PATTERN_add_add ,
#define M_PATTERN_add_sum ,
#define M_PATTERN_product_product ,
#define M_PATTERN_product_mul ,
#define M_PATTERN_bool_bool ,
#define M_PATTERN_char_char ,
#define M_PATTERN_short_short ,
#define M_PATTERN_int_int ,
#define M_PATTERN_long_long ,
#define M_PATTERN_float_float ,
#define M_PATTERN_double_double ,
#define M_PATTERN_void_void ,
#define M_PATTERN_TYPE_TYPE ,
#define M_PATTERN_SUBTYPE_SUBTYPE ,
#define M_PATTERN_IT_TYPE_IT_TYPE ,
#define M_PATTERN_M_UNDERFLOW_M_UNDERFLOW ,
#define M_PATTERN_M_OVERFLOW_M_OVERFLOW ,
#define M_PATTERN_M_OVERFLOW_M_OVERFLOW ,
#define M_PATTERN_SEQUENCE_SEQUENCE ,
#define M_PATTERN_MAP_MAP ,
#define M_PATTERN_KEYVAL_KEYVAL ,
#define M_PATTERN_KEYVAL_PTR_KEYVAL_PTR ,
#define M_PATTERN_priority_priority ,
#define M_DELAY0() 
#define M_DELAY1(...) __VA_ARGS__ M_DELAY0 ()
#define M_DELAY2(...) __VA_ARGS__ M_DELAY1 (M_DELAY0) ()
#define M_DELAY3(...) __VA_ARGS__ M_DELAY2 (M_DELAY0) ()
#define M_DELAY4(...) __VA_ARGS__ M_DELAY3 (M_DELAY0) ()
#define M_DELAY5(...) __VA_ARGS__ M_DELAY4 (M_DELAY0) ()
#define M_DELAY6(...) __VA_ARGS__ M_DELAY5 (M_DELAY0) ()
#define M_DELAY7(...) __VA_ARGS__ M_DELAY6 (M_DELAY0) ()
#define M_DELAY8(...) __VA_ARGS__ M_DELAY7 (M_DELAY0) ()
#define M_DELAY9(...) __VA_ARGS__ M_DELAY8 (M_DELAY0) ()
#define M_EVAL(...) M_EVAL1(M_EVAL1(M_EVAL1(__VA_ARGS__)))
#define M_EVAL1(...) M_EVAL2(M_EVAL2(M_EVAL2(__VA_ARGS__)))
#define M_EVAL2(...) M_EVAL3(M_EVAL3(M_EVAL3(__VA_ARGS__)))
#define M_EVAL3(...) M_EVAL4(M_EVAL4(M_EVAL4(__VA_ARGS__)))
#define M_EVAL4(...) M_EVAL0(M_EVAL0(M_EVAL0(__VA_ARGS__)))
#define M_EVAL0(...) __VA_ARGS__
#define M_APPLY(a,...) a (__VA_ARGS__)
#define M_MAP(f,...) M_MAPI(M_C(M_MAP_, M_NARGS(__VA_ARGS__)), f, __VA_ARGS__)
#define M_MAPI(F,...) F (__VA_ARGS__)
#define M_MAP_1(f,_1) f(_1)
#define M_MAP_2(f,_1,_2) f(_1) f(_2)
#define M_MAP_3(f,_1,_2,_3) f(_1) f(_2) f(_3)
#define M_MAP_4(f,_1,_2,_3,_4) f(_1) f(_2) f(_3) f(_4)
#define M_MAP_5(f,_1,_2,_3,_4,_5) f(_1) f(_2) f(_3) f(_4) f(_5)
#define M_MAP_6(f,_1,_2,_3,_4,_5,_6) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6)
#define M_MAP_7(f,_1,_2,_3,_4,_5,_6,_7) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7)
#define M_MAP_8(f,_1,_2,_3,_4,_5,_6,_7,_8) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8)
#define M_MAP_9(f,_1,_2,_3,_4,_5,_6,_7,_8,_9) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9)
#define M_MAP_10(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10)
#define M_MAP_11(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11)
#define M_MAP_12(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12)
#define M_MAP_13(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13)
#define M_MAP_14(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14)
#define M_MAP_15(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15)
#define M_MAP_16(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16)
#define M_MAP_17(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17)
#define M_MAP_18(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18)
#define M_MAP_19(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19)
#define M_MAP_20(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20)
#define M_MAP_21(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21)
#define M_MAP_22(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22)
#define M_MAP_23(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23)
#define M_MAP_24(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24)
#define M_MAP_25(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25)
#define M_MAP_26(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26)
#define M_MAP_27(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27)
#define M_MAP_28(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28)
#define M_MAP_29(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29)
#define M_MAP_30(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30)
#define M_MAP_31(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31)
#define M_MAP_32(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32)
#define M_MAP_33(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33)
#define M_MAP_34(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34)
#define M_MAP_35(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35)
#define M_MAP_36(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36)
#define M_MAP_37(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37)
#define M_MAP_38(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38)
#define M_MAP_39(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39)
#define M_MAP_40(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39) f(_40)
#define M_MAP_41(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39) f(_40) f(_41)
#define M_MAP_42(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39) f(_40) f(_41) f(_42)
#define M_MAP_43(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39) f(_40) f(_41) f(_42) f(_43)
#define M_MAP_44(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39) f(_40) f(_41) f(_42) f(_43) f(_44)
#define M_MAP_45(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39) f(_40) f(_41) f(_42) f(_43) f(_44) f(_45)
#define M_MAP_46(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39) f(_40) f(_41) f(_42) f(_43) f(_44) f(_45) f(_46)
#define M_MAP_47(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39) f(_40) f(_41) f(_42) f(_43) f(_44) f(_45) f(_46) f(_47)
#define M_MAP_48(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39) f(_40) f(_41) f(_42) f(_43) f(_44) f(_45) f(_46) f(_47) f(_48)
#define M_MAP_49(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39) f(_40) f(_41) f(_42) f(_43) f(_44) f(_45) f(_46) f(_47) f(_48) f(_49)
#define M_MAP_50(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39) f(_40) f(_41) f(_42) f(_43) f(_44) f(_45) f(_46) f(_47) f(_48) f(_49) f(_50)
#define M_MAP_51(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39) f(_40) f(_41) f(_42) f(_43) f(_44) f(_45) f(_46) f(_47) f(_48) f(_49) f(_50) f(_51)
#define M_MAP_52(f,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52) f(_1) f(_2) f(_3) f(_4) f(_5) f(_6) f(_7) f(_8) f(_9) f(_10) f(_11) f(_12) f(_13) f(_14) f(_15) f(_16) f(_17) f(_18) f(_19) f(_20) f(_21) f(_22) f(_23) f(_24) f(_25) f(_26) f(_27) f(_28) f(_29) f(_30) f(_31) f(_32) f(_33) f(_34) f(_35) f(_36) f(_37) f(_38) f(_39) f(_40) f(_41) f(_42) f(_43) f(_44) f(_45) f(_46) f(_47) f(_48) f(_49) f(_50) f(_51) f(_52)
#define M_MAP2(f,d,...) M_MAP2I(M_C(M_MAP2I_, M_NARGS(__VA_ARGS__)), f, d, __VA_ARGS__)
#define M_MAP2I(F,...) F (__VA_ARGS__)
#define M_MAP2I_1(f,d,_1) f(d, _1)
#define M_MAP2I_2(f,d,_1,_2) f(d, _1) f(d, _2)
#define M_MAP2I_3(f,d,_1,_2,_3) f(d, _1) f(d, _2) f(d, _3)
#define M_MAP2I_4(f,d,_1,_2,_3,_4) f(d, _1) f(d, _2) f(d, _3) f(d, _4)
#define M_MAP2I_5(f,d,_1,_2,_3,_4,_5) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5)
#define M_MAP2I_6(f,d,_1,_2,_3,_4,_5,_6) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6)
#define M_MAP2I_7(f,d,_1,_2,_3,_4,_5,_6,_7) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7)
#define M_MAP2I_8(f,d,_1,_2,_3,_4,_5,_6,_7,_8) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8)
#define M_MAP2I_9(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9)
#define M_MAP2I_10(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10)
#define M_MAP2I_11(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11)
#define M_MAP2I_12(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12)
#define M_MAP2I_13(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13)
#define M_MAP2I_14(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14)
#define M_MAP2I_15(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15)
#define M_MAP2I_16(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16)
#define M_MAP2I_17(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17)
#define M_MAP2I_18(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18)
#define M_MAP2I_19(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19)
#define M_MAP2I_20(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20)
#define M_MAP2I_21(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21)
#define M_MAP2I_22(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22)
#define M_MAP2I_23(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23)
#define M_MAP2I_24(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24)
#define M_MAP2I_25(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25)
#define M_MAP2I_26(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26)
#define M_MAP2I_27(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27)
#define M_MAP2I_28(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28)
#define M_MAP2I_29(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29)
#define M_MAP2I_30(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30)
#define M_MAP2I_31(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31)
#define M_MAP2I_32(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32)
#define M_MAP2I_33(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33)
#define M_MAP2I_34(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34)
#define M_MAP2I_35(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35)
#define M_MAP2I_36(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36)
#define M_MAP2I_37(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37)
#define M_MAP2I_38(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38)
#define M_MAP2I_39(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39)
#define M_MAP2I_40(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40)
#define M_MAP2I_41(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41)
#define M_MAP2I_42(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42)
#define M_MAP2I_43(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43)
#define M_MAP2I_44(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44)
#define M_MAP2I_45(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45)
#define M_MAP2I_46(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46)
#define M_MAP2I_47(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47)
#define M_MAP2I_48(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48)
#define M_MAP2I_49(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49)
#define M_MAP2I_50(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50)
#define M_MAP2I_51(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51)
#define M_MAP2I_52(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52)
#define M_MAP2B(f,d,...) M_MAP2BI(M_C(M_MAP2B_, M_NARGS(__VA_ARGS__)), f, d, __VA_ARGS__)
#define M_MAP2BI(F,...) F (__VA_ARGS__)
#define M_MAP2B_1(f,d,_1) f(d, _1)
#define M_MAP2B_2(f,d,_1,_2) f(d, _1) f(d, _2)
#define M_MAP2B_3(f,d,_1,_2,_3) f(d, _1) f(d, _2) f(d, _3)
#define M_MAP2B_4(f,d,_1,_2,_3,_4) f(d, _1) f(d, _2) f(d, _3) f(d, _4)
#define M_MAP2B_5(f,d,_1,_2,_3,_4,_5) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5)
#define M_MAP2B_6(f,d,_1,_2,_3,_4,_5,_6) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6)
#define M_MAP2B_7(f,d,_1,_2,_3,_4,_5,_6,_7) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7)
#define M_MAP2B_8(f,d,_1,_2,_3,_4,_5,_6,_7,_8) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8)
#define M_MAP2B_9(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9)
#define M_MAP2B_10(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10)
#define M_MAP2B_11(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11)
#define M_MAP2B_12(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12)
#define M_MAP2B_13(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13)
#define M_MAP2B_14(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14)
#define M_MAP2B_15(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15)
#define M_MAP2B_16(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16)
#define M_MAP2B_17(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17)
#define M_MAP2B_18(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18)
#define M_MAP2B_19(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19)
#define M_MAP2B_20(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20)
#define M_MAP2B_21(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21)
#define M_MAP2B_22(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22)
#define M_MAP2B_23(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23)
#define M_MAP2B_24(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24)
#define M_MAP2B_25(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25)
#define M_MAP2B_26(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26)
#define M_MAP2B_27(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27)
#define M_MAP2B_28(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28)
#define M_MAP2B_29(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29)
#define M_MAP2B_30(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30)
#define M_MAP2B_31(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31)
#define M_MAP2B_32(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32)
#define M_MAP2B_33(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33)
#define M_MAP2B_34(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34)
#define M_MAP2B_35(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35)
#define M_MAP2B_36(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36)
#define M_MAP2B_37(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37)
#define M_MAP2B_38(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38)
#define M_MAP2B_39(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39)
#define M_MAP2B_40(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40)
#define M_MAP2B_41(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41)
#define M_MAP2B_42(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42)
#define M_MAP2B_43(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43)
#define M_MAP2B_44(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44)
#define M_MAP2B_45(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45)
#define M_MAP2B_46(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46)
#define M_MAP2B_47(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47)
#define M_MAP2B_48(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48)
#define M_MAP2B_49(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49)
#define M_MAP2B_50(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50)
#define M_MAP2B_51(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51)
#define M_MAP2B_52(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52)
#define M_MAP2B_53(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53)
#define M_MAP2B_54(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54)
#define M_MAP2B_55(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55)
#define M_MAP2B_56(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56)
#define M_MAP2B_57(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57)
#define M_MAP2B_58(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58)
#define M_MAP2B_59(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59)
#define M_MAP2B_60(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60)
#define M_MAP2B_61(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61)
#define M_MAP2B_62(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62)
#define M_MAP2B_63(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62) f(d, _63)
#define M_MAP2B_64(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62) f(d, _63) f(d, _64)
#define M_MAP2B_65(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62) f(d, _63) f(d, _64) f(d, _65)
#define M_MAP2B_66(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62) f(d, _63) f(d, _64) f(d, _65) f(d, _66)
#define M_MAP2B_67(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62) f(d, _63) f(d, _64) f(d, _65) f(d, _66) f(d, _67)
#define M_MAP2B_68(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62) f(d, _63) f(d, _64) f(d, _65) f(d, _66) f(d, _67) f(d, _68)
#define M_MAP2B_69(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62) f(d, _63) f(d, _64) f(d, _65) f(d, _66) f(d, _67) f(d, _68) f(d, _69)
#define M_MAP2B_70(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62) f(d, _63) f(d, _64) f(d, _65) f(d, _66) f(d, _67) f(d, _68) f(d, _69) f(d, _70)
#define M_MAP2B_71(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62) f(d, _63) f(d, _64) f(d, _65) f(d, _66) f(d, _67) f(d, _68) f(d, _69) f(d, _70) f(d, _71)
#define M_MAP2B_72(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62) f(d, _63) f(d, _64) f(d, _65) f(d, _66) f(d, _67) f(d, _68) f(d, _69) f(d, _70) f(d, _71) f(d, _72)
#define M_MAP2B_73(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62) f(d, _63) f(d, _64) f(d, _65) f(d, _66) f(d, _67) f(d, _68) f(d, _69) f(d, _70) f(d, _71) f(d, _72) f(d, _73)
#define M_MAP2B_74(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62) f(d, _63) f(d, _64) f(d, _65) f(d, _66) f(d, _67) f(d, _68) f(d, _69) f(d, _70) f(d, _71) f(d, _72) f(d, _73) f(d, _74)
#define M_MAP2B_75(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75) f(d, _1) f(d, _2) f(d, _3) f(d, _4) f(d, _5) f(d, _6) f(d, _7) f(d, _8) f(d, _9) f(d, _10) f(d, _11) f(d, _12) f(d, _13) f(d, _14) f(d, _15) f(d, _16) f(d, _17) f(d, _18) f(d, _19) f(d, _20) f(d, _21) f(d, _22) f(d, _23) f(d, _24) f(d, _25) f(d, _26) f(d, _27) f(d, _28) f(d, _29) f(d, _30) f(d, _31) f(d, _32) f(d, _33) f(d, _34) f(d, _35) f(d, _36) f(d, _37) f(d, _38) f(d, _39) f(d, _40) f(d, _41) f(d, _42) f(d, _43) f(d, _44) f(d, _45) f(d, _46) f(d, _47) f(d, _48) f(d, _49) f(d, _50) f(d, _51) f(d, _52) f(d, _53) f(d, _54) f(d, _55) f(d, _56) f(d, _57) f(d, _58) f(d, _59) f(d, _60) f(d, _61) f(d, _62) f(d, _63) f(d, _64) f(d, _65) f(d, _66) f(d, _67) f(d, _68) f(d, _69) f(d, _70) f(d, _71) f(d, _72) f(d, _73) f(d, _74) f(d, _75)
#define M_MAP3(f,d,...) M_MAP3I(M_C(M_MAP3I_, M_NARGS(__VA_ARGS__)), f, d, __VA_ARGS__)
#define M_MAP3I(F,...) F (__VA_ARGS__)
#define M_MAP3I_1(f,d,_1) f(d, 1, _1)
#define M_MAP3I_2(f,d,_1,_2) f(d, 1, _1) f(d, 2, _2)
#define M_MAP3I_3(f,d,_1,_2,_3) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3)
#define M_MAP3I_4(f,d,_1,_2,_3,_4) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4)
#define M_MAP3I_5(f,d,_1,_2,_3,_4,_5) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5)
#define M_MAP3I_6(f,d,_1,_2,_3,_4,_5,_6) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6)
#define M_MAP3I_7(f,d,_1,_2,_3,_4,_5,_6,_7) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7)
#define M_MAP3I_8(f,d,_1,_2,_3,_4,_5,_6,_7,_8) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8)
#define M_MAP3I_9(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9)
#define M_MAP3I_10(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10)
#define M_MAP3I_11(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11)
#define M_MAP3I_12(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12)
#define M_MAP3I_13(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13)
#define M_MAP3I_14(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14)
#define M_MAP3I_15(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15)
#define M_MAP3I_16(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16)
#define M_MAP3I_17(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17)
#define M_MAP3I_18(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18)
#define M_MAP3I_19(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19)
#define M_MAP3I_20(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20)
#define M_MAP3I_21(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21)
#define M_MAP3I_22(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22)
#define M_MAP3I_23(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23)
#define M_MAP3I_24(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24)
#define M_MAP3I_25(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25)
#define M_MAP3I_26(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26)
#define M_MAP3I_27(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27)
#define M_MAP3I_28(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28)
#define M_MAP3I_29(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29)
#define M_MAP3I_30(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30)
#define M_MAP3I_31(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31)
#define M_MAP3I_32(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32)
#define M_MAP3I_33(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33)
#define M_MAP3I_34(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34)
#define M_MAP3I_35(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35)
#define M_MAP3I_36(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36)
#define M_MAP3I_37(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37)
#define M_MAP3I_38(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38)
#define M_MAP3I_39(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39)
#define M_MAP3I_40(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39) f(d, 40, _40)
#define M_MAP3I_41(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39) f(d, 40, _40) f(d, 41, _41)
#define M_MAP3I_42(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39) f(d, 40, _40) f(d, 41, _41) f(d, 42, _42)
#define M_MAP3I_43(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39) f(d, 40, _40) f(d, 41, _41) f(d, 42, _42) f(d, 43, _43)
#define M_MAP3I_44(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39) f(d, 40, _40) f(d, 41, _41) f(d, 42, _42) f(d, 43, _43) f(d, 44, _44)
#define M_MAP3I_45(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39) f(d, 40, _40) f(d, 41, _41) f(d, 42, _42) f(d, 43, _43) f(d, 44, _44) f(d, 45, _45)
#define M_MAP3I_46(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39) f(d, 40, _40) f(d, 41, _41) f(d, 42, _42) f(d, 43, _43) f(d, 44, _44) f(d, 45, _45) f(d, 46, _46)
#define M_MAP3I_47(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39) f(d, 40, _40) f(d, 41, _41) f(d, 42, _42) f(d, 43, _43) f(d, 44, _44) f(d, 45, _45) f(d, 46, _46) f(d, 47, _47)
#define M_MAP3I_48(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39) f(d, 40, _40) f(d, 41, _41) f(d, 42, _42) f(d, 43, _43) f(d, 44, _44) f(d, 45, _45) f(d, 46, _46) f(d, 47, _47) f(d, 48, _48)
#define M_MAP3I_49(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39) f(d, 40, _40) f(d, 41, _41) f(d, 42, _42) f(d, 43, _43) f(d, 44, _44) f(d, 45, _45) f(d, 46, _46) f(d, 47, _47) f(d, 48, _48) f(d, 49, _49)
#define M_MAP3I_50(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39) f(d, 40, _40) f(d, 41, _41) f(d, 42, _42) f(d, 43, _43) f(d, 44, _44) f(d, 45, _45) f(d, 46, _46) f(d, 47, _47) f(d, 48, _48) f(d, 49, _49) f(d, 50, _50)
#define M_MAP3I_51(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39) f(d, 40, _40) f(d, 41, _41) f(d, 42, _42) f(d, 43, _43) f(d, 44, _44) f(d, 45, _45) f(d, 46, _46) f(d, 47, _47) f(d, 48, _48) f(d, 49, _49) f(d, 50, _50) f(d, 51, _51)
#define M_MAP3I_52(f,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52) f(d, 1, _1) f(d, 2, _2) f(d, 3, _3) f(d, 4, _4) f(d, 5, _5) f(d, 6, _6) f(d, 7, _7) f(d, 8, _8) f(d, 9, _9) f(d, 10, _10) f(d, 11, _11) f(d, 12, _12) f(d, 13, _13) f(d, 14, _14) f(d, 15, _15) f(d, 16, _16) f(d, 17, _17) f(d, 18, _18) f(d, 19, _19) f(d, 20, _20) f(d, 21, _21) f(d, 22, _22) f(d, 23, _23) f(d, 24, _24) f(d, 25, _25) f(d, 26, _26) f(d, 27, _27) f(d, 28, _28) f(d, 29, _29) f(d, 30, _30) f(d, 31, _31) f(d, 32, _32) f(d, 33, _33) f(d, 34, _34) f(d, 35, _35) f(d, 36, _36) f(d, 37, _37) f(d, 38, _38) f(d, 39, _39) f(d, 40, _40) f(d, 41, _41) f(d, 42, _42) f(d, 43, _43) f(d, 44, _44) f(d, 45, _45) f(d, 46, _46) f(d, 47, _47) f(d, 48, _48) f(d, 49, _49) f(d, 50, _50) f(d, 51, _51) f(d, 52, _52)
#define M_MAP_PAIR_L0_INDIRECT() M_MAP_PAIR_L0
#define M_MAP_PAIR_L0(f,...) M_IF_NARGS_EQ2(__VA_ARGS__)( f(__VA_ARGS__) , M_MAP_PAIR_L1(f, __VA_ARGS__))
#define M_MAP_PAIR_L1(f,a,b,...) f(a,b) M_DELAY3(M_MAP_PAIR_L0_INDIRECT) () (f, __VA_ARGS__)
#define M_MAP_PAIR(f,...) M_IF_EMPTY(__VA_ARGS__)( , M_EVAL(M_MAP_PAIR_L0(f, __VA_ARGS__)))
#define M_REDUCE(f,g,...) M_REDUCEI1_0(M_C(M_REDUCEI1_, M_NARGS(__VA_ARGS__)), f, g, __VA_ARGS__)
#define M_REDUCEI1_0(F,...) F(__VA_ARGS__)
#define M_REDUCEI1_1(f,g,_1) f(_1)
#define M_REDUCEI1_2(f,g,_1,_2) g(f(_1), f(_2))
#define M_REDUCEI1_3(f,g,_1,_2,_3) g(f(_1), g(f(_2), f(_3)))
#define M_REDUCEI1_4(f,g,_1,_2,_3,_4) g(f(_1), g(f(_2), g(f(_3), f(_4))))
#define M_REDUCEI1_5(f,g,_1,_2,_3,_4,_5) g(f(_1), g(f(_2), g(f(_3), g(f(_4), f(_5)))))
#define M_REDUCEI1_6(f,g,_1,_2,_3,_4,_5,_6) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), f(_6))))))
#define M_REDUCEI1_7(f,g,_1,_2,_3,_4,_5,_6,_7) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), f(_7)))))))
#define M_REDUCEI1_8(f,g,_1,_2,_3,_4,_5,_6,_7,_8) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), f(_8))))))))
#define M_REDUCEI1_9(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), f(_9)))))))))
#define M_REDUCEI1_10(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), f(_10))))))))))
#define M_REDUCEI1_11(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), f(_11)))))))))))
#define M_REDUCEI1_12(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), f(_12))))))))))))
#define M_REDUCEI1_13(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), f(_13)))))))))))))
#define M_REDUCEI1_14(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), f(_14))))))))))))))
#define M_REDUCEI1_15(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), f(_15)))))))))))))))
#define M_REDUCEI1_16(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), f(_16))))))))))))))))
#define M_REDUCEI1_17(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), f(_17)))))))))))))))))
#define M_REDUCEI1_18(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), f(_18))))))))))))))))))
#define M_REDUCEI1_19(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), f(_19)))))))))))))))))))
#define M_REDUCEI1_20(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), f(_20))))))))))))))))))))
#define M_REDUCEI1_21(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), f(_21)))))))))))))))))))))
#define M_REDUCEI1_22(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), f(_22))))))))))))))))))))))
#define M_REDUCEI1_23(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), f(_23)))))))))))))))))))))))
#define M_REDUCEI1_24(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), f(_24))))))))))))))))))))))))
#define M_REDUCEI1_25(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), f(_25)))))))))))))))))))))))))
#define M_REDUCEI1_26(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), f(_26))))))))))))))))))))))))))
#define M_REDUCEI1_27(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), f(_27)))))))))))))))))))))))))))
#define M_REDUCEI1_28(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), f(_28))))))))))))))))))))))))))))
#define M_REDUCEI1_29(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), f(_29)))))))))))))))))))))))))))))
#define M_REDUCEI1_30(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), f(_30))))))))))))))))))))))))))))))
#define M_REDUCEI1_31(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), f(_31)))))))))))))))))))))))))))))))
#define M_REDUCEI1_32(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), f(_32))))))))))))))))))))))))))))))))
#define M_REDUCEI1_33(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), f(_33)))))))))))))))))))))))))))))))))
#define M_REDUCEI1_34(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), f(_34))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_35(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), f(_35)))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_36(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), f(_36))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_37(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), f(_37)))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_38(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), f(_38))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_39(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), f(_39)))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_40(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), g(f(_39), f(_40))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_41(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), g(f(_39), g(f(_40), f(_41)))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_42(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), g(f(_39), g(f(_40), g(f(_41), f(_42))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_43(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), g(f(_39), g(f(_40), g(f(_41), g(f(_42), f(_43)))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_44(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), g(f(_39), g(f(_40), g(f(_41), g(f(_42), g(f(_43), f(_44))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_45(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), g(f(_39), g(f(_40), g(f(_41), g(f(_42), g(f(_43), g(f(_44), f(_45)))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_46(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), g(f(_39), g(f(_40), g(f(_41), g(f(_42), g(f(_43), g(f(_44), g(f(_45), f(_46))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_47(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), g(f(_39), g(f(_40), g(f(_41), g(f(_42), g(f(_43), g(f(_44), g(f(_45), g(f(_46), f(_47)))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_48(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), g(f(_39), g(f(_40), g(f(_41), g(f(_42), g(f(_43), g(f(_44), g(f(_45), g(f(_46), g(f(_47), f(_48))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_49(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), g(f(_39), g(f(_40), g(f(_41), g(f(_42), g(f(_43), g(f(_44), g(f(_45), g(f(_46), g(f(_47), g(f(_48), f(_49)))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_50(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), g(f(_39), g(f(_40), g(f(_41), g(f(_42), g(f(_43), g(f(_44), g(f(_45), g(f(_46), g(f(_47), g(f(_48), g(f(_49), f(_50))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_51(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), g(f(_39), g(f(_40), g(f(_41), g(f(_42), g(f(_43), g(f(_44), g(f(_45), g(f(_46), g(f(_47), g(f(_48), g(f(_49), g(f(_50), f(_51)))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI1_52(f,g,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52) g(f(_1), g(f(_2), g(f(_3), g(f(_4), g(f(_5), g(f(_6), g(f(_7), g(f(_8), g(f(_9), g(f(_10), g(f(_11), g(f(_12), g(f(_13), g(f(_14), g(f(_15), g(f(_16), g(f(_17), g(f(_18), g(f(_19), g(f(_20), g(f(_21), g(f(_22), g(f(_23), g(f(_24), g(f(_25), g(f(_26), g(f(_27), g(f(_28), g(f(_29), g(f(_30), g(f(_31), g(f(_32), g(f(_33), g(f(_34), g(f(_35), g(f(_36), g(f(_37), g(f(_38), g(f(_39), g(f(_40), g(f(_41), g(f(_42), g(f(_43), g(f(_44), g(f(_45), g(f(_46), g(f(_47), g(f(_48), g(f(_49), g(f(_50), g(f(_51), f(_52))))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCE2(f,g,d,...) M_REDUCEI2_0(M_C(M_REDUCEI2_, M_NARGS(__VA_ARGS__)), f, g, d, __VA_ARGS__)
#define M_REDUCEI2_0(F,...) F(__VA_ARGS__)
#define M_REDUCEI2_1(f,g,d,_1) f(d, _1)
#define M_REDUCEI2_2(f,g,d,_1,_2) g(f(d, _1), f(d, _2))
#define M_REDUCEI2_3(f,g,d,_1,_2,_3) g(f(d, _1), g(f(d, _2), f(d, _3)))
#define M_REDUCEI2_4(f,g,d,_1,_2,_3,_4) g(f(d, _1), g(f(d, _2), g(f(d, _3), f(d, _4))))
#define M_REDUCEI2_5(f,g,d,_1,_2,_3,_4,_5) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), f(d, _5)))))
#define M_REDUCEI2_6(f,g,d,_1,_2,_3,_4,_5,_6) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), f(d, _6))))))
#define M_REDUCEI2_7(f,g,d,_1,_2,_3,_4,_5,_6,_7) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), f(d, _7)))))))
#define M_REDUCEI2_8(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), f(d, _8))))))))
#define M_REDUCEI2_9(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), f(d, _9)))))))))
#define M_REDUCEI2_10(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), f(d, _10))))))))))
#define M_REDUCEI2_11(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), f(d, _11)))))))))))
#define M_REDUCEI2_12(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), f(d, _12))))))))))))
#define M_REDUCEI2_13(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), f(d, _13)))))))))))))
#define M_REDUCEI2_14(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), f(d, _14))))))))))))))
#define M_REDUCEI2_15(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), f(d, _15)))))))))))))))
#define M_REDUCEI2_16(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), f(d, _16))))))))))))))))
#define M_REDUCEI2_17(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), f(d, _17)))))))))))))))))
#define M_REDUCEI2_18(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), f(d, _18))))))))))))))))))
#define M_REDUCEI2_19(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), f(d, _19)))))))))))))))))))
#define M_REDUCEI2_20(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), f(d, _20))))))))))))))))))))
#define M_REDUCEI2_21(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), f(d, _21)))))))))))))))))))))
#define M_REDUCEI2_22(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), f(d, _22))))))))))))))))))))))
#define M_REDUCEI2_23(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), f(d, _23)))))))))))))))))))))))
#define M_REDUCEI2_24(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), f(d, _24))))))))))))))))))))))))
#define M_REDUCEI2_25(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), f(d, _25)))))))))))))))))))))))))
#define M_REDUCEI2_26(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), f(d, _26))))))))))))))))))))))))))
#define M_REDUCEI2_27(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), f(d, _27)))))))))))))))))))))))))))
#define M_REDUCEI2_28(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), f(d, _28))))))))))))))))))))))))))))
#define M_REDUCEI2_29(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), f(d, _29)))))))))))))))))))))))))))))
#define M_REDUCEI2_30(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), f(d, _30))))))))))))))))))))))))))))))
#define M_REDUCEI2_31(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), f(d, _31)))))))))))))))))))))))))))))))
#define M_REDUCEI2_32(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), f(d, _32))))))))))))))))))))))))))))))))
#define M_REDUCEI2_33(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), f(d, _33)))))))))))))))))))))))))))))))))
#define M_REDUCEI2_34(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), f(d, _34))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_35(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), f(d, _35)))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_36(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), f(d, _36))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_37(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), f(d, _37)))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_38(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), f(d, _38))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_39(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), f(d, _39)))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_40(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), g(f(d, _39), f(d, _40))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_41(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), g(f(d, _39), g(f(d, _40), f(d, _41)))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_42(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), g(f(d, _39), g(f(d, _40), g(f(d, _41), f(d, _42))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_43(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), g(f(d, _39), g(f(d, _40), g(f(d, _41), g(f(d, _42), f(d, _43)))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_44(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), g(f(d, _39), g(f(d, _40), g(f(d, _41), g(f(d, _42), g(f(d, _43), f(d, _44))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_45(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), g(f(d, _39), g(f(d, _40), g(f(d, _41), g(f(d, _42), g(f(d, _43), g(f(d, _44), f(d, _45)))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_46(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), g(f(d, _39), g(f(d, _40), g(f(d, _41), g(f(d, _42), g(f(d, _43), g(f(d, _44), g(f(d, _45), f(d, _46))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_47(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), g(f(d, _39), g(f(d, _40), g(f(d, _41), g(f(d, _42), g(f(d, _43), g(f(d, _44), g(f(d, _45), g(f(d, _46), f(d, _47)))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_48(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), g(f(d, _39), g(f(d, _40), g(f(d, _41), g(f(d, _42), g(f(d, _43), g(f(d, _44), g(f(d, _45), g(f(d, _46), g(f(d, _47), f(d, _48))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_49(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), g(f(d, _39), g(f(d, _40), g(f(d, _41), g(f(d, _42), g(f(d, _43), g(f(d, _44), g(f(d, _45), g(f(d, _46), g(f(d, _47), g(f(d, _48), f(d, _49)))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_50(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), g(f(d, _39), g(f(d, _40), g(f(d, _41), g(f(d, _42), g(f(d, _43), g(f(d, _44), g(f(d, _45), g(f(d, _46), g(f(d, _47), g(f(d, _48), g(f(d, _49), f(d, _50))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_51(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), g(f(d, _39), g(f(d, _40), g(f(d, _41), g(f(d, _42), g(f(d, _43), g(f(d, _44), g(f(d, _45), g(f(d, _46), g(f(d, _47), g(f(d, _48), g(f(d, _49), g(f(d, _50), f(d, _51)))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI2_52(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52) g(f(d, _1), g(f(d, _2), g(f(d, _3), g(f(d, _4), g(f(d, _5), g(f(d, _6), g(f(d, _7), g(f(d, _8), g(f(d, _9), g(f(d, _10), g(f(d, _11), g(f(d, _12), g(f(d, _13), g(f(d, _14), g(f(d, _15), g(f(d, _16), g(f(d, _17), g(f(d, _18), g(f(d, _19), g(f(d, _20), g(f(d, _21), g(f(d, _22), g(f(d, _23), g(f(d, _24), g(f(d, _25), g(f(d, _26), g(f(d, _27), g(f(d, _28), g(f(d, _29), g(f(d, _30), g(f(d, _31), g(f(d, _32), g(f(d, _33), g(f(d, _34), g(f(d, _35), g(f(d, _36), g(f(d, _37), g(f(d, _38), g(f(d, _39), g(f(d, _40), g(f(d, _41), g(f(d, _42), g(f(d, _43), g(f(d, _44), g(f(d, _45), g(f(d, _46), g(f(d, _47), g(f(d, _48), g(f(d, _49), g(f(d, _50), g(f(d, _51), f(d, _52))))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCE3(f,g,d,...) M_REDUCEI3_0(M_C(M_REDUCEI3_, M_NARGS(__VA_ARGS__)), f, g, d, __VA_ARGS__)
#define M_REDUCEI3_0(F,...) F(__VA_ARGS__)
#define M_REDUCEI3_1(f,g,d,_1) f(d, 1, _1)
#define M_REDUCEI3_2(f,g,d,_1,_2) g(f(d, 1, _1), f(d, 2, _2))
#define M_REDUCEI3_3(f,g,d,_1,_2,_3) g(f(d, 1, _1), g(f(d, 2, _2), f(d, 3, _3)))
#define M_REDUCEI3_4(f,g,d,_1,_2,_3,_4) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), f(d, 4, _4))))
#define M_REDUCEI3_5(f,g,d,_1,_2,_3,_4,_5) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), f(d, 5, _5)))))
#define M_REDUCEI3_6(f,g,d,_1,_2,_3,_4,_5,_6) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), f(d, 6, _6))))))
#define M_REDUCEI3_7(f,g,d,_1,_2,_3,_4,_5,_6,_7) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), f(d, 7, _7)))))))
#define M_REDUCEI3_8(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), f(d, 8, _8))))))))
#define M_REDUCEI3_9(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), f(d, 9, _9)))))))))
#define M_REDUCEI3_10(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), f(d, 10, _10))))))))))
#define M_REDUCEI3_11(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), f(d, 11, _11)))))))))))
#define M_REDUCEI3_12(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), f(d, 12, _12))))))))))))
#define M_REDUCEI3_13(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), f(d, 13, _13)))))))))))))
#define M_REDUCEI3_14(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), f(d, 14, _14))))))))))))))
#define M_REDUCEI3_15(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), f(d, 15, _15)))))))))))))))
#define M_REDUCEI3_16(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), f(d, 16, _16))))))))))))))))
#define M_REDUCEI3_17(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), f(d, 17, _17)))))))))))))))))
#define M_REDUCEI3_18(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), f(d, 18, _18))))))))))))))))))
#define M_REDUCEI3_19(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), f(d, 19, _19)))))))))))))))))))
#define M_REDUCEI3_20(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), f(d, 20, _20))))))))))))))))))))
#define M_REDUCEI3_21(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), f(d, 21, _21)))))))))))))))))))))
#define M_REDUCEI3_22(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), f(d, 22, _22))))))))))))))))))))))
#define M_REDUCEI3_23(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), f(d, 23, _23)))))))))))))))))))))))
#define M_REDUCEI3_24(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), f(d, 24, _24))))))))))))))))))))))))
#define M_REDUCEI3_25(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), f(d, 25, _25)))))))))))))))))))))))))
#define M_REDUCEI3_26(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), f(d, 26, _26))))))))))))))))))))))))))
#define M_REDUCEI3_27(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), f(d, 27, _27)))))))))))))))))))))))))))
#define M_REDUCEI3_28(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), f(d, 28, _28))))))))))))))))))))))))))))
#define M_REDUCEI3_29(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), f(d, 29, _29)))))))))))))))))))))))))))))
#define M_REDUCEI3_30(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), f(d, 30, _30))))))))))))))))))))))))))))))
#define M_REDUCEI3_31(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), f(d, 31, _31)))))))))))))))))))))))))))))))
#define M_REDUCEI3_32(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), f(d, 32, _32))))))))))))))))))))))))))))))))
#define M_REDUCEI3_33(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), f(d, 33, _33)))))))))))))))))))))))))))))))))
#define M_REDUCEI3_34(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), f(d, 34, _34))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_35(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), f(d, 35, _35)))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_36(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), f(d, 36, _36))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_37(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), f(d, 37, _37)))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_38(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), f(d, 38, _38))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_39(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), f(d, 39, _39)))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_40(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), g(f(d, 39, _39), f(d, 40, _40))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_41(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), g(f(d, 39, _39), g(f(d, 40, _40), f(d, 41, _41)))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_42(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), g(f(d, 39, _39), g(f(d, 40, _40), g(f(d, 41, _41), f(d, 42, _42))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_43(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), g(f(d, 39, _39), g(f(d, 40, _40), g(f(d, 41, _41), g(f(d, 42, _42), f(d, 43, _43)))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_44(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), g(f(d, 39, _39), g(f(d, 40, _40), g(f(d, 41, _41), g(f(d, 42, _42), g(f(d, 43, _43), f(d, 44, _44))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_45(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), g(f(d, 39, _39), g(f(d, 40, _40), g(f(d, 41, _41), g(f(d, 42, _42), g(f(d, 43, _43), g(f(d, 44, _44), f(d, 45, _45)))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_46(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), g(f(d, 39, _39), g(f(d, 40, _40), g(f(d, 41, _41), g(f(d, 42, _42), g(f(d, 43, _43), g(f(d, 44, _44), g(f(d, 45, _45), f(d, 46, _46))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_47(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), g(f(d, 39, _39), g(f(d, 40, _40), g(f(d, 41, _41), g(f(d, 42, _42), g(f(d, 43, _43), g(f(d, 44, _44), g(f(d, 45, _45), g(f(d, 46, _46), f(d, 47, _47)))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_48(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), g(f(d, 39, _39), g(f(d, 40, _40), g(f(d, 41, _41), g(f(d, 42, _42), g(f(d, 43, _43), g(f(d, 44, _44), g(f(d, 45, _45), g(f(d, 46, _46), g(f(d, 47, _47), f(d, 48, _48))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_49(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), g(f(d, 39, _39), g(f(d, 40, _40), g(f(d, 41, _41), g(f(d, 42, _42), g(f(d, 43, _43), g(f(d, 44, _44), g(f(d, 45, _45), g(f(d, 46, _46), g(f(d, 47, _47), g(f(d, 48, _48), f(d, 49, _49)))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_50(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), g(f(d, 39, _39), g(f(d, 40, _40), g(f(d, 41, _41), g(f(d, 42, _42), g(f(d, 43, _43), g(f(d, 44, _44), g(f(d, 45, _45), g(f(d, 46, _46), g(f(d, 47, _47), g(f(d, 48, _48), g(f(d, 49, _49), f(d, 50, _50))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_51(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), g(f(d, 39, _39), g(f(d, 40, _40), g(f(d, 41, _41), g(f(d, 42, _42), g(f(d, 43, _43), g(f(d, 44, _44), g(f(d, 45, _45), g(f(d, 46, _46), g(f(d, 47, _47), g(f(d, 48, _48), g(f(d, 49, _49), g(f(d, 50, _50), f(d, 51, _51)))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_REDUCEI3_52(f,g,d,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52) g(f(d, 1, _1), g(f(d, 2, _2), g(f(d, 3, _3), g(f(d, 4, _4), g(f(d, 5, _5), g(f(d, 6, _6), g(f(d, 7, _7), g(f(d, 8, _8), g(f(d, 9, _9), g(f(d, 10, _10), g(f(d, 11, _11), g(f(d, 12, _12), g(f(d, 13, _13), g(f(d, 14, _14), g(f(d, 15, _15), g(f(d, 16, _16), g(f(d, 17, _17), g(f(d, 18, _18), g(f(d, 19, _19), g(f(d, 20, _20), g(f(d, 21, _21), g(f(d, 22, _22), g(f(d, 23, _23), g(f(d, 24, _24), g(f(d, 25, _25), g(f(d, 26, _26), g(f(d, 27, _27), g(f(d, 28, _28), g(f(d, 29, _29), g(f(d, 30, _30), g(f(d, 31, _31), g(f(d, 32, _32), g(f(d, 33, _33), g(f(d, 34, _34), g(f(d, 35, _35), g(f(d, 36, _36), g(f(d, 37, _37), g(f(d, 38, _38), g(f(d, 39, _39), g(f(d, 40, _40), g(f(d, 41, _41), g(f(d, 42, _42), g(f(d, 43, _43), g(f(d, 44, _44), g(f(d, 45, _45), g(f(d, 46, _46), g(f(d, 47, _47), g(f(d, 48, _48), g(f(d, 49, _49), g(f(d, 50, _50), g(f(d, 51, _51), f(d, 52, _52))))))))))))))))))))))))))))))))))))))))))))))))))))
#define M_MAP_C(f,...) M_REDUCE(f, M_ID, __VA_ARGS__)
#define M_MAP2_C(f,d,...) M_REDUCE2(f, M_MAP2_C_ID, d, __VA_ARGS__)
#define M_MAP2_C_ID(...) __VA_ARGS__
#define M_MAP3_C(f,d,...) M_REDUCE3(f, M_MAP3_C_ID, d, __VA_ARGS__)
#define M_MAP3_C_ID(...) __VA_ARGS__
#define M_SEQ(init,end) M_MID_ARGS(init, M_INC(M_SUB(end, init)), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52)
#define M_REPLICATE(N,value) M_MAP2(M_RET_ARG1, value, M_SEQ(1, N))
#define M_REPLICATE_C(N,value) M_MAP2_C(M_RET_ARG1, value, M_SEQ(1, N))
#define M_FILTER(f,extra,...) M_MAP2( M_FILTER_00, (f, extra), __VA_ARGS__)
#define M_FILTER_C(f,extra,...) M_REMOVE_PARENTHESIS (M_REDUCE2(M_FILTER_00, M_CAT_ARGLIST, (f, extra), __VA_ARGS__) )
#define M_FILTER_00(d,item) M_IF(M_PAIR_1 d(M_PAIR_2 d, item))(item, )
#define M_CAT_ARGLIST(a,b) M_IF_EMPTY(a)(b, M_IF_EMPTY(b)(a,( M_REMOVE_PARENTHESIS (a) , M_REMOVE_PARENTHESIS (b))))
#define M_MERGE_ARGLIST(a,b) ( M_APPLY( M_C4(M_MERGE_ARGLIST_, M_NARGS a, _, M_NARGS b), M_OPFLAT a, M_OPFLAT b) )
#define M_MERGE_ARGLIST_1_1(a1,b1) (a1, b1)
#define M_MERGE_ARGLIST_2_2(a1,a2,b1,b2) (a1, b1) , (a2, b2)
#define M_MERGE_ARGLIST_3_3(a1,a2,a3,b1,b2,b3) (a1, b1) , (a2, b2) , (a3, b3)
#define M_MERGE_ARGLIST_4_4(a1,a2,a3,a4,b1,b2,b3,b4) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4)
#define M_MERGE_ARGLIST_5_5(a1,a2,a3,a4,a5,b1,b2,b3,b4,b5) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5)
#define M_MERGE_ARGLIST_6_6(a1,a2,a3,a4,a5,a6,b1,b2,b3,b4,b5,b6) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6)
#define M_MERGE_ARGLIST_7_7(a1,a2,a3,a4,a5,a6,a7,b1,b2,b3,b4,b5,b6,b7) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7)
#define M_MERGE_ARGLIST_8_8(a1,a2,a3,a4,a5,a6,a7,a8,b1,b2,b3,b4,b5,b6,b7,b8) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8)
#define M_MERGE_ARGLIST_9_9(a1,a2,a3,a4,a5,a6,a7,a8,a9,b1,b2,b3,b4,b5,b6,b7,b8,b9) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9)
#define M_MERGE_ARGLIST_10_10(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10)
#define M_MERGE_ARGLIST_11_11(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11)
#define M_MERGE_ARGLIST_12_12(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12)
#define M_MERGE_ARGLIST_13_13(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13)
#define M_MERGE_ARGLIST_14_14(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14)
#define M_MERGE_ARGLIST_15_15(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15)
#define M_MERGE_ARGLIST_16_16(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16)
#define M_MERGE_ARGLIST_17_17(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17)
#define M_MERGE_ARGLIST_18_18(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18)
#define M_MERGE_ARGLIST_19_19(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19)
#define M_MERGE_ARGLIST_20_20(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20)
#define M_MERGE_ARGLIST_21_21(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21)
#define M_MERGE_ARGLIST_22_22(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22)
#define M_MERGE_ARGLIST_23_23(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23)
#define M_MERGE_ARGLIST_24_24(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24)
#define M_MERGE_ARGLIST_25_25(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25)
#define M_MERGE_ARGLIST_26_26(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26)
#define M_MERGE_ARGLIST_27_27(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27)
#define M_MERGE_ARGLIST_28_28(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28)
#define M_MERGE_ARGLIST_29_29(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29)
#define M_MERGE_ARGLIST_30_30(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30)
#define M_MERGE_ARGLIST_31_31(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31)
#define M_MERGE_ARGLIST_32_32(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32)
#define M_MERGE_ARGLIST_33_33(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33)
#define M_MERGE_ARGLIST_34_34(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34)
#define M_MERGE_ARGLIST_35_35(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35)
#define M_MERGE_ARGLIST_36_36(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36)
#define M_MERGE_ARGLIST_37_37(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37)
#define M_MERGE_ARGLIST_38_38(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38)
#define M_MERGE_ARGLIST_39_39(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39)
#define M_MERGE_ARGLIST_40_40(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39) , (a40, b40)
#define M_MERGE_ARGLIST_41_41(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39) , (a40, b40) , (a41, b41)
#define M_MERGE_ARGLIST_42_42(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39) , (a40, b40) , (a41, b41) , (a42, b42)
#define M_MERGE_ARGLIST_43_43(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39) , (a40, b40) , (a41, b41) , (a42, b42) , (a43, b43)
#define M_MERGE_ARGLIST_44_44(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39) , (a40, b40) , (a41, b41) , (a42, b42) , (a43, b43) , (a44, b44)
#define M_MERGE_ARGLIST_45_45(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39) , (a40, b40) , (a41, b41) , (a42, b42) , (a43, b43) , (a44, b44) , (a45, b45)
#define M_MERGE_ARGLIST_46_46(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39) , (a40, b40) , (a41, b41) , (a42, b42) , (a43, b43) , (a44, b44) , (a45, b45) , (a46, b46)
#define M_MERGE_ARGLIST_47_47(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39) , (a40, b40) , (a41, b41) , (a42, b42) , (a43, b43) , (a44, b44) , (a45, b45) , (a46, b46) , (a47, b47)
#define M_MERGE_ARGLIST_48_48(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39) , (a40, b40) , (a41, b41) , (a42, b42) , (a43, b43) , (a44, b44) , (a45, b45) , (a46, b46) , (a47, b47) , (a48, b48)
#define M_MERGE_ARGLIST_49_49(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,b49) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39) , (a40, b40) , (a41, b41) , (a42, b42) , (a43, b43) , (a44, b44) , (a45, b45) , (a46, b46) , (a47, b47) , (a48, b48) , (a49, b49)
#define M_MERGE_ARGLIST_50_50(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,b49,b50) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39) , (a40, b40) , (a41, b41) , (a42, b42) , (a43, b43) , (a44, b44) , (a45, b45) , (a46, b46) , (a47, b47) , (a48, b48) , (a49, b49) , (a50, b50)
#define M_MERGE_ARGLIST_51_51(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,b49,b50,b51) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39) , (a40, b40) , (a41, b41) , (a42, b42) , (a43, b43) , (a44, b44) , (a45, b45) , (a46, b46) , (a47, b47) , (a48, b48) , (a49, b49) , (a50, b50) , (a51, b51)
#define M_MERGE_ARGLIST_52_52(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22,a23,a24,a25,a26,a27,a28,a29,a30,a31,a32,a33,a34,a35,a36,a37,a38,a39,a40,a41,a42,a43,a44,a45,a46,a47,a48,a49,a50,a51,a52,b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48,b49,b50,b51,b52) (a1, b1) , (a2, b2) , (a3, b3) , (a4, b4) , (a5, b5) , (a6, b6) , (a7, b7) , (a8, b8) , (a9, b9) , (a10, b10) , (a11, b11) , (a12, b12) , (a13, b13) , (a14, b14) , (a15, b15) , (a16, b16) , (a17, b17) , (a18, b18) , (a19, b19) , (a20, b20) , (a21, b21) , (a22, b22) , (a23, b23) , (a24, b24) , (a25, b25) , (a26, b26) , (a27, b27) , (a28, b28) , (a29, b29) , (a30, b30) , (a31, b31) , (a32, b32) , (a33, b33) , (a34, b34) , (a35, b35) , (a36, b36) , (a37, b37) , (a38, b38) , (a39, b39) , (a40, b40) , (a41, b41) , (a42, b42) , (a43, b43) , (a44, b44) , (a45, b45) , (a46, b46) , (a47, b47) , (a48, b48) , (a49, b49) , (a50, b50) , (a51, b51) , (a52, b52)
#define M_REMOVE_PARENTHESIS(...) M_IF(M_PARENTHESIS_P(__VA_ARGS__))(M_REMOVE_PARENTHESIS_2, M_REMOVE_PARENTHESIS_3)(__VA_ARGS__)
#define M_REMOVE_PARENTHESIS_2(...) M_OPFLAT __VA_ARGS__
#define M_REMOVE_PARENTHESIS_3(...) __VA_ARGS__
#define M_ID(...) __VA_ARGS__
#define M_EAT(...) 
#define M_NARGS(...) M_RET_ARG76(__VA_ARGS__, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, useless)
#define M_IF_NARGS_EQ1(...) M_IF(M_EQUAL(M_NARGS(__VA_ARGS__), 1))
#define M_IF_NARGS_EQ2(...) M_IF(M_EQUAL(M_NARGS(__VA_ARGS__), 2))
#define M_TEST_NDEBUG_P() M_C3(M_, NDEBUG, _TEST)
#define M_NDEBUG_TEST 0
#define M_IF_DEBUG(a) M_IF(M_TEST_NDEBUG_P())(,a)
#define M_IF_FUNCOBJ(a) M_IF(M_FUNCOBJ_IS_NOT_DEFINED)( ,a)
#define M_IF_DEFAULT1(value,...) __VA_ARGS__ M_IF_NARGS_EQ1(__VA_ARGS__)(M_DEFERRED_COMMA value, )
#define M_DEFAULT_ARGS2(expected,value,...) __VA_ARGS__ M_IF(M_NOTEQUAL(M_NARGS(__VA_ARGS__), expected))(M_DEFERRED_COMMA, ) M_REVERSE(M_KEEP_ARGS(M_SUB(expected, M_NARGS(__VA_ARGS__)), M_REVERSE value))
#define M_DEFAULT_ARGS_EVAL(...) __VA_ARGS__
#define M_DEFAULT_ARGS(...) M_DEFAULT_ARGS_EVAL(M_DEFAULT_ARGS2(__VA_ARGS__))
#define M_NOTEQUAL_0_0 0
#define M_NOTEQUAL_1_1 0
#define M_NOTEQUAL_2_2 0
#define M_NOTEQUAL_3_3 0
#define M_NOTEQUAL_4_4 0
#define M_NOTEQUAL_5_5 0
#define M_NOTEQUAL_6_6 0
#define M_NOTEQUAL_7_7 0
#define M_NOTEQUAL_8_8 0
#define M_NOTEQUAL_9_9 0
#define M_NOTEQUAL_10_10 0
#define M_NOTEQUAL_11_11 0
#define M_NOTEQUAL_12_12 0
#define M_NOTEQUAL_13_13 0
#define M_NOTEQUAL_14_14 0
#define M_NOTEQUAL_15_15 0
#define M_NOTEQUAL_16_16 0
#define M_NOTEQUAL_17_17 0
#define M_NOTEQUAL_18_18 0
#define M_NOTEQUAL_19_19 0
#define M_NOTEQUAL_20_20 0
#define M_NOTEQUAL_21_21 0
#define M_NOTEQUAL_22_22 0
#define M_NOTEQUAL_23_23 0
#define M_NOTEQUAL_24_24 0
#define M_NOTEQUAL_25_25 0
#define M_NOTEQUAL_26_26 0
#define M_NOTEQUAL_27_27 0
#define M_NOTEQUAL_28_28 0
#define M_NOTEQUAL_29_29 0
#define M_NOTEQUAL_30_30 0
#define M_NOTEQUAL_31_31 0
#define M_NOTEQUAL_32_32 0
#define M_NOTEQUAL_33_33 0
#define M_NOTEQUAL_34_34 0
#define M_NOTEQUAL_35_35 0
#define M_NOTEQUAL_36_36 0
#define M_NOTEQUAL_37_37 0
#define M_NOTEQUAL_38_38 0
#define M_NOTEQUAL_39_39 0
#define M_NOTEQUAL_40_40 0
#define M_NOTEQUAL_41_41 0
#define M_NOTEQUAL_42_42 0
#define M_NOTEQUAL_43_43 0
#define M_NOTEQUAL_44_44 0
#define M_NOTEQUAL_45_45 0
#define M_NOTEQUAL_46_46 0
#define M_NOTEQUAL_47_47 0
#define M_NOTEQUAL_48_48 0
#define M_NOTEQUAL_49_49 0
#define M_NOTEQUAL_50_50 0
#define M_NOTEQUAL_51_51 0
#define M_NOTEQUAL_52_52 0
#define M_NOTEQUAL(x,y) M_BOOL(M_C4(M_NOTEQUAL_, x, _, y))
#define M_EQUAL(x,y) M_INV(M_NOTEQUAL(x,y))
#define M_LESS_THAN_P(a,b) M_KEYWORD_P(M_UNDERFLOW, M_SUB(a, b))
#define M_GREATER_OR_EQUAL_P(a,b) M_INV(M_LESS_THAN_P(a, b))
#define M_LESS_OR_EQUAL_P(a,b) M_GREATER_OR_EQUAL_P(b, a)
#define M_GREATER_THAN_P(a,b) M_LESS_THAN_P(b,a)
#define M_REVERSE(...) M_C(M_REVERSE_, M_NARGS(__VA_ARGS__))(__VA_ARGS__)
#define M_REVERSE_0() ()
#define M_REVERSE_1(_1) _1
#define M_REVERSE_2(_1,_2) _2,_1
#define M_REVERSE_3(_1,_2,_3) _3,_2,_1
#define M_REVERSE_4(_1,_2,_3,_4) _4,_3,_2,_1
#define M_REVERSE_5(_1,_2,_3,_4,_5) _5,_4,_3,_2,_1
#define M_REVERSE_6(_1,_2,_3,_4,_5,_6) _6,_5,_4,_3,_2,_1
#define M_REVERSE_7(_1,_2,_3,_4,_5,_6,_7) _7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_8(_1,_2,_3,_4,_5,_6,_7,_8) _8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_9(_1,_2,_3,_4,_5,_6,_7,_8,_9) _9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_10(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) _10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_11(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) _11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_12(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) _12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_13(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) _13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_14(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) _14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_15(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15) _15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_16(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16) _16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_17(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17) _17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_18(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18) _18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_19(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19) _19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_20(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20) _20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_21(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21) _21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_22(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22) _22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_23(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23) _23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_24(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24) _24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_25(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25) _25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_26(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26) _26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_27(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27) _27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_28(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28) _28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_29(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29) _29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_30(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30) _30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_31(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31) _31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_32(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32) _32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_33(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33) _33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_34(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34) _34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_35(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35) _35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_36(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36) _36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_37(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37) _37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_38(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38) _38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_39(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39) _39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_40(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40) _40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_41(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41) _41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_42(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42) _42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_43(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43) _43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_44(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44) _44,_43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_45(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45) _45,_44,_43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_46(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46) _46,_45,_44,_43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_47(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47) _47,_46,_45,_44,_43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_48(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48) _48,_47,_46,_45,_44,_43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_49(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49) _49,_48,_47,_46,_45,_44,_43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_50(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50) _50,_49,_48,_47,_46,_45,_44,_43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_51(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51) _51,_50,_49,_48,_47,_46,_45,_44,_43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_REVERSE_52(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52) _52,_51,_50,_49,_48,_47,_46,_45,_44,_43,_42,_41,_40,_39,_38,_37,_36,_35,_34,_33,_32,_31,_30,_29,_28,_27,_26,_25,_24,_23,_22,_21,_20,_19,_18,_17,_16,_15,_14,_13,_12,_11,_10,_9,_8,_7,_6,_5,_4,_3,_2,_1
#define M_INVERT(...) ( M_REVERSE (__VA_ARGS__) )
#define M_USE_IDENTIFIER_ALLOC 128
#define M_PRINTF_FORMAT(x) _Generic(((void)0,(x)), char: "%c", bool: "%d", signed char: "%hhd", unsigned char: "%hhu", signed short: "%hd", unsigned short: "%hu", signed int: "%d", unsigned int: "%u", long int: "%ld", unsigned long int: "%lu", long long int: "%lld", unsigned long long int: "%llu", float: "%f", double: "%f", long double: "%Lf", const char *: "%s", char *: "%s", const void *: "%p", void *: "%p" M_PRINTF_FORMAT_EXTEND() )
#define M_PRINTF_FORMAT_EXTEND() 
#define m_core_fopen(...) fopen(__VA_ARGS__)
#define m_core_strncpy(s1,alloc,s2,size) strncpy(s1, s2, size)
#define m_core_strncat(s1,alloc,s2,size) strncat(s1, s2, size)
#define m_core_fscanf(...) fscanf(__VA_ARGS__)
#define m_core_arg_size(arg,size) arg
#define M_CORE_PRINTF_ARG(x) x
#define M_PRINT_ARG(x) M_IF(M_PARENTHESIS_P(x)) ( M_FPRINT_ARG_OUT_STR(stdout, M_PAIR_2 x, M_PAIR_1 x), printf(M_PRINTF_FORMAT(x), M_CORE_PRINTF_ARG(x) ) )
#define M_FPRINT_ARG(f,x) M_IF(M_PARENTHESIS_P(x)) ( M_FPRINT_ARG_OUT_STR(f, M_PAIR_2 x, M_PAIR_1 x), fprintf(f, M_PRINTF_FORMAT(x), M_CORE_PRINTF_ARG(x) ) )
#define M_FPRINT_ARG_OUT_STR(file,oplist,var) M_CALL_OUT_STR( M_GLOBAL_OPLIST(oplist) , file, var)
#define M_FSCAN_ARG(xptr,f) _Generic(((void)0,*(xptr)), bool: m_core_fscan_bool(M_AS_TYPE(bool*,xptr), f), char: m_core_fscan_char(M_AS_TYPE(char*,xptr), f), signed char: m_core_fscan_schar(M_AS_TYPE(signed char*,xptr),f), unsigned char: m_core_fscan_uchar(M_AS_TYPE(unsigned char*,xptr),f), signed short: m_core_fscan_sshort(M_AS_TYPE(signed short*,xptr),f), unsigned short: m_core_fscan_ushort(M_AS_TYPE(unsigned short*,xptr), f), signed int: m_core_fscan_sint(M_AS_TYPE(signed int*,xptr), f), unsigned int: m_core_fscan_uint(M_AS_TYPE(unsigned int*,xptr), f), long int: m_core_fscan_slong(M_AS_TYPE(long*,xptr), f), unsigned long int: m_core_fscan_ulong(M_AS_TYPE(unsigned long*,xptr), f), long long int: m_core_fscan_sllong(M_AS_TYPE(long long*,xptr), f), unsigned long long int: m_core_fscan_ullong(M_AS_TYPE(unsigned long long*,xptr),f), float: m_core_fscan_float(M_AS_TYPE(float*,xptr), f), double: m_core_fscan_double(M_AS_TYPE(double*,xptr), f), long double: m_core_fscan_ldouble(M_AS_TYPE(long double*,xptr),f), const char *: false , char *: false , const void *: false , void *: false )
static inline _Bool
m_core_fscan_bool (_Bool *ptr, FILE *f)
{
  int c = fgetc(f);
  *ptr = (c == '1');
  return (c == '0' || c == '1');
}
static inline _Bool
m_core_fscan_char (char *ptr, FILE *f)
{
  int c = fgetc(f);
  *ptr = (char) c;
  return c != (-1);
}
#define M_FSCAN_DEFAULT_TYPE_DEF(name,type,format) static inline bool name (type *ptr, FILE *f) { return m_core_fscanf(f, format, ptr) == 1; }
static inline _Bool m_core_fscan_schar (signed char *ptr, FILE *f) { return fscanf(f, "%hhd", ptr) == 1; }
static inline _Bool m_core_fscan_uchar (unsigned char *ptr, FILE *f) { return fscanf(f, "%hhu", ptr) == 1; }
static inline _Bool m_core_fscan_sshort (signed short *ptr, FILE *f) { return fscanf(f, "%hd", ptr) == 1; }
static inline _Bool m_core_fscan_ushort (unsigned short *ptr, FILE *f) { return fscanf(f, "%hu", ptr) == 1; }
static inline _Bool m_core_fscan_sint (signed int *ptr, FILE *f) { return fscanf(f, "%d", ptr) == 1; }
static inline _Bool m_core_fscan_uint (unsigned int *ptr, FILE *f) { return fscanf(f, "%u", ptr) == 1; }
static inline _Bool m_core_fscan_slong (signed long *ptr, FILE *f) { return fscanf(f, "%ld", ptr) == 1; }
static inline _Bool m_core_fscan_ulong (unsigned long *ptr, FILE *f) { return fscanf(f, "%lu", ptr) == 1; }
static inline _Bool m_core_fscan_sllong (signed long long *ptr, FILE *f) { return fscanf(f, "%lld", ptr) == 1; }
static inline _Bool m_core_fscan_ullong (unsigned long long *ptr, FILE *f) { return fscanf(f, "%llu", ptr) == 1; }
static inline _Bool m_core_fscan_float (float *ptr, FILE *f) { return fscanf(f, "%f", ptr) == 1; }
static inline _Bool m_core_fscan_double (double *ptr, FILE *f) { return fscanf(f, "%lf", ptr) == 1; }
static inline _Bool m_core_fscan_ldouble (long double *ptr, FILE *f) { return fscanf(f, "%Lf", ptr) == 1; }
#define M_GET_STRING_ARG(str,x,append) (append ? string_cat_printf : string_printf) (str, M_PRINTF_FORMAT(x), M_CORE_PRINTF_ARG(x))
#define M_GET_STR_METHOD_FOR_DEFAULT_TYPE 
#define M_PARSE_DEFAULT_TYPE(x,str,endptr) _Generic(((void)0,*(x)), char: m_core_parse_char(M_AS_TYPE(char*,x),str,endptr), bool: m_core_parse_bool(M_AS_TYPE(bool*,x),str,endptr), signed char: m_core_parse_schar(M_AS_TYPE(signed char*,x),str,endptr), unsigned char: m_core_parse_uchar(M_AS_TYPE(unsigned char*,x),str,endptr), signed short: m_core_parse_sshort(M_AS_TYPE(signed short*,x),str,endptr), unsigned short: m_core_parse_ushort(M_AS_TYPE(unsigned short*,x),str,endptr), signed int: m_core_parse_sint(M_AS_TYPE(signed int*,x),str,endptr), unsigned int: m_core_parse_uint(M_AS_TYPE(unsigned int*,x),str,endptr), signed long: m_core_parse_slong(M_AS_TYPE(signed long *,x),str,endptr), unsigned long: m_core_parse_ulong(M_AS_TYPE(unsigned long*,x),str,endptr), signed long long: m_core_parse_sllong(M_AS_TYPE(signed long long*,x),str,endptr), unsigned long long: m_core_parse_ullong(M_AS_TYPE(unsigned long long*,x),str,endptr), float: m_core_parse_float(M_AS_TYPE(float*,x),str,endptr), double: m_core_parse_double(M_AS_TYPE(double*,x),str,endptr), long double: m_core_parse_ldouble(M_AS_TYPE(long double*,x),str,endptr), const char *: false , char *: false , const void *: false , void *: false )
static inline _Bool
m_core_parse_char (char *ptr, const char str[], const char **endptr)
{
    *ptr = *str++;
    if (endptr != ((void *)0)) *endptr = str;
    return 1;
}
static inline _Bool
m_core_parse_bool (_Bool *ptr, const char str[], const char **endptr)
{
  char c = *str++;
  *ptr = (c == '1');
  if (endptr != ((void *)0)) *endptr = str;
  return (c == '0' || c == '1');
}
#define M_PARSE_DEFAULT_TYPE_DEF(name,type,parse_func,extra_arg) static inline bool name (type *ptr, const char str[], const char **endptr) { char *end; *ptr = (type) parse_func (str, &end extra_arg); if (endptr != NULL) *endptr = end; return end != str; }
static inline _Bool m_core_parse_schar (signed char *ptr, const char str[], const char **endptr) { char *end; *ptr = (signed char) strtol (str, &end , 10); if (endptr != ((void *)0)) *endptr = end; return end != str; }
static inline _Bool m_core_parse_uchar (unsigned char *ptr, const char str[], const char **endptr) { char *end; *ptr = (unsigned char) strtoul (str, &end , 10); if (endptr != ((void *)0)) *endptr = end; return end != str; }
static inline _Bool m_core_parse_sshort (signed short *ptr, const char str[], const char **endptr) { char *end; *ptr = (signed short) strtol (str, &end , 10); if (endptr != ((void *)0)) *endptr = end; return end != str; }
static inline _Bool m_core_parse_ushort (unsigned short *ptr, const char str[], const char **endptr) { char *end; *ptr = (unsigned short) strtoul (str, &end , 10); if (endptr != ((void *)0)) *endptr = end; return end != str; }
static inline _Bool m_core_parse_sint (signed int *ptr, const char str[], const char **endptr) { char *end; *ptr = (signed int) strtol (str, &end , 10); if (endptr != ((void *)0)) *endptr = end; return end != str; }
static inline _Bool m_core_parse_uint (unsigned int *ptr, const char str[], const char **endptr) { char *end; *ptr = (unsigned int) strtoul (str, &end , 10); if (endptr != ((void *)0)) *endptr = end; return end != str; }
static inline _Bool m_core_parse_slong (signed long *ptr, const char str[], const char **endptr) { char *end; *ptr = (signed long) strtol (str, &end , 10); if (endptr != ((void *)0)) *endptr = end; return end != str; }
static inline _Bool m_core_parse_ulong (unsigned long *ptr, const char str[], const char **endptr) { char *end; *ptr = (unsigned long) strtoul (str, &end , 10); if (endptr != ((void *)0)) *endptr = end; return end != str; }
static inline _Bool m_core_parse_sllong (signed long long *ptr, const char str[], const char **endptr) { char *end; *ptr = (signed long long) strtoll (str, &end , 10); if (endptr != ((void *)0)) *endptr = end; return end != str; }
static inline _Bool m_core_parse_ullong (unsigned long long *ptr, const char str[], const char **endptr) { char *end; *ptr = (unsigned long long) strtoull (str, &end , 10); if (endptr != ((void *)0)) *endptr = end; return end != str; }
static inline _Bool m_core_parse_float (float *ptr, const char str[], const char **endptr) { char *end; *ptr = (float) strtof (str, &end ); if (endptr != ((void *)0)) *endptr = end; return end != str; }
static inline _Bool m_core_parse_double (double *ptr, const char str[], const char **endptr) { char *end; *ptr = (double) strtod (str, &end ); if (endptr != ((void *)0)) *endptr = end; return end != str; }
static inline _Bool m_core_parse_ldouble (long double *ptr, const char str[], const char **endptr) { char *end; *ptr = (long double) strtold (str, &end ); if (endptr != ((void *)0)) *endptr = end; return end != str; }
#define M_SEPARATE_PER_SEMICOLON(a,b) a ; b
#define M_PRINT(...) do { M_REDUCE(M_PRINT_ARG, M_SEPARATE_PER_SEMICOLON, __VA_ARGS__); } while (0)
#define M_FPRINT(f,...) do { M_REDUCE2(M_FPRINT_ARG, M_SEPARATE_PER_SEMICOLON, f, __VA_ARGS__); } while (0)
#define M_AS_TYPE(type,x) _Generic(((void)0,(x)), type: (x), default: (type) {0})
#define M_CONDITIONAL(cond,true_expr,false_expr) _Generic(1 ? (float *) 0 : (void *)(intptr_t) (cond), float *: false_expr, void *: true_expr)
#define M_MIN(x,y) ((x) < (y) ? (x) : (y))
#define M_MAX(x,y) ((x) > (y) ? (x) : (y))
#define M_POWEROF2_P(n) (!((n)&((n)-1)))
#define M_SWAP(type,x,y) do { type _tmp = (x); (x) = (y); (y) = _tmp; } while (0)
#define M_ASSIGN_CAST(type,n) ((type) { 0 } = (n))
#define M_CONST_CAST(type,n) (((union { type *ptr; type const *cptr; }){n}).cptr)
#define M_TYPE_FROM_FIELD(type,ptr,field_type,field) ((type *)(void*)( (char *)M_ASSIGN_CAST(field_type*, (ptr)) - offsetof(type, field) ))
#define M_CTYPE_FROM_FIELD(type,ptr,field_type,field) ((type const *)(const void*)( (const char *)M_ASSIGN_CAST(field_type const *, (ptr)) - offsetof(type, field) ))
#define M_APPLY_SIZEOF(id) sizeof (id)
#define M_ADD_SIZE(a,b) a + b
#define M_CACHELINE_ALIGN(name,...) char name[M_ALIGN_FOR_CACHELINE_EXCLUSION > M_REDUCE(M_APPLY_SIZEOF, M_ADD_SIZE, __VA_ARGS__) ? M_ALIGN_FOR_CACHELINE_EXCLUSION - M_REDUCE(M_APPLY_SIZEOF, M_ADD_SIZE, __VA_ARGS__) : 1]
#define M_MIN_FLEX_ARRAY_SIZE 
#define M_USE_CSTR_ALLOC 256
#define M_CSTR(...) M_ATTR_EXTENSION ({char m_core_tmp[M_USE_CSTR_ALLOC]; int m_core_r = snprintf(m_core_tmp, M_USE_CSTR_ALLOC, __VA_ARGS__); (void) m_core_r; m_core_tmp; })
#define M_USE_HASH_SEED 0UL
#define M_HASH_INIT 0UL
#define M_HASH_CALC(h1,h2) (((h1) * 0x811C9DC5UL) ^ (h2))
#define M_HASH_DECL(hash) size_t hash = M_HASH_INIT ^ M_USE_HASH_SEED
#define M_HASH_UP(hash,h) do { hash = (size_t) M_HASH_CALC(hash, (h)); } while (0)
#define M_HASH_FINAL(hash) ( (hash) >> (sizeof(size_t)*CHAR_BIT/2) | (hash) )
static inline uint32_t m_core_rotl32a (uint32_t x, uint32_t n)
{
  ((void)0);
  return (x<<n) | (x>>(32-n));
}
static inline uint64_t m_core_rotl64a (uint64_t x, uint32_t n)
{
  ((void)0);
  return (x<<n) | (x>>(64-n));
}
static inline uint64_t m_core_roundpow2(uint64_t v)
{
  v--;
  v |= v >> 1;
  v |= v >> 2;
  v |= v >> 4;
  v |= v >> 8;
  v |= v >> 16;
  v |= v >> 32;
  v++;
  return v;
}
static inline unsigned int m_core_clz32(uint32_t limb)
{
  return (unsigned int) (__builtin_expect(!!(limb == 0), 0) ? sizeof(uint32_t)*8 : (size_t) __builtin_clzl(limb) - (sizeof(unsigned long) - sizeof(uint32_t)) * 8);
}
static inline unsigned int m_core_clz64(uint64_t limb)
{
  return (unsigned int) (__builtin_expect(!!(limb == 0ULL), 0) ? sizeof (uint64_t)*8 : (size_t) __builtin_clzll(limb) - (sizeof (unsigned long long) - sizeof (uint64_t)) * 8);
}
static inline uint32_t
m_core_hash (const void *str, size_t length)
{
  const uint32_t prime = 709607U;
  uint32_t hash32 = 2166136261U ^ 0UL;
  const uint8_t *p = (const uint8_t *)str;
  ((void)0);
  ((void)0);
  while (length >= 2*sizeof(uint32_t)) {
    const uint32_t *ptr = (const uint32_t *) (uintptr_t) p;
    hash32 = (hash32 ^ (m_core_rotl32a(ptr[0], 5) ^ ptr[1])) * prime;
    length -= 2*sizeof(uint32_t);
    p += 2*sizeof(uint32_t);
  }
  if (length & sizeof(uint32_t)) {
    const uint32_t *ptr = (const uint32_t *) (uintptr_t) p;
    hash32 = (hash32 ^ ptr[0]) * prime;
    p += sizeof(uint32_t);
    }
  if (length & sizeof(uint16_t)) {
    const uint16_t *ptr = (const uint16_t *) (uintptr_t) p;
    hash32 = (hash32 ^ ptr[0]) * prime;
    p += sizeof(uint16_t);
  }
  if (length & 1)
    hash32 = (hash32 ^ *p) * prime;
  return hash32 ^ (hash32 >> 16);
}
static inline size_t m_core_cstr_hash(const char str[])
{
  size_t hash = 0UL ^ 0UL;
  while (*str) {
    unsigned long u = (unsigned char) *str++;
    do { hash = (size_t) (((hash) * 0x811C9DC5UL) ^ ((u))); } while (0);
  }
  return ( (hash) >> (sizeof(size_t)*8/2) | (hash) );
}
#define M_HASH_POD_DEFAULT(a) m_core_hash((const void*) &(a), sizeof (a))
#define M_HASH_INT32(a) ( (a) ^ ((a) << 11) ^ M_USE_HASH_SEED )
#define M_HASH_INT64(a) ( ( (a) >> 33 ) ^ (a) ^ ((a) << 11) ^ M_USE_HASH_SEED )
#define M_HASH_DEFAULT(a) (size_t) _Generic((a)+0, int32_t: M_HASH_INT32((uint32_t) M_AS_TYPE(int32_t, a)), uint32_t: M_HASH_INT32(M_AS_TYPE(uint32_t, a)), int64_t: M_HASH_INT64((uint64_t) M_AS_TYPE(int64_t, a)), uint64_t: M_HASH_INT64(M_AS_TYPE(uint64_t, a)), default: M_HASH_POD_DEFAULT(a) )
#define M_INIT_INIT(a) ,a,
#define M_INIT_SET_INIT_SET(a) ,a,
#define M_INIT_MOVE_INIT_MOVE(a) ,a,
#define M_INIT_WITH_INIT_WITH(a) ,a,
#define M_SWAP_SWAP(a) ,a,
#define M_SET_SET(a) ,a,
#define M_MOVE_MOVE(a) ,a,
#define M_CLEAR_CLEAR(a) ,a,
#define M_NEW_NEW(a) ,a,
#define M_DEL_DEL(a) ,a,
#define M_REALLOC_REALLOC(a) ,a,
#define M_FREE_FREE(a) ,a,
#define M_MEMPOOL_MEMPOOL(a) ,a,
#define M_MEMPOOL_LINKAGE_MEMPOOL_LINKAGE(a) ,a,
#define M_HASH_HASH(a) ,a,
#define M_EQUAL_EQUAL(a) ,a,
#define M_CMP_CMP(a) ,a,
#define M_TYPE_TYPE(a) ,a,
#define M_SUBTYPE_SUBTYPE(a) ,a,
#define M_NAME_NAME(a) ,a,
#define M_OPLIST_OPLIST(a) ,a,
#define M_SORT_SORT(a) ,a,
#define M_SPLICE_BACK_SPLICE_BACK(a) ,a,
#define M_SPLICE_AT_SPLICE_AT(a) ,a,
#define M_IT_TYPE_IT_TYPE(a) ,a,
#define M_IT_FIRST_IT_FIRST(a) ,a,
#define M_IT_LAST_IT_LAST(a) ,a,
#define M_IT_END_IT_END(a) ,a,
#define M_IT_SET_IT_SET(a) ,a,
#define M_IT_END_P_IT_END_P(a) ,a,
#define M_IT_LAST_P_IT_LAST_P(a) ,a,
#define M_IT_EQUAL_P_IT_EQUAL_P(a) ,a,
#define M_IT_NEXT_IT_NEXT(a) ,a,
#define M_IT_PREVIOUS_IT_PREVIOUS(a) ,a,
#define M_IT_REF_IT_REF(a) ,a,
#define M_IT_CREF_IT_CREF(a) ,a,
#define M_IT_REMOVE_IT_REMOVE(a) ,a,
#define M_IT_INSERT_IT_INSERT(a) ,a,
#define M_EMPTY_P_EMPTY_P(a) ,a,
#define M_ADD_ADD(a) ,a,
#define M_SUB_SUB(a) ,a,
#define M_MUL_MUL(a) ,a,
#define M_DIV_DIV(a) ,a,
#define M_RESET_RESET(a) ,a,
#define M_KEY_TYPE_KEY_TYPE(a) ,a,
#define M_VALUE_TYPE_VALUE_TYPE(a) ,a,
#define M_KEY_OPLIST_KEY_OPLIST(a) ,a,
#define M_VALUE_OPLIST_VALUE_OPLIST(a) ,a,
#define M_GET_KEY_GET_KEY(a) ,a,
#define M_SET_KEY_SET_KEY(a) ,a,
#define M_SAFE_GET_KEY_SAFE_GET_KEY(a) ,a,
#define M_ERASE_KEY_ERASE_KEY(a) ,a,
#define M_GET_SIZE_GET_SIZE(a) ,a,
#define M_PUSH_PUSH(a) ,a,
#define M_POP_POP(a) ,a,
#define M_PUSH_MOVE_PUSH_MOVE(a) ,a,
#define M_POP_MOVE_POP_MOVE(a) ,a,
#define M_REVERSE_REVERSE(a) ,a,
#define M_GET_STR_GET_STR(a) ,a,
#define M_PARSE_STR_PARSE_STR(a) ,a,
#define M_OUT_STR_OUT_STR(a) ,a,
#define M_IN_STR_IN_STR(a) ,a,
#define M_OUT_SERIAL_OUT_SERIAL(a) ,a,
#define M_IN_SERIAL_IN_SERIAL(a) ,a,
#define M_SEPARATOR_SEPARATOR(a) ,a,
#define M_EXT_ALGO_EXT_ALGO(a) ,a,
#define M_INC_ALLOC_INC_ALLOC(a) ,a,
#define M_OOR_SET_OOR_SET(a) ,a,
#define M_OOR_EQUAL_OOR_EQUAL(a) ,a,
#define M_LIMITS_LIMITS(a) ,a,
#define M_PROPERTIES_PROPERTIES(a) ,a,
#define M_LET_AS_INIT_WITH_LET_AS_INIT_WITH(a) ,a,
#define M_GET_METHOD(method,method_default,...) M_RET_ARG2 (M_MAP2B(M_C, M_C3(M_, method, _), __VA_ARGS__), method_default,)
#define M_GET_INIT(...) M_GET_METHOD(INIT, M_INIT_DEFAULT, __VA_ARGS__)
#define M_GET_INIT_SET(...) M_GET_METHOD(INIT_SET, M_SET_DEFAULT, __VA_ARGS__)
#define M_GET_INIT_MOVE(...) M_GET_METHOD(INIT_MOVE, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_INIT_WITH(...) M_GET_METHOD(INIT_WITH, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_SET(...) M_GET_METHOD(SET, M_SET_DEFAULT, __VA_ARGS__)
#define M_GET_MOVE(...) M_GET_METHOD(MOVE, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_SWAP(...) M_GET_METHOD(SWAP, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_CLEAR(...) M_GET_METHOD(CLEAR, M_NOTHING_DEFAULT, __VA_ARGS__)
#define M_GET_NEW(...) M_GET_METHOD(NEW, M_NEW_DEFAULT, __VA_ARGS__)
#define M_GET_DEL(...) M_GET_METHOD(DEL, M_DEL_DEFAULT, __VA_ARGS__)
#define M_GET_REALLOC(...) M_GET_METHOD(REALLOC, M_REALLOC_DEFAULT, __VA_ARGS__)
#define M_GET_FREE(...) M_GET_METHOD(FREE, M_FREE_DEFAULT, __VA_ARGS__)
#define M_GET_MEMPOOL(...) M_GET_METHOD(MEMPOOL, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_MEMPOOL_LINKAGE(...) M_GET_METHOD(MEMPOOL_LINKAGE, , __VA_ARGS__)
#define M_GET_HASH(...) M_GET_METHOD(HASH, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_EQUAL(...) M_GET_METHOD(EQUAL, M_EQUAL_DEFAULT, __VA_ARGS__)
#define M_GET_CMP(...) M_GET_METHOD(CMP, M_CMP_DEFAULT, __VA_ARGS__)
#define M_GET_TYPE(...) M_GET_METHOD(TYPE, M_NO_DEF_TYPE, __VA_ARGS__)
#define M_GET_SUBTYPE(...) M_GET_METHOD(SUBTYPE, M_NO_DEF_TYPE, __VA_ARGS__)
#define M_GET_NAME(...) M_GET_METHOD(NAME, M_NO_DEF_TYPE, __VA_ARGS__)
#define M_GET_OPLIST(...) M_GET_METHOD(OPLIST, (), __VA_ARGS__)
#define M_GET_SORT(...) M_GET_METHOD(SORT, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_SPLICE_BACK(...) M_GET_METHOD(SPLICE_BACK, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_SPLICE_AT(...) M_GET_METHOD(SPLICE_AT, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IT_TYPE(...) M_GET_METHOD(IT_TYPE, M_NO_DEF_TYPE, __VA_ARGS__)
#define M_GET_IT_FIRST(...) M_GET_METHOD(IT_FIRST, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IT_LAST(...) M_GET_METHOD(IT_LAST, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IT_END(...) M_GET_METHOD(IT_END, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IT_SET(...) M_GET_METHOD(IT_SET, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IT_END_P(...) M_GET_METHOD(IT_END_P, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IT_LAST_P(...) M_GET_METHOD(IT_LAST_P, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IT_EQUAL_P(...) M_GET_METHOD(IT_EQUAL_P, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IT_NEXT(...) M_GET_METHOD(IT_NEXT, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IT_PREVIOUS(...) M_GET_METHOD(IT_PREVIOUS, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IT_REF(...) M_GET_METHOD(IT_REF, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IT_CREF(...) M_GET_METHOD(IT_CREF, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IT_REMOVE(...) M_GET_METHOD(IT_REMOVE, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IT_INSERT(...) M_GET_METHOD(IT_INSERT, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_EMPTY_P(...) M_GET_METHOD(EMPTY_P, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_ADD(...) M_GET_METHOD(ADD, M_ADD_DEFAULT, __VA_ARGS__)
#define M_GET_SUB(...) M_GET_METHOD(SUB, M_SUB_DEFAULT, __VA_ARGS__)
#define M_GET_MUL(...) M_GET_METHOD(MUL, M_MUL_DEFAULT, __VA_ARGS__)
#define M_GET_DIV(...) M_GET_METHOD(DIV, M_DIV_DEFAULT, __VA_ARGS__)
#define M_GET_RESET(...) M_GET_METHOD(RESET, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_KEY_TYPE(...) M_GET_METHOD(KEY_TYPE, M_NO_DEF_TYPE, __VA_ARGS__)
#define M_GET_VALUE_TYPE(...) M_GET_METHOD(VALUE_TYPE, M_NO_DEF_TYPE, __VA_ARGS__)
#define M_GET_KEY_OPLIST(...) M_GET_METHOD(KEY_OPLIST, M_NO_DEF_TYPE, __VA_ARGS__)
#define M_GET_VALUE_OPLIST(...) M_GET_METHOD(VALUE_OPLIST, M_NO_DEF_TYPE, __VA_ARGS__)
#define M_GET_GET_KEY(...) M_GET_METHOD(GET_KEY, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_SET_KEY(...) M_GET_METHOD(SET_KEY, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_SAFE_GET_KEY(...) M_GET_METHOD(SAFE_GET_KEY, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_ERASE_KEY(...) M_GET_METHOD(ERASE_KEY, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_GET_SIZE(...) M_GET_METHOD(GET_SIZE, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_PUSH(...) M_GET_METHOD(PUSH, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_POP(...) M_GET_METHOD(POP, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_PUSH_MOVE(...) M_GET_METHOD(PUSH_MOVE, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_POP_MOVE(...) M_GET_METHOD(POP_MOVE, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_REVERSE(...) M_GET_METHOD(REVERSE, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_GET_STR(...) M_GET_METHOD(GET_STR, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_PARSE_STR(...) M_GET_METHOD(PARSE_STR, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_OUT_STR(...) M_GET_METHOD(OUT_STR, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IN_STR(...) M_GET_METHOD(IN_STR, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_OUT_SERIAL(...) M_GET_METHOD(OUT_SERIAL, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_IN_SERIAL(...) M_GET_METHOD(IN_SERIAL, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_SEPARATOR(...) M_GET_METHOD(SEPARATOR, ',', __VA_ARGS__)
#define M_GET_EXT_ALGO(...) M_GET_METHOD(EXT_ALGO, M_NO_EXT_ALGO, __VA_ARGS__)
#define M_GET_INC_ALLOC(...) M_GET_METHOD(INC_ALLOC, M_INC_ALLOC_DEFAULT, __VA_ARGS__)
#define M_GET_OOR_SET(...) M_GET_METHOD(OOR_SET, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_OOR_EQUAL(...) M_GET_METHOD(OOR_EQUAL, M_NO_DEFAULT, __VA_ARGS__)
#define M_GET_LIMITS(...) M_GET_METHOD(LIMITS, M_LIMITS_DEFAULT, __VA_ARGS__)
#define M_GET_PROPERTIES(...) M_GET_METHOD(PROPERTIES, (), __VA_ARGS__)
#define M_CALL_INIT(oplist,...) M_APPLY_API(M_GET_INIT oplist, oplist, __VA_ARGS__)
#define M_CALL_INIT_SET(oplist,...) M_APPLY_API(M_GET_INIT_SET oplist, oplist, __VA_ARGS__)
#define M_CALL_INIT_MOVE(oplist,...) M_APPLY_API(M_GET_INIT_MOVE oplist, oplist, __VA_ARGS__)
#define M_CALL_INIT_WITH(oplist,...) M_APPLY_API(M_GET_INIT_WITH oplist, oplist, __VA_ARGS__)
#define M_CALL_SET(oplist,...) M_APPLY_API(M_GET_SET oplist, oplist, __VA_ARGS__)
#define M_CALL_MOVE(oplist,...) M_APPLY_API(M_GET_MOVE oplist, oplist, __VA_ARGS__)
#define M_CALL_SWAP(oplist,...) M_APPLY_API(M_GET_SWAP oplist, oplist, __VA_ARGS__)
#define M_CALL_CLEAR(oplist,...) M_APPLY_API(M_GET_CLEAR oplist, oplist, __VA_ARGS__)
#define M_CALL_NEW(oplist,...) M_APPLY_API(M_GET_NEW oplist, oplist, __VA_ARGS__)
#define M_CALL_DEL(oplist,...) M_APPLY_API(M_GET_DEL oplist, oplist, __VA_ARGS__)
#define M_CALL_REALLOC(oplist,...) M_APPLY_API(M_GET_REALLOC oplist, oplist, __VA_ARGS__)
#define M_CALL_FREE(oplist,...) M_APPLY_API(M_GET_FREE oplist, oplist, __VA_ARGS__)
#define M_CALL_MEMPOOL(oplist,...) M_APPLY_API(M_GET_MEMPOOL oplist, oplist, __VA_ARGS__)
#define M_CALL_MEMPOOL_LINKAGE(oplist,...) M_APPLY_API(M_GET_MEMPOOL_LINKAGE oplist, oplist, __VA_ARGS__)
#define M_CALL_HASH(oplist,...) M_APPLY_API(M_GET_HASH oplist, oplist, __VA_ARGS__)
#define M_CALL_EQUAL(oplist,...) M_APPLY_API(M_GET_EQUAL oplist, oplist, __VA_ARGS__)
#define M_CALL_CMP(oplist,...) M_APPLY_API(M_GET_CMP oplist, oplist, __VA_ARGS__)
#define M_CALL_SORT(oplist,...) M_APPLY_API(M_GET_SORT oplist, oplist, __VA_ARGS__)
#define M_CALL_SPLICE_BACK(oplist,...) M_APPLY_API(M_GET_SPLICE_BACK oplist, oplist, __VA_ARGS__)
#define M_CALL_SPLICE_AT(oplist,...) M_APPLY_API(M_GET_SPLICE_AT oplist, oplist, __VA_ARGS__)
#define M_CALL_IT_FIRST(oplist,...) M_APPLY_API(M_GET_IT_FIRST oplist, oplist, __VA_ARGS__)
#define M_CALL_IT_LAST(oplist,...) M_APPLY_API(M_GET_IT_LAST oplist, oplist, __VA_ARGS__)
#define M_CALL_IT_END(oplist,...) M_APPLY_API(M_GET_IT_END oplist, oplist, __VA_ARGS__)
#define M_CALL_IT_SET(oplist,...) M_APPLY_API(M_GET_IT_SET oplist, oplist, __VA_ARGS__)
#define M_CALL_IT_END_P(oplist,...) M_APPLY_API(M_GET_IT_END_P oplist, oplist, __VA_ARGS__)
#define M_CALL_IT_LAST_P(oplist,...) M_APPLY_API(M_GET_IT_LAST_P oplist, oplist, __VA_ARGS__)
#define M_CALL_IT_EQUAL_P(oplist,...) M_APPLY_API(M_GET_IT_EQUAL_P oplist, oplist, __VA_ARGS__)
#define M_CALL_IT_NEXT(oplist,...) M_APPLY_API(M_GET_IT_NEXT oplist, oplist, __VA_ARGS__)
#define M_CALL_IT_PREVIOUS(oplist,...) M_APPLY_API(M_GET_IT_PREVIOUS oplist, oplist, __VA_ARGS__)
#define M_CALL_IT_REF(oplist,...) M_APPLY_API(M_GET_IT_REF oplist, oplist, __VA_ARGS__)
#define M_CALL_IT_CREF(oplist,...) M_APPLY_API(M_GET_IT_CREF oplist, oplist, __VA_ARGS__)
#define M_CALL_IT_REMOVE(oplist,...) M_APPLY_API(M_GET_IT_REMOVE oplist, oplist, __VA_ARGS__)
#define M_CALL_IT_INSERT(oplist,...) M_APPLY_API(M_GET_IT_INSERT oplist, oplist, __VA_ARGS__)
#define M_CALL_EMPTY_P(oplist,...) M_APPLY_API(M_GET_EMPTY_P oplist, oplist, __VA_ARGS__)
#define M_CALL_ADD(oplist,...) M_APPLY_API(M_GET_ADD oplist, oplist, __VA_ARGS__)
#define M_CALL_SUB(oplist,...) M_APPLY_API(M_GET_SUB oplist, oplist, __VA_ARGS__)
#define M_CALL_MUL(oplist,...) M_APPLY_API(M_GET_MUL oplist, oplist, __VA_ARGS__)
#define M_CALL_DIV(oplist,...) M_APPLY_API(M_GET_DIV oplist, oplist, __VA_ARGS__)
#define M_CALL_RESET(oplist,...) M_APPLY_API(M_GET_RESET oplist, oplist, __VA_ARGS__)
#define M_CALL_GET_KEY(oplist,...) M_APPLY_API(M_GET_GET_KEY oplist, oplist, __VA_ARGS__)
#define M_CALL_SET_KEY(oplist,...) M_APPLY_API(M_GET_SET_KEY oplist, oplist, __VA_ARGS__)
#define M_CALL_SAFE_GET_KEY(oplist,...) M_APPLY_API(M_GET_SAFE_GET_KEY oplist, oplist, __VA_ARGS__)
#define M_CALL_ERASE_KEY(oplist,...) M_APPLY_API(M_GET_ERASE_KEY oplist, oplist, __VA_ARGS__)
#define M_CALL_GET_SIZE(oplist,...) M_APPLY_API(M_GET_GET_SIZE oplist, oplist, __VA_ARGS__)
#define M_CALL_PUSH(oplist,...) M_APPLY_API(M_GET_PUSH oplist, oplist, __VA_ARGS__)
#define M_CALL_POP(oplist,...) M_APPLY_API(M_GET_POP oplist, oplist, __VA_ARGS__)
#define M_CALL_PUSH_MOVE(oplist,...) M_APPLY_API(M_GET_PUSH_MOVE oplist, oplist, __VA_ARGS__)
#define M_CALL_POP_MOVE(oplist,...) M_APPLY_API(M_GET_POP_MOVE oplist, oplist, __VA_ARGS__)
#define M_CALL_REVERSE(oplist,...) M_APPLY_API(M_GET_REVERSE oplist, oplist, __VA_ARGS__)
#define M_CALL_GET_STR(oplist,...) M_APPLY_API(M_GET_GET_STR oplist, oplist, __VA_ARGS__)
#define M_CALL_PARSE_STR(oplist,...) M_APPLY_API(M_GET_PARSE_STR oplist, oplist, __VA_ARGS__)
#define M_CALL_OUT_STR(oplist,...) M_APPLY_API(M_GET_OUT_STR oplist, oplist, __VA_ARGS__)
#define M_CALL_IN_STR(oplist,...) M_APPLY_API(M_GET_IN_STR oplist, oplist, __VA_ARGS__)
#define M_CALL_OUT_SERIAL(oplist,...) M_APPLY_API(M_GET_OUT_SERIAL oplist, oplist, __VA_ARGS__)
#define M_CALL_IN_SERIAL(oplist,...) M_APPLY_API(M_GET_IN_SERIAL oplist, oplist, __VA_ARGS__)
#define M_CALL_INC_ALLOC(oplist,...) M_APPLY_API(M_GET_INC_ALLOC oplist, oplist, __VA_ARGS__)
#define M_CALL_OOR_SET(oplist,...) M_APPLY_API(M_GET_OOR_SET oplist, oplist, __VA_ARGS__)
#define M_CALL_OOR_EQUAL(oplist,...) M_APPLY_API(M_GET_OOR_EQUAL oplist, oplist, __VA_ARGS__)
#define M_APPLY_API(method,oplist,...) M_RET_ARG3( , M_C(M_OPLAPI_INDIRECT_, method)(M_C(M_OPLAPI_EXTRACT_,method),oplist,__VA_ARGS__), method(__VA_ARGS__),)
#define M_OPLAPI_ERROR(method,oplist,...) , M_STATIC_FAILURE(M_LIB_DISABLED_METHOD, "The method has been explictly disabled for the requested operator, yet it has been called by the container")
#define M_OPLAPI_0(method,oplist,...) , M_DELAY3(method)(__VA_ARGS__)
#define M_OPLAPI_1(method,oplist,...) , M_DELAY3(method)(oplist, __VA_ARGS__)
#define M_OPLAPI_2(method,oplist,...) , M_DELAY3(method)(& __VA_ARGS__)
#define M_OPLAPI_3(method,oplist,...) , M_DELAY3(method)(oplist, &__VA_ARGS__)
#define M_OPLAPI_4(method,oplist,x,...) , x = M_DELAY3(method)(__VA_ARGS__)
#define M_OPLAPI_5(method,oplist,x,...) , x = M_DELAY3(method)(oplist, __VA_ARGS__)
#define M_OPLAPI_6(method,oplist,x,...) , M_DELAY3(method)(&x, &__VA_ARGS__)
#define M_OPLAPI_7(method,oplist,x,...) , M_DELAY3(method)(oplist, &x, &__VA_ARGS__)
#define M_OPLAPI_INDIRECT_0 M_OPLAPI_ERROR
#define M_OPLAPI_INDIRECT_API_0(...) M_OPLAPI_0
#define M_OPLAPI_EXTRACT_API_0(...) __VA_ARGS__
#define M_OPLAPI_INDIRECT_API_1(...) M_OPLAPI_1
#define M_OPLAPI_EXTRACT_API_1(...) __VA_ARGS__
#define M_OPLAPI_INDIRECT_API_2(...) M_OPLAPI_2
#define M_OPLAPI_EXTRACT_API_2(...) __VA_ARGS__
#define M_OPLAPI_INDIRECT_API_3(...) M_OPLAPI_3
#define M_OPLAPI_EXTRACT_API_3(...) __VA_ARGS__
#define M_OPLAPI_INDIRECT_API_4(...) M_OPLAPI_4
#define M_OPLAPI_EXTRACT_API_4(...) __VA_ARGS__
#define M_OPLAPI_INDIRECT_API_5(...) M_OPLAPI_5
#define M_OPLAPI_EXTRACT_API_5(...) __VA_ARGS__
#define M_OPLAPI_INDIRECT_API_6(...) M_OPLAPI_6
#define M_OPLAPI_EXTRACT_API_6(...) __VA_ARGS__
#define M_OPLAPI_INDIRECT_API_7(...) M_OPLAPI_7
#define M_OPLAPI_EXTRACT_API_7(...) __VA_ARGS__
#define M_NO_DEFAULT(...) M_STATIC_FAILURE(M_LIB_MISSING_METHOD, "The requested operator has no method registered in the given OPLIST. ")
#define M_NO_DEF_TYPE M_STATIC_FAILURE(M_LIB_MISSING_METHOD, "The requested operator has no type/subtype/suboplist registered in the given OPLIST. ")
#define M_CHECK_DEFAULT_TYPE(a) M_STATIC_ASSERT(sizeof (a) <= M_MAX(sizeof(long long), M_MAX(sizeof (long double), sizeof (uintmax_t))), M_LIB_NOT_A_DEFAULT_TYPE, "The given variable is too big to be a default type," "but the used macro can only be used with such one." "It is likely the given oplist is not right.")
#define M_CHECK_SAME(a,b) M_STATIC_ASSERT(sizeof(a) == sizeof(b), M_LIB_NOT_SAME_TYPE, "The variable " M_AS_STR(a) " and " M_AS_STR(b) " are not of same type.")
#define M_CHECK_COMPATIBLE_OPLIST(name,inst,type,oplist) M_IF_METHOD(TYPE, oplist) ( static inline void M_C3(m_c0re_ctype_, name, inst)(void) { type x; M_STATIC_ASSERT(_Generic(&x, M_GET_TYPE oplist *: 1 , default: 0 ), M_LIB_TYPE_MISTMACH, "The given type " M_AS_STR(type) " and the type of the oplist does not match: " M_AS_STR(oplist) ); } , )
#define M_INIT_DEFAULT(a) ((a) = 0)
#define M_SET_DEFAULT(a,b) (M_CHECK_DEFAULT_TYPE(a), (a) = (b))
#define M_NOTHING_DEFAULT(...) ((void)(__VA_ARGS__))
#define M_EMPTY_DEFAULT(...) ((void)1)
#define M_TRUE_DEFAULT(...) true
#define M_NEW_DEFAULT(a) M_MEMORY_ALLOC(a)
#define M_DEL_DEFAULT(a) M_MEMORY_DEL(a)
#define M_REALLOC_DEFAULT(t,p,s) M_MEMORY_REALLOC(t,p,s)
#define M_FREE_DEFAULT(a) M_MEMORY_FREE(a)
#define M_EQUAL_DEFAULT(a,b) ((a) == (b))
#define M_CMP_DEFAULT(a,b) ((a) < (b) ? -1 : (a) > (b))
#define M_ADD_DEFAULT(a,b,c) ((a) = (b) + (c))
#define M_SUB_DEFAULT(a,b,c) ((a) = (b) - (c))
#define M_MUL_DEFAULT(a,b,c) ((a) = (b) * (c))
#define M_DIV_DEFAULT(a,b,c) ((a) = (b) / (c))
#define M_AND_DEFAULT(a,b,c) ((a) = (b) & (c))
#define M_OR_DEFAULT(a,b,c) ((a) = (b) | (c))
#define M_NO_EXT_ALGO(n,co,to) 
#define M_INC_ALLOC_DEFAULT(n) (M_MAX(8, (n))*2)
#define M_LIMIT_BASE_TYPE_DFT 6
#define M_LIMIT_IT_TYPE_DFT 4
#define M_LIMIT_IT_REF_DFT 0
#define M_LIMITS_DEFAULT ( M_LIMIT_BASE_TYPE_DFT, M_LIMIT_IT_TYPE_DFT, M_LIMIT_IT_REF_DFT)
#define M_MOVE_DEFAULT(a,b) (M_CHECK_SAME(a, b), M_MEMCPY_DEFAULT(a, b), memset(&(b), 0, sizeof (a)))
#define M_MEMCPY_DEFAULT(a,b) (M_CHECK_SAME(a, b), memcpy(&(a), &(b), sizeof (a)))
#define M_MEMSET_DEFAULT(a) (memset(&(a), 0, sizeof (a)))
#define M_MEMCMP1_DEFAULT(a,b) (M_CHECK_SAME(a, b), memcmp(&(a), &(b), sizeof (a)) == 0)
#define M_MEMCMP2_DEFAULT(a,b) (M_CHECK_SAME(a, b), memcmp(&(a), &(b), sizeof (a)))
#define M_SWAP_DEFAULT(el1,el2) do { char _tmp[sizeof (el1)]; M_CHECK_SAME(el1, el2); memcpy(&_tmp, &(el1), sizeof (el1)); memcpy(&(el1), &(el2), sizeof (el1)); memcpy(&(el2), &_tmp, sizeof (el1)); } while (0)
#define M_MOVE_A1_DEFAULT(a,b) (M_CHECK_SAME(a[0], b[0]), M_MEMCPY_A1_DEFAULT(a, b), M_MEMSET_A1_DEFAULT(b))
#define M_MEMCPY_A1_DEFAULT(a,b) (M_CHECK_SAME(a[0], b[0]), memcpy(&(a[0]), &(b[0]), sizeof (a[0])))
#define M_MEMSET_A1_DEFAULT(a) (memset(&(a[0]), 0, sizeof (a[0])))
#define M_MEMCMP1_A1_DEFAULT(a,b) (M_CHECK_SAME(a[0],b[0]), memcmp(&(a[0]), &(b[0]), sizeof (a[0])) == 0)
#define M_MEMCMP2_A1_DEFAULT(a,b) (M_CHECK_SAME(a[0], b[0]), memcmp(&(a[0]), &(b[0]), sizeof (a[0])))
#define M_HASH_A1_DEFAULT(a) (m_core_hash((const void*) &(a[0]), sizeof (a[0])) )
#define M_POD_OPLIST (INIT(M_MEMSET_DEFAULT), INIT_SET(M_MEMCPY_DEFAULT), SET(M_MEMCPY_DEFAULT), CLEAR(M_NOTHING_DEFAULT), EQUAL(M_MEMCMP1_DEFAULT), CMP(M_MEMCMP2_DEFAULT), HASH(M_HASH_POD_DEFAULT), SWAP(M_SWAP_DEFAULT))
#define M_A1_OPLIST (INIT(M_MEMSET_A1_DEFAULT), INIT_SET(M_MEMCPY_A1_DEFAULT), SET(M_MEMCPY_A1_DEFAULT), CLEAR(M_NOTHING_DEFAULT), EQUAL(M_MEMCMP1_A1_DEFAULT), CMP(M_MEMCMP2_A1_DEFAULT), HASH(M_HASH_A1_DEFAULT))
#define M_EMPTY_OPLIST (INIT(M_EMPTY_DEFAULT), INIT_SET(M_EMPTY_DEFAULT), SET(M_EMPTY_DEFAULT), CLEAR(M_EMPTY_DEFAULT), INIT_MOVE(M_EMPTY_DEFAULT), MOVE(M_EMPTY_DEFAULT), EQUAL(M_TRUE_DEFAULT), GET_STR(M_EMPTY_DEFAULT), OUT_STR(M_EMPTY_DEFAULT), IN_STR(M_TRUE_DEFAULT), OUT_SERIAL(M_EMPTY_DEFAULT), IN_SERIAL(M_TRUE_DEFAULT), PARSE_STR(M_TRUE_DEFAULT))
#define M_DEFAULT_OPLIST (INIT(M_INIT_DEFAULT), INIT_SET(M_SET_DEFAULT), SET(M_SET_DEFAULT), CLEAR(M_NOTHING_DEFAULT), EQUAL(M_EQUAL_DEFAULT), CMP(M_CMP_DEFAULT), INIT_MOVE(M_MOVE_DEFAULT), MOVE(M_MOVE_DEFAULT) , RESET(M_INIT_DEFAULT), ADD(M_ADD_DEFAULT), SUB(M_SUB_DEFAULT), MUL(M_MUL_DEFAULT), DIV(M_DIV_DEFAULT), HASH(M_HASH_DEFAULT), SWAP(M_SWAP_DEFAULT) , IN_STR(M_FSCAN_ARG M_IPTR), OUT_STR(M_FPRINT_ARG), IN_SERIAL(M_IN_SERIAL_DEFAULT_ARG M_IPTR), OUT_SERIAL(M_OUT_SERIAL_DEFAULT_ARG), PARSE_STR(M_PARSE_DEFAULT_TYPE M_IPTR), M_GET_STR_METHOD_FOR_DEFAULT_TYPE)
#define M_BOOL_OPLIST M_OPEXTEND(M_DEFAULT_OPLIST, ADD(M_OR_DEFAULT), MUL(M_AND_DEFAULT), SUB(0), DIV(0))
#define M_ENUM_OPLIST(type,init) (INIT(API_1(M_ENUM_INIT)), INIT_SET(M_SET_DEFAULT), SET(M_SET_DEFAULT), CLEAR(M_NOTHING_DEFAULT), EQUAL(M_EQUAL_DEFAULT), CMP(M_CMP_DEFAULT), INIT_MOVE(M_MOVE_DEFAULT), MOVE(M_MOVE_DEFAULT) , HASH(M_HASH_POD_DEFAULT), SWAP(M_SWAP_DEFAULT), TYPE(type), OPLIST(init), IN_STR(API_1(M_ENUM_FSCAN)), OUT_STR(M_ENUM_FPRINT), IN_SERIAL(API_1(M_ENUM_IN_SERIAL)), OUT_SERIAL(M_ENUM_OUT_SERIAL), PARSE_STR(API_1(M_ENUM_PARSE)), M_GET_STR_METHOD_FOR_ENUM_TYPE )
#define M_GET_STR_METHOD_FOR_ENUM_TYPE 
#define M_ENUM_INIT(oplist,var) ((var) = M_GET_OPLIST oplist )
static inline long long
m_core_fscan_enum (FILE *f)
{
  long long ret;
  int s = fscanf(f, "%lld", &ret) == 1;
  ungetc(s, f);
  return ret;
}
#define M_ENUM_FPRINT(f,var) fprintf( (f), "%lld", (long long) (var))
#define M_ENUM_FSCAN(oplist,var,f) ( var = (M_GET_TYPE oplist) (true ? m_core_fscan_enum(f) : 0), fgetc(f))
static inline long long
m_core_parse1_enum (const char str[])
{
  return strtoll(str, ((void *)0), 10);
}
static inline _Bool
m_core_parse2_enum (const char str[], const char **endptr)
{
  char *end;
  strtoll(str, &end, 10);
  if (endptr != ((void *)0)) *endptr = end;
  return end != str;
}
#define M_ENUM_OUT_SERIAL(serial,var) ((serial)->m_interface->write_integer(serial, (long long) (var), sizeof (var)))
#define M_ENUM_IN_SERIAL(oplist,var,serial) ( var = (M_GET_TYPE oplist)(true ? m_core_in_serial_enum(serial) : 0), (serial)->tmp.r)
#define M_ENUM_GET_STR(str,var,append) ((append ? string_cat_printf : string_printf) (str, "%lld", (long long) (var) ))
#define M_ENUM_PARSE(oplist,var,str,endptr) ( var = (M_GET_TYPE oplist) (true ? m_core_parse1_enum(str) : 0), m_core_parse2_enum(str, endptr))
#define M_PTR_OPLIST (INIT(M_INIT_DEFAULT), INIT_SET(M_SET_DEFAULT), SET(M_SET_DEFAULT), CLEAR(M_NOTHING_DEFAULT), EQUAL(M_EQUAL_DEFAULT), INIT_MOVE(M_MOVE_DEFAULT), MOVE(M_MOVE_DEFAULT) , SWAP(M_SWAP_DEFAULT) )
#define M_CLASSIC_OPLIST(name) ( INIT(M_C(name, _init)), INIT_SET(M_C(name, _init_set)), SET(M_C(name, _set)), CLEAR(M_C(name, _clear)), TYPE(M_C(name, _t)) )
#define M_CSTR_EQUAL(a,b) (strcmp((a),(b)) == 0)
#define M_CSTR_OUT_STR(file,str) fprintf(file, "%s", str)
#define M_CSTR_OPLIST (INIT(M_INIT_DEFAULT), INIT_SET(M_SET_DEFAULT), SET(M_SET_DEFAULT), CLEAR(M_NOTHING_DEFAULT), HASH(m_core_cstr_hash), EQUAL(M_CSTR_EQUAL), CMP(strcmp), TYPE(const char *), OUT_STR(M_CSTR_OUT_STR) )
#define M_OPFLAT(...) __VA_ARGS__
#define M_OPCAT(op1,op2) (M_OPFLAT op1, M_OPFLAT op2)
#define M_OPAPPLY(a,oplist) a oplist
#define M_OPEXTEND(op,...) (__VA_ARGS__, M_OPFLAT op)
#define M_GET_PROPERTY(oplist,propname) M_GET_METHOD (propname, 0, M_OPFLAT M_GET_PROPERTIES oplist)
#define M_TEST_METHOD_P(method,oplist) M_BOOL(M_GET_METHOD (method, 0, M_OPFLAT oplist))
#define M_TEST_METHOD_ALTER_P(method,oplist) M_INV(M_EMPTY_P(M_GET_METHOD (method, , M_OPFLAT oplist)))
#define M_TEST_DISABLED_METHOD_P(method,oplist) M_INV(M_BOOL(M_GET_METHOD (method, 1, M_OPFLAT oplist)))
#define M_IF_METHOD(method,oplist) M_IF(M_TEST_METHOD_P(method, oplist))
#define M_IF_DISABLED_METHOD(method,oplist) M_IF(M_TEST_DISABLED_METHOD_P(method, oplist))
#define M_IF_METHOD_BOTH(method,oplist1,oplist2) M_IF(M_AND(M_TEST_METHOD_P(method, oplist1), M_TEST_METHOD_P(method, oplist2)))
#define M_IF_METHOD2(method1,method2,oplist) M_IF(M_AND(M_TEST_METHOD_P(method1, oplist), M_TEST_METHOD_P(method2, oplist)))
#define M_IF_AT_LEAST_METHOD(method1,method2,oplist) M_IF(M_OR(M_TEST_METHOD_P(method1, oplist), M_TEST_METHOD_P(method2, oplist)))
#define M_IF_METHOD2_BOTH(method1,method2,oplist1,oplist2) M_IF(M_AND(M_AND(M_TEST_METHOD_P(method1, oplist1), M_TEST_METHOD_P(method1, oplist2)), M_AND(M_TEST_METHOD_P(method2, oplist1), M_TEST_METHOD_P(method2, oplist2))))
#define M_IF_METHOD_ALL(method,...) M_IF(M_REDUCE2(M_TEST_METHOD_P, M_AND, method, __VA_ARGS__))
#define M_IF_METHOD2_ALL(method1,method2,...) M_IF(M_REDUCE2(M_TEST_METHOD2_P, M_AND, (method1, method2), __VA_ARGS__))
#define M_TEST_METHOD2_P(method_pair,oplist) M_AND(M_TEST_METHOD_P(M_PAIR_1 method_pair, oplist), M_TEST_METHOD_P(M_PAIR_2 method_pair, oplist))
#define M_IPTR(...) ( & __VA_ARGS__ )
#define M_DO_INIT_MOVE(oplist,dest,src) do { M_IF_METHOD(INIT_MOVE, oplist)(M_CALL_INIT_MOVE(oplist, (dest), (src)), M_CALL_INIT_SET(oplist, (dest), (src)) ; M_CALL_CLEAR(oplist, (src) )); } while (0)
#define M_DO_MOVE(oplist,dest,src) do { M_IF_METHOD(MOVE, oplist) (M_CALL_MOVE(oplist, (dest), (src)), M_IF_METHOD(INIT_MOVE, oplist)(M_CALL_CLEAR(oplist, (dest)); M_CALL_INIT_MOVE(oplist, (dest), (src)), M_CALL_SET(oplist, (dest), (src)); M_CALL_CLEAR(oplist, (src)) )); } while (0)
#define M_OPLIST_P(a) M_AND(M_PARENTHESIS_P(a), M_INV(M_PARENTHESIS_P (M_OPFLAT a)))
#define M_IF_OPLIST(a) M_IF(M_OPLIST_P(a))
#define M_GLOBAL_OPLIST(a) M_IF( M_OPLIST_P(a))(M_GLOBALI_ID, M_GLOBALI_OPLIST_ELSE)(a)
#define M_GLOBALI_ID(a) a
#define M_GLOBALI_OPLIST_ELSE(a) M_GLOBALI_OPLIST_ELSE2(a, M_C(M_OPL_, a)())
#define M_GLOBALI_OPLIST_ELSE2(a,op) M_IF( M_OPLIST_P (op))(op, a)
#define M_GLOBAL_TYPE(a) M_IF( M_OPLIST_P(a))(M_GLOBALI_TYPE_GET, M_GLOBALI_ID)(a)
#define M_GLOBALI_TYPE_GET(a) M_GET_TYPE a
#define M_GLOBAL_OPLIST_OR_DEF(a) M_IF( M_PARENTHESIS_P(a))(M_GLOBALI_OPLIST_DEFAULT1, M_GLOBALI_OPLIST_OR_DEF_ELSE)(a)
#define M_GLOBALI_OPLIST_DEFAULT1(a) M_GLOBALI_OPLIST_DEFAULT2
#define M_GLOBALI_OPLIST_DEFAULT2() M_DEFAULT_OPLIST
#define M_GLOBALI_OPLIST_OR_DEF_ELSE(a) M_GLOBALI_OPLIST_OR_DEF_ELSE2(a, M_C(M_OPL_, a)())
#define M_GLOBALI_OPLIST_OR_DEF_ELSE2(a,op) M_IF( M_PARENTHESIS_P(op))(M_C(M_OPL_, a), M_GLOBALI_OPLIST_DEFAULT2)
#define M_OPL_char() M_DEFAULT_OPLIST
#define M_OPL_short() M_DEFAULT_OPLIST
#define M_OPL_int() M_DEFAULT_OPLIST
#define M_OPL_long() M_DEFAULT_OPLIST
#define M_OPL_float() M_DEFAULT_OPLIST
#define M_OPL_double() M_DEFAULT_OPLIST
#define M_SUFFIX_FUNCTION_BY_NARGS(function,...) M_C3(function, _, M_NARGS(__VA_ARGS__))
#define M_INIT_WITH_NVAR(oplist,...) M_SUFFIX_FUNCTION_BY_NARGS(M_C(M_GET_NAME oplist, _init_with), __VA_ARGS__)(__VA_ARGS__)
#define M_EACH(item,container,oplist) M_EACHI_OPLIST(item, container, M_GLOBAL_OPLIST(oplist))
#define M_EACHI_OPLIST(item,container,oplist) M_IF_METHOD(IT_REF, oplist)(M_EACHI, M_EACHI_CONST) (item, container, oplist, M_C(local_iterator_, __LINE__), M_C(local_cont_, __LINE__))
#define M_EACHI(item,container,oplist,iterator,cont) (bool cont = true; cont; cont = false) for(M_GET_SUBTYPE oplist *item; cont ; cont = false) for(M_GET_IT_TYPE oplist iterator; cont ; cont = false) for(M_GET_IT_FIRST oplist (iterator, container) ; !M_GET_IT_END_P oplist (iterator) && (item = M_GET_IT_REF oplist (iterator), true) ; M_GET_IT_NEXT oplist (iterator))
#define M_EACHI_CONST(item,container,oplist,iterator,cont) (bool cont = true; cont; cont = false) for(const M_GET_SUBTYPE oplist *item; cont ; cont = false) for(M_GET_IT_TYPE oplist iterator; cont ; cont = false) for(M_GET_IT_FIRST oplist (iterator, container) ; !M_GET_IT_END_P oplist (iterator) && (item = M_GET_IT_CREF oplist (iterator), true) ; M_GET_IT_NEXT oplist (iterator))
#define M_LET(a,...) M_ID(M_LETI0 ((M_REVERSE(a, __VA_ARGS__, M_IF(M_PARENTHESIS_P(a))(M_LETI_VAR_NAME_A, M_LETI_VAR_NAME_B)(a) ))))
#define M_LETI_VAR_NAME_A(var) M_C3(_local_cont_, M_RET_ARG1 var, __LINE__)
#define M_LETI_VAR_NAME_B(var) M_C3(_local_cont_, var, __LINE__)
#define M_LETI0(list) M_LETI1 list
#define M_LETI1(cont,oplist,...) M_LETI2(cont, M_GLOBAL_OPLIST(oplist), __VA_ARGS__)
#define M_LETI2(cont,oplist,...) M_IF_OPLIST(oplist)(M_LETI3, M_LETI2_FAILURE)(cont, oplist, __VA_ARGS__)
#define M_LETI2_FAILURE(cont,oplist,...) M_STATIC_FAILURE(M_LIB_NOT_AN_OPLIST, "(M_LET): the given argument is not a valid oplist: " M_AS_STR(oplist))
#define M_LETI3(cont,oplist,...) for(bool cont = true; cont ; ) M_MAP2(M_LETI_SINGLE, (cont, oplist), __VA_ARGS__) for(;cont;cont = false)
#define M_LETI_SINGLE(data,name) M_IF(M_PARENTHESIS_P(name))(M_LETI_SINGLE2_SET,M_LETI_SINGLE2) (M_PAIR_1 data, M_PAIR_2 data, name, M_RET_ARG1 name, M_SKIPI_1 name)
#define M_LETI_SINGLE2(cont,oplist,name,...) for(M_GET_TYPE oplist name; cont && (M_CALL_INIT(oplist, name), true); (M_CALL_CLEAR(oplist, name), cont = false))
#define M_LETI_SINGLE2_SET(cont,oplist,params,name,...) for(M_GET_TYPE oplist name; cont && (M_LETI_SINGLE2_INIT(oplist, name, __VA_ARGS__), true); (M_CALL_CLEAR(oplist, name), cont = false))
#define M_LETI_SINGLE2_INIT(oplist,name,...) M_IF_METHOD(INIT_WITH,oplist)(M_LETI_SINGLE3_INIT, M_CALL_INIT_SET)(oplist, name, __VA_ARGS__)
#define M_LETI_SINGLE3_INIT(oplist,name,...) M_IF(M_NOTEQUAL( M_NARGS(__VA_ARGS__), 1))(M_CALL_INIT_WITH, M_LETI_SINGLE4_INIT)(oplist, name, __VA_ARGS__)
#define M_LETI_SINGLE4_INIT(oplist,name,arg) M_IF(M_GET_PROPERTY(oplist, LET_AS_INIT_WITH))(M_CALL_INIT_WITH, M_LETI_SINGLE5_INIT)(oplist, name, arg)
#define M_LETI_SINGLE5_INIT(oplist,name,arg) M_IF(M_PARENTHESIS_P( arg ) )(M_CALL_INIT_WITH, M_CALL_INIT_SET)(oplist, name, M_REMOVE_PARENTHESIS (arg))
#define M_VA(...) M_NARGS(__VA_ARGS__), __VA_ARGS__
#define M_DEFER(clear) M_DEFER_INTERNAL(clear, m_var_ ## __LINE__)
#define M_DEFER_INTERNAL(clear,cont) for(bool cont = true; cont; cont = false) for( (void) 0; cont ; (clear), cont = false) for( (void) 0; cont; cont = false)
#define M_LET_IF(init,test,...) M_IF_NARGS_EQ1(__VA_ARGS__) ( M_LET_IF_INTERNAL (init, test, __VA_ARGS__, (void)0, M_C(m_var_, __LINE__)), M_LET_IF_INTERNAL (init, test, __VA_ARGS__, M_C(m_var_, __LINE__)) )
#define M_LET_IF_INTERNAL(init,test,clear,else_a,cont) for(bool cont = true; cont; cont = false) for( init ; cont && ( (test) || (else_a, false) ); (clear), cont = false) for( (void) 0; cont; cont = false)
#define M_INIT_VAI(oplist,dest,...) (void)(M_GET_INIT oplist (dest) , M_MAP2_C(M_INIT_VAI_FUNC, (dest, M_GET_PUSH oplist) , __VA_ARGS__) M_IF_METHOD(REVERSE, oplist)(M_DEFERRED_COMMA M_GET_REVERSE oplist (dest), ) )
#define M_INIT_VAI_FUNC(d,a) M_PAIR_2 d (M_PAIR_1 d, a)
#define M_INIT_WITH_VAI(oplist,dest,...) (void)(M_GET_INIT oplist (dest) , M_MAP2_C(M_INIT_WITH_VAI22_FUNC, (dest, oplist) , __VA_ARGS__) M_IF_METHOD(REVERSE, oplist)(M_DEFERRED_COMMA M_GET_REVERSE oplist(dest), ) )
#define M_INIT_WITH_VAI22_FUNC(pair,a) M_INIT_WITH_VAI23_FUNC(M_PAIR_1 pair, M_PAIR_2 pair, a)
#define M_INIT_WITH_VAI23_FUNC(d,op,a) ( (void) M_C(M_GET_NAME op, _push_raw)(d), M_IF(M_PARENTHESIS_P( a ))(M_CALL_INIT_WITH, M_CALL_INIT_SET)(M_GET_OPLIST op, *M_C( M_GET_NAME op , _back)(d), M_REMOVE_PARENTHESIS (a)) )
#define M_INIT_KEY_VAI(oplist,dest,...) (void)(M_GET_INIT oplist (dest) , M_MAP2_C(M_INIT_KEY_VAI_FUNC, (dest, M_GET_SET_KEY oplist) , __VA_ARGS__))
#define M_INIT_KEY_VAI_FUNC(d,a) M_PAIR_2 d (M_PAIR_1 d, M_PAIR_1 a, M_PAIR_2 a)
#define M_USE_BACKOFF_MAX_COUNT 6
typedef struct m_core_backoff_s {
  unsigned int count;
  unsigned int seed;
} m_core_backoff_ct[1];
static inline void
m_core_backoff_init(m_core_backoff_ct backoff)
{
  backoff->count = 0;
  backoff->seed = (unsigned int) rand();
}
static inline void
m_core_backoff_reset(m_core_backoff_ct backoff)
{
  backoff->count = 0;
}
static inline void
m_core_backoff_wait(m_core_backoff_ct backoff)
{
  volatile int x = 0;
  backoff->seed = backoff->seed * 34721 + 17449;
  const unsigned int mask = (1U << backoff->count) -1;
  const unsigned int count = mask & (backoff->seed >> 8);
  for(unsigned int i = 0; i <= count; i++)
    x = 0;
  (void) x;
  backoff->count += (backoff->count < 6);
}
static inline void
m_core_backoff_clear(m_core_backoff_ct backoff)
{
  (void) backoff;
}
struct string_s;
typedef enum m_serial_return_code_e {
  M_SERIAL_OK_DONE = 0, M_SERIAL_OK_CONTINUE = 1, M_SERIAL_FAIL = 2
} m_serial_return_code_t;
#define M_USE_SERIAL_MAX_DATA_SIZE 4
typedef union m_serial_ll_u {
  _Bool b;
  char c;
  int i;
  long l;
  long long ll;
  float f;
  double d;
  long double e;
  size_t s;
  uintptr_t u;
  void *p;
  const char *cstr;
  m_serial_return_code_t r;
} m_serial_ll_ct;
typedef struct m_serial_local_s {
  m_serial_ll_ct data[4];
} m_serial_local_t[1];
typedef struct m_serial_read_s {
  const struct m_serial_read_interface_s *m_interface;
  m_serial_ll_ct tmp;
  m_serial_ll_ct data[4];
} m_serial_read_t[1];
typedef struct m_serial_read_interface_s {
  m_serial_return_code_t (*read_boolean)(m_serial_read_t,_Bool *);
  m_serial_return_code_t (*read_integer)(m_serial_read_t, long long *, const size_t size_of_type);
  m_serial_return_code_t (*read_float)(m_serial_read_t, long double *, const size_t size_of_type);
  m_serial_return_code_t (*read_string)(m_serial_read_t, struct string_s *);
  m_serial_return_code_t (*read_array_start)(m_serial_local_t, m_serial_read_t, size_t *);
  m_serial_return_code_t (*read_array_next)(m_serial_local_t, m_serial_read_t);
  m_serial_return_code_t (*read_map_start)(m_serial_local_t, m_serial_read_t, size_t *);
  m_serial_return_code_t (*read_map_value)(m_serial_local_t, m_serial_read_t);
  m_serial_return_code_t (*read_map_next)(m_serial_local_t, m_serial_read_t);
  m_serial_return_code_t (*read_tuple_start)(m_serial_local_t, m_serial_read_t);
  m_serial_return_code_t (*read_tuple_id)(m_serial_local_t, m_serial_read_t, const char *const field_name [], const int max, int *);
  m_serial_return_code_t (*read_variant_start)(m_serial_local_t, m_serial_read_t, const char *const field_name[], const int max, int*);
  m_serial_return_code_t (*read_variant_end)(m_serial_local_t, m_serial_read_t);
} m_serial_read_interface_t;
typedef struct m_serial_write_s {
  const struct m_serial_write_interface_s *m_interface;
  m_serial_ll_ct tmp;
  m_serial_ll_ct data[4];
} m_serial_write_t[1];
typedef struct m_serial_write_interface_s {
  m_serial_return_code_t (*write_boolean)(m_serial_write_t,const _Bool data);
  m_serial_return_code_t (*write_integer)(m_serial_write_t,const long long data, const size_t size_of_type);
  m_serial_return_code_t (*write_float)(m_serial_write_t, const long double data, const size_t size_of_type);
  m_serial_return_code_t (*write_string)(m_serial_write_t,const char data[], size_t len);
  m_serial_return_code_t (*write_array_start)(m_serial_local_t, m_serial_write_t, const size_t number_of_elements);
  m_serial_return_code_t (*write_array_next)(m_serial_local_t, m_serial_write_t);
  m_serial_return_code_t (*write_array_end)(m_serial_local_t, m_serial_write_t);
  m_serial_return_code_t (*write_map_start)(m_serial_local_t, m_serial_write_t, const size_t number_of_elements);
  m_serial_return_code_t (*write_map_value)(m_serial_local_t, m_serial_write_t);
  m_serial_return_code_t (*write_map_next)(m_serial_local_t, m_serial_write_t);
  m_serial_return_code_t (*write_map_end)(m_serial_local_t, m_serial_write_t);
  m_serial_return_code_t (*write_tuple_start)(m_serial_local_t, m_serial_write_t);
  m_serial_return_code_t (*write_tuple_id)(m_serial_local_t, m_serial_write_t, const char * const field_name[], const int max, const int index);
  m_serial_return_code_t (*write_tuple_end)(m_serial_local_t, m_serial_write_t);
  m_serial_return_code_t (*write_variant_start)(m_serial_local_t, m_serial_write_t, const char * const field_name[], const int max, const int index);
  m_serial_return_code_t (*write_variant_end)(m_serial_local_t, m_serial_write_t);
} m_serial_write_interface_t;
#define M_OUT_SERIAL_DEFAULT_ARG(serial,x) _Generic(((void)0,(x)), bool: (serial)->m_interface->write_boolean(serial, M_AS_TYPE(bool, (x))), char: (serial)->m_interface->write_integer(serial, M_AS_TYPE(char,(x)), sizeof (x)), signed char: (serial)->m_interface->write_integer(serial, M_AS_TYPE(signed char,(x)), sizeof (x)), unsigned char: (serial)->m_interface->write_integer(serial, (long long) M_AS_TYPE(unsigned char,(x)), sizeof (x)), signed short: (serial)->m_interface->write_integer(serial, M_AS_TYPE(signed short,(x)), sizeof (x)), unsigned short: (serial)->m_interface->write_integer(serial, (long long) M_AS_TYPE(unsigned short,(x)), sizeof (x)), signed int: (serial)->m_interface->write_integer(serial, M_AS_TYPE(signed int,(x)), sizeof (x)), unsigned int: (serial)->m_interface->write_integer(serial, (long long) M_AS_TYPE(unsigned int,(x)), sizeof (x)), long int: (serial)->m_interface->write_integer(serial, M_AS_TYPE(long,(x)), sizeof (x)), unsigned long int: (serial)->m_interface->write_integer(serial, (long long) M_AS_TYPE(unsigned long,(x)), sizeof (x)), long long int: (serial)->m_interface->write_integer(serial, M_AS_TYPE(long long,(x)), sizeof (x)), unsigned long long int: (serial)->m_interface->write_integer(serial, (long long) M_AS_TYPE(unsigned long long,(x)), sizeof (x)), float: (serial)->m_interface->write_float(serial, M_AS_TYPE(float,(x)), sizeof (x)), double: (serial)->m_interface->write_float(serial, M_AS_TYPE(double,(x)), sizeof (x)), long double: (serial)->m_interface->write_float(serial, M_AS_TYPE(long double,(x)), sizeof (x)), const char *: (serial)->m_interface->write_string(serial, M_AS_TYPE(const char *,(x)), m_core_out_serial_strlen(M_AS_TYPE(const char *,(x))) ), char *: (serial)->m_interface->write_string(serial, M_AS_TYPE(char *,(x)), m_core_out_serial_strlen(M_AS_TYPE(const char *,(x))) ), const void *: M_SERIAL_FAIL , void *: M_SERIAL_FAIL )
#define M_IN_SERIAL_DEFAULT_ARG(xptr,serial) _Generic(((void)0,*(xptr)), bool: (serial)->m_interface->read_boolean(serial, M_AS_TYPE(bool *, xptr)), char: m_core_in_serial_char(serial, M_AS_TYPE(char*,xptr)), signed char: m_core_in_serial_schar(serial, M_AS_TYPE(signed char*,xptr)), unsigned char: m_core_in_serial_uchar(serial, M_AS_TYPE(unsigned char*,xptr)), signed short: m_core_in_serial_sshort(serial, M_AS_TYPE(signed short*,xptr)), unsigned short: m_core_in_serial_ushort(serial, M_AS_TYPE(unsigned short*,xptr)), signed int: m_core_in_serial_sint(serial, M_AS_TYPE(signed int*,xptr)), unsigned int: m_core_in_serial_uint(serial, M_AS_TYPE(unsigned int*,xptr)), long int: m_core_in_serial_slong(serial, M_AS_TYPE(long*,xptr)), unsigned long int: m_core_in_serial_ulong(serial, M_AS_TYPE(unsigned long*,xptr)), long long int: m_core_in_serial_sllong(serial, M_AS_TYPE(long long*,xptr)), unsigned long long int: m_core_in_serial_ullong(serial, M_AS_TYPE(unsigned long long*,xptr)), float: m_core_in_serial_float(serial, M_AS_TYPE(float*,xptr)), double: m_core_in_serial_double(serial, M_AS_TYPE(double*,xptr)), long double: m_core_in_serial_ldouble(serial, M_AS_TYPE(long double*,xptr)), const char *: M_SERIAL_FAIL , char *: M_SERIAL_FAIL , const void *: M_SERIAL_FAIL , void *: M_SERIAL_FAIL )
#define M_IN_SERIAL_DEFAULT_TYPE_DEF(name,type,func,promoted_type) static inline m_serial_return_code_t name (m_serial_read_t serial, type *ptr) { promoted_type i; m_serial_return_code_t r; r = serial->m_interface->func(serial, &i, sizeof (type)); *ptr = (type) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_char (m_serial_read_t serial, char *ptr) { long long i; m_serial_return_code_t r; r = serial->m_interface->read_integer(serial, &i, sizeof (char)); *ptr = (char) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_schar (m_serial_read_t serial, signed char *ptr) { long long i; m_serial_return_code_t r; r = serial->m_interface->read_integer(serial, &i, sizeof (signed char)); *ptr = (signed char) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_uchar (m_serial_read_t serial, unsigned char *ptr) { long long i; m_serial_return_code_t r; r = serial->m_interface->read_integer(serial, &i, sizeof (unsigned char)); *ptr = (unsigned char) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_sshort (m_serial_read_t serial, signed short *ptr) { long long i; m_serial_return_code_t r; r = serial->m_interface->read_integer(serial, &i, sizeof (signed short)); *ptr = (signed short) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_ushort (m_serial_read_t serial, unsigned short *ptr) { long long i; m_serial_return_code_t r; r = serial->m_interface->read_integer(serial, &i, sizeof (unsigned short)); *ptr = (unsigned short) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_sint (m_serial_read_t serial, signed int *ptr) { long long i; m_serial_return_code_t r; r = serial->m_interface->read_integer(serial, &i, sizeof (signed int)); *ptr = (signed int) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_uint (m_serial_read_t serial, unsigned int *ptr) { long long i; m_serial_return_code_t r; r = serial->m_interface->read_integer(serial, &i, sizeof (unsigned int)); *ptr = (unsigned int) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_slong (m_serial_read_t serial, signed long *ptr) { long long i; m_serial_return_code_t r; r = serial->m_interface->read_integer(serial, &i, sizeof (signed long)); *ptr = (signed long) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_ulong (m_serial_read_t serial, unsigned long *ptr) { long long i; m_serial_return_code_t r; r = serial->m_interface->read_integer(serial, &i, sizeof (unsigned long)); *ptr = (unsigned long) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_sllong (m_serial_read_t serial, signed long long *ptr) { long long i; m_serial_return_code_t r; r = serial->m_interface->read_integer(serial, &i, sizeof (signed long long)); *ptr = (signed long long) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_ullong (m_serial_read_t serial, unsigned long long *ptr) { long long i; m_serial_return_code_t r; r = serial->m_interface->read_integer(serial, &i, sizeof (unsigned long long)); *ptr = (unsigned long long) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_float (m_serial_read_t serial, float *ptr) { long double i; m_serial_return_code_t r; r = serial->m_interface->read_float(serial, &i, sizeof (float)); *ptr = (float) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_double (m_serial_read_t serial, double *ptr) { long double i; m_serial_return_code_t r; r = serial->m_interface->read_float(serial, &i, sizeof (double)); *ptr = (double) i; return r; }
static inline m_serial_return_code_t m_core_in_serial_ldouble (m_serial_read_t serial, long double *ptr) { long double i; m_serial_return_code_t r; r = serial->m_interface->read_float(serial, &i, sizeof (long double)); *ptr = (long double) i; return r; }
static inline long long
m_core_in_serial_enum(m_serial_read_t serial)
{
  long long i;
  serial->tmp.r = serial->m_interface->read_integer(serial, &i, sizeof (long long));
  return i;
}
static inline size_t
m_core_out_serial_strlen(const char s[])
{
  ((void)0);
  return strlen(s);
}
static inline m_serial_return_code_t
m_core_serial_fail(void)
{
  return M_SERIAL_FAIL;
}

#pragma GCC diagnostic pop

#define FURI_STRING_FAILURE ((size_t)-1)
typedef struct FuriString FuriString;
FuriString* furi_string_alloc();
FuriString* furi_string_alloc_set(const FuriString* source);
FuriString* furi_string_alloc_set_str(const char cstr_source[]);
FuriString* furi_string_alloc_printf(const char format[], ...)
    ;
FuriString* furi_string_alloc_vprintf(const char format[], va_list args);
FuriString* furi_string_alloc_move(FuriString* source);
void furi_string_free(FuriString* string);
void furi_string_reserve(FuriString* string, size_t size);
void furi_string_reset(FuriString* string);
void furi_string_swap(FuriString* string_1, FuriString* string_2);
void furi_string_move(FuriString* string_1, FuriString* string_2);
size_t furi_string_hash(const FuriString* string);
size_t furi_string_size(const FuriString* string);
_Bool furi_string_empty(const FuriString* string);
char furi_string_get_char(const FuriString* string, size_t index);
const char* furi_string_get_cstr(const FuriString* string);
void furi_string_set(FuriString* string, FuriString* source);
void furi_string_set_str(FuriString* string, const char source[]);
void furi_string_set_strn(FuriString* string, const char source[], size_t length);
void furi_string_set_char(FuriString* string, size_t index, const char c);
void furi_string_set_n(FuriString* string, const FuriString* source, size_t offset, size_t length);
int furi_string_printf(FuriString* string, const char format[], ...)
    ;
int furi_string_vprintf(FuriString* string, const char format[], va_list args);
void furi_string_push_back(FuriString* string, char c);
void furi_string_cat(FuriString* string_1, const FuriString* string_2);
void furi_string_cat_str(FuriString* string_1, const char cstring_2[]);
int furi_string_cat_printf(FuriString* string, const char format[], ...)
    ;
int furi_string_cat_vprintf(FuriString* string, const char format[], va_list args);
int furi_string_cmp(const FuriString* string_1, const FuriString* string_2);
int furi_string_cmp_str(const FuriString* string_1, const char cstring_2[]);
int furi_string_cmpi(const FuriString* string_1, const FuriString* string_2);
int furi_string_cmpi_str(const FuriString* string_1, const char cstring_2[]);
size_t furi_string_search(const FuriString* string, const FuriString* needle, size_t start);
size_t furi_string_search_str(const FuriString* string, const char needle[], size_t start);
size_t furi_string_search_char(const FuriString* string, char c, size_t start);
size_t furi_string_search_rchar(const FuriString* string, char c, size_t start);
_Bool furi_string_equal(const FuriString* string_1, const FuriString* string_2);
_Bool furi_string_equal_str(const FuriString* string_1, const char cstring_2[]);
void furi_string_replace_at(FuriString* string, size_t pos, size_t len, const char replace[]);
size_t
    furi_string_replace(FuriString* string, FuriString* needle, FuriString* replace, size_t start);
size_t furi_string_replace_str(
    FuriString* string,
    const char needle[],
    const char replace[],
    size_t start);
void furi_string_replace_all(
    FuriString* string,
    const FuriString* needle,
    const FuriString* replace);
void furi_string_replace_all_str(FuriString* string, const char needle[], const char replace[]);
_Bool furi_string_start_with(const FuriString* string, const FuriString* start);
_Bool furi_string_start_with_str(const FuriString* string, const char start[]);
_Bool furi_string_end_with(const FuriString* string, const FuriString* end);
_Bool furi_string_end_with_str(const FuriString* string, const char end[]);
void furi_string_left(FuriString* string, size_t index);
void furi_string_right(FuriString* string, size_t index);
void furi_string_mid(FuriString* string, size_t index, size_t size);
void furi_string_trim(FuriString* string, const char chars[]);
typedef unsigned int FuriStringUnicodeValue;
size_t furi_string_utf8_length(FuriString* string);
void furi_string_utf8_push(FuriString* string, FuriStringUnicodeValue unicode);
typedef enum {
    FuriStringUTF8StateStarting,
    FuriStringUTF8StateDecoding1,
    FuriStringUTF8StateDecoding2,
    FuriStringUTF8StateDecoding3,
    FuriStringUTF8StateError
} FuriStringUTF8State;
void furi_string_utf8_decode(char c, FuriStringUTF8State* state, FuriStringUnicodeValue* unicode);
#define FURI_STRING_SELECT1(func1,func2,a) _Generic((a), char* : func2, const char* : func2, FuriString* : func1, const FuriString* : func1)(a)
#define FURI_STRING_SELECT2(func1,func2,a,b) _Generic((b), char* : func2, const char* : func2, FuriString* : func1, const FuriString* : func1)(a, b)
#define FURI_STRING_SELECT3(func1,func2,a,b,c) _Generic((b), char* : func2, const char* : func2, FuriString* : func1, const FuriString* : func1)(a, b, c)
#define FURI_STRING_SELECT4(func1,func2,a,b,c,d) _Generic((b), char* : func2, const char* : func2, FuriString* : func1, const FuriString* : func1)(a, b, c, d)
#define furi_string_alloc_set(a) FURI_STRING_SELECT1(furi_string_alloc_set, furi_string_alloc_set_str, a)
#define furi_string_set(a,b) FURI_STRING_SELECT2(furi_string_set, furi_string_set_str, a, b)
#define furi_string_cmp(a,b) FURI_STRING_SELECT2(furi_string_cmp, furi_string_cmp_str, a, b)
#define furi_string_cmpi(a,b) FURI_STRING_SELECT2(furi_string_cmpi, furi_string_cmpi_str, a, b)
#define furi_string_equal(a,b) FURI_STRING_SELECT2(furi_string_equal, furi_string_equal_str, a, b)
#define furi_string_replace_all(a,b,c) FURI_STRING_SELECT3(furi_string_replace_all, furi_string_replace_all_str, a, b, c)
#define furi_string_search(v,...) M_APPLY( FURI_STRING_SELECT3, furi_string_search, furi_string_search_str, v, M_IF_DEFAULT1(0, __VA_ARGS__))
#define furi_string_search_str(v,...) M_APPLY(furi_string_search_str, v, M_IF_DEFAULT1(0, __VA_ARGS__))
#define furi_string_start_with(a,b) FURI_STRING_SELECT2(furi_string_start_with, furi_string_start_with_str, a, b)
#define furi_string_end_with(a,b) FURI_STRING_SELECT2(furi_string_end_with, furi_string_end_with_str, a, b)
#define furi_string_cat(a,b) FURI_STRING_SELECT2(furi_string_cat, furi_string_cat_str, a, b)
#define furi_string_trim(...) M_APPLY(furi_string_trim, M_IF_DEFAULT1("  \n\r\t", __VA_ARGS__))
#define furi_string_search_char(v,...) M_APPLY(furi_string_search_char, v, M_IF_DEFAULT1(0, __VA_ARGS__))
#define furi_string_search_rchar(v,...) M_APPLY(furi_string_search_rchar, v, M_IF_DEFAULT1(0, __VA_ARGS__))
#define furi_string_replace(a,b,...) M_APPLY( FURI_STRING_SELECT4, furi_string_replace, furi_string_replace_str, a, b, M_IF_DEFAULT1(0, __VA_ARGS__))
#define furi_string_replace_str(a,b,...) M_APPLY(furi_string_replace_str, a, b, M_IF_DEFAULT1(0, __VA_ARGS__))
#define F_STR_INIT(a) ((a) = furi_string_alloc())
#define F_STR_INIT_SET(a,b) ((a) = furi_string_alloc_set(b))
#define F_STR_INIT_MOVE(a,b) ((a) = furi_string_alloc_move(b))
#define FURI_STRING_OPLIST (INIT(F_STR_INIT), INIT_SET(F_STR_INIT_SET), SET(furi_string_set), INIT_MOVE(F_STR_INIT_MOVE), MOVE(furi_string_move), SWAP(furi_string_swap), RESET(furi_string_reset), EMPTY_P(furi_string_empty), CLEAR(furi_string_free), HASH(furi_string_hash), EQUAL(furi_string_equal), CMP(furi_string_cmp), TYPE(FuriString*))
       
typedef void FuriStreamBuffer;
FuriStreamBuffer* furi_stream_buffer_alloc(size_t size, size_t trigger_level);
void furi_stream_buffer_free(FuriStreamBuffer* stream_buffer);
_Bool furi_stream_set_trigger_level(FuriStreamBuffer* stream_buffer, size_t trigger_level);
size_t furi_stream_buffer_send(
    FuriStreamBuffer* stream_buffer,
    const void* data,
    size_t length,
    uint32_t timeout);
size_t furi_stream_buffer_receive(
    FuriStreamBuffer* stream_buffer,
    void* data,
    size_t length,
    uint32_t timeout);
size_t furi_stream_buffer_bytes_available(FuriStreamBuffer* stream_buffer);
size_t furi_stream_buffer_spaces_available(FuriStreamBuffer* stream_buffer);
_Bool furi_stream_buffer_is_full(FuriStreamBuffer* stream_buffer);
_Bool furi_stream_buffer_is_empty(FuriStreamBuffer* stream_buffer);
FuriStatus furi_stream_buffer_reset(FuriStreamBuffer* stream_buffer);
#define TIMERS_H 
#define tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR ( ( BaseType_t ) -2 )
#define tmrCOMMAND_EXECUTE_CALLBACK ( ( BaseType_t ) -1 )
#define tmrCOMMAND_START_DONT_TRACE ( ( BaseType_t ) 0 )
#define tmrCOMMAND_START ( ( BaseType_t ) 1 )
#define tmrCOMMAND_RESET ( ( BaseType_t ) 2 )
#define tmrCOMMAND_STOP ( ( BaseType_t ) 3 )
#define tmrCOMMAND_CHANGE_PERIOD ( ( BaseType_t ) 4 )
#define tmrCOMMAND_DELETE ( ( BaseType_t ) 5 )
#define tmrFIRST_FROM_ISR_COMMAND ( ( BaseType_t ) 6 )
#define tmrCOMMAND_START_FROM_ISR ( ( BaseType_t ) 6 )
#define tmrCOMMAND_RESET_FROM_ISR ( ( BaseType_t ) 7 )
#define tmrCOMMAND_STOP_FROM_ISR ( ( BaseType_t ) 8 )
#define tmrCOMMAND_CHANGE_PERIOD_FROM_ISR ( ( BaseType_t ) 9 )
struct tmrTimerControl;
typedef struct tmrTimerControl * TimerHandle_t;
typedef void (* TimerCallbackFunction_t)( TimerHandle_t xTimer );
typedef void (* PendedFunction_t)( void *,
                                   uint32_t );
    TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                const TickType_t xTimerPeriodInTicks,
                                const UBaseType_t uxAutoReload,
                                void * const pvTimerID,
                                TimerCallbackFunction_t pxCallbackFunction ) ;
    TimerHandle_t xTimerCreateStatic( const char * const pcTimerName,
                                      const TickType_t xTimerPeriodInTicks,
                                      const UBaseType_t uxAutoReload,
                                      void * const pvTimerID,
                                      TimerCallbackFunction_t pxCallbackFunction,
                                      StaticTimer_t * pxTimerBuffer ) ;
void * pvTimerGetTimerID( const TimerHandle_t xTimer ) ;
void vTimerSetTimerID( TimerHandle_t xTimer,
                       void * pvNewID ) ;
BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer ) ;
TaskHandle_t xTimerGetTimerDaemonTaskHandle( void ) ;
#define xTimerStart(xTimer,xTicksToWait) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCount() ), NULL, ( xTicksToWait ) )
#define xTimerStop(xTimer,xTicksToWait) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP, 0U, NULL, ( xTicksToWait ) )
#define xTimerChangePeriod(xTimer,xNewPeriod,xTicksToWait) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE_PERIOD, ( xNewPeriod ), NULL, ( xTicksToWait ) )
#define xTimerDelete(xTimer,xTicksToWait) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_DELETE, 0U, NULL, ( xTicksToWait ) )
#define xTimerReset(xTimer,xTicksToWait) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_RESET, ( xTaskGetTickCount() ), NULL, ( xTicksToWait ) )
#define xTimerStartFromISR(xTimer,pxHigherPriorityTaskWoken) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHigherPriorityTaskWoken ), 0U )
#define xTimerStopFromISR(xTimer,pxHigherPriorityTaskWoken) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP_FROM_ISR, 0, ( pxHigherPriorityTaskWoken ), 0U )
#define xTimerChangePeriodFromISR(xTimer,xNewPeriod,pxHigherPriorityTaskWoken) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE_PERIOD_FROM_ISR, ( xNewPeriod ), ( pxHigherPriorityTaskWoken ), 0U )
#define xTimerResetFromISR(xTimer,pxHigherPriorityTaskWoken) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_RESET_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHigherPriorityTaskWoken ), 0U )
BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                          void * pvParameter1,
                                          uint32_t ulParameter2,
                                          BaseType_t * pxHigherPriorityTaskWoken ) ;
BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                   void * pvParameter1,
                                   uint32_t ulParameter2,
                                   TickType_t xTicksToWait ) ;
const char * pcTimerGetName( TimerHandle_t xTimer ) ;
void vTimerSetReloadMode( TimerHandle_t xTimer,
                          const UBaseType_t uxAutoReload ) ;
UBaseType_t uxTimerGetReloadMode( TimerHandle_t xTimer ) ;
TickType_t xTimerGetPeriod( TimerHandle_t xTimer ) ;
TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer ) ;
BaseType_t xTimerCreateTimerTask( void ) ;
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                 const BaseType_t xCommandID,
                                 const TickType_t xOptionalValue,
                                 BaseType_t * const pxHigherPriorityTaskWoken,
                                 const TickType_t xTicksToWait ) ;
    void vTimerSetTimerNumber( TimerHandle_t xTimer,
                               UBaseType_t uxTimerNumber ) ;
    UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer ) ;
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         uint32_t * pulTimerTaskStackSize );
void furi_init();
void furi_run();
void path_extract_filename_no_ext(const char* path, FuriString* filename);
void path_extract_filename(FuriString* path, FuriString* filename, _Bool trim_ext);
void path_extract_extension(FuriString* path, char* ext, size_t ext_len_max);
void path_extract_basename(const char* path, FuriString* basename);
void path_extract_dirname(const char* path, FuriString* dirname);
void path_append(FuriString* path, const char* suffix);
void path_concat(const char* path, const char* suffix, FuriString* out_path);
_Bool path_contains_only_ascii(const char* path);
       
void set_random_name(char* name, uint8_t max_name_size);
       
       
#define SHA256_DIGEST_SIZE 32
#define SHA256_BLOCK_SIZE 64
typedef struct {
    uint32_t total[2];
    uint32_t state[8];
    uint32_t wbuf[16];
} sha256_context;
void sha256(const unsigned char* input, unsigned int ilen, unsigned char output[32]);
void sha256_start(sha256_context* ctx);
void sha256_finish(sha256_context* ctx, unsigned char output[32]);
void sha256_update(sha256_context* ctx, const unsigned char* input, unsigned int ilen);
void sha256_process(sha256_context* ctx);
typedef struct hmac_context {
    void (*init_hash)(const struct hmac_context* context);
    void (*update_hash)(
        const struct hmac_context* context,
        const uint8_t* message,
        unsigned message_size);
    void (*finish_hash)(const struct hmac_context* context, uint8_t* hash_result);
    unsigned block_size;
    unsigned result_size;
    uint8_t* tmp;
} hmac_context;
typedef struct hmac_sha256_context {
    hmac_context hmac_ctx;
    sha256_context sha_ctx;
    uint8_t tmp[32 * 2 + 64];
} hmac_sha256_context;
void hmac_sha256_init(hmac_sha256_context* ctx, const uint8_t* K);
void hmac_sha256_update(
    const hmac_sha256_context* ctx,
    const uint8_t* message,
    unsigned message_size);
void hmac_sha256_finish(const hmac_sha256_context* ctx, const uint8_t* K, uint8_t* hash_result);
       
       
       
typedef enum {
    FSAM_READ = (1 << 0),
    FSAM_WRITE = (1 << 1),
    FSAM_READ_WRITE = FSAM_READ | FSAM_WRITE,
} FS_AccessMode;
typedef enum {
    FSOM_OPEN_EXISTING = 1,
    FSOM_OPEN_ALWAYS = 2,
    FSOM_OPEN_APPEND = 4,
    FSOM_CREATE_NEW = 8,
    FSOM_CREATE_ALWAYS = 16,
} FS_OpenMode;
typedef enum {
    FSE_OK,
    FSE_NOT_READY,
    FSE_EXIST,
    FSE_NOT_EXIST,
    FSE_INVALID_PARAMETER,
    FSE_DENIED,
    FSE_INVALID_NAME,
    FSE_INTERNAL,
    FSE_NOT_IMPLEMENTED,
    FSE_ALREADY_OPEN,
} FS_Error;
typedef enum {
    FSF_DIRECTORY = (1 << 0),
} FS_Flags;
typedef struct File File;
typedef struct {
    uint8_t flags;
    uint64_t size;
} FileInfo;
const char* filesystem_api_error_get_desc(FS_Error error_id);
       
#define SD_LABEL_LENGTH 34
typedef enum {
    FST_UNKNOWN,
    FST_FAT12,
    FST_FAT16,
    FST_FAT32,
    FST_EXFAT,
} SDFsType;
typedef struct {
    SDFsType fs_type;
    uint32_t kb_total;
    uint32_t kb_free;
    uint16_t cluster_size;
    uint16_t sector_size;
    char label[34];
    FS_Error error;
} SDInfo;
const char* sd_api_get_fs_type_text(SDFsType fs_type);
#define STORAGE_INT_PATH_PREFIX "/int"
#define STORAGE_EXT_PATH_PREFIX "/ext"
#define STORAGE_ANY_PATH_PREFIX "/any"
#define INT_PATH(path) STORAGE_INT_PATH_PREFIX "/" path
#define EXT_PATH(path) STORAGE_EXT_PATH_PREFIX "/" path
#define ANY_PATH(path) STORAGE_ANY_PATH_PREFIX "/" path
#define RECORD_STORAGE "storage"
typedef struct Storage Storage;
File* storage_file_alloc(Storage* storage);
void storage_file_free(File* file);
typedef enum {
    StorageEventTypeCardMount,
    StorageEventTypeCardUnmount,
    StorageEventTypeCardMountError,
    StorageEventTypeFileClose,
    StorageEventTypeDirClose,
} StorageEventType;
typedef struct {
    StorageEventType type;
} StorageEvent;
FuriPubSub* storage_get_pubsub(Storage* storage);
_Bool storage_file_open(
    File* file,
    const char* path,
    FS_AccessMode access_mode,
    FS_OpenMode open_mode);
_Bool storage_file_close(File* file);
_Bool storage_file_is_open(File* file);
_Bool storage_file_is_dir(File* file);
uint16_t storage_file_read(File* file, void* buff, uint16_t bytes_to_read);
uint16_t storage_file_write(File* file, const void* buff, uint16_t bytes_to_write);
_Bool storage_file_seek(File* file, uint32_t offset, _Bool from_start);
uint64_t storage_file_tell(File* file);
_Bool storage_file_truncate(File* file);
uint64_t storage_file_size(File* file);
_Bool storage_file_sync(File* file);
_Bool storage_file_eof(File* file);
_Bool storage_file_exists(Storage* storage, const char* path);
_Bool storage_dir_open(File* file, const char* path);
_Bool storage_dir_close(File* file);
_Bool storage_dir_read(File* file, FileInfo* fileinfo, char* name, uint16_t name_length);
_Bool storage_dir_rewind(File* file);
FS_Error storage_common_timestamp(Storage* storage, const char* path, uint32_t* timestamp);
FS_Error storage_common_stat(Storage* storage, const char* path, FileInfo* fileinfo);
FS_Error storage_common_remove(Storage* storage, const char* path);
FS_Error storage_common_rename(Storage* storage, const char* old_path, const char* new_path);
FS_Error storage_common_copy(Storage* storage, const char* old_path, const char* new_path);
FS_Error storage_common_merge(Storage* storage, const char* old_path, const char* new_path);
FS_Error storage_common_mkdir(Storage* storage, const char* path);
FS_Error storage_common_fs_info(
    Storage* storage,
    const char* fs_path,
    uint64_t* total_space,
    uint64_t* free_space);
const char* storage_error_get_desc(FS_Error error_id);
FS_Error storage_file_get_error(File* file);
int32_t storage_file_get_internal_error(File* file);
const char* storage_file_get_error_desc(File* file);
FS_Error storage_sd_format(Storage* api);
FS_Error storage_sd_unmount(Storage* api);
FS_Error storage_sd_info(Storage* api, SDInfo* info);
FS_Error storage_sd_status(Storage* api);
typedef void (*Storage_name_converter)(FuriString*);
FS_Error storage_int_backup(Storage* api, const char* dstname);
FS_Error storage_int_restore(Storage* api, const char* dstname, Storage_name_converter converter);
_Bool storage_simply_remove(Storage* storage, const char* path);
_Bool storage_simply_remove_recursive(Storage* storage, const char* path);
_Bool storage_simply_mkdir(Storage* storage, const char* path);
void storage_get_next_filename(
    Storage* storage,
    const char* dirname,
    const char* filename,
    const char* fileextension,
    FuriString* nextfilename,
    uint8_t max_len);
uint32_t crc32_calc_buffer(uint32_t crc, const void* buffer, size_t size);
typedef void (*FileCrcProgressCb)(const uint8_t progress, void* context);
uint32_t crc32_calc_file(File* file, const FileCrcProgressCb progress_cb, void* context);
       
typedef struct DirWalk DirWalk;
typedef enum {
    DirWalkOK,
    DirWalkError,
    DirWalkLast,
} DirWalkResult;
typedef _Bool (*DirWalkFilterCb)(const char* name, FileInfo* fileinfo, void* ctx);
DirWalk* dir_walk_alloc(Storage* storage);
void dir_walk_free(DirWalk* dir_walk);
void dir_walk_set_recursive(DirWalk* dir_walk, _Bool recursive);
void dir_walk_set_filter_cb(DirWalk* dir_walk, DirWalkFilterCb cb, void* context);
_Bool dir_walk_open(DirWalk* dir_walk, const char* path);
FS_Error dir_walk_get_error(DirWalk* dir_walk);
DirWalkResult dir_walk_read(DirWalk* dir_walk, FuriString* return_path, FileInfo* fileinfo);
void dir_walk_close(DirWalk* dir_walk);
typedef struct {
    uint32_t total[2];
    uint32_t state[4];
    unsigned char buffer[64];
} md5_context;
void md5_starts(md5_context* ctx);
void md5_update(md5_context* ctx, const unsigned char* input, size_t ilen);
void md5_finish(md5_context* ctx, unsigned char output[16]);
void md5_process(md5_context* ctx, const unsigned char data[64]);
void md5(const unsigned char* input, size_t ilen, unsigned char output[16]);
       
_Bool args_read_int_and_trim(FuriString* args, int* value);
_Bool args_read_string_and_trim(FuriString* args, FuriString* word);
_Bool args_read_probably_quoted_string_and_trim(FuriString* args, FuriString* word);
_Bool args_read_hex_bytes(FuriString* args, uint8_t* bytes, size_t bytes_count);
size_t args_get_first_word_length(FuriString* args);
size_t args_length(FuriString* args);
_Bool args_char_to_hex(char hi_nibble, char low_nibble, uint8_t* byte);
       
_Bool saved_struct_load(const char* path, void* data, size_t size, uint8_t magic, uint8_t version);
_Bool saved_struct_save(const char* path, void* data, size_t size, uint8_t magic, uint8_t version);
_Bool saved_struct_get_payload_size(
    const char* path,
    uint8_t magic,
    uint8_t version,
    size_t* payload_size);
       
typedef struct Version Version;
const Version* version_get(void);
const char* version_get_githash(const Version* v);
const char* version_get_gitbranch(const Version* v);
const char* version_get_gitbranchnum(const Version* v);
const char* version_get_builddate(const Version* v);
const char* version_get_version(const Version* v);
const char* version_get_custom_name(const Version* v);
uint8_t version_get_target(const Version* v);
_Bool version_get_dirty_flag(const Version* v);
       
_Bool float_is_equal(float a, float b);
       
typedef struct TarArchive TarArchive;
typedef struct Storage Storage;
typedef enum {
    TAR_OPEN_MODE_READ = 'r',
    TAR_OPEN_MODE_WRITE = 'w',
    TAR_OPEN_MODE_STDOUT = 's'
} TarOpenMode;
TarArchive* tar_archive_alloc(Storage* storage);
_Bool tar_archive_open(TarArchive* archive, const char* path, TarOpenMode mode);
void tar_archive_free(TarArchive* archive);
_Bool tar_archive_unpack_to(
    TarArchive* archive,
    const char* destination,
    Storage_name_converter converter);
_Bool tar_archive_add_file(
    TarArchive* archive,
    const char* fs_file_path,
    const char* archive_fname,
    const int32_t file_size);
_Bool tar_archive_add_dir(TarArchive* archive, const char* fs_full_path, const char* path_prefix);
int32_t tar_archive_get_entries_count(TarArchive* archive);
_Bool tar_archive_unpack_file(
    TarArchive* archive,
    const char* archive_fname,
    const char* destination);
typedef _Bool (*tar_unpack_file_cb)(const char* name, _Bool is_directory, void* context);
void tar_archive_set_file_callback(TarArchive* archive, tar_unpack_file_cb callback, void* context);
_Bool tar_archive_dir_add_element(TarArchive* archive, const char* dirpath);
_Bool tar_archive_file_add_header(TarArchive* archive, const char* path, const int32_t data_len);
_Bool tar_archive_file_add_data_block(
    TarArchive* archive,
    const uint8_t* data_block,
    const int32_t block_len);
_Bool tar_archive_file_finalize(TarArchive* archive);
_Bool tar_archive_store_data(
    TarArchive* archive,
    const char* path,
    const uint8_t* data,
    const int32_t data_len);
_Bool tar_archive_finalize(TarArchive* archive);
       
typedef struct Stream Stream;
typedef enum {
    StreamOffsetFromCurrent,
    StreamOffsetFromStart,
    StreamOffsetFromEnd,
} StreamOffset;
typedef enum {
    StreamDirectionForward,
    StreamDirectionBackward,
} StreamDirection;
typedef _Bool (*StreamWriteCB)(Stream* stream, const void* context);
void stream_free(Stream* stream);
void stream_clean(Stream* stream);
_Bool stream_eof(Stream* stream);
_Bool stream_seek(Stream* stream, int32_t offset, StreamOffset offset_type);
_Bool stream_seek_to_char(Stream* stream, char c, StreamDirection direction);
size_t stream_tell(Stream* stream);
size_t stream_size(Stream* stream);
size_t stream_write(Stream* stream, const uint8_t* data, size_t size);
size_t stream_read(Stream* stream, uint8_t* data, size_t count);
_Bool stream_delete_and_insert(
    Stream* stream,
    size_t delete_size,
    StreamWriteCB write_callback,
    const void* context);
_Bool stream_read_line(Stream* stream, FuriString* str_result);
_Bool stream_rewind(Stream* stream);
size_t stream_write_char(Stream* stream, char c);
size_t stream_write_string(Stream* stream, FuriString* string);
size_t stream_write_cstring(Stream* stream, const char* string);
size_t stream_write_format(Stream* stream, const char* format, ...)
    ;
size_t stream_write_vaformat(Stream* stream, const char* format, va_list args);
_Bool stream_insert(Stream* stream, const uint8_t* data, size_t size);
_Bool stream_insert_char(Stream* stream, char c);
_Bool stream_insert_string(Stream* stream, FuriString* string);
_Bool stream_insert_cstring(Stream* stream, const char* string);
_Bool stream_insert_format(Stream* stream, const char* format, ...)
    ;
_Bool stream_insert_vaformat(Stream* stream, const char* format, va_list args);
_Bool stream_delete_and_insert_char(Stream* stream, size_t delete_size, char c);
_Bool stream_delete_and_insert_string(Stream* stream, size_t delete_size, FuriString* string);
_Bool stream_delete_and_insert_cstring(Stream* stream, size_t delete_size, const char* string);
_Bool stream_delete_and_insert_format(Stream* stream, size_t delete_size, const char* format, ...)
    ;
_Bool stream_delete_and_insert_vaformat(
    Stream* stream,
    size_t delete_size,
    const char* format,
    va_list args);
_Bool stream_delete(Stream* stream, size_t size);
size_t stream_copy(Stream* stream_from, Stream* stream_to, size_t size);
size_t stream_copy_full(Stream* stream_from, Stream* stream_to);
_Bool stream_split(Stream* stream, Stream* stream_left, Stream* stream_right);
size_t stream_load_from_file(Stream* stream, Storage* storage, const char* path);
size_t stream_save_to_file(Stream* stream, Storage* storage, const char* path, FS_OpenMode mode);
void stream_dump_data(Stream* stream);
       
Stream* file_stream_alloc(Storage* storage);
_Bool file_stream_open(
    Stream* stream,
    const char* path,
    FS_AccessMode access_mode,
    FS_OpenMode open_mode);
_Bool file_stream_close(Stream* stream);
FS_Error file_stream_get_error(Stream* stream);
       
Stream* string_stream_alloc();
       
Stream* buffered_file_stream_alloc(Storage* storage);
_Bool buffered_file_stream_open(
    Stream* stream,
    const char* path,
    FS_AccessMode access_mode,
    FS_OpenMode open_mode);
_Bool buffered_file_stream_close(Stream* stream);
_Bool buffered_file_stream_sync(Stream* stream);
FS_Error buffered_file_stream_get_error(Stream* stream);
       
       
       
#define LEVEL_DURATION_BIG 
#define LEVEL_DURATION_RESET 0U
#define LEVEL_DURATION_LEVEL_LOW 1U
#define LEVEL_DURATION_LEVEL_HIGH 2U
#define LEVEL_DURATION_WAIT 3U
#define LEVEL_DURATION_RESERVED 0x800000U
typedef struct {
    uint32_t level;
    uint32_t duration;
} LevelDuration;
static inline LevelDuration level_duration_make(_Bool level, uint32_t duration) {
    LevelDuration level_duration;
    level_duration.level = level ? 2U : 1U;
    level_duration.duration = duration;
    return level_duration;
}
static inline LevelDuration level_duration_reset() {
    LevelDuration level_duration;
    level_duration.level = 0U;
    return level_duration;
}
static inline LevelDuration level_duration_wait() {
    LevelDuration level_duration;
    level_duration.level = 3U;
    return level_duration;
}
static inline _Bool level_duration_is_reset(LevelDuration level_duration) {
    return level_duration.level == 0U;
}
static inline _Bool level_duration_is_wait(LevelDuration level_duration) {
    return level_duration.level == 3U;
}
static inline _Bool level_duration_get_level(LevelDuration level_duration) {
    return level_duration.level == 2U;
}
static inline uint32_t level_duration_get_duration(LevelDuration level_duration) {
    return level_duration.duration;
}
typedef void* (*ProtocolAlloc)(void);
typedef void (*ProtocolFree)(void* protocol);
typedef uint8_t* (*ProtocolGetData)(void* protocol);
typedef void (*ProtocolDecoderStart)(void* protocol);
typedef _Bool (*ProtocolDecoderFeed)(void* protocol, _Bool level, uint32_t duration);
typedef _Bool (*ProtocolEncoderStart)(void* protocol);
typedef LevelDuration (*ProtocolEncoderYield)(void* protocol);
typedef void (*ProtocolRenderData)(void* protocol, FuriString* result);
typedef _Bool (*ProtocolWriteData)(void* protocol, void* data);
typedef struct {
    ProtocolDecoderStart start;
    ProtocolDecoderFeed feed;
} ProtocolDecoder;
typedef struct {
    ProtocolEncoderStart start;
    ProtocolEncoderYield yield;
} ProtocolEncoder;
typedef struct {
    const size_t data_size;
    const char* name;
    const char* manufacturer;
    const uint32_t features;
    const uint8_t validate_count;
    ProtocolAlloc alloc;
    ProtocolFree free;
    ProtocolGetData get_data;
    ProtocolDecoder decoder;
    ProtocolEncoder encoder;
    ProtocolRenderData render_data;
    ProtocolRenderData render_brief_data;
    ProtocolWriteData write_data;
} ProtocolBase;
typedef struct ProtocolDict ProtocolDict;
typedef int32_t ProtocolId;
#define PROTOCOL_NO (-1)
#define PROTOCOL_ALL_FEATURES (0xFFFFFFFF)
ProtocolDict* protocol_dict_alloc(const ProtocolBase** protocols, size_t protocol_count);
void protocol_dict_free(ProtocolDict* dict);
void protocol_dict_set_data(
    ProtocolDict* dict,
    size_t protocol_index,
    const uint8_t* data,
    size_t data_size);
void protocol_dict_get_data(
    ProtocolDict* dict,
    size_t protocol_index,
    uint8_t* data,
    size_t data_size);
size_t protocol_dict_get_data_size(ProtocolDict* dict, size_t protocol_index);
size_t protocol_dict_get_max_data_size(ProtocolDict* dict);
const char* protocol_dict_get_name(ProtocolDict* dict, size_t protocol_index);
const char* protocol_dict_get_manufacturer(ProtocolDict* dict, size_t protocol_index);
void protocol_dict_decoders_start(ProtocolDict* dict);
uint32_t protocol_dict_get_features(ProtocolDict* dict, size_t protocol_index);
ProtocolId protocol_dict_decoders_feed(ProtocolDict* dict, _Bool level, uint32_t duration);
ProtocolId protocol_dict_decoders_feed_by_feature(
    ProtocolDict* dict,
    uint32_t feature,
    _Bool level,
    uint32_t duration);
ProtocolId protocol_dict_decoders_feed_by_id(
    ProtocolDict* dict,
    size_t protocol_index,
    _Bool level,
    uint32_t duration);
_Bool protocol_dict_encoder_start(ProtocolDict* dict, size_t protocol_index);
LevelDuration protocol_dict_encoder_yield(ProtocolDict* dict, size_t protocol_index);
void protocol_dict_render_data(ProtocolDict* dict, FuriString* result, size_t protocol_index);
void protocol_dict_render_brief_data(ProtocolDict* dict, FuriString* result, size_t protocol_index);
uint32_t protocol_dict_get_validate_count(ProtocolDict* dict, size_t protocol_index);
ProtocolId protocol_dict_get_protocol_by_name(ProtocolDict* dict, const char* name);
_Bool protocol_dict_get_write_data(ProtocolDict* dict, size_t protocol_index, void* data);
#define _USB_HID_USAGE_BUTTON_H_ 
#define HID_PAGE_BUTTON 0x09
#define HID_BUTTON_NO_PRESSED 0x00
#define HID_BUTTON_1 0x01
#define HID_BUTTON_2 0x02
#define HID_BUTTON_3 0x03
#define HID_BUTTON_4 0x04
#define HID_BUTTON_5 0x05
#define _USB_HID_USAGE_CONSUMER_H_ 
#define HID_PAGE_CONSUMER 0x0C
#define HID_CONSUMER_UNASSIGNED 0x00
#define HID_CONSUMER_CONTROL 0x01
#define HID_CONSUMER_NUMERIC_KEY_PAD 0x02
#define HID_CONSUMER_PROGRAMMABLE_BUTTONS 0x03
#define HID_CONSUMER_MICROPHONE 0x04
#define HID_CONSUMER_HEADPHONE 0x05
#define HID_CONSUMER_GRAPHIC_EQUALIZER 0x06
#define HID_CONSUMER_PLUS_10 0x20
#define HID_CONSUMER_PLUS_100 0x21
#define HID_CONSUMER_AM_PM 0x22
#define HID_CONSUMER_POWER 0x30
#define HID_CONSUMER_RESET 0x31
#define HID_CONSUMER_SLEEP 0x32
#define HID_CONSUMER_SLEEP_AFTER 0x33
#define HID_CONSUMER_SLEEP_MODE 0x34
#define HID_CONSUMER_ILLUMINATION 0x35
#define HID_CONSUMER_FUNCTION_BUTTONS 0x36
#define HID_CONSUMER_MENU 0x40
#define HID_CONSUMER_MENU_PICK 0x41
#define HID_CONSUMER_MENU_UP 0x42
#define HID_CONSUMER_MENU_DOWN 0x43
#define HID_CONSUMER_MENU_LEFT 0x44
#define HID_CONSUMER_MENU_RIGHT 0x45
#define HID_CONSUMER_MENU_ESCAPE 0x46
#define HID_CONSUMER_MENU_VALUE_INCREASE 0x47
#define HID_CONSUMER_MENU_VALUE_DECREASE 0x48
#define HID_CONSUMER_DATA_ON_SCREEN 0x60
#define HID_CONSUMER_CLOSED_CAPTION 0x61
#define HID_CONSUMER_CLOSED_CAPTION_SELECT 0x62
#define HID_CONSUMER_VCR_TV 0x63
#define HID_CONSUMER_BROADCAST_MODE 0x64
#define HID_CONSUMER_SNAPSHOT 0x65
#define HID_CONSUMER_STILL 0x66
#define HID_CONSUMER_SELECTION 0x80
#define HID_CONSUMER_ASSIGN_SELECTION 0x81
#define HID_CONSUMER_MODE_STEP 0x82
#define HID_CONSUMER_RECALL_LAST 0x83
#define HID_CONSUMER_ENTER_CHANNEL 0x84
#define HID_CONSUMER_ORDER_MOVIE 0x85
#define HID_CONSUMER_CHANNEL 0x86
#define HID_CONSUMER_MEDIA_SELECTION 0x87
#define HID_CONSUMER_MEDIA_SELECT_COMPUTER 0x88
#define HID_CONSUMER_MEDIA_SELECT_TV 0x89
#define HID_CONSUMER_MEDIA_SELECT_WWW 0x8A
#define HID_CONSUMER_MEDIA_SELECT_DVD 0x8B
#define HID_CONSUMER_MEDIA_SELECT_TELEPHONE 0x8C
#define HID_CONSUMER_MEDIA_SELECT_PROGRAM_GUIDE 0x8D
#define HID_CONSUMER_MEDIA_SELECT_VIDEO_PHONE 0x8E
#define HID_CONSUMER_MEDIA_SELECT_GAMES 0x8F
#define HID_CONSUMER_MEDIA_SELECT_MESSAGES 0x90
#define HID_CONSUMER_MEDIA_SELECT_CD 0x91
#define HID_CONSUMER_MEDIA_SELECT_VCR 0x92
#define HID_CONSUMER_MEDIA_SELECT_TUNER 0x93
#define HID_CONSUMER_QUIT 0x94
#define HID_CONSUMER_HELP 0x95
#define HID_CONSUMER_MEDIA_SELECT_TAPE 0x96
#define HID_CONSUMER_MEDIA_SELECT_CABLE 0x97
#define HID_CONSUMER_MEDIA_SELECT_SATELLITE 0x98
#define HID_CONSUMER_MEDIA_SELECT_SECURITY 0x99
#define HID_CONSUMER_MEDIA_SELECT_HOME 0x9A
#define HID_CONSUMER_MEDIA_SELECT_CALL 0x9B
#define HID_CONSUMER_CHANNEL_INCREMENT 0x9C
#define HID_CONSUMER_CHANNEL_DECREMENT 0x9D
#define HID_CONSUMER_MEDIA_SELECT_SAP 0x9E
#define HID_CONSUMER_VCR_PLUS 0xA0
#define HID_CONSUMER_ONCE 0xA1
#define HID_CONSUMER_DAILY 0xA2
#define HID_CONSUMER_WEEKLY 0xA3
#define HID_CONSUMER_MONTHLY 0xA4
#define HID_CONSUMER_PLAY 0xB0
#define HID_CONSUMER_PAUSE 0xB1
#define HID_CONSUMER_RECORD 0xB2
#define HID_CONSUMER_FAST_FORWARD 0xB3
#define HID_CONSUMER_REWIND 0xB4
#define HID_CONSUMER_SCAN_NEXT_TRACK 0xB5
#define HID_CONSUMER_SCAN_PREVIOUS_TRACK 0xB6
#define HID_CONSUMER_STOP 0xB7
#define HID_CONSUMER_EJECT 0xB8
#define HID_CONSUMER_RANDOM_PLAY 0xB9
#define HID_CONSUMER_SELECT_DISC 0xBA
#define HID_CONSUMER_ENTER_DISC 0xBB
#define HID_CONSUMER_REPEAT 0xBC
#define HID_CONSUMER_TRACKING 0xBD
#define HID_CONSUMER_TRACK_NORMAL 0xBE
#define HID_CONSUMER_SLOW_TRACKING 0xBF
#define HID_CONSUMER_FRAME_FORWARD 0xC0
#define HID_CONSUMER_FRAME_BACK 0xC1
#define HID_CONSUMER_MARK 0xC2
#define HID_CONSUMER_CLEAR_MARK 0xC3
#define HID_CONSUMER_REPEAT_FROM_MARK 0xC4
#define HID_CONSUMER_RETURN_TO_MARK 0xC5
#define HID_CONSUMER_SEARCH_MARK_FORWARD 0xC6
#define HID_CONSUMER_SEARCH_MARK_BACKWARDS 0xC7
#define HID_CONSUMER_COUNTER_RESET 0xC8
#define HID_CONSUMER_SHOW_COUNTER 0xC9
#define HID_CONSUMER_TRACKING_INCREMENT 0xCA
#define HID_CONSUMER_TRACKING_DECREMENT 0xCB
#define HID_CONSUMER_STOP_EJECT 0xCC
#define HID_CONSUMER_PLAY_PAUSE 0xCD
#define HID_CONSUMER_PLAY_SKIP 0xCE
#define HID_CONSUMER_VOLUME 0xE0
#define HID_CONSUMER_BALANCE 0xE1
#define HID_CONSUMER_MUTE 0xE2
#define HID_CONSUMER_BASS 0xE3
#define HID_CONSUMER_TREBLE 0xE4
#define HID_CONSUMER_BASS_BOOST 0xE5
#define HID_CONSUMER_SURROUND_MODE 0xE6
#define HID_CONSUMER_LOUDNESS 0xE7
#define HID_CONSUMER_MPX 0xE8
#define HID_CONSUMER_VOLUME_INCREMENT 0xE9
#define HID_CONSUMER_VOLUME_DECREMENT 0xEA
#define HID_CONSUMER_SPEED_SELECT 0xF0
#define HID_CONSUMER_PLAYBACK_SPEED 0xF1
#define HID_CONSUMER_STANDARD_PLAY 0xF2
#define HID_CONSUMER_LONG_PLAY 0xF3
#define HID_CONSUMER_EXTENDED_PLAY 0xF4
#define HID_CONSUMER_SLOW 0xF5
#define HID_CONSUMER_FAN_ENABLE 0x100
#define HID_CONSUMER_FAN_SPEED 0x101
#define HID_CONSUMER_LIGHT_ENABLE 0x102
#define HID_CONSUMER_LIGHT_ILLUMINATION_LEVEL 0x103
#define HID_CONSUMER_CLIMATE_CONTROL_ENABLE 0x104
#define HID_CONSUMER_ROOM_TEMPERATURE 0x105
#define HID_CONSUMER_SECURITY_ENABLE 0x106
#define HID_CONSUMER_FIRE_ALARM 0x107
#define HID_CONSUMER_POLICE_ALARM 0x108
#define HID_CONSUMER_PROXIMITY 0x109
#define HID_CONSUMER_MOTION 0x10A
#define HID_CONSUMER_DURESS_ALARM 0x10B
#define HID_CONSUMER_HOLDUP_ALARM 0x10C
#define HID_CONSUMER_MEDICAL_ALARM 0x10D
#define HID_CONSUMER_BALANCE_RIGHT 0x150
#define HID_CONSUMER_BALANCE_LEFT 0x151
#define HID_CONSUMER_BASS_INCREMENT 0x152
#define HID_CONSUMER_BASS_DECREMENT 0x153
#define HID_CONSUMER_TREBLE_INCREMENT 0x154
#define HID_CONSUMER_TREBLE_DECREMENT 0x155
#define HID_CONSUMER_SPEAKER_SYSTEM 0x160
#define HID_CONSUMER_CHANNEL_LEFT 0x161
#define HID_CONSUMER_CHANNEL_RIGHT 0x162
#define HID_CONSUMER_CHANNEL_CENTER 0x163
#define HID_CONSUMER_CHANNEL_FRONT 0x164
#define HID_CONSUMER_CHANNEL_CENTER_FRONT 0x165
#define HID_CONSUMER_CHANNEL_SIDE 0x166
#define HID_CONSUMER_CHANNEL_SURROUND 0x167
#define HID_CONSUMER_CHANNEL_LOW_FREQUENCY_ENHANCEMENT 0x168
#define HID_CONSUMER_CHANNEL_TOP 0x169
#define HID_CONSUMER_CHANNEL_UNKNOWN 0x16A
#define HID_CONSUMER_SUB_CHANNEL 0x170
#define HID_CONSUMER_SUB_CHANNEL_INCREMENT 0x171
#define HID_CONSUMER_SUB_CHANNEL_DECREMENT 0x172
#define HID_CONSUMER_ALTERNATE_AUDIO_INCREMENT 0x173
#define HID_CONSUMER_ALTERNATE_AUDIO_DECREMENT 0x174
#define HID_CONSUMER_APPLICATION_LAUNCH_BUTTONS 0x180
#define HID_CONSUMER_AL_LAUNCH_BUTTON_CONFIGURATION_TOOL 0x181
#define HID_CONSUMER_AL_PROGRAMMABLE_BUTTON_CONFIGURATION 0x182
#define HID_CONSUMER_AL_CONSUMER_CONTROL_CONFIGURATION 0x183
#define HID_CONSUMER_AL_WORD_PROCESSOR 0x184
#define HID_CONSUMER_AL_TEXT_EDITOR 0x185
#define HID_CONSUMER_AL_SPREADSHEET 0x186
#define HID_CONSUMER_AL_GRAPHICS_EDITOR 0x187
#define HID_CONSUMER_AL_PRESENTATION_APP 0x188
#define HID_CONSUMER_AL_DATABASE_APP 0x189
#define HID_CONSUMER_AL_EMAIL_READER 0x18A
#define HID_CONSUMER_AL_NEWSREADER 0x18B
#define HID_CONSUMER_AL_VOICEMAIL 0x18C
#define HID_CONSUMER_AL_CONTACTS_ADDRESS_BOOK 0x18D
#define HID_CONSUMER_AL_CALENDAR_SCHEDULE 0x18E
#define HID_CONSUMER_AL_TASK_PROJECT_MANAGER 0x18F
#define HID_CONSUMER_AL_LOG_JOURNAL_TIMECARD 0x190
#define HID_CONSUMER_AL_CHECKBOOK_FINANCE 0x191
#define HID_CONSUMER_AL_CALCULATOR 0x192
#define HID_CONSUMER_AL_A_V_CAPTURE_PLAYBACK 0x193
#define HID_CONSUMER_AL_LOCAL_MACHINE_BROWSER 0x194
#define HID_CONSUMER_AL_LAN_WAN_BROWSER 0x195
#define HID_CONSUMER_AL_INTERNET_BROWSER 0x196
#define HID_CONSUMER_AL_REMOTE_NETWORKING_ISP_CONNECT 0x197
#define HID_CONSUMER_AL_NETWORK_CONFERENCE 0x198
#define HID_CONSUMER_AL_NETWORK_CHAT 0x199
#define HID_CONSUMER_AL_TELEPHONY_DIALER 0x19A
#define HID_CONSUMER_AL_LOGON 0x19B
#define HID_CONSUMER_AL_LOGOFF 0x19C
#define HID_CONSUMER_AL_LOGON_LOGOFF 0x19D
#define HID_CONSUMER_AL_TERMINAL_LOCK_SCREENSAVER 0x19E
#define HID_CONSUMER_AL_CONTROL_PANEL 0x19F
#define HID_CONSUMER_AL_COMMAND_LINE_PROCESSOR_RUN 0x1A0
#define HID_CONSUMER_AL_PROCESS_TASK_MANAGER 0x1A1
#define HID_CONSUMER_AL_SELECT_TASK_APPLICATION 0x1A2
#define HID_CONSUMER_AL_NEXT_TASK_APPLICATION 0x1A3
#define HID_CONSUMER_AL_PREVIOUS_TASK_APPLICATION 0x1A4
#define HID_CONSUMER_AL_PREEMPTIVE_HALT_TASK_APPLICATION 0x1A5
#define HID_CONSUMER_AL_INTEGRATED_HELP_CENTER 0x1A6
#define HID_CONSUMER_AL_DOCUMENTS 0x1A7
#define HID_CONSUMER_AL_THESAURUS 0x1A8
#define HID_CONSUMER_AL_DICTIONARY 0x1A9
#define HID_CONSUMER_AL_DESKTOP 0x1AA
#define HID_CONSUMER_AL_SPELL_CHECK 0x1AB
#define HID_CONSUMER_AL_GRAMMAR_CHECK 0x1AC
#define HID_CONSUMER_AL_WIRELESS_STATUS 0x1AD
#define HID_CONSUMER_AL_KEYBOARD_LAYOUT 0x1AE
#define HID_CONSUMER_AL_VIRUS_PROTECTION 0x1AF
#define HID_CONSUMER_AL_ENCRYPTION 0x1B0
#define HID_CONSUMER_AL_SCREEN_SAVER 0x1B1
#define HID_CONSUMER_AL_ALARMS 0x1B2
#define HID_CONSUMER_AL_CLOCK 0x1B3
#define HID_CONSUMER_AL_FILE_BROWSER 0x1B4
#define HID_CONSUMER_AL_POWER_STATUS 0x1B5
#define HID_CONSUMER_AL_IMAGE_BROWSER 0x1B6
#define HID_CONSUMER_AL_AUDIO_BROWSER 0x1B7
#define HID_CONSUMER_AL_MOVIE_BROWSER 0x1B8
#define HID_CONSUMER_AL_DIGITAL_RIGHTS_MANAGER 0x1B9
#define HID_CONSUMER_AL_DIGITAL_WALLET 0x1BA
#define HID_CONSUMER_AL_INSTANT_MESSAGING 0x1BC
#define HID_CONSUMER_AL_OEM_FEATURES_TIPS_TUTORIAL_BROWSER 0x1BD
#define HID_CONSUMER_AL_OEM_HELP 0x1BE
#define HID_CONSUMER_AL_ONLINE_COMMUNITY 0x1BF
#define HID_CONSUMER_AL_ENTERTAINMENT_CONTENT_BROWSER 0x1C0
#define HID_CONSUMER_AL_ONLINE_SHOPPING_BROWSER 0x1C1
#define HID_CONSUMER_AL_SMARTCARD_INFORMATION_HELP 0x1C2
#define HID_CONSUMER_AL_MARKET_MONITOR_FINANCE_BROWSER 0x1C3
#define HID_CONSUMER_AL_CUSTOMIZED_CORPORATE_NEWS_BROWSER 0x1C4
#define HID_CONSUMER_AL_ONLINE_ACTIVITY_BROWSER 0x1C5
#define HID_CONSUMER_AL_RESEARCH_SEARCH_BROWSER 0x1C6
#define HID_CONSUMER_AL_AUDIO_PLAYER 0x1C7
#define HID_CONSUMER_GENERIC_GUI_APPLICATION_CONTROLS 0x200
#define HID_CONSUMER_AC_NEW 0x201
#define HID_CONSUMER_AC_OPEN 0x202
#define HID_CONSUMER_AC_CLOSE 0x203
#define HID_CONSUMER_AC_EXIT 0x204
#define HID_CONSUMER_AC_MAXIMIZE 0x205
#define HID_CONSUMER_AC_MINIMIZE 0x206
#define HID_CONSUMER_AC_SAVE 0x207
#define HID_CONSUMER_AC_PRINT 0x208
#define HID_CONSUMER_AC_PROPERTIES 0x209
#define HID_CONSUMER_AC_UNDO 0x21A
#define HID_CONSUMER_AC_COPY 0x21B
#define HID_CONSUMER_AC_CUT 0x21C
#define HID_CONSUMER_AC_PASTE 0x21D
#define HID_CONSUMER_AC_SELECT_ALL 0x21E
#define HID_CONSUMER_AC_FIND 0x21F
#define HID_CONSUMER_AC_FIND_AND_REPLACE 0x220
#define HID_CONSUMER_AC_SEARCH 0x221
#define HID_CONSUMER_AC_GO_TO 0x222
#define HID_CONSUMER_AC_HOME 0x223
#define HID_CONSUMER_AC_BACK 0x224
#define HID_CONSUMER_AC_FORWARD 0x225
#define HID_CONSUMER_AC_STOP 0x226
#define HID_CONSUMER_AC_REFRESH 0x227
#define HID_CONSUMER_AC_PREVIOUS_LINK 0x228
#define HID_CONSUMER_AC_NEXT_LINK 0x229
#define HID_CONSUMER_AC_BOOKMARKS 0x22A
#define HID_CONSUMER_AC_HISTORY 0x22B
#define HID_CONSUMER_AC_SUBSCRIPTIONS 0x22C
#define HID_CONSUMER_AC_ZOOM_IN 0x22D
#define HID_CONSUMER_AC_ZOOM_OUT 0x22E
#define HID_CONSUMER_AC_ZOOM 0x22F
#define HID_CONSUMER_AC_FULL_SCREEN_VIEW 0x230
#define HID_CONSUMER_AC_NORMAL_VIEW 0x231
#define HID_CONSUMER_AC_VIEW_TOGGLE 0x232
#define HID_CONSUMER_AC_SCROLL_UP 0x233
#define HID_CONSUMER_AC_SCROLL_DOWN 0x234
#define HID_CONSUMER_AC_SCROLL 0x235
#define HID_CONSUMER_AC_PAN_LEFT 0x236
#define HID_CONSUMER_AC_PAN_RIGHT 0x237
#define HID_CONSUMER_AC_PAN 0x238
#define HID_CONSUMER_AC_NEW_WINDOW 0x239
#define HID_CONSUMER_AC_TILE_HORIZONTALLY 0x23A
#define HID_CONSUMER_AC_TILE_VERTICALLY 0x23B
#define HID_CONSUMER_AC_FORMAT 0x23C
#define HID_CONSUMER_AC_EDIT 0x23D
#define HID_CONSUMER_AC_BOLD 0x23E
#define HID_CONSUMER_AC_ITALICS 0x23F
#define HID_CONSUMER_AC_UNDERLINE 0x240
#define HID_CONSUMER_AC_STRIKETHROUGH 0x241
#define HID_CONSUMER_AC_SUBSCRIPT 0x242
#define HID_CONSUMER_AC_SUPERSCRIPT 0x243
#define HID_CONSUMER_AC_ALL_CAPS 0x244
#define HID_CONSUMER_AC_ROTATE 0x245
#define HID_CONSUMER_AC_RESIZE 0x246
#define HID_CONSUMER_AC_FLIP_HORIZONTAL 0x247
#define HID_CONSUMER_AC_FLIP_VERTICAL 0x248
#define HID_CONSUMER_AC_MIRROR_HORIZONTAL 0x249
#define HID_CONSUMER_AC_MIRROR_VERTICAL 0x24A
#define HID_CONSUMER_AC_FONT_SELECT 0x24B
#define HID_CONSUMER_AC_FONT_COLOR 0x24C
#define HID_CONSUMER_AC_FONT_SIZE 0x24D
#define HID_CONSUMER_AC_JUSTIFY_LEFT 0x24E
#define HID_CONSUMER_AC_JUSTIFY_CENTER_H 0x24F
#define HID_CONSUMER_AC_JUSTIFY_RIGHT 0x250
#define HID_CONSUMER_AC_JUSTIFY_BLOCK_H 0x251
#define HID_CONSUMER_AC_JUSTIFY_TOP 0x252
#define HID_CONSUMER_AC_JUSTIFY_CENTER_V 0x253
#define HID_CONSUMER_AC_JUSTIFY_BOTTOM 0x254
#define HID_CONSUMER_AC_JUSTIFY_BLOCK_V 0x255
#define HID_CONSUMER_AC_INDENT_DECREASE 0x256
#define HID_CONSUMER_AC_INDENT_INCREASE 0x257
#define HID_CONSUMER_AC_NUMBERED_LIST 0x258
#define HID_CONSUMER_AC_RESTART_NUMBERING 0x259
#define HID_CONSUMER_AC_BULLETED_LIST 0x25A
#define HID_CONSUMER_AC_PROMOTE 0x25B
#define HID_CONSUMER_AC_DEMOTE 0x25C
#define HID_CONSUMER_AC_YES 0x25D
#define HID_CONSUMER_AC_NO 0x25E
#define HID_CONSUMER_AC_CANCEL 0x25F
#define HID_CONSUMER_AC_CATALOG 0x260
#define HID_CONSUMER_AC_BUY_CHECKOUT 0x261
#define HID_CONSUMER_AC_ADD_TO_CART 0x262
#define HID_CONSUMER_AC_EXPAND 0x263
#define HID_CONSUMER_AC_EXPAND_ALL 0x264
#define HID_CONSUMER_AC_COLLAPSE 0x265
#define HID_CONSUMER_AC_COLLAPSE_ALL 0x266
#define HID_CONSUMER_AC_PRINT_PREVIEW 0x267
#define HID_CONSUMER_AC_PASTE_SPECIAL 0x268
#define HID_CONSUMER_AC_INSERT_MODE 0x269
#define HID_CONSUMER_AC_DELETE 0x26A
#define HID_CONSUMER_AC_LOCK 0x26B
#define HID_CONSUMER_AC_UNLOCK 0x26C
#define HID_CONSUMER_AC_PROTECT 0x26D
#define HID_CONSUMER_AC_UNPROTECT 0x26E
#define HID_CONSUMER_AC_ATTACH_COMMENT 0x26F
#define HID_CONSUMER_AC_DELETE_COMMENT 0x270
#define HID_CONSUMER_AC_VIEW_COMMENT 0x271
#define HID_CONSUMER_AC_SELECT_WORD 0x272
#define HID_CONSUMER_AC_SELECT_SENTENCE 0x273
#define HID_CONSUMER_AC_SELECT_PARAGRAPH 0x274
#define HID_CONSUMER_AC_SELECT_COLUMN 0x275
#define HID_CONSUMER_AC_SELECT_ROW 0x276
#define HID_CONSUMER_AC_SELECT_TABLE 0x277
#define HID_CONSUMER_AC_SELECT_OBJECT 0x278
#define HID_CONSUMER_AC_REDO_REPEAT 0x279
#define HID_CONSUMER_AC_SORT 0x27A
#define HID_CONSUMER_AC_SORT_ASCENDING 0x27B
#define HID_CONSUMER_AC_SORT_DESCENDING 0x27C
#define HID_CONSUMER_AC_FILTER 0x27D
#define HID_CONSUMER_AC_SET_CLOCK 0x27E
#define HID_CONSUMER_AC_VIEW_CLOCK 0x27F
#define HID_CONSUMER_AC_SELECT_TIME_ZONE 0x280
#define HID_CONSUMER_AC_EDIT_TIME_ZONES 0x281
#define HID_CONSUMER_AC_SET_ALARM 0x282
#define HID_CONSUMER_AC_CLEAR_ALARM 0x283
#define HID_CONSUMER_AC_SNOOZE_ALARM 0x284
#define HID_CONSUMER_AC_RESET_ALARM 0x285
#define HID_CONSUMER_AC_SYNCHRONIZE 0x286
#define HID_CONSUMER_AC_SEND_RECEIVE 0x287
#define HID_CONSUMER_AC_SEND_TO 0x288
#define HID_CONSUMER_AC_REPLY 0x289
#define HID_CONSUMER_AC_REPLY_ALL 0x28A
#define HID_CONSUMER_AC_FORWARD_MSG 0x28B
#define HID_CONSUMER_AC_SEND 0x28C
#define HID_CONSUMER_AC_ATTACH_FILE 0x28D
#define HID_CONSUMER_AC_UPLOAD 0x28E
#define HID_CONSUMER_AC_DOWNLOAD_SAVE_TARGET_AS 0x28F
#define HID_CONSUMER_AC_SET_BORDERS 0x290
#define HID_CONSUMER_AC_INSERT_ROW 0x291
#define HID_CONSUMER_AC_INSERT_COLUMN 0x292
#define HID_CONSUMER_AC_INSERT_FILE 0x293
#define HID_CONSUMER_AC_INSERT_PICTURE 0x294
#define HID_CONSUMER_AC_INSERT_OBJECT 0x295
#define HID_CONSUMER_AC_INSERT_SYMBOL 0x296
#define HID_CONSUMER_AC_SAVE_AND_CLOSE 0x297
#define HID_CONSUMER_AC_RENAME 0x298
#define HID_CONSUMER_AC_MERGE 0x299
#define HID_CONSUMER_AC_SPLIT 0x29A
#define HID_CONSUMER_AC_DISRIBUTE_HORIZONTALLY 0x29B
#define HID_CONSUMER_AC_DISTRIBUTE_VERTICALLY 0x29C
#define _USB_HID_USAGE_DESKTOP_H_ 
#define HID_PAGE_DESKTOP 0x01
#define HID_DESKTOP_POINTER 0x01
#define HID_DESKTOP_MOUSE 0x02
#define HID_DESKTOP_JOYSTICK 0x04
#define HID_DESKTOP_GAMEPAD 0x05
#define HID_DESKTOP_KEYBOARD 0x06
#define HID_DESKTOP_KEYPAD 0x07
#define HID_DESKTOP_MULTIAXIS 0x08
#define HID_DESKTOP_TABLET 0x09
#define HID_DESKTOP_X 0x30
#define HID_DESKTOP_Y 0x31
#define HID_DESKTOP_Z 0x32
#define HID_DESKTOP_RX 0x33
#define HID_DESKTOP_RY 0x34
#define HID_DESKTOP_RZ 0x35
#define HID_DESKTOP_SLIDER 0x36
#define HID_DESKTOP_DIAL 0x37
#define HID_DESKTOP_WHEEL 0x38
#define HID_DESKTOP_HAT_SWITCH 0x39
#define HID_DESKTOP_MOTION_WAKEUP 0x3C
#define HID_DESKTOP_START 0x3D
#define HID_DESKTOP_SELECT 0x3E
#define HID_DESKTOP_RESOLUTION_MULT 0x48
#define HID_DESKTOP_VX 0x40
#define HID_DESKTOP_VY 0x41
#define HID_DESKTOP_VZ 0x42
#define HID_DESKTOP_VBRX 0x43
#define HID_DESKTOP_VBRY 0x44
#define HID_DESKTOP_VBRZ 0x45
#define HID_DESKTOP_VNO 0x46
#define HID_DESKTOP_SYS_CONTROL 0x80
#define HID_DESKTOP_SYS_CONTEXT_MNU 0x84
#define HID_DESKTOP_SYS_MAIN_MNU 0x85
#define HID_DESKTOP_SYS_APP_MNU 0x86
#define HID_DESKTOP_SYS_MENU_HELP 0x87
#define HID_DESKTOP_SYS_MENU_EXIT 0x88
#define HID_DESKTOP_SYS_MENU_SELECT 0x89
#define HID_DESKTOP_SYS_MENU_RIGHT 0x8A
#define HID_DESKTOP_SYS_MENU_LEFT 0x8B
#define HID_DESKTOP_SYS_MENU_UP 0x8C
#define HID_DESKTOP_SYS_MENU_DOWN 0x8D
#define HID_DESKTOP_SYS_PWR_DOWN 0x81
#define HID_DESKTOP_SYS_SLEEP 0x82
#define HID_DESKTOP_SYS_WAKEUP 0x83
#define HID_DESKTOP_SYS_RST_COLD 0x8E
#define HID_DESKTOP_SYS_RST_WARM 0x8F
#define HID_DESKTOP_SYS_DOCK 0xA0
#define HID_DESKTOP_SYS_UNDOCK 0xA1
#define HID_DESKTOP_SYS_SETUP 0xA2
#define HID_DESKTOP_SYS_SPKR_MUTE 0xA7
#define HID_DESKTOP_SYS_HIBERNATE 0xA8
#define HID_DESKTOP_COUNTEDBUF 0x3A
#define HID_DESKTOP_BYTECOUNT 0x3B
#define HID_DESKTOP_DPAD_UP 0x90
#define HID_DESKTOP_DPAD_DOWN 0x91
#define HID_DESKTOP_DPAD_RIGHT 0x92
#define HID_DESKTOP_DPAD_LEFT 0x93
#define HID_DESKTOP_FEATURE_NOTIFY 0x47
#define HID_DESKTOP_SYS_BREAK 0xA3
#define HID_DESKTOP_SYS_DBG_BREAK 0xA4
#define HID_DESKTOP_APP_BREAK 0xA5
#define HID_DESKTOP_APP_DBG_BREAK 0xA6
#define HID_DESKTOP_SYS_DISP_INVERT 0xB0
#define HID_DESKTOP_SYS_DISP_INT 0xB1
#define HID_DESKTOP_SYS_DISP_EXT 0xB2
#define HID_DESKTOP_SYS_DISP_BOTH 0xB3
#define HID_DESKTOP_SYS_DISP_DUAL 0xB4
#define HID_DESKTOP_SYS_DISP_TGL 0xB5
#define HID_DESKTOP_SYS_DISP_SWAP 0xB6
#define HID_DESKTOP_SYS_DISP_AUTO 0xB7
#define _USB_HID_USAGE_DEVICE_H_ 
#define HID_PAGE_DEVICE 0x06
#define HID_DEVICE_BATTERY_STRENGHT 0x20
#define HID_DEVICE_WIRELESS_CHANNEL 0x21
#define HID_DEVICE_WIRELESS_ID 0x22
#define HID_DEVICE_DISCO_WIRELESS_CTL 0x23
#define HID_DEVICE_SECURITY_CHAR_ENT 0x24
#define HID_DEVICE_SECURITY_CHAR_ERA 0x25
#define HID_DEVICE_SCURITY_CODE_CLR 0x26
#define _USB_HID_USAGE_H_ 
#define HID_PAGE_GAME 0x05
#define HID_GAME_3D_GAME_CONTROLLER 0x01
#define HID_GAME_PINBALL_DEVICE 0x02
#define HID_GAME_GUN_DEVICE 0x03
#define HID_GAME_POINT_OF_VIEW 0x20
#define HID_GAME_TURN_LEFT_RIGHT 0x21
#define HID_GAME_PITCH_FWD_BACK 0x22
#define HID_GAME_ROLL_LEFT_RIGHT 0x23
#define HID_GAME_MOVE_LEFT_RIGHT 0x24
#define HID_GAME_MOVE_FWD_BACK 0x25
#define HID_GAME_MOVE_UP_DOWN 0x26
#define HID_GAME_LEAN_LEFT_RIGHT 0x27
#define HID_GAME_LEAN_FWD_BACK 0x28
#define HID_GAME_HEIGHT_OF_POV 0x29
#define HID_GAME_FLIPPER 0x2A
#define HID_GAME_SECONDARY_FLIPPER 0x2B
#define HID_GAME_BUMP 0x2C
#define HID_GAME_NEW_GAME 0x2D
#define HID_GAME_SHOOT_BALL 0x2E
#define HID_GAME_PLAYER 0x2F
#define HID_GAME_GUN_BOLT 0x30
#define HID_GAME_GUN_CLIP 0x31
#define HID_GAME_GUN_SELECTOR 0x32
#define HID_GAME_GUN_SINGLE_SHOT 0x33
#define HID_GAME_GUN_BURST 0x34
#define HID_GAME_GUN_AUTOMATIC 0x35
#define HID_GAME_GUN_SAFETY 0x36
#define HID_GAME_GANEPAD_FIRE_JUMP 0x37
#define HID_GAME_GAMEPAD_TRIGGER 0x38
#define _USB_HID_USAGE_KEYBOARD_H_ 
#define HID_PAGE_KEYBOARD 0x07
#define HID_KEYBOARD_ERR_ROLL_OVER 0x01
#define HID_KEYBOARD_POST_FAIL 0x02
#define HID_KEYBOARD_ERR_UNDEFINED 0x03
#define HID_KEYBOARD_A 0x04
#define HID_KEYBOARD_B 0x05
#define HID_KEYBOARD_C 0x06
#define HID_KEYBOARD_D 0x07
#define HID_KEYBOARD_E 0x08
#define HID_KEYBOARD_F 0x09
#define HID_KEYBOARD_G 0x0A
#define HID_KEYBOARD_H 0x0B
#define HID_KEYBOARD_I 0x0C
#define HID_KEYBOARD_J 0x0D
#define HID_KEYBOARD_K 0x0E
#define HID_KEYBOARD_L 0x0F
#define HID_KEYBOARD_M 0x10
#define HID_KEYBOARD_N 0x11
#define HID_KEYBOARD_O 0x12
#define HID_KEYBOARD_P 0x13
#define HID_KEYBOARD_Q 0x14
#define HID_KEYBOARD_R 0x15
#define HID_KEYBOARD_S 0x16
#define HID_KEYBOARD_T 0x17
#define HID_KEYBOARD_U 0x18
#define HID_KEYBOARD_V 0x19
#define HID_KEYBOARD_W 0x1A
#define HID_KEYBOARD_X 0x1B
#define HID_KEYBOARD_Y 0x1C
#define HID_KEYBOARD_Z 0x1D
#define HID_KEYBOARD_1 0x1E
#define HID_KEYBOARD_2 0x1F
#define HID_KEYBOARD_3 0x20
#define HID_KEYBOARD_4 0x21
#define HID_KEYBOARD_5 0x22
#define HID_KEYBOARD_6 0x23
#define HID_KEYBOARD_7 0x24
#define HID_KEYBOARD_8 0x25
#define HID_KEYBOARD_9 0x26
#define HID_KEYBOARD_0 0x27
#define HID_KEYBOARD_RETURN 0x28
#define HID_KEYBOARD_ESCAPE 0x29
#define HID_KEYBOARD_DELETE 0x2A
#define HID_KEYBOARD_TAB 0x2B
#define HID_KEYBOARD_SPACEBAR 0x2C
#define HID_KEYBOARD_MINUS 0x2D
#define HID_KEYBOARD_EQUAL_SIGN 0x2E
#define HID_KEYBOARD_OPEN_BRACKET 0x2F
#define HID_KEYBOARD_CLOSE_BRACKET 0x30
#define HID_KEYBOARD_BACKSLASH 0x31
#define HID_KEYBOARD_NONUS_HASH 0x32
#define HID_KEYBOARD_SEMICOLON 0x33
#define HID_KEYBOARD_APOSTROPHE 0x34
#define HID_KEYBOARD_GRAVE_ACCENT 0x35
#define HID_KEYBOARD_COMMA 0x36
#define HID_KEYBOARD_DOT 0x37
#define HID_KEYBOARD_SLASH 0x38
#define HID_KEYBOARD_CAPS_LOCK 0x39
#define HID_KEYBOARD_F1 0x3A
#define HID_KEYBOARD_F2 0x3B
#define HID_KEYBOARD_F3 0x3C
#define HID_KEYBOARD_F4 0x3D
#define HID_KEYBOARD_F5 0x3E
#define HID_KEYBOARD_F6 0x3F
#define HID_KEYBOARD_F7 0x40
#define HID_KEYBOARD_F8 0x41
#define HID_KEYBOARD_F9 0x42
#define HID_KEYBOARD_F10 0x43
#define HID_KEYBOARD_F11 0x44
#define HID_KEYBOARD_F12 0x45
#define HID_KEYBOARD_PRINT_SCREEN 0x46
#define HID_KEYBOARD_SCROLL_LOCK 0x47
#define HID_KEYBOARD_PAUSE 0x48
#define HID_KEYBOARD_INSERT 0x49
#define HID_KEYBOARD_HOME 0x4A
#define HID_KEYBOARD_PAGE_UP 0x4B
#define HID_KEYBOARD_DELETE_FORWARD 0x4C
#define HID_KEYBOARD_END 0x4D
#define HID_KEYBOARD_PAGE_DOWN 0x4E
#define HID_KEYBOARD_RIGHT_ARROW 0x4F
#define HID_KEYBOARD_LEFT_ARROW 0x50
#define HID_KEYBOARD_DOWN_ARROW 0x51
#define HID_KEYBOARD_UP_ARROW 0x52
#define HID_KEYPAD_NUMLOCK 0x53
#define HID_KEYPAD_SLASH 0x54
#define HID_KEYPAD_ASTERISK 0x55
#define HID_KEYPAD_MINUS 0x56
#define HID_KEYPAD_PLUS 0x57
#define HID_KEYPAD_ENTER 0x58
#define HID_KEYPAD_1 0x59
#define HID_KEYPAD_2 0x5A
#define HID_KEYPAD_3 0x5B
#define HID_KEYPAD_4 0x5C
#define HID_KEYPAD_5 0x5D
#define HID_KEYPAD_6 0x5E
#define HID_KEYPAD_7 0x5F
#define HID_KEYPAD_8 0x60
#define HID_KEYPAD_9 0x61
#define HID_KEYPAD_0 0x62
#define HID_KEYPAD_DOT 0x63
#define HID_KEYBOARD_NONUS_BACKSLASH 0x64
#define HID_KEYBOARD_APPLICATION 0x65
#define HID_KEYBOARD_POWER 0x66
#define HID_KEYPAD_EQUAL 0x67
#define HID_KEYBOARD_F13 0x68
#define HID_KEYBOARD_F14 0x69
#define HID_KEYBOARD_F15 0x6A
#define HID_KEYBOARD_F16 0x6B
#define HID_KEYBOARD_F17 0x6C
#define HID_KEYBOARD_F18 0x6D
#define HID_KEYBOARD_F19 0x6E
#define HID_KEYBOARD_F20 0x6F
#define HID_KEYBOARD_F21 0x70
#define HID_KEYBOARD_F22 0x71
#define HID_KEYBOARD_F23 0x72
#define HID_KEYBOARD_F24 0x73
#define HID_KEYBOARD_EXECUTE 0x74
#define HID_KEYBOARD_HELP 0x75
#define HID_KEYBOARD_MENU 0x76
#define HID_KEYBOARD_SELECT 0x77
#define HID_KEYBOARD_STOP 0x78
#define HID_KEYBOARD_AGAIN 0x79
#define HID_KEYBOARD_UNDO 0x7A
#define HID_KEYBOARD_CUT 0x7B
#define HID_KEYBOARD_COPY 0x7C
#define HID_KEYBOARD_PASTE 0x7D
#define HID_KEYBOARD_FIND 0x7E
#define HID_KEYBOARD_MUTE 0x7F
#define HID_KEYBOARD_VOLUME_UP 0x80
#define HID_KEYBOARD_VOLUME_DOWN 0x81
#define HID_KEYBOARD_LOCK_CAPS_LOCK 0x82
#define HID_KEYBOARD_LOCK_NUM_LOCK 0x83
#define HID_KEYBOARD_LOCK_SCROLL_LOCK 0x84
#define HID_KEYPAD_COMMA 0x85
#define HID_KEYPAD_EQUAL_SIGN 0x86
#define HID_KEYBOARD_INTERNATIONAL_1 0x87
#define HID_KEYBOARD_INTERNATIONAL_2 0x88
#define HID_KEYBOARD_INTERNATIONAL_3 0x89
#define HID_KEYBOARD_INTERNATIONAL_4 0x8A
#define HID_KEYBOARD_INTERNATIONAL_5 0x8B
#define HID_KEYBOARD_INTERNATIONAL_6 0x8C
#define HID_KEYBOARD_INTERNATIONAL_7 0x8D
#define HID_KEYBOARD_INTERNATIONAL_8 0x8E
#define HID_KEYBOARD_INTERNATIONAL_9 0x8F
#define HID_KEYBOARD_LANG_1 0x90
#define HID_KEYBOARD_LANG_2 0x91
#define HID_KEYBOARD_LANG_3 0x92
#define HID_KEYBOARD_LANG_4 0x93
#define HID_KEYBOARD_LANG_5 0x94
#define HID_KEYBOARD_LANG_6 0x95
#define HID_KEYBOARD_LANG_7 0x96
#define HID_KEYBOARD_LANG_8 0x97
#define HID_KEYBOARD_LANG_9 0x98
#define HID_KEYBOARD_ALTERNATE_ERASE 0x99
#define HID_KEYBOARD_SYSREQ 0x9A
#define HID_KEYBOARD_CANCEL 0x9B
#define HID_KEYBOARD_CLEAR 0x9C
#define HID_KEYBOARD_PRIOR 0x9D
#define HID_KEYBOARD_RETURN_1 0x9E
#define HID_KEYBOARD_SEPARATOR 0x9F
#define HID_KEYBOARD_OUT 0xA0
#define HID_KEYBOARD_OPER 0xA1
#define HID_KEYBOARD_CLEAR_AGAIN 0xA2
#define HID_KEYBOARD_CRSEL_PROPS 0xA3
#define HID_KEYBOARD_EXSEL 0xA4
#define HID_KEYPAD_00 0xB0
#define HID_KEYPAD_000 0xB1
#define HID_KEYPAD_OPEN_PARENTHESIS 0xB6
#define HID_KEYPAD_CLOSE_PARENTHESIS 0xB7
#define HID_KEYPAD_OPEN_BRACE 0xB8
#define HID_KEYPAD_CLOSE_BRACE 0xB9
#define HID_KEYPAD_TAB 0xBA
#define HID_KEYPAD_BACKSPACE 0xBB
#define HID_KEYPAD_A 0xBC
#define HID_KEYPAD_B 0xBD
#define HID_KEYPAD_C 0xBE
#define HID_KEYPAD_D 0xBF
#define HID_KEYPAD_E 0xC0
#define HID_KEYPAD_F 0xC1
#define HID_KEYPAD_XOR 0xC2
#define HID_KEYPAD_CARET 0xC3
#define HID_KEYPAD_PERCENT 0xC4
#define HID_KEYPAD_LESS_THEN 0xC5
#define HID_KEYPAD_GREATER_THEN 0xC6
#define HID_KEYPAD_AMPERSAND 0xC7
#define HID_KEYPAD_DOUBLE_AMPERSAND 0xC8
#define HID_KEYPAD_PIPE 0xC9
#define HID_KEYPAD_DOUBLE_PIPE 0xCA
#define HID_KEYPAD_COLON 0xCB
#define HID_KEYPAD_HASH 0xCC
#define HID_KEYPAD_SPACE 0xCD
#define HID_KEYPAD_AT 0xCE
#define HID_KEYPAD_BANG 0xCF
#define HID_KEYPAD_MEM_STORE 0xD0
#define HID_KEYPAD_MEM_RECALL 0xD1
#define HID_KEYPAD_MEM_CLEAR 0xD2
#define HID_KEYPAD_MEM_ADD 0xD3
#define HID_KEYPAD_MEM_SUBTRACT 0xD4
#define HID_KEYPAD_MEM_MULTIPLY 0xD5
#define HID_KEYPAD_MEM_DIVIDE 0xD6
#define HID_KEYPAD_PLUS_MINUS 0xD7
#define HID_KEYPAD_CLEAR 0xD8
#define HID_KEYPAD_CLEAR_ENTRY 0xD9
#define HID_KEYPAD_BINARY 0xDA
#define HID_KEYPAD_OCTAL 0xDB
#define HID_KEYPAD_DECIMAL 0xDC
#define HID_KEYPAD_HEXADECIMAL 0xDD
#define HID_KEYBOARD_L_CTRL 0xE0
#define HID_KEYBOARD_L_SHIFT 0xE1
#define HID_KEYBOARD_L_ALT 0xE2
#define HID_KEYBOARD_L_GUI 0xE3
#define HID_KEYBOARD_R_CTRL 0xE4
#define HID_KEYBOARD_R_SHIFT 0xE5
#define HID_KEYBOARD_R_ALT 0xE6
#define HID_KEYBOARD_R_GUI 0xE7
#define _USB_HID_USAGE_LED_H_ 
#define HID_PAGE_LED 0x08
#define HID_LED_NUM_LOCK 0x01
#define HID_LED_CAPS_LOCK 0x02
#define HID_LED_SCROLL_LOCK 0x03
#define HID_LED_COMPOSE 0x04
#define HID_LED_KANA 0x05
#define HID_LED_POWER 0x06
#define HID_LED_SHIFT 0x07
#define HID_LED_DO_NOT_DISTURB 0x08
#define HID_LED_MUTE 0x09
#define HID_LED_TONE_ENABLE 0x0A
#define HID_LED_HIGH_CUT_FILTER 0x0B
#define HID_LED_LOW_CUT_FILTER 0x0C
#define HID_LED_EQUALIZER_ENABLE 0x0D
#define HID_LED_SOUND_FIELD_ON 0x0E
#define HID_LED_SURROUND_ON 0x0F
#define HID_LED_REPEAT 0x10
#define HID_LED_STEREO 0x11
#define HID_LED_SAMPLING_RATE_DETECT 0x12
#define HID_LED_SPINNING 0x13
#define HID_LED_CAV 0x14
#define HID_LED_CLV 0x15
#define HID_LED_REC_FORMAT_DETECT 0x16
#define HID_LED_OFF_HOOK 0x17
#define HID_LED_RING 0x18
#define HID_LED_MESSAGE_WAITING 0x19
#define HID_LED_DATA_MODE 0x1A
#define HID_LED_BATTERY_OPERATION 0x1B
#define HID_LED_BATTERY_OK 0x1C
#define HID_LED_BATTERY_LOW 0x1D
#define HID_LED_SPEAKER 0x1E
#define HID_LED_HEADSET 0x1F
#define HID_LED_HOLD 0x20
#define HID_LED_MICROPHONE 0x21
#define HID_LED_COVERAGE 0x22
#define HID_LED_NIGHT_MODE 0x23
#define HID_LED_SEND_CALLS 0x24
#define HID_LED_CALL_PICKUP 0x25
#define HID_LED_CONFERENCE 0x26
#define HID_LED_STANDBY 0x27
#define HID_LED_CAMERA_ON 0x28
#define HID_LED_CAMERA_OFF 0x29
#define HID_LED_ONLINE 0x2A
#define HID_LED_OFFLINE 0x2B
#define HID_LED_BUSY 0x2C
#define HID_LED_READY 0x2D
#define HID_LED_PAPER_OUT 0x2E
#define HID_LED_PAPER_JAM 0x2F
#define HID_LED_REMOTE 0x30
#define HID_LED_FORWARD 0x31
#define HID_LED_REVERSE 0x32
#define HID_LED_STOP 0x33
#define HID_LED_REWIND 0x34
#define HID_LED_FAST_FORWARD 0x35
#define HID_LED_PLAY 0x36
#define HID_LED_PAUSE 0x37
#define HID_LED_RECORD 0x38
#define HID_LED_ERROR 0x39
#define HID_LED_USAGE_SELECTED_IND 0x3A
#define HID_LED_USAGE_INUSE_IND 0x3B
#define HID_LED_USAGE_MULTIMODE_IND 0x3C
#define HID_LED_INDICATOR_ON 0x3D
#define HID_LED_INDICATOR_FLASH 0x3E
#define HID_LED_INDICATOR_SLOW_BLINK 0x3F
#define HID_LED_INDICATOR_FAST_BLINK 0x40
#define HID_LED_INDICATOR_OFF 0x41
#define HID_LED_FLASH_ON_TIME 0x42
#define HID_LED_SLOW_BLINK_ON_TIME 0x43
#define HID_LED_SLOW_BLINK_OFF_TIME 0x44
#define HID_LED_FAST_BLINK_ON_TIME 0x45
#define HID_LED_FAST_BLINK_OFF_TIME 0x46
#define HID_LED_USAGE_INDICATOR_COLOR 0x47
#define HID_LED_INDICATOR_RED 0x48
#define HID_LED_INDICATOR_GREEN 0x49
#define HID_LED_INDICATOR_AMBER 0x4A
#define HID_LED_GENERIC_INDICATOR 0x4B
#define HID_LED_SYSTEM_SUSPEND 0x4C
#define HID_LED_EXT_POWER_CONNECTED 0x4D
#define _USB_HID_USAGE_ORDINAL_H_ 
#define HID_PAGE_ORDINAL 0x0A
#define HID_ORDINAL_INSTANCE_1 0x01
#define HID_ORDINAL_INSTANCE_2 0x02
#define HID_ORDINAL_INSTANCE_3 0x03
#define HID_ORDINAL_INSTANCE_4 0x04
#define HID_ORDINAL_INSTANCE_5 0x05
#define _USB_HID_POWER_DEVICES_H_ 
#define HID_POWER_UNIT_AC_VOLTAGE 0x67, 0x21, 0xD1, 0xF0, 0x00, 0x55, 0x07
#define HID_POWER_UNIT_AC_CURRENT 0x67, 0x01, 0x00, 0x10, 0x00, 0x55, 0xFE
#define HID_POWER_UNIT_FREQUENCY 0x66, 0x01, 0xF0, 0x55, 0x00
#define HID_POWER_UNIT_DC_VOLTAGE 0x67, 0x21, 0xD1, 0xF0, 0x00, 0x55, 0x07
#define HID_POWER_UNIT_TIME 0x66, 0x01, 0x10, 0x55, 0x00
#define HID_POWER_UNIT_DC_CURRENT 0x67, 0x01, 0x00, 0x10, 0x00, 0x55, 0xFE
#define HID_POWER_UNIT_POWER 0x66, 0x21, 0xD1, 0x55, 0x07
#define HID_POWER_UNIT_TEMPERATURE 0x67, 0x01, 0x00, 0x01, 0x00, 0x55, 0x00
#define HID_POWER_UNIT_BATTERY_CAPACITY 0x67, 0x01, 0x10, 0x10, 0x00, 0x55, 0x00
#define BATTERY_MGF_DATE(y,m,d) (((((y) - 1980) & 0x7F) << 9) + (((m) & 0x0F) << 5) + ((d) & 0x1F))
#define HID_POWER_PAGE 0x84
#define HID_POWER_INAME 0x01
#define HID_POWER_PRESENT_STATUS 0x02
#define HID_POWER_CHANGED_STATUS 0x03
#define HID_POWER_UPS 0x04
#define HID_POWER_POWER_SUPPLY 0x05
#define HID_POWER_BATTERY_SYSTEM 0x10
#define HID_POWER_BATTERY_SYSTEM_ID 0x11
#define HID_POWER_BATTERY 0x12
#define HID_POWER_BATTERY_ID 0x13
#define HID_POWER_CHARGER 0x14
#define HID_POWER_CHARGER_ID 0x15
#define HID_POWER_POWER_CONVERTER 0x16
#define HID_POWER_POWER_CONVERTER_ID 0x17
#define HID_POWER_OUTLET_SYSTEM 0x18
#define HID_POWER_OUTLET_SYSTEM_ID 0x19
#define HID_POWER_INPUT 0x1A
#define HID_POWER_INPUT_ID 0x1B
#define HID_POWER_OUTPUT 0x1C
#define HID_POWER_OUTPUT_ID 0x1D
#define HID_POWER_FLOW 0x1E
#define HID_POWER_FLOW_ID 0x1F
#define HID_POWER_OUTLET 0x20
#define HID_POWER_OUTLET_ID 0x21
#define HID_POWER_GANG 0x22
#define HID_POWER_GANG_ID 0x23
#define HID_POWER_POWER_SUMMARY 0x24
#define HID_POWER_POWER_SUMMARY_ID 0x25
#define HID_POWER_VOLTAGE 0x30
#define HID_POWER_CURRENT 0x31
#define HID_POWER_FREQUENCY 0x32
#define HID_POWER_APPARENT_POWER 0x33
#define HID_POWER_ACTIVE_POWER 0x34
#define HID_POWER_PERCENT_LOAD 0x35
#define HID_POWER_TEMPERATURE 0x36
#define HID_POWER_HUMIDITY 0x37
#define HID_POWER_BAD_COUNT 0x38
#define HID_POWER_CONFIG_VOLTAGE 0x40
#define HID_POWER_CONFIG_CURRENT 0x41
#define HID_POWER_CONFIG_FREQUENCY 0x42
#define HID_POWER_CONFIG_APPARENT_POWER 0x43
#define HID_POWER_CONFIG_ACTIVE_POWER 0x44
#define HID_POWER_CONFIG_PERCENT_LOAD 0x45
#define HID_POWER_CONFIG_TEMPERATURE 0x46
#define HID_POWER_CONFIG_HUMIDITY 0x47
#define HID_POWER_SWITCH_ON_CONTROL 0x50
#define HID_POWER_SWITCH_OFF_CONTROL 0x51
#define HID_POWER_TOGGLE_CONTROL 0x52
#define HID_POWER_LOW_VOLTAGE_TRANSFER 0x53
#define HID_POWER_HIGH_VOLTAGE_TRANSFER 0x54
#define HID_POWER_DELAY_BEFORE_REBOOT 0x55
#define HID_POWER_DELAY_BEFORE_STARTUP 0x56
#define HID_POWER_DELAY_BEFORE_SHUTDOWN 0x57
#define HID_POWER_TEST 0x58
#define HID_POWER_MODULE_RESET 0x59
#define HID_POWER_AUDIBLE_ALARM_CONTROL 0x5A
#define HID_POWER_PRESENT 0x60
#define HID_POWER_GOOD 0x61
#define HID_POWER_INTERNAL_FAILURE 0x62
#define HID_POWER_VOLTAGE_OUT_OF_RANGE 0x63
#define HID_POWER_FREQUENCY_OUT_OF_RANGE 0x64
#define HID_POWER_OVERLOAD 0x65
#define HID_POWER_OVERCHARGED 0x66
#define HID_POWER_OVERTEMPERATURE 0x67
#define HID_POWER_SUTDOWN_REQUESTED 0x68
#define HID_POWER_SHUTDOWN_IMMINENT 0x69
#define HID_POWER_SWITCH_ON_OFF 0x6B
#define HID_POWER_SWITHABLE 0x6C
#define HID_POWER_USED 0x6D
#define HID_POWER_BOOST 0x6E
#define HID_POWER_BUCK 0x6F
#define HID_POWER_INITIALIZED 0x70
#define HID_POWER_TESTED 0x71
#define HID_POWER_AWAITING_POWER 0x72
#define HID_POWER_COMMUNICATION_LOST 0x73
#define HID_POWER_IMANUFACTURER 0xFD
#define HID_POWER_IPRODUCT 0xFE
#define HID_POWER_ISERIALNUMBER 0xFF
#define HID_POWER_STOP_SEQUENCE 0x00
#define HID_POWER_START_SEQUENCE 0x01
#define HID_POWER_SEQUENCE_NONE 0x00
#define HID_POWER_SEQUENCE_STARTED 0x01
#define HID_POWER_SEQUENCE_INPROGRESS 0x02
#define HID_POWER_SEQUENCE_STOPPED 0x03
#define HID_POWER_TEST_NO 0x00
#define HID_POWER_TEST_QUICK 0x01
#define HID_POWER_TEST_DEEP 0x02
#define HID_POWER_TEST_ABORT 0x03
#define HID_POWER_TEST_PASSED 0x01
#define HID_POWER_TEST_WARNED 0x02
#define HID_POWER_TEST_ERROR 0x03
#define HID_POWER_TEST_ABORTED 0x04
#define HID_POWER_TEST_INPROGRESS 0x05
#define HID_POWER_TEST_NOT_INITIATED 0x06
#define HID_POWER_RESET_NO 0x00
#define HID_POWER_RESET_MODULE 0x01
#define HID_POWER_RESET_ALARMS 0x02
#define HID_POWER_RESET_COUNTERS 0x03
#define HID_POWER_ALARM_DISABLED 0x00
#define HID_POWER_ALARM_ENABLED 0x01
#define HID_POWER_ALARM_MUTED 0x02
#define HID_BATTERY_PAGE 0x85
#define HID_BATTERY_SMB_BATTERY_MODE 0x01
#define HID_BATTERY_SMB_BATTERY_STATUS 0x02
#define HID_BATTERY_SMB_ALARM_WARNING 0x03
#define HID_BATTERY_SMB_CHARGER_MODE 0x04
#define HID_BATTERY_SMB_CHARGER_STATUS 0x05
#define HID_BATTERY_SMB_CHARGER_SPECINFO 0x06
#define HID_BATTERY_SMB_SELECTOR_STATE 0x07
#define HID_BATTERY_SMB_SELECTOR_PRESETS 0x08
#define HID_BATTERY_SMB_SELECTOR_INFO 0x09
#define HID_BATTERY_OPTIONAL_MFG_FUNC1 0x10
#define HID_BATTERY_OPTIONAL_MFG_FUNC2 0x11
#define HID_BATTERY_OPTIONAL_MFG_FUNC3 0x12
#define HID_BATTERY_OPTIONAL_MFG_FUNC4 0x13
#define HID_BATTERY_OPTIONAL_MFG_FUNC5 0x14
#define HID_BATTERY_CONNECTION_TO_SMBUS 0x15
#define HID_BATTERY_OUTPUT_CONNECTION 0x16
#define HID_BATTERY_CHARGER_CONNECTION 0x17
#define HID_BATTERY_BATTERY_INSERTION 0x18
#define HID_BATTERY_USE_NEXT 0x19
#define HID_BATTERY_OK_TO_USE 0x1A
#define HID_BATTERY_BATTERY_SUPPORTED 0x1B
#define HID_BATTERY_SELECTOR_REVISION 0x1C
#define HID_BATTERY_CHARGING_INDICATOR 0x1D
#define HID_BATTERY_MANUFACTURER_ACCESS 0x28
#define HID_BATTERY_REMAINING_CAP_LIMIT 0x29
#define HID_BATTERY_REMAINING_TIME_LIMIT 0x2A
#define HID_BATTERY_ATRATE 0x2B
#define HID_BATTERY_CAPACITY_MODE 0x2C
#define HID_BATTERY_BROADCAST_TO_CHARGER 0x2D
#define HID_BATTERY_PRIMARY_BATTERY 0x2E
#define HID_BATTERY_CHARGE_CONTROLLER 0x2F
#define HID_BATTERY_TERMINATE_CHARGE 0x40
#define HID_BATTERY_TERMINATE_DISCHARGE 0x41
#define HID_BATTERY_BELOW_REM_CAP_LIMIT 0x42
#define HID_BATTERY_REM_TIME_LIMIT_EXPIRED 0x43
#define HID_BATTERY_CHARGING 0x44
#define HID_BATTERY_DISCHARGING 0x45
#define HID_BATTERY_FULLY_CHARGED 0x46
#define HID_BATTERY_FULLY_DISCHARGED 0x47
#define HID_BATTERY_CONDITIONING_FLAG 0x48
#define HID_BATTERY_ATRATE_OK 0x49
#define HID_BATTERY_SMB_ERROR_CODE 0x4A
#define HID_BATTERY_NEED_REPLACEMENT 0x4B
#define HID_BATTERY_ATRATE_TIME_TO_FILL 0x60
#define HID_BATTERY_ATRATE_TIME_TO_EMPTY 0x61
#define HID_BATTERY_AVERAGE_CURRENT 0x62
#define HID_BATTERY_MAXERROR 0x63
#define HID_BATTERY_REL_STATE_OF_CHARGE 0x64
#define HID_BATTERY_ABS_STATE_OF_CHARGE 0x65
#define HID_BATTERY_REMAINING_CAPACITY 0x66
#define HID_BATTERY_FULL_CHARGE_CAPACITY 0x67
#define HID_BATTERY_RUN_TIME_TO_EMPTY 0x68
#define HID_BATTERY_AVG_TIME_TO_EMPTY 0x69
#define HID_BATTERY_AVG_TIME_TO_FULL 0x6A
#define HID_BATTERY_CYCLE_COUNT 0x6B
#define HID_BATTERY_BATT_PACK_MODEL_LEVEL 0x80
#define HID_BATTERY_INT_CHARGE_CONTROLLER 0x81
#define HID_BATTERY_PRIMARY_BATTERY_SUPPORT 0x82
#define HID_BATTERY_DESIGN_CAPACITY 0x83
#define HID_BATTERY_SPECIFICATION_INFO 0x84
#define HID_BATTERY_MANUFACTURER_DATE 0x85
#define HID_BATTERY_SERIAL_NUMBER 0x86
#define HID_BATTERY_IMANUFACTURER_NAME 0x87
#define HID_BATTERY_IDEVICE_NAME 0x88
#define HID_BATTERY_IDEVICE_CHEMISTERY 0x89
#define HID_BATTERY_MANUFACTURER_DATA 0x8A
#define HID_BATTERY_RECHARGEABLE 0x8B
#define HID_BATTERY_WARNINIG_CAP_LIMIT 0x8C
#define HID_BATTERY_CAP_GRANULARITY1 0x8D
#define HID_BATTERY_CAP_GRANULARITY2 0x8E
#define HID_BATTERY_IOEM_INFORMATION 0x8F
#define HID_BATTERY_INHIBIT_CHARGE 0xC0
#define HID_BATTERY_ENABLE_POLLING 0xC1
#define HID_BATTERY_RESET_TO_ZERO 0xC2
#define HID_BATTERY_AC_PRESENT 0xD0
#define HID_BATTERY_BATTERY_PRESENT 0xD1
#define HID_BATTERY_POWER_FAIL 0xD2
#define HID_BATTERY_ALARM_INHIBITED 0xD3
#define HID_BATTERY_THERMISTOR_UNDER_RANGE 0xD4
#define HID_BATTERY_THERMISTOR_HOT 0xD5
#define HID_BATTERY_THERMISTOR_COLD 0xD6
#define HID_BATTERY_THERMISTOR_OVER_RANGE 0xD7
#define HID_BATTERY_VOLTAGE_OUT_OF_RANGE 0xD8
#define HID_BATTERY_CURRENT_OUT_OF_RANGE 0xD9
#define HID_BATTERY_CURRENT_NOT_REGULATED 0xDA
#define HID_BATTERY_VOLTAGE_NOT_REGULATED 0xDB
#define HID_BATTERY_MASTER_MODE 0xDC
#define HID_BATTERY_CHARGER_SELECTOR_SUPP 0xF0
#define HID_BATTERY_CHARGER_SPEC 0xF1
#define HID_BATTERY_LEVEL2 0xF2
#define HID_BATTERY_LEVEL3 0xF3
#define HID_BATTERY_CAPACITY_MAH 0x00
#define HID_BATTERY_CAPACITY_MWH 0x01
#define HID_BATTERY_CAPACITY_PERCENT 0x02
#define HID_BATTERY_CAPACITY_BOOL 0x03
#define HID_BATTERY_MODEL_BASIC 0x00
#define HID_BATTERY_MODEL_INTELLIGENT 0x01
#define HID_BATTERY_MODEL_SMART 0x02
#define _USB_HID_USAHE_SUMUL_H_ 
#define HID_PAGE_SIMULATION 0x02
#define HID_SIMUL_SPORTS 0x08
#define HID_SIMUL_FLIGHT 0x01
#define HID_SIMUL_SPACESHIP 0x04
#define HID_SIMUL_AIRPLANE 0x09
#define HID_SIMUL_HELICOPTER 0x0A
#define HID_SIMUL_ALIERON 0xB0
#define HID_SIMUL_ALIERIN_TRIM 0xB1
#define HID_SIMUL_ANTI_TORQUE 0xB2
#define HID_SIMUL_AUTOPILOT_ENABLE 0xB3
#define HID_SIMUL_CHAFF_RELEASE 0xB4
#define HID_SIMUL_COLLECTIVE_CONTROL 0xB5
#define HID_SIMUL_CYCLIC_CONTROL 0x22
#define HID_SIMUL_CYCLIC_TRIM 0x23
#define HID_SIMUL_DRIVE_BRAKE 0xB6
#define HID_SIMUL_ELECTR_COUNTERMEAS 0xB7
#define HID_SIMUL_ELEVATOR 0xB8
#define HID_SIMUL_ELEVATOR_TRIM 0xB9
#define HID_SIMUL_FLIGHT_COMM 0xBC
#define HID_SIMUL_FLARE_RELEASE 0xBD
#define HID_SIMUL_FLIGHT_CONTROL_STICK 0x20
#define HID_SIMUL_FLIGHT_STICK 0x21
#define HID_SIMUL_LANDING_GEAR 0xBE
#define HID_SIMUL_RUDDER 0xBA
#define HID_SIMUL_TOE_BRAKE 0xBF
#define HID_SIMUL_THROTTLE 0xBB
#define HID_SIMUL_TRIGGER 0xC0
#define HID_SIMUL_WEAPONS_ARM 0xC1
#define HID_SIMUL_WEAPONS_SELECT 0xC2
#define HID_SIMUL_WING_FLAPS 0xC3
#define HID_SIMUL_FLIGHT_YOKE 0x24
#define HID_SIMUL_AUTOMOBILE 0x02
#define HID_SIMUL_ACCELERATOR 0xC4
#define HID_SIMUL_BRAKE 0xC5
#define HID_SIMUL_CLUTCH 0xC6
#define HID_SIMUL_SHIFTER 0xC7
#define HID_SIMUL_STEERING 0xC8
#define HID_SIMUL_TANK 0x03
#define HID_SIMUL_TRACK_CONTROL 0x25
#define HID_SIMUL_TURRET_DIRECTION 0xC9
#define HID_SIMUL_BARREL_ELEVATION 0xCA
#define HID_SIMUL_SUBMARINE 0x05
#define HID_SIMUL_SAILING 0x06
#define HID_SIMUL_DIVE_PLANE 0xCB
#define HID_SIMUL_BALLAST 0xCC
#define HID_SIMUL_MOTOCYCLE 0x07
#define HID_SIMUL_BICYCLE 0x0C
#define HID_SIMUL_BICYCLE_CRANK 0xCD
#define HID_SIMUL_HANDLE_BARS 0xCE
#define HID_SIMUL_FRONT_BRAKE 0xCF
#define HID_SIMUL_REAR_BRAKE 0xD0
#define HID_SIMUL_MAGIC_CARPET 0x0B
#define _USB_HID_USAGE_SPORT_H_ 
#define HID_PAGE_SPORT 0x04
#define HID_SPORT_BASEBALL_BAT 0x01
#define HID_SPORT_GOLF_CLUB 0x02
#define HID_SPORT_ROWING_MACHINE 0x03
#define HID_SPORT_TREADMILL 0x04
#define HID_SPORT_OAR 0x30
#define HID_SPORT_SLOPE 0x31
#define HID_SPORT_RATE 0x32
#define HID_SPORT_STICK_SPEED 0x33
#define HID_SPORT_STICK_FACE_ANGLE 0x34
#define HID_SPORT_STICK_HEEL_TOE 0x35
#define HID_SPORT_STICK_FOLLOW_THROUGH 0x36
#define HID_SPORT_STICK_TEMPO 0x37
#define HID_SPORT_STICK_TYPE 0x38
#define HID_SPORT_STICK_HEIGHT 0x39
#define HID_SPORT_PUTTER 0x50
#define HID_SPORT_1_IRON 0x51
#define HID_SPORT_2_IRON 0x52
#define HID_SPORT_3_IRON 0x53
#define HID_SPORT_4_IRON 0x54
#define HID_SPORT_5_IRON 0x55
#define HID_SPORT_6_IRON 0x56
#define HID_SPORT_7_IRON 0x57
#define HID_SPORT_8_IRON 0x58
#define HID_SPORT_9_IRON 0x59
#define HID_SPORT_10_IRON 0x5A
#define HID_SPORT_11_IRON 0x5B
#define HID_SPORT_SAND_WEDGE 0x5C
#define HID_SPORT_LOFT_WEDGE 0x5D
#define HID_SPORT_POWER_WEDGE 0x5E
#define HID_SPORT_1_WOOD 0x5F
#define HID_SPORT_3_WOOD 0x60
#define HID_SPORT_5_WOOD 0x61
#define HID_SPORT_7_WOOD 0x62
#define HID_SPORT_9_WOOD 0x63
#define _USB_HID_USAGE_TELEPHONY_H_ 
#define HID_PAGE_TELEPHONY 0x0B
#define HID_PHONE_PHONE 0x01
#define HID_PHONE_ANSWERING_MACHINE 0x02
#define HID_PHONE_MESSAGE_CONTROLS 0x03
#define HID_PHONE_HANDSET 0x04
#define HID_PHONE_HEADSET 0x05
#define HID_PHONE_TELEPHONY_KEYPAD 0x06
#define HID_PHONE_PROGRAMMABLE_BUTTON 0x07
#define HID_PHONE_HOOK_SWITCH 0x20
#define HID_PHONE_FLASH 0x21
#define HID_PHONE_FEATURE 0x22
#define HID_PHONE_HOLD 0x23
#define HID_PHONE_REDIAL 0x24
#define HID_PHONE_TRANSFER 0x25
#define HID_PHONE_DROP 0x26
#define HID_PHONE_PARK 0x27
#define HID_PHONE_FORWARD_CALLS 0x28
#define HID_PHONE_ALTERNATE_FUNCTION 0x29
#define HID_PHONE_LINE 0x2A
#define HID_PHONE_SPEAKERPHONE 0x2B
#define HID_PHONE_CONFERENCE 0x2C
#define HID_PHONE_RING_ENABLE 0x2D
#define HID_PHONE_RING_SELECT 0x2E
#define HID_PHONE_PHONE_MUTE 0x2F
#define HID_PHONE_CALLER_ID 0x30
#define HID_PHONE_SEND 0x31
#define HID_PHONE_SPEED_DIAL 0x50
#define HID_PHONE_STORE_NUMBER 0x51
#define HID_PHONE_RECALL_NUMBER 0x52
#define HID_PHONE_PHONE_DIRECTORY 0x53
#define HID_PHONE_VOICE_MAIL 0x70
#define HID_PHONE_SCREEN_CALLS 0x71
#define HID_PHONE_DO_NOT_DISTURB 0x72
#define HID_PHONE_MESSAGE 0x73
#define HID_PHONE_ANSWER_ON_OFF 0x74
#define HID_PHONE_INSIDE_DIAL_TONE 0x90
#define HID_PHONE_OUTSIDE_DIAL_TONE 0x91
#define HID_PHONE_INSIDE_RING_TONE 0x92
#define HID_PHONE_OUTSIDE_RING_TONE 0x93
#define HID_PHONE_PRIORITY_RING_TONE 0x94
#define HID_PHONE_INSIDE_RINGBACK 0x95
#define HID_PHONE_PRIORITY_RINGBACK 0x96
#define HID_PHONE_LINE_BUSY_TONE 0x97
#define HID_PHONE_REORDER_TONE 0x98
#define HID_PHONE_CALL_WAITING_TONE 0x99
#define HID_PHONE_CONFIRMATION_TONE_1 0x9A
#define HID_PHONE_CONFIRMATION_TONE_2 0x9B
#define HID_PHONE_TONES_OFF 0x9C
#define HID_PHONE_OUTSIDE_RINGBACK 0x9D
#define HID_PHONE_RINGER 0x9E
#define HID_PHONE_KEY_0 0xB0
#define HID_PHONE_KEY_1 0xB1
#define HID_PHONE_KEY_2 0xB2
#define HID_PHONE_KEY_3 0xB3
#define HID_PHONE_KEY_4 0xB4
#define HID_PHONE_KEY_5 0xB5
#define HID_PHONE_KEY_6 0xB6
#define HID_PHONE_KEY_7 0xB7
#define HID_PHONE_KEY_8 0xB8
#define HID_PHONE_KEY_9 0xB9
#define HID_PHONE_KEY_STAR 0xBA
#define HID_PHONE_KEY_POUND 0xBB
#define HID_PHONE_KEY_A 0xBC
#define HID_PHONE_KEY_B 0xBD
#define HID_PHONE_KEY_C 0xBE
#define HID_PHONE_KEY_D 0xBF
#define _USB_HID_USAGE_VR_H_ 
#define HID_PAGE_VR 0x03
#define HID_VR_BELT 0x01
#define HID_VR_BODY_SUIT 0x02
#define HID_VR_FLEXTOR 0x03
#define HID_VR_GLOVE 0x04
#define HID_VR_HEAD_TRACKER 0x05
#define HID_VR_HEAD_MOUNTED_DISPLAY 0x06
#define HID_VR_HAND_TRACKER 0x07
#define HID_VR_OCULOMETER 0x08
#define HID_VR_VEST 0x09
#define HID_VR_ANIMATRONIC_DEVICE 0x0A
#define HID_VR_STEREO_ENABLE 0x20
#define HID_VR_DISPLAY_ENABLE 0x21
#define _STM32_COMPAT_H_ 
#define _STM32_H_ 
#define _BMD(reg,msk,val) (reg) = (((reg) & ~(msk)) | (val))
#define _BST(reg,bits) (reg) = ((reg) | (bits))
#define _BCL(reg,bits) (reg) = ((reg) & ~(bits))
#define _WBS(reg,bits) while(((reg) & (bits)) == 0)
#define _WBC(reg,bits) while(((reg) & (bits)) != 0)
#define _WVL(reg,msk,val) while(((reg) & (msk)) != (val))
#define _BV(bit) (0x01 << (bit))
#define _USB_H_ 
#define _USBD_CORE_H_ 
#define usbd_evt_reset 0
#define usbd_evt_sof 1
#define usbd_evt_susp 2
#define usbd_evt_wkup 3
#define usbd_evt_eptx 4
#define usbd_evt_eprx 5
#define usbd_evt_epsetup 6
#define usbd_evt_error 7
#define usbd_evt_count 8
#define usbd_lane_unk 0
#define usbd_lane_dsc 1
#define usbd_lane_sdp 2
#define usbd_lane_cdp 3
#define usbd_lane_dcp 4
#define USBD_HW_ADDRFST (1 << 0)
#define USBD_HW_BC (1 << 1)
#define USND_HW_HS (1 << 2)
#define USBD_HW_ENABLED (1 << 3)
#define USBD_HW_ENUMSPEED (3 << 4)
#define USBD_HW_SPEED_NC (0 << 4)
#define USBD_HW_SPEED_LS (1 << 4)
#define USBD_HW_SPEED_FS (2 << 4)
#define USBD_HW_SPEED_HS (3 << 4)
#define USB_EPTYPE_DBLBUF 0x04
#define USB_REQ_DIRECTION (1 << 7)
#define USB_REQ_HOSTTODEV (0 << 7)
#define USB_REQ_DEVTOHOST (1 << 7)
#define USB_REQ_TYPE (3 << 5)
#define USB_REQ_STANDARD (0 << 5)
#define USB_REQ_CLASS (1 << 5)
#define USB_REQ_VENDOR (2 << 5)
#define USB_REQ_RECIPIENT (3 << 0)
#define USB_REQ_DEVICE (0 << 0)
#define USB_REQ_INTERFACE (1 << 0)
#define USB_REQ_ENDPOINT (2 << 0)
#define USB_REQ_OTHER (3 << 0)
enum usbd_machine_state {
    usbd_state_disabled,
    usbd_state_disconnected,
    usbd_state_default,
    usbd_state_addressed,
    usbd_state_configured,
};
enum usbd_ctl_state {
    usbd_ctl_idle,
    usbd_ctl_rxdata,
    usbd_ctl_txdata,
    usbd_ctl_ztxdata,
    usbd_ctl_lastdata,
    usbd_ctl_statusin,
    usbd_ctl_statusout,
};
typedef enum _usbd_respond {
    usbd_fail,
    usbd_ack,
    usbd_nak,
} usbd_respond;
typedef struct _usbd_device usbd_device;
typedef struct {
    uint8_t bmRequestType;
    uint8_t bRequest;
    uint16_t wValue;
    uint16_t wIndex;
    uint16_t wLength;
    uint8_t data[];
} usbd_ctlreq;
typedef struct {
             void *data_buf;
             void *data_ptr;
             uint16_t data_count;
             uint16_t data_maxsize;
             uint8_t ep0size;
             uint8_t device_cfg;
    volatile uint8_t device_state;
             uint8_t control_state;
} usbd_status;
typedef void (*usbd_evt_callback)(usbd_device *dev, uint8_t event, uint8_t ep);
typedef void (*usbd_rqc_callback)(usbd_device *dev, usbd_ctlreq *req);
typedef usbd_respond (*usbd_ctl_callback)(usbd_device *dev, usbd_ctlreq *req, usbd_rqc_callback *callback);
typedef usbd_respond (*usbd_dsc_callback)(usbd_ctlreq *req, void **address, uint16_t *dsize);
typedef usbd_respond (*usbd_cfg_callback)(usbd_device *dev, uint8_t cfg);
typedef uint32_t (*usbd_hw_getinfo)(void);
typedef void (*usbd_hw_enable)(_Bool enable);
typedef uint8_t (*usbd_hw_connect)(_Bool connect);
typedef void (*usbd_hw_setaddr)(uint8_t address);
typedef _Bool (*usbd_hw_ep_config)(uint8_t ep, uint8_t eptype, uint16_t epsize);
typedef void (*usbd_hw_ep_deconfig)(uint8_t ep);
typedef int32_t (*usbd_hw_ep_read)(uint8_t ep, void *buf, uint16_t blen);
typedef int32_t (*usbd_hw_ep_write)(uint8_t ep, const void *buf, uint16_t blen);
typedef void (*usbd_hw_ep_setstall)(uint8_t ep, _Bool stall);
typedef _Bool (*usbd_hw_ep_isstalled)(uint8_t ep);
typedef void (*usbd_hw_poll)(usbd_device *dev, usbd_evt_callback callback);
typedef uint16_t (*usbd_hw_get_frameno)(void);
typedef uint16_t (*usbd_hw_get_serialno)(void *buffer);
struct usbd_driver {
    usbd_hw_getinfo getinfo;
    usbd_hw_enable enable;
    usbd_hw_connect connect;
    usbd_hw_setaddr setaddr;
    usbd_hw_ep_config ep_config;
    usbd_hw_ep_deconfig ep_deconfig;
    usbd_hw_ep_read ep_read;
    usbd_hw_ep_write ep_write;
    usbd_hw_ep_setstall ep_setstall;
    usbd_hw_ep_isstalled ep_isstalled;
    usbd_hw_poll poll;
    usbd_hw_get_frameno frame_no;
    usbd_hw_get_serialno get_serialno_desc;
};
struct _usbd_device {
    const struct usbd_driver *driver;
    usbd_ctl_callback control_callback;
    usbd_rqc_callback complete_callback;
    usbd_cfg_callback config_callback;
    usbd_dsc_callback descriptor_callback;
    usbd_evt_callback events[8];
    usbd_evt_callback endpoint[8];
    usbd_status status;
};
inline static void usbd_init(usbd_device *dev, const struct usbd_driver *drv,
                             const uint8_t ep0size, uint32_t *buffer, const uint16_t bsize) {
    dev->driver = drv;
    dev->status.ep0size = ep0size;
    dev->status.data_ptr = buffer;
    dev->status.data_buf = buffer;
    dev->status.data_maxsize = bsize - __builtin_offsetof (usbd_ctlreq, data);
}
void usbd_poll(usbd_device *dev);
inline static void usbd_reg_control(usbd_device *dev, usbd_ctl_callback callback) {
    dev->control_callback = callback;
}
inline static void usbd_reg_config(usbd_device *dev, usbd_cfg_callback callback) {
    dev->config_callback = callback;
}
inline static void usbd_reg_descr(usbd_device *dev, usbd_dsc_callback callback) {
    dev->descriptor_callback = callback;
}
inline static _Bool usbd_ep_config(usbd_device *dev, uint8_t ep, uint8_t eptype, uint16_t epsize) {
    return dev->driver->ep_config(ep, eptype, epsize);
}
inline static void usbd_ep_deconfig(usbd_device *dev, uint8_t ep) {
    dev->driver->ep_deconfig(ep);
}
inline static void usbd_reg_endpoint(usbd_device *dev, uint8_t ep, usbd_evt_callback callback) {
    dev->endpoint[ep & 0x07] = callback;
}
inline static void usbd_reg_event(usbd_device *dev, uint8_t evt, usbd_evt_callback callback) {
    dev->events[evt] = callback;
}
inline static int32_t usbd_ep_write(usbd_device *dev, uint8_t ep, const void *buf, uint16_t blen) {
    return dev->driver->ep_write(ep, buf, blen);
}
inline static int32_t usbd_ep_read(usbd_device *dev, uint8_t ep, void *buf, uint16_t blen) {
    return dev->driver->ep_read(ep, buf, blen);
}
inline static void usbd_ep_stall(usbd_device *dev, uint8_t ep) {
    dev->driver->ep_setstall(ep, 1);
}
inline static void usbd_ep_unstall(usbd_device *dev, uint8_t ep) {
    dev->driver->ep_setstall(ep, 0);
}
inline static void usbd_enable(usbd_device *dev, _Bool enable) {
    dev->driver->enable(enable);
}
inline static uint8_t usbd_connect(usbd_device *dev, _Bool connect) {
    return dev->driver->connect(connect);
}
inline static uint32_t usbd_getinfo(usbd_device *dev) {
    return dev->driver->getinfo();
}
#define _USB_STD_H_ 
#define __CAT(x,y) x ## y
#define CAT(x,y) __CAT(x,y)
#define VERSION_BCD(maj,min,rev) (((maj & 0xFF) << 8) | ((min & 0x0F) << 4) | (rev & 0x0F))
#define USB_ARRAY_DESC(...) {.bLength = 2 + sizeof((uint16_t[]){__VA_ARGS__}), .bDescriptorType = USB_DTYPE_STRING, .wString = {__VA_ARGS__}}
#define USB_STRING_DESC(s) {.bLength = sizeof(CAT(u,s)), .bDescriptorType = USB_DTYPE_STRING, .wString = {CAT(u,s)}}
#define USB_CFG_POWER_MA(mA) ((mA) >> 1)
#define USB_CFG_ATTR_RESERVED 0x80
#define USB_CFG_ATTR_SELFPOWERED 0x40
#define USB_EPDIR_IN 0x00
#define USB_EPDIR_OUT 0x80
#define USB_EPTYPE_CONTROL 0x00
#define USB_EPTYPE_ISOCHRONUS 0x01
#define USB_EPTYPE_BULK 0x02
#define USB_EPTYPE_INTERRUPT 0x03
#define USB_EPATTR_NO_SYNC 0x00
#define USB_EPATTR_ASYNC 0x04
#define USB_EPATTR_ADAPTIVE 0x08
#define USB_EPATTR_SYNC 0x0C
#define USB_EPUSAGE_DATA 0x00
#define USB_EPUSAGE_FEEDBACK 0x10
#define USB_EPUSAGE_IMP_FEEDBACK 0x20
#define NO_DESCRIPTOR 0x00
#define INTSERIALNO_DESCRIPTOR 0xFE
#define USB_CLASS_PER_INTERFACE 0x00
#define USB_SUBCLASS_NONE 0x00
#define USB_PROTO_NONE 0x00
#define USB_CLASS_AUDIO 0x01
#define USB_CLASS_PHYSICAL 0x05
#define USB_CLASS_STILL_IMAGE 0x06
#define USB_CLASS_PRINTER 0x07
#define USB_CLASS_MASS_STORAGE 0x08
#define USB_CLASS_HUB 0x09
#define USB_CLASS_CSCID 0x0B
#define USB_CLASS_CONTENT_SEC 0x0D
#define USB_CLASS_VIDEO 0x0E
#define USB_CLASS_HEALTHCARE 0x0F
#define USB_CLASS_AV 0x10
#define USB_CLASS_BILLBOARD 0x11
#define USB_CLASS_CBRIDGE 0x12
#define USB_CLASS_DIAGNOSTIC 0xDC
#define USB_CLASS_WIRELESS 0xE0
#define USB_CLASS_MISC 0xEF
#define USB_CLASS_APP_SPEC 0xFE
#define USB_CLASS_VENDOR 0xFF
#define USB_SUBCLASS_VENDOR 0xFF
#define USB_PROTO_VENDOR 0xFF
#define USB_CLASS_IAD 0xEF
#define USB_SUBCLASS_IAD 0x02
#define USB_PROTO_IAD 0x01
#define USB_DTYPE_DEVICE 0x01
#define USB_DTYPE_CONFIGURATION 0x02
#define USB_DTYPE_STRING 0x03
#define USB_DTYPE_INTERFACE 0x04
#define USB_DTYPE_ENDPOINT 0x05
#define USB_DTYPE_QUALIFIER 0x06
#define USB_DTYPE_OTHER 0x07
#define USB_DTYPE_INTERFACEPOWER 0x08
#define USB_DTYPE_OTG 0x09
#define USB_DTYPE_DEBUG 0x0A
#define USB_DTYPE_INTERFASEASSOC 0x0B
#define USB_DTYPE_CS_INTERFACE 0x24
#define USB_DTYPE_CS_ENDPOINT 0x25
#define USB_STD_GET_STATUS 0x00
#define USB_STD_CLEAR_FEATURE 0x01
#define USB_STD_SET_FEATURE 0x03
#define USB_STD_SET_ADDRESS 0x05
#define USB_STD_GET_DESCRIPTOR 0x06
#define USB_STD_SET_DESCRIPTOR 0x07
#define USB_STD_GET_CONFIG 0x08
#define USB_STD_SET_CONFIG 0x09
#define USB_STD_GET_INTERFACE 0x0A
#define USB_STD_SET_INTERFACE 0x0B
#define USB_STD_SYNCH_FRAME 0x0C
#define USB_FEAT_ENDPOINT_HALT 0x00
#define USB_FEAT_REMOTE_WKUP 0x01
#define USB_FEAT_TEST_MODE 0x02
#define USB_FEAT_DEBUG_MODE 0x06
#define USB_TEST_J 0x01
#define USB_TEST_K 0x02
#define USB_TEST_SE0_NAK 0x03
#define USB_TEST_PACKET 0x04
#define USB_TEST_FORCE_ENABLE 0x05
#define USB_LANGID_AFR 0x0436
#define USB_LANGID_SQI 0x041c
#define USB_LANGID_ARA_SA 0x0401
#define USB_LANGID_ARA_IQ 0x0801
#define USB_LANGID_ARA_EG 0x0c01
#define USB_LANGID_ARA_LY 0x1001
#define USB_LANGID_ARA_DZ 0x1401
#define USB_LANGID_ARA_MA 0x1801
#define USB_LANGID_ARA_TN 0x1c01
#define USB_LANGID_ARA_OM 0x2001
#define USB_LANGID_ARA_YE 0x2401
#define USB_LANGID_ARA_SY 0x2801
#define USB_LANGID_ARA_JO 0x2c01
#define USB_LANGID_ARA_LB 0x3001
#define USB_LANGID_ARA_KW 0x3401
#define USB_LANGID_ARA_AE 0x3801
#define USB_LANGID_ARA_BH 0x3c01
#define USB_LANGID_ARA_QA 0x4001
#define USB_LANGID_HYE 0x042b
#define USB_LANGID_ASM 0x044d
#define USB_LANGID_AZE_LAT 0x042c
#define USB_LANGID_AZE_CYR 0x082c
#define USB_LANGID_EUS 0x042d
#define USB_LANGID_BEL 0x0423
#define USB_LANGID_BEN 0x0445
#define USB_LANGID_BUL 0x0402
#define USB_LANGID_MYA 0x0455
#define USB_LANGID_CAT 0x0403
#define USB_LANGID_ZHO_TW 0x0404
#define USB_LANGID_ZHO_CN 0x0804
#define USB_LANGID_ZHO_HK 0x0c04
#define USB_LANGID_ZHO_SG 0x1004
#define USB_LANGID_ZHO_MO 0x1404
#define USB_LANGID_HRV 0x041a
#define USB_LANGID_CZE 0x0405
#define USB_LANGID_DAN 0x0406
#define USB_LANGID_NLD_NL 0x0413
#define USB_LANGID_NLD_BE 0x0813
#define USB_LANGID_ENG_US 0x0409
#define USB_LANGID_ENG_UK 0x0809
#define USB_LANGID_ENG_AU 0x0c09
#define USB_LANGID_ENG_CA 0x1009
#define USB_LANGID_ENG_NZ 0x1409
#define USB_LANGID_ENG_IE 0x1809
#define USB_LANGID_ENG_ZA 0x1c09
#define USB_LANGID_ENG_JM 0x2009
#define USB_LANGID_ENG_CAR 0x2409
#define USB_LANGID_ENG_BZ 0x2809
#define USB_LANGID_ENG_TH 0x2c09
#define USB_LANGID_ENG_ZW 0x3009
#define USB_LANGID_ENG_PH 0x3409
#define USB_LANGID_EST 0x0425
#define USB_LANGID_FAO 0x0438
#define USB_LANGID_FAS 0x0429
#define USB_LANGID_FIN 0x040b
#define USB_LANGID_FRA 0x040c
#define USB_LANGID_FRA_BE 0x080c
#define USB_LANGID_FRA_CA 0x0c0c
#define USB_LANGID_FRA_SZ 0x100c
#define USB_LANGID_FRA_LU 0x140c
#define USB_LANGID_FRA_MC 0x180c
#define USB_LANGID_KAT 0x0437
#define USB_LANGID_DEU 0x0407
#define USB_LANGID_DEU_SZ 0x0807
#define USB_LANGID_DEU_AT 0x0c07
#define USB_LANGID_DEU_LU 0x1007
#define USB_LANGID_DEU_LI 0x1407
#define USB_LANGID_ELL 0x0408
#define USB_LANGID_GUJ 0x0447
#define USB_LANGID_HEB 0x040d
#define USB_LANGID_HIN 0x0439
#define USB_LANGID_HUN 0x040e
#define USB_LANGID_ISL 0x040f
#define USB_LANGID_IND 0x0421
#define USB_LANGID_ITA 0x0410
#define USB_LANGID_ITA_SZ 0x0810
#define USB_LANGID_JPN 0x0411
#define USB_LANGID_KAN 0x044b
#define USB_LANGID_KAS 0x0860
#define USB_LANGID_KAZ 0x043f
#define USB_LANGID_KOK 0x0457
#define USB_LANGID_KOR 0x0412
#define USB_LANGID_KOR_JOH 0x0812
#define USB_LANGID_LAV 0x0426
#define USB_LANGID_LIT 0x0427
#define USB_LANGID_LIT_CLS 0x0827
#define USB_LANGID_MKD 0x042f
#define USB_LANGID_MSA 0x043e
#define USB_LANGID_MSA_BN 0x083e
#define USB_LANGID_MAL 0x044c
#define USB_LANGID_MNI 0x0458
#define USB_LANGID_MAR 0x044e
#define USB_LANGID_NEP 0x0861
#define USB_LANGID_NOB 0x0414
#define USB_LANGID_NNO 0x0814
#define USB_LANGID_ORI 0x0448
#define USB_LANGID_POL 0x0415
#define USB_LANGID_POR_BR 0x0416
#define USB_LANGID_POR 0x0816
#define USB_LANGID_PAN 0x0446
#define USB_LANGID_RON 0x0418
#define USB_LANGID_RUS 0x0419
#define USB_LANGID_SAN 0x044f
#define USB_LANGID_SRB_CYR 0x0c1a
#define USB_LANGID_SRB_LAT 0x081a
#define USB_LANGID_SND 0x0459
#define USB_LANGID_SLK 0x041b
#define USB_LANGID_SLV 0x0424
#define USB_LANGID_SPA 0x040a
#define USB_LANGID_SPA_MX 0x080a
#define USB_LANGID_SPA_MDN 0x0c0a
#define USB_LANGID_SPA_GT 0x100a
#define USB_LANGID_SPA_CR 0x140a
#define USB_LANGID_SPA_PA 0x180a
#define USB_LANGID_SPA_DO 0x1c0a
#define USB_LANGID_SPA_VE 0x200a
#define USB_LANGID_SPA_CO 0x240a
#define USB_LANGID_SPA_PE 0x280a
#define USB_LANGID_SPA_AR 0x2c0a
#define USB_LANGID_SPA_EC 0x300a
#define USB_LANGID_SPA_CL 0x340a
#define USB_LANGID_SPA_UY 0x380a
#define USB_LANGID_SPA_PY 0x3c0a
#define USB_LANGID_SPA_BO 0x400a
#define USB_LANGID_SPA_SV 0x440a
#define USB_LANGID_SPA_HN 0x480a
#define USB_LANGID_SPA_NI 0x4c0a
#define USB_LANGID_SPA_PR 0x500a
#define USB_LANGID_NSO 0x0430
#define USB_LANGID_SWA 0x0441
#define USB_LANGID_SWE 0x041d
#define USB_LANGID_SWE_FI 0x081d
#define USB_LANGID_TAM 0x0449
#define USB_LANGID_TAT 0x0444
#define USB_LANGID_TEL 0x044a
#define USB_LANGID_THA 0x041e
#define USB_LANGID_TUR 0x041f
#define USB_LANGIG_UKR 0x0422
#define USB_LANGID_URD_PK 0x0420
#define USB_LANGID_URD_IN 0x0820
#define USB_LANGID_UZB_LAT 0x0443
#define USB_LANGID_UZB_CYR 0x0843
#define USB_LANGID_VIE 0x042a
struct usb_header_descriptor {
    uint8_t bLength;
    uint8_t bDescriptorType;
} ;
struct usb_device_descriptor {
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint16_t bcdUSB;
    uint8_t bDeviceClass;
    uint8_t bDeviceSubClass;
    uint8_t bDeviceProtocol;
    uint8_t bMaxPacketSize0;
    uint16_t idVendor;
    uint16_t idProduct;
    uint16_t bcdDevice;
    uint8_t iManufacturer;
    uint8_t iProduct;
    uint8_t iSerialNumber;
    uint8_t bNumConfigurations;
} ;
struct usb_qualifier_descriptor {
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint16_t bcdUSB;
    uint8_t bDeviceClass;
    uint8_t bDeviceSubClass;
    uint8_t bDeviceProtocol;
    uint8_t bMaxPacketSize0;
    uint8_t bNumConfigurations;
    uint8_t bReserved;
} ;
struct usb_config_descriptor {
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint16_t wTotalLength;
    uint8_t bNumInterfaces;
    uint8_t bConfigurationValue;
    uint8_t iConfiguration;
    uint8_t bmAttributes;
    uint8_t bMaxPower;
} ;
struct usb_interface_descriptor {
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bInterfaceNumber;
    uint8_t bAlternateSetting;
    uint8_t bNumEndpoints;
    uint8_t bInterfaceClass;
    uint8_t bInterfaceSubClass;
    uint8_t bInterfaceProtocol;
    uint8_t iInterface;
} ;
struct usb_iad_descriptor {
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bFirstInterface;
    uint8_t bInterfaceCount;
    uint8_t bFunctionClass;
    uint8_t bFunctionSubClass;
    uint8_t bFunctionProtocol;
    uint8_t iFunction;
} ;
struct usb_endpoint_descriptor {
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bEndpointAddress;
    uint8_t bmAttributes;
    uint16_t wMaxPacketSize;
    uint8_t bInterval;
} ;
struct usb_string_descriptor {
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint16_t wString[];
} ;
struct usb_debug_descriptor {
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bDebugInEndpoint;
    uint8_t bDebugOutEndpoint;
} ;
#define USBD_STM32WB55 
    extern const struct usbd_driver usbd_devfs;
#define usbd_hw usbd_devfs
#define _USB_CDC_H_ 
#define USB_CLASS_CDC 0x02
#define USB_CLASS_CDC_DATA 0x0A
#define USB_CDC_SUBCLASS_ACM 0x02
#define USB_CDC_PROTO_NONE 0x00
#define USB_CDC_PROTO_V25TER 0x01
#define USB_CDC_PROTO_NTB 0x01
#define USB_CDC_PROTO_HOST 0xFD
#define USB_CDC_PROTO_CDCSPEC 0xFE
#define USB_DTYPE_CDC_HEADER 0x00
#define USB_DTYPE_CDC_CALL_MANAGEMENT 0x01
#define USB_DTYPE_CDC_ACM 0x02
#define USB_DTYPE_CDC_UNION 0x06
#define USB_DTYPE_CDC_COUNTRY 0x07
#define USB_CDC_SEND_ENCAPSULATED_CMD 0x00
#define USB_CDC_GET_ENCAPSULATED_RESP 0x01
#define USB_CDC_SET_COMM_FEATURE 0x02
#define USB_CDC_GET_COMM_FEATURE 0x03
#define USB_CDC_CLEAR_COMM_FEATURE 0x04
#define USB_CDC_SET_LINE_CODING 0x20
#define USB_CDC_GET_LINE_CODING 0x21
#define USB_CDC_SET_CONTROL_LINE_STATE 0x22
#define USB_CDC_SEND_BREAK 0x23
#define USB_CDC_NTF_NETWORK_CONNECTION 0x00
#define USB_CDC_NTF_RESPONSE_AVAILABLE 0x01
#define USB_CDC_NTF_SERIAL_STATE 0x20
#define USB_CDC_NTF_SPEED_CHANGE 0x2A
#define USB_CDC_COMM_FEATURE 0x01
#define USB_CDC_CAP_LINE 0x02
#define USB_CDC_CAP_BRK 0x04
#define USB_CDC_CAP_NOTIFY 0x08
#define USB_CDC_CALL_MGMT_CAP_CALL_MGMT 0x01
#define USB_CDC_CALL_MGMT_CAP_DATA_INTF 0x02
#define USB_CDC_1_STOP_BITS 0x00
#define USB_CDC_1_5_STOP_BITS 0x01
#define USB_CDC_2_STOP_BITS 0x02
#define USB_CDC_NO_PARITY 0x00
#define USB_CDC_ODD_PARITY 0x01
#define USB_CDC_EVEN_PARITY 0x02
#define USB_CDC_MARK_PARITY 0x03
#define USB_CDC_SPACE_PARITY 0x04
#define USB_CDC_STATE_RX_CARRIER 0x0001
#define USB_CDC_STATE_TX_CARRIER 0x0002
#define USB_CDC_STATE_BREAK 0x0004
#define USB_CDC_STATE_RING 0x0008
#define USB_CDC_STATE_FRAMING 0x0010
#define USB_CDC_STATE_PARITY 0x0020
#define USB_CDC_STATE_OVERRUN 0x0040
struct usb_cdc_header_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint16_t bcdCDC;
} ;
struct usb_cdc_union_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bMasterInterface0;
    uint8_t bSlaveInterface0;
} ;
struct usb_cdc_country_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t iCountryCodeRelDate;
    uint8_t wCountyCode0;
} ;
struct usb_cdc_call_mgmt_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bmCapabilities;
    uint8_t bDataInterface;
} ;
struct usb_cdc_acm_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bmCapabilities;
} ;
struct usb_cdc_notification {
    uint8_t bmRequestType;
    uint8_t bNotificationType;
    uint16_t wValue;
    uint16_t wIndex;
    uint16_t wLength;
    uint8_t Data[];
} ;
struct usb_cdc_line_coding {
    uint32_t dwDTERate;
    uint8_t bCharFormat;
    uint8_t bParityType;
    uint8_t bDataBits;
} ;
#define _USB_CDC_ATM_H_ 
#define USB_CDC_SUBCLASS_ATM 0x07
#define USB_DTYPE_CDC_ATM 0x10
#define USB_CDC_SET_ATM_DATA_FORMAT 0x50
#define USB_CDC_GET_ATM_DEVICE_STATISTICS 0x51
#define USB_CDC_SET_ATM_DEFAULT_VC 0x52
#define USB_CDC_GET_ATM_VC_STATISTICS 0x53
#define ATM_STAT_US_CELLS_SENT 0x01
#define ATM_STAT_DS_CELLS_RECEIVED 0x02
#define ATM_STAT_DS_CELLS_USB_CONGESTION 0x03
#define ATM_STAT_DS_CELLS_AAL5_CRC_ERROR 0x04
#define ATM_STAT_DS_CELLS_HEC_ERROR 0x05
#define ATM_STAT_DS_CELLS_HEC_ERROR_CORRT 0x06
struct usb_cdc_atm_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t iEndSystemIdentifier;
    uint8_t bmDataCapabilities;
    uint8_t bmATMDeviceStatistics;
    uint16_t wType2MaxSegmentSize;
    uint16_t wType3MaxSegmentSize;
    uint16_t wMaxVC;
} ;
#define _USB_CDC_ECM_H_ 
#define USB_CDC_SUBCLASS_ETH 0x06
#define USB_DTYPE_CDC_ETHERNET 0x0F
#define USB_CDC_SET_ETH_MULTICAST_FILTERS 0x40
#define USB_CDC_SET_ETH_PM_PATTERN_FILTER 0x41
#define USB_CDC_GET_ETH_PM_PATTERN_FILTER 0x42
#define USB_CDC_SET_ETH_PACKET_FILTER 0x43
#define USB_CDC_GET_ETH_STATISTIC 0x44
#define USB_ETH_XMIT_OK (1<<0)
#define USB_ETH_RCV_OK (1<<1)
#define USB_ETH_XMIT_ERROR (1<<2)
#define USB_ETH_RCV_ERROR (1<<3)
#define USB_ETH_RCV_NO_BUFFER (1<<4)
#define USB_ETH_DIRECTED_BYTES_XMIT (1<<5)
#define USB_ETH_DIRECTED_FRAMES_XMIT (1<<6)
#define USB_ETH_MULTICAST_BYTES_XMIT (1<<7)
#define USB_ETH_MULTICAST_FRAMES_XMIT (1<<8)
#define USB_ETH_BROADCAST_BYTES_XMIT (1<<9)
#define USB_ETH_BROADCAST_FRAMES_XMIT (1<<10)
#define USB_ETH_DIRECTED_BYTES_RCV (1<<11)
#define USB_ETH_DIRECTED_FRAMES_RCV (1<<12)
#define USB_ETH_MULTICAST_BYTES_RCV (1<<13)
#define USB_ETH_MULTICAST_FRAMES_RCV (1<<14)
#define USB_ETH_BROADCAST_BYTES_RCV (1<<15)
#define USB_ETH_BROADCAST_FRAMES_RCV (1<<16)
#define USB_ETH_RCV_CRC_ERROR (1<<17)
#define USB_ETH_TRANSMIT_QUEUE_LENGTH (1<<18)
#define USB_ETH_RCV_ERROR_ALIGNMENT (1<<19)
#define USB_ETH_XMIT_ONE_COLLISION (1<<20)
#define USB_ETH_XMIT_MORE_COLLISIONS (1<<21)
#define USB_ETH_XMIT_DEFERRED (1<<22)
#define USB_ETH_XMIT_MAX_COLLISIONS (1<<23)
#define USB_ETH_RCV_OVERRUN (1<<24)
#define USB_ETH_XMIT_UNDERRUN (1<<25)
#define USB_ETH_XMIT_HEARTBEAT_FAILURE (1<<26)
#define USB_ETH_XMIT_TIMES_CRS_LOST (1<<27)
#define USB_ETH_XMIT_LATE_COLLISIONS (1<<28)
struct usb_cdc_ether_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t iMACAddress;
    uint32_t bmEthernetStatistics;
    uint16_t wMaxSegmentSize;
    uint16_t wNumberMCFilters;
    uint8_t bNumberPowerFilters;
} ;
#define _USB_CDC_ISDN_H_ 
#define USB_CDC_SUBCLASS_MCNL 0x04
#define USB_CDC_SUBCLASS_CAPI 0x05
#define USB_CDC_PROTO_I340 0x30
#define USB_CDC_PROTO_HDLC 0x31
#define USB_CDC_PROTO_TRANSPARENT 0x32
#define USB_CDC_PROTO_Q921M 0x50
#define USB_CDC_PROTO_Q921 0x51
#define USB_CDC_PROTO_Q921TM 0x52
#define USB_CDC_PROTO_V42BIS 0x90
#define USB_CDC_PROTO_Q931 0x91
#define USB_CDC_PROTO_V120 0x92
#define USB_CDC_PROTO_CAPI20 0x93
#define USB_DTYPE_CDC_TERMINAL 0x09
#define USB_DTYPE_CDC_NETWORK_TERMINAL 0x0A
#define USB_DTYPE_CDC_PROTOCOL_UNIT 0x0B
#define USB_DTYPE_CDC_EXTENSION_UNIT 0x0C
#define USB_DTYPE_CDC_MCNL_MANAGEMENT 0x0D
#define USB_DTYPE_CDC_CAPI_CONTROL 0x0E
#define USB_CDC_SET_UNIT_PARAMETER 0x37
#define USB_CDC_GET_UNIT_PARAMETER 0x38
#define USB_CDC_CLEAR_UNIT_PARAMETER 0x39
#define USB_CDC_GET_PROFILE 0x3A
#define USB_CDC_MCHN_UNIT_NVRAM 0x01
#define USB_CDC_MCHN_UNIT_CLR 0x02
#define USB_CDC_MCHN_UNIR_SET 0x04
#define USB_CDC_CAPI_SIMPLE 0x00
#define USB_CDC_CAPI_INTELLIGENT 0x01
struct usb_cdc_terminal_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bEntityId;
    uint8_t bInInterfaceNo;
    uint8_t bOutInterfaceNo;
    uint8_t bmOptions;
    uint8_t bChildId0;
} ;
struct usb_cdc_network_terminal_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bEntityId;
    uint8_t iName;
    uint8_t bChannelIndex;
    uint8_t bPhysicalInterface;
} ;
struct usb_cdc_proto_unit_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bEntityId;
    uint8_t bProtocol;
} ;
struct usb_cdc_ext_unit_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bEntityId;
    uint8_t bExtensionCode;
    uint8_t iName;
    uint8_t bChildId0;
} ;
struct usb_cdc_mcnl_managemnt_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bmCapabilities;
} ;
struct usb_cdc_capi_ctl_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bmCapabilities;
} ;
#define _USB_CDC_PSTN_H_ 
#define USB_CDC_SUBCLASS_DLC 0x01
#define USB_CDC_SUBCLASS_TEL 0x03
#define USB_DTYPE_CDC_LINE_MANAGEMENT 0x03
#define USB_DTYPE_CDC_TEL_RING 0x04
#define USB_DTYPE_CDC_TEL_CALL 0x05
#define USB_DTYPE_CDC_TEL_OPMODE 0x08
#define USB_CDC_SET_AUX_LINE_STATE 0x10
#define USB_CDC_SET_HOOK_STATE 0x11
#define USB_CDC_PULSE_SETU 0x12
#define USB_CDC_SEND_PULSE 0x13
#define USB_CDC_SET_PULSE_TIME 0x14
#define USB_CDC_RING_AUX_JACK 0x15
#define USB_CDC_SET_RINGER_PARMS 0x30
#define USB_CDC_GET_RINGER_PARMS 0x31
#define USB_CDC_SET_OPERATION_PARMS 0x32
#define USB_CDC_GET_OPERATION_PARMS 0x33
#define USB_CDC_SET_LINE_PARMS 0x34
#define USB_CDC_GET_LINE_PARMS 0x35
#define USB_CDC_DIAL_DIGITS 0x36
#define USB_CDC_NTF_AUX_JACK_HOOK_STATE 0x08
#define USB_CDC_NTF_RING_DETECT 0x09
#define USB_CDC_NTF_CALL_STATE_CHANGE 0x28
#define USB_CDC_NTF_LINE_STATE_CHANGE 0x29
#define USB_CDC_DLM_PULSE 0x01
#define USB_CDC_DLM_AUX 0x02
#define USB_CDC_DLM_XTRAPULSE 0x04
#define USB_CDC_TOM_SIMPLE 0x01
#define USB_CDC_TOM_STANDALONE 0x02
#define USB_CDC_TOM_CENTRIC 0x04
#define USB_CDC_TCS_DIALTONE 0x01
#define USB_CDC_TCS_STATE 0x02
#define USB_CDC_TCS_CALLERID 0x04
#define USB_CDC_TCS_RINGING 0x08
#define USB_CDC_TCS_DTMF 0x10
#define USB_CDC_TCS_NOTIFY 0x20
struct usb_cdc_dlm_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bmCapabilities;
} ;
struct usb_cdc_tring_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bRingerVolSteps;
    uint8_t bNumRingerPatterns;
} ;
struct usb_cdc_tom_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bmCapabilities;
} ;
struct usb_cdc_tcs_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint32_t bmCapabilities;
} ;
#define _USB_CDC_WCM_H_ 
#define USB_CDC_SUBCLASS_WHCM 0x08
#define USB_CDC_SUBCLASS_DMM 0x09
#define USB_CDC_SUBCLASS_MDLM 0x0A
#define USB_CDC_SUBCLASS_OBEX 0x0B
#define USB_CDC_PROTO_PCCA101 0x02
#define USB_CDC_PROTO_PCCA101O 0x03
#define USB_CDC_PROTO_GSM 0x04
#define USB_CDC_PROTO_3G 0x05
#define USB_CDC_PROTO_CDMA 0x06
#define USB_DTYPE_CDC_WHCM 0x11
#define USB_DTYPE_CDC_MDLM 0x12
#define USB_DTYPE_CDC_MDLM_DETAIL 0x13
#define USB_DTYPE_CDC_DMM 0x14
#define USB_DTYPE_CDC_OBEX 0x15
#define USB_DTYPE_CDC_CMDSET 0x16
#define USB_DTYPE_CDC_CMDSET_DETAIL 0x17
#define USB_DTYPE_CDC_TEL_CONRTOL 0x18
#define USB_DTYPE_CDC_OBEX_SERVICE 0x19
struct usb_cdc_whcm_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint16_t bcdVersion;
} ;
struct usb_cdc_mdlm_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint16_t bcdVersion;
    uint8_t bGUID[16];
} ;
struct usb_cdc_mdlm_detail_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bGuidDescriptorType;
    uint8_t bDetailData[0];
} ;
struct usb_cdc_dmm_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint16_t bcdVersion;
    uint16_t wMaxCommand;
} ;
struct usb_cdc_obex_serv_desc {
    uint8_t bFunctionLength;
    uint8_t bDescriptorType;
    uint8_t bDescriptorSubType;
    uint8_t bmOBEXRole;
    uint8_t bOBEXServiceUUID[16];
    uint16_t wOBEXServiceVersion;
} ;
#define _USB_DFU_H_ 
#define USB_CLASS_DFU 0xFE
#define USB_DFU_SUBCLASS_DFU 0x01
#define USB_DFU_PROTO_RUNTIME 0x01
#define USB_DFU_PROTO_DFU 0x02
#define USB_DTYPE_DFU_FUNCTIONAL 0x21
#define USB_DFU_DETACH 0x00
#define USB_DFU_DNLOAD 0x01
#define USB_DFU_UPLOAD 0x02
#define USB_DFU_GETSTATUS 0x03
#define USB_DFU_CLRSTATUS 0x04
#define USB_DFU_GETSTATE 0x05
#define USB_DFU_ABORT 0x06
#define USB_DFU_ATTR_WILL_DETACH 0x08
#define USB_DFU_ATTR_MANIF_TOL 0x04
#define USB_DFU_ATTR_CAN_UPLOAD 0x02
#define USB_DFU_ATTR_CAN_DNLOAD 0x01
#define USB_DFU_STATUS_OK 0x00
#define USB_DFU_STATUS_ERR_TARGET 0x01
#define USB_DFU_STATUS_ERR_FILE 0x02
#define USB_DFU_STATUS_ERR_WRITE 0x03
#define USB_DFU_STATUS_ERR_ERASE 0x04
#define USB_DFU_STATUS_ERR_CHECK_ERASED 0x05
#define USB_DFU_STATUS_ERR_PROG 0x06
#define USB_DFU_STATUS_ERR_VERIFY 0x07
#define USB_DFU_STATUS_ERR_ADDRESS 0x08
#define USB_DFU_STATUS_ERR_NOTDONE 0x09
#define USB_DFU_STATUS_ERR_FIRMWARE 0x0A
#define USB_DFU_STATUS_ERR_VENDOR 0x0B
#define USB_DFU_STATUS_ERR_USBR 0x0C
#define USB_DFU_STATUS_ERR_POR 0x0D
#define USB_DFU_STATUS_ERR_UNKNOWN 0x0E
#define USB_DFU_STATUS_ERR_STALLEDPKT 0x0F
#define USB_DFU_STATE_APP_IDLE 0x00
#define USB_DFU_STATE_APP_DETACH 0x01
#define USB_DFU_STATE_DFU_IDLE 0x02
#define USB_DFU_STATE_DFU_DNLOADSYNC 0x03
#define USB_DFU_STATE_DFU_DNBUSY 0x04
#define USB_DFU_STATE_DFU_DNLOADIDLE 0x05
#define USB_DFU_STATE_DFU_MANIFESTSYNC 0x06
#define USB_DFU_STATE_DFU_MANIFEST 0x07
#define USB_DFU_STATE_DFU_MANIFESTWR 0x08
#define USB_DFU_STATE_DFU_UPLOADIDLE 0x09
#define USB_DFU_STATE_DFU_ERROR 0x0A
struct usb_dfu_func_desc {
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint8_t bmAttributes;
    uint16_t wDetachTimeout;
    uint16_t wTransferSize;
    uint16_t bcdDFUVersion;
};
struct usb_dfu_status {
    uint8_t bStatus;
    uint8_t bPollTimeout;
    uint16_t wPollTimeout;
    uint8_t bState;
    uint8_t iString;
};
#define _USB_HID_H_ 
#define USB_CLASS_HID 0x03
#define USB_HID_SUBCLASS_NONBOOT 0x00
#define USB_HID_SUBCLASS_BOOT 0x01
#define USB_HID_PROTO_NONBOOT 0x00
#define USB_HID_PROTO_KEYBOARD 0x01
#define USB_HID_PROTO_MOUSE 0x02
#define USB_HID_REPORT_IN 0x01
#define USB_HID_REPORT_OUT 0x02
#define USB_HID_REPORT_FEATURE 0x03
#define USB_HID_GETREPORT 0x01
#define USB_HID_GETIDLE 0x02
#define USB_HID_GETPROTOCOL 0x03
#define USB_HID_SETREPORT 0x09
#define USB_HID_SETIDLE 0x0A
#define USB_HID_SETPROTOCOL 0x0B
#define USB_DTYPE_HID 0x21
#define USB_DTYPE_HID_REPORT 0x22
#define USB_HID_COUNTRY_NONE 0
#define USB_HID_COUNTRY_AR 1
#define USB_HID_COUNTRY_BE 2
#define USB_HID_COUNTRY_CA_BI 3
#define USB_HID_COUNTRY_CA_FR 4
#define USB_HID_COUNTRY_CZ 5
#define USB_HID_COUNTRY_DK 6
#define USB_HID_COUNTRY_FI 7
#define USB_HID_COUNTRY_FR 8
#define USB_HID_COUNTRY_DE 9
#define USB_HID_COUNTRY_GR 10
#define USB_HID_COUNTRY_HEB 11
#define USB_HID_COUNTRY_HU 12
#define USB_HID_COUNTRY_ISO 13
#define USB_HID_COUNTRY_IT 14
#define USB_HID_COUNTRY_JP 15
#define USB_HID_COUNTRY_KR 16
#define USB_HID_COUNTRY_LAT 17
#define USB_HID_COUNTRY_NL 18
#define USB_HID_COUNTRY_NO 19
#define USB_HID_COUNTRY_PER 20
#define USB_HID_COUNTRY_PL 21
#define USB_HID_COUNTRY_PO 22
#define USB_HID_COUNTRY_RU 23
#define USB_HID_COUNTRY_SK 24
#define USB_HID_COUNTRY_ES 25
#define USB_HID_COUNTRY_SE 26
#define USB_HID_COUNTRY_CH_FR 26
#define USB_HID_COUNTRY_CH_DE 27
#define USB_HID_COUNTRY_CH 29
#define USB_HID_COUNTRY_TW 30
#define USB_HID_COUNTRY_TR_Q 31
#define USB_HID_COUNTRY_UK 32
#define USB_HID_COUNTRY_US 33
#define USB_HID_COUNTRY_YU 34
#define USB_HID_COUNTRY_TR_F 35
#define HID_PHYSICAL_COLLECTION 0x00
#define HID_APPLICATION_COLLECTION 0x01
#define HID_LOGICAL_COLLECTION 0x02
#define HID_REPORT_COLLECTION 0x03
#define HID_NARY_COLLECTION 0x04
#define HID_USAGE_SWITCH_COLLECTION 0x05
#define HID_USAGE_MODIFIER_COLLECTION 0x06
struct usb_hid_descriptor {
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint16_t bcdHID;
    uint8_t bCountryCode;
    uint8_t bNumDescriptors;
    uint8_t bDescriptorType0;
    uint16_t wDescriptorLength0;
} ;
struct usb_hid_descriptor_header {
    uint8_t bLength;
    uint8_t bDescriptorType;
    uint16_t bcdHID;
    uint8_t bCountryCode;
    uint8_t bNumDescriptors;
} ;
struct usb_hid_report_descriptor {
    uint8_t bDescriptorType;
    uint16_t wDescriptorLength;
} ;
#define DECLARE_USB_HID_DESCRIPTOR(p) struct usb_hid_descriptor_ ##p { uint8_t bLength; uint8_t bDescriptorType; uint16_t bcdHID; uint8_t bCountryCode; uint8_t bNumDescriptors; struct usb_hid_report_descriptor report[p]; } __attribute__((packed));
#define CONCAT(x,y) x ## y
#define CONCAT_EXPANDED(x,y) CONCAT(x, y)
#define HID_RI_DATA_SIZE_MASK 0x03
#define HID_RI_TYPE_MASK 0x0C
#define HID_RI_TAG_MASK 0xF0
#define HID_RI_TYPE_MAIN 0x00
#define HID_RI_TYPE_GLOBAL 0x04
#define HID_RI_TYPE_LOCAL 0x08
#define HID_RI_DATA_BITS_0 0x00
#define HID_RI_DATA_BITS_8 0x01
#define HID_RI_DATA_BITS_16 0x02
#define HID_RI_DATA_BITS_32 0x03
#define HID_RI_DATA_BITS(DataBits) CONCAT_EXPANDED(HID_RI_DATA_BITS_, DataBits)
#define _HID_RI_ENCODE_0(Data) 
#define _HID_RI_ENCODE_8(Data) , (Data & 0xFF)
#define _HID_RI_ENCODE_16(Data) _HID_RI_ENCODE_8(Data) _HID_RI_ENCODE_8(Data >> 8)
#define _HID_RI_ENCODE_32(Data) _HID_RI_ENCODE_16(Data) _HID_RI_ENCODE_16(Data >> 16)
#define _HID_RI_ENCODE(DataBits,...) CONCAT_EXPANDED(_HID_RI_ENCODE_, DataBits(__VA_ARGS__))
#define _HID_RI_ENTRY(Type,Tag,DataBits,...) (Type | Tag | HID_RI_DATA_BITS(DataBits)) _HID_RI_ENCODE(DataBits, (__VA_ARGS__))
#define HID_IOF_CONSTANT (1 << 0)
#define HID_IOF_DATA (0 << 0)
#define HID_IOF_VARIABLE (1 << 1)
#define HID_IOF_ARRAY (0 << 1)
#define HID_IOF_RELATIVE (1 << 2)
#define HID_IOF_ABSOLUTE (0 << 2)
#define HID_IOF_WRAP (1 << 3)
#define HID_IOF_NO_WRAP (0 << 3)
#define HID_IOF_NON_LINEAR (1 << 4)
#define HID_IOF_LINEAR (0 << 4)
#define HID_IOF_NO_PREFERRED_STATE (1 << 5)
#define HID_IOF_PREFERRED_STATE (0 << 5)
#define HID_IOF_NULLSTATE (1 << 6)
#define HID_IOF_NO_NULL_POSITION (0 << 6)
#define HID_IOF_VOLATILE (1 << 7)
#define HID_IOF_NON_VOLATILE (0 << 7)
#define HID_IOF_BUFFERED_BYTES (1 << 8)
#define HID_IOF_BITFIELD (0 << 8)
#define HID_RI_INPUT(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_MAIN , 0x80, DataBits, __VA_ARGS__)
#define HID_RI_OUTPUT(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_MAIN , 0x90, DataBits, __VA_ARGS__)
#define HID_RI_COLLECTION(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_MAIN , 0xA0, DataBits, __VA_ARGS__)
#define HID_RI_FEATURE(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_MAIN , 0xB0, DataBits, __VA_ARGS__)
#define HID_RI_END_COLLECTION(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_MAIN , 0xC0, DataBits, __VA_ARGS__)
#define HID_RI_USAGE_PAGE(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_GLOBAL, 0x00, DataBits, __VA_ARGS__)
#define HID_RI_LOGICAL_MINIMUM(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_GLOBAL, 0x10, DataBits, __VA_ARGS__)
#define HID_RI_LOGICAL_MAXIMUM(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_GLOBAL, 0x20, DataBits, __VA_ARGS__)
#define HID_RI_PHYSICAL_MINIMUM(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_GLOBAL, 0x30, DataBits, __VA_ARGS__)
#define HID_RI_PHYSICAL_MAXIMUM(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_GLOBAL, 0x40, DataBits, __VA_ARGS__)
#define HID_RI_UNIT_EXPONENT(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_GLOBAL, 0x50, DataBits, __VA_ARGS__)
#define HID_RI_UNIT(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_GLOBAL, 0x60, DataBits, __VA_ARGS__)
#define HID_RI_REPORT_SIZE(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_GLOBAL, 0x70, DataBits, __VA_ARGS__)
#define HID_RI_REPORT_ID(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_GLOBAL, 0x80, DataBits, __VA_ARGS__)
#define HID_RI_REPORT_COUNT(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_GLOBAL, 0x90, DataBits, __VA_ARGS__)
#define HID_RI_PUSH(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_GLOBAL, 0xA0, DataBits, __VA_ARGS__)
#define HID_RI_POP(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_GLOBAL, 0xB0, DataBits, __VA_ARGS__)
#define HID_RI_USAGE(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_LOCAL , 0x00, DataBits, __VA_ARGS__)
#define HID_RI_USAGE_MINIMUM(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_LOCAL , 0x10, DataBits, __VA_ARGS__)
#define HID_RI_USAGE_MAXIMUM(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_LOCAL , 0x20, DataBits, __VA_ARGS__)
#define HID_RI_DESIGNATOR_INDEX(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_LOCAL , 0x30, DataBits, __VA_ARGS__)
#define HID_RI_DESIGNATOR_MIN(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_LOCAL , 0x40, DataBits, __VA_ARGS__)
#define HID_RI_DESIGNATOR_MAX(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_LOCAL , 0x50, DataBits, __VA_ARGS__)
#define HID_RI_STRING_INDEX(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_LOCAL , 0x70, DataBits, __VA_ARGS__)
#define HID_RI_STRING_MINIMUM(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_LOCAL , 0x80, DataBits, __VA_ARGS__)
#define HID_RI_STRING_MAXIMUM(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_LOCAL , 0x90, DataBits, __VA_ARGS__)
#define HID_RI_DELIMITER(DataBits,...) _HID_RI_ENTRY(HID_RI_TYPE_LOCAL , 0xA0, DataBits, __VA_ARGS__)
#define HID_INPUT(data) HID_RI_INPUT(8, data)
#define HID_OUTPUT(data) HID_RI_OUTPUT(8, data)
#define HID_COLLECTION(data) HID_RI_COLLECTION(8, data)
#define HID_FEATURE(data) HID_RI_FEATURE(8, data)
#define HID_END_COLLECTION HID_RI_END_COLLECTION(0)
#define HID_USAGE_PAGE(data) HID_RI_USAGE_PAGE(8, data)
#define HID_LOGICAL_MINIMUM(data) HID_RI_LOGICAL_MINIMUM(8, data)
#define HID_LOGICAL_MAXIMUM(data) HID_RI_LOGICAL_MAXIMUM(8, data)
#define HID_PHYSICAL_MINIMUM(data) HID_RI_PHYSICAL_MINIMUM(16, data)
#define HID_PHYSICAL_MAXIMUM(data) HID_RI_PHYSICAL_MAXIMUM(16, data)
#define HID_UNIT_EXPONENT(data) HID_RI_UNIT_EXPONENT(8, data)
#define HID_UNIT(bits,data) HID_RI_UNIT(bits, data)
#define HID_REPORT_SIZE(data) HID_RI_REPORT_SIZE(8, data)
#define HID_REPORT_ID(data) HID_RI_REPORT_ID(8, data)
#define HID_REPORT_COUNT(data) HID_RI_REPORT_COUNT(8, data)
#define HID_PUSH HID_RI_PUSH(0)
#define HID_POP HID_RI_POP(0)
#define HID_USAGE(data) HID_RI_USAGE(8, data)
#define HID_USAGE_MINIMUM(data) HID_RI_USAGE_MINIMUM(8, data)
#define HID_USAGE_MAXIMUM(data) HID_RI_USAGE_MAXIMUM(8, data)
#define HID_UNIT_NONE 0x00
#define HID_UNIT_CGS_LINEAR 0x01
#define HID_UNIT_CGS_ROTATION 0x02
#define HID_UNIT_IMPERIAL_LINEAR 0x03
#define HID_UNIT_IMPERIAL_ROTATION 0x04
#define HID_UNIT_LENGTH(exp) ((exp & 0x0F) << 4)
#define HID_UNIT_ANGLE(exp) ((exp & 0x0F) << 4)
#define HID_UNIT_MASS(exp) ((exp & 0x0F) << 8)
#define HID_UNIT_TIME(exp) ((exp & 0x0F) << 12)
#define HID_UNIT_TEMPERATURE(exp) ((exp & 0x0F) << 16)
#define HID_UNIT_CURRENT(exp) ((exp & 0x0F) << 20)
#define HID_UNIT_LUMINOUS(exp) ((exp & 0x0F) << 24)
#define HID_UNIT_METER(exp) HID_UNIT(8, HID_UNIT_CGS_LINEAR | HID_UNIT_LENGTH(1)), HID_UNIT_EXPONENT(exp + 2)
#define HID_UNIT_KG(exp) HID_UNIT(16, HID_UNIT_CGS_LINEAR | HID_UNIT_MASS(1), HID_UNIT_EXPONENT(exp + 3)
#define HID_UNIT_SECOND(exp) HID_UNIT(16, HID_UNIT_CGS_LINEAR | HID_UNIT_TIME(1), HID_UNIT_EXPONENT(exp + 0)
#define HID_UNIT_MPS(exp) HID_UNIT(16, HID_UNIT_CGS_LINEAR | HID_UNIT_LENGTH(1) | HID_UNIT_TIME(-1)), HID_UNIT_EXPONENT(exp + 2)
#define HID_UNIT_MPS2(exp) HID_UNIT(16, HID_UNIT_CGS_LINEAR | HID_UNIT_LENGTH(1) | HID_UNIT_TIME(-2)), HID_UNIT_EXPONENT(exp + 2)
#define HID_UNIT_NEWTON(exp) HID_UNIT(16, HID_UNIT_CGS_LINEAR | HID_UNIT_MASS(1) | HID_UNIT_LENGTH(1) | HID_UNIT_TIME(-2)), HID_UNIT_EXPONENT(exp + 5)
#define HID_UNIT_JOULE(exp) HID_UNIT(16, HID_UNIT_CGS_LINEAR | HID_UNIT_MASS(1) | HID_UNIT_LENGTH(2) | HID_UNIT_TIME(-2)), HID_UNIT_EXPONENT(exp + 7)
#define HID_UNIT_WATT(exp) HID_UNIT(16, HID_UNIT_CGS_LINEAR | HID_UNIT_MASS(1) | HID_UNIT_LENGTH(2) | HID_UNIT_TIME(-3)), HID_UNIT_EXPONENT(exp + 7)
#define HID_UNIT_PASCAL(exp) HID_UNIT(16, HID_UNIT_CGS_LINEAR | HID_UNIT_MASS(1) | HID_UNIT_LENGTH(-1) | HID_UNIT_TIME(-2)), HID_UNIT_EXPONENT(exp + 1)
#define HID_UNIT_HERTZ(exp) HID_UNIT(16, HID_UNIT_CGS_LINEAR | HID_UNIT_TIME(-1)), HID_UNIT_EXPONENT(exp + 0)
#define HID_UNIT_AMPERE(exp) HID_UNIT(32, HID_UNIT_CGS_LINEAR | HID_UNIT_CURRENT(1)), HID_UNIT_EXPONENT(exp)
#define HID_UNIT_VOLT(exp) HID_UNIT(32, HID_UNIT_CGS_LINEAR | HID_UNIT_MASS(1) | HID_UNIT_LENGTH(2) | HID_UNIT_TIME(-3) | HID_UNIT_CURRENT(-1)), HID_UNIT_EXPONENT(exp + 7)
#define HID_UNIT_OHM(exp) HID_UNIT(32, HID_UNIT_CGS_LINEAR | HID_UNIT_MASS(1) | HID_UNIT_LENGTH(2) | HID_UNIT_TIME(-3) | HID_UNIT_CURRENT(-2)), HID_UNIT_EXPONENT(exp + 7)
#define HID_UNIT_HENRY(exp) HID_UNIT(32, HID_UNIT_CGS_LINEAR | HID_UNIT_MASS(1) | HID_UNIT_LENGTH(2) | HID_UNIT_TIME(-2) | HID_UNIT_CURRENT(-2)), HID_UNIT_EXPONENT(exp + 7)
#define HID_UNIT_FARAD(exp) HID_UNIT(32, HID_UNIT_CGS_LINEAR | HID_UNIT_MASS(-1) | HID_UNIT_LENGTH(-2) | HID_UNIT_TIME(4) | HID_UNIT_CURRENT(2)), HID_UNIT_EXPONENT(exp - 7)
#define HID_UNIT_COULOMB(exp) HID_UNIT(32, HID_UNIT_CGS_LINEAR | HID_UNIT_TIME(1) | HID_UNIT_CURRENT(1)), HID_UNIT_EXPONENT(exp)
#define HID_UNIT_TESLA(exp) HID_UNIT(32, HID_UNIT_CGS_LINEAR | HID_UNIT_MASS(1) | HID_UNIT_TIME(-2) | HID_UNIT_CURRENT(-1)), HID_UNIT_EXPONENT(exp)
#define HID_UNIT_LUX(exp) HID_UNIT(32, HID_UNIT_CGS_LINEAR | HID_UNIT_LENGTH(-1) | HID_UNIT_LUMINOUS(1)), HID_UNIT_EXPONENT(exp)
#define _USB_TMC_H_ 
#define USB_CLASS_TMC 0xFE
#define USB_TMC_SUBCLASS_TMC 0x03
#define USB_TMC_PROTO_NONE 0x00
#define USB_TMC_PROTO_USB488 0x01
#define USB_TMC_REQ_INITIATE_ABORT_BULK_OUT 1
#define USB_TMC_REQ_CHECK_ABORT_BULK_OUT_STATUS 2
#define USB_TMC_REQ_INITIATE_ABORT_BULK_IN 3
#define USB_TMC_REQ_CHECK_ABORT_BULK_IN_STATUS 4
#define USB_TMC_REQ_INITIATE_CLEAR 5
#define USB_TMC_REQ_CHECK_CLEAR_STATUS 6
#define USB_TMC_REQ_GET_CAPABILITIES 7
#define USB_TMC_REQ_INDICATOR_PULSE 64
#define USB_TMC_STATUS_SUCCESS 0x01
#define USB_TMC_STATUS_PENDING 0x02
#define USB_TMC_STATUS_FAILED 0x80
#define USB_TMC_STATUS_TRANSFER_NOT_IN_PROGRESS 0x81
#define USB_TMC_STATUS_SPLIT_NOT_IN_PROGRESS 0x82
#define USB_TMC_STATUS_SPLIT_IN_PROGRESS 0x83
struct usb_tmc_get_capabilities_response {
    uint8_t USBTMC_status;
    uint8_t Reserved0;
    uint16_t bcdUSBTMC;
    uint8_t InterfaceCapabilities;
    uint8_t DeviceCapabilities;
    uint8_t Reserved1[18];
} ;
#define USB_TMC_DEV_DEP_MSG_OUT 1
#define USB_TMC_REQUEST_DEV_DEP_MSG_IN 2
#define USB_TMC_DEV_DEP_MSG_IN 2
#define USB_TMC_VENDOR_SPECIFIC_OUT 126
#define USB_TMC_REQUEST_VENDOR_SPECIFIC_IN 127
#define USB_TMC_VENDOR_SPECIFIC_IN 127
#define USB_TMC_TRANSFER_ATTR_EOM 0x01
#define USB_TMC_TRANSFER_ATTR_TERM_CHAR 0x02
union usb_tmc_bulk_header_specific {
    struct {
        uint32_t TransferSize;
        uint8_t bmTransferAttributes;
        uint8_t Reserved[3];
    } dev_dep_msg_out;
    struct {
        uint32_t TransferSize;
        uint8_t bmTransferAttributes;
        uint8_t TermChar;
        uint8_t Reserved[2];
    } request_dev_dep_msg_in;
    struct {
        uint32_t TransferSize;
        uint8_t bmTransferAttributes;
        uint8_t Reserved[3];
    } dev_dep_msg_in;
    struct {
        uint32_t TransferSize;
        uint8_t Reserved[4];
    } vendor_specific_out;
    struct {
        uint32_t TransferSize;
        uint8_t Reserved[4];
    } request_vendor_specific_in;
    struct {
        uint32_t TransferSize;
        uint8_t Reserved[4];
    } vendor_specific_in;
};
struct usb_tmc_bulk_header {
    uint8_t MsgId;
    uint8_t bTag;
    uint8_t bTagInverse;
    uint8_t Reserved;
    union usb_tmc_bulk_header_specific MsgSpecific;
} ;
       
typedef struct FlipperFormat FlipperFormat;
FlipperFormat* flipper_format_string_alloc();
FlipperFormat* flipper_format_file_alloc(Storage* storage);
FlipperFormat* flipper_format_buffered_file_alloc(Storage* storage);
_Bool flipper_format_file_open_existing(FlipperFormat* flipper_format, const char* path);
_Bool flipper_format_buffered_file_open_existing(FlipperFormat* flipper_format, const char* path);
_Bool flipper_format_file_open_append(FlipperFormat* flipper_format, const char* path);
_Bool flipper_format_file_open_always(FlipperFormat* flipper_format, const char* path);
_Bool flipper_format_file_open_new(FlipperFormat* flipper_format, const char* path);
_Bool flipper_format_file_close(FlipperFormat* flipper_format);
_Bool flipper_format_buffered_file_close(FlipperFormat* flipper_format);
void flipper_format_free(FlipperFormat* flipper_format);
void flipper_format_set_strict_mode(FlipperFormat* flipper_format, _Bool strict_mode);
_Bool flipper_format_rewind(FlipperFormat* flipper_format);
_Bool flipper_format_seek_to_end(FlipperFormat* flipper_format);
_Bool flipper_format_key_exist(FlipperFormat* flipper_format, const char* key);
_Bool flipper_format_read_header(
    FlipperFormat* flipper_format,
    FuriString* filetype,
    uint32_t* version);
_Bool flipper_format_write_header(
    FlipperFormat* flipper_format,
    FuriString* filetype,
    const uint32_t version);
_Bool flipper_format_write_header_cstr(
    FlipperFormat* flipper_format,
    const char* filetype,
    const uint32_t version);
_Bool flipper_format_get_value_count(
    FlipperFormat* flipper_format,
    const char* key,
    uint32_t* count);
_Bool flipper_format_read_string(FlipperFormat* flipper_format, const char* key, FuriString* data);
_Bool flipper_format_write_string(FlipperFormat* flipper_format, const char* key, FuriString* data);
_Bool flipper_format_write_string_cstr(
    FlipperFormat* flipper_format,
    const char* key,
    const char* data);
_Bool flipper_format_read_hex_uint64(
    FlipperFormat* flipper_format,
    const char* key,
    uint64_t* data,
    const uint16_t data_size);
_Bool flipper_format_write_hex_uint64(
    FlipperFormat* flipper_format,
    const char* key,
    const uint64_t* data,
    const uint16_t data_size);
_Bool flipper_format_read_uint32(
    FlipperFormat* flipper_format,
    const char* key,
    uint32_t* data,
    const uint16_t data_size);
_Bool flipper_format_write_uint32(
    FlipperFormat* flipper_format,
    const char* key,
    const uint32_t* data,
    const uint16_t data_size);
_Bool flipper_format_read_int32(
    FlipperFormat* flipper_format,
    const char* key,
    int32_t* data,
    const uint16_t data_size);
_Bool flipper_format_write_int32(
    FlipperFormat* flipper_format,
    const char* key,
    const int32_t* data,
    const uint16_t data_size);
_Bool flipper_format_read_bool(
    FlipperFormat* flipper_format,
    const char* key,
    _Bool* data,
    const uint16_t data_size);
_Bool flipper_format_write_bool(
    FlipperFormat* flipper_format,
    const char* key,
    const _Bool* data,
    const uint16_t data_size);
_Bool flipper_format_read_float(
    FlipperFormat* flipper_format,
    const char* key,
    float* data,
    const uint16_t data_size);
_Bool flipper_format_write_float(
    FlipperFormat* flipper_format,
    const char* key,
    const float* data,
    const uint16_t data_size);
_Bool flipper_format_read_hex(
    FlipperFormat* flipper_format,
    const char* key,
    uint8_t* data,
    const uint16_t data_size);
_Bool flipper_format_write_hex(
    FlipperFormat* flipper_format,
    const char* key,
    const uint8_t* data,
    const uint16_t data_size);
_Bool flipper_format_write_comment(FlipperFormat* flipper_format, FuriString* data);
_Bool flipper_format_write_comment_cstr(FlipperFormat* flipper_format, const char* data);
_Bool flipper_format_delete_key(FlipperFormat* flipper_format, const char* key);
_Bool flipper_format_update_string(FlipperFormat* flipper_format, const char* key, FuriString* data);
_Bool flipper_format_update_string_cstr(
    FlipperFormat* flipper_format,
    const char* key,
    const char* data);
_Bool flipper_format_update_uint32(
    FlipperFormat* flipper_format,
    const char* key,
    const uint32_t* data,
    const uint16_t data_size);
_Bool flipper_format_update_int32(
    FlipperFormat* flipper_format,
    const char* key,
    const int32_t* data,
    const uint16_t data_size);
_Bool flipper_format_update_bool(
    FlipperFormat* flipper_format,
    const char* key,
    const _Bool* data,
    const uint16_t data_size);
_Bool flipper_format_update_float(
    FlipperFormat* flipper_format,
    const char* key,
    const float* data,
    const uint16_t data_size);
_Bool flipper_format_update_hex(
    FlipperFormat* flipper_format,
    const char* key,
    const uint8_t* data,
    const uint16_t data_size);
_Bool flipper_format_insert_or_update_string(
    FlipperFormat* flipper_format,
    const char* key,
    FuriString* data);
_Bool flipper_format_insert_or_update_string_cstr(
    FlipperFormat* flipper_format,
    const char* key,
    const char* data);
_Bool flipper_format_insert_or_update_uint32(
    FlipperFormat* flipper_format,
    const char* key,
    const uint32_t* data,
    const uint16_t data_size);
_Bool flipper_format_insert_or_update_int32(
    FlipperFormat* flipper_format,
    const char* key,
    const int32_t* data,
    const uint16_t data_size);
_Bool flipper_format_insert_or_update_bool(
    FlipperFormat* flipper_format,
    const char* key,
    const _Bool* data,
    const uint16_t data_size);
_Bool flipper_format_insert_or_update_float(
    FlipperFormat* flipper_format,
    const char* key,
    const float* data,
    const uint16_t data_size);
_Bool flipper_format_insert_or_update_hex(
    FlipperFormat* flipper_format,
    const char* key,
    const uint8_t* data,
    const uint16_t data_size);
       
Stream* flipper_format_get_raw_stream(FlipperFormat* flipper_format);
       
#define INFRARED_COMMON_CARRIER_FREQUENCY ((uint32_t)38000)
#define INFRARED_COMMON_DUTY_CYCLE ((float)0.33)
#define INFRARED_RAW_RX_TIMING_DELAY_US 150000
#define INFRARED_RAW_TX_TIMING_DELAY_US 180000
typedef struct InfraredDecoderHandler InfraredDecoderHandler;
typedef struct InfraredEncoderHandler InfraredEncoderHandler;
typedef enum {
    InfraredProtocolUnknown = -1,
    InfraredProtocolNEC = 0,
    InfraredProtocolNECext,
    InfraredProtocolNEC42,
    InfraredProtocolNEC42ext,
    InfraredProtocolSamsung32,
    InfraredProtocolRC6,
    InfraredProtocolRC5,
    InfraredProtocolRC5X,
    InfraredProtocolSIRC,
    InfraredProtocolSIRC15,
    InfraredProtocolSIRC20,
    InfraredProtocolKaseikyo,
    InfraredProtocolMAX,
} InfraredProtocol;
typedef struct {
    InfraredProtocol protocol;
    uint32_t address;
    uint32_t command;
    _Bool repeat;
} InfraredMessage;
typedef enum {
    InfraredStatusError,
    InfraredStatusOk,
    InfraredStatusDone,
    InfraredStatusReady,
} InfraredStatus;
InfraredDecoderHandler* infrared_alloc_decoder(void);
const InfraredMessage*
    infrared_decode(InfraredDecoderHandler* handler, _Bool level, uint32_t duration);
const InfraredMessage* infrared_check_decoder_ready(InfraredDecoderHandler* handler);
void infrared_free_decoder(InfraredDecoderHandler* handler);
void infrared_reset_decoder(InfraredDecoderHandler* handler);
const char* infrared_get_protocol_name(InfraredProtocol protocol);
InfraredProtocol infrared_get_protocol_by_name(const char* protocol_name);
uint8_t infrared_get_protocol_address_length(InfraredProtocol protocol);
uint8_t infrared_get_protocol_command_length(InfraredProtocol protocol);
_Bool infrared_is_protocol_valid(InfraredProtocol protocol);
InfraredEncoderHandler* infrared_alloc_encoder(void);
void infrared_free_encoder(InfraredEncoderHandler* handler);
InfraredStatus infrared_encode(InfraredEncoderHandler* handler, uint32_t* duration, _Bool* level);
void infrared_reset_encoder(InfraredEncoderHandler* handler, const InfraredMessage* message);
uint32_t infrared_get_protocol_frequency(InfraredProtocol protocol);
float infrared_get_protocol_duty_cycle(InfraredProtocol protocol);
size_t infrared_get_protocol_min_repeat_count(InfraredProtocol protocol);
       
       
       
typedef struct {
    uint32_t start;
    uint32_t value;
} FuriHalCortexTimer;
void furi_hal_cortex_init_early();
void furi_hal_cortex_delay_us(uint32_t microseconds);
uint32_t furi_hal_cortex_instructions_per_microsecond();
FuriHalCortexTimer furi_hal_cortex_timer_get(uint32_t timeout_us);
_Bool furi_hal_cortex_timer_is_expired(FuriHalCortexTimer cortex_timer);
void furi_hal_cortex_timer_wait(FuriHalCortexTimer cortex_timer);
       
typedef enum {
    FuriHalClockMcoLse,
    FuriHalClockMcoSysclk,
    FuriHalClockMcoMsi100k,
    FuriHalClockMcoMsi200k,
    FuriHalClockMcoMsi400k,
    FuriHalClockMcoMsi800k,
    FuriHalClockMcoMsi1m,
    FuriHalClockMcoMsi2m,
    FuriHalClockMcoMsi4m,
    FuriHalClockMcoMsi8m,
    FuriHalClockMcoMsi16m,
    FuriHalClockMcoMsi24m,
    FuriHalClockMcoMsi32m,
    FuriHalClockMcoMsi48m,
} FuriHalClockMcoSourceId;
typedef enum {
    FuriHalClockMcoDiv1 = 0x00000000U,
    FuriHalClockMcoDiv2 = (0x1U << (28U)),
    FuriHalClockMcoDiv4 = (0x2U << (28U)),
    FuriHalClockMcoDiv8 = ((0x2U << (28U)) | (0x1U << (28U))),
    FuriHalClockMcoDiv16 = (0x4U << (28U)),
} FuriHalClockMcoDivisorId;
void furi_hal_clock_init_early();
void furi_hal_clock_deinit_early();
void furi_hal_clock_init();
void furi_hal_clock_switch_to_hsi();
void furi_hal_clock_switch_to_pll();
void furi_hal_clock_suspend_tick();
void furi_hal_clock_resume_tick();
void furi_hal_clock_mco_enable(FuriHalClockMcoSourceId source, FuriHalClockMcoDivisorId div);
void furi_hal_clock_mco_disable();
       
typedef enum {
    FuriHalCryptoKeyTypeMaster,
    FuriHalCryptoKeyTypeSimple,
    FuriHalCryptoKeyTypeEncrypted,
} FuriHalCryptoKeyType;
typedef enum {
    FuriHalCryptoKeySize128,
    FuriHalCryptoKeySize256,
} FuriHalCryptoKeySize;
typedef struct {
    FuriHalCryptoKeyType type;
    FuriHalCryptoKeySize size;
    uint8_t* data;
} FuriHalCryptoKey;
void furi_hal_crypto_init();
_Bool furi_hal_crypto_verify_enclave(uint8_t* keys_nb, uint8_t* valid_keys_nb);
_Bool furi_hal_crypto_verify_key(uint8_t key_slot);
_Bool furi_hal_crypto_store_add_key(FuriHalCryptoKey* key, uint8_t* slot);
_Bool furi_hal_crypto_store_load_key(uint8_t slot, const uint8_t* iv);
_Bool furi_hal_crypto_store_unload_key(uint8_t slot);
_Bool furi_hal_crypto_encrypt(const uint8_t* input, uint8_t* output, size_t size);
_Bool furi_hal_crypto_decrypt(const uint8_t* input, uint8_t* output, size_t size);
       
typedef void (*FuriHalConsoleTxCallback)(const uint8_t* buffer, size_t size, void* context);
void furi_hal_console_init();
void furi_hal_console_enable();
void furi_hal_console_disable();
void furi_hal_console_set_tx_callback(FuriHalConsoleTxCallback callback, void* context);
void furi_hal_console_tx(const uint8_t* buffer, size_t buffer_size);
void furi_hal_console_tx_with_new_line(const uint8_t* buffer, size_t buffer_size);
void furi_hal_console_printf(const char format[], ...) ;
void furi_hal_console_puts(const char* data);
       
void furi_hal_debug_enable();
void furi_hal_debug_disable();
       
void furi_hal_os_init();
void furi_hal_os_tick();
       
       
typedef struct FuriHalSpiBus FuriHalSpiBus;
typedef struct FuriHalSpiBusHandle FuriHalSpiBusHandle;
typedef enum {
    FuriHalSpiBusEventInit,
    FuriHalSpiBusEventDeinit,
    FuriHalSpiBusEventLock,
    FuriHalSpiBusEventUnlock,
    FuriHalSpiBusEventActivate,
    FuriHalSpiBusEventDeactivate,
} FuriHalSpiBusEvent;
typedef void (*FuriHalSpiBusEventCallback)(FuriHalSpiBus* bus, FuriHalSpiBusEvent event);
struct FuriHalSpiBus {
    SPI_TypeDef* spi;
    FuriHalSpiBusEventCallback callback;
    FuriHalSpiBusHandle* current_handle;
};
typedef enum {
    FuriHalSpiBusHandleEventInit,
    FuriHalSpiBusHandleEventDeinit,
    FuriHalSpiBusHandleEventActivate,
    FuriHalSpiBusHandleEventDeactivate,
} FuriHalSpiBusHandleEvent;
typedef void (*FuriHalSpiBusHandleEventCallback)(
    FuriHalSpiBusHandle* handle,
    FuriHalSpiBusHandleEvent event);
struct FuriHalSpiBusHandle {
    FuriHalSpiBus* bus;
    FuriHalSpiBusHandleEventCallback callback;
    const GpioPin* miso;
    const GpioPin* mosi;
    const GpioPin* sck;
    const GpioPin* cs;
};
void hal_sd_detect_init(void);
void hal_sd_detect_set_low(void);
_Bool hal_sd_detect(void);
extern FuriHalSpiBusHandle* furi_hal_sd_spi_handle;
       
       
       
typedef struct FuriHalI2cBus FuriHalI2cBus;
typedef struct FuriHalI2cBusHandle FuriHalI2cBusHandle;
typedef enum {
    FuriHalI2cBusEventInit,
    FuriHalI2cBusEventDeinit,
    FuriHalI2cBusEventLock,
    FuriHalI2cBusEventUnlock,
    FuriHalI2cBusEventActivate,
    FuriHalI2cBusEventDeactivate,
} FuriHalI2cBusEvent;
typedef void (*FuriHalI2cBusEventCallback)(FuriHalI2cBus* bus, FuriHalI2cBusEvent event);
struct FuriHalI2cBus {
    I2C_TypeDef* i2c;
    FuriHalI2cBusHandle* current_handle;
    FuriHalI2cBusEventCallback callback;
};
typedef enum {
    FuriHalI2cBusHandleEventActivate,
    FuriHalI2cBusHandleEventDeactivate,
} FuriHalI2cBusHandleEvent;
typedef void (*FuriHalI2cBusHandleEventCallback)(
    FuriHalI2cBusHandle* handle,
    FuriHalI2cBusHandleEvent event);
struct FuriHalI2cBusHandle {
    FuriHalI2cBus* bus;
    FuriHalI2cBusHandleEventCallback callback;
};
extern FuriHalI2cBus furi_hal_i2c_bus_power;
extern FuriHalI2cBus furi_hal_i2c_bus_external;
extern FuriHalI2cBusHandle furi_hal_i2c_handle_power;
extern FuriHalI2cBusHandle furi_hal_i2c_handle_external;
void furi_hal_i2c_init_early();
void furi_hal_i2c_deinit_early();
void furi_hal_i2c_init();
void furi_hal_i2c_acquire(FuriHalI2cBusHandle* handle);
void furi_hal_i2c_release(FuriHalI2cBusHandle* handle);
_Bool furi_hal_i2c_tx(
    FuriHalI2cBusHandle* handle,
    const uint8_t address,
    const uint8_t* data,
    const uint8_t size,
    uint32_t timeout);
_Bool furi_hal_i2c_rx(
    FuriHalI2cBusHandle* handle,
    const uint8_t address,
    uint8_t* data,
    const uint8_t size,
    uint32_t timeout);
_Bool furi_hal_i2c_trx(
    FuriHalI2cBusHandle* handle,
    const uint8_t address,
    const uint8_t* tx_data,
    const uint8_t tx_size,
    uint8_t* rx_data,
    const uint8_t rx_size,
    uint32_t timeout);
_Bool furi_hal_i2c_is_device_ready(FuriHalI2cBusHandle* handle, uint8_t i2c_addr, uint32_t timeout);
_Bool furi_hal_i2c_read_reg_8(
    FuriHalI2cBusHandle* handle,
    uint8_t i2c_addr,
    uint8_t reg_addr,
    uint8_t* data,
    uint32_t timeout);
_Bool furi_hal_i2c_read_reg_16(
    FuriHalI2cBusHandle* handle,
    uint8_t i2c_addr,
    uint8_t reg_addr,
    uint16_t* data,
    uint32_t timeout);
_Bool furi_hal_i2c_read_mem(
    FuriHalI2cBusHandle* handle,
    uint8_t i2c_addr,
    uint8_t mem_addr,
    uint8_t* data,
    uint8_t len,
    uint32_t timeout);
_Bool furi_hal_i2c_write_reg_8(
    FuriHalI2cBusHandle* handle,
    uint8_t i2c_addr,
    uint8_t reg_addr,
    uint8_t data,
    uint32_t timeout);
_Bool furi_hal_i2c_write_reg_16(
    FuriHalI2cBusHandle* handle,
    uint8_t i2c_addr,
    uint8_t reg_addr,
    uint16_t data,
    uint32_t timeout);
_Bool furi_hal_i2c_write_mem(
    FuriHalI2cBusHandle* handle,
    uint8_t i2c_addr,
    uint8_t mem_addr,
    uint8_t* data,
    uint8_t len,
    uint32_t timeout);
       
#define INPUT_DEBOUNCE_TICKS 4
typedef enum {
    InputKeyUp,
    InputKeyDown,
    InputKeyRight,
    InputKeyLeft,
    InputKeyOk,
    InputKeyBack,
    InputKeyMAX,
} InputKey;
typedef enum {
    LightRed = (1 << 0),
    LightGreen = (1 << 1),
    LightBlue = (1 << 2),
    LightBacklight = (1 << 3),
} Light;
typedef struct {
    const GpioPin* gpio;
    const InputKey key;
    const _Bool inverted;
    const char* name;
} InputPin;
extern const InputPin input_pins[];
extern const size_t input_pins_count;
extern const GpioPin vibro_gpio;
extern const GpioPin ibutton_gpio;
extern const GpioPin gpio_cc1101_g0;
extern const GpioPin gpio_rf_sw_0;
extern const GpioPin gpio_subghz_cs;
extern const GpioPin gpio_display_cs;
extern const GpioPin gpio_display_rst_n;
extern const GpioPin gpio_display_di;
extern const GpioPin gpio_sdcard_cs;
extern const GpioPin gpio_sdcard_cd;
extern const GpioPin gpio_nfc_cs;
extern const GpioPin gpio_button_up;
extern const GpioPin gpio_button_down;
extern const GpioPin gpio_button_right;
extern const GpioPin gpio_button_left;
extern const GpioPin gpio_button_ok;
extern const GpioPin gpio_button_back;
extern const GpioPin gpio_spi_d_miso;
extern const GpioPin gpio_spi_d_mosi;
extern const GpioPin gpio_spi_d_sck;
extern const GpioPin gpio_spi_r_miso;
extern const GpioPin gpio_spi_r_mosi;
extern const GpioPin gpio_spi_r_sck;
extern const GpioPin gpio_ext_pc0;
extern const GpioPin gpio_ext_pc1;
extern const GpioPin gpio_ext_pc3;
extern const GpioPin gpio_ext_pb2;
extern const GpioPin gpio_ext_pb3;
extern const GpioPin gpio_ext_pa4;
extern const GpioPin gpio_ext_pa6;
extern const GpioPin gpio_ext_pa7;
extern const GpioPin gpio_nfc_irq_rfid_pull;
extern const GpioPin gpio_rfid_carrier_out;
extern const GpioPin gpio_rfid_data_in;
extern const GpioPin gpio_rfid_carrier;
extern const GpioPin gpio_infrared_rx;
extern const GpioPin gpio_infrared_tx;
extern const GpioPin gpio_usart_tx;
extern const GpioPin gpio_usart_rx;
extern const GpioPin gpio_i2c_power_sda;
extern const GpioPin gpio_i2c_power_scl;
extern const GpioPin gpio_speaker;
extern const GpioPin periph_power;
extern const GpioPin gpio_usb_dm;
extern const GpioPin gpio_usb_dp;
#define BUTTON_BACK_GPIO_Port GPIOC
#define BUTTON_BACK_Pin LL_GPIO_PIN_13
#define BUTTON_DOWN_GPIO_Port GPIOC
#define BUTTON_DOWN_Pin LL_GPIO_PIN_6
#define BUTTON_LEFT_GPIO_Port GPIOB
#define BUTTON_LEFT_Pin LL_GPIO_PIN_11
#define BUTTON_OK_GPIO_Port GPIOH
#define BUTTON_OK_Pin LL_GPIO_PIN_3
#define BUTTON_RIGHT_GPIO_Port GPIOB
#define BUTTON_RIGHT_Pin LL_GPIO_PIN_12
#define BUTTON_UP_GPIO_Port GPIOB
#define BUTTON_UP_Pin LL_GPIO_PIN_10
#define CC1101_CS_GPIO_Port GPIOD
#define CC1101_CS_Pin LL_GPIO_PIN_0
#define CC1101_G0_GPIO_Port GPIOA
#define CC1101_G0_Pin LL_GPIO_PIN_1
#define DISPLAY_CS_GPIO_Port GPIOC
#define DISPLAY_CS_Pin LL_GPIO_PIN_11
#define DISPLAY_DI_GPIO_Port GPIOB
#define DISPLAY_DI_Pin LL_GPIO_PIN_1
#define DISPLAY_RST_GPIO_Port GPIOB
#define DISPLAY_RST_Pin LL_GPIO_PIN_0
#define IR_RX_GPIO_Port GPIOA
#define IR_RX_Pin LL_GPIO_PIN_0
#define IR_TX_GPIO_Port GPIOB
#define IR_TX_Pin LL_GPIO_PIN_9
#define NFC_CS_GPIO_Port GPIOE
#define NFC_CS_Pin LL_GPIO_PIN_4
#define PA4_GPIO_Port GPIOA
#define PA4_Pin LL_GPIO_PIN_4
#define PA6_GPIO_Port GPIOA
#define PA6_Pin LL_GPIO_PIN_6
#define PA7_GPIO_Port GPIOA
#define PA7_Pin LL_GPIO_PIN_7
#define PB2_GPIO_Port GPIOB
#define PB2_Pin LL_GPIO_PIN_2
#define PB3_GPIO_Port GPIOB
#define PB3_Pin LL_GPIO_PIN_3
#define PC0_GPIO_Port GPIOC
#define PC0_Pin LL_GPIO_PIN_0
#define PC1_GPIO_Port GPIOC
#define PC1_Pin LL_GPIO_PIN_1
#define PC3_GPIO_Port GPIOC
#define PC3_Pin LL_GPIO_PIN_3
#define QUARTZ_32MHZ_IN_GPIO_Port GPIOC
#define QUARTZ_32MHZ_IN_Pin LL_GPIO_PIN_14
#define QUARTZ_32MHZ_OUT_GPIO_Port GPIOC
#define QUARTZ_32MHZ_OUT_Pin LL_GPIO_PIN_15
#define RFID_OUT_GPIO_Port GPIOB
#define RFID_OUT_Pin LL_GPIO_PIN_13
#define RFID_PULL_GPIO_Port GPIOA
#define RFID_PULL_Pin LL_GPIO_PIN_2
#define RFID_RF_IN_GPIO_Port GPIOC
#define RFID_RF_IN_Pin LL_GPIO_PIN_5
#define RFID_CARRIER_GPIO_Port GPIOA
#define RFID_CARRIER_Pin LL_GPIO_PIN_15
#define RF_SW_0_GPIO_Port GPIOC
#define RF_SW_0_Pin LL_GPIO_PIN_4
#define SD_CD_GPIO_Port GPIOC
#define SD_CD_Pin LL_GPIO_PIN_10
#define SD_CS_GPIO_Port GPIOC
#define SD_CS_Pin LL_GPIO_PIN_12
#define SPEAKER_GPIO_Port GPIOB
#define SPEAKER_Pin LL_GPIO_PIN_8
#define VIBRO_GPIO_Port GPIOA
#define VIBRO_Pin LL_GPIO_PIN_8
#define iBTN_GPIO_Port GPIOB
#define iBTN_Pin LL_GPIO_PIN_14
#define USART1_TX_Pin LL_GPIO_PIN_6
#define USART1_TX_Port GPIOB
#define USART1_RX_Pin LL_GPIO_PIN_7
#define USART1_RX_Port GPIOB
#define SPI_D_MISO_GPIO_Port GPIOC
#define SPI_D_MISO_Pin LL_GPIO_PIN_2
#define SPI_D_MOSI_GPIO_Port GPIOB
#define SPI_D_MOSI_Pin LL_GPIO_PIN_15
#define SPI_D_SCK_GPIO_Port GPIOD
#define SPI_D_SCK_Pin LL_GPIO_PIN_1
#define SPI_R_MISO_GPIO_Port GPIOB
#define SPI_R_MISO_Pin LL_GPIO_PIN_4
#define SPI_R_MOSI_GPIO_Port GPIOB
#define SPI_R_MOSI_Pin LL_GPIO_PIN_5
#define SPI_R_SCK_GPIO_Port GPIOA
#define SPI_R_SCK_Pin LL_GPIO_PIN_5
#define NFC_IRQ_Pin RFID_PULL_Pin
#define NFC_IRQ_GPIO_Port RFID_PULL_GPIO_Port
void furi_hal_resources_init_early();
void furi_hal_resources_deinit_early();
void furi_hal_resources_init();
       
typedef struct {
    uint32_t start;
    uint32_t end;
    int8_t power_limit;
    uint8_t duty_cycle;
} FuriHalRegionBand;
typedef struct {
    char country_code[4];
    uint16_t bands_count;
    FuriHalRegionBand bands[];
} FuriHalRegion;
void furi_hal_region_init();
const FuriHalRegion* furi_hal_region_get();
void furi_hal_region_set(FuriHalRegion* region);
_Bool furi_hal_region_is_provisioned();
const char* furi_hal_region_get_name();
_Bool furi_hal_region_is_frequency_allowed(uint32_t frequency);
const FuriHalRegionBand* furi_hal_region_get_band(uint32_t frequency);
       
typedef struct {
    uint8_t hour;
    uint8_t minute;
    uint8_t second;
    uint8_t day;
    uint8_t month;
    uint16_t year;
    uint8_t weekday;
} FuriHalRtcDateTime;
typedef enum {
    FuriHalRtcFlagDebug = (1 << 0),
    FuriHalRtcFlagFactoryReset = (1 << 1),
    FuriHalRtcFlagLock = (1 << 2),
    FuriHalRtcFlagC2Update = (1 << 3),
} FuriHalRtcFlag;
typedef enum {
    FuriHalRtcBootModeNormal = 0,
    FuriHalRtcBootModeDfu,
    FuriHalRtcBootModePreUpdate,
    FuriHalRtcBootModeUpdate,
    FuriHalRtcBootModePostUpdate,
} FuriHalRtcBootMode;
typedef enum {
    FuriHalRtcHeapTrackModeNone = 0,
    FuriHalRtcHeapTrackModeMain,
    FuriHalRtcHeapTrackModeTree,
    FuriHalRtcHeapTrackModeAll,
} FuriHalRtcHeapTrackMode;
typedef enum {
    FuriHalRtcRegisterHeader,
    FuriHalRtcRegisterSystem,
    FuriHalRtcRegisterVersion,
    FuriHalRtcRegisterLfsFingerprint,
    FuriHalRtcRegisterFaultData,
    FuriHalRtcRegisterPinFails,
    FuriHalRtcRegisterUpdateFolderFSIndex,
    FuriHalRtcRegisterMAX,
} FuriHalRtcRegister;
typedef enum {
    FuriHalRtcLocaleUnitsMetric = 0,
    FuriHalRtcLocaleUnitsImperial = 1,
} FuriHalRtcLocaleUnits;
typedef enum {
    FuriHalRtcLocaleTimeFormat24h = 0,
    FuriHalRtcLocaleTimeFormat12h = 1,
} FuriHalRtcLocaleTimeFormat;
typedef enum {
    FuriHalRtcLocaleDateFormatDMY = 0,
    FuriHalRtcLocaleDateFormatMDY = 1,
    FuriHalRtcLocaleDateFormatYMD = 2,
} FuriHalRtcLocaleDateFormat;
void furi_hal_rtc_init_early();
void furi_hal_rtc_deinit_early();
void furi_hal_rtc_init();
uint32_t furi_hal_rtc_get_register(FuriHalRtcRegister reg);
void furi_hal_rtc_set_register(FuriHalRtcRegister reg, uint32_t value);
void furi_hal_rtc_set_log_level(uint8_t level);
uint8_t furi_hal_rtc_get_log_level();
void furi_hal_rtc_set_flag(FuriHalRtcFlag flag);
void furi_hal_rtc_reset_flag(FuriHalRtcFlag flag);
_Bool furi_hal_rtc_is_flag_set(FuriHalRtcFlag flag);
void furi_hal_rtc_set_boot_mode(FuriHalRtcBootMode mode);
FuriHalRtcBootMode furi_hal_rtc_get_boot_mode();
void furi_hal_rtc_set_heap_track_mode(FuriHalRtcHeapTrackMode mode);
FuriHalRtcHeapTrackMode furi_hal_rtc_get_heap_track_mode();
void furi_hal_rtc_set_locale_units(FuriHalRtcLocaleUnits value);
FuriHalRtcLocaleUnits furi_hal_rtc_get_locale_units();
void furi_hal_rtc_set_locale_timeformat(FuriHalRtcLocaleTimeFormat value);
FuriHalRtcLocaleTimeFormat furi_hal_rtc_get_locale_timeformat();
void furi_hal_rtc_set_locale_dateformat(FuriHalRtcLocaleDateFormat value);
FuriHalRtcLocaleDateFormat furi_hal_rtc_get_locale_dateformat();
void furi_hal_rtc_set_datetime(FuriHalRtcDateTime* datetime);
void furi_hal_rtc_get_datetime(FuriHalRtcDateTime* datetime);
_Bool furi_hal_rtc_validate_datetime(FuriHalRtcDateTime* datetime);
void furi_hal_rtc_set_fault_data(uint32_t value);
uint32_t furi_hal_rtc_get_fault_data();
void furi_hal_rtc_set_pin_fails(uint32_t value);
uint32_t furi_hal_rtc_get_pin_fails();
uint32_t furi_hal_rtc_get_timestamp();
uint32_t furi_hal_rtc_datetime_to_timestamp(FuriHalRtcDateTime* datetime);
       
void furi_hal_speaker_init();
void furi_hal_speaker_deinit();
 _Bool furi_hal_speaker_acquire(uint32_t timeout);
void furi_hal_speaker_release();
_Bool furi_hal_speaker_is_mine();
void furi_hal_speaker_start(float frequency, float volume);
void furi_hal_speaker_set_volume(float volume);
void furi_hal_speaker_stop();
       
void furi_hal_light_init();
void furi_hal_light_set(Light light, uint8_t value);
void furi_hal_light_blink_start(Light light, uint8_t brightness, uint16_t on_time, uint16_t period);
void furi_hal_light_blink_stop();
void furi_hal_light_blink_set_color(Light light);
void furi_hal_light_sequence(const char* sequence);
       
       
typedef void (*PropertyValueCallback)(const char* key, const char* value, _Bool last, void* context);
typedef struct {
    FuriString* key;
    FuriString* value;
    PropertyValueCallback out;
    char sep;
    _Bool last;
    void* context;
} PropertyValueContext;
void property_value_out(PropertyValueContext* ctx, const char* fmt, unsigned int nparts, ...);
typedef enum {
    FuriHalPowerICCharger,
    FuriHalPowerICFuelGauge,
} FuriHalPowerIC;
void furi_hal_power_init();
_Bool furi_hal_power_gauge_is_ok();
uint16_t furi_hal_power_insomnia_level();
void furi_hal_power_insomnia_enter();
void furi_hal_power_insomnia_exit();
_Bool furi_hal_power_sleep_available();
_Bool furi_hal_power_deep_sleep_available();
void furi_hal_power_sleep();
uint8_t furi_hal_power_get_pct();
uint8_t furi_hal_power_get_bat_health_pct();
_Bool furi_hal_power_is_charging();
_Bool furi_hal_power_is_charging_done();
void furi_hal_power_shutdown();
void furi_hal_power_off();
void furi_hal_power_reset();
void furi_hal_power_enable_otg();
void furi_hal_power_disable_otg();
void furi_hal_power_check_otg_status();
_Bool furi_hal_power_is_otg_enabled();
float furi_hal_power_get_battery_charging_voltage();
void furi_hal_power_set_battery_charging_voltage(float voltage);
uint32_t furi_hal_power_get_battery_remaining_capacity();
uint32_t furi_hal_power_get_battery_full_capacity();
uint32_t furi_hal_power_get_battery_design_capacity();
float furi_hal_power_get_battery_voltage(FuriHalPowerIC ic);
float furi_hal_power_get_battery_current(FuriHalPowerIC ic);
float furi_hal_power_get_battery_temperature(FuriHalPowerIC ic);
float furi_hal_power_get_usb_voltage();
void furi_hal_power_enable_external_3_3v();
void furi_hal_power_disable_external_3_3v();
void furi_hal_power_suppress_charge_enter();
void furi_hal_power_suppress_charge_exit();
void furi_hal_power_info_get(PropertyValueCallback callback, char sep, void* context);
void furi_hal_power_debug_get(PropertyValueCallback callback, void* context);
       
typedef void (*FuriHalInterruptISR)(void* context);
typedef enum {
    FuriHalInterruptIdTim1TrgComTim17,
    FuriHalInterruptIdTim1Cc,
    FuriHalInterruptIdTim1UpTim16,
    FuriHalInterruptIdTIM2,
    FuriHalInterruptIdDma1Ch1,
    FuriHalInterruptIdDma1Ch2,
    FuriHalInterruptIdDma1Ch3,
    FuriHalInterruptIdDma1Ch4,
    FuriHalInterruptIdDma1Ch5,
    FuriHalInterruptIdDma1Ch6,
    FuriHalInterruptIdDma1Ch7,
    FuriHalInterruptIdDma2Ch1,
    FuriHalInterruptIdDma2Ch2,
    FuriHalInterruptIdDma2Ch3,
    FuriHalInterruptIdDma2Ch4,
    FuriHalInterruptIdDma2Ch5,
    FuriHalInterruptIdDma2Ch6,
    FuriHalInterruptIdDma2Ch7,
    FuriHalInterruptIdRcc,
    FuriHalInterruptIdCOMP,
    FuriHalInterruptIdHsem,
    FuriHalInterruptIdLpTim1,
    FuriHalInterruptIdLpTim2,
    FuriHalInterruptIdMax,
} FuriHalInterruptId;
void furi_hal_interrupt_init();
void furi_hal_interrupt_set_isr(FuriHalInterruptId index, FuriHalInterruptISR isr, void* context);
void furi_hal_interrupt_set_isr_ex(
    FuriHalInterruptId index,
    uint16_t priority,
    FuriHalInterruptISR isr,
    void* context);
       
#define FURI_HAL_VERSION_NAME_LENGTH 8
#define FURI_HAL_VERSION_ARRAY_NAME_LENGTH (FURI_HAL_VERSION_NAME_LENGTH + 1)
#define FURI_HAL_VERSION_DEVICE_NAME_LENGTH (1 + 8 + FURI_HAL_VERSION_ARRAY_NAME_LENGTH)
typedef enum {
    FuriHalVersionOtpVersion0 = 0x00,
    FuriHalVersionOtpVersion1 = 0x01,
    FuriHalVersionOtpVersion2 = 0x02,
    FuriHalVersionOtpVersionEmpty = 0xFFFFFFFE,
    FuriHalVersionOtpVersionUnknown = 0xFFFFFFFF,
} FuriHalVersionOtpVersion;
typedef enum {
    FuriHalVersionColorUnknown = 0x00,
    FuriHalVersionColorBlack = 0x01,
    FuriHalVersionColorWhite = 0x02,
} FuriHalVersionColor;
typedef enum {
    FuriHalVersionRegionUnknown = 0x00,
    FuriHalVersionRegionEuRu = 0x01,
    FuriHalVersionRegionUsCaAu = 0x02,
    FuriHalVersionRegionJp = 0x03,
    FuriHalVersionRegionWorld = 0x04,
} FuriHalVersionRegion;
typedef enum {
    FuriHalVersionDisplayUnknown = 0x00,
    FuriHalVersionDisplayErc = 0x01,
    FuriHalVersionDisplayMgg = 0x02,
} FuriHalVersionDisplay;
void furi_hal_version_init();
_Bool furi_hal_version_do_i_belong_here();
const char* furi_hal_version_get_model_name();
FuriHalVersionOtpVersion furi_hal_version_get_otp_version();
uint8_t furi_hal_version_get_hw_version();
uint8_t furi_hal_version_get_hw_target();
uint8_t furi_hal_version_get_hw_body();
FuriHalVersionColor furi_hal_version_get_hw_color();
uint8_t furi_hal_version_get_hw_connect();
FuriHalVersionRegion furi_hal_version_get_hw_region();
const char* furi_hal_version_get_hw_region_name();
FuriHalVersionRegion furi_hal_version_get_hw_region_otp();
const char* furi_hal_version_get_hw_region_name_otp();
FuriHalVersionDisplay furi_hal_version_get_hw_display();
uint32_t furi_hal_version_get_hw_timestamp();
void furi_hal_version_set_custom_name(const char* name);
const char* furi_hal_version_get_name_ptr();
const char* furi_hal_version_get_device_name_ptr();
const char* furi_hal_version_get_ble_local_device_name_ptr();
const uint8_t* furi_hal_version_get_ble_mac();
const struct Version* furi_hal_version_get_firmware_version();
size_t furi_hal_version_uid_size();
const uint8_t* furi_hal_version_uid();
       
       
#define GAP_MAC_ADDR_SIZE (6)
typedef enum {
    GapEventTypeConnected,
    GapEventTypeDisconnected,
    GapEventTypeStartAdvertising,
    GapEventTypeStopAdvertising,
    GapEventTypePinCodeShow,
    GapEventTypePinCodeVerify,
    GapEventTypeUpdateMTU,
} GapEventType;
typedef union {
    uint32_t pin_code;
    uint16_t max_packet_size;
} GapEventData;
typedef struct {
    GapEventType type;
    GapEventData data;
} GapEvent;
typedef _Bool (*GapEventCallback)(GapEvent event, void* context);
typedef enum {
    GapStateUninitialized,
    GapStateIdle,
    GapStateStartingAdv,
    GapStateAdvFast,
    GapStateAdvLowPower,
    GapStateConnected,
} GapState;
typedef enum {
    GapPairingNone,
    GapPairingPinCodeShow,
    GapPairingPinCodeVerifyYesNo,
} GapPairing;
typedef struct {
    uint16_t conn_interval;
    uint16_t slave_latency;
    uint16_t supervisor_timeout;
} GapConnectionParams;
typedef struct {
    uint16_t conn_int_min;
    uint16_t conn_int_max;
    uint16_t slave_latency;
    uint16_t supervisor_timeout;
} GapConnectionParamsRequest;
typedef struct {
    uint16_t adv_service_uuid;
    uint16_t appearance_char;
    _Bool bonding_mode;
    GapPairing pairing_method;
    uint8_t mac_address[(6)];
    char adv_name[(1 + 8 + (8 + 1))];
    GapConnectionParamsRequest conn_param;
} GapConfig;
_Bool gap_init(GapConfig* config, GapEventCallback on_event_cb, void* context);
void gap_start_advertising();
void gap_stop_advertising();
GapState gap_get_state();
void gap_thread_stop();
       
#define SERIAL_SVC_DATA_LEN_MAX (486)
#define SERIAL_SVC_CHAR_VALUE_LEN_MAX (243)
typedef enum {
    SerialServiceRpcStatusNotActive = 0UL,
    SerialServiceRpcStatusActive = 1UL,
} SerialServiceRpcStatus;
typedef enum {
    SerialServiceEventTypeDataReceived,
    SerialServiceEventTypeDataSent,
    SerialServiceEventTypesBleResetRequest,
} SerialServiceEventType;
typedef struct {
    uint8_t* buffer;
    uint16_t size;
} SerialServiceData;
typedef struct {
    SerialServiceEventType event;
    SerialServiceData data;
} SerialServiceEvent;
typedef uint16_t (*SerialServiceEventCallback)(SerialServiceEvent event, void* context);
void serial_svc_start();
void serial_svc_set_callbacks(
    uint16_t buff_size,
    SerialServiceEventCallback callback,
    void* context);
void serial_svc_set_rpc_status(SerialServiceRpcStatus status);
void serial_svc_notify_buffer_is_empty();
void serial_svc_stop();
_Bool serial_svc_is_started();
_Bool serial_svc_update_tx(uint8_t* data, uint16_t data_len);
       
typedef enum {
    BleGlueC2ModeUnknown = 0,
    BleGlueC2ModeFUS,
    BleGlueC2ModeStack,
} BleGlueC2Mode;
#define BLE_GLUE_MAX_VERSION_STRING_LEN 20
typedef struct {
    BleGlueC2Mode mode;
    uint8_t VersionMajor;
    uint8_t VersionMinor;
    uint8_t VersionSub;
    uint8_t VersionBranch;
    uint8_t VersionReleaseType;
    uint8_t MemorySizeSram2B;
    uint8_t MemorySizeSram2A;
    uint8_t MemorySizeSram1;
    uint8_t MemorySizeFlash;
    uint8_t StackType;
    char StackTypeString[20];
    uint8_t FusVersionMajor;
    uint8_t FusVersionMinor;
    uint8_t FusVersionSub;
    uint8_t FusMemorySizeSram2B;
    uint8_t FusMemorySizeSram2A;
    uint8_t FusMemorySizeFlash;
} BleGlueC2Info;
typedef enum {
    BleGlueStatusStartup,
    BleGlueStatusBroken,
    BleGlueStatusC2Started,
    BleGlueStatusRadioStackRunning,
    BleGlueStatusRadioStackMissing
} BleGlueStatus;
typedef void (
    *BleGlueKeyStorageChangedCallback)(uint8_t* change_addr_start, uint16_t size, void* context);
void ble_glue_init();
_Bool ble_glue_start();
_Bool ble_glue_is_alive();
_Bool ble_glue_wait_for_c2_start(int32_t timeout);
BleGlueStatus ble_glue_get_c2_status();
const BleGlueC2Info* ble_glue_get_c2_info();
_Bool ble_glue_is_radio_stack_ready();
void ble_glue_set_key_storage_changed_callback(
    BleGlueKeyStorageChangedCallback callback,
    void* context);
void ble_glue_thread_stop();
_Bool ble_glue_reinit_c2();
typedef enum {
    BleGlueCommandResultUnknown,
    BleGlueCommandResultOK,
    BleGlueCommandResultError,
    BleGlueCommandResultRestartPending,
    BleGlueCommandResultOperationOngoing,
} BleGlueCommandResult;
BleGlueCommandResult ble_glue_force_c2_mode(BleGlueC2Mode mode);
BleGlueCommandResult ble_glue_fus_stack_delete();
BleGlueCommandResult ble_glue_fus_stack_install(uint32_t src_addr, uint32_t dst_addr);
BleGlueCommandResult ble_glue_fus_get_status();
BleGlueCommandResult ble_glue_fus_wait_operation();
       
_Bool ble_app_init();
void ble_app_get_key_storage_buff(uint8_t** addr, uint16_t* size);
void ble_app_thread_stop();
       
#define FURI_HAL_BT_SERIAL_PACKET_SIZE_MAX SERIAL_SVC_DATA_LEN_MAX
typedef enum {
    FuriHalBtSerialRpcStatusNotActive,
    FuriHalBtSerialRpcStatusActive,
} FuriHalBtSerialRpcStatus;
typedef SerialServiceEventCallback FuriHalBtSerialCallback;
void furi_hal_bt_serial_start();
void furi_hal_bt_serial_stop();
void furi_hal_bt_serial_set_event_callback(
    uint16_t buff_size,
    FuriHalBtSerialCallback callback,
    void* context);
void furi_hal_bt_serial_set_rpc_status(FuriHalBtSerialRpcStatus status);
void furi_hal_bt_serial_notify_buffer_is_empty();
_Bool furi_hal_bt_serial_tx(uint8_t* data, uint16_t size);
#define FURI_HAL_BT_STACK_VERSION_MAJOR (1)
#define FURI_HAL_BT_STACK_VERSION_MINOR (12)
#define FURI_HAL_BT_C2_START_TIMEOUT 1000
typedef enum {
    FuriHalBtStackUnknown,
    FuriHalBtStackLight,
    FuriHalBtStackFull,
} FuriHalBtStack;
typedef enum {
    FuriHalBtProfileSerial,
    FuriHalBtProfileHidKeyboard,
    FuriHalBtProfileNumber,
} FuriHalBtProfile;
void furi_hal_bt_init();
void furi_hal_bt_lock_core2();
void furi_hal_bt_unlock_core2();
_Bool furi_hal_bt_start_radio_stack();
FuriHalBtStack furi_hal_bt_get_radio_stack();
_Bool furi_hal_bt_is_ble_gatt_gap_supported();
_Bool furi_hal_bt_is_testing_supported();
_Bool furi_hal_bt_start_app(FuriHalBtProfile profile, GapEventCallback event_cb, void* context);
void furi_hal_bt_reinit();
_Bool furi_hal_bt_change_app(FuriHalBtProfile profile, GapEventCallback event_cb, void* context);
void furi_hal_bt_update_battery_level(uint8_t battery_level);
void furi_hal_bt_update_power_state();
_Bool furi_hal_bt_is_active();
void furi_hal_bt_start_advertising();
void furi_hal_bt_stop_advertising();
void furi_hal_bt_dump_state(FuriString* buffer);
_Bool furi_hal_bt_is_alive();
void furi_hal_bt_get_key_storage_buff(uint8_t** key_buff_addr, uint16_t* key_buff_size);
void furi_hal_bt_nvm_sram_sem_acquire();
void furi_hal_bt_nvm_sram_sem_release();
_Bool furi_hal_bt_clear_white_list();
void furi_hal_bt_set_key_storage_change_callback(
    BleGlueKeyStorageChangedCallback callback,
    void* context);
void furi_hal_bt_start_tone_tx(uint8_t channel, uint8_t power);
void furi_hal_bt_stop_tone_tx();
void furi_hal_bt_start_packet_tx(uint8_t channel, uint8_t pattern, uint8_t datarate);
uint16_t furi_hal_bt_stop_packet_test();
void furi_hal_bt_start_packet_rx(uint8_t channel, uint8_t datarate);
void furi_hal_bt_start_rx(uint8_t channel);
void furi_hal_bt_stop_rx();
float furi_hal_bt_get_rssi();
uint32_t furi_hal_bt_get_transmitted_packets();
_Bool furi_hal_bt_ensure_c2_mode(BleGlueC2Mode mode);
       
       
extern const LL_SPI_InitTypeDef furi_hal_spi_preset_2edge_low_8m;
extern const LL_SPI_InitTypeDef furi_hal_spi_preset_1edge_low_8m;
extern const LL_SPI_InitTypeDef furi_hal_spi_preset_1edge_low_4m;
extern const LL_SPI_InitTypeDef furi_hal_spi_preset_1edge_low_16m;
extern const LL_SPI_InitTypeDef furi_hal_spi_preset_1edge_low_2m;
extern FuriHalSpiBus furi_hal_spi_bus_r;
extern FuriHalSpiBus furi_hal_spi_bus_d;
extern FuriHalSpiBusHandle furi_hal_spi_bus_handle_subghz;
extern FuriHalSpiBusHandle furi_hal_spi_bus_handle_nfc;
extern FuriHalSpiBusHandle furi_hal_spi_bus_handle_external;
extern FuriHalSpiBusHandle furi_hal_spi_bus_handle_display;
extern FuriHalSpiBusHandle furi_hal_spi_bus_handle_sd_fast;
extern FuriHalSpiBusHandle furi_hal_spi_bus_handle_sd_slow;
void furi_hal_spi_init_early();
void furi_hal_spi_deinit_early();
void furi_hal_spi_init();
void furi_hal_spi_bus_init(FuriHalSpiBus* bus);
void furi_hal_spi_bus_deinit(FuriHalSpiBus* bus);
void furi_hal_spi_bus_handle_init(FuriHalSpiBusHandle* handle);
void furi_hal_spi_bus_handle_deinit(FuriHalSpiBusHandle* handle);
void furi_hal_spi_acquire(FuriHalSpiBusHandle* handle);
void furi_hal_spi_release(FuriHalSpiBusHandle* handle);
_Bool furi_hal_spi_bus_rx(
    FuriHalSpiBusHandle* handle,
    uint8_t* buffer,
    size_t size,
    uint32_t timeout);
_Bool furi_hal_spi_bus_tx(
    FuriHalSpiBusHandle* handle,
    uint8_t* buffer,
    size_t size,
    uint32_t timeout);
_Bool furi_hal_spi_bus_trx(
    FuriHalSpiBusHandle* handle,
    uint8_t* tx_buffer,
    uint8_t* rx_buffer,
    size_t size,
    uint32_t timeout);
       
#define FURI_HAL_FLASH_OB_RAW_SIZE_BYTES 0x80
#define FURI_HAL_FLASH_OB_SIZE_WORDS (FURI_HAL_FLASH_OB_RAW_SIZE_BYTES / sizeof(uint32_t))
#define FURI_HAL_FLASH_OB_TOTAL_VALUES (FURI_HAL_FLASH_OB_SIZE_WORDS / 2)
typedef union {
    uint8_t bytes[0x80];
    union {
        struct {
            uint32_t base;
            uint32_t complementary_value;
        } values;
        uint64_t dword;
    } obs[((0x80 / sizeof(uint32_t)) / 2)];
} FuriHalFlashRawOptionByteData;
;
void furi_hal_flash_init();
size_t furi_hal_flash_get_base();
size_t furi_hal_flash_get_read_block_size();
size_t furi_hal_flash_get_write_block_size();
size_t furi_hal_flash_get_page_size();
size_t furi_hal_flash_get_cycles_count();
const void* furi_hal_flash_get_free_start_address();
const void* furi_hal_flash_get_free_end_address();
size_t furi_hal_flash_get_free_page_start_address();
size_t furi_hal_flash_get_free_page_count();
void furi_hal_flash_erase(uint8_t page);
void furi_hal_flash_write_dword(size_t address, uint64_t data);
void furi_hal_flash_program_page(const uint8_t page, const uint8_t* data, uint16_t length);
int16_t furi_hal_flash_get_page_number(size_t address);
_Bool furi_hal_flash_ob_set_word(size_t word_idx, const uint32_t value);
void furi_hal_flash_ob_apply();
const FuriHalFlashRawOptionByteData* furi_hal_flash_ob_get_raw_ptr();
       
#define API_HAL_SUBGHZ_ASYNC_TX_BUFFER_FULL (256)
#define API_HAL_SUBGHZ_ASYNC_TX_BUFFER_HALF (API_HAL_SUBGHZ_ASYNC_TX_BUFFER_FULL / 2)
#define API_HAL_SUBGHZ_ASYNC_TX_GUARD_TIME 999
typedef enum {
    FuriHalSubGhzPresetIDLE,
    FuriHalSubGhzPresetOok270Async,
    FuriHalSubGhzPresetOok650Async,
    FuriHalSubGhzPreset2FSKDev238Async,
    FuriHalSubGhzPreset2FSKDev476Async,
    FuriHalSubGhzPresetMSK99_97KbAsync,
    FuriHalSubGhzPresetGFSK9_99KbAsync,
    FuriHalSubGhzPresetCustom,
} FuriHalSubGhzPreset;
typedef enum {
    FuriHalSubGhzPathIsolate,
    FuriHalSubGhzPath433,
    FuriHalSubGhzPath315,
    FuriHalSubGhzPath868,
} FuriHalSubGhzPath;
typedef enum {
    SubGhzStateInit,
    SubGhzStateIdle,
    SubGhzStateAsyncRx,
    SubGhzStateAsyncTx,
    SubGhzStateAsyncTxLast,
    SubGhzStateAsyncTxEnd,
} SubGhzState;
typedef enum {
    SubGhzRegulationOnlyRx,
    SubGhzRegulationTxRx,
} SubGhzRegulation;
void furi_hal_subghz_set_async_mirror_pin(const GpioPin* pin);
void furi_hal_subghz_init();
void furi_hal_subghz_sleep();
void furi_hal_subghz_dump_state();
void furi_hal_subghz_load_preset(FuriHalSubGhzPreset preset);
void furi_hal_subghz_load_custom_preset(uint8_t* preset_data);
void furi_hal_subghz_load_registers(uint8_t* data);
void furi_hal_subghz_load_patable(const uint8_t data[8]);
void furi_hal_subghz_write_packet(const uint8_t* data, uint8_t size);
_Bool furi_hal_subghz_rx_pipe_not_empty();
_Bool furi_hal_subghz_is_rx_data_crc_valid();
void furi_hal_subghz_read_packet(uint8_t* data, uint8_t* size);
void furi_hal_subghz_flush_rx();
void furi_hal_subghz_flush_tx();
void furi_hal_subghz_shutdown();
void furi_hal_subghz_reset();
void furi_hal_subghz_idle();
void furi_hal_subghz_rx();
_Bool furi_hal_subghz_tx();
float furi_hal_subghz_get_rssi();
uint8_t furi_hal_subghz_get_lqi();
_Bool furi_hal_subghz_is_frequency_valid(uint32_t value);
uint32_t furi_hal_subghz_set_frequency_and_path(uint32_t value);
_Bool furi_hal_subghz_is_tx_allowed(uint32_t value);
uint32_t furi_hal_subghz_set_frequency(uint32_t value);
void furi_hal_subghz_set_path(FuriHalSubGhzPath path);
typedef void (*FuriHalSubGhzCaptureCallback)(_Bool level, uint32_t duration, void* context);
void furi_hal_subghz_start_async_rx(FuriHalSubGhzCaptureCallback callback, void* context);
void furi_hal_subghz_stop_async_rx();
typedef LevelDuration (*FuriHalSubGhzAsyncTxCallback)(void* context);
_Bool furi_hal_subghz_start_async_tx(FuriHalSubGhzAsyncTxCallback callback, void* context);
_Bool furi_hal_subghz_is_async_tx_complete();
void furi_hal_subghz_stop_async_tx();
       
void furi_hal_vibro_init();
void furi_hal_vibro_on(_Bool value);
       
typedef void (*FuriHalIbuttonEmulateCallback)(void* context);
void furi_hal_ibutton_init();
void furi_hal_ibutton_emulate_start(
    uint32_t period,
    FuriHalIbuttonEmulateCallback callback,
    void* context);
void furi_hal_ibutton_emulate_set_next(uint32_t period);
void furi_hal_ibutton_emulate_stop();
void furi_hal_ibutton_start_drive();
void furi_hal_ibutton_start_drive_in_isr();
void furi_hal_ibutton_start_interrupt();
void furi_hal_ibutton_start_interrupt_in_isr();
void furi_hal_ibutton_stop();
void furi_hal_ibutton_add_interrupt(GpioExtiCallback cb, void* context);
void furi_hal_ibutton_remove_interrupt();
void furi_hal_ibutton_pin_low();
void furi_hal_ibutton_pin_high();
_Bool furi_hal_ibutton_pin_get_level();
       
void furi_hal_rfid_init();
void furi_hal_rfid_pins_reset();
void furi_hal_rfid_pins_emulate();
void furi_hal_rfid_pins_read();
void furi_hal_rfid_pin_pull_release();
void furi_hal_rfid_pin_pull_pulldown();
void furi_hal_rfid_tim_read(float freq, float duty_cycle);
void furi_hal_rfid_tim_read_start();
void furi_hal_rfid_tim_read_stop();
void furi_hal_rfid_tim_emulate(float freq);
typedef void (*FuriHalRfidEmulateCallback)(void* context);
void furi_hal_rfid_tim_emulate_start(FuriHalRfidEmulateCallback callback, void* context);
typedef void (*FuriHalRfidReadCaptureCallback)(_Bool level, uint32_t duration, void* context);
void furi_hal_rfid_tim_read_capture_start(FuriHalRfidReadCaptureCallback callback, void* context);
void furi_hal_rfid_tim_read_capture_stop();
typedef void (*FuriHalRfidDMACallback)(_Bool half, void* context);
void furi_hal_rfid_tim_emulate_dma_start(
    uint32_t* duration,
    uint32_t* pulse,
    size_t length,
    FuriHalRfidDMACallback callback,
    void* context);
void furi_hal_rfid_tim_emulate_dma_stop();
void furi_hal_rfid_tim_emulate_stop();
void furi_hal_rfid_tim_reset();
void furi_hal_rfid_set_emulate_period(uint32_t period);
void furi_hal_rfid_set_emulate_pulse(uint32_t pulse);
void furi_hal_rfid_set_read_period(uint32_t period);
void furi_hal_rfid_set_read_pulse(uint32_t pulse);
void furi_hal_rfid_change_read_config(float freq, float duty_cycle);
void furi_hal_rfid_comp_start();
void furi_hal_rfid_comp_stop();
typedef void (*FuriHalRfidCompCallback)(_Bool level, void* context);
void furi_hal_rfid_comp_set_callback(FuriHalRfidCompCallback callback, void* context);
       
#define ST_ERRNO_H 
typedef uint16_t ReturnCode;
enum {
    ERR_NONE = 0,
    ERR_NOMEM = 1,
    ERR_BUSY = 2,
    ERR_IO = 3,
    ERR_TIMEOUT = 4,
    ERR_REQUEST = 5,
    ERR_NOMSG = 6,
    ERR_PARAM = 7,
    ERR_SYSTEM = 8,
    ERR_FRAMING = 9,
    ERR_OVERRUN = 10,
    ERR_PROTO = 11,
    ERR_INTERNAL = 12,
    ERR_AGAIN = 13,
    ERR_MEM_CORRUPT = 14,
    ERR_NOT_IMPLEMENTED = 15,
    ERR_PC_CORRUPT =
        16,
    ERR_SEND = 17,
    ERR_IGNORE = 18,
    ERR_SEMANTIC = 19,
    ERR_SYNTAX = 20,
    ERR_CRC = 21,
    ERR_NOTFOUND = 22,
    ERR_NOTUNIQUE = 23,
    ERR_NOTSUPP = 24,
    ERR_WRITE = 25,
    ERR_FIFO = 26,
    ERR_PAR = 27,
    ERR_DONE = 28,
    ERR_RF_COLLISION =
        29,
    ERR_HW_OVERRUN = 30,
    ERR_RELEASE_REQ = 31,
    ERR_SLEEP_REQ = 32,
    ERR_WRONG_STATE = 33,
    ERR_MAX_RERUNS = 34,
    ERR_DISABLED = 35,
    ERR_HW_MISMATCH = 36,
    ERR_LINK_LOSS =
        37,
    ERR_INVALID_HANDLE = 38,
    ERR_INCOMPLETE_BYTE = 40,
    ERR_INCOMPLETE_BYTE_01 = 41,
    ERR_INCOMPLETE_BYTE_02 = 42,
    ERR_INCOMPLETE_BYTE_03 = 43,
    ERR_INCOMPLETE_BYTE_04 = 44,
    ERR_INCOMPLETE_BYTE_05 = 45,
    ERR_INCOMPLETE_BYTE_06 = 46,
    ERR_INCOMPLETE_BYTE_07 = 47,
};
#define ERR_GENERIC_GRP (0x0000)
#define ERR_WARN_GRP (0x0100)
#define ERR_PROCESS_GRP (0x0200)
#define ERR_SIO_GRP (0x0800)
#define ERR_RINGBUF_GRP (0x0900)
#define ERR_MQ_GRP (0x0A00)
#define ERR_TIMER_GRP (0x0B00)
#define ERR_RFAL_GRP (0x0C00)
#define ERR_UART_GRP (0x0D00)
#define ERR_SPI_GRP (0x0E00)
#define ERR_I2C_GRP (0x0F00)
#define ERR_INSERT_SIO_GRP(x) (ERR_SIO_GRP | x)
#define ERR_INSERT_RINGBUF_GRP(x) (ERR_RINGBUF_GRP | x)
#define ERR_INSERT_RFAL_GRP(x) (ERR_RFAL_GRP | x)
#define ERR_INSERT_SPI_GRP(x) (ERR_SPI_GRP | x)
#define ERR_INSERT_I2C_GRP(x) (ERR_I2C_GRP | x)
#define ERR_INSERT_UART_GRP(x) (ERR_UART_GRP | x)
#define ERR_INSERT_TIMER_GRP(x) (ERR_TIMER_GRP | x)
#define ERR_INSERT_MQ_GRP(x) (ERR_MQ_GRP | x)
#define ERR_INSERT_PROCESS_GRP(x) (ERR_PROCESS_GRP | x)
#define ERR_INSERT_WARN_GRP(x) (ERR_WARN_GRP | x)
#define ERR_INSERT_GENERIC_GRP(x) (ERR_GENERIC_GRP | x)
#define ERR_NO_MASK(x) (x & 0x00FF)
#define EXIT_ON_ERR(r,f) if(ERR_NONE != (r = f)) { return r; }
#define RFAL_NFC_H 
       
       
#define timerIsRunning(t) (!timerIsExpired(t))
uint32_t timerCalculateTimer(uint16_t time);
_Bool timerIsExpired(uint32_t timer);
void timerDelay(uint16_t time);
void timerStopwatchStart(void);
uint32_t timerStopwatchMeasure(void);
#define _MATH_H_ 

#define _M_LN2 0.693147180559945309417
#define HUGE_VAL (__builtin_huge_val())
#define HUGE_VALF (__builtin_huge_valf())
#define HUGE_VALL (__builtin_huge_vall())
#define INFINITY (__builtin_inff())
#define NAN (__builtin_nanf(""))
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);
extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);
extern int finite (double);
extern int finitef (float);
extern int finitel (long double);
extern int isinff (float);
extern int isnanf (float);
extern int isinf (double);
extern int isnan (double);
#define FLT_EVAL_METHOD __FLT_EVAL_METHOD__
#define __TMP_FLT_EVAL_METHOD 
    typedef float float_t;
    typedef double double_t;
#undef FLT_EVAL_METHOD
#define FP_NAN 0
#define FP_INFINITE 1
#define FP_ZERO 2
#define FP_SUBNORMAL 3
#define FP_NORMAL 4
#define FP_ILOGB0 (-__INT_MAX__)
#define FP_ILOGBNAN __INT_MAX__
#define MATH_ERRNO 1
#define MATH_ERREXCEPT 2
#define _MATH_ERRHANDLING_ERRNO MATH_ERRNO
#define _MATH_ERRHANDLING_ERREXCEPT MATH_ERREXCEPT
#define math_errhandling (_MATH_ERRHANDLING_ERRNO | _MATH_ERRHANDLING_ERREXCEPT)
extern int __isinff (float);
extern int __isinfd (double);
extern int __isnanf (float);
extern int __isnand (double);
extern int __fpclassifyf (float);
extern int __fpclassifyd (double);
extern int __signbitf (float);
extern int __signbitd (double);
#define fpclassify(__x) (__builtin_fpclassify (FP_NAN, FP_INFINITE, FP_NORMAL, FP_SUBNORMAL, FP_ZERO, __x))
#define isfinite(__x) (__builtin_isfinite (__x))
#define isinf(__x) (__builtin_isinf_sign (__x))
#define isnan(__x) (__builtin_isnan (__x))
#define isnormal(__x) (__builtin_isnormal (__x))
#define signbit(__x) ((sizeof(__x) == sizeof(float)) ? __builtin_signbitf(__x) : (sizeof(__x) == sizeof(double)) ? __builtin_signbit (__x) : __builtin_signbitl(__x))
#define isgreater(__x,__y) (__builtin_isgreater (__x, __y))
#define isgreaterequal(__x,__y) (__builtin_isgreaterequal (__x, __y))
#define isless(__x,__y) (__builtin_isless (__x, __y))
#define islessequal(__x,__y) (__builtin_islessequal (__x, __y))
#define islessgreater(__x,__y) (__builtin_islessgreater (__x, __y))
#define isunordered(__x,__y) (__builtin_isunordered (__x, __y))
extern double infinity (void);
extern double nan (const char *);
extern double copysign (double, double);
extern double logb (double);
extern int ilogb (double);
extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);
extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern long long int llrint (double);
extern double round (double);
extern long int lround (double);
extern long long int llround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);
extern double log1p (double);
extern double expm1 (double);
extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double lgamma (double);
extern double erf (double);
extern double erfc (double);
extern double log2 (double);
#define log2(x) (log (x) / _M_LN2)
extern double hypot (double, double);
extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);
extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);
extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern long long int llrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern long long int llroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);
extern float infinityf (void);
extern float nanf (const char *);
extern float copysignf (float, float);
extern float logbf (float);
extern int ilogbf (float);
extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);
extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float lgammaf (float);
extern float erff (float);
extern float erfcf (float);
extern float log2f (float);
extern float hypotf (float, float);
extern long double atanl (long double);
extern long double cosl (long double);
extern long double sinl (long double);
extern long double tanl (long double);
extern long double tanhl (long double);
extern long double frexpl (long double, int *);
extern long double modfl (long double, long double *);
extern long double ceill (long double);
extern long double fabsl (long double);
extern long double floorl (long double);
extern long double log1pl (long double);
extern long double expm1l (long double);
extern long double acosl (long double);
extern long double asinl (long double);
extern long double atan2l (long double, long double);
extern long double coshl (long double);
extern long double sinhl (long double);
extern long double expl (long double);
extern long double ldexpl (long double, int);
extern long double logl (long double);
extern long double log10l (long double);
extern long double powl (long double, long double);
extern long double sqrtl (long double);
extern long double fmodl (long double, long double);
extern long double hypotl (long double, long double);
extern long double copysignl (long double, long double);
extern long double nanl (const char *);
extern int ilogbl (long double);
extern long double asinhl (long double);
extern long double cbrtl (long double);
extern long double nextafterl (long double, long double);
extern float nexttowardf (float, long double);
extern double nexttoward (double, long double);
extern long double nexttowardl (long double, long double);
extern long double logbl (long double);
extern long double log2l (long double);
extern long double rintl (long double);
extern long double scalbnl (long double, int);
extern long double exp2l (long double);
extern long double scalblnl (long double, long);
extern long double tgammal (long double);
extern long double nearbyintl (long double);
extern long int lrintl (long double);
extern long long int llrintl (long double);
extern long double roundl (long double);
extern long lroundl (long double);
extern long long int llroundl (long double);
extern long double truncl (long double);
extern long double remquol (long double, long double, int *);
extern long double fdiml (long double, long double);
extern long double fmaxl (long double, long double);
extern long double fminl (long double, long double);
extern long double fmal (long double, long double, long double);
extern long double acoshl (long double);
extern long double atanhl (long double);
extern long double remainderl (long double, long double);
extern long double lgammal (long double);
extern long double erfl (long double);
extern long double erfcl (long double);
extern double drem (double, double);
extern float dremf (float, float);
extern double gamma_r (double, int *);
extern double lgamma_r (double, int *);
extern float gammaf_r (float, int *);
extern float lgammaf_r (float, int *);
extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);
extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);
extern void sincos (double, double *, double *);
extern void sincosf (float, float *, float *);
extern double exp10 (double);
extern double pow10 (double);
extern float exp10f (float);
extern float pow10f (float);
#define signgam (*__signgam())
extern int *__signgam (void);
#define __signgam_r(ptr) _REENT_SIGNGAM(ptr)
#define MAXFLOAT 3.40282347e+38F
#define M_E 2.7182818284590452354
#define M_LOG2E 1.4426950408889634074
#define M_LOG10E 0.43429448190325182765
#define M_LN2 _M_LN2
#define M_LN10 2.30258509299404568402
#define M_PI 3.14159265358979323846
#define M_PI_2 1.57079632679489661923
#define M_PI_4 0.78539816339744830962
#define M_1_PI 0.31830988618379067154
#define M_2_PI 0.63661977236758134308
#define M_2_SQRTPI 1.12837916709551257390
#define M_SQRT2 1.41421356237309504880
#define M_SQRT1_2 0.70710678118654752440
#define M_TWOPI (M_PI * 2.0)
#define M_3PI_4 2.3561944901923448370E0
#define M_SQRTPI 1.77245385090551602792981
#define M_LN2LO 1.9082149292705877000E-10
#define M_LN2HI 6.9314718036912381649E-1
#define M_SQRT3 1.73205080756887719000
#define M_IVLN10 0.43429448190325182765
#define M_LOG2_E _M_LN2
#define M_INVLN2 1.4426950408889633870E0

typedef void (*PlatformIrqCallback)();
void platformSetIrqCallback(PlatformIrqCallback cb);
void platformEnableIrqCallback();
void platformDisableIrqCallback();
_Bool platformSpiTxRx(const uint8_t* txBuf, uint8_t* rxBuf, uint16_t len);
void platformProtectST25RComm();
void platformUnprotectST25RComm();
void rfal_platform_spi_acquire();
void rfal_platform_spi_release();
#define ST25R_SS_PIN NFC_CS_Pin
#define ST25R_SS_PORT NFC_CS_GPIO_Port
#define ST25R_INT_PIN NFC_IRQ_Pin
#define ST25R_INT_PORT NFC_IRQ_GPIO_Port
#define RFAL_ANALOG_CONFIG_CUSTOM true
#define RFAL_FEATURE_LISTEN_MODE true
#define RFAL_FEATURE_WAKEUP_MODE true
#define RFAL_FEATURE_LOWPOWER_MODE true
#define RFAL_FEATURE_NFCA true
#define RFAL_FEATURE_NFCB true
#define RFAL_FEATURE_NFCF true
#define RFAL_FEATURE_NFCV true
#define RFAL_FEATURE_T1T true
#define RFAL_FEATURE_T2T true
#define RFAL_FEATURE_T4T true
#define RFAL_FEATURE_ST25TB true
#define RFAL_FEATURE_ST25xV true
#define RFAL_FEATURE_DYNAMIC_ANALOG_CONFIG false
#define RFAL_FEATURE_DPO false
#define RFAL_FEATURE_ISO_DEP true
#define RFAL_FEATURE_ISO_DEP_POLL true
#define RFAL_FEATURE_ISO_DEP_LISTEN true
#define RFAL_FEATURE_NFC_DEP true
#define RFAL_FEATURE_ISO_DEP_IBLOCK_MAX_LEN 256U
#define RFAL_FEATURE_NFC_DEP_BLOCK_MAX_LEN 254U
#define RFAL_FEATURE_NFC_RF_BUF_LEN 256U
#define RFAL_FEATURE_ISO_DEP_APDU_MAX_LEN 512U
#define RFAL_FEATURE_NFC_DEP_PDU_MAX_LEN 512U
#define platformIrqST25RSetCallback(cb) platformSetIrqCallback(cb)
#define platformProtectST25RIrqStatus() platformProtectST25RComm()
#define platformUnprotectST25RIrqStatus() platformUnprotectST25RComm()
#define platformGpioSet(port,pin) furi_hal_gpio_write_port_pin( port, pin, true)
#define platformGpioClear(port,pin) furi_hal_gpio_write_port_pin( port, pin, false)
#define platformGpioIsHigh(port,pin) (furi_hal_gpio_read_port_pin(port, pin) == true)
#define platformGpioIsLow(port,pin) (!platformGpioIsHigh(port, pin))
#define platformTimerCreate(t) timerCalculateTimer(t)
#define platformTimerIsExpired(timer) timerIsExpired(timer)
#define platformDelay(t) furi_delay_ms(t)
#define platformGetSysTick() furi_get_tick()
#define platformAssert(exp) assert_param(exp)
#define platformSpiSelect() platformGpioClear( ST25R_SS_PORT, ST25R_SS_PIN)
#define platformSpiDeselect() platformGpioSet( ST25R_SS_PORT, ST25R_SS_PIN)
#define platformI2CTx(txBuf,len,last,txOnly) 
#define platformI2CRx(txBuf,len) 
#define platformI2CStart() 
#define platformI2CStop() 
#define platformI2CRepeatStart() 
#define platformI2CSlaveAddrWR(add) 
#define platformI2CSlaveAddrRD(add) 
#define platformLog(...) 
#define platformProtectWorker() 
#define platformUnprotectWorker() 
#define platformIrqST25RPinInitialize() 
#define platformLedsInitialize() 
#define platformLedOff(port,pin) 
#define platformLedOn(port,pin) 
#define platformLedToogle(port,pin) 
#define platformTimerDestroy(timer) 
#define platformErrorHandle() 
#define RFAL_RF_H 
#define RFAL_FEATURES_H 
#define RFAL_SUPPORT_MODE_POLL_NFCA true
#define RFAL_SUPPORT_MODE_POLL_NFCB true
#define RFAL_SUPPORT_MODE_POLL_NFCF true
#define RFAL_SUPPORT_MODE_POLL_NFCV true
#define RFAL_SUPPORT_MODE_POLL_ACTIVE_P2P true
#define RFAL_SUPPORT_MODE_LISTEN_NFCA true
#define RFAL_SUPPORT_MODE_LISTEN_NFCB false
#define RFAL_SUPPORT_MODE_LISTEN_NFCF true
#define RFAL_SUPPORT_MODE_LISTEN_ACTIVE_P2P true
#define RFAL_SUPPORT_CE (RFAL_SUPPORT_MODE_LISTEN_NFCA || RFAL_SUPPORT_MODE_LISTEN_NFCB || RFAL_SUPPORT_MODE_LISTEN_NFCF)
#define RFAL_SUPPORT_RW (RFAL_SUPPORT_MODE_POLL_NFCA || RFAL_SUPPORT_MODE_POLL_NFCB || RFAL_SUPPORT_MODE_POLL_NFCF || RFAL_SUPPORT_MODE_POLL_NFCV)
#define RFAL_SUPPORT_AP2P (RFAL_SUPPORT_MODE_POLL_ACTIVE_P2P || RFAL_SUPPORT_MODE_LISTEN_ACTIVE_P2P)
#define RFAL_SUPPORT_BR_RW_106 true
#define RFAL_SUPPORT_BR_RW_212 true
#define RFAL_SUPPORT_BR_RW_424 true
#define RFAL_SUPPORT_BR_RW_848 true
#define RFAL_SUPPORT_BR_RW_1695 false
#define RFAL_SUPPORT_BR_RW_3390 false
#define RFAL_SUPPORT_BR_RW_6780 false
#define RFAL_SUPPORT_BR_RW_13560 false
#define RFAL_SUPPORT_BR_AP2P_106 true
#define RFAL_SUPPORT_BR_AP2P_212 true
#define RFAL_SUPPORT_BR_AP2P_424 true
#define RFAL_SUPPORT_BR_AP2P_848 false
#define RFAL_SUPPORT_BR_CE_A_106 true
#define RFAL_SUPPORT_BR_CE_A_212 false
#define RFAL_SUPPORT_BR_CE_A_424 false
#define RFAL_SUPPORT_BR_CE_A_848 false
#define RFAL_SUPPORT_BR_CE_B_106 false
#define RFAL_SUPPORT_BR_CE_B_212 false
#define RFAL_SUPPORT_BR_CE_B_424 false
#define RFAL_SUPPORT_BR_CE_B_848 false
#define RFAL_SUPPORT_BR_CE_F_212 true
#define RFAL_SUPPORT_BR_CE_F_424 true
#define RFAL_VERSION 0x020200U
#define RFAL_FWT_NONE 0xFFFFFFFFU
#define RFAL_GT_NONE RFAL_TIMING_NONE
#define RFAL_TIMING_NONE 0x00U
#define RFAL_1FC_IN_4096FC (uint32_t)4096U
#define RFAL_1FC_IN_512FC (uint32_t)512U
#define RFAL_1FC_IN_64FC (uint32_t)64U
#define RFAL_1FC_IN_8FC (uint32_t)8U
#define RFAL_US_IN_MS (uint32_t)1000U
#define RFAL_1MS_IN_1FC (uint32_t)13560U
#define RFAL_BITS_IN_BYTE (uint16_t)8U
#define RFAL_CRC_LEN 2U
#define RFAL_TXRX_FLAGS_DEFAULT ((uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_REMV | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF | (uint32_t)RFAL_TXRX_FLAGS_AGC_ON | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_REMV | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_AUTO | (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO)
#define RFAL_TXRX_FLAGS_RAW ((uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_NFCIP1_OFF | (uint32_t)RFAL_TXRX_FLAGS_AGC_ON | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE | (uint32_t)RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO)
#define RFAL_LM_MASK_NFCA ((uint32_t)1U << (uint8_t)RFAL_MODE_LISTEN_NFCA)
#define RFAL_LM_MASK_NFCB ((uint32_t)1U << (uint8_t)RFAL_MODE_LISTEN_NFCB)
#define RFAL_LM_MASK_NFCF ((uint32_t)1U << (uint8_t)RFAL_MODE_LISTEN_NFCF)
#define RFAL_LM_MASK_ACTIVE_P2P ((uint32_t)1U << (uint8_t)RFAL_MODE_LISTEN_ACTIVE_P2P)
#define RFAL_LM_SENS_RES_LEN 2U
#define RFAL_LM_SENSB_RES_LEN 13U
#define RFAL_LM_SENSF_RES_LEN 19U
#define RFAL_LM_SENSF_SC_LEN 2U
#define RFAL_NFCID3_LEN 10U
#define RFAL_NFCID2_LEN 8U
#define RFAL_NFCID1_TRIPLE_LEN 10U
#define RFAL_NFCID1_DOUBLE_LEN 7U
#define RFAL_NFCID1_SINGLE_LEN 4U
#define rfalGetMaxBrRW() (((RFAL_SUPPORT_BR_RW_6780) ? RFAL_BR_6780 : ((RFAL_SUPPORT_BR_RW_3390) ? RFAL_BR_3390 : ((RFAL_SUPPORT_BR_RW_1695) ? RFAL_BR_1695 : ((RFAL_SUPPORT_BR_RW_848) ? RFAL_BR_848 : ((RFAL_SUPPORT_BR_RW_424) ? RFAL_BR_424 : ((RFAL_SUPPORT_BR_RW_212) ? RFAL_BR_212 : RFAL_BR_106)))))))
#define rfalGetMaxBrAP2P() (((RFAL_SUPPORT_BR_AP2P_848) ? RFAL_BR_848 : ((RFAL_SUPPORT_BR_AP2P_424) ? RFAL_BR_424 : ((RFAL_SUPPORT_BR_AP2P_212) ? RFAL_BR_212 : RFAL_BR_106))))
#define rfalGetMaxBrCEA() (((RFAL_SUPPORT_BR_CE_A_848) ? RFAL_BR_848 : ((RFAL_SUPPORT_BR_CE_A_424) ? RFAL_BR_424 : ((RFAL_SUPPORT_BR_CE_A_212) ? RFAL_BR_212 : RFAL_BR_106))))
#define rfalGetMaxBrCEB() (((RFAL_SUPPORT_BR_CE_B_848) ? RFAL_BR_848 : ((RFAL_SUPPORT_BR_CE_B_424) ? RFAL_BR_424 : ((RFAL_SUPPORT_BR_CE_B_212) ? RFAL_BR_212 : RFAL_BR_106))))
#define rfalGetMaxBrCEF() (((RFAL_SUPPORT_BR_CE_F_424) ? RFAL_BR_424 : RFAL_BR_212))
#define rfalIsModeActiveComm(md) (((md) == RFAL_MODE_POLL_ACTIVE_P2P) || ((md) == RFAL_MODE_LISTEN_ACTIVE_P2P))
#define rfalIsModePassiveComm(md) (!rfalIsModeActiveComm(md))
#define rfalIsModePassiveListen(md) (((md) == RFAL_MODE_LISTEN_NFCA) || ((md) == RFAL_MODE_LISTEN_NFCB) || ((md) == RFAL_MODE_LISTEN_NFCF))
#define rfalIsModePassivePoll(md) (rfalIsModePassiveComm(md) && !rfalIsModePassiveListen(md))
#define rfalConv1fcTo8fc(t) (uint32_t)((uint32_t)(t) / RFAL_1FC_IN_8FC)
#define rfalConv8fcTo1fc(t) (uint32_t)((uint32_t)(t)*RFAL_1FC_IN_8FC)
#define rfalConv1fcTo64fc(t) (uint32_t)((uint32_t)(t) / RFAL_1FC_IN_64FC)
#define rfalConv64fcTo1fc(t) (uint32_t)((uint32_t)(t)*RFAL_1FC_IN_64FC)
#define rfalConv1fcTo512fc(t) (uint32_t)( (uint32_t)(t) / RFAL_1FC_IN_512FC)
#define rfalConv512fcTo1fc(t) (uint32_t)((uint32_t)(t)*RFAL_1FC_IN_512FC)
#define rfalConv1fcTo4096fc(t) (uint32_t)( (uint32_t)(t) / RFAL_1FC_IN_4096FC)
#define rfalConv4096fcTo1fc(t) (uint32_t)((uint32_t)(t)*RFAL_1FC_IN_4096FC)
#define rfalConv1fcToMs(t) (uint32_t)((uint32_t)(t) / RFAL_1MS_IN_1FC)
#define rfalConvMsTo1fc(t) (uint32_t)((uint32_t)(t)*RFAL_1MS_IN_1FC)
#define rfalConv1fcToUs(t) (uint32_t)( ((uint32_t)(t)*RFAL_US_IN_MS) / RFAL_1MS_IN_1FC)
#define rfalConvUsTo1fc(t) (uint32_t)( ((uint32_t)(t)*RFAL_1MS_IN_1FC) / RFAL_US_IN_MS)
#define rfalConv64fcToMs(t) (uint32_t)( (uint32_t)(t) / (RFAL_1MS_IN_1FC / RFAL_1FC_IN_64FC))
#define rfalConvMsTo64fc(t) (uint32_t)( (uint32_t)(t) * (RFAL_1MS_IN_1FC / RFAL_1FC_IN_64FC))
#define rfalConvBitsToBytes(n) (uint16_t)( ((uint16_t)(n) + (RFAL_BITS_IN_BYTE - 1U)) / (RFAL_BITS_IN_BYTE))
#define rfalConvBytesToBits(n) (uint32_t)( (uint32_t)(n) * (RFAL_BITS_IN_BYTE))
#define rfalCreateByteTxRxContext(ctx,tB,tBL,rB,rBL,rdL,t) (ctx).txBuf = (uint8_t*)(tB); (ctx).txBufLen = (uint16_t)rfalConvBytesToBits(tBL); (ctx).rxBuf = (uint8_t*)(rB); (ctx).rxBufLen = (uint16_t)rfalConvBytesToBits(rBL); (ctx).rxRcvdLen = (uint16_t*)(rdL); (ctx).flags = (uint32_t)RFAL_TXRX_FLAGS_DEFAULT; (ctx).fwt = (uint32_t)(t);
#define rfalCreateByteFlagsTxRxContext(ctx,tB,tBL,rB,rBL,rdL,fl,t) (ctx).txBuf = (uint8_t*)(tB); (ctx).txBufLen = (uint16_t)rfalConvBytesToBits(tBL); (ctx).rxBuf = (uint8_t*)(rB); (ctx).rxBufLen = (uint16_t)rfalConvBytesToBits(rBL); (ctx).rxRcvdLen = (uint16_t*)(rdL); (ctx).flags = (uint32_t)(fl); (ctx).fwt = (uint32_t)(t);
#define rfalLogE(...) platformLog(__VA_ARGS__)
#define rfalLogW(...) platformLog(__VA_ARGS__)
#define rfalLogI(...) platformLog(__VA_ARGS__)
#define rfalLogD(...) platformLog(__VA_ARGS__)
#define RFAL_GT_NFCA rfalConvMsTo1fc( 5U)
#define RFAL_GT_NFCB rfalConvMsTo1fc( 5U)
#define RFAL_GT_NFCF rfalConvMsTo1fc( 20U)
#define RFAL_GT_NFCV rfalConvMsTo1fc( 5U)
#define RFAL_GT_PICOPASS rfalConvMsTo1fc( 1U)
#define RFAL_GT_AP2P rfalConvMsTo1fc( 5U)
#define RFAL_GT_AP2P_ADJUSTED rfalConvMsTo1fc( 5U + 25U)
#define RFAL_FDT_LISTEN_NFCA_POLLER 1172U
#define RFAL_FDT_LISTEN_NFCB_POLLER 1008U
#define RFAL_FDT_LISTEN_NFCF_POLLER 2672U
#define RFAL_FDT_LISTEN_NFCV_POLLER 4310U
#define RFAL_FDT_LISTEN_PICOPASS_POLLER 3400U
#define RFAL_FDT_LISTEN_AP2P_POLLER 64U
#define RFAL_FDT_LISTEN_NFCA_LISTENER 1172U
#define RFAL_FDT_LISTEN_NFCB_LISTENER 1024U
#define RFAL_FDT_LISTEN_NFCF_LISTENER 2688U
#define RFAL_FDT_LISTEN_AP2P_LISTENER 64U
#define RFAL_FDT_POLL_NFCA_POLLER 6780U
#define RFAL_FDT_POLL_NFCA_T1T_POLLER 384U
#define RFAL_FDT_POLL_NFCB_POLLER 6780U
#define RFAL_FDT_POLL_NFCF_POLLER 6800U
#define RFAL_FDT_POLL_NFCV_POLLER 4192U
#define RFAL_FDT_POLL_PICOPASS_POLLER 1790U
#define RFAL_FDT_POLL_AP2P_POLLER 0U
typedef enum {
    RFAL_MODE_NONE = 0,
    RFAL_MODE_POLL_NFCA =
        1,
    RFAL_MODE_POLL_NFCA_T1T =
        2,
    RFAL_MODE_POLL_NFCB =
        3,
    RFAL_MODE_POLL_B_PRIME =
        4,
    RFAL_MODE_POLL_B_CTS =
        5,
    RFAL_MODE_POLL_NFCF =
        6,
    RFAL_MODE_POLL_NFCV =
        7,
    RFAL_MODE_POLL_PICOPASS =
        8,
    RFAL_MODE_POLL_ACTIVE_P2P =
        9,
    RFAL_MODE_LISTEN_NFCA =
        10,
    RFAL_MODE_LISTEN_NFCB =
        11,
    RFAL_MODE_LISTEN_NFCF =
        12,
    RFAL_MODE_LISTEN_ACTIVE_P2P =
        13
} rfalMode;
typedef enum {
    RFAL_BR_106 = 0,
    RFAL_BR_212 = 1,
    RFAL_BR_424 = 2,
    RFAL_BR_848 = 3,
    RFAL_BR_1695 = 4,
    RFAL_BR_3390 = 5,
    RFAL_BR_6780 = 6,
    RFAL_BR_13560 = 7,
    RFAL_BR_52p97 = 0xEB,
    RFAL_BR_26p48 = 0xEC,
    RFAL_BR_1p66 = 0xED,
    RFAL_BR_KEEP = 0xFF
} rfalBitRate;
typedef enum {
    RFAL_COMPLIANCE_MODE_NFC,
    RFAL_COMPLIANCE_MODE_EMV,
    RFAL_COMPLIANCE_MODE_ISO
} rfalComplianceMode;
typedef enum {
    RFAL_STATE_IDLE = 0,
    RFAL_STATE_INIT = 1,
    RFAL_STATE_MODE_SET = 2,
    RFAL_STATE_TXRX = 3,
    RFAL_STATE_LM = 4,
    RFAL_STATE_WUM = 5
} rfalState;
typedef enum {
    RFAL_TXRX_STATE_IDLE = 0,
    RFAL_TXRX_STATE_INIT = 1,
    RFAL_TXRX_STATE_START = 2,
    RFAL_TXRX_STATE_TX_IDLE = 11,
    RFAL_TXRX_STATE_TX_WAIT_GT = 12,
    RFAL_TXRX_STATE_TX_WAIT_FDT = 13,
    RFAL_TXRX_STATE_TX_TRANSMIT = 14,
    RFAL_TXRX_STATE_TX_WAIT_WL = 15,
    RFAL_TXRX_STATE_TX_RELOAD_FIFO = 16,
    RFAL_TXRX_STATE_TX_WAIT_TXE = 17,
    RFAL_TXRX_STATE_TX_DONE = 18,
    RFAL_TXRX_STATE_TX_FAIL = 19,
    RFAL_TXRX_STATE_RX_IDLE = 81,
    RFAL_TXRX_STATE_RX_WAIT_EON = 82,
    RFAL_TXRX_STATE_RX_WAIT_RXS = 83,
    RFAL_TXRX_STATE_RX_WAIT_RXE = 84,
    RFAL_TXRX_STATE_RX_READ_FIFO = 85,
    RFAL_TXRX_STATE_RX_ERR_CHECK = 86,
    RFAL_TXRX_STATE_RX_READ_DATA = 87,
    RFAL_TXRX_STATE_RX_WAIT_EOF = 88,
    RFAL_TXRX_STATE_RX_DONE = 89,
    RFAL_TXRX_STATE_RX_FAIL = 90,
} rfalTransceiveState;
enum {
    RFAL_TXRX_FLAGS_CRC_TX_AUTO =
        (0U
         << 0),
    RFAL_TXRX_FLAGS_CRC_TX_MANUAL =
        (1U
         << 0),
    RFAL_TXRX_FLAGS_CRC_RX_KEEP =
        (1U
         << 1),
    RFAL_TXRX_FLAGS_CRC_RX_REMV =
        (0U
         << 1),
    RFAL_TXRX_FLAGS_NFCIP1_ON =
        (1U
         << 2),
    RFAL_TXRX_FLAGS_NFCIP1_OFF =
        (0U
         << 2),
    RFAL_TXRX_FLAGS_AGC_OFF =
        (1U
         << 3),
    RFAL_TXRX_FLAGS_AGC_ON =
        (0U
         << 3),
    RFAL_TXRX_FLAGS_PAR_RX_KEEP =
        (1U
         << 4),
    RFAL_TXRX_FLAGS_PAR_RX_REMV =
        (0U
         << 0),
    RFAL_TXRX_FLAGS_PAR_TX_NONE =
        (1U
         << 5),
    RFAL_TXRX_FLAGS_PAR_TX_AUTO =
        (0U
         << 5),
    RFAL_TXRX_FLAGS_NFCV_FLAG_MANUAL =
        (1U
         << 6),
    RFAL_TXRX_FLAGS_NFCV_FLAG_AUTO =
        (0U
         << 6),
};
typedef enum {
    RFAL_ERRORHANDLING_NONE =
        0,
    RFAL_ERRORHANDLING_NFC =
        1,
    RFAL_ERRORHANDLING_EMVCO =
        2
} rfalEHandling;
typedef struct {
    uint8_t* txBuf;
    uint16_t txBufLen;
    uint8_t* rxBuf;
    uint16_t rxBufLen;
    uint16_t* rxRcvdLen;
    uint32_t flags;
    uint32_t fwt;
} rfalTransceiveContext;
typedef void (*rfalUpperLayerCallback)(void);
typedef void (*rfalPreTxRxCallback)(void* context);
typedef void (*rfalPostTxRxCallback)(void* context);
typedef void (*RfalStateChangedCallback)(void* context);
typedef enum {
    RFAL_14443A_SHORTFRAME_CMD_WUPA = 0x52,
    RFAL_14443A_SHORTFRAME_CMD_REQA = 0x26
} rfal14443AShortFrameCmd;
#define RFAL_FELICA_LEN_LEN 1U
#define RFAL_FELICA_POLL_REQ_LEN (RFAL_FELICA_LEN_LEN + 1U + 2U + 1U + 1U)
#define RFAL_FELICA_POLL_RES_LEN (RFAL_FELICA_LEN_LEN + 1U + 8U + 8U + 2U)
#define RFAL_FELICA_POLL_MAX_SLOTS 16U
enum {
    RFAL_FELICA_POLL_RC_NO_REQUEST =
        0x00,
    RFAL_FELICA_POLL_RC_SYSTEM_CODE =
        0x01,
    RFAL_FELICA_POLL_RC_COM_PERFORMANCE =
        0x02
};
typedef enum {
    RFAL_FELICA_1_SLOT = 0,
    RFAL_FELICA_2_SLOTS = 1,
    RFAL_FELICA_4_SLOTS = 3,
    RFAL_FELICA_8_SLOTS = 7,
    RFAL_FELICA_16_SLOTS = 15
} rfalFeliCaPollSlots;
typedef uint8_t rfalFeliCaPollRes[(1U + 1U + 8U + 8U + 2U)];
typedef enum {
    RFAL_LM_NFCID_LEN_04 = 4U,
    RFAL_LM_NFCID_LEN_07 = 7U,
    RFAL_LM_NFCID_LEN_10 = 10U,
} rfalLmNfcidLen;
typedef enum {
    RFAL_LM_STATE_NOT_INIT = 0x00,
    RFAL_LM_STATE_POWER_OFF = 0x01,
    RFAL_LM_STATE_IDLE = 0x02,
    RFAL_LM_STATE_READY_A = 0x03,
    RFAL_LM_STATE_READY_B = 0x04,
    RFAL_LM_STATE_READY_F = 0x05,
    RFAL_LM_STATE_ACTIVE_A = 0x06,
    RFAL_LM_STATE_CARDEMU_4A = 0x07,
    RFAL_LM_STATE_CARDEMU_4B = 0x08,
    RFAL_LM_STATE_CARDEMU_3 = 0x09,
    RFAL_LM_STATE_TARGET_A = 0x0A,
    RFAL_LM_STATE_TARGET_F = 0x0B,
    RFAL_LM_STATE_SLEEP_A = 0x0C,
    RFAL_LM_STATE_SLEEP_B = 0x0D,
    RFAL_LM_STATE_READY_Ax = 0x0E,
    RFAL_LM_STATE_ACTIVE_Ax = 0x0F,
    RFAL_LM_STATE_SLEEP_AF = 0x10,
} rfalLmState;
typedef struct {
    rfalLmNfcidLen nfcidLen;
    uint8_t nfcid[10U];
    uint8_t SENS_RES[2U];
    uint8_t SEL_RES;
} rfalLmConfPA;
typedef struct {
    uint8_t SENSB_RES[13U];
} rfalLmConfPB;
typedef struct {
    uint8_t SC[2U];
    uint8_t SENSF_RES[19U];
} rfalLmConfPF;
#define RFAL_WUM_REFERENCE_AUTO 0xFFU
typedef enum {
    RFAL_WUM_STATE_NOT_INIT = 0x00,
    RFAL_WUM_STATE_ENABLED = 0x01,
    RFAL_WUM_STATE_ENABLED_WOKE = 0x02,
} rfalWumState;
typedef enum {
    RFAL_WUM_PERIOD_10MS = 0x00,
    RFAL_WUM_PERIOD_20MS = 0x01,
    RFAL_WUM_PERIOD_30MS = 0x02,
    RFAL_WUM_PERIOD_40MS = 0x03,
    RFAL_WUM_PERIOD_50MS = 0x04,
    RFAL_WUM_PERIOD_60MS = 0x05,
    RFAL_WUM_PERIOD_70MS = 0x06,
    RFAL_WUM_PERIOD_80MS = 0x07,
    RFAL_WUM_PERIOD_100MS = 0x10,
    RFAL_WUM_PERIOD_200MS = 0x11,
    RFAL_WUM_PERIOD_300MS = 0x12,
    RFAL_WUM_PERIOD_400MS = 0x13,
    RFAL_WUM_PERIOD_500MS = 0x14,
    RFAL_WUM_PERIOD_600MS = 0x15,
    RFAL_WUM_PERIOD_700MS = 0x16,
    RFAL_WUM_PERIOD_800MS = 0x17,
} rfalWumPeriod;
typedef enum {
    RFAL_WUM_AA_WEIGHT_4 = 0x00,
    RFAL_WUM_AA_WEIGHT_8 = 0x01,
    RFAL_WUM_AA_WEIGHT_16 = 0x02,
    RFAL_WUM_AA_WEIGHT_32 = 0x03,
} rfalWumAAWeight;
typedef struct {
    rfalWumPeriod period;
    _Bool irqTout;
    _Bool swTagDetect;
    struct {
        _Bool enabled;
        uint8_t delta;
        uint16_t reference;
        _Bool autoAvg;
        _Bool aaInclMeas;
        rfalWumAAWeight aaWeight;
    } indAmp;
    struct {
        _Bool enabled;
        uint8_t delta;
        uint16_t reference;
        _Bool autoAvg;
        _Bool aaInclMeas;
        rfalWumAAWeight aaWeight;
    } indPha;
    struct {
        _Bool enabled;
        uint8_t delta;
        uint16_t reference;
        _Bool autoAvg;
        _Bool aaInclMeas;
        rfalWumAAWeight aaWeight;
    } cap;
} rfalWakeUpConfig;
ReturnCode rfalInitialize(void);
ReturnCode rfalCalibrate(void);
ReturnCode rfalAdjustRegulators(uint16_t* result);
void rfalSetUpperLayerCallback(rfalUpperLayerCallback pFunc);
void rfalSetPreTxRxCallback(rfalPreTxRxCallback pFunc);
void rfalSetPostTxRxCallback(rfalPostTxRxCallback pFunc);
void rfal_set_state_changed_callback(RfalStateChangedCallback callback);
void rfal_set_callback_context(void* context);
ReturnCode rfalDeinitialize(void);
ReturnCode rfalSetMode(rfalMode mode, rfalBitRate txBR, rfalBitRate rxBR);
rfalMode rfalGetMode(void);
ReturnCode rfalSetBitRate(rfalBitRate txBR, rfalBitRate rxBR);
ReturnCode rfalGetBitRate(rfalBitRate* txBR, rfalBitRate* rxBR);
void rfalSetErrorHandling(rfalEHandling eHandling);
rfalEHandling rfalGetErrorHandling(void);
void rfalSetObsvMode(uint8_t txMode, uint8_t rxMode);
void rfalGetObsvMode(uint8_t* txMode, uint8_t* rxMode);
void rfalDisableObsvMode(void);
void rfalSetFDTPoll(uint32_t FDTPoll);
uint32_t rfalGetFDTPoll(void);
void rfalSetFDTListen(uint32_t FDTListen);
uint32_t rfalGetFDTListen(void);
uint32_t rfalGetGT(void);
void rfalSetGT(uint32_t GT);
_Bool rfalIsGTExpired(void);
ReturnCode rfalFieldOnAndStartGT(void);
ReturnCode rfalFieldOff(void);
ReturnCode rfalStartTransceive(const rfalTransceiveContext* ctx);
rfalTransceiveState rfalGetTransceiveState(void);
ReturnCode rfalGetTransceiveStatus(void);
_Bool rfalIsTransceiveInTx(void);
_Bool rfalIsTransceiveInRx(void);
ReturnCode rfalGetTransceiveRSSI(uint16_t* rssi);
void rfalWorker(void);
ReturnCode rfalISO14443ATransceiveShortFrame(
    rfal14443AShortFrameCmd txCmd,
    uint8_t* rxBuf,
    uint8_t rxBufLen,
    uint16_t* rxRcvdLen,
    uint32_t fwt);
ReturnCode rfalISO14443ATransceiveAnticollisionFrame(
    uint8_t* buf,
    uint8_t* bytesToSend,
    uint8_t* bitsToSend,
    uint16_t* rxLength,
    uint32_t fwt);
ReturnCode rfalFeliCaPoll(
    rfalFeliCaPollSlots slots,
    uint16_t sysCode,
    uint8_t reqCode,
    rfalFeliCaPollRes* pollResList,
    uint8_t pollResListSize,
    uint8_t* devicesDetected,
    uint8_t* collisionsDetected);
ReturnCode rfalISO15693TransceiveAnticollisionFrame(
    uint8_t* txBuf,
    uint8_t txBufLen,
    uint8_t* rxBuf,
    uint8_t rxBufLen,
    uint16_t* actLen);
ReturnCode
    rfalISO15693TransceiveEOFAnticollision(uint8_t* rxBuf, uint8_t rxBufLen, uint16_t* actLen);
ReturnCode rfalISO15693TransceiveEOF(uint8_t* rxBuf, uint8_t rxBufLen, uint16_t* actLen);
ReturnCode rfalTransceiveBlockingTx(
    uint8_t* txBuf,
    uint16_t txBufLen,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* actLen,
    uint32_t flags,
    uint32_t fwt);
ReturnCode rfalTransceiveBlockingRx(void);
ReturnCode rfalTransceiveBlockingTxRx(
    uint8_t* txBuf,
    uint16_t txBufLen,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* actLen,
    uint32_t flags,
    uint32_t fwt);
ReturnCode rfalTransceiveBitsBlockingTxRx(
    uint8_t* txBuf,
    uint16_t txBufLen,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* actLen,
    uint32_t flags,
    uint32_t fwt);
ReturnCode rfalTransceiveBitsBlockingTx(
    uint8_t* txBuf,
    uint16_t txBufLen,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* actLen,
    uint32_t flags,
    uint32_t fwt);
_Bool rfalIsExtFieldOn(void);
ReturnCode rfalListenStart(
    uint32_t lmMask,
    const rfalLmConfPA* confA,
    const rfalLmConfPB* confB,
    const rfalLmConfPF* confF,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* rxLen);
ReturnCode
    rfalListenSleepStart(rfalLmState sleepSt, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* rxLen);
ReturnCode rfalListenStop(void);
rfalLmState rfalListenGetState(_Bool* dataFlag, rfalBitRate* lastBR);
ReturnCode rfalListenSetState(rfalLmState newSt);
ReturnCode rfalWakeUpModeStart(const rfalWakeUpConfig* config);
_Bool rfalWakeUpModeHasWoke(void);
ReturnCode rfalWakeUpModeStop(void);
ReturnCode rfalLowPowerModeStart(void);
ReturnCode rfalLowPowerModeStop(void);
#define RFAL_NFCA_H 
#define RFAL_T1T_H 
#define RFAL_T1T_UID_LEN 4
#define RFAL_T1T_HR_LENGTH 2
#define RFAL_T1T_HR0_NDEF_MASK 0xF0
#define RFAL_T1T_HR0_NDEF_SUPPORT 0x10
typedef enum {
    RFAL_T1T_CMD_RID = 0x78,
    RFAL_T1T_CMD_RALL = 0x00,
    RFAL_T1T_CMD_READ = 0x01,
    RFAL_T1T_CMD_WRITE_E = 0x53,
    RFAL_T1T_CMD_WRITE_NE = 0x1A
} rfalT1Tcmds;
typedef struct {
    uint8_t hr0;
    uint8_t hr1;
    uint8_t uid[4];
} rfalT1TRidRes;
ReturnCode rfalT1TPollerInitialize(void);
ReturnCode rfalT1TPollerRid(rfalT1TRidRes* ridRes);
ReturnCode
    rfalT1TPollerRall(const uint8_t* uid, uint8_t* rxBuf, uint16_t rxBufLen, uint16_t* rxRcvdLen);
ReturnCode rfalT1TPollerWrite(const uint8_t* uid, uint8_t address, uint8_t data);
#define RFAL_NFCA_CASCADE_1_UID_LEN 4U
#define RFAL_NFCA_CASCADE_2_UID_LEN 7U
#define RFAL_NFCA_CASCADE_3_UID_LEN 10U
#define RFAL_NFCA_SENS_RES_PLATFORM_MASK 0x0FU
#define RFAL_NFCA_SENS_RES_PLATFORM_T1T 0x0CU
#define RFAL_NFCA_SEL_RES_CONF_MASK 0x60U
#define RFAL_NFCA_SEL_RES_CONF_T2T 0x00U
#define RFAL_NFCA_SEL_RES_CONF_T4T 0x20U
#define RFAL_NFCA_SEL_RES_CONF_NFCDEP 0x40U
#define RFAL_NFCA_SEL_RES_CONF_T4T_NFCDEP 0x60U
#define RFAL_NFCA_FDTMIN 1620U
#define rfalNfcaIsSensResT1T(sensRes) ((((rfalNfcaSensRes*)(sensRes))->platformInfo & RFAL_NFCA_SENS_RES_PLATFORM_MASK) == RFAL_NFCA_SENS_RES_PLATFORM_T1T)
#define rfalNfcaIsSelResT2T(selRes) ((((rfalNfcaSelRes*)(selRes))->sak & RFAL_NFCA_SEL_RES_CONF_MASK) == RFAL_NFCA_SEL_RES_CONF_T2T)
#define rfalNfcaIsSelResT4T(selRes) ((((rfalNfcaSelRes*)(selRes))->sak & RFAL_NFCA_SEL_RES_CONF_MASK) == RFAL_NFCA_SEL_RES_CONF_T4T)
#define rfalNfcaIsSelResNFCDEP(selRes) ((((rfalNfcaSelRes*)(selRes))->sak & RFAL_NFCA_SEL_RES_CONF_MASK) == RFAL_NFCA_SEL_RES_CONF_NFCDEP)
#define rfalNfcaIsSelResT4TNFCDEP(selRes) ((((rfalNfcaSelRes*)(selRes))->sak & RFAL_NFCA_SEL_RES_CONF_MASK) == RFAL_NFCA_SEL_RES_CONF_T4T_NFCDEP)
#define rfalNfcaLisDevIsMultiProto(lisDev) (((rfalNfcaListenDevice*)(lisDev))->type == RFAL_NFCA_T4T_NFCDEP)
typedef enum {
    RFAL_NFCA_T1T =
        0x01,
    RFAL_NFCA_T2T =
        0x00,
    RFAL_NFCA_T4T =
        0x20,
    RFAL_NFCA_NFCDEP =
        0x40,
    RFAL_NFCA_T4T_NFCDEP =
        0x60
} rfalNfcaListenDeviceType;
typedef struct {
    uint8_t
        anticollisionInfo;
    uint8_t
        platformInfo;
} rfalNfcaSensRes;
typedef struct {
    uint8_t
        selCmd;
    uint8_t
        selPar;
} rfalNfcaSddReq;
typedef struct {
    uint8_t nfcid1
        [4U];
    uint8_t bcc;
} rfalNfcaSddRes;
typedef struct {
    uint8_t
        selCmd;
    uint8_t
        selPar;
    uint8_t nfcid1
        [4U];
    uint8_t bcc;
} rfalNfcaSelReq;
typedef struct {
    uint8_t sak;
} rfalNfcaSelRes;
typedef struct {
    rfalNfcaListenDeviceType
        type;
    rfalNfcaSensRes
        sensRes;
    rfalNfcaSelRes
        selRes;
    uint8_t
        nfcId1Len;
    uint8_t nfcId1
        [10U];
    rfalT1TRidRes
        ridRes;
    _Bool isSleep;
} rfalNfcaListenDevice;
ReturnCode rfalNfcaPollerInitialize(void);
ReturnCode rfalNfcaPollerCheckPresence(rfal14443AShortFrameCmd cmd, rfalNfcaSensRes* sensRes);
ReturnCode rfalNfcaPollerSelect(const uint8_t* nfcid1, uint8_t nfcidLen, rfalNfcaSelRes* selRes);
ReturnCode rfalNfcaPollerSleep(void);
ReturnCode
    rfalNfcaPollerTechnologyDetection(rfalComplianceMode compMode, rfalNfcaSensRes* sensRes);
ReturnCode rfalNfcaPollerSingleCollisionResolution(
    uint8_t devLimit,
    _Bool* collPending,
    rfalNfcaSelRes* selRes,
    uint8_t* nfcId1,
    uint8_t* nfcId1Len);
ReturnCode rfalNfcaPollerFullCollisionResolution(
    rfalComplianceMode compMode,
    uint8_t devLimit,
    rfalNfcaListenDevice* nfcaDevList,
    uint8_t* devCnt);
ReturnCode rfalNfcaPollerSleepFullCollisionResolution(
    uint8_t devLimit,
    rfalNfcaListenDevice* nfcaDevList,
    uint8_t* devCnt);
ReturnCode rfalNfcaPollerStartFullCollisionResolution(
    rfalComplianceMode compMode,
    uint8_t devLimit,
    rfalNfcaListenDevice* nfcaDevList,
    uint8_t* devCnt);
ReturnCode rfalNfcaPollerGetFullCollisionResolutionStatus(void);
_Bool rfalNfcaListenerIsSleepReq(const uint8_t* buf, uint16_t bufLen);
#define RFAL_NFCB_H 
#define RFAL_NFCB_FWTSENSB 7680U
#define RFAL_NFCB_DFWT 49152U
#define RFAL_NFCB_DTPOLL_10 rfalConvMsTo1fc(20)
#define RFAL_NFCB_DTPOLL_20 rfalConvMsTo1fc(17)
#define RFAL_NFCB_AFI 0x00U
#define RFAL_NFCB_PARAM 0x00U
#define RFAL_NFCB_CRC_LEN 2U
#define RFAL_NFCB_NFCID0_LEN 4U
#define RFAL_NFCB_CMD_LEN 1U
#define RFAL_NFCB_SENSB_RES_LEN 12U
#define RFAL_NFCB_SENSB_RES_EXT_LEN 13U
#define RFAL_NFCB_SENSB_REQ_ADV_FEATURE 0x20U
#define RFAL_NFCB_SENSB_RES_FSCI_MASK 0x0FU
#define RFAL_NFCB_SENSB_RES_FSCI_SHIFT 4U
#define RFAL_NFCB_SENSB_RES_PROTO_RFU_MASK 0x08U
#define RFAL_NFCB_SENSB_RES_PROTO_TR2_MASK 0x03U
#define RFAL_NFCB_SENSB_RES_PROTO_TR2_SHIFT 1U
#define RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK 0x01U
#define RFAL_NFCB_SENSB_RES_FWI_MASK 0x0FU
#define RFAL_NFCB_SENSB_RES_FWI_SHIFT 4U
#define RFAL_NFCB_SENSB_RES_ADC_MASK 0x0CU
#define RFAL_NFCB_SENSB_RES_ADC_ADV_FEATURE_MASK 0x08U
#define RFAL_NFCB_SENSB_RES_ADC_PROPRIETARY_MASK 0x04U
#define RFAL_NFCB_SENSB_RES_FO_DID_MASK 0x01U
#define RFAL_NFCB_SENSB_RES_FO_NAD_MASK 0x02U
#define RFAL_NFCB_SENSB_RES_FO_MASK 0x03U
#define RFAL_NFCB_SENSB_RES_SFGI_MASK 0x0FU
#define RFAL_NFCB_SENSB_RES_SFGI_SHIFT 4U
#define rfalNfcbGetFSCI(sensbRes) ((((rfalNfcbSensbRes*)(sensbRes))->protInfo.FsciProType >> RFAL_NFCB_SENSB_RES_FSCI_SHIFT) & RFAL_NFCB_SENSB_RES_FSCI_MASK)
#define rfalNfcbIsIsoDepSupported(dev) ((((rfalNfcbListenDevice*)(dev))->sensbRes.protInfo.FsciProType & RFAL_NFCB_SENSB_RES_PROTO_ISO_MASK) != 0U)
typedef enum {
    RFAL_NFCB_SENS_CMD_ALLB_REQ = 0x08,
    RFAL_NFCB_SENS_CMD_SENSB_REQ = 0x00
} rfalNfcbSensCmd;
typedef enum {
    RFAL_NFCB_SLOT_NUM_1 = 0,
    RFAL_NFCB_SLOT_NUM_2 = 1,
    RFAL_NFCB_SLOT_NUM_4 = 2,
    RFAL_NFCB_SLOT_NUM_8 = 3,
    RFAL_NFCB_SLOT_NUM_16 = 4
} rfalNfcbSlots;
typedef struct {
    uint8_t AFI;
    uint8_t CRC_B[2U];
    uint8_t numApps;
} rfalNfcbSensbResAppData;
typedef struct {
    uint8_t
        BRC;
    uint8_t
        FsciProType;
    uint8_t
        FwiAdcFo;
    uint8_t
        SFGI;
} rfalNfcbSensbResProtocolInfo;
typedef struct {
    uint8_t cmd;
    uint8_t nfcid0[4U];
    rfalNfcbSensbResAppData appData;
    rfalNfcbSensbResProtocolInfo protInfo;
} rfalNfcbSensbRes;
typedef struct {
    uint8_t sensbResLen;
    rfalNfcbSensbRes sensbRes;
    _Bool isSleep;
} rfalNfcbListenDevice;
ReturnCode rfalNfcbPollerInitialize(void);
ReturnCode rfalNfcbPollerInitializeWithParams(uint8_t AFI, uint8_t PARAM);
ReturnCode rfalNfcbPollerCheckPresence(
    rfalNfcbSensCmd cmd,
    rfalNfcbSlots slots,
    rfalNfcbSensbRes* sensbRes,
    uint8_t* sensbResLen);
ReturnCode rfalNfcbPollerSleep(const uint8_t* nfcid0);
ReturnCode
    rfalNfcbPollerSlotMarker(uint8_t slotCode, rfalNfcbSensbRes* sensbRes, uint8_t* sensbResLen);
ReturnCode rfalNfcbPollerTechnologyDetection(
    rfalComplianceMode compMode,
    rfalNfcbSensbRes* sensbRes,
    uint8_t* sensbResLen);
ReturnCode rfalNfcbPollerCollisionResolution(
    rfalComplianceMode compMode,
    uint8_t devLimit,
    rfalNfcbListenDevice* nfcbDevList,
    uint8_t* devCnt);
ReturnCode rfalNfcbPollerSlottedCollisionResolution(
    rfalComplianceMode compMode,
    uint8_t devLimit,
    rfalNfcbSlots initSlots,
    rfalNfcbSlots endSlots,
    rfalNfcbListenDevice* nfcbDevList,
    uint8_t* devCnt,
    _Bool* colPending);
uint32_t rfalNfcbTR2ToFDT(uint8_t tr2Code);
#define RFAL_NFCF_H 
#define RFAL_NFCF_NFCID2_LEN 8U
#define RFAL_NFCF_SENSF_RES_LEN_MIN 16U
#define RFAL_NFCF_SENSF_RES_LEN_MAX 18U
#define RFAL_NFCF_SENSF_RES_PAD0_LEN 2U
#define RFAL_NFCF_SENSF_RES_PAD1_LEN 2U
#define RFAL_NFCF_SENSF_RES_RD_LEN 2U
#define RFAL_NFCF_SENSF_RES_BYTE1 1U
#define RFAL_NFCF_SENSF_SC_LEN 2U
#define RFAL_NFCF_SENSF_PARAMS_SC1_POS 0U
#define RFAL_NFCF_SENSF_PARAMS_SC2_POS 1U
#define RFAL_NFCF_SENSF_PARAMS_RC_POS 2U
#define RFAL_NFCF_SENSF_PARAMS_TSN_POS 3U
#define RFAL_NFCF_POLL_MAXCARDS 16U
#define RFAL_NFCF_CMD_POS 0U
#define RFAL_NFCF_CMD_LEN 1U
#define RFAL_NFCF_LENGTH_LEN 1U
#define RFAL_NFCF_HEADER_LEN (RFAL_NFCF_LENGTH_LEN + RFAL_NFCF_CMD_LEN)
#define RFAL_NFCF_SENSF_NFCID2_BYTE1_POS 0U
#define RFAL_NFCF_SENSF_NFCID2_BYTE2_POS 1U
#define RFAL_NFCF_SENSF_NFCID2_PROT_TYPE_LEN 2U
#define RFAL_NFCF_SENSF_NFCID2_BYTE1_NFCDEP 0x01U
#define RFAL_NFCF_SENSF_NFCID2_BYTE2_NFCDEP 0xFEU
#define RFAL_NFCF_SYSTEMCODE 0xFFFFU
#define RFAL_NFCF_BLOCK_LEN 16U
#define RFAL_NFCF_CHECKUPDATE_RES_ST1_POS 9U
#define RFAL_NFCF_CHECKUPDATE_RES_ST2_POS 10U
#define RFAL_NFCF_CHECKUPDATE_RES_NOB_POS 11U
#define RFAL_NFCF_STATUS_FLAG_SUCCESS 0x00U
#define RFAL_NFCF_STATUS_FLAG_ERROR 0xFFU
#define RFAL_NFCF_BLOCKLISTELEM_LEN 0x80U
#define RFAL_NFCF_SERVICECODE_RDONLY 0x000BU
#define RFAL_NFCF_SERVICECODE_RDWR 0x0009U
enum {
    RFAL_NFCF_CMD_POLLING =
        0x00,
    RFAL_NFCF_CMD_POLLING_RES =
        0x01,
    RFAL_NFCF_CMD_REQUEST_SERVICE =
        0x02,
    RFAL_NFCF_CMD_REQUEST_RESPONSE =
        0x04,
    RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION =
        0x06,
    RFAL_NFCF_CMD_READ_WITHOUT_ENCRYPTION_RES =
        0x07,
    RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION =
        0x08,
    RFAL_NFCF_CMD_WRITE_WITHOUT_ENCRYPTION_RES =
        0x09,
    RFAL_NFCF_CMD_REQUEST_SYSTEM_CODE =
        0x0c,
    RFAL_NFCF_CMD_AUTHENTICATION1 =
        0x10,
    RFAL_NFCF_CMD_AUTHENTICATION2 =
        0x12,
    RFAL_NFCF_CMD_READ =
        0x14,
    RFAL_NFCF_CMD_WRITE =
        0x16,
};
#define rfalNfcfIsNfcDepSupported(dev) ((((rfalNfcfListenDevice*)(dev))->sensfRes.NFCID2[RFAL_NFCF_SENSF_NFCID2_BYTE1_POS] == RFAL_NFCF_SENSF_NFCID2_BYTE1_NFCDEP) && (((rfalNfcfListenDevice*)(dev))->sensfRes.NFCID2[RFAL_NFCF_SENSF_NFCID2_BYTE2_POS] == RFAL_NFCF_SENSF_NFCID2_BYTE2_NFCDEP))
typedef struct {
    uint8_t CMD;
    uint8_t NFCID2[8U];
    uint8_t PAD0[2U];
    uint8_t PAD1[2U];
    uint8_t MRTIcheck;
    uint8_t MRTIupdate;
    uint8_t PAD2;
    uint8_t RD[2U];
} rfalNfcfSensfRes;
typedef struct {
    uint8_t NFCID2[8U];
} rfalNfcfPollDevice;
typedef struct {
    uint8_t sensfResLen;
    rfalNfcfSensfRes sensfRes;
} rfalNfcfListenDevice;
typedef uint16_t rfalNfcfServ;
typedef struct {
    uint8_t conf;
    uint16_t blockNum;
} rfalNfcfBlockListElem;
typedef struct {
    uint8_t numServ;
    rfalNfcfServ* servList;
    uint8_t numBlock;
    rfalNfcfBlockListElem* blockList;
} rfalNfcfServBlockListParam;
ReturnCode rfalNfcfPollerInitialize(rfalBitRate bitRate);
ReturnCode rfalNfcfPollerCheckPresence(void);
ReturnCode rfalNfcfPollerPoll(
    rfalFeliCaPollSlots slots,
    uint16_t sysCode,
    uint8_t reqCode,
    rfalFeliCaPollRes* cardList,
    uint8_t* devCnt,
    uint8_t* collisions);
ReturnCode rfalNfcfPollerCollisionResolution(
    rfalComplianceMode compMode,
    uint8_t devLimit,
    rfalNfcfListenDevice* nfcfDevList,
    uint8_t* devCnt);
ReturnCode rfalNfcfPollerCheck(
    const uint8_t* nfcid2,
    const rfalNfcfServBlockListParam* servBlock,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* rcvdLen);
ReturnCode rfalNfcfPollerUpdate(
    const uint8_t* nfcid2,
    const rfalNfcfServBlockListParam* servBlock,
    uint8_t* txBuf,
    uint16_t txBufLen,
    const uint8_t* blockData,
    uint8_t* rxBuf,
    uint16_t rxBufLen);
_Bool rfalNfcfListenerIsT3TReq(const uint8_t* buf, uint16_t bufLen, uint8_t* nfcid2);
#define RFAL_NFCV_H 
#define RFAL_NFCV_UID_LEN 8U
#define RFAL_NFCV_MAX_BLOCK_LEN 32U
#define RFAL_NFCV_BNO_LEN 1U
#define RFAL_NFCV_CRC_LEN 2U
#define RFAL_NFCV_MAX_GEN_DATA_LEN (RFAL_NFCV_MAX_BLOCK_LEN + RFAL_NFCV_BNO_LEN + RFAL_NFCV_UID_LEN)
#define RFAL_NFCV_BLOCKNUM_LEN 1U
#define RFAL_NFCV_BLOCKNUM_EXTENDED_LEN 2U
#define RFAL_NFCV_PARAM_SKIP 0U
enum {
    RFAL_NFCV_REQ_FLAG_DEFAULT =
        0x02U,
    RFAL_NFCV_REQ_FLAG_SUB_CARRIER =
        0x01U,
    RFAL_NFCV_REQ_FLAG_DATA_RATE =
        0x02U,
    RFAL_NFCV_REQ_FLAG_INVENTORY =
        0x04U,
    RFAL_NFCV_REQ_FLAG_PROTOCOL_EXT =
        0x08U,
    RFAL_NFCV_REQ_FLAG_SELECT =
        0x10U,
    RFAL_NFCV_REQ_FLAG_ADDRESS =
        0x20U,
    RFAL_NFCV_REQ_FLAG_OPTION =
        0x40U,
    RFAL_NFCV_REQ_FLAG_RFU =
        0x80U,
    RFAL_NFCV_REQ_FLAG_AFI =
        0x10U,
    RFAL_NFCV_REQ_FLAG_NB_SLOTS =
        0x20U,
};
enum {
    RFAL_NFCV_RES_FLAG_ERROR =
        0x01U,
    RFAL_NFCV_RES_FLAG_RFU1 =
        0x02U,
    RFAL_NFCV_RES_FLAG_RFU2 =
        0x04U,
    RFAL_NFCV_RES_FLAG_EXTENSION =
        0x08U,
    RFAL_NFCV_RES_FLAG_RFU3 =
        0x10U,
    RFAL_NFCV_RES_FLAG_RFU4 =
        0x20U,
    RFAL_NFCV_RES_FLAG_RFU5 =
        0x40U,
    RFAL_NFCV_RES_FLAG_RFU6 =
        0x80U
};
enum {
    RFAL_NFCV_ERROR_CMD_NOT_SUPPORTED =
        0x01U,
    RFAL_NFCV_ERROR_CMD_NOT_RECOGNIZED =
        0x02U,
    RFAL_NFCV_ERROR_OPTION_NOT_SUPPORTED =
        0x03U,
    RFAL_NFCV_ERROR_UNKNOWN =
        0x0FU,
    RFAL_NFCV_ERROR_BLOCK_NOT_AVALIABLE =
        0x10U,
    RFAL_NFCV_ERROR_BLOCK_ALREDY_LOCKED =
        0x11U,
    RFAL_NFCV_ERROR_BLOCK_LOCKED =
        0x12U,
    RFAL_NFCV_ERROR_WRITE_FAILED =
        0x13U,
    RFAL_NFCV_ERROR_BLOCK_FAILED =
        0x14U
};
enum {
    RFAL_NFCV_CMD_INVENTORY =
        0x01U,
    RFAL_NFCV_CMD_SLPV =
        0x02U,
    RFAL_NFCV_CMD_READ_SINGLE_BLOCK =
        0x20U,
    RFAL_NFCV_CMD_WRITE_SINGLE_BLOCK =
        0x21U,
    RFAL_NFCV_CMD_LOCK_BLOCK =
        0x22U,
    RFAL_NFCV_CMD_READ_MULTIPLE_BLOCKS =
        0x23U,
    RFAL_NFCV_CMD_WRITE_MULTIPLE_BLOCKS =
        0x24U,
    RFAL_NFCV_CMD_SELECT =
        0x25U,
    RFAL_NFCV_CMD_RESET_TO_READY =
        0x26U,
    RFAL_NFCV_CMD_GET_SYS_INFO =
        0x2BU,
    RFAL_NFCV_CMD_EXTENDED_READ_SINGLE_BLOCK =
        0x30U,
    RFAL_NFCV_CMD_EXTENDED_WRITE_SINGLE_BLOCK =
        0x31U,
    RFAL_NFCV_CMD_EXTENDED_LOCK_SINGLE_BLOCK =
        0x32U,
    RFAL_NFCV_CMD_EXTENDED_READ_MULTIPLE_BLOCK =
        0x33U,
    RFAL_NFCV_CMD_EXTENDED_WRITE_MULTIPLE_BLOCK =
        0x34U,
    RFAL_NFCV_CMD_EXTENDED_GET_SYS_INFO =
        0x3BU
};
enum {
    RFAL_NFCV_CMD_READ_CONFIGURATION =
        0xA0U,
    RFAL_NFCV_CMD_WRITE_CONFIGURATION =
        0xA1U,
    RFAL_NFCV_CMD_SET_EAS =
        0xA2U,
    RFAL_NFCV_CMD_RESET_EAS =
        0xA3U,
    RFAL_NFCV_CMD_LOCK_EAS =
        0xA4U,
    RFAL_NFCV_CMD_ENABLE_EAS =
        0xA5U,
    RFAL_NFCV_CMD_KILL = 0xA6U,
    RFAL_NFCV_CMD_WRITE_EAS_ID =
        0xA7U,
    RFAL_NFCV_CMD_WRITE_EAS_CONFIG =
        0xA8U,
    RFAL_NFCV_CMD_MANAGE_GPO =
        0xA9U,
    RFAL_NFCV_CMD_WRITE_MESSAGE =
        0xAAU,
    RFAL_NFCV_CMD_READ_MESSAGE_LENGTH =
        0xABU,
    RFAL_NFCV_CMD_READ_MESSAGE =
        0xACU,
    RFAL_NFCV_CMD_READ_DYN_CONFIGURATION =
        0xADU,
    RFAL_NFCV_CMD_WRITE_DYN_CONFIGURATION =
        0xAEU,
    RFAL_NFCV_CMD_WRITE_PASSWORD =
        0xB1U,
    RFAL_NFCV_CMD_LOCK_KILL =
        0xB2U,
    RFAL_NFCV_CMD_PRESENT_PASSWORD =
        0xB3U,
    RFAL_NFCV_CMD_GET_RANDOM_NUMBER =
        0xB4U,
    RFAL_NFCV_CMD_FAST_READ_SINGLE_BLOCK =
        0xC0U,
    RFAL_NFCV_CMD_FAST_READ_MULTIPLE_BLOCKS =
        0xC3U,
    RFAL_NFCV_CMD_FAST_EXTENDED_READ_SINGLE_BLOCK =
        0xC4U,
    RFAL_NFCV_CMD_FAST_EXTENDED_READ_MULTIPLE_BLOCKS =
        0xC5U,
    RFAL_NFCV_CMD_FAST_WRITE_MESSAGE =
        0xCAU,
    RFAL_NFCV_CMD_FAST_READ_MESSAGE_LENGTH =
        0xCBU,
    RFAL_NFCV_CMD_FAST_READ_MESSAGE =
        0xCCU,
    RFAL_NFCV_CMD_FAST_READ_DYN_CONFIGURATION =
        0xCDU,
    RFAL_NFCV_CMD_FAST_WRITE_DYN_CONFIGURATION =
        0xCEU
};
enum {
    RFAL_NFCV_SYSINFO_DFSID =
        0x01U,
    RFAL_NFCV_SYSINFO_AFI =
        0x02U,
    RFAL_NFCV_SYSINFO_MEMSIZE =
        0x04U,
    RFAL_NFCV_SYSINFO_ICREF =
        0x08U,
    RFAL_NFCV_SYSINFO_MOI =
        0x10U,
    RFAL_NFCV_SYSINFO_CMDLIST =
        0x20U,
    RFAL_NFCV_SYSINFO_CSI =
        0x40U,
    RFAL_NFCV_SYSINFO_REQ_ALL =
        0x7FU
};
typedef enum {
    RFAL_NFCV_NUM_SLOTS_1 = 0x20,
    RFAL_NFCV_NUM_SLOTS_16 = 0x00,
} rfalNfcvNumSlots;
typedef struct {
    uint8_t RES_FLAG;
    uint8_t DSFID;
    uint8_t UID[8U];
    uint8_t crc[2U];
} rfalNfcvInventoryRes;
typedef struct {
    uint8_t REQ_FLAG;
    uint8_t CMD;
    union {
        uint8_t UID[8U];
        uint8_t data[(32U + 1U + 8U)];
    } payload;
} rfalNfcvGenericReq;
typedef struct {
    uint8_t RES_FLAG;
    uint8_t data[(32U + 1U + 8U)];
} rfalNfcvGenericRes;
typedef struct {
    rfalNfcvInventoryRes InvRes;
    _Bool isSleep;
} rfalNfcvListenDevice;
ReturnCode rfalNfcvPollerInitialize(void);
ReturnCode rfalNfcvPollerCheckPresence(rfalNfcvInventoryRes* invRes);
ReturnCode rfalNfcvPollerInventory(
    rfalNfcvNumSlots nSlots,
    uint8_t maskLen,
    const uint8_t* maskVal,
    rfalNfcvInventoryRes* invRes,
    uint16_t* rcvdLen);
ReturnCode rfalNfcvPollerCollisionResolution(
    rfalComplianceMode compMode,
    uint8_t devLimit,
    rfalNfcvListenDevice* nfcvDevList,
    uint8_t* devCnt);
ReturnCode rfalNfcvPollerSleepCollisionResolution(
    uint8_t devLimit,
    rfalNfcvListenDevice* nfcvDevList,
    uint8_t* devCnt);
ReturnCode rfalNfcvPollerSleep(uint8_t flags, const uint8_t* uid);
ReturnCode rfalNfcvPollerSelect(uint8_t flags, const uint8_t* uid);
ReturnCode rfalNfcvPollerReadSingleBlock(
    uint8_t flags,
    const uint8_t* uid,
    uint8_t blockNum,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* rcvLen);
ReturnCode rfalNfcvPollerWriteSingleBlock(
    uint8_t flags,
    const uint8_t* uid,
    uint8_t blockNum,
    const uint8_t* wrData,
    uint8_t blockLen);
ReturnCode rfalNfcvPollerReadMultipleBlocks(
    uint8_t flags,
    const uint8_t* uid,
    uint8_t firstBlockNum,
    uint8_t numOfBlocks,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* rcvLen);
ReturnCode rfalNfcvPollerWriteMultipleBlocks(
    uint8_t flags,
    const uint8_t* uid,
    uint8_t firstBlockNum,
    uint8_t numOfBlocks,
    uint8_t* txBuf,
    uint16_t txBufLen,
    uint8_t blockLen,
    const uint8_t* wrData,
    uint16_t wrDataLen);
ReturnCode rfalNfcvPollerLockBlock(uint8_t flags, const uint8_t* uid, uint8_t blockNum);
ReturnCode
    rfalNfcvPollerExtendedLockSingleBlock(uint8_t flags, const uint8_t* uid, uint16_t blockNum);
ReturnCode rfalNfcvPollerExtendedReadSingleBlock(
    uint8_t flags,
    const uint8_t* uid,
    uint16_t blockNum,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* rcvLen);
ReturnCode rfalNfcvPollerExtendedWriteSingleBlock(
    uint8_t flags,
    const uint8_t* uid,
    uint16_t blockNum,
    const uint8_t* wrData,
    uint8_t blockLen);
ReturnCode rfalNfcvPollerExtendedReadMultipleBlocks(
    uint8_t flags,
    const uint8_t* uid,
    uint16_t firstBlockNum,
    uint16_t numOfBlocks,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* rcvLen);
ReturnCode rfalNfcvPollerExtendedWriteMultipleBlocks(
    uint8_t flags,
    const uint8_t* uid,
    uint16_t firstBlockNum,
    uint16_t numOfBlocks,
    uint8_t* txBuf,
    uint16_t txBufLen,
    uint8_t blockLen,
    const uint8_t* wrData,
    uint16_t wrDataLen);
ReturnCode rfalNfcvPollerGetSystemInformation(
    uint8_t flags,
    const uint8_t* uid,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* rcvLen);
ReturnCode rfalNfcvPollerExtendedGetSystemInformation(
    uint8_t flags,
    const uint8_t* uid,
    uint8_t requestField,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* rcvLen);
ReturnCode rfalNfcvPollerTransceiveReq(
    uint8_t cmd,
    uint8_t flags,
    uint8_t param,
    const uint8_t* uid,
    const uint8_t* data,
    uint16_t dataLen,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* rcvLen);
#define RFAL_ST25TB_H 
#define RFAL_ST25TB_CHIP_ID_LEN 1U
#define RFAL_ST25TB_CRC_LEN 2U
#define RFAL_ST25TB_UID_LEN 8U
#define RFAL_ST25TB_BLOCK_LEN 4U
typedef uint8_t rfalSt25tbUID[8U];
typedef uint8_t rfalSt25tbBlock[4U];
typedef struct {
    uint8_t chipID;
    rfalSt25tbUID UID;
    _Bool isDeselected;
} rfalSt25tbListenDevice;
ReturnCode rfalSt25tbPollerInitialize(void);
ReturnCode rfalSt25tbPollerCheckPresence(uint8_t* chipId);
ReturnCode rfalSt25tbPollerCollisionResolution(
    uint8_t devLimit,
    rfalSt25tbListenDevice* st25tbDevList,
    uint8_t* devCnt);
ReturnCode rfalSt25tbPollerInitiate(uint8_t* chipId);
ReturnCode rfalSt25tbPollerPcall(uint8_t* chipId);
ReturnCode rfalSt25tbPollerSlotMarker(uint8_t slotNum, uint8_t* chipIdRes);
ReturnCode rfalSt25tbPollerSelect(uint8_t chipId);
ReturnCode rfalSt25tbPollerGetUID(rfalSt25tbUID* UID);
ReturnCode rfalSt25tbPollerReadBlock(uint8_t blockAddress, rfalSt25tbBlock* blockData);
ReturnCode rfalSt25tbPollerWriteBlock(uint8_t blockAddress, const rfalSt25tbBlock* blockData);
ReturnCode rfalSt25tbPollerCompletion(void);
ReturnCode rfalSt25tbPollerResetToInventory(void);
#define RFAL_NFCDEP_H_ 
#define RFAL_NFCDEP_FRAME_SIZE_MAX_LEN 254U
#define RFAL_NFCDEP_DEPREQ_HEADER_LEN 5U
#define RFAL_NFCDEP_DEP_HEADER (RFAL_NFCDEP_LEN_LEN + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN + RFAL_NFCDEP_DEP_PFB_LEN)
#define RFAL_NFCDEP_HEADER (RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN)
#define RFAL_NFCDEP_SB_LEN 1U
#define RFAL_NFCDEP_LEN_LEN 1U
#define RFAL_NFCDEP_CMDTYPE_LEN 1U
#define RFAL_NFCDEP_CMD_LEN 1U
#define RFAL_NFCDEP_DID_LEN 1U
#define RFAL_NFCDEP_DEP_PFB_LEN 1U
#define RFAL_NFCDEP_DSL_RLS_LEN_NO_DID (RFAL_NFCDEP_LEN_LEN + RFAL_NFCDEP_CMDTYPE_LEN + RFAL_NFCDEP_CMD_LEN)
#define RFAL_NFCDEP_DSL_RLS_LEN_DID (RFAL_NFCDEP_DSL_RLS_LEN_NO_DID + RFAL_NFCDEP_DID_LEN)
#define RFAL_NFCDEP_FS_VAL_MIN 64U
#define RFAL_NFCDEP_LR_VAL_MASK 0x03U
#define RFAL_NFCDEP_PP_LR_MASK 0x30U
#define RFAL_NFCDEP_PP_LR_SHIFT 4U
#define RFAL_NFCDEP_DID_MAX 14U
#define RFAL_NFCDEP_DID_KEEP 0xFFU
#define RFAL_NFCDEP_DID_NO 0x00U
#define RFAL_NFCDEP_NAD_NO 0x00U
#define RFAL_NFCDEP_OPER_RTOX_REQ_DIS 0x01U
#define RFAL_NFCDEP_OPER_RTOX_REQ_EN 0x00U
#define RFAL_NFCDEP_OPER_ATN_DIS 0x00U
#define RFAL_NFCDEP_OPER_ATN_EN 0x02U
#define RFAL_NFCDEP_OPER_EMPTY_DEP_DIS 0x04U
#define RFAL_NFCDEP_OPER_EMPTY_DEP_EN 0x00U
#define RFAL_NFCDEP_OPER_FULL_MI_DIS 0x00U
#define RFAL_NFCDEP_OPER_FULL_MI_EN 0x08U
#define RFAL_NFCDEP_BRS_MAINTAIN 0xC0U
#define RFAL_NFCDEP_BRS_Dx_MASK 0x07U
#define RFAL_NFCDEP_BRS_DSI_POS 3U
#define RFAL_NFCDEP_WT_DELTA (16U - RFAL_NFCDEP_WT_DELTA_ADJUST)
#define RFAL_NFCDEP_WT_DELTA_ADJUST 4U
#define RFAL_NFCDEP_ATR_REQ_NFCID3_POS 2U
#define RFAL_NFCDEP_NFCID3_LEN 10U
#define RFAL_NFCDEP_LEN_MIN 3U
#define RFAL_NFCDEP_LEN_MAX 255U
#define RFAL_NFCDEP_ATRRES_HEADER_LEN 2U
#define RFAL_NFCDEP_ATRRES_MIN_LEN 17U
#define RFAL_NFCDEP_ATRRES_MAX_LEN 64U
#define RFAL_NFCDEP_ATRREQ_MIN_LEN 16U
#define RFAL_NFCDEP_ATRREQ_MAX_LEN RFAL_NFCDEP_ATRRES_MAX_LEN
#define RFAL_NFCDEP_GB_MAX_LEN (RFAL_NFCDEP_ATRREQ_MAX_LEN - RFAL_NFCDEP_ATRREQ_MIN_LEN)
#define RFAL_NFCDEP_WT_INI_DEFAULT RFAL_NFCDEP_WT_INI_MAX
#define RFAL_NFCDEP_WT_INI_MIN 0U
#define RFAL_NFCDEP_WT_INI_MAX 14U
#define RFAL_NFCDEP_RWT_INI_MAX rfalNfcDepWT2RWT(RFAL_NFCDEP_WT_INI_MAX)
#define RFAL_NFCDEP_WT_TRG_MAX_D10 8U
#define RFAL_NFCDEP_WT_TRG_MAX_D11 14U
#define RFAL_NFCDEP_WT_TRG_MAX_L13 10U
#define RFAL_NFCDEP_WT_TRG_MAX RFAL_NFCDEP_WT_TRG_MAX_D11
#define RFAL_NFCDEP_RWT_TRG_MAX rfalNfcDepWT2RWT(RFAL_NFCDEP_WT_TRG_MAX)
#define RFAL_NFCDEP_MAX_FWT ((uint32_t)1U << 20)
#define RFAL_NFCDEP_WT_MASK 0x0FU
#define RFAL_NFCDEP_BR_MASK_106 0x01U
#define RFAL_NFCDEP_BR_MASK_212 0x02U
#define RFAL_NFCDEP_BR_MASK_424 0x04U
#define rfalNfcDepWT2RWT(wt) ((uint32_t)1U << (((uint32_t)(wt)&RFAL_NFCDEP_WT_MASK) + 12U))
#define rfalNfcDepDx2BRS(br) ((((uint8_t)(br)&RFAL_NFCDEP_BRS_Dx_MASK) << RFAL_NFCDEP_BRS_DSI_POS) | ((uint8_t)(br)&RFAL_NFCDEP_BRS_Dx_MASK))
#define rfalNfcDepBRS2DRI(brs) (uint8_t)(( uint8_t)(brs)&RFAL_NFCDEP_BRS_Dx_MASK)
#define rfalNfcDepBRS2DSI(brs) (uint8_t)( ((uint8_t)(brs) >> RFAL_NFCDEP_BRS_DSI_POS) & RFAL_NFCDEP_BRS_Dx_MASK)
#define rfalNfcDepPP2LR(PPx) (((uint8_t)(PPx)&RFAL_NFCDEP_PP_LR_MASK) >> RFAL_NFCDEP_PP_LR_SHIFT)
#define rfalNfcDepLR2PP(LRx) (((uint8_t)(LRx) << RFAL_NFCDEP_PP_LR_SHIFT) & RFAL_NFCDEP_PP_LR_MASK)
#define rfalNfcDepLR2FS(LRx) (uint16_t)( MIN((RFAL_NFCDEP_FS_VAL_MIN * ((uint16_t)(LRx) + 1U)), RFAL_NFCDEP_FRAME_SIZE_MAX_LEN))
#define rfalNfcDepSetNFCID(dst,src,len) ST_MEMSET((dst), 0x00, RFAL_NFCDEP_NFCID3_LEN); if((len) > 0U) { ST_MEMCPY((dst), (src), (len)); }
enum {
    RFAL_NFCDEP_Bx_NO_HIGH_BR = 0x00,
    RFAL_NFCDEP_Bx_08_848 = 0x01,
    RFAL_NFCDEP_Bx_16_1695 = 0x02,
    RFAL_NFCDEP_Bx_32_3390 = 0x04,
    RFAL_NFCDEP_Bx_64_6780 = 0x08
};
enum {
    RFAL_NFCDEP_Dx_01_106 = RFAL_BR_106,
    RFAL_NFCDEP_Dx_02_212 = RFAL_BR_212,
    RFAL_NFCDEP_Dx_04_424 = RFAL_BR_424,
    RFAL_NFCDEP_Dx_08_848 = RFAL_BR_848,
    RFAL_NFCDEP_Dx_16_1695 = RFAL_BR_1695,
    RFAL_NFCDEP_Dx_32_3390 = RFAL_BR_3390,
    RFAL_NFCDEP_Dx_64_6780 = RFAL_BR_6780
};
enum {
    RFAL_NFCDEP_LR_64 = 0x00,
    RFAL_NFCDEP_LR_128 = 0x01,
    RFAL_NFCDEP_LR_192 = 0x02,
    RFAL_NFCDEP_LR_254 = 0x03
};
typedef _Bool (*rfalNfcDepDeactCallback)(void);
typedef enum {
    RFAL_NFCDEP_COMM_PASSIVE,
    RFAL_NFCDEP_COMM_ACTIVE
} rfalNfcDepCommMode;
typedef enum {
    RFAL_NFCDEP_ROLE_INITIATOR,
    RFAL_NFCDEP_ROLE_TARGET
} rfalNfcDepRole;
typedef struct {
    rfalNfcDepRole role;
    rfalNfcDepCommMode commMode;
    uint8_t oper;
    uint8_t did;
    uint8_t nad;
    uint8_t bs;
    uint8_t br;
    uint8_t nfcid[10U];
    uint8_t nfcidLen;
    uint8_t gb[(64U - 16U)];
    uint8_t gbLen;
    uint8_t lr;
    uint8_t to;
    uint32_t fwt;
    uint32_t dFwt;
} rfalNfcDepConfigs;
typedef struct {
    uint8_t CMD1;
    uint8_t CMD2;
    uint8_t NFCID3[10U];
    uint8_t DID;
    uint8_t BSi;
    uint8_t BRi;
    uint8_t PPi;
    uint8_t GBi[(64U - 16U)];
} rfalNfcDepAtrReq;
typedef struct {
    uint8_t CMD1;
    uint8_t CMD2;
    uint8_t NFCID3[10U];
    uint8_t DID;
    uint8_t BSt;
    uint8_t BRt;
    uint8_t TO;
    uint8_t PPt;
    uint8_t GBt[(64U - 16U)];
} rfalNfcDepAtrRes;
typedef struct {
    uint8_t prologue[5U];
    uint8_t inf[254U];
} rfalNfcDepBufFormat;
typedef struct {
    uint8_t prologue[5U];
    uint8_t pdu[512U];
} rfalNfcDepPduBufFormat;
typedef union {
    struct {
        rfalNfcDepAtrRes ATR_RES;
        uint8_t ATR_RESLen;
    } Target;
    struct {
        rfalNfcDepAtrReq ATR_REQ;
        uint8_t ATR_REQLen;
    } Initiator;
} rfalNfcDepActivation;
typedef struct {
    uint8_t GBLen;
    uint8_t WT;
    uint32_t FWT;
    uint32_t dFWT;
    uint8_t LR;
    uint16_t FS;
    rfalBitRate DSI;
    rfalBitRate DRI;
    uint8_t DID;
    uint8_t NAD;
} rfalNfcDepInfo;
typedef struct {
    rfalNfcDepActivation activation;
    rfalNfcDepInfo info;
} rfalNfcDepDevice;
typedef struct {
    rfalNfcDepCommMode commMode;
    uint8_t operParam;
    uint8_t* nfcid;
    uint8_t nfcidLen;
    uint8_t DID;
    uint8_t NAD;
    uint8_t BS;
    uint8_t BR;
    uint8_t LR;
    uint8_t* GB;
    uint8_t GBLen;
} rfalNfcDepAtrParam;
typedef struct {
    rfalNfcDepBufFormat* rxBuf;
    uint16_t* rxLen;
    _Bool* isRxChaining;
    rfalNfcDepDevice* nfcDepDev;
} rfalNfcDepListenActvParam;
typedef struct {
    rfalNfcDepCommMode commMode;
    uint8_t nfcid3[10U];
    uint8_t bst;
    uint8_t brt;
    uint8_t to;
    uint8_t ppt;
    uint8_t GBt[(64U - 16U)];
    uint8_t GBtLen;
    uint8_t operParam;
} rfalNfcDepTargetParam;
typedef struct {
    rfalNfcDepBufFormat* txBuf;
    uint16_t txBufLen;
    _Bool isTxChaining;
    rfalNfcDepBufFormat* rxBuf;
    uint16_t* rxLen;
    _Bool* isRxChaining;
    uint32_t FWT;
    uint32_t dFWT;
    uint16_t FSx;
    uint8_t DID;
} rfalNfcDepTxRxParam;
typedef struct {
    rfalNfcDepPduBufFormat* txBuf;
    uint16_t txBufLen;
    rfalNfcDepPduBufFormat* rxBuf;
    uint16_t* rxLen;
    rfalNfcDepBufFormat* tmpBuf;
    uint32_t FWT;
    uint32_t dFWT;
    uint16_t FSx;
    uint8_t DID;
} rfalNfcDepPduTxRxParam;
void rfalNfcDepInitialize(void);
void rfalNfcDepSetDeactivatingCallback(rfalNfcDepDeactCallback pFunc);
uint32_t rfalNfcDepCalculateRWT(uint8_t wt);
ReturnCode
    rfalNfcDepATR(const rfalNfcDepAtrParam* param, rfalNfcDepAtrRes* atrRes, uint8_t* atrResLen);
ReturnCode rfalNfcDepPSL(uint8_t BRS, uint8_t FSL);
ReturnCode rfalNfcDepDSL(void);
ReturnCode rfalNfcDepRLS(void);
ReturnCode rfalNfcDepInitiatorHandleActivation(
    rfalNfcDepAtrParam* param,
    rfalBitRate desiredBR,
    rfalNfcDepDevice* nfcDepDev);
_Bool rfalNfcDepIsAtrReq(const uint8_t* buf, uint16_t bufLen, uint8_t* nfcid3);
_Bool rfalNfcDepTargetRcvdATR(void);
ReturnCode rfalNfcDepListenStartActivation(
    const rfalNfcDepTargetParam* param,
    const uint8_t* atrReq,
    uint16_t atrReqLength,
    rfalNfcDepListenActvParam rxParam);
ReturnCode rfalNfcDepListenGetActivationStatus(void);
ReturnCode rfalNfcDepStartTransceive(const rfalNfcDepTxRxParam* param);
ReturnCode rfalNfcDepGetTransceiveStatus(void);
ReturnCode rfalNfcDepStartPduTransceive(rfalNfcDepPduTxRxParam param);
ReturnCode rfalNfcDepGetPduTransceiveStatus(void);
#define RFAL_ISODEP_H_ 
#define RFAL_ISODEP_PROLOGUE_SIZE (3U)
#define RFAL_ISODEP_PCB_LEN (1U)
#define RFAL_ISODEP_DID_LEN (1U)
#define RFAL_ISODEP_NAD_LEN (1U)
#define RFAL_ISODEP_NO_DID (0x00U)
#define RFAL_ISODEP_NO_NAD (0xFFU)
#define RFAL_ISODEP_FWI_MASK (0xF0U)
#define RFAL_ISODEP_FWI_SHIFT (4U)
#define RFAL_ISODEP_FWI_DEFAULT (4U)
#define RFAL_ISODEP_ADV_FEATURE (0x0FU)
#define RFAL_ISODEP_DID_MAX (14U)
#define RFAL_ISODEP_BRI_MASK (0x07U)
#define RFAL_ISODEP_BSI_MASK (0x70U)
#define RFAL_ISODEP_SAME_BITRATE_MASK (0x80U)
#define RFAL_ISODEP_BITRATE_RFU_MASK (0x08U)
#define RFAL_ISODEP_MAX_FWT ((uint32_t)1U << 26)
#define RFAL_ISODEP_FSDI_DEFAULT RFAL_ISODEP_FSXI_256
#define RFAL_ISODEP_FSX_KEEP (0xFFU)
#define RFAL_ISODEP_DEFAULT_FSCI RFAL_ISODEP_FSXI_256
#define RFAL_ISODEP_DEFAULT_FSC RFAL_ISODEP_FSX_256
#define RFAL_ISODEP_DEFAULT_SFGI (0U)
#define RFAL_ISODEP_DEFAULT_FWI (8U)
#define RFAL_ISODEP_APDU_MAX_LEN RFAL_ISODEP_FSX_1024
#define RFAL_ISODEP_ATTRIB_RES_MBLI_NO_INFO (0x00U)
#define RFAL_ISODEP_ATTRIB_REQ_PARAM1_DEFAULT (0x00U)
#define RFAL_ISODEP_ATTRIB_HLINFO_LEN (32U)
#define RFAL_ISODEP_ATS_HB_MAX_LEN (15U)
#define RFAL_ISODEP_ATTRIB_REQ_MIN_LEN (9U)
#define RFAL_ISODEP_ATTRIB_RES_MIN_LEN (1U)
#define RFAL_ISODEP_SPARAM_VALUES_MAX_LEN (16U)
#define RFAL_ISODEP_SPARAM_TAG_BLOCKINFO (0xA0U)
#define RFAL_ISODEP_SPARAM_TAG_BRREQ (0xA1U)
#define RFAL_ISODEP_SPARAM_TAG_BRIND (0xA2U)
#define RFAL_ISODEP_SPARAM_TAG_BRACT (0xA3U)
#define RFAL_ISODEP_SPARAM_TAG_BRACK (0xA4U)
#define RFAL_ISODEP_SPARAM_TAG_SUP_PCD2PICC (0x80U)
#define RFAL_ISODEP_SPARAM_TAG_SUP_PICC2PCD (0x81U)
#define RFAL_ISODEP_SPARAM_TAG_SUP_FRAME (0x82U)
#define RFAL_ISODEP_SPARAM_TAG_SEL_PCD2PICC (0x83U)
#define RFAL_ISODEP_SPARAM_TAG_SEL_PICC2PCD (0x84U)
#define RFAL_ISODEP_SPARAM_TAG_SEL_FRAME (0x85U)
#define RFAL_ISODEP_SPARAM_TAG_LEN (1)
#define RFAL_ISODEP_SPARAM_TAG_BRREQ_LEN (0U)
#define RFAL_ISODEP_SPARAM_TAG_PICC2PCD_LEN (2U)
#define RFAL_ISODEP_SPARAM_TAG_PCD2PICC_LEN (2U)
#define RFAL_ISODEP_SPARAM_TAG_BRACK_LEN (0U)
#define RFAL_ISODEP_ATS_TA_DPL_212 (0x01U)
#define RFAL_ISODEP_ATS_TA_DPL_424 (0x02U)
#define RFAL_ISODEP_ATS_TA_DPL_848 (0x04U)
#define RFAL_ISODEP_ATS_TA_DLP_212 (0x10U)
#define RFAL_ISODEP_ATS_TA_DLP_424 (0x20U)
#define RFAL_ISODEP_ATS_TA_DLP_848 (0x40U)
#define RFAL_ISODEP_ATS_TA_SAME_D (0x80U)
#define RFAL_ISODEP_ATS_TB_FWI_MASK (0xF0U)
#define RFAL_ISODEP_ATS_TB_SFGI_MASK (0x0FU)
#define RFAL_ISODEP_ATS_T0_TA_PRESENCE_MASK (0x10U)
#define RFAL_ISODEP_ATS_T0_TB_PRESENCE_MASK (0x20U)
#define RFAL_ISODEP_ATS_T0_TC_PRESENCE_MASK (0x40U)
#define RFAL_ISODEP_ATS_T0_FSCI_MASK (0x0FU)
#define RFAL_ISODEP_ATS_T0_OFFSET (0x01U)
#define RFAL_ISODEP_MAX_I_RETRYS (2U)
#define RFAL_ISODEP_MAX_R_RETRYS (3U)
#define RFAL_ISODEP_MAX_WTX_NACK_RETRYS (3U)
#define RFAL_ISODEP_MAX_WTX_RETRYS (20U)
#define RFAL_ISODEP_MAX_WTX_RETRYS_ULTD (255U)
#define RFAL_ISODEP_MAX_DSL_RETRYS (0U)
#define RFAL_ISODEP_RATS_RETRIES (1U)
typedef enum {
    RFAL_ISODEP_FSXI_16 =
        0,
    RFAL_ISODEP_FSXI_24 =
        1,
    RFAL_ISODEP_FSXI_32 =
        2,
    RFAL_ISODEP_FSXI_40 =
        3,
    RFAL_ISODEP_FSXI_48 =
        4,
    RFAL_ISODEP_FSXI_64 =
        5,
    RFAL_ISODEP_FSXI_96 =
        6,
    RFAL_ISODEP_FSXI_128 =
        7,
    RFAL_ISODEP_FSXI_256 =
        8,
    RFAL_ISODEP_FSXI_512 =
        9,
    RFAL_ISODEP_FSXI_1024 =
        10,
    RFAL_ISODEP_FSXI_2048 =
        11,
    RFAL_ISODEP_FSXI_4096 =
        12
} rfalIsoDepFSxI;
typedef enum {
    RFAL_ISODEP_FSX_16 =
        16,
    RFAL_ISODEP_FSX_24 =
        24,
    RFAL_ISODEP_FSX_32 =
        32,
    RFAL_ISODEP_FSX_40 =
        40,
    RFAL_ISODEP_FSX_48 =
        48,
    RFAL_ISODEP_FSX_64 =
        64,
    RFAL_ISODEP_FSX_96 =
        96,
    RFAL_ISODEP_FSX_128 =
        128,
    RFAL_ISODEP_FSX_256 =
        256,
    RFAL_ISODEP_FSX_512 =
        512,
    RFAL_ISODEP_FSX_1024 =
        1024,
    RFAL_ISODEP_FSX_2048 =
        2048,
    RFAL_ISODEP_FSX_4096 =
        4096,
} rfalIsoDepFSx;
typedef struct {
    uint8_t CMD;
    uint8_t PARAM;
} rfalIsoDepRats;
typedef struct {
    uint8_t TL;
    uint8_t T0;
    uint8_t TA;
    uint8_t TB;
    uint8_t TC;
    uint8_t HB[(15U)];
} rfalIsoDepAts;
typedef struct {
    uint8_t PPSS;
    uint8_t PPS0;
    uint8_t PPS1;
} rfalIsoDepPpsReq;
typedef struct {
    uint8_t PPSS;
} rfalIsoDepPpsRes;
typedef struct {
    uint8_t cmd;
    uint8_t nfcid0[4U];
    struct {
        uint8_t PARAM1;
        uint8_t PARAM2;
        uint8_t PARAM3;
        uint8_t PARAM4;
    } Param;
    uint8_t HLInfo[(32U)];
} rfalIsoDepAttribCmd;
typedef struct {
    uint8_t mbliDid;
    uint8_t HLInfo[(32U)];
} rfalIsoDepAttribRes;
typedef struct {
    uint8_t tag;
    uint8_t length;
    uint8_t value[(16U)];
} rfalIsoDepSParameter;
typedef union {
    union {
        struct {
            rfalIsoDepAts ATS;
            uint8_t ATSLen;
        } Listener;
        struct {
            rfalIsoDepRats RATS;
        } Poller;
    } A;
    union {
        struct {
            rfalIsoDepAttribRes ATTRIB_RES;
            uint8_t ATTRIB_RESLen;
        } Listener;
        struct {
            rfalIsoDepAttribCmd ATTRIB;
            uint8_t ATTRIBLen;
        } Poller;
    } B;
} rfalIsoDepActivation;
typedef struct {
    uint8_t FWI;
    uint32_t FWT;
    uint32_t dFWT;
    uint32_t SFGI;
    uint32_t SFGT;
    uint8_t FSxI;
    uint16_t FSx;
    uint32_t MBL;
    rfalBitRate DSI;
    rfalBitRate DRI;
    uint8_t DID;
    uint8_t NAD;
    _Bool supDID;
    _Bool supNAD;
    _Bool supAdFt;
} rfalIsoDepInfo;
typedef struct {
    rfalIsoDepActivation activation;
    rfalIsoDepInfo info;
} rfalIsoDepDevice;
typedef struct {
    uint8_t mbli;
    uint8_t HLInfo[(32U)];
    uint8_t HLInfoLen;
} rfalIsoDepAttribResParam;
typedef struct {
    uint8_t fsci;
    uint8_t fwi;
    uint8_t sfgi;
    _Bool didSupport;
    uint8_t ta;
    uint8_t* hb;
    uint8_t hbLen;
} rfalIsoDepAtsParam;
typedef struct {
    uint8_t prologue[(3U)];
    uint8_t
        inf[256U];
} rfalIsoDepBufFormat;
typedef struct {
    uint8_t prologue[(3U)];
    uint8_t apdu[512U];
} rfalIsoDepApduBufFormat;
typedef struct {
    rfalIsoDepBufFormat* rxBuf;
    uint16_t* rxLen;
    _Bool* isRxChaining;
    rfalIsoDepDevice* isoDepDev;
} rfalIsoDepListenActvParam;
typedef struct {
    rfalIsoDepBufFormat* txBuf;
    uint16_t txBufLen;
    _Bool isTxChaining;
    rfalIsoDepBufFormat* rxBuf;
    uint16_t* rxLen;
    _Bool* isRxChaining;
    uint32_t FWT;
    uint32_t dFWT;
    uint16_t ourFSx;
    uint16_t FSx;
    uint8_t DID;
} rfalIsoDepTxRxParam;
typedef struct {
    rfalIsoDepApduBufFormat* txBuf;
    uint16_t txBufLen;
    rfalIsoDepApduBufFormat* rxBuf;
    uint16_t* rxLen;
    rfalIsoDepBufFormat* tmpBuf;
    uint32_t FWT;
    uint32_t dFWT;
    uint16_t FSx;
    uint16_t ourFSx;
    uint8_t DID;
} rfalIsoDepApduTxRxParam;
void rfalIsoDepInitialize(void);
void rfalIsoDepInitializeWithParams(
    rfalComplianceMode compMode,
    uint8_t maxRetriesR,
    uint8_t maxRetriesSnWTX,
    uint8_t maxRetriesSWTX,
    uint8_t maxRetriesSDSL,
    uint8_t maxRetriesI,
    uint8_t maxRetriesRATS);
uint16_t rfalIsoDepFSxI2FSx(uint8_t FSxI);
uint32_t rfalIsoDepFWI2FWT(uint8_t fwi);
_Bool rfalIsoDepIsRats(const uint8_t* buf, uint8_t bufLen);
_Bool rfalIsoDepIsAttrib(const uint8_t* buf, uint8_t bufLen);
ReturnCode rfalIsoDepListenStartActivation(
    rfalIsoDepAtsParam* atsParam,
    const rfalIsoDepAttribResParam* attribResParam,
    const uint8_t* buf,
    uint16_t bufLen,
    rfalIsoDepListenActvParam actParam);
ReturnCode rfalIsoDepListenGetActivationStatus(void);
uint16_t rfalIsoDepGetMaxInfLen(void);
ReturnCode rfalIsoDepStartTransceive(rfalIsoDepTxRxParam param);
ReturnCode rfalIsoDepGetTransceiveStatus(void);
ReturnCode rfalIsoDepStartApduTransceive(rfalIsoDepApduTxRxParam param);
ReturnCode rfalIsoDepGetApduTransceiveStatus(void);
ReturnCode rfalIsoDepRATS(rfalIsoDepFSxI FSDI, uint8_t DID, rfalIsoDepAts* ats, uint8_t* atsLen);
ReturnCode rfalIsoDepPPS(uint8_t DID, rfalBitRate DSI, rfalBitRate DRI, rfalIsoDepPpsRes* ppsRes);
ReturnCode rfalIsoDepATTRIB(
    const uint8_t* nfcid0,
    uint8_t PARAM1,
    rfalBitRate DSI,
    rfalBitRate DRI,
    rfalIsoDepFSxI FSDI,
    uint8_t PARAM3,
    uint8_t DID,
    const uint8_t* HLInfo,
    uint8_t HLInfoLen,
    uint32_t fwt,
    rfalIsoDepAttribRes* attribRes,
    uint8_t* attribResLen);
ReturnCode rfalIsoDepDeselect(void);
ReturnCode rfalIsoDepPollAHandleActivation(
    rfalIsoDepFSxI FSDI,
    uint8_t DID,
    rfalBitRate maxBR,
    rfalIsoDepDevice* isoDepDev);
ReturnCode rfalIsoDepPollBHandleActivation(
    rfalIsoDepFSxI FSDI,
    uint8_t DID,
    rfalBitRate maxBR,
    uint8_t PARAM1,
    const rfalNfcbListenDevice* nfcbDev,
    const uint8_t* HLInfo,
    uint8_t HLInfoLen,
    rfalIsoDepDevice* isoDepDev);
ReturnCode rfalIsoDepPollHandleSParameters(
    rfalIsoDepDevice* isoDepDev,
    rfalBitRate maxTxBR,
    rfalBitRate maxRxBR);
ReturnCode rfalIsoDepPollAStartActivation(
    rfalIsoDepFSxI FSDI,
    uint8_t DID,
    rfalBitRate maxBR,
    rfalIsoDepDevice* isoDepDev);
ReturnCode rfalIsoDepPollAGetActivationStatus(void);
ReturnCode rfalIsoDepPollBStartActivation(
    rfalIsoDepFSxI FSDI,
    uint8_t DID,
    rfalBitRate maxBR,
    uint8_t PARAM1,
    const rfalNfcbListenDevice* nfcbDev,
    const uint8_t* HLInfo,
    uint8_t HLInfoLen,
    rfalIsoDepDevice* isoDepDev);
ReturnCode rfalIsoDepPollBGetActivationStatus(void);
#define RFAL_NFC_TECH_NONE 0x0000U
#define RFAL_NFC_POLL_TECH_A 0x0001U
#define RFAL_NFC_POLL_TECH_B 0x0002U
#define RFAL_NFC_POLL_TECH_F 0x0004U
#define RFAL_NFC_POLL_TECH_V 0x0008U
#define RFAL_NFC_POLL_TECH_AP2P 0x0010U
#define RFAL_NFC_POLL_TECH_ST25TB 0x0020U
#define RFAL_NFC_LISTEN_TECH_A 0x1000U
#define RFAL_NFC_LISTEN_TECH_B 0x2000U
#define RFAL_NFC_LISTEN_TECH_F 0x4000U
#define RFAL_NFC_LISTEN_TECH_AP2P 0x8000U
#define rfalNfcIsDevActivated(st) (((st) >= RFAL_NFC_STATE_ACTIVATED) && ((st) < RFAL_NFC_STATE_DEACTIVATION))
#define rfalNfcIsInDiscovery(st) (((st) >= RFAL_NFC_STATE_START_DISCOVERY) && ((st) < RFAL_NFC_STATE_ACTIVATED))
#define rfalNfcIsRemDevPoller(tp) (((tp) >= RFAL_NFC_POLL_TYPE_NFCA) && ((tp) <= RFAL_NFC_POLL_TYPE_AP2P))
#define rfalNfcIsRemDevListener(tp) (((int16_t)(tp) >= (int16_t)RFAL_NFC_LISTEN_TYPE_NFCA) && ((tp) <= RFAL_NFC_LISTEN_TYPE_AP2P))
typedef enum {
    RFAL_NFC_STATE_NOTINIT = 0,
    RFAL_NFC_STATE_IDLE = 1,
    RFAL_NFC_STATE_START_DISCOVERY = 2,
    RFAL_NFC_STATE_WAKEUP_MODE = 3,
    RFAL_NFC_STATE_POLL_TECHDETECT = 10,
    RFAL_NFC_STATE_POLL_COLAVOIDANCE = 11,
    RFAL_NFC_STATE_POLL_SELECT = 12,
    RFAL_NFC_STATE_POLL_ACTIVATION = 13,
    RFAL_NFC_STATE_LISTEN_TECHDETECT = 20,
    RFAL_NFC_STATE_LISTEN_COLAVOIDANCE = 21,
    RFAL_NFC_STATE_LISTEN_ACTIVATION = 22,
    RFAL_NFC_STATE_LISTEN_SLEEP = 23,
    RFAL_NFC_STATE_ACTIVATED = 30,
    RFAL_NFC_STATE_DATAEXCHANGE = 31,
    RFAL_NFC_STATE_DATAEXCHANGE_DONE = 33,
    RFAL_NFC_STATE_DEACTIVATION = 34
} rfalNfcState;
typedef enum {
    RFAL_NFC_LISTEN_TYPE_NFCA = 0,
    RFAL_NFC_LISTEN_TYPE_NFCB = 1,
    RFAL_NFC_LISTEN_TYPE_NFCF = 2,
    RFAL_NFC_LISTEN_TYPE_NFCV = 3,
    RFAL_NFC_LISTEN_TYPE_ST25TB = 4,
    RFAL_NFC_LISTEN_TYPE_AP2P = 5,
    RFAL_NFC_POLL_TYPE_NFCA = 10,
    RFAL_NFC_POLL_TYPE_NFCB = 11,
    RFAL_NFC_POLL_TYPE_NFCF = 12,
    RFAL_NFC_POLL_TYPE_NFCV = 13,
    RFAL_NFC_POLL_TYPE_AP2P = 15
} rfalNfcDevType;
typedef enum {
    RFAL_NFC_INTERFACE_RF = 0,
    RFAL_NFC_INTERFACE_ISODEP = 1,
    RFAL_NFC_INTERFACE_NFCDEP = 2
} rfalNfcRfInterface;
typedef struct {
    rfalNfcDevType type;
    union {
        rfalNfcaListenDevice nfca;
        rfalNfcbListenDevice nfcb;
        rfalNfcfListenDevice nfcf;
        rfalNfcvListenDevice nfcv;
        rfalSt25tbListenDevice st25tb;
    } dev;
    uint8_t* nfcid;
    uint8_t nfcidLen;
    rfalNfcRfInterface rfInterface;
    union {
        rfalIsoDepDevice isoDep;
        rfalNfcDepDevice nfcDep;
    } proto;
} rfalNfcDevice;
typedef struct {
    rfalComplianceMode compMode;
    uint16_t techs2Find;
    uint16_t totalDuration;
    uint8_t devLimit;
    rfalBitRate maxBR;
    rfalBitRate nfcfBR;
    uint8_t
        nfcid3[10U];
    uint8_t GB[(64U - 16U)];
    uint8_t GBLen;
    rfalBitRate ap2pBR;
    rfalLmConfPA lmConfigPA;
    rfalLmConfPF lmConfigPF;
    void (*notifyCb)(rfalNfcState st);
    _Bool wakeupEnabled;
    _Bool wakeupConfigDefault;
    rfalWakeUpConfig wakeupConfig;
    _Bool activate_after_sak;
} rfalNfcDiscoverParam;
typedef union {
    uint8_t rfBuf[256U];
    rfalIsoDepApduBufFormat isoDepBuf;
    rfalNfcDepPduBufFormat nfcDepBuf;
} rfalNfcBuffer;
void rfalNfcWorker(void);
ReturnCode rfalNfcInitialize(void);
ReturnCode rfalNfcDiscover(const rfalNfcDiscoverParam* disParams);
rfalNfcState rfalNfcGetState(void);
ReturnCode rfalNfcGetDevicesFound(rfalNfcDevice** devList, uint8_t* devCnt);
ReturnCode rfalNfcGetActiveDevice(rfalNfcDevice** dev);
ReturnCode rfalNfcSelect(uint8_t devIdx);
ReturnCode rfalNfcDataExchangeStart(
    uint8_t* txData,
    uint16_t txDataLen,
    uint8_t** rxData,
    uint16_t** rvdLen,
    uint32_t fwt,
    uint32_t tx_flag);
ReturnCode rfalNfcDataExchangeCustomStart(
    uint8_t* txData,
    uint16_t txDataLen,
    uint8_t** rxData,
    uint16_t** rvdLen,
    uint32_t fwt,
    uint32_t flags);
ReturnCode rfalNfcDataExchangeGetStatus(void);
ReturnCode rfalNfcDeactivate(_Bool discovery);
       
       
#define DIGITAL_SIGNAL_MS(x) (x * 100000000UL)
#define DIGITAL_SIGNAL_US(x) (x * 100000UL)
#define DIGITAL_SIGNAL_NS(x) (x * 100UL)
#define DIGITAL_SIGNAL_PS(x) (x / 10UL)
typedef struct DigitalSignalInternals DigitalSignalInternals;
typedef struct DigitalSignal {
    _Bool start_level;
    uint32_t edge_cnt;
    uint32_t edges_max_cnt;
    uint32_t* edge_timings;
    uint32_t* reload_reg_buff;
    DigitalSignalInternals* internals;
} DigitalSignal;
typedef struct DigitalSequence DigitalSequence;
DigitalSignal* digital_signal_alloc(uint32_t max_edges_cnt);
void digital_signal_free(DigitalSignal* signal);
void digital_signal_add(DigitalSignal* signal, uint32_t ticks);
void digital_signal_add_pulse(DigitalSignal* signal, uint32_t ticks, _Bool level);
_Bool digital_signal_append(DigitalSignal* signal_a, DigitalSignal* signal_b);
void digital_signal_prepare_arr(DigitalSignal* signal);
_Bool digital_signal_get_start_level(DigitalSignal* signal);
uint32_t digital_signal_get_edges_cnt(DigitalSignal* signal);
uint32_t digital_signal_get_edge(DigitalSignal* signal, uint32_t edge_num);
void digital_signal_send(DigitalSignal* signal, const GpioPin* gpio);
DigitalSequence* digital_sequence_alloc(uint32_t size, const GpioPin* gpio);
void digital_sequence_free(DigitalSequence* sequence);
void digital_sequence_set_signal(
    DigitalSequence* sequence,
    uint8_t signal_index,
    DigitalSignal* signal);
void digital_sequence_set_sendtime(DigitalSequence* sequence, uint32_t send_time);
void digital_sequence_add(DigitalSequence* sequence, uint8_t signal_index);
_Bool digital_sequence_send(DigitalSequence* sequence);
void digital_sequence_clear(DigitalSequence* sequence);
typedef struct {
    DigitalSignal* one;
    DigitalSignal* zero;
    DigitalSignal* tx_signal;
} NfcaSignal;
uint16_t nfca_get_crc16(uint8_t* buff, uint16_t len);
void nfca_append_crc16(uint8_t* buff, uint16_t len);
_Bool nfca_emulation_handler(
    uint8_t* buff_rx,
    uint16_t buff_rx_len,
    uint8_t* buff_tx,
    uint16_t* buff_tx_len);
NfcaSignal* nfca_signal_alloc();
void nfca_signal_free(NfcaSignal* nfca_signal);
void nfca_signal_encode(NfcaSignal* nfca_signal, uint8_t* data, uint16_t bits, uint8_t* parity);
#define FURI_HAL_NFC_UID_MAX_LEN 10
#define FURI_HAL_NFC_DATA_BUFF_SIZE (512)
#define FURI_HAL_NFC_PARITY_BUFF_SIZE (FURI_HAL_NFC_DATA_BUFF_SIZE / 8)
#define FURI_HAL_NFC_TXRX_DEFAULT ((uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_REMV | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_REMV | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_AUTO)
#define FURI_HAL_NFC_TX_DEFAULT_RX_NO_CRC ((uint32_t)RFAL_TXRX_FLAGS_CRC_TX_AUTO | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_REMV | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_AUTO)
#define FURI_HAL_NFC_TXRX_WITH_PAR ((uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_AUTO)
#define FURI_HAL_NFC_TXRX_RAW ((uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_KEEP | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE)
#define FURI_HAL_NFC_TX_RAW_RX_DEFAULT ((uint32_t)RFAL_TXRX_FLAGS_CRC_TX_MANUAL | (uint32_t)RFAL_TXRX_FLAGS_CRC_RX_REMV | (uint32_t)RFAL_TXRX_FLAGS_PAR_RX_REMV | (uint32_t)RFAL_TXRX_FLAGS_PAR_TX_NONE)
typedef enum {
    FuriHalNfcTxRxTypeDefault,
    FuriHalNfcTxRxTypeRxNoCrc,
    FuriHalNfcTxRxTypeRxKeepPar,
    FuriHalNfcTxRxTypeRaw,
    FuriHalNfcTxRxTypeRxRaw,
    FuriHalNfcTxRxTransparent,
} FuriHalNfcTxRxType;
typedef _Bool (*FuriHalNfcEmulateCallback)(
    uint8_t* buff_rx,
    uint16_t buff_rx_len,
    uint8_t* buff_tx,
    uint16_t* buff_tx_len,
    uint32_t* flags,
    void* context);
typedef enum {
    FuriHalNfcTypeA,
    FuriHalNfcTypeB,
    FuriHalNfcTypeF,
    FuriHalNfcTypeV,
} FuriHalNfcType;
typedef enum {
    FuriHalNfcInterfaceRf,
    FuriHalNfcInterfaceIsoDep,
    FuriHalNfcInterfaceNfcDep,
} FuriHalNfcInterface;
typedef struct {
    FuriHalNfcType type;
    FuriHalNfcInterface interface;
    uint8_t uid_len;
    uint8_t uid[10];
    uint32_t cuid;
    uint8_t atqa[2];
    uint8_t sak;
} FuriHalNfcDevData;
typedef void (
    *FuriHalNfcTxRxSniffCallback)(uint8_t* data, uint16_t bits, _Bool crc_dropped, void* context);
typedef struct {
    uint8_t tx_data[(512)];
    uint8_t tx_parity[((512) / 8)];
    uint16_t tx_bits;
    uint8_t rx_data[(512)];
    uint8_t rx_parity[((512) / 8)];
    uint16_t rx_bits;
    FuriHalNfcTxRxType tx_rx_type;
    NfcaSignal* nfca_signal;
    FuriHalNfcTxRxSniffCallback sniff_tx;
    FuriHalNfcTxRxSniffCallback sniff_rx;
    void* sniff_context;
} FuriHalNfcTxRxContext;
void furi_hal_nfc_init();
_Bool furi_hal_nfc_is_busy();
_Bool furi_hal_nfc_is_init();
void furi_hal_nfc_field_on();
void furi_hal_nfc_field_off();
void furi_hal_nfc_start_sleep();
void furi_hal_nfc_stop_cmd();
void furi_hal_nfc_exit_sleep();
_Bool furi_hal_nfc_detect(FuriHalNfcDevData* nfc_data, uint32_t timeout);
_Bool furi_hal_nfc_activate_nfca(uint32_t timeout, uint32_t* cuid);
_Bool furi_hal_nfc_listen(
    uint8_t* uid,
    uint8_t uid_len,
    uint8_t* atqa,
    uint8_t sak,
    _Bool activate_after_sak,
    uint32_t timeout);
void furi_hal_nfc_listen_start(FuriHalNfcDevData* nfc_data);
_Bool furi_hal_nfc_listen_rx(FuriHalNfcTxRxContext* tx_rx, uint32_t timeout_ms);
void furi_hal_nfc_listen_sleep();
_Bool furi_hal_nfc_emulate_nfca(
    uint8_t* uid,
    uint8_t uid_len,
    uint8_t* atqa,
    uint8_t sak,
    FuriHalNfcEmulateCallback callback,
    void* context,
    uint32_t timeout);
_Bool furi_hal_nfc_tx_rx(FuriHalNfcTxRxContext* tx_rx, uint16_t timeout_ms);
_Bool furi_hal_nfc_tx_rx_full(FuriHalNfcTxRxContext* tx_rx);
void furi_hal_nfc_sleep();
void furi_hal_nfc_stop();
#define furi_hal_nfc_ll_ms2fc rfalConvMsTo1fc
#define FURI_HAL_NFC_LL_TXRX_FLAGS_CRC_TX_MANUAL RFAL_TXRX_FLAGS_CRC_TX_MANUAL
#define FURI_HAL_NFC_LL_TXRX_FLAGS_AGC_ON RFAL_TXRX_FLAGS_AGC_ON
#define FURI_HAL_NFC_LL_TXRX_FLAGS_PAR_RX_REMV RFAL_TXRX_FLAGS_PAR_RX_REMV
#define FURI_HAL_NFC_LL_TXRX_FLAGS_CRC_RX_KEEP RFAL_TXRX_FLAGS_CRC_RX_KEEP
typedef enum {
    FuriHalNfcReturnOk = 0,
    FuriHalNfcReturnNomem = 1,
    FuriHalNfcReturnBusy = 2,
    FuriHalNfcReturnIo = 3,
    FuriHalNfcReturnTimeout = 4,
    FuriHalNfcReturnRequest =
        5,
    FuriHalNfcReturnNomsg = 6,
    FuriHalNfcReturnParam = 7,
    FuriHalNfcReturnSystem = 8,
    FuriHalNfcReturnFraming = 9,
    FuriHalNfcReturnOverrun = 10,
    FuriHalNfcReturnProto = 11,
    FuriHalNfcReturnInternal = 12,
    FuriHalNfcReturnAgain = 13,
    FuriHalNfcReturnMemCorrupt = 14,
    FuriHalNfcReturnNotImplemented = 15,
    FuriHalNfcReturnPcCorrupt =
        16,
    FuriHalNfcReturnSend = 17,
    FuriHalNfcReturnIgnore = 18,
    FuriHalNfcReturnSemantic = 19,
    FuriHalNfcReturnSyntax = 20,
    FuriHalNfcReturnCrc = 21,
    FuriHalNfcReturnNotfound = 22,
    FuriHalNfcReturnNotunique =
        23,
    FuriHalNfcReturnNotsupp = 24,
    FuriHalNfcReturnWrite = 25,
    FuriHalNfcReturnFifo = 26,
    FuriHalNfcReturnPar = 27,
    FuriHalNfcReturnDone = 28,
    FuriHalNfcReturnRfCollision =
        29,
    FuriHalNfcReturnHwOverrun = 30,
    FuriHalNfcReturnReleaseReq = 31,
    FuriHalNfcReturnSleepReq = 32,
    FuriHalNfcReturnWrongState = 33,
    FuriHalNfcReturnMaxReruns = 34,
    FuriHalNfcReturnDisabled = 35,
    FuriHalNfcReturnHwMismatch = 36,
    FuriHalNfcReturnLinkLoss =
        37,
    FuriHalNfcReturnInvalidHandle = 38,
    FuriHalNfcReturnIncompleteByte = 40,
    FuriHalNfcReturnIncompleteByte01 = 41,
    FuriHalNfcReturnIncompleteByte02 = 42,
    FuriHalNfcReturnIncompleteByte03 = 43,
    FuriHalNfcReturnIncompleteByte04 = 44,
    FuriHalNfcReturnIncompleteByte05 = 45,
    FuriHalNfcReturnIncompleteByte06 = 46,
    FuriHalNfcReturnIncompleteByte07 = 47,
} FuriHalNfcReturn;
typedef enum {
    FuriHalNfcModeNone = 0,
    FuriHalNfcModePollNfca = 1,
    FuriHalNfcModePollNfcaT1t = 2,
    FuriHalNfcModePollNfcb = 3,
    FuriHalNfcModePollBPrime = 4,
    FuriHalNfcModePollBCts = 5,
    FuriHalNfcModePollNfcf = 6,
    FuriHalNfcModePollNfcv = 7,
    FuriHalNfcModePollPicopass = 8,
    FuriHalNfcModePollActiveP2p = 9,
    FuriHalNfcModeListenNfca = 10,
    FuriHalNfcModeListenNfcb = 11,
    FuriHalNfcModeListenNfcf = 12,
    FuriHalNfcModeListenActiveP2p = 13
} FuriHalNfcMode;
typedef enum {
    FuriHalNfcBitrate106 = 0,
    FuriHalNfcBitrate212 = 1,
    FuriHalNfcBitrate424 = 2,
    FuriHalNfcBitrate848 = 3,
    FuriHalNfcBitrate1695 = 4,
    FuriHalNfcBitrate3390 = 5,
    FuriHalNfcBitrate6780 = 6,
    FuriHalNfcBitrate13560 = 7,
    FuriHalNfcBitrate52p97 = 0xEB,
    FuriHalNfcBitrate26p48 =
        0xEC,
    FuriHalNfcBitrate1p66 = 0xED,
    FuriHalNfcBitrateKeep = 0xFF
} FuriHalNfcBitrate;
FuriHalNfcReturn
    furi_hal_nfc_ll_set_mode(FuriHalNfcMode mode, FuriHalNfcBitrate txBR, FuriHalNfcBitrate rxBR);
#define FURI_HAL_NFC_LL_GT_NFCA furi_hal_nfc_ll_ms2fc(5U)
#define FURI_HAL_NFC_LL_GT_NFCB furi_hal_nfc_ll_ms2fc(5U)
#define FURI_HAL_NFC_LL_GT_NFCF furi_hal_nfc_ll_ms2fc(20U)
#define FURI_HAL_NFC_LL_GT_NFCV furi_hal_nfc_ll_ms2fc(5U)
#define FURI_HAL_NFC_LL_GT_PICOPASS furi_hal_nfc_ll_ms2fc(1U)
#define FURI_HAL_NFC_LL_GT_AP2P furi_hal_nfc_ll_ms2fc(5U)
#define FURI_HAL_NFC_LL_GT_AP2P_ADJUSTED furi_hal_nfc_ll_ms2fc( 5U + 25U)
void furi_hal_nfc_ll_set_guard_time(uint32_t cycles);
typedef enum {
    FuriHalNfcErrorHandlingNone = 0,
    FuriHalNfcErrorHandlingNfc = 1,
    FuriHalNfcErrorHandlingEmvco =
        2
} FuriHalNfcErrorHandling;
void furi_hal_nfc_ll_set_error_handling(FuriHalNfcErrorHandling eHandling);
#define FURI_HAL_NFC_LL_FDT_LISTEN_NFCA_POLLER 1172U
#define FURI_HAL_NFC_LL_FDT_LISTEN_NFCB_POLLER 1008U
#define FURI_HAL_NFC_LL_FDT_LISTEN_NFCF_POLLER 2672U
#define FURI_HAL_NFC_LL_FDT_LISTEN_NFCV_POLLER 4310U
#define FURI_HAL_NFC_LL_FDT_LISTEN_PICOPASS_POLLER 3400U
#define FURI_HAL_NFC_LL_FDT_LISTEN_AP2P_POLLER 64U
#define FURI_HAL_NFC_LL_FDT_LISTEN_NFCA_LISTENER 1172U
#define FURI_HAL_NFC_LL_FDT_LISTEN_NFCB_LISTENER 1024U
#define FURI_HAL_NFC_LL_FDT_LISTEN_NFCF_LISTENER 2688U
#define FURI_HAL_NFC_LL_FDT_LISTEN_AP2P_LISTENER 64U
void furi_hal_nfc_ll_set_fdt_listen(uint32_t cycles);
#define FURI_HAL_NFC_LL_FDT_POLL_NFCA_POLLER 6780U
#define FURI_HAL_NFC_LL_FDT_POLL_NFCA_T1T_POLLER 384U
#define FURI_HAL_NFC_LL_FDT_POLL_NFCB_POLLER 6780U
#define FURI_HAL_NFC_LL_FDT_POLL_NFCF_POLLER 6800U
#define FURI_HAL_NFC_LL_FDT_POLL_NFCV_POLLER 4192U
#define FURI_HAL_NFC_LL_FDT_POLL_PICOPASS_POLLER 1790U
#define FURI_HAL_NFC_LL_FDT_POLL_AP2P_POLLER 0U
void furi_hal_nfc_ll_set_fdt_poll(uint32_t FDTPoll);
void furi_hal_nfc_ll_txrx_on();
void furi_hal_nfc_ll_txrx_off();
FuriHalNfcReturn furi_hal_nfc_ll_txrx(
    uint8_t* txBuf,
    uint16_t txBufLen,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* actLen,
    uint32_t flags,
    uint32_t fwt);
FuriHalNfcReturn furi_hal_nfc_ll_txrx_bits(
    uint8_t* txBuf,
    uint16_t txBufLen,
    uint8_t* rxBuf,
    uint16_t rxBufLen,
    uint16_t* actLen,
    uint32_t flags,
    uint32_t fwt);
void furi_hal_nfc_ll_poll();
       
typedef struct FuriHalUsbInterface FuriHalUsbInterface;
struct FuriHalUsbInterface {
    void (*init)(usbd_device* dev, FuriHalUsbInterface* intf, void* ctx);
    void (*deinit)(usbd_device* dev);
    void (*wakeup)(usbd_device* dev);
    void (*suspend)(usbd_device* dev);
    struct usb_device_descriptor* dev_descr;
    void* str_manuf_descr;
    void* str_prod_descr;
    void* str_serial_descr;
    void* cfg_descr;
};
extern FuriHalUsbInterface usb_cdc_single;
extern FuriHalUsbInterface usb_cdc_dual;
extern FuriHalUsbInterface usb_hid;
extern FuriHalUsbInterface usb_hid_u2f;
typedef enum {
    FuriHalUsbStateEventReset,
    FuriHalUsbStateEventWakeup,
    FuriHalUsbStateEventSuspend,
    FuriHalUsbStateEventDescriptorRequest,
} FuriHalUsbStateEvent;
typedef void (*FuriHalUsbStateCallback)(FuriHalUsbStateEvent state, void* context);
void furi_hal_usb_init();
_Bool furi_hal_usb_set_config(FuriHalUsbInterface* new_if, void* ctx);
FuriHalUsbInterface* furi_hal_usb_get_config();
void furi_hal_usb_lock();
void furi_hal_usb_unlock();
_Bool furi_hal_usb_is_locked();
void furi_hal_usb_disable();
void furi_hal_usb_enable();
void furi_hal_usb_set_state_callback(FuriHalUsbStateCallback cb, void* ctx);
void furi_hal_usb_reinit();
       
#define HID_KEYBOARD_NONE 0x00
enum HidKeyboardMods {
    KEY_MOD_LEFT_CTRL = (1 << 8),
    KEY_MOD_LEFT_SHIFT = (1 << 9),
    KEY_MOD_LEFT_ALT = (1 << 10),
    KEY_MOD_LEFT_GUI = (1 << 11),
    KEY_MOD_RIGHT_CTRL = (1 << 12),
    KEY_MOD_RIGHT_SHIFT = (1 << 13),
    KEY_MOD_RIGHT_ALT = (1 << 14),
    KEY_MOD_RIGHT_GUI = (1 << 15),
};
static const uint16_t hid_asciimap[] = {
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x2A,
    0x2B,
    0x28,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x2C,
    0x1E | KEY_MOD_LEFT_SHIFT,
    0x34 | KEY_MOD_LEFT_SHIFT,
    0x20 | KEY_MOD_LEFT_SHIFT,
    0x21 | KEY_MOD_LEFT_SHIFT,
    0x22 | KEY_MOD_LEFT_SHIFT,
    0x24 | KEY_MOD_LEFT_SHIFT,
    0x34,
    0x26 | KEY_MOD_LEFT_SHIFT,
    0x27 | KEY_MOD_LEFT_SHIFT,
    0x25 | KEY_MOD_LEFT_SHIFT,
    0x2E | KEY_MOD_LEFT_SHIFT,
    0x36,
    0x2D,
    0x37,
    0x38,
    0x27,
    0x1E,
    0x1F,
    0x20,
    0x21,
    0x22,
    0x23,
    0x24,
    0x25,
    0x26,
    0x33 | KEY_MOD_LEFT_SHIFT,
    0x33,
    0x36 | KEY_MOD_LEFT_SHIFT,
    0x2E,
    0x37 | KEY_MOD_LEFT_SHIFT,
    0x38 | KEY_MOD_LEFT_SHIFT,
    0x1F | KEY_MOD_LEFT_SHIFT,
    0x04 | KEY_MOD_LEFT_SHIFT,
    0x05 | KEY_MOD_LEFT_SHIFT,
    0x06 | KEY_MOD_LEFT_SHIFT,
    0x07 | KEY_MOD_LEFT_SHIFT,
    0x08 | KEY_MOD_LEFT_SHIFT,
    0x09 | KEY_MOD_LEFT_SHIFT,
    0x0A | KEY_MOD_LEFT_SHIFT,
    0x0B | KEY_MOD_LEFT_SHIFT,
    0x0C | KEY_MOD_LEFT_SHIFT,
    0x0D | KEY_MOD_LEFT_SHIFT,
    0x0E | KEY_MOD_LEFT_SHIFT,
    0x0F | KEY_MOD_LEFT_SHIFT,
    0x10 | KEY_MOD_LEFT_SHIFT,
    0x11 | KEY_MOD_LEFT_SHIFT,
    0x12 | KEY_MOD_LEFT_SHIFT,
    0x13 | KEY_MOD_LEFT_SHIFT,
    0x14 | KEY_MOD_LEFT_SHIFT,
    0x15 | KEY_MOD_LEFT_SHIFT,
    0x16 | KEY_MOD_LEFT_SHIFT,
    0x17 | KEY_MOD_LEFT_SHIFT,
    0x18 | KEY_MOD_LEFT_SHIFT,
    0x19 | KEY_MOD_LEFT_SHIFT,
    0x1A | KEY_MOD_LEFT_SHIFT,
    0x1B | KEY_MOD_LEFT_SHIFT,
    0x1C | KEY_MOD_LEFT_SHIFT,
    0x1D | KEY_MOD_LEFT_SHIFT,
    0x2F,
    0x31,
    0x30,
    0x23 | KEY_MOD_LEFT_SHIFT,
    0x2D | KEY_MOD_LEFT_SHIFT,
    0x35,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
    0x09,
    0x0A,
    0x0B,
    0x0C,
    0x0D,
    0x0E,
    0x0F,
    0x10,
    0x11,
    0x12,
    0x13,
    0x14,
    0x15,
    0x16,
    0x17,
    0x18,
    0x19,
    0x1A,
    0x1B,
    0x1C,
    0x1D,
    0x2F | KEY_MOD_LEFT_SHIFT,
    0x31 | KEY_MOD_LEFT_SHIFT,
    0x30 | KEY_MOD_LEFT_SHIFT,
    0x35 | KEY_MOD_LEFT_SHIFT,
    0x00,
};
typedef struct {
    uint32_t vid;
    uint32_t pid;
    char manuf[32];
    char product[32];
} FuriHalUsbHidConfig;
typedef void (*HidStateCallback)(_Bool state, void* context);
#define HID_ASCII_TO_KEY(x) (((uint8_t)x < 128) ? (hid_asciimap[(uint8_t)x]) : HID_KEYBOARD_NONE)
enum HidKeyboardLeds {
    HID_KB_LED_NUM = (1 << 0),
    HID_KB_LED_CAPS = (1 << 1),
    HID_KB_LED_SCROLL = (1 << 2),
};
enum HidMouseButtons {
    HID_MOUSE_BTN_LEFT = (1 << 0),
    HID_MOUSE_BTN_RIGHT = (1 << 1),
    HID_MOUSE_BTN_WHEEL = (1 << 2),
};
_Bool furi_hal_hid_is_connected();
uint8_t furi_hal_hid_get_led_state();
void furi_hal_hid_set_state_callback(HidStateCallback cb, void* ctx);
_Bool furi_hal_hid_kb_press(uint16_t button);
_Bool furi_hal_hid_kb_release(uint16_t button);
_Bool furi_hal_hid_kb_release_all();
_Bool furi_hal_hid_mouse_move(int8_t dx, int8_t dy);
_Bool furi_hal_hid_mouse_press(uint8_t button);
_Bool furi_hal_hid_mouse_release(uint8_t button);
_Bool furi_hal_hid_mouse_scroll(int8_t delta);
_Bool furi_hal_hid_consumer_key_press(uint16_t button);
_Bool furi_hal_hid_consumer_key_release(uint16_t button);
       
#define FURI_HAL_COMPRESS_EXP_BUFF_SIZE_LOG (8)
#define FURI_HAL_COMPRESS_LOOKAHEAD_BUFF_SIZE_LOG (4)
typedef struct FuriHalCompress FuriHalCompress;
void furi_hal_compress_icon_init();
void furi_hal_compress_icon_decode(const uint8_t* icon_data, uint8_t** decoded_buff);
FuriHalCompress* furi_hal_compress_alloc(uint16_t compress_buff_size);
void furi_hal_compress_free(FuriHalCompress* compress);
_Bool furi_hal_compress_encode(
    FuriHalCompress* compress,
    uint8_t* data_in,
    size_t data_in_size,
    uint8_t* data_out,
    size_t data_out_size,
    size_t* data_res_size);
_Bool furi_hal_compress_decode(
    FuriHalCompress* compress,
    uint8_t* data_in,
    size_t data_in_size,
    uint8_t* data_out,
    size_t data_out_size,
    size_t* data_res_size);
       
typedef enum {
    FuriHalUartIdUSART1,
    FuriHalUartIdLPUART1,
} FuriHalUartId;
typedef enum {
    UartIrqEventRXNE,
} UartIrqEvent;
void furi_hal_uart_init(FuriHalUartId channel, uint32_t baud);
void furi_hal_uart_deinit(FuriHalUartId channel);
void furi_hal_uart_suspend(FuriHalUartId channel);
void furi_hal_uart_resume(FuriHalUartId channel);
void furi_hal_uart_set_br(FuriHalUartId channel, uint32_t baud);
void furi_hal_uart_tx(FuriHalUartId channel, uint8_t* buffer, size_t buffer_size);
void furi_hal_uart_set_irq_cb(
    FuriHalUartId channel,
    void (*callback)(UartIrqEvent event, uint8_t data, void* context),
    void* context);
       
void furi_hal_info_get(PropertyValueCallback callback, char sep, void* context);
       
uint32_t furi_hal_random_get();
void furi_hal_random_fill_buf(uint8_t* buf, uint32_t len);
void furi_hal_init_early();
void furi_hal_deinit_early();
void furi_hal_init();
void furi_hal_switch(void* address);
#define MAX_TIMINGS_AMOUNT 1024U
typedef struct InfraredWorker InfraredWorker;
typedef struct InfraredWorkerSignal InfraredWorkerSignal;
typedef enum {
    InfraredWorkerGetSignalResponseNew,
    InfraredWorkerGetSignalResponseSame,
    InfraredWorkerGetSignalResponseStop,
} InfraredWorkerGetSignalResponse;
typedef InfraredWorkerGetSignalResponse (
    *InfraredWorkerGetSignalCallback)(void* context, InfraredWorker* instance);
typedef void (*InfraredWorkerMessageSentCallback)(void* context);
typedef void (
    *InfraredWorkerReceivedSignalCallback)(void* context, InfraredWorkerSignal* received_signal);
InfraredWorker* infrared_worker_alloc();
void infrared_worker_free(InfraredWorker* instance);
void infrared_worker_rx_start(InfraredWorker* instance);
void infrared_worker_rx_stop(InfraredWorker* instance);
void infrared_worker_rx_set_received_signal_callback(
    InfraredWorker* instance,
    InfraredWorkerReceivedSignalCallback callback,
    void* context);
void infrared_worker_rx_enable_blink_on_receiving(InfraredWorker* instance, _Bool enable);
void infrared_worker_rx_enable_signal_decoding(InfraredWorker* instance, _Bool enable);
_Bool infrared_worker_signal_is_decoded(const InfraredWorkerSignal* signal);
void infrared_worker_tx_start(InfraredWorker* instance);
void infrared_worker_tx_stop(InfraredWorker* instance);
void infrared_worker_tx_set_get_signal_callback(
    InfraredWorker* instance,
    InfraredWorkerGetSignalCallback callback,
    void* context);
void infrared_worker_tx_set_signal_sent_callback(
    InfraredWorker* instance,
    InfraredWorkerMessageSentCallback callback,
    void* context);
InfraredWorkerGetSignalResponse
    infrared_worker_tx_get_signal_steady_callback(void* context, InfraredWorker* instance);
void infrared_worker_get_raw_signal(
    const InfraredWorkerSignal* signal,
    const uint32_t** timings,
    size_t* timings_cnt);
const InfraredMessage* infrared_worker_get_decoded_signal(const InfraredWorkerSignal* signal);
void infrared_worker_set_decoded_signal(InfraredWorker* instance, const InfraredMessage* message);
void infrared_worker_set_raw_signal(
    InfraredWorker* instance,
    const uint32_t* timings,
    size_t timings_cnt);
       
#define INFRARED_MAX_FREQUENCY 56000
#define INFRARED_MIN_FREQUENCY 10000
typedef enum {
    FuriHalInfraredTxGetDataStateOk,
    FuriHalInfraredTxGetDataStateDone,
    FuriHalInfraredTxGetDataStateLastDone,
} FuriHalInfraredTxGetDataState;
typedef FuriHalInfraredTxGetDataState (
    *FuriHalInfraredTxGetDataISRCallback)(void* context, uint32_t* duration, _Bool* level);
typedef void (*FuriHalInfraredTxSignalSentISRCallback)(void* context);
typedef void (*FuriHalInfraredRxCaptureCallback)(void* ctx, _Bool level, uint32_t duration);
typedef void (*FuriHalInfraredRxTimeoutCallback)(void* ctx);
void furi_hal_infrared_async_rx_start(void);
void furi_hal_infrared_async_rx_stop(void);
void furi_hal_infrared_async_rx_set_timeout(uint32_t timeout_us);
void furi_hal_infrared_async_rx_set_capture_isr_callback(
    FuriHalInfraredRxCaptureCallback callback,
    void* ctx);
void furi_hal_infrared_async_rx_set_timeout_isr_callback(
    FuriHalInfraredRxTimeoutCallback callback,
    void* ctx);
_Bool furi_hal_infrared_is_busy(void);
void furi_hal_infrared_async_tx_set_data_isr_callback(
    FuriHalInfraredTxGetDataISRCallback callback,
    void* context);
void furi_hal_infrared_async_tx_start(uint32_t freq, float duty_cycle);
void furi_hal_infrared_async_tx_stop(void);
void furi_hal_infrared_async_tx_wait_termination(void);
void furi_hal_infrared_async_tx_set_signal_sent_isr_callback(
    FuriHalInfraredTxSignalSentISRCallback callback,
    void* context);
void infrared_send(const InfraredMessage* message, int times);
void infrared_send_raw(const uint32_t timings[], uint32_t timings_cnt, _Bool start_from_mark);
void infrared_send_raw_ext(
    const uint32_t timings[],
    uint32_t timings_cnt,
    _Bool start_from_mark,
    uint32_t frequency,
    float duty_cycle);
#define MBEDTLS_DES_H 
#define MBEDTLS_PRIVATE_ACCESS_H 
#define MBEDTLS_PRIVATE(member) private_ ##member
#define MBEDTLS_BUILD_INFO_H 
#define MBEDTLS_VERSION_MAJOR 3
#define MBEDTLS_VERSION_MINOR 1
#define MBEDTLS_VERSION_PATCH 0
#define MBEDTLS_VERSION_NUMBER 0x03010000
#define MBEDTLS_VERSION_STRING "3.1.0"
#define MBEDTLS_VERSION_STRING_FULL "mbed TLS 3.1.0"
#define MBEDTLS_HAVE_ASM 
#define MBEDTLS_HAVE_TIME 
#define MBEDTLS_HAVE_TIME_DATE 
#define MBEDTLS_CIPHER_MODE_CBC 
#define MBEDTLS_CIPHER_MODE_CFB 
#define MBEDTLS_CIPHER_MODE_CTR 
#define MBEDTLS_CIPHER_MODE_OFB 
#define MBEDTLS_CIPHER_MODE_XTS 
#define MBEDTLS_CIPHER_PADDING_PKCS7 
#define MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS 
#define MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN 
#define MBEDTLS_CIPHER_PADDING_ZEROS 
#define MBEDTLS_ECP_DP_SECP192R1_ENABLED 
#define MBEDTLS_ECP_DP_SECP224R1_ENABLED 
#define MBEDTLS_ECP_DP_SECP256R1_ENABLED 
#define MBEDTLS_ECP_DP_SECP384R1_ENABLED 
#define MBEDTLS_ECP_DP_SECP521R1_ENABLED 
#define MBEDTLS_ECP_DP_SECP192K1_ENABLED 
#define MBEDTLS_ECP_DP_SECP224K1_ENABLED 
#define MBEDTLS_ECP_DP_SECP256K1_ENABLED 
#define MBEDTLS_ECP_DP_BP256R1_ENABLED 
#define MBEDTLS_ECP_DP_BP384R1_ENABLED 
#define MBEDTLS_ECP_DP_BP512R1_ENABLED 
#define MBEDTLS_ECP_DP_CURVE25519_ENABLED 
#define MBEDTLS_ECP_DP_CURVE448_ENABLED 
#define MBEDTLS_ECP_NIST_OPTIM 
#define MBEDTLS_ECDSA_DETERMINISTIC 
#define MBEDTLS_KEY_EXCHANGE_PSK_ENABLED 
#define MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED 
#define MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED 
#define MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED 
#define MBEDTLS_KEY_EXCHANGE_RSA_ENABLED 
#define MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED 
#define MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED 
#define MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED 
#define MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED 
#define MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED 
#define MBEDTLS_PK_PARSE_EC_EXTENDED 
#define MBEDTLS_ERROR_STRERROR_DUMMY 
#define MBEDTLS_GENPRIME 
#define MBEDTLS_FS_IO 
#define MBEDTLS_PK_RSA_ALT_SUPPORT 
#define MBEDTLS_PKCS1_V15 
#define MBEDTLS_PKCS1_V21 
#define MBEDTLS_SELF_TEST 
#define MBEDTLS_SSL_ALL_ALERT_MESSAGES 
#define MBEDTLS_SSL_CONTEXT_SERIALIZATION 
#define MBEDTLS_SSL_ENCRYPT_THEN_MAC 
#define MBEDTLS_SSL_EXTENDED_MASTER_SECRET 
#define MBEDTLS_SSL_KEEP_PEER_CERTIFICATE 
#define MBEDTLS_SSL_RENEGOTIATION 
#define MBEDTLS_SSL_MAX_FRAGMENT_LENGTH 
#define MBEDTLS_SSL_PROTO_TLS1_2 
#define MBEDTLS_SSL_PROTO_DTLS 
#define MBEDTLS_SSL_ALPN 
#define MBEDTLS_SSL_DTLS_ANTI_REPLAY 
#define MBEDTLS_SSL_DTLS_HELLO_VERIFY 
#define MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE 
#define MBEDTLS_SSL_SESSION_TICKETS 
#define MBEDTLS_SSL_SERVER_NAME_INDICATION 
#define MBEDTLS_VERSION_FEATURES 
#define MBEDTLS_X509_RSASSA_PSS_SUPPORT 
#define MBEDTLS_AESNI_C 
#define MBEDTLS_AES_C 
#define MBEDTLS_ASN1_PARSE_C 
#define MBEDTLS_ASN1_WRITE_C 
#define MBEDTLS_BASE64_C 
#define MBEDTLS_BIGNUM_C 
#define MBEDTLS_CAMELLIA_C 
#define MBEDTLS_ARIA_C 
#define MBEDTLS_CCM_C 
#define MBEDTLS_CHACHA20_C 
#define MBEDTLS_CHACHAPOLY_C 
#define MBEDTLS_CIPHER_C 
#define MBEDTLS_CMAC_C 
#define MBEDTLS_CTR_DRBG_C 
#define MBEDTLS_DEBUG_C 
#define MBEDTLS_DES_C 
#define MBEDTLS_DHM_C 
#define MBEDTLS_ECDH_C 
#define MBEDTLS_ECDSA_C 
#define MBEDTLS_ECJPAKE_C 
#define MBEDTLS_ECP_C 
#define MBEDTLS_ENTROPY_C 
#define MBEDTLS_ERROR_C 
#define MBEDTLS_GCM_C 
#define MBEDTLS_HKDF_C 
#define MBEDTLS_HMAC_DRBG_C 
#define MBEDTLS_NIST_KW_C 
#define MBEDTLS_MD_C 
#define MBEDTLS_MD5_C 
#define MBEDTLS_NET_C 
#define MBEDTLS_OID_C 
#define MBEDTLS_PADLOCK_C 
#define MBEDTLS_PEM_PARSE_C 
#define MBEDTLS_PEM_WRITE_C 
#define MBEDTLS_PK_C 
#define MBEDTLS_PK_PARSE_C 
#define MBEDTLS_PK_WRITE_C 
#define MBEDTLS_PKCS5_C 
#define MBEDTLS_PKCS12_C 
#define MBEDTLS_PLATFORM_C 
#define MBEDTLS_POLY1305_C 
#define MBEDTLS_PSA_CRYPTO_C 
#define MBEDTLS_PSA_CRYPTO_STORAGE_C 
#define MBEDTLS_PSA_ITS_FILE_C 
#define MBEDTLS_RIPEMD160_C 
#define MBEDTLS_RSA_C 
#define MBEDTLS_SHA1_C 
#define MBEDTLS_SHA224_C 
#define MBEDTLS_SHA256_C 
#define MBEDTLS_SHA384_C 
#define MBEDTLS_SHA512_C 
#define MBEDTLS_SSL_CACHE_C 
#define MBEDTLS_SSL_COOKIE_C 
#define MBEDTLS_SSL_TICKET_C 
#define MBEDTLS_SSL_CLI_C 
#define MBEDTLS_SSL_SRV_C 
#define MBEDTLS_SSL_TLS_C 
#define MBEDTLS_TIMING_C 
#define MBEDTLS_VERSION_C 
#define MBEDTLS_X509_USE_C 
#define MBEDTLS_X509_CRT_PARSE_C 
#define MBEDTLS_X509_CRL_PARSE_C 
#define MBEDTLS_X509_CSR_PARSE_C 
#define MBEDTLS_X509_CREATE_C 
#define MBEDTLS_X509_CRT_WRITE_C 
#define MBEDTLS_X509_CSR_WRITE_C 
#define MBEDTLS_CHECK_CONFIG_H 
#undef MBEDTLS_HAS_MEMSAN
#undef MBEDTLS_THREADING_IMPL
typedef int mbedtls_iso_c_forbids_empty_translation_units;
#define MBEDTLS_PLATFORM_UTIL_H 
#define MBEDTLS_PLATFORM_TIME_H 
#define _TIME_H_ 
#define __need_size_t 
#define __need_NULL 
#undef __need_ptrdiff_t
#undef __need_size_t
#undef __need_wchar_t
#undef NULL
#define NULL ((void *)0)
#undef __need_NULL
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
#define _MACHTIME_H_ 
#define _CLOCKS_PER_SEC_ 100
#define CLOCKS_PER_SEC _CLOCKS_PER_SEC_
#define CLK_TCK CLOCKS_PER_SEC

struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
};
clock_t clock (void);
double difftime (time_t _time2, time_t _time1);
time_t mktime (struct tm *_timeptr);
time_t time (time_t *_timer);
char *asctime (const struct tm *_tblock);
char *ctime (const time_t *_time);
struct tm *gmtime (const time_t *_timer);
struct tm *localtime (const time_t *_timer);
size_t strftime (char * _s,
        size_t _maxsize, const char * _fmt,
        const struct tm * _t);
extern size_t strftime_l (char * _s, size_t _maxsize,
     const char * _fmt,
     const struct tm * _t, locale_t _l);
char *asctime_r (const struct tm *,
     char *);
char *ctime_r (const time_t *, char *);
struct tm *gmtime_r (const time_t *,
     struct tm *);
struct tm *localtime_r (const time_t *,
     struct tm *);

char *strptime (const char *,
     const char *,
     struct tm *);
char *strptime_l (const char *, const char *,
    struct tm *, locale_t);
void tzset (void);
void _tzset_r (struct _reent *);
extern long _timezone;
extern int _daylight;
extern char *_tzname[2];
#define tzname _tzname
#define CLOCK_ENABLED 1
#define CLOCK_DISABLED 0
#define CLOCK_ALLOWED 1
#define CLOCK_DISALLOWED 0
#define TIMER_ABSTIME 4
#define CLOCK_REALTIME_COARSE ((clockid_t) 0)
#define CLOCK_REALTIME ((clockid_t) 1)
#define CLOCK_MONOTONIC_RAW ((clockid_t) 5)
#define CLOCK_MONOTONIC_COARSE ((clockid_t) 6)
#define CLOCK_BOOTTIME ((clockid_t) 7)
#define CLOCK_REALTIME_ALARM ((clockid_t) 8)
#define CLOCK_BOOTTIME_ALARM ((clockid_t) 9)
typedef time_t mbedtls_time_t;
#define mbedtls_time time
#define MBEDTLS_INTERNAL_VALIDATE_RET(cond,ret) do { } while( 0 )
#define MBEDTLS_INTERNAL_VALIDATE(cond) do { } while( 0 )
#define MBEDTLS_DEPRECATED 
#define MBEDTLS_DEPRECATED_STRING_CONSTANT(VAL) VAL
#define MBEDTLS_DEPRECATED_NUMERIC_CONSTANT(VAL) VAL
#define MBEDTLS_CHECK_RETURN __attribute__((__warn_unused_result__))
#define MBEDTLS_CHECK_RETURN_CRITICAL MBEDTLS_CHECK_RETURN
#define MBEDTLS_CHECK_RETURN_TYPICAL 
#define MBEDTLS_CHECK_RETURN_OPTIONAL 
#define MBEDTLS_IGNORE_RETURN(result) ( (void) !( result ) )
void mbedtls_platform_zeroize( void *buf, size_t len );
struct tm *mbedtls_platform_gmtime_r( const mbedtls_time_t *tt,
                                      struct tm *tm_buf );
#define MBEDTLS_DES_ENCRYPT 1
#define MBEDTLS_DES_DECRYPT 0
#define MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH -0x0032
#define MBEDTLS_DES_KEY_SIZE 8
typedef struct mbedtls_des_context
{
    uint32_t private_sk[32];
}
mbedtls_des_context;
typedef struct mbedtls_des3_context
{
    uint32_t private_sk[96];
}
mbedtls_des3_context;
void mbedtls_des_init( mbedtls_des_context *ctx );
void mbedtls_des_free( mbedtls_des_context *ctx );
void mbedtls_des3_init( mbedtls_des3_context *ctx );
void mbedtls_des3_free( mbedtls_des3_context *ctx );
void mbedtls_des_key_set_parity( unsigned char key[8] );

int mbedtls_des_key_check_key_parity( const unsigned char key[8] );

int mbedtls_des_key_check_weak( const unsigned char key[8] );

int mbedtls_des_setkey_enc( mbedtls_des_context *ctx, const unsigned char key[8] );

int mbedtls_des_setkey_dec( mbedtls_des_context *ctx, const unsigned char key[8] );

int mbedtls_des3_set2key_enc( mbedtls_des3_context *ctx,
                      const unsigned char key[8 * 2] );

int mbedtls_des3_set2key_dec( mbedtls_des3_context *ctx,
                      const unsigned char key[8 * 2] );

int mbedtls_des3_set3key_enc( mbedtls_des3_context *ctx,
                      const unsigned char key[8 * 3] );

int mbedtls_des3_set3key_dec( mbedtls_des3_context *ctx,
                      const unsigned char key[8 * 3] );

int mbedtls_des_crypt_ecb( mbedtls_des_context *ctx,
                    const unsigned char input[8],
                    unsigned char output[8] );

int mbedtls_des_crypt_cbc( mbedtls_des_context *ctx,
                    int mode,
                    size_t length,
                    unsigned char iv[8],
                    const unsigned char *input,
                    unsigned char *output );

int mbedtls_des3_crypt_ecb( mbedtls_des3_context *ctx,
                     const unsigned char input[8],
                     unsigned char output[8] );

int mbedtls_des3_crypt_cbc( mbedtls_des3_context *ctx,
                     int mode,
                     size_t length,
                     unsigned char iv[8],
                     const unsigned char *input,
                     unsigned char *output );
void mbedtls_des_setkey( uint32_t SK[32],
                         const unsigned char key[8] );

int mbedtls_des_self_test( int verbose );
#define MBEDTLS_SHA1_H 
#define MBEDTLS_ERR_SHA1_BAD_INPUT_DATA -0x0073
typedef struct mbedtls_sha1_context
{
    uint32_t private_total[2];
    uint32_t private_state[5];
    unsigned char private_buffer[64];
}
mbedtls_sha1_context;
void mbedtls_sha1_init( mbedtls_sha1_context *ctx );
void mbedtls_sha1_free( mbedtls_sha1_context *ctx );
void mbedtls_sha1_clone( mbedtls_sha1_context *dst,
                         const mbedtls_sha1_context *src );
int mbedtls_sha1_starts( mbedtls_sha1_context *ctx );
int mbedtls_sha1_update( mbedtls_sha1_context *ctx,
                         const unsigned char *input,
                         size_t ilen );
int mbedtls_sha1_finish( mbedtls_sha1_context *ctx,
                         unsigned char output[20] );
int mbedtls_internal_sha1_process( mbedtls_sha1_context *ctx,
                                   const unsigned char data[64] );
int mbedtls_sha1( const unsigned char *input,
                  size_t ilen,
                  unsigned char output[20] );
int mbedtls_sha1_self_test( int verbose );
       
       
#define MSTARLIB_ARRAY_H 
#define ARRAY_DEF(name,...) ARRAY_DEF_AS(name, M_C(name,_t), M_C(name,_it_t), __VA_ARGS__)
#define ARRAY_DEF_AS(name,name_t,it_t,...) M_BEGIN_PROTECTED_CODE M_ARRA4_DEF_P1(M_IF_NARGS_EQ1(__VA_ARGS__) ((name, __VA_ARGS__, M_GLOBAL_OPLIST_OR_DEF(__VA_ARGS__)(), name_t, it_t ), (name, __VA_ARGS__, name_t, it_t ))) M_END_PROTECTED_CODE
#define ARRAY_OPLIST(...) M_ARRA4_OPLIST_P1(M_IF_NARGS_EQ1(__VA_ARGS__) ((__VA_ARGS__, M_DEFAULT_OPLIST), (__VA_ARGS__ )))
#define ARRAY_INIT_VALUE() { { 0, 0, NULL } }
#define M_ARRA4_OPLIST_P1(arg) M_ARRA4_OPLIST_P2 arg
#define M_ARRA4_OPLIST_P2(name,oplist) M_IF_OPLIST(oplist)(M_ARRA4_OPLIST_P3, M_ARRA4_OPLIST_FAILURE)(name, oplist)
#define M_ARRA4_OPLIST_FAILURE(name,oplist) ((M_LIB_ERROR(ARGUMENT_OF_ARRAY_OPLIST_IS_NOT_AN_OPLIST, name, oplist)))
#define M_ARRA4_OPLIST_P3(name,oplist) (INIT(M_C(name, _init)) ,M_IF_METHOD2(INIT_SET,SET, oplist)(INIT_SET(M_C(name, _init_set)),) ,M_IF_METHOD(INIT_SET, oplist)(INIT_WITH(API_1(M_INIT_WITH_VAI)),) ,M_IF_METHOD2(INIT_SET,SET, oplist)(SET(M_C(name, _set)), ) ,CLEAR(M_C(name, _clear)) ,INIT_MOVE(M_C(name, _init_move)) ,MOVE(M_C(name, _move)) ,SWAP(M_C(name, _swap)) ,TYPE(M_C(name,_ct)) ,NAME(name) ,SUBTYPE(M_C(name, _subtype_ct)) ,EMPTY_P(M_C(name,_empty_p)) ,IT_TYPE(M_C(name,_it_ct)), ,IT_FIRST(M_C(name,_it)) ,IT_LAST(M_C(name,_it_last)) ,IT_END(M_C(name,_it_end)) ,IT_SET(M_C(name,_it_set)) ,IT_END_P(M_C(name,_end_p)) ,IT_LAST_P(M_C(name,_last_p)) ,IT_EQUAL_P(M_C(name,_it_equal_p)) ,IT_NEXT(M_C(name,_next)) ,IT_PREVIOUS(M_C(name,_previous)) ,IT_REF(M_C(name,_ref)) ,IT_CREF(M_C(name,_cref)) ,M_IF_METHOD(INIT_SET, oplist)(IT_INSERT(M_C(name,_insert)) ,) ,M_IF_AT_LEAST_METHOD(SET,INIT_MOVE,oplist)(IT_REMOVE(M_C(name,_remove)),) ,RESET(M_C(name,_reset)) ,KEY_TYPE(size_t) ,VALUE_TYPE(M_C(name, _subtype_ct)) ,KEY_OPLIST(M_DEFAULT_OPLIST) ,VALUE_OPLIST(oplist) ,M_IF_METHOD(SET, oplist)(SET_KEY(M_C(name, _set_at)) ,) ,GET_KEY(M_C(name, _get)) ,M_IF_METHOD(INIT, oplist)(SAFE_GET_KEY(M_C(name, _safe_get)) ,) ,M_IF_AT_LEAST_METHOD(SET,INIT_MOVE,oplist)(ERASE_KEY(M_C(name, _erase)),) ,GET_SIZE(M_C(name, _size)) ,M_IF_METHOD(INIT_SET, oplist)(PUSH(M_C(name,_push_back)) ,) ,M_IF_AT_LEAST_METHOD(SET,INIT_MOVE,oplist)(POP(M_C(name,_pop_back)) ,) ,M_IF_AT_LEAST_METHOD(INIT_SET,INIT_MOVE,oplist)(PUSH_MOVE(M_C(name,_push_move)) ,) ,M_IF_AT_LEAST_METHOD(INIT_SET,INIT_MOVE,oplist)(POP_MOVE(M_C(name,_pop_move)) ,) ,OPLIST(oplist) ,M_IF_METHOD(CMP, oplist)(SORT(M_C(name, _special_sort)),) ,M_IF_METHOD(GET_STR, oplist)(GET_STR(M_C(name, _get_str)),) ,M_IF_METHOD(PARSE_STR, oplist)(PARSE_STR(M_C(name, _parse_str)),) ,M_IF_METHOD(OUT_STR, oplist)(OUT_STR(M_C(name, _out_str)),) ,M_IF_METHOD(IN_STR, oplist)(IN_STR(M_C(name, _in_str)),) ,M_IF_METHOD(OUT_SERIAL, oplist)(OUT_SERIAL(M_C(name, _out_serial)),) ,M_IF_METHOD(IN_SERIAL, oplist)(IN_SERIAL(M_C(name, _in_serial)),) ,M_IF_METHOD(EQUAL, oplist)(EQUAL(M_C(name, _equal_p)),) ,M_IF_METHOD(HASH, oplist)(HASH(M_C(name, _hash)),) ,M_IF_METHOD(NEW, oplist)(NEW(M_GET_NEW oplist),) ,M_IF_METHOD(REALLOC, oplist)(REALLOC(M_GET_REALLOC oplist),) ,M_IF_METHOD(DEL, oplist)(DEL(M_GET_DEL oplist),) )
#define M_ARRA4_CONTRACT(a) do { M_ASSERT (a != NULL); M_ASSERT (a->size <= a->alloc); M_ASSERT (a->size == 0 || a->ptr != NULL); M_ASSERT (a->alloc == 0 || a->ptr != NULL); } while (0)
#define M_ARRA4_DEF_P1(arg) M_ARRA4_DEF_P2 arg
#define M_ARRA4_DEF_P2(name,type,oplist,array_t,it_t) M_IF_OPLIST(oplist)(M_ARRA4_DEF_P3, M_ARRA4_DEF_FAILURE)(name, type, oplist, array_t, it_t)
#define M_ARRA4_DEF_FAILURE(name,type,oplist,array_t,it_t) M_STATIC_FAILURE(M_LIB_NOT_AN_OPLIST, "(ARRAY_DEF): the given argument is not a valid oplist: " #oplist)
#define M_ARRA4_DEF_P3(name,type,oplist,array_t,it_t) typedef struct M_C(name, _s) { size_t size; size_t alloc; type *ptr; } array_t[1]; typedef struct M_C(name, _it_s) { size_t index; const struct M_C(name, _s) *array; } it_t[1]; typedef struct M_C(name, _s) *M_C(name, _ptr); typedef const struct M_C(name, _s) *M_C(name, _srcptr); typedef array_t M_C(name, _ct); typedef it_t M_C(name, _it_ct); typedef type M_C(name, _subtype_ct); M_CHECK_COMPATIBLE_OPLIST(name, 1, type, oplist) static inline void M_C(name, _init)(array_t v) { M_ASSERT (v != NULL); v->size = 0; v->alloc = 0; v->ptr = NULL; M_ARRA4_CONTRACT(v); } static inline void M_C(name, _reset)(array_t v) { M_ARRA4_CONTRACT(v); for(size_t i = 0; i < v->size; i++) M_CALL_CLEAR(oplist, v->ptr[i]); v->size = 0; M_ARRA4_CONTRACT(v); } static inline void M_ATTR_DEPRECATED M_C(name, _clean)(array_t v) { M_C(name, _reset)(v); } static inline void M_C(name, _clear)(array_t v) { M_ARRA4_CONTRACT(v); M_C(name, _reset)(v); M_CALL_FREE(oplist, v->ptr); v->alloc = 1; v->ptr = NULL; } M_IF_METHOD2(INIT_SET, SET, oplist)( static inline void M_C(name, _set)(array_t d, const array_t s) { M_ARRA4_CONTRACT(d); M_ARRA4_CONTRACT(s); if (M_UNLIKELY (d == s)) return; if (s->size > d->alloc) { const size_t alloc = s->size; type *ptr = M_CALL_REALLOC(oplist, type, d->ptr, alloc); if (M_UNLIKELY (ptr == NULL)) { M_MEMORY_FULL(sizeof (type) * alloc); return ; } d->ptr = ptr; d->alloc = alloc; } size_t i; size_t step1 = M_MIN(s->size, d->size); for(i = 0; i < step1; i++) M_CALL_SET(oplist, d->ptr[i], s->ptr[i]); for( ; i < s->size; i++) M_CALL_INIT_SET(oplist, d->ptr[i], s->ptr[i]); for( ; i < d->size; i++) M_CALL_CLEAR(oplist, d->ptr[i]); d->size = s->size; M_ARRA4_CONTRACT(d); } static inline void M_C(name, _init_set)(array_t d, const array_t s) { M_ASSERT (d != s); M_C(name, _init)(d); M_C(name, _set)(d, s); } , ) static inline void M_C(name, _init_move)(array_t d, array_t s) { M_ASSERT (d != s); M_ARRA4_CONTRACT(s); d->size = s->size; d->alloc = s->alloc; d->ptr = s->ptr; s->alloc = 1; s->ptr = NULL; M_ARRA4_CONTRACT(d); } static inline void M_C(name, _move)(array_t d, array_t s) { M_ASSERT (d != s); M_C(name, _clear)(d); M_C(name, _init_move)(d, s); } M_IF_METHOD(SET, oplist)( static inline void M_C(name, _set_at)(array_t v, size_t i, type const x) { M_ARRA4_CONTRACT(v); M_ASSERT(v->size > 0 && v->ptr != NULL); M_ASSERT_INDEX(i, v->size); M_CALL_SET(oplist, v->ptr[i], x); } , ) static inline type * M_C(name, _back)(array_t v) { M_ARRA4_CONTRACT(v); M_ASSERT(v->ptr != NULL); M_ASSERT_INDEX(0, v->size); return &v->ptr[v->size-1]; } static inline type * M_C(name, _push_raw)(array_t v) { M_ARRA4_CONTRACT(v); if (M_UNLIKELY (v->size >= v->alloc)) { M_ASSERT(v->size == v->alloc); size_t alloc = M_CALL_INC_ALLOC(oplist, v->alloc); if (M_UNLIKELY (alloc <= v->alloc)) { M_MEMORY_FULL(sizeof (type) * alloc); return NULL; } M_ASSERT (alloc > v->size); type *ptr = M_CALL_REALLOC(oplist, type, v->ptr, alloc); if (M_UNLIKELY (ptr == NULL) ) { M_MEMORY_FULL(sizeof (type) * alloc); return NULL; } v->ptr = ptr; v->alloc = alloc; } M_ASSERT(v->ptr != NULL); type *ret = &v->ptr[v->size]; v->size++; M_ARRA4_CONTRACT(v); M_ASSUME(ret != NULL); return ret; } M_IF_METHOD(INIT_SET, oplist)( static inline void M_C(name, _push_back)(array_t v, type const x) { type *data = M_C(name, _push_raw)(v); if (M_UNLIKELY (data == NULL) ) return; M_CALL_INIT_SET(oplist, *data, x); } , ) M_IF_METHOD(INIT, oplist)( static inline type * M_C(name, _push_new)(array_t v) { type *data = M_C(name, _push_raw)(v); if (M_UNLIKELY (data == NULL) ) return NULL; M_CALL_INIT(oplist, *data); return data; } , ) M_IF_AT_LEAST_METHOD(INIT_SET, INIT_MOVE, oplist)( static inline void M_C(name, _push_move)(array_t v, type *x) { M_ASSERT (x != NULL); type *data = M_C(name, _push_raw)(v); if (M_UNLIKELY (data == NULL) ) return; M_DO_INIT_MOVE (oplist, *data, *x); } , ) M_IF_METHOD(INIT_SET, oplist)( static inline void M_C(name, _push_at)(array_t v, size_t key, type const x) { M_ARRA4_CONTRACT(v); M_ASSERT_INDEX(key, v->size+1); if (M_UNLIKELY (v->size >= v->alloc) ) { M_ASSERT(v->size == v->alloc); size_t alloc = M_CALL_INC_ALLOC(oplist, v->alloc); if (M_UNLIKELY (alloc <= v->alloc)) { M_MEMORY_FULL(sizeof (type) * alloc); return ; } M_ASSERT (alloc > v->size); type *ptr = M_CALL_REALLOC(oplist, type, v->ptr, alloc); if (M_UNLIKELY (ptr == NULL) ) { M_MEMORY_FULL(sizeof (type) * alloc); return; } v->ptr = ptr; v->alloc = alloc; } M_ASSERT(v->ptr != NULL); memmove(&v->ptr[key+1], &v->ptr[key], (v->size-key)*sizeof(type)); v->size++; M_CALL_INIT_SET(oplist, v->ptr[key], x); M_ARRA4_CONTRACT(v); } , ) M_IF_METHOD(INIT, oplist)( static inline void M_C(name, _resize)(array_t v, size_t size) { M_ARRA4_CONTRACT(v); if (v->size > size) { for(size_t i = size ; i < v->size; i++) M_CALL_CLEAR(oplist, v->ptr[i]); v->size = size; } else if (v->size < size) { if (size > v->alloc) { size_t alloc = size ; type *ptr = M_CALL_REALLOC(oplist, type, v->ptr, alloc); if (M_UNLIKELY (ptr == NULL) ) { M_MEMORY_FULL(sizeof (type) * alloc); return; } v->ptr = ptr; v->alloc = alloc; } for(size_t i = v->size ; i < size; i++) M_CALL_INIT(oplist, v->ptr[i]); v->size = size; } M_ARRA4_CONTRACT(v); } , ) static inline void M_C(name, _reserve)(array_t v, size_t alloc) { M_ARRA4_CONTRACT(v); if (v->size > alloc) { alloc = v->size; } if (M_UNLIKELY (alloc == 0)) { M_CALL_FREE(oplist, v->ptr); v->size = v->alloc = 0; v->ptr = NULL; } else { type *ptr = M_CALL_REALLOC(oplist, type, v->ptr, alloc); if (M_UNLIKELY (ptr == NULL) ) { M_MEMORY_FULL(sizeof (type) * alloc); return; } v->ptr = ptr; v->alloc = alloc; } M_ARRA4_CONTRACT(v); } M_IF_METHOD(INIT, oplist)( static inline type * M_C(name, _safe_get)(array_t v, size_t idx) { M_ARRA4_CONTRACT(v); const size_t size = idx + 1; if (v->size <= size) { if (M_UNLIKELY (size > v->alloc) ) { size_t alloc = M_CALL_INC_ALLOC(oplist, size) ; if (M_UNLIKELY (alloc <= v->alloc)) { M_MEMORY_FULL(sizeof (type) * alloc); return NULL; } type *ptr = M_CALL_REALLOC(oplist, type, v->ptr, alloc); if (M_UNLIKELY (ptr == NULL) ) { M_MEMORY_FULL(sizeof (type) * alloc); return NULL; } v->ptr = ptr; v->alloc = alloc; } for(size_t i = v->size ; i < size; i++) M_CALL_INIT(oplist, v->ptr[i]); v->size = size; } M_ASSERT (idx < v->size); M_ARRA4_CONTRACT(v); return &v->ptr[idx]; } static inline M_ATTR_DEPRECATED type * M_C(name, _get_at)(array_t v, size_t idx) { return M_C(name, _safe_get)(v, idx); } , ) M_IF_AT_LEAST_METHOD(SET, INIT_MOVE, oplist)( static inline void M_C(name, _pop_back)(type *dest, array_t v) { M_ARRA4_CONTRACT(v); M_ASSERT (v->ptr != NULL); M_ASSERT_INDEX(0, v->size); v->size--; if (dest) { M_DO_MOVE (oplist, *dest, v->ptr[v->size]); } else { M_CALL_CLEAR(oplist, v->ptr[v->size]); } M_ARRA4_CONTRACT(v); } , ) M_IF_AT_LEAST_METHOD(INIT_SET, INIT_MOVE, oplist)( static inline void M_C(name, _pop_move)(type *dest, array_t v) { M_ARRA4_CONTRACT(v); M_ASSERT (v->ptr != NULL); M_ASSERT_INDEX(0, v->size); M_ASSERT (dest != NULL); v->size--; M_DO_INIT_MOVE (oplist, *dest, v->ptr[v->size]); M_ARRA4_CONTRACT(v); } , ) M_IF_METHOD(INIT, oplist)( static inline void M_C(name, _pop_until)(array_t v, it_t pos) { M_ARRA4_CONTRACT(v); M_ASSERT (v == pos->array); M_ASSERT_INDEX(pos->index, v->size+1); M_C(name, _resize)(v, pos->index); } , ) static inline bool M_C(name, _empty_p)(const array_t v) { M_ARRA4_CONTRACT(v); return v->size == 0; } static inline size_t M_C(name, _size)(const array_t v) { M_ARRA4_CONTRACT(v); return v->size; } static inline size_t M_C(name, _capacity)(const array_t v) { M_ARRA4_CONTRACT(v); return v->alloc; } M_IF_AT_LEAST_METHOD(SET, INIT_MOVE, oplist)( static inline void M_C(name, _pop_at)(type *dest, array_t v, size_t i) { M_ARRA4_CONTRACT(v); M_ASSERT (v->size > 0 && v->ptr != NULL); M_ASSERT_INDEX(i, v->size); if (dest) M_DO_MOVE (oplist, *dest, v->ptr[i]); else M_CALL_CLEAR(oplist, v->ptr[i]); memmove(&v->ptr[i], &v->ptr[i+1], sizeof(type)*(v->size-1-i)); v->size--; M_ARRA4_CONTRACT(v); } static inline bool M_C(name, _erase)(array_t a, size_t i) { M_ARRA4_CONTRACT(a); if (i >= a->size) return false; M_C(name, _pop_at)(NULL, a, i); return true; } , ) M_IF_METHOD(INIT, oplist)( static inline void M_C(name, _insert_v)(array_t v, size_t i, size_t num) { M_ARRA4_CONTRACT(v); M_ASSERT_INDEX(i, v->size+1); size_t size = v->size + num; if (M_UNLIKELY (size <= v->size)) { if (num == 0) return; M_MEMORY_FULL(sizeof (type) * v->size); return ; } if (size > v->alloc) { size_t alloc = M_CALL_INC_ALLOC(oplist, size) ; if (M_UNLIKELY (alloc <= v->alloc)) { M_MEMORY_FULL(sizeof (type) * alloc); return ; } type *ptr = M_CALL_REALLOC(oplist, type, v->ptr, alloc); if (M_UNLIKELY (ptr == NULL) ) { M_MEMORY_FULL(sizeof (type) * alloc); return; } v->ptr = ptr; v->alloc = alloc; } memmove(&v->ptr[i+num], &v->ptr[i], sizeof(type)*(v->size - i) ); for(size_t k = i ; k < i+num; k++) M_CALL_INIT(oplist, v->ptr[k]); v->size = size; M_ARRA4_CONTRACT(v); } , ) static inline void M_C(name, _remove_v)(array_t v, size_t i, size_t j) { M_ARRA4_CONTRACT(v); M_ASSERT(i < j && v->ptr != NULL); M_ASSERT_INDEX(i, v->size); M_ASSERT_INDEX(j, v->size+1); for(size_t k = i ; k < j; k++) M_CALL_CLEAR(oplist, v->ptr[k]); memmove(&v->ptr[i], &v->ptr[j], sizeof(type)*(v->size - j) ); v->size -= (j-i); M_ARRA4_CONTRACT(v); } static inline void M_C(name, _swap)(array_t v1, array_t v2) { M_ARRA4_CONTRACT(v1); M_ARRA4_CONTRACT(v2); M_SWAP(size_t, v1->size, v2->size); M_SWAP(size_t, v1->alloc, v2->alloc); M_SWAP(type *, v1->ptr, v2->ptr); M_ARRA4_CONTRACT(v1); M_ARRA4_CONTRACT(v2); } M_IF_AT_LEAST_METHOD(INIT_SET,INIT_MOVE,oplist) ( static inline void M_C(name, _swap_at)(array_t v, size_t i, size_t j) { M_ARRA4_CONTRACT(v); M_ASSERT(v->ptr != NULL); M_ASSERT_INDEX(i, v->size); M_ASSERT_INDEX(j, v->size); type tmp; M_DO_INIT_MOVE(oplist, tmp, v->ptr[i]); M_DO_INIT_MOVE(oplist, v->ptr[i], v->ptr[j]); M_DO_INIT_MOVE(oplist, v->ptr[j], tmp); M_ARRA4_CONTRACT(v); } , ) static inline type * M_C(name, _get)(const array_t v, size_t i) { M_ARRA4_CONTRACT(v); M_ASSERT (v->ptr != NULL); M_ASSERT_INDEX(i, v->size); return &v->ptr[i]; } static inline type const * M_C(name, _cget)(const array_t v, size_t i) { M_ARRA4_CONTRACT(v); M_ASSERT (v->ptr != NULL); M_ASSERT_INDEX(i, v->size); return M_CONST_CAST(type, &v->ptr[i]); } static inline type * M_C(name, _front)(const array_t v) { M_ARRA4_CONTRACT(v); M_ASSERT_INDEX(0, v->size); return M_C(name, _get)(v, 0); } static inline void M_C(name, _it)(it_t it, const array_t v) { M_ARRA4_CONTRACT(v); M_ASSERT (it != NULL); it->index = 0; it->array = v; } static inline void M_C(name, _it_last)(it_t it, const array_t v) { M_ARRA4_CONTRACT(v); M_ASSERT (it != NULL); it->index = v->size - 1; it->array = v; } static inline void M_C(name, _it_end)(it_t it, const array_t v) { M_ARRA4_CONTRACT(v); M_ASSERT (it != NULL); it->index = v->size; it->array = v; } static inline void M_C(name, _it_set)(it_t it, const it_t org) { M_ASSERT (it != NULL && org != NULL); it->index = org->index; it->array = org->array; M_ARRA4_CONTRACT(it->array); } static inline bool M_C(name, _end_p)(const it_t it) { M_ASSERT(it != NULL && it->array != NULL); return it->index >= it->array->size; } static inline bool M_C(name, _last_p)(const it_t it) { M_ASSERT(it != NULL && it->array != NULL); return it->index + 1 >= it->array->size; } static inline bool M_C(name, _it_equal_p)(const it_t it1, const it_t it2) { M_ASSERT(it1 != NULL && it2 != NULL); return it1->array == it2->array && it1->index == it2->index; } static inline void M_C(name, _next)(it_t it) { M_ASSERT(it != NULL && it->array != NULL); it->index ++; } static inline void M_C(name, _previous)(it_t it) { M_ASSERT(it != NULL && it->array != NULL); it->index --; } static inline type * M_C(name, _ref)(const it_t it) { M_ASSERT(it != NULL); return M_C(name, _get)(it->array, it->index); } static inline type const * M_C(name, _cref)(const it_t it) { M_ASSERT(it != NULL); return M_C(name, _cget)(it->array, it->index); } M_IF_METHOD(INIT_SET, oplist)( static inline void M_C(name, _insert)(array_t a, it_t it, type const x) { M_ASSERT (it != NULL && a == it->array); size_t index = M_C(name, _end_p)(it) ? 0 : it->index+1; M_C(name, _push_at)(a, index, x); it->index = index; } , ) M_IF_AT_LEAST_METHOD(SET, INIT_MOVE, oplist)( static inline void M_C(name, _remove)(array_t a, it_t it) { M_ASSERT (it != NULL && a == it->array); M_C(name, _pop_at)(NULL, a, it->index); } , ) M_IF_METHOD(CMP, oplist) ( static inline void M_C(name, _special_sort)(array_t l, int (*func_type) (type const *a, type const *b)) { int (*func_void)(const void*, const void*); func_void = (int (*)(const void*, const void*))func_type; qsort (l->ptr, l->size, sizeof(type), func_void); } M_IF_METHOD2(SWAP, SET, oplist)( static inline void M_C3(m_arra4_,name,_stable_sort_noalloc)(type tab[], size_t size, type tmp[]) { size_t th = 4; M_IF_DEBUG(type *org_tab = tab;) M_ASSERT (size > 1); if (m_core_clz64(size-1) & 1) th += th; for(size_t k = 0 ; k < size; ) { size_t max = size - k < 2*th ? size - k : th; M_ASSUME(max >= th); for(size_t i = 1; i < max; i++) { size_t j = i; while (j > 0 && M_CALL_CMP(oplist, tab[k+j-1], tab[k+j]) > 0) { M_CALL_SWAP(oplist, tab[k+j-1], tab[k+j]); j = j - 1; } } k += max; } while (th < size) { type *dest = tmp; for(size_t k = 0 ; k < size; ) { type *el1 = &tab[k]; type *el2 = &tab[k+th]; size_t n1 = th; size_t n2 = size-k <= 3*th ? size-k-th : th; M_ASSERT (size-k > th); M_ASSERT (0 < n1 && n1 <= size); M_ASSERT (0 < n2 && n2 <= size); k += n1+n2; for (;;) { if (M_CALL_CMP(oplist, *el1, *el2) <= 0) { M_CALL_SET(oplist, *dest, *el1); dest++; el1++; if (-- n1 == 0) { if (n2 > 0) { memcpy (dest, el2, n2 * sizeof (type)); dest += n2; } break; } } else { M_CALL_SET(oplist, *dest, *el2); dest++; el2++; if (-- n2 == 0) { if (n1 > 0) { memcpy (dest, el1, n1 * sizeof (type)); dest += n1; } break; } } } } M_SWAP(type *, tab, tmp); th += th; } M_ASSERT (org_tab == tab); } static inline void M_C(name, _special_stable_sort)(array_t l) { if (M_UNLIKELY (l->size < 2)) return; type *temp = M_CALL_REALLOC(oplist, type, NULL, l->size); if (temp == NULL) { M_MEMORY_FULL(sizeof (type) * l->size); return ; } M_C3(m_arra4_,name,_stable_sort_noalloc)(l->ptr, l->size, temp); M_CALL_FREE(oplist, temp); } ,) ,) M_IF_METHOD(GET_STR, oplist)( static inline void M_C(name, _get_str)(string_t str, array_t const array, bool append) { M_ARRA4_CONTRACT(array); (append ? string_cat_str : string_set_str) (str, "["); it_t it; for (M_C(name, _it)(it, array) ; !M_C(name, _end_p)(it); M_C(name, _next)(it)){ type const *item = M_C(name, _cref)(it); M_CALL_GET_STR(oplist, str, *item, true); if (!M_C(name, _last_p)(it)) string_push_back (str, M_GET_SEPARATOR oplist); } string_push_back (str, ']'); } , ) M_IF_METHOD(OUT_STR, oplist)( static inline void M_C(name, _out_str)(FILE *file, const array_t array) { M_ARRA4_CONTRACT(array); M_ASSERT (file != NULL); fputc ('[', file); for (size_t i = 0; i < array->size; i++) { type const *item = M_C(name, _cget)(array, i); M_CALL_OUT_STR(oplist, file, *item); if (i != array->size-1) fputc (M_GET_SEPARATOR oplist, file); } fputc (']', file); } , ) M_IF_METHOD2(PARSE_STR, INIT, oplist)( static inline bool M_C(name, _parse_str)(array_t array, const char str[], const char**endp) { M_ARRA4_CONTRACT(array); M_ASSERT (str != NULL); M_C(name,_reset)(array); bool success = false; int c = *str++; if (M_UNLIKELY (c != '[')) goto exit; c = *str++; if (M_UNLIKELY (c == ']')) { success = true; goto exit; } if (M_UNLIKELY (c == 0)) goto exit; str--; type item; M_CALL_INIT(oplist, item); do { bool b = M_CALL_PARSE_STR(oplist, item, str, &str); do { c = *str++; } while (isspace(c)); if (b == false || c == 0) { goto exit_clear; } M_C(name, _push_back)(array, item); } while (c == M_GET_SEPARATOR oplist); M_ARRA4_CONTRACT(array); success = (c == ']'); exit_clear: M_CALL_CLEAR(oplist, item); exit: if (endp) *endp = str; return success; } , ) M_IF_METHOD2(IN_STR, INIT, oplist)( static inline bool M_C(name, _in_str)(array_t array, FILE *file) { M_ARRA4_CONTRACT(array); M_ASSERT (file != NULL); M_C(name,_reset)(array); int c = fgetc(file); if (M_UNLIKELY (c != '[')) return false; c = fgetc(file); if (M_UNLIKELY (c == ']')) return true; if (M_UNLIKELY (c == EOF)) return false; ungetc(c, file); type item; M_CALL_INIT(oplist, item); do { bool b = M_CALL_IN_STR(oplist, item, file); do { c = fgetc(file); } while (isspace(c)); if (b == false || c == EOF) { break; } M_C(name, _push_back)(array, item); } while (c == M_GET_SEPARATOR oplist); M_CALL_CLEAR(oplist, item); M_ARRA4_CONTRACT(array); return c == ']'; } , ) M_IF_METHOD(OUT_SERIAL, oplist)( static inline m_serial_return_code_t M_C(name, _out_serial)(m_serial_write_t f, const array_t array) { M_ARRA4_CONTRACT(array); M_ASSERT (f != NULL && f->m_interface != NULL); m_serial_return_code_t ret; m_serial_local_t local; ret = f->m_interface->write_array_start(local, f, array->size); for (size_t i = 0; i < array->size; i++) { type const *item = M_C(name, _cget)(array, i); if (i != 0) { ret |= f->m_interface->write_array_next(local, f); } ret |= M_CALL_OUT_SERIAL(oplist, f, *item); } ret |= f->m_interface->write_array_end(local, f); return ret & M_SERIAL_FAIL; } , ) M_IF_METHOD2(IN_SERIAL, INIT, oplist)( static inline m_serial_return_code_t M_C(name, _in_serial)(array_t array, m_serial_read_t f) { M_ARRA4_CONTRACT(array); M_ASSERT (f != NULL && f->m_interface != NULL); m_serial_return_code_t ret; m_serial_local_t local; size_t estimated_size = 0; M_C(name,_reset)(array); ret = f->m_interface->read_array_start(local, f, &estimated_size); if (M_UNLIKELY (ret != M_SERIAL_OK_CONTINUE)) { return ret; } if (estimated_size != 0) { M_C(name, _reserve)(array, estimated_size); } type item; M_CALL_INIT(oplist, item); do { ret = M_CALL_IN_SERIAL(oplist, item, f); if (ret != M_SERIAL_OK_DONE) { break; } M_C(name, _push_back)(array, item); ret = f->m_interface->read_array_next(local, f); } while (ret == M_SERIAL_OK_CONTINUE); M_CALL_CLEAR(oplist, item); M_ARRA4_CONTRACT(array); return ret; } , ) M_IF_METHOD(EQUAL, oplist)( static inline bool M_C(name, _equal_p)(const array_t array1, const array_t array2) { M_ARRA4_CONTRACT(array1); M_ARRA4_CONTRACT(array2); if (array1->size != array2->size) return false; size_t i; for(i = 0; i < array1->size; i++) { type const *item1 = M_C(name, _cget)(array1, i); type const *item2 = M_C(name, _cget)(array2, i); bool b = M_CALL_EQUAL(oplist, *item1, *item2); if (!b) return false; } return i == array1->size; } , ) M_IF_METHOD(HASH, oplist)( static inline size_t M_C(name, _hash)(const array_t array) { M_ARRA4_CONTRACT(array); M_HASH_DECL(hash); for(size_t i = 0 ; i < array->size; i++) { size_t hi = M_CALL_HASH(oplist, array->ptr[i]); M_HASH_UP(hash, hi); } return M_HASH_FINAL (hash); } , ) static inline void M_C(name, _splice)(array_t a1, array_t a2) { M_ARRA4_CONTRACT(a1); M_ARRA4_CONTRACT(a2); if (M_LIKELY (a2->size > 0)) { size_t newSize = a1->size + a2->size; if (newSize > a1->alloc) { type *ptr = M_CALL_REALLOC(oplist, type, a1->ptr, newSize); if (M_UNLIKELY (ptr == NULL) ) { M_MEMORY_FULL(sizeof (type) * newSize); } a1->ptr = ptr; a1->alloc = newSize; } memcpy(&a1->ptr[a1->size], &a2->ptr[0], a2->size * sizeof (type)); a2->size = 0; a1->size = newSize; } }
typedef struct {
    FuriString* name;
    uint64_t key;
    uint16_t type;
} SubGhzKey;

#pragma GCC diagnostic push

#pragma GCC diagnostic ignored "-Wformat-nonliteral"
 typedef struct SubGhzKeyArray_s { size_t size; size_t alloc; SubGhzKey *ptr; } SubGhzKeyArray_t[1]; typedef struct SubGhzKeyArray_it_s { size_t index; const struct SubGhzKeyArray_s *array; } SubGhzKeyArray_it_t[1]; typedef struct SubGhzKeyArray_s *SubGhzKeyArray_ptr; typedef const struct SubGhzKeyArray_s *SubGhzKeyArray_srcptr; typedef SubGhzKeyArray_t SubGhzKeyArray_ct; typedef SubGhzKeyArray_it_t SubGhzKeyArray_it_ct; typedef SubGhzKey SubGhzKeyArray_subtype_ct; static inline void SubGhzKeyArray_init(SubGhzKeyArray_t v) { ((void)0); v->size = 0; v->alloc = 0; v->ptr = ((void *)0); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline void SubGhzKeyArray_reset(SubGhzKeyArray_t v) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); for(size_t i = 0; i < v->size; i++) ((void)(v->ptr[i])); v->size = 0; do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline void SubGhzKeyArray_clean(SubGhzKeyArray_t v) { SubGhzKeyArray_reset(v); } static inline void SubGhzKeyArray_clear(SubGhzKeyArray_t v) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); SubGhzKeyArray_reset(v); free(v->ptr); v->alloc = 1; v->ptr = ((void *)0); } static inline void SubGhzKeyArray_set(SubGhzKeyArray_t d, const SubGhzKeyArray_t s) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); if (__builtin_expect(!!(d == s), 0)) return; if (s->size > d->alloc) { const size_t alloc = s->size; SubGhzKey *ptr = (__builtin_expect(!!((alloc) > (0xffffffffU) / sizeof(SubGhzKey)), 0) ? ((void *)0) : realloc ((d->ptr), (alloc)*sizeof (SubGhzKey))); if (__builtin_expect(!!(ptr == ((void *)0)), 0)) { abort(); return ; } d->ptr = ptr; d->alloc = alloc; } size_t i; size_t step1 = ((s->size) < (d->size) ? (s->size) : (d->size)); for(i = 0; i < step1; i++) ( ({ ; }), memcpy(&(d->ptr[i]), &(s->ptr[i]), sizeof (d->ptr[i]))); for( ; i < s->size; i++) ( ({ ; }), memcpy(&(d->ptr[i]), &(s->ptr[i]), sizeof (d->ptr[i]))); for( ; i < d->size; i++) ((void)(d->ptr[i])); d->size = s->size; do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline void SubGhzKeyArray_init_set(SubGhzKeyArray_t d, const SubGhzKeyArray_t s) { ((void)0); SubGhzKeyArray_init(d); SubGhzKeyArray_set(d, s); } static inline void SubGhzKeyArray_init_move(SubGhzKeyArray_t d, SubGhzKeyArray_t s) { ((void)0); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); d->size = s->size; d->alloc = s->alloc; d->ptr = s->ptr; s->alloc = 1; s->ptr = ((void *)0); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline void SubGhzKeyArray_move(SubGhzKeyArray_t d, SubGhzKeyArray_t s) { ((void)0); SubGhzKeyArray_clear(d); SubGhzKeyArray_init_move(d, s); } static inline void SubGhzKeyArray_set_at(SubGhzKeyArray_t v, size_t i, SubGhzKey const x) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); ((void)0); do { ((void)0); } while (0); ( ({ ; }), memcpy(&(v->ptr[i]), &(x), sizeof (v->ptr[i]))); } static inline SubGhzKey * SubGhzKeyArray_back(SubGhzKeyArray_t v) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); ((void)0); do { ((void)0); } while (0); return &v->ptr[v->size-1]; } static inline SubGhzKey * SubGhzKeyArray_push_raw(SubGhzKeyArray_t v) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); if (__builtin_expect(!!(v->size >= v->alloc), 0)) { ((void)0); size_t alloc = (((8) > ((v->alloc)) ? (8) : ((v->alloc)))*2); if (__builtin_expect(!!(alloc <= v->alloc), 0)) { abort(); return ((void *)0); } ((void)0); SubGhzKey *ptr = (__builtin_expect(!!((alloc) > (0xffffffffU) / sizeof(SubGhzKey)), 0) ? ((void *)0) : realloc ((v->ptr), (alloc)*sizeof (SubGhzKey))); if (__builtin_expect(!!(ptr == ((void *)0)), 0) ) { abort(); return ((void *)0); } v->ptr = ptr; v->alloc = alloc; } ((void)0); SubGhzKey *ret = &v->ptr[v->size]; v->size++; do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); (! __builtin_constant_p (!!(ret != ((void *)0)) || !(ret != ((void *)0))) || (ret != ((void *)0)) ? (void) 0 : __builtin_unreachable()); return ret; } static inline void SubGhzKeyArray_push_back(SubGhzKeyArray_t v, SubGhzKey const x) { SubGhzKey *data = SubGhzKeyArray_push_raw(v); if (__builtin_expect(!!(data == ((void *)0)), 0) ) return; ( ({ ; }), memcpy(&(*data), &(x), sizeof (*data))); } static inline SubGhzKey * SubGhzKeyArray_push_new(SubGhzKeyArray_t v) { SubGhzKey *data = SubGhzKeyArray_push_raw(v); if (__builtin_expect(!!(data == ((void *)0)), 0) ) return ((void *)0); (memset(&(*data), 0, sizeof (*data))); return data; } static inline void SubGhzKeyArray_push_move(SubGhzKeyArray_t v, SubGhzKey *x) { ((void)0); SubGhzKey *data = SubGhzKeyArray_push_raw(v); if (__builtin_expect(!!(data == ((void *)0)), 0) ) return; do { ( ({ ; }), memcpy(&((*data)), &((*x)), sizeof ((*data)))) ; ((void)((*x))); } while (0); } static inline void SubGhzKeyArray_push_at(SubGhzKeyArray_t v, size_t key, SubGhzKey const x) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); do { ((void)0); } while (0); if (__builtin_expect(!!(v->size >= v->alloc), 0) ) { ((void)0); size_t alloc = (((8) > ((v->alloc)) ? (8) : ((v->alloc)))*2); if (__builtin_expect(!!(alloc <= v->alloc), 0)) { abort(); return ; } ((void)0); SubGhzKey *ptr = (__builtin_expect(!!((alloc) > (0xffffffffU) / sizeof(SubGhzKey)), 0) ? ((void *)0) : realloc ((v->ptr), (alloc)*sizeof (SubGhzKey))); if (__builtin_expect(!!(ptr == ((void *)0)), 0) ) { abort(); return; } v->ptr = ptr; v->alloc = alloc; } ((void)0); memmove(&v->ptr[key+1], &v->ptr[key], (v->size-key)*sizeof(SubGhzKey)); v->size++; ( ({ ; }), memcpy(&(v->ptr[key]), &(x), sizeof (v->ptr[key]))); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline void SubGhzKeyArray_resize(SubGhzKeyArray_t v, size_t size) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); if (v->size > size) { for(size_t i = size ; i < v->size; i++) ((void)(v->ptr[i])); v->size = size; } else if (v->size < size) { if (size > v->alloc) { size_t alloc = size ; SubGhzKey *ptr = (__builtin_expect(!!((alloc) > (0xffffffffU) / sizeof(SubGhzKey)), 0) ? ((void *)0) : realloc ((v->ptr), (alloc)*sizeof (SubGhzKey))); if (__builtin_expect(!!(ptr == ((void *)0)), 0) ) { abort(); return; } v->ptr = ptr; v->alloc = alloc; } for(size_t i = v->size ; i < size; i++) (memset(&(v->ptr[i]), 0, sizeof (v->ptr[i]))); v->size = size; } do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline void SubGhzKeyArray_reserve(SubGhzKeyArray_t v, size_t alloc) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); if (v->size > alloc) { alloc = v->size; } if (__builtin_expect(!!(alloc == 0), 0)) { free(v->ptr); v->size = v->alloc = 0; v->ptr = ((void *)0); } else { SubGhzKey *ptr = (__builtin_expect(!!((alloc) > (0xffffffffU) / sizeof(SubGhzKey)), 0) ? ((void *)0) : realloc ((v->ptr), (alloc)*sizeof (SubGhzKey))); if (__builtin_expect(!!(ptr == ((void *)0)), 0) ) { abort(); return; } v->ptr = ptr; v->alloc = alloc; } do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline SubGhzKey * SubGhzKeyArray_safe_get(SubGhzKeyArray_t v, size_t idx) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); const size_t size = idx + 1; if (v->size <= size) { if (__builtin_expect(!!(size > v->alloc), 0) ) { size_t alloc = (((8) > ((size)) ? (8) : ((size)))*2) ; if (__builtin_expect(!!(alloc <= v->alloc), 0)) { abort(); return ((void *)0); } SubGhzKey *ptr = (__builtin_expect(!!((alloc) > (0xffffffffU) / sizeof(SubGhzKey)), 0) ? ((void *)0) : realloc ((v->ptr), (alloc)*sizeof (SubGhzKey))); if (__builtin_expect(!!(ptr == ((void *)0)), 0) ) { abort(); return ((void *)0); } v->ptr = ptr; v->alloc = alloc; } for(size_t i = v->size ; i < size; i++) (memset(&(v->ptr[i]), 0, sizeof (v->ptr[i]))); v->size = size; } ((void)0); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); return &v->ptr[idx]; } static inline SubGhzKey * SubGhzKeyArray_get_at(SubGhzKeyArray_t v, size_t idx) { return SubGhzKeyArray_safe_get(v, idx); } static inline void SubGhzKeyArray_pop_back(SubGhzKey *dest, SubGhzKeyArray_t v) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); ((void)0); do { ((void)0); } while (0); v->size--; if (dest) { do { ( ({ ; }), memcpy(&((*dest)), &((v->ptr[v->size])), sizeof ((*dest)))); ((void)((v->ptr[v->size]))); } while (0); } else { ((void)(v->ptr[v->size])); } do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline void SubGhzKeyArray_pop_move(SubGhzKey *dest, SubGhzKeyArray_t v) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); ((void)0); do { ((void)0); } while (0); ((void)0); v->size--; do { ( ({ ; }), memcpy(&((*dest)), &((v->ptr[v->size])), sizeof ((*dest)))) ; ((void)((v->ptr[v->size]))); } while (0); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline void SubGhzKeyArray_pop_until(SubGhzKeyArray_t v, SubGhzKeyArray_it_t pos) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); ((void)0); do { ((void)0); } while (0); SubGhzKeyArray_resize(v, pos->index); } static inline _Bool SubGhzKeyArray_empty_p(const SubGhzKeyArray_t v) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); return v->size == 0; } static inline size_t SubGhzKeyArray_size(const SubGhzKeyArray_t v) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); return v->size; } static inline size_t SubGhzKeyArray_capacity(const SubGhzKeyArray_t v) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); return v->alloc; } static inline void SubGhzKeyArray_pop_at(SubGhzKey *dest, SubGhzKeyArray_t v, size_t i) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); ((void)0); do { ((void)0); } while (0); if (dest) do { ( ({ ; }), memcpy(&((*dest)), &((v->ptr[i])), sizeof ((*dest)))); ((void)((v->ptr[i]))); } while (0); else ((void)(v->ptr[i])); memmove(&v->ptr[i], &v->ptr[i+1], sizeof(SubGhzKey)*(v->size-1-i)); v->size--; do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline _Bool SubGhzKeyArray_erase(SubGhzKeyArray_t a, size_t i) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); if (i >= a->size) return 0; SubGhzKeyArray_pop_at(((void *)0), a, i); return 1; } static inline void SubGhzKeyArray_insert_v(SubGhzKeyArray_t v, size_t i, size_t num) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); do { ((void)0); } while (0); size_t size = v->size + num; if (__builtin_expect(!!(size <= v->size), 0)) { if (num == 0) return; abort(); return ; } if (size > v->alloc) { size_t alloc = (((8) > ((size)) ? (8) : ((size)))*2) ; if (__builtin_expect(!!(alloc <= v->alloc), 0)) { abort(); return ; } SubGhzKey *ptr = (__builtin_expect(!!((alloc) > (0xffffffffU) / sizeof(SubGhzKey)), 0) ? ((void *)0) : realloc ((v->ptr), (alloc)*sizeof (SubGhzKey))); if (__builtin_expect(!!(ptr == ((void *)0)), 0) ) { abort(); return; } v->ptr = ptr; v->alloc = alloc; } memmove(&v->ptr[i+num], &v->ptr[i], sizeof(SubGhzKey)*(v->size - i) ); for(size_t k = i ; k < i+num; k++) (memset(&(v->ptr[k]), 0, sizeof (v->ptr[k]))); v->size = size; do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline void SubGhzKeyArray_remove_v(SubGhzKeyArray_t v, size_t i, size_t j) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); ((void)0); do { ((void)0); } while (0); do { ((void)0); } while (0); for(size_t k = i ; k < j; k++) ((void)(v->ptr[k])); memmove(&v->ptr[i], &v->ptr[j], sizeof(SubGhzKey)*(v->size - j) ); v->size -= (j-i); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline void SubGhzKeyArray_swap(SubGhzKeyArray_t v1, SubGhzKeyArray_t v2) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); do { size_t _tmp = (v1->size); (v1->size) = (v2->size); (v2->size) = _tmp; } while (0); do { size_t _tmp = (v1->alloc); (v1->alloc) = (v2->alloc); (v2->alloc) = _tmp; } while (0); do { SubGhzKey * _tmp = (v1->ptr); (v1->ptr) = (v2->ptr); (v2->ptr) = _tmp; } while (0); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline void SubGhzKeyArray_swap_at(SubGhzKeyArray_t v, size_t i, size_t j) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); ((void)0); do { ((void)0); } while (0); do { ((void)0); } while (0); SubGhzKey tmp; do { ( ({ ; }), memcpy(&((tmp)), &((v->ptr[i])), sizeof ((tmp)))) ; ((void)((v->ptr[i]))); } while (0); do { ( ({ ; }), memcpy(&((v->ptr[i])), &((v->ptr[j])), sizeof ((v->ptr[i])))) ; ((void)((v->ptr[j]))); } while (0); do { ( ({ ; }), memcpy(&((v->ptr[j])), &((tmp)), sizeof ((v->ptr[j])))) ; ((void)((tmp))); } while (0); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline SubGhzKey * SubGhzKeyArray_get(const SubGhzKeyArray_t v, size_t i) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); ((void)0); do { ((void)0); } while (0); return &v->ptr[i]; } static inline SubGhzKey const * SubGhzKeyArray_cget(const SubGhzKeyArray_t v, size_t i) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); ((void)0); do { ((void)0); } while (0); return (((union { SubGhzKey *ptr; SubGhzKey const *cptr; }){&v->ptr[i]}).cptr); } static inline SubGhzKey * SubGhzKeyArray_front(const SubGhzKeyArray_t v) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); do { ((void)0); } while (0); return SubGhzKeyArray_get(v, 0); } static inline void SubGhzKeyArray_it(SubGhzKeyArray_it_t it, const SubGhzKeyArray_t v) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); ((void)0); it->index = 0; it->array = v; } static inline void SubGhzKeyArray_it_last(SubGhzKeyArray_it_t it, const SubGhzKeyArray_t v) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); ((void)0); it->index = v->size - 1; it->array = v; } static inline void SubGhzKeyArray_it_end(SubGhzKeyArray_it_t it, const SubGhzKeyArray_t v) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); ((void)0); it->index = v->size; it->array = v; } static inline void SubGhzKeyArray_it_set(SubGhzKeyArray_it_t it, const SubGhzKeyArray_it_t org) { ((void)0); it->index = org->index; it->array = org->array; do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); } static inline _Bool SubGhzKeyArray_end_p(const SubGhzKeyArray_it_t it) { ((void)0); return it->index >= it->array->size; } static inline _Bool SubGhzKeyArray_last_p(const SubGhzKeyArray_it_t it) { ((void)0); return it->index + 1 >= it->array->size; } static inline _Bool SubGhzKeyArray_it_equal_p(const SubGhzKeyArray_it_t it1, const SubGhzKeyArray_it_t it2) { ((void)0); return it1->array == it2->array && it1->index == it2->index; } static inline void SubGhzKeyArray_next(SubGhzKeyArray_it_t it) { ((void)0); it->index ++; } static inline void SubGhzKeyArray_previous(SubGhzKeyArray_it_t it) { ((void)0); it->index --; } static inline SubGhzKey * SubGhzKeyArray_ref(const SubGhzKeyArray_it_t it) { ((void)0); return SubGhzKeyArray_get(it->array, it->index); } static inline SubGhzKey const * SubGhzKeyArray_cref(const SubGhzKeyArray_it_t it) { ((void)0); return SubGhzKeyArray_cget(it->array, it->index); } static inline void SubGhzKeyArray_insert(SubGhzKeyArray_t a, SubGhzKeyArray_it_t it, SubGhzKey const x) { ((void)0); size_t index = SubGhzKeyArray_end_p(it) ? 0 : it->index+1; SubGhzKeyArray_push_at(a, index, x); it->index = index; } static inline void SubGhzKeyArray_remove(SubGhzKeyArray_t a, SubGhzKeyArray_it_t it) { ((void)0); SubGhzKeyArray_pop_at(((void *)0), a, it->index); } static inline void SubGhzKeyArray_special_sort(SubGhzKeyArray_t l, int (*func_type) (SubGhzKey const *a, SubGhzKey const *b)) { int (*func_void)(const void*, const void*); func_void = (int (*)(const void*, const void*))func_type; qsort (l->ptr, l->size, sizeof(SubGhzKey), func_void); } static inline void m_arra4_SubGhzKeyArray_stable_sort_noalloc(SubGhzKey tab[], size_t size, SubGhzKey tmp[]) { size_t th = 4; ((void)0); if (m_core_clz64(size-1) & 1) th += th; for(size_t k = 0 ; k < size; ) { size_t max = size - k < 2*th ? size - k : th; (! __builtin_constant_p (!!(max >= th) || !(max >= th)) || (max >= th) ? (void) 0 : __builtin_unreachable()); for(size_t i = 1; i < max; i++) { size_t j = i; while (j > 0 && ( ({ ; }), memcmp(&(tab[k+j-1]), &(tab[k+j]), sizeof (tab[k+j-1]))) > 0) { do { char _tmp[sizeof (tab[k+j-1])]; ({ ; }); memcpy(&_tmp, &(tab[k+j-1]), sizeof (tab[k+j-1])); memcpy(&(tab[k+j-1]), &(tab[k+j]), sizeof (tab[k+j-1])); memcpy(&(tab[k+j]), &_tmp, sizeof (tab[k+j-1])); } while (0); j = j - 1; } } k += max; } while (th < size) { SubGhzKey *dest = tmp; for(size_t k = 0 ; k < size; ) { SubGhzKey *el1 = &tab[k]; SubGhzKey *el2 = &tab[k+th]; size_t n1 = th; size_t n2 = size-k <= 3*th ? size-k-th : th; ((void)0); ((void)0); ((void)0); k += n1+n2; for (;;) { if (( ({ ; }), memcmp(&(*el1), &(*el2), sizeof (*el1))) <= 0) { ( ({ ; }), memcpy(&(*dest), &(*el1), sizeof (*dest))); dest++; el1++; if (-- n1 == 0) { if (n2 > 0) { memcpy (dest, el2, n2 * sizeof (SubGhzKey)); dest += n2; } break; } } else { ( ({ ; }), memcpy(&(*dest), &(*el2), sizeof (*dest))); dest++; el2++; if (-- n2 == 0) { if (n1 > 0) { memcpy (dest, el1, n1 * sizeof (SubGhzKey)); dest += n1; } break; } } } } do { SubGhzKey * _tmp = (tab); (tab) = (tmp); (tmp) = _tmp; } while (0); th += th; } ((void)0); } static inline void SubGhzKeyArray_special_stable_sort(SubGhzKeyArray_t l) { if (__builtin_expect(!!(l->size < 2), 0)) return; SubGhzKey *temp = (__builtin_expect(!!((l->size) > (0xffffffffU) / sizeof(SubGhzKey)), 0) ? ((void *)0) : realloc ((((void *)0)), (l->size)*sizeof (SubGhzKey))); if (temp == ((void *)0)) { abort(); return ; } m_arra4_SubGhzKeyArray_stable_sort_noalloc(l->ptr, l->size, temp); free(temp); } static inline _Bool SubGhzKeyArray_equal_p(const SubGhzKeyArray_t array1, const SubGhzKeyArray_t array2) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); if (array1->size != array2->size) return 0; size_t i; for(i = 0; i < array1->size; i++) { SubGhzKey const *item1 = SubGhzKeyArray_cget(array1, i); SubGhzKey const *item2 = SubGhzKeyArray_cget(array2, i); _Bool b = ( ({ ; }), memcmp(&(*item1), &(*item2), sizeof (*item1)) == 0); if (!b) return 0; } return i == array1->size; } static inline size_t SubGhzKeyArray_hash(const SubGhzKeyArray_t array) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); size_t hash = 0UL ^ 0UL; for(size_t i = 0 ; i < array->size; i++) { size_t hi = m_core_hash((const void*) &(array->ptr[i]), sizeof (array->ptr[i])); do { hash = (size_t) (((hash) * 0x811C9DC5UL) ^ ((hi))); } while (0); } return ( (hash) >> (sizeof(size_t)*8/2) | (hash) ); } static inline void SubGhzKeyArray_splice(SubGhzKeyArray_t a1, SubGhzKeyArray_t a2) { do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); do { ((void)0); ((void)0); ((void)0); ((void)0); } while (0); if (__builtin_expect(!!(a2->size > 0), 1)) { size_t newSize = a1->size + a2->size; if (newSize > a1->alloc) { SubGhzKey *ptr = (__builtin_expect(!!((newSize) > (0xffffffffU) / sizeof(SubGhzKey)), 0) ? ((void *)0) : realloc ((a1->ptr), (newSize)*sizeof (SubGhzKey))); if (__builtin_expect(!!(ptr == ((void *)0)), 0) ) { abort(); } a1->ptr = ptr; a1->alloc = newSize; } memcpy(&a1->ptr[a1->size], &a2->ptr[0], a2->size * sizeof (SubGhzKey)); a2->size = 0; a1->size = newSize; } }
#pragma GCC diagnostic pop

#define M_OPL_SubGhzKeyArray_t() ARRAY_OPLIST(SubGhzKeyArray, M_POD_OPLIST)
typedef struct SubGhzKeystore SubGhzKeystore;
SubGhzKeystore* subghz_keystore_alloc();
void subghz_keystore_free(SubGhzKeystore* instance);
_Bool subghz_keystore_load(SubGhzKeystore* instance, const char* filename);
_Bool subghz_keystore_save(SubGhzKeystore* instance, const char* filename, uint8_t* iv);
SubGhzKeyArray_t* subghz_keystore_get_data(SubGhzKeystore* instance);
_Bool subghz_keystore_raw_encrypted_save(
    const char* input_file_name,
    const char* output_file_name,
    uint8_t* iv);
_Bool subghz_keystore_raw_get_data(const char* file_name, size_t offset, uint8_t* data, size_t len);
typedef struct SubGhzEnvironment SubGhzEnvironment;
SubGhzEnvironment* subghz_environment_alloc();
void subghz_environment_free(SubGhzEnvironment* instance);
_Bool subghz_environment_load_keystore(SubGhzEnvironment* instance, const char* filename);
SubGhzKeystore* subghz_environment_get_keystore(SubGhzEnvironment* instance);
void subghz_environment_set_came_atomo_rainbow_table_file_name(
    SubGhzEnvironment* instance,
    const char* filename);
const char* subghz_environment_get_came_atomo_rainbow_table_file_name(SubGhzEnvironment* instance);
void subghz_environment_set_nice_flor_s_rainbow_table_file_name(
    SubGhzEnvironment* instance,
    const char* filename);
const char*
    subghz_environment_get_nice_flor_s_rainbow_table_file_name(SubGhzEnvironment* instance);
void subghz_environment_set_protocol_registry(
    SubGhzEnvironment* instance,
    void* protocol_registry_items);
void* subghz_environment_get_protocol_registry(SubGhzEnvironment* instance);
const char* subghz_environment_get_protocol_name_registry(SubGhzEnvironment* instance, size_t idx);
       
       
#define SUBGHZ_APP_FOLDER ANY_PATH("subghz")
#define SUBGHZ_RAW_FOLDER EXT_PATH("subghz")
#define SUBGHZ_APP_EXTENSION ".sub"
#define SUBGHZ_KEY_FILE_VERSION 1
#define SUBGHZ_KEY_FILE_TYPE "Flipper SubGhz Key File"
#define SUBGHZ_RAW_FILE_VERSION 1
#define SUBGHZ_RAW_FILE_TYPE "Flipper SubGhz RAW File"
typedef struct {
    FuriString* name;
    uint32_t frequency;
    uint8_t* data;
    size_t data_size;
} SubGhzRadioPreset;
typedef void* (*SubGhzAlloc)(SubGhzEnvironment* environment);
typedef void (*SubGhzFree)(void* context);
typedef _Bool (
    *SubGhzSerialize)(void* context, FlipperFormat* flipper_format, SubGhzRadioPreset* preset);
typedef _Bool (*SubGhzDeserialize)(void* context, FlipperFormat* flipper_format);
typedef void (*SubGhzDecoderFeed)(void* decoder, _Bool level, uint32_t duration);
typedef void (*SubGhzDecoderReset)(void* decoder);
typedef uint8_t (*SubGhzGetHashData)(void* decoder);
typedef void (*SubGhzGetString)(void* decoder, FuriString* output);
typedef void (*SubGhzEncoderStop)(void* encoder);
typedef LevelDuration (*SubGhzEncoderYield)(void* context);
typedef struct {
    SubGhzAlloc alloc;
    SubGhzFree free;
    SubGhzDecoderFeed feed;
    SubGhzDecoderReset reset;
    SubGhzGetHashData get_hash_data;
    SubGhzGetString get_string;
    SubGhzSerialize serialize;
    SubGhzDeserialize deserialize;
} SubGhzProtocolDecoder;
typedef struct {
    SubGhzAlloc alloc;
    SubGhzFree free;
    SubGhzDeserialize deserialize;
    SubGhzEncoderStop stop;
    SubGhzEncoderYield yield;
} SubGhzProtocolEncoder;
typedef enum {
    SubGhzProtocolTypeUnknown = 0,
    SubGhzProtocolTypeStatic,
    SubGhzProtocolTypeDynamic,
    SubGhzProtocolTypeRAW,
    SubGhzProtocolWeatherStation,
    SubGhzProtocolCustom,
} SubGhzProtocolType;
typedef enum {
    SubGhzProtocolFlag_RAW = (1 << 0),
    SubGhzProtocolFlag_Decodable = (1 << 1),
    SubGhzProtocolFlag_315 = (1 << 2),
    SubGhzProtocolFlag_433 = (1 << 3),
    SubGhzProtocolFlag_868 = (1 << 4),
    SubGhzProtocolFlag_AM = (1 << 5),
    SubGhzProtocolFlag_FM = (1 << 6),
    SubGhzProtocolFlag_Save = (1 << 7),
    SubGhzProtocolFlag_Load = (1 << 8),
    SubGhzProtocolFlag_Send = (1 << 9),
} SubGhzProtocolFlag;
typedef struct {
    const char* name;
    SubGhzProtocolType type;
    SubGhzProtocolFlag flag;
    const SubGhzProtocolEncoder* encoder;
    const SubGhzProtocolDecoder* decoder;
} SubGhzProtocol;
       
typedef struct SubGhzProtocolDecoderBase SubGhzProtocolDecoderBase;
typedef void (
    *SubGhzProtocolDecoderBaseRxCallback)(SubGhzProtocolDecoderBase* instance, void* context);
typedef void (*SubGhzProtocolDecoderBaseSerialize)(
    SubGhzProtocolDecoderBase* decoder_base,
    FuriString* output);
struct SubGhzProtocolDecoderBase {
    const SubGhzProtocol* protocol;
    SubGhzProtocolDecoderBaseRxCallback callback;
    void* context;
};
void subghz_protocol_decoder_base_set_decoder_callback(
    SubGhzProtocolDecoderBase* decoder_base,
    SubGhzProtocolDecoderBaseRxCallback callback,
    void* context);
_Bool subghz_protocol_decoder_base_get_string(
    SubGhzProtocolDecoderBase* decoder_base,
    FuriString* output);
_Bool subghz_protocol_decoder_base_serialize(
    SubGhzProtocolDecoderBase* decoder_base,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_base_deserialize(
    SubGhzProtocolDecoderBase* decoder_base,
    FlipperFormat* flipper_format);
uint8_t subghz_protocol_decoder_base_get_hash_data(SubGhzProtocolDecoderBase* decoder_base);
typedef struct SubGhzProtocolEncoderBase SubGhzProtocolEncoderBase;
struct SubGhzProtocolEncoderBase {
    const SubGhzProtocol* protocol;
};
typedef struct SubGhzReceiver SubGhzReceiver;
typedef void (*SubGhzReceiverCallback)(
    SubGhzReceiver* decoder,
    SubGhzProtocolDecoderBase* decoder_base,
    void* context);
SubGhzReceiver* subghz_receiver_alloc_init(SubGhzEnvironment* environment);
void subghz_receiver_free(SubGhzReceiver* instance);
void subghz_receiver_decode(SubGhzReceiver* instance, _Bool level, uint32_t duration);
void subghz_receiver_reset(SubGhzReceiver* instance);
void subghz_receiver_set_rx_callback(
    SubGhzReceiver* instance,
    SubGhzReceiverCallback callback,
    void* context);
void subghz_receiver_set_filter(SubGhzReceiver* instance, SubGhzProtocolFlag filter);
SubGhzProtocolFlag subghz_receiver_get_filter(SubGhzReceiver* instance);
SubGhzProtocolDecoderBase*
    subghz_receiver_search_decoder_base_by_name(SubGhzReceiver* instance, const char* decoder_name);
       
typedef struct SubGhzWorker SubGhzWorker;
typedef void (*SubGhzWorkerOverrunCallback)(void* context);
typedef void (*SubGhzWorkerPairCallback)(void* context, _Bool level, uint32_t duration);
void subghz_worker_rx_callback(_Bool level, uint32_t duration, void* context);
SubGhzWorker* subghz_worker_alloc();
void subghz_worker_free(SubGhzWorker* instance);
void subghz_worker_set_overrun_callback(
    SubGhzWorker* instance,
    SubGhzWorkerOverrunCallback callback);
void subghz_worker_set_pair_callback(SubGhzWorker* instance, SubGhzWorkerPairCallback callback);
void subghz_worker_set_context(SubGhzWorker* instance, void* context);
void subghz_worker_start(SubGhzWorker* instance);
void subghz_worker_stop(SubGhzWorker* instance);
_Bool subghz_worker_is_running(SubGhzWorker* instance);
       
typedef void (*SubGhzTxRxWorkerCallbackHaveRead)(void* context);
typedef struct SubGhzTxRxWorker SubGhzTxRxWorker;
typedef enum {
    SubGhzTxRxWorkerStatusIDLE,
    SubGhzTxRxWorkerStatusTx,
    SubGhzTxRxWorkerStatusRx,
} SubGhzTxRxWorkerStatus;
_Bool subghz_tx_rx_worker_write(SubGhzTxRxWorker* instance, uint8_t* data, size_t size);
size_t subghz_tx_rx_worker_available(SubGhzTxRxWorker* instance);
size_t subghz_tx_rx_worker_read(SubGhzTxRxWorker* instance, uint8_t* data, size_t size);
void subghz_tx_rx_worker_set_callback_have_read(
    SubGhzTxRxWorker* instance,
    SubGhzTxRxWorkerCallbackHaveRead callback,
    void* context);
SubGhzTxRxWorker* subghz_tx_rx_worker_alloc();
void subghz_tx_rx_worker_free(SubGhzTxRxWorker* instance);
_Bool subghz_tx_rx_worker_start(SubGhzTxRxWorker* instance, uint32_t frequency);
void subghz_tx_rx_worker_stop(SubGhzTxRxWorker* instance);
_Bool subghz_tx_rx_worker_is_running(SubGhzTxRxWorker* instance);
       
typedef struct SubGhzTransmitter SubGhzTransmitter;
SubGhzTransmitter*
    subghz_transmitter_alloc_init(SubGhzEnvironment* environment, const char* protocol_name);
void subghz_transmitter_free(SubGhzTransmitter* instance);
SubGhzProtocolEncoderBase* subghz_transmitter_get_protocol_instance(SubGhzTransmitter* instance);
_Bool subghz_transmitter_stop(SubGhzTransmitter* instance);
_Bool subghz_transmitter_deserialize(SubGhzTransmitter* instance, FlipperFormat* flipper_format);
LevelDuration subghz_transmitter_yield(void* context);
       
typedef struct SubGhzEnvironment SubGhzEnvironment;
typedef struct SubGhzProtocolRegistry SubGhzProtocolRegistry;
struct SubGhzProtocolRegistry {
    const SubGhzProtocol** items;
    const size_t size;
};
const SubGhzProtocol* subghz_protocol_registry_get_by_name(
    const SubGhzProtocolRegistry* protocol_registry,
    const char* name);
const SubGhzProtocol* subghz_protocol_registry_get_by_index(
    const SubGhzProtocolRegistry* protocol_registry,
    size_t index);
size_t subghz_protocol_registry_count(const SubGhzProtocolRegistry* protocol_registry);
       
       
#define SUBGHZ_PROTOCOL_PRINCETON_NAME "Princeton"
typedef struct SubGhzProtocolDecoderPrinceton SubGhzProtocolDecoderPrinceton;
typedef struct SubGhzProtocolEncoderPrinceton SubGhzProtocolEncoderPrinceton;
extern const SubGhzProtocolDecoder subghz_protocol_princeton_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_princeton_encoder;
extern const SubGhzProtocol subghz_protocol_princeton;
void* subghz_protocol_encoder_princeton_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_princeton_free(void* context);
_Bool subghz_protocol_encoder_princeton_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_princeton_stop(void* context);
LevelDuration subghz_protocol_encoder_princeton_yield(void* context);
void* subghz_protocol_decoder_princeton_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_princeton_free(void* context);
void subghz_protocol_decoder_princeton_reset(void* context);
void subghz_protocol_decoder_princeton_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_princeton_get_hash_data(void* context);
_Bool subghz_protocol_decoder_princeton_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_princeton_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_princeton_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_KEELOQ_NAME "KeeLoq"
typedef struct SubGhzProtocolDecoderKeeloq SubGhzProtocolDecoderKeeloq;
typedef struct SubGhzProtocolEncoderKeeloq SubGhzProtocolEncoderKeeloq;
extern const SubGhzProtocolDecoder subghz_protocol_keeloq_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_keeloq_encoder;
extern const SubGhzProtocol subghz_protocol_keeloq;
void keeloq_reset_mfname();
void keeloq_reset_kl_type();
void* subghz_protocol_encoder_keeloq_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_keeloq_free(void* context);
_Bool subghz_protocol_keeloq_create_data(
    void* context,
    FlipperFormat* flipper_format,
    uint32_t serial,
    uint8_t btn,
    uint16_t cnt,
    const char* manufacture_name,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_keeloq_bft_create_data(
    void* context,
    FlipperFormat* flipper_format,
    uint32_t serial,
    uint8_t btn,
    uint16_t cnt,
    uint32_t seed,
    const char* manufacture_name,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_encoder_keeloq_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_keeloq_stop(void* context);
LevelDuration subghz_protocol_encoder_keeloq_yield(void* context);
void* subghz_protocol_decoder_keeloq_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_keeloq_free(void* context);
void subghz_protocol_decoder_keeloq_reset(void* context);
void subghz_protocol_decoder_keeloq_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_keeloq_get_hash_data(void* context);
_Bool subghz_protocol_decoder_keeloq_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_keeloq_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_keeloq_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_STAR_LINE_NAME "Star Line"
typedef struct SubGhzProtocolDecoderStarLine SubGhzProtocolDecoderStarLine;
typedef struct SubGhzProtocolEncoderStarLine SubGhzProtocolEncoderStarLine;
extern const SubGhzProtocolDecoder subghz_protocol_star_line_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_star_line_encoder;
extern const SubGhzProtocol subghz_protocol_star_line;
void star_line_reset_mfname();
void star_line_reset_kl_type();
void* subghz_protocol_encoder_star_line_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_star_line_free(void* context);
_Bool subghz_protocol_star_line_create_data(
    void* context,
    FlipperFormat* flipper_format,
    uint32_t serial,
    uint8_t btn,
    uint16_t cnt,
    const char* manufacture_name,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_encoder_star_line_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_star_line_stop(void* context);
LevelDuration subghz_protocol_encoder_star_line_yield(void* context);
void* subghz_protocol_decoder_star_line_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_star_line_free(void* context);
void subghz_protocol_decoder_star_line_reset(void* context);
void subghz_protocol_decoder_star_line_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_star_line_get_hash_data(void* context);
_Bool subghz_protocol_decoder_star_line_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_star_line_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_star_line_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_NICE_FLO_NAME "Nice FLO"
typedef struct SubGhzProtocolDecoderNiceFlo SubGhzProtocolDecoderNiceFlo;
typedef struct SubGhzProtocolEncoderNiceFlo SubGhzProtocolEncoderNiceFlo;
extern const SubGhzProtocolDecoder subghz_protocol_nice_flo_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_nice_flo_encoder;
extern const SubGhzProtocol subghz_protocol_nice_flo;
void* subghz_protocol_encoder_nice_flo_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_nice_flo_free(void* context);
_Bool subghz_protocol_encoder_nice_flo_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_nice_flo_stop(void* context);
LevelDuration subghz_protocol_encoder_nice_flo_yield(void* context);
void* subghz_protocol_decoder_nice_flo_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_nice_flo_free(void* context);
void subghz_protocol_decoder_nice_flo_reset(void* context);
void subghz_protocol_decoder_nice_flo_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_nice_flo_get_hash_data(void* context);
_Bool subghz_protocol_decoder_nice_flo_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_nice_flo_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_nice_flo_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_CAME_NAME "CAME"
typedef struct SubGhzProtocolDecoderCame SubGhzProtocolDecoderCame;
typedef struct SubGhzProtocolEncoderCame SubGhzProtocolEncoderCame;
extern const SubGhzProtocolDecoder subghz_protocol_came_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_came_encoder;
extern const SubGhzProtocol subghz_protocol_came;
void* subghz_protocol_encoder_came_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_came_free(void* context);
_Bool subghz_protocol_encoder_came_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_came_stop(void* context);
LevelDuration subghz_protocol_encoder_came_yield(void* context);
void* subghz_protocol_decoder_came_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_came_free(void* context);
void subghz_protocol_decoder_came_reset(void* context);
void subghz_protocol_decoder_came_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_came_get_hash_data(void* context);
_Bool subghz_protocol_decoder_came_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_came_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_came_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_FAAC_SLH_NAME "Faac SLH"
typedef struct SubGhzProtocolDecoderFaacSLH SubGhzProtocolDecoderFaacSLH;
typedef struct SubGhzProtocolEncoderFaacSLH SubGhzProtocolEncoderFaacSLH;
extern const SubGhzProtocolDecoder subghz_protocol_faac_slh_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_faac_slh_encoder;
extern const SubGhzProtocol subghz_protocol_faac_slh;
void* subghz_protocol_encoder_faac_slh_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_faac_slh_free(void* context);
_Bool subghz_protocol_faac_slh_create_data(
    void* context,
    FlipperFormat* flipper_format,
    uint32_t serial,
    uint8_t btn,
    uint32_t cnt,
    uint32_t seed,
    const char* manufacture_name,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_encoder_faac_slh_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_faac_slh_stop(void* context);
LevelDuration subghz_protocol_encoder_faac_slh_yield(void* context);
void* subghz_protocol_decoder_faac_slh_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_faac_slh_free(void* context);
void subghz_protocol_decoder_faac_slh_reset(void* context);
void subghz_protocol_decoder_faac_slh_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_faac_slh_get_hash_data(void* context);
_Bool subghz_protocol_decoder_faac_slh_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_faac_slh_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_faac_slh_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_NICE_FLOR_S_NAME "Nice FloR-S"
typedef struct SubGhzProtocolDecoderNiceFlorS SubGhzProtocolDecoderNiceFlorS;
typedef struct SubGhzProtocolEncoderNiceFlorS SubGhzProtocolEncoderNiceFlorS;
extern const SubGhzProtocolDecoder subghz_protocol_nice_flor_s_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_nice_flor_s_encoder;
extern const SubGhzProtocol subghz_protocol_nice_flor_s;
void* subghz_protocol_encoder_nice_flor_s_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_nice_flor_s_free(void* context);
_Bool subghz_protocol_encoder_nice_flor_s_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_nice_flor_s_stop(void* context);
LevelDuration subghz_protocol_encoder_nice_flor_s_yield(void* context);
uint64_t subghz_protocol_nice_flor_s_encrypt(uint64_t data, const char* file_name);
_Bool subghz_protocol_nice_flor_s_create_data(
    void* context,
    FlipperFormat* flipper_format,
    uint32_t serial,
    uint8_t btn,
    uint16_t cnt,
    SubGhzRadioPreset* preset);
void* subghz_protocol_decoder_nice_flor_s_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_nice_flor_s_free(void* context);
void subghz_protocol_decoder_nice_flor_s_reset(void* context);
void subghz_protocol_decoder_nice_flor_s_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_nice_flor_s_get_hash_data(void* context);
_Bool subghz_protocol_decoder_nice_flor_s_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_nice_flor_s_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_nice_flor_s_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_CAME_TWEE_NAME "CAME TWEE"
typedef struct SubGhzProtocolDecoderCameTwee SubGhzProtocolDecoderCameTwee;
typedef struct SubGhzProtocolEncoderCameTwee SubGhzProtocolEncoderCameTwee;
extern const SubGhzProtocolDecoder subghz_protocol_came_twee_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_came_twee_encoder;
extern const SubGhzProtocol subghz_protocol_came_twee;
void* subghz_protocol_encoder_came_twee_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_came_twee_free(void* context);
_Bool subghz_protocol_encoder_came_twee_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_came_twee_stop(void* context);
LevelDuration subghz_protocol_encoder_came_twee_yield(void* context);
void* subghz_protocol_decoder_came_twee_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_came_twee_free(void* context);
void subghz_protocol_decoder_came_twee_reset(void* context);
void subghz_protocol_decoder_came_twee_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_came_twee_get_hash_data(void* context);
_Bool subghz_protocol_decoder_came_twee_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_came_twee_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_came_twee_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_CAME_ATOMO_NAME "CAME Atomo"
typedef struct SubGhzProtocolDecoderCameAtomo SubGhzProtocolDecoderCameAtomo;
typedef struct SubGhzProtocolEncoderCameAtomo SubGhzProtocolEncoderCameAtomo;
extern const SubGhzProtocolDecoder subghz_protocol_came_atomo_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_came_atomo_encoder;
extern const SubGhzProtocol subghz_protocol_came_atomo;
void atomo_decrypt(uint8_t* buff);
void atomo_encrypt(uint8_t* buff);
void* subghz_protocol_encoder_came_atomo_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_came_atomo_free(void* context);
_Bool subghz_protocol_encoder_came_atomo_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_came_atomo_stop(void* context);
LevelDuration subghz_protocol_encoder_came_atomo_yield(void* context);
void* subghz_protocol_decoder_came_atomo_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_came_atomo_free(void* context);
void subghz_protocol_decoder_came_atomo_reset(void* context);
void subghz_protocol_decoder_came_atomo_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_came_atomo_get_hash_data(void* context);
_Bool subghz_protocol_decoder_came_atomo_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_came_atomo_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_came_atomo_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_NERO_SKETCH_NAME "Nero Sketch"
typedef struct SubGhzProtocolDecoderNeroSketch SubGhzProtocolDecoderNeroSketch;
typedef struct SubGhzProtocolEncoderNeroSketch SubGhzProtocolEncoderNeroSketch;
extern const SubGhzProtocolDecoder subghz_protocol_nero_sketch_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_nero_sketch_encoder;
extern const SubGhzProtocol subghz_protocol_nero_sketch;
void* subghz_protocol_encoder_nero_sketch_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_nero_sketch_free(void* context);
_Bool subghz_protocol_encoder_nero_sketch_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_nero_sketch_stop(void* context);
LevelDuration subghz_protocol_encoder_nero_sketch_yield(void* context);
void* subghz_protocol_decoder_nero_sketch_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_nero_sketch_free(void* context);
void subghz_protocol_decoder_nero_sketch_reset(void* context);
void subghz_protocol_decoder_nero_sketch_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_nero_sketch_get_hash_data(void* context);
_Bool subghz_protocol_decoder_nero_sketch_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_nero_sketch_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_nero_sketch_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_IDO_NAME "iDo 117/111"
typedef struct SubGhzProtocolDecoderIDo SubGhzProtocolDecoderIDo;
typedef struct SubGhzProtocolEncoderIDo SubGhzProtocolEncoderIDo;
extern const SubGhzProtocolDecoder subghz_protocol_ido_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_ido_encoder;
extern const SubGhzProtocol subghz_protocol_ido;
void* subghz_protocol_decoder_ido_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_ido_free(void* context);
void subghz_protocol_decoder_ido_reset(void* context);
void subghz_protocol_decoder_ido_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_ido_get_hash_data(void* context);
_Bool subghz_protocol_decoder_ido_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_ido_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_ido_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_KIA_NAME "KIA Seed"
typedef struct SubGhzProtocolDecoderKIA SubGhzProtocolDecoderKIA;
typedef struct SubGhzProtocolEncoderKIA SubGhzProtocolEncoderKIA;
extern const SubGhzProtocolDecoder subghz_protocol_kia_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_kia_encoder;
extern const SubGhzProtocol subghz_protocol_kia;
void* subghz_protocol_decoder_kia_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_kia_free(void* context);
void subghz_protocol_decoder_kia_reset(void* context);
void subghz_protocol_decoder_kia_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_kia_get_hash_data(void* context);
_Bool subghz_protocol_decoder_kia_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_kia_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_kia_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_HORMANN_HSM_NAME "Hormann HSM"
typedef struct SubGhzProtocolDecoderHormann SubGhzProtocolDecoderHormann;
typedef struct SubGhzProtocolEncoderHormann SubGhzProtocolEncoderHormann;
extern const SubGhzProtocolDecoder subghz_protocol_hormann_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_hormann_encoder;
extern const SubGhzProtocol subghz_protocol_hormann;
void* subghz_protocol_encoder_hormann_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_hormann_free(void* context);
_Bool subghz_protocol_encoder_hormann_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_hormann_stop(void* context);
LevelDuration subghz_protocol_encoder_hormann_yield(void* context);
void* subghz_protocol_decoder_hormann_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_hormann_free(void* context);
void subghz_protocol_decoder_hormann_reset(void* context);
void subghz_protocol_decoder_hormann_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_hormann_get_hash_data(void* context);
_Bool subghz_protocol_decoder_hormann_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_hormann_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_hormann_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_NERO_RADIO_NAME "Nero Radio"
typedef struct SubGhzProtocolDecoderNeroRadio SubGhzProtocolDecoderNeroRadio;
typedef struct SubGhzProtocolEncoderNeroRadio SubGhzProtocolEncoderNeroRadio;
extern const SubGhzProtocolDecoder subghz_protocol_nero_radio_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_nero_radio_encoder;
extern const SubGhzProtocol subghz_protocol_nero_radio;
void* subghz_protocol_encoder_nero_radio_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_nero_radio_free(void* context);
_Bool subghz_protocol_encoder_nero_radio_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_nero_radio_stop(void* context);
LevelDuration subghz_protocol_encoder_nero_radio_yield(void* context);
void* subghz_protocol_decoder_nero_radio_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_nero_radio_free(void* context);
void subghz_protocol_decoder_nero_radio_reset(void* context);
void subghz_protocol_decoder_nero_radio_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_nero_radio_get_hash_data(void* context);
_Bool subghz_protocol_decoder_nero_radio_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_nero_radio_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_nero_radio_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_SOMFY_TELIS_NAME "Somfy Telis"
typedef struct SubGhzProtocolDecoderSomfyTelis SubGhzProtocolDecoderSomfyTelis;
typedef struct SubGhzProtocolEncoderSomfyTelis SubGhzProtocolEncoderSomfyTelis;
extern const SubGhzProtocolDecoder subghz_protocol_somfy_telis_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_somfy_telis_encoder;
extern const SubGhzProtocol subghz_protocol_somfy_telis;
void* subghz_protocol_encoder_somfy_telis_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_somfy_telis_free(void* context);
_Bool subghz_protocol_somfy_telis_create_data(
    void* context,
    FlipperFormat* flipper_format,
    uint32_t serial,
    uint8_t btn,
    uint16_t cnt,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_encoder_somfy_telis_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_somfy_telis_stop(void* context);
LevelDuration subghz_protocol_encoder_somfy_telis_yield(void* context);
void* subghz_protocol_decoder_somfy_telis_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_somfy_telis_free(void* context);
void subghz_protocol_decoder_somfy_telis_reset(void* context);
void subghz_protocol_decoder_somfy_telis_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_somfy_telis_get_hash_data(void* context);
_Bool subghz_protocol_decoder_somfy_telis_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_somfy_telis_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_somfy_telis_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_SOMFY_KEYTIS_NAME "Somfy Keytis"
typedef struct SubGhzProtocolDecoderSomfyKeytis SubGhzProtocolDecoderSomfyKeytis;
typedef struct SubGhzProtocolEncoderSomfyKeytis SubGhzProtocolEncoderSomfyKeytis;
extern const SubGhzProtocolDecoder subghz_protocol_somfy_keytis_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_somfy_keytis_encoder;
extern const SubGhzProtocol subghz_protocol_somfy_keytis;
void* subghz_protocol_encoder_somfy_keytis_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_somfy_keytis_free(void* context);
_Bool subghz_protocol_somfy_keytis_create_data(
    void* context,
    FlipperFormat* flipper_format,
    uint32_t serial,
    uint8_t btn,
    uint16_t cnt,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_encoder_somfy_keytis_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_somfy_keytis_stop(void* context);
LevelDuration subghz_protocol_encoder_somfy_keytis_yield(void* context);
void* subghz_protocol_decoder_somfy_keytis_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_somfy_keytis_free(void* context);
void subghz_protocol_decoder_somfy_keytis_reset(void* context);
void subghz_protocol_decoder_somfy_keytis_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_somfy_keytis_get_hash_data(void* context);
_Bool subghz_protocol_decoder_somfy_keytis_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_somfy_keytis_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_somfy_keytis_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_SCHER_KHAN_NAME "Scher-Khan"
typedef struct SubGhzProtocolDecoderScherKhan SubGhzProtocolDecoderScherKhan;
typedef struct SubGhzProtocolEncoderScherKhan SubGhzProtocolEncoderScherKhan;
extern const SubGhzProtocolDecoder subghz_protocol_scher_khan_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_scher_khan_encoder;
extern const SubGhzProtocol subghz_protocol_scher_khan;
void* subghz_protocol_decoder_scher_khan_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_scher_khan_free(void* context);
void subghz_protocol_decoder_scher_khan_reset(void* context);
void subghz_protocol_decoder_scher_khan_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_scher_khan_get_hash_data(void* context);
_Bool subghz_protocol_decoder_scher_khan_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_scher_khan_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_scher_khan_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_GATE_TX_NAME "GateTX"
typedef struct SubGhzProtocolDecoderGateTx SubGhzProtocolDecoderGateTx;
typedef struct SubGhzProtocolEncoderGateTx SubGhzProtocolEncoderGateTx;
extern const SubGhzProtocolDecoder subghz_protocol_gate_tx_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_gate_tx_encoder;
extern const SubGhzProtocol subghz_protocol_gate_tx;
void* subghz_protocol_encoder_gate_tx_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_gate_tx_free(void* context);
_Bool subghz_protocol_encoder_gate_tx_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_gate_tx_stop(void* context);
LevelDuration subghz_protocol_encoder_gate_tx_yield(void* context);
void* subghz_protocol_decoder_gate_tx_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_gate_tx_free(void* context);
void subghz_protocol_decoder_gate_tx_reset(void* context);
void subghz_protocol_decoder_gate_tx_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_gate_tx_get_hash_data(void* context);
_Bool subghz_protocol_decoder_gate_tx_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_gate_tx_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_gate_tx_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_RAW_NAME "RAW"
typedef void (*SubGhzProtocolEncoderRAWCallbackEnd)(void* context);
typedef struct SubGhzProtocolDecoderRAW SubGhzProtocolDecoderRAW;
typedef struct SubGhzProtocolEncoderRAW SubGhzProtocolEncoderRAW;
extern const SubGhzProtocolDecoder subghz_protocol_raw_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_raw_encoder;
extern const SubGhzProtocol subghz_protocol_raw;
_Bool subghz_protocol_raw_save_to_file_init(
    SubGhzProtocolDecoderRAW* instance,
    const char* dev_name,
    SubGhzRadioPreset* preset);
void subghz_protocol_decoder_raw_set_auto_mode(void* context, _Bool auto_mode);
void subghz_protocol_decoder_raw_set_rssi_threshold(void* context, int rssi_threshold);
int subghz_protocol_encoder_get_rssi_threshold(void* context);
void subghz_protocol_raw_save_to_file_stop(SubGhzProtocolDecoderRAW* instance);
size_t subghz_protocol_raw_get_sample_write(SubGhzProtocolDecoderRAW* instance);
void* subghz_protocol_decoder_raw_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_raw_free(void* context);
void subghz_protocol_decoder_raw_reset(void* context);
_Bool subghz_protocol_decoder_raw_write_data(void* context, _Bool level, uint32_t duration);
void subghz_protocol_decoder_raw_feed(void* context, _Bool level, uint32_t duration);
_Bool subghz_protocol_decoder_raw_deserialize(void* context, FlipperFormat* flipper_format);
uint8_t subghz_protocol_decoder_raw_get_hash_data(void* context);
void subghz_protocol_decoder_raw_get_string(void* context, FuriString* output);
void* subghz_protocol_encoder_raw_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_raw_free(void* context);
void subghz_protocol_encoder_raw_stop(void* context);
void subghz_protocol_raw_save_to_file_pause(SubGhzProtocolDecoderRAW* instance, _Bool pause);
void subghz_protocol_raw_file_encoder_worker_set_callback_end(
    SubGhzProtocolEncoderRAW* instance,
    SubGhzProtocolEncoderRAWCallbackEnd callback_end,
    void* context_end);
void subghz_protocol_raw_gen_fff_data(FlipperFormat* flipper_format, const char* file_path);
_Bool subghz_protocol_decoder_raw_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_encoder_raw_deserialize(void* context, FlipperFormat* flipper_format);
LevelDuration subghz_protocol_encoder_raw_yield(void* context);
       
#define SUBGHZ_PROTOCOL_LINEAR_NAME "Linear"
typedef struct SubGhzProtocolDecoderLinear SubGhzProtocolDecoderLinear;
typedef struct SubGhzProtocolEncoderLinear SubGhzProtocolEncoderLinear;
extern const SubGhzProtocolDecoder subghz_protocol_linear_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_linear_encoder;
extern const SubGhzProtocol subghz_protocol_linear;
void* subghz_protocol_encoder_linear_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_linear_free(void* context);
_Bool subghz_protocol_encoder_linear_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_linear_stop(void* context);
LevelDuration subghz_protocol_encoder_linear_yield(void* context);
void* subghz_protocol_decoder_linear_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_linear_free(void* context);
void subghz_protocol_decoder_linear_reset(void* context);
void subghz_protocol_decoder_linear_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_linear_get_hash_data(void* context);
_Bool subghz_protocol_decoder_linear_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_linear_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_linear_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_LINEAR_DELTA3_NAME "Linear2"
typedef struct SubGhzProtocolDecoderLinearDelta3 SubGhzProtocolDecoderLinearDelta3;
typedef struct SubGhzProtocolEncoderLinearDelta3 SubGhzProtocolEncoderLinearDelta3;
extern const SubGhzProtocolDecoder subghz_protocol_linear_delta3_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_linear_delta3_encoder;
extern const SubGhzProtocol subghz_protocol_linear_delta3;
void* subghz_protocol_encoder_linear_delta3_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_linear_delta3_free(void* context);
_Bool subghz_protocol_encoder_linear_delta3_deserialize(
    void* context,
    FlipperFormat* flipper_format);
void subghz_protocol_encoder_linear_delta3_stop(void* context);
LevelDuration subghz_protocol_encoder_linear_delta3_yield(void* context);
void* subghz_protocol_decoder_linear_delta3_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_linear_delta3_free(void* context);
void subghz_protocol_decoder_linear_delta3_reset(void* context);
void subghz_protocol_decoder_linear_delta3_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_linear_delta3_get_hash_data(void* context);
_Bool subghz_protocol_decoder_linear_delta3_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_linear_delta3_deserialize(
    void* context,
    FlipperFormat* flipper_format);
void subghz_protocol_decoder_linear_delta3_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_SECPLUS_V2_NAME "Security+ 2.0"
typedef struct SubGhzProtocolDecoderSecPlus_v2 SubGhzProtocolDecoderSecPlus_v2;
typedef struct SubGhzProtocolEncoderSecPlus_v2 SubGhzProtocolEncoderSecPlus_v2;
extern const SubGhzProtocolDecoder subghz_protocol_secplus_v2_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_secplus_v2_encoder;
extern const SubGhzProtocol subghz_protocol_secplus_v2;
void* subghz_protocol_encoder_secplus_v2_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_secplus_v2_free(void* context);
_Bool subghz_protocol_encoder_secplus_v2_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_secplus_v2_stop(void* context);
LevelDuration subghz_protocol_encoder_secplus_v2_yield(void* context);
_Bool subghz_protocol_secplus_v2_create_data(
    void* context,
    FlipperFormat* flipper_format,
    uint32_t serial,
    uint8_t btn,
    uint32_t cnt,
    SubGhzRadioPreset* preset);
void* subghz_protocol_decoder_secplus_v2_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_secplus_v2_free(void* context);
void subghz_protocol_decoder_secplus_v2_reset(void* context);
void subghz_protocol_decoder_secplus_v2_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_secplus_v2_get_hash_data(void* context);
_Bool subghz_protocol_decoder_secplus_v2_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_secplus_v2_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_secplus_v2_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_SECPLUS_V1_NAME "Security+ 1.0"
typedef struct SubGhzProtocolDecoderSecPlus_v1 SubGhzProtocolDecoderSecPlus_v1;
typedef struct SubGhzProtocolEncoderSecPlus_v1 SubGhzProtocolEncoderSecPlus_v1;
extern const SubGhzProtocolDecoder subghz_protocol_secplus_v1_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_secplus_v1_encoder;
extern const SubGhzProtocol subghz_protocol_secplus_v1;
void* subghz_protocol_encoder_secplus_v1_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_secplus_v1_free(void* context);
_Bool subghz_protocol_encoder_secplus_v1_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_secplus_v1_stop(void* context);
LevelDuration subghz_protocol_encoder_secplus_v1_yield(void* context);
void* subghz_protocol_decoder_secplus_v1_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_secplus_v1_free(void* context);
void subghz_protocol_decoder_secplus_v1_reset(void* context);
void subghz_protocol_decoder_secplus_v1_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_secplus_v1_get_hash_data(void* context);
_Bool subghz_protocol_decoder_secplus_v1_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_secplus_v1_deserialize(void* context, FlipperFormat* flipper_format);
_Bool subghz_protocol_secplus_v1_check_fixed(uint32_t fixed);
void subghz_protocol_decoder_secplus_v1_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_MEGACODE_NAME "MegaCode"
typedef struct SubGhzProtocolDecoderMegaCode SubGhzProtocolDecoderMegaCode;
typedef struct SubGhzProtocolEncoderMegaCode SubGhzProtocolEncoderMegaCode;
extern const SubGhzProtocolDecoder subghz_protocol_megacode_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_megacode_encoder;
extern const SubGhzProtocol subghz_protocol_megacode;
void* subghz_protocol_encoder_megacode_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_megacode_free(void* context);
_Bool subghz_protocol_encoder_megacode_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_megacode_stop(void* context);
LevelDuration subghz_protocol_encoder_megacode_yield(void* context);
void* subghz_protocol_decoder_megacode_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_megacode_free(void* context);
void subghz_protocol_decoder_megacode_reset(void* context);
void subghz_protocol_decoder_megacode_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_megacode_get_hash_data(void* context);
_Bool subghz_protocol_decoder_megacode_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_megacode_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_megacode_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_HOLTEK_NAME "Holtek"
typedef struct SubGhzProtocolDecoderHoltek SubGhzProtocolDecoderHoltek;
typedef struct SubGhzProtocolEncoderHoltek SubGhzProtocolEncoderHoltek;
extern const SubGhzProtocolDecoder subghz_protocol_holtek_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_holtek_encoder;
extern const SubGhzProtocol subghz_protocol_holtek;
void* subghz_protocol_encoder_holtek_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_holtek_free(void* context);
_Bool subghz_protocol_encoder_holtek_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_holtek_stop(void* context);
LevelDuration subghz_protocol_encoder_holtek_yield(void* context);
void* subghz_protocol_decoder_holtek_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_holtek_free(void* context);
void subghz_protocol_decoder_holtek_reset(void* context);
void subghz_protocol_decoder_holtek_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_holtek_get_hash_data(void* context);
_Bool subghz_protocol_decoder_holtek_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_holtek_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_holtek_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_CHAMB_CODE_NAME "Cham_Code"
typedef struct SubGhzProtocolDecoderChamb_Code SubGhzProtocolDecoderChamb_Code;
typedef struct SubGhzProtocolEncoderChamb_Code SubGhzProtocolEncoderChamb_Code;
extern const SubGhzProtocolDecoder subghz_protocol_chamb_code_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_chamb_code_encoder;
extern const SubGhzProtocol subghz_protocol_chamb_code;
void* subghz_protocol_encoder_chamb_code_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_chamb_code_free(void* context);
_Bool subghz_protocol_encoder_chamb_code_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_chamb_code_stop(void* context);
LevelDuration subghz_protocol_encoder_chamb_code_yield(void* context);
void* subghz_protocol_decoder_chamb_code_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_chamb_code_free(void* context);
void subghz_protocol_decoder_chamb_code_reset(void* context);
void subghz_protocol_decoder_chamb_code_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_chamb_code_get_hash_data(void* context);
_Bool subghz_protocol_decoder_chamb_code_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_chamb_code_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_chamb_code_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_POWER_SMART_NAME "Power Smart"
typedef struct SubGhzProtocolDecoderPowerSmart SubGhzProtocolDecoderPowerSmart;
typedef struct SubGhzProtocolEncoderPowerSmart SubGhzProtocolEncoderPowerSmart;
extern const SubGhzProtocolDecoder subghz_protocol_power_smart_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_power_smart_encoder;
extern const SubGhzProtocol subghz_protocol_power_smart;
void* subghz_protocol_encoder_power_smart_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_power_smart_free(void* context);
_Bool subghz_protocol_encoder_power_smart_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_power_smart_stop(void* context);
LevelDuration subghz_protocol_encoder_power_smart_yield(void* context);
void* subghz_protocol_decoder_power_smart_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_power_smart_free(void* context);
void subghz_protocol_decoder_power_smart_reset(void* context);
void subghz_protocol_decoder_power_smart_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_power_smart_get_hash_data(void* context);
_Bool subghz_protocol_decoder_power_smart_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_power_smart_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_power_smart_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_MARANTEC_NAME "Marantec"
typedef struct SubGhzProtocolDecoderMarantec SubGhzProtocolDecoderMarantec;
typedef struct SubGhzProtocolEncoderMarantec SubGhzProtocolEncoderMarantec;
extern const SubGhzProtocolDecoder subghz_protocol_marantec_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_marantec_encoder;
extern const SubGhzProtocol subghz_protocol_marantec;
void* subghz_protocol_encoder_marantec_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_marantec_free(void* context);
_Bool subghz_protocol_encoder_marantec_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_marantec_stop(void* context);
LevelDuration subghz_protocol_encoder_marantec_yield(void* context);
void* subghz_protocol_decoder_marantec_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_marantec_free(void* context);
void subghz_protocol_decoder_marantec_reset(void* context);
void subghz_protocol_decoder_marantec_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_marantec_get_hash_data(void* context);
_Bool subghz_protocol_decoder_marantec_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_marantec_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_marantec_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_BETT_NAME "BETT"
typedef struct SubGhzProtocolDecoderBETT SubGhzProtocolDecoderBETT;
typedef struct SubGhzProtocolEncoderBETT SubGhzProtocolEncoderBETT;
extern const SubGhzProtocolDecoder subghz_protocol_bett_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_bett_encoder;
extern const SubGhzProtocol subghz_protocol_bett;
void* subghz_protocol_encoder_bett_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_bett_free(void* context);
_Bool subghz_protocol_encoder_bett_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_bett_stop(void* context);
LevelDuration subghz_protocol_encoder_bett_yield(void* context);
void* subghz_protocol_decoder_bett_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_bett_free(void* context);
void subghz_protocol_decoder_bett_reset(void* context);
void subghz_protocol_decoder_bett_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_bett_get_hash_data(void* context);
_Bool subghz_protocol_decoder_bett_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_bett_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_bett_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_DOITRAND_NAME "Doitrand"
typedef struct SubGhzProtocolDecoderDoitrand SubGhzProtocolDecoderDoitrand;
typedef struct SubGhzProtocolEncoderDoitrand SubGhzProtocolEncoderDoitrand;
extern const SubGhzProtocolDecoder subghz_protocol_doitrand_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_doitrand_encoder;
extern const SubGhzProtocol subghz_protocol_doitrand;
void* subghz_protocol_encoder_doitrand_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_doitrand_free(void* context);
_Bool subghz_protocol_encoder_doitrand_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_doitrand_stop(void* context);
LevelDuration subghz_protocol_encoder_doitrand_yield(void* context);
void* subghz_protocol_decoder_doitrand_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_doitrand_free(void* context);
void subghz_protocol_decoder_doitrand_reset(void* context);
void subghz_protocol_decoder_doitrand_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_doitrand_get_hash_data(void* context);
_Bool subghz_protocol_decoder_doitrand_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_doitrand_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_doitrand_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_PHOENIX_V2_NAME "Phoenix_V2"
typedef struct SubGhzProtocolDecoderPhoenix_V2 SubGhzProtocolDecoderPhoenix_V2;
typedef struct SubGhzProtocolEncoderPhoenix_V2 SubGhzProtocolEncoderPhoenix_V2;
extern const SubGhzProtocolDecoder subghz_protocol_phoenix_v2_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_phoenix_v2_encoder;
extern const SubGhzProtocol subghz_protocol_phoenix_v2;
void* subghz_protocol_encoder_phoenix_v2_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_phoenix_v2_free(void* context);
_Bool subghz_protocol_encoder_phoenix_v2_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_phoenix_v2_stop(void* context);
LevelDuration subghz_protocol_encoder_phoenix_v2_yield(void* context);
void* subghz_protocol_decoder_phoenix_v2_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_phoenix_v2_free(void* context);
void subghz_protocol_decoder_phoenix_v2_reset(void* context);
void subghz_protocol_decoder_phoenix_v2_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_phoenix_v2_get_hash_data(void* context);
_Bool subghz_protocol_decoder_phoenix_v2_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_phoenix_v2_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_phoenix_v2_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_HONEYWELL_WDB_NAME "Honeywell"
typedef struct SubGhzProtocolDecoderHoneywell_WDB SubGhzProtocolDecoderHoneywell_WDB;
typedef struct SubGhzProtocolEncoderHoneywell_WDB SubGhzProtocolEncoderHoneywell_WDB;
extern const SubGhzProtocolDecoder subghz_protocol_honeywell_wdb_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_honeywell_wdb_encoder;
extern const SubGhzProtocol subghz_protocol_honeywell_wdb;
void* subghz_protocol_encoder_honeywell_wdb_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_honeywell_wdb_free(void* context);
_Bool subghz_protocol_encoder_honeywell_wdb_deserialize(
    void* context,
    FlipperFormat* flipper_format);
void subghz_protocol_encoder_honeywell_wdb_stop(void* context);
LevelDuration subghz_protocol_encoder_honeywell_wdb_yield(void* context);
void* subghz_protocol_decoder_honeywell_wdb_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_honeywell_wdb_free(void* context);
void subghz_protocol_decoder_honeywell_wdb_reset(void* context);
void subghz_protocol_decoder_honeywell_wdb_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_honeywell_wdb_get_hash_data(void* context);
_Bool subghz_protocol_decoder_honeywell_wdb_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_honeywell_wdb_deserialize(
    void* context,
    FlipperFormat* flipper_format);
void subghz_protocol_decoder_honeywell_wdb_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_MAGELLAN_NAME "Magellan"
typedef struct SubGhzProtocolDecoderMagellan SubGhzProtocolDecoderMagellan;
typedef struct SubGhzProtocolEncoderMagellan SubGhzProtocolEncoderMagellan;
extern const SubGhzProtocolDecoder subghz_protocol_magellan_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_magellan_encoder;
extern const SubGhzProtocol subghz_protocol_magellan;
void* subghz_protocol_encoder_magellan_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_magellan_free(void* context);
_Bool subghz_protocol_encoder_magellan_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_magellan_stop(void* context);
LevelDuration subghz_protocol_encoder_magellan_yield(void* context);
void* subghz_protocol_decoder_magellan_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_magellan_free(void* context);
void subghz_protocol_decoder_magellan_reset(void* context);
void subghz_protocol_decoder_magellan_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_magellan_get_hash_data(void* context);
_Bool subghz_protocol_decoder_magellan_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_magellan_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_magellan_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_INTERTECHNO_V3_NAME "Intertechno_V3"
typedef struct SubGhzProtocolDecoderIntertechno_V3 SubGhzProtocolDecoderIntertechno_V3;
typedef struct SubGhzProtocolEncoderIntertechno_V3 SubGhzProtocolEncoderIntertechno_V3;
extern const SubGhzProtocolDecoder subghz_protocol_intertechno_v3_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_intertechno_v3_encoder;
extern const SubGhzProtocol subghz_protocol_intertechno_v3;
void* subghz_protocol_encoder_intertechno_v3_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_intertechno_v3_free(void* context);
_Bool subghz_protocol_encoder_intertechno_v3_deserialize(
    void* context,
    FlipperFormat* flipper_format);
void subghz_protocol_encoder_intertechno_v3_stop(void* context);
LevelDuration subghz_protocol_encoder_intertechno_v3_yield(void* context);
void* subghz_protocol_decoder_intertechno_v3_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_intertechno_v3_free(void* context);
void subghz_protocol_decoder_intertechno_v3_reset(void* context);
void subghz_protocol_decoder_intertechno_v3_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_intertechno_v3_get_hash_data(void* context);
_Bool subghz_protocol_decoder_intertechno_v3_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_intertechno_v3_deserialize(
    void* context,
    FlipperFormat* flipper_format);
void subghz_protocol_decoder_intertechno_v3_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_CLEMSA_NAME "Clemsa"
typedef struct SubGhzProtocolDecoderClemsa SubGhzProtocolDecoderClemsa;
typedef struct SubGhzProtocolEncoderClemsa SubGhzProtocolEncoderClemsa;
extern const SubGhzProtocolDecoder subghz_protocol_clemsa_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_clemsa_encoder;
extern const SubGhzProtocol subghz_protocol_clemsa;
void* subghz_protocol_encoder_clemsa_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_clemsa_free(void* context);
_Bool subghz_protocol_encoder_clemsa_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_clemsa_stop(void* context);
LevelDuration subghz_protocol_encoder_clemsa_yield(void* context);
void* subghz_protocol_decoder_clemsa_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_clemsa_free(void* context);
void subghz_protocol_decoder_clemsa_reset(void* context);
void subghz_protocol_decoder_clemsa_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_clemsa_get_hash_data(void* context);
_Bool subghz_protocol_decoder_clemsa_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_clemsa_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_clemsa_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_ANSONIC_NAME "Ansonic"
typedef struct SubGhzProtocolDecoderAnsonic SubGhzProtocolDecoderAnsonic;
typedef struct SubGhzProtocolEncoderAnsonic SubGhzProtocolEncoderAnsonic;
extern const SubGhzProtocolDecoder subghz_protocol_ansonic_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_ansonic_encoder;
extern const SubGhzProtocol subghz_protocol_ansonic;
void* subghz_protocol_encoder_ansonic_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_ansonic_free(void* context);
_Bool subghz_protocol_encoder_ansonic_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_ansonic_stop(void* context);
LevelDuration subghz_protocol_encoder_ansonic_yield(void* context);
void* subghz_protocol_decoder_ansonic_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_ansonic_free(void* context);
void subghz_protocol_decoder_ansonic_reset(void* context);
void subghz_protocol_decoder_ansonic_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_ansonic_get_hash_data(void* context);
_Bool subghz_protocol_decoder_ansonic_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_ansonic_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_ansonic_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_POCSAG_NAME "POCSAG"
extern const SubGhzProtocol subghz_protocol_pocsag;
       
#define SUBGHZ_PROTOCOL_SMC5326_NAME "SMC5326"
typedef struct SubGhzProtocolDecoderSMC5326 SubGhzProtocolDecoderSMC5326;
typedef struct SubGhzProtocolEncoderSMC5326 SubGhzProtocolEncoderSMC5326;
extern const SubGhzProtocolDecoder subghz_protocol_smc5326_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_smc5326_encoder;
extern const SubGhzProtocol subghz_protocol_smc5326;
void* subghz_protocol_encoder_smc5326_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_smc5326_free(void* context);
_Bool subghz_protocol_encoder_smc5326_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_smc5326_stop(void* context);
LevelDuration subghz_protocol_encoder_smc5326_yield(void* context);
void* subghz_protocol_decoder_smc5326_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_smc5326_free(void* context);
void subghz_protocol_decoder_smc5326_reset(void* context);
void subghz_protocol_decoder_smc5326_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_smc5326_get_hash_data(void* context);
_Bool subghz_protocol_decoder_smc5326_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_smc5326_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_smc5326_get_string(void* context, FuriString* output);
       
#define SUBGHZ_PROTOCOL_HOLTEK_HT12X_NAME "Holtek_HT12X"
typedef struct SubGhzProtocolDecoderHoltek_HT12X SubGhzProtocolDecoderHoltek_HT12X;
typedef struct SubGhzProtocolEncoderHoltek_HT12X SubGhzProtocolEncoderHoltek_HT12X;
extern const SubGhzProtocolDecoder subghz_protocol_holtek_th12x_decoder;
extern const SubGhzProtocolEncoder subghz_protocol_holtek_th12x_encoder;
extern const SubGhzProtocol subghz_protocol_holtek_th12x;
void* subghz_protocol_encoder_holtek_th12x_alloc(SubGhzEnvironment* environment);
void subghz_protocol_encoder_holtek_th12x_free(void* context);
_Bool subghz_protocol_encoder_holtek_th12x_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_encoder_holtek_th12x_stop(void* context);
LevelDuration subghz_protocol_encoder_holtek_th12x_yield(void* context);
void* subghz_protocol_decoder_holtek_th12x_alloc(SubGhzEnvironment* environment);
void subghz_protocol_decoder_holtek_th12x_free(void* context);
void subghz_protocol_decoder_holtek_th12x_reset(void* context);
void subghz_protocol_decoder_holtek_th12x_feed(void* context, _Bool level, uint32_t duration);
uint8_t subghz_protocol_decoder_holtek_th12x_get_hash_data(void* context);
_Bool subghz_protocol_decoder_holtek_th12x_serialize(
    void* context,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_protocol_decoder_holtek_th12x_deserialize(void* context, FlipperFormat* flipper_format);
void subghz_protocol_decoder_holtek_th12x_get_string(void* context, FuriString* output);
extern const SubGhzProtocolRegistry subghz_protocol_registry;
       
typedef struct {
    const uint16_t te_long;
    const uint16_t te_short;
    const uint16_t te_delta;
    const uint8_t min_count_bit_for_found;
} SubGhzBlockConst;
       
typedef struct SubGhzBlockDecoder SubGhzBlockDecoder;
struct SubGhzBlockDecoder {
    uint32_t parser_step;
    uint32_t te_last;
    uint64_t decode_data;
    uint8_t decode_count_bit;
};
void subghz_protocol_blocks_add_bit(SubGhzBlockDecoder* decoder, uint8_t bit);
void subghz_protocol_blocks_add_to_128_bit(
    SubGhzBlockDecoder* decoder,
    uint8_t bit,
    uint64_t* head_64_bit);
uint8_t subghz_protocol_blocks_get_hash_data(SubGhzBlockDecoder* decoder, size_t len);
       
typedef struct {
    _Bool is_running;
    size_t repeat;
    size_t front;
    size_t size_upload;
    LevelDuration* upload;
} SubGhzProtocolBlockEncoder;
void subghz_protocol_blocks_set_bit_array(
    _Bool bit_value,
    uint8_t data_array[],
    size_t set_index_bit,
    size_t max_size_array);
_Bool subghz_protocol_blocks_get_bit_array(uint8_t data_array[], size_t read_index_bit);
size_t subghz_protocol_blocks_get_upload(
    uint8_t data_array[],
    size_t count_bit_data_array,
    LevelDuration* upload,
    size_t max_size_upload,
    uint32_t duration_bit);
       
typedef struct SubGhzBlockGeneric SubGhzBlockGeneric;
struct SubGhzBlockGeneric {
    const char* protocol_name;
    uint64_t data;
    uint64_t data_2;
    uint32_t serial;
    uint8_t data_count_bit;
    uint8_t btn;
    uint32_t cnt;
    uint8_t cnt_2;
    uint32_t seed;
};
void subghz_block_generic_get_preset_name(const char* preset_name, FuriString* preset_str);
_Bool subghz_block_generic_serialize(
    SubGhzBlockGeneric* instance,
    FlipperFormat* flipper_format,
    SubGhzRadioPreset* preset);
_Bool subghz_block_generic_deserialize(SubGhzBlockGeneric* instance, FlipperFormat* flipper_format);
       
#define bit_read(value,bit) (((value) >> (bit)) & 0x01)
#define bit_set(value,bit) ({ __typeof__(value) _one = (1); (value) |= (_one << (bit)); })
#define bit_clear(value,bit) ({ __typeof__(value) _one = (1); (value) &= ~(_one << (bit)); })
#define bit_write(value,bit,bitvalue) (bitvalue ? bit_set(value, bit) : bit_clear(value, bit))
#define DURATION_DIFF(x,y) (((x) < (y)) ? ((y) - (x)) : ((x) - (y)))
uint64_t subghz_protocol_blocks_reverse_key(uint64_t key, uint8_t bit_count);
uint8_t subghz_protocol_blocks_get_parity(uint64_t key, uint8_t bit_count);
uint8_t subghz_protocol_blocks_crc4(
    uint8_t const message[],
    size_t size,
    uint8_t polynomial,
    uint8_t init);
uint8_t subghz_protocol_blocks_crc7(
    uint8_t const message[],
    size_t size,
    uint8_t polynomial,
    uint8_t init);
uint8_t subghz_protocol_blocks_crc8(
    uint8_t const message[],
    size_t size,
    uint8_t polynomial,
    uint8_t init);
uint8_t subghz_protocol_blocks_crc8le(
    uint8_t const message[],
    size_t size,
    uint8_t polynomial,
    uint8_t init);
uint16_t subghz_protocol_blocks_crc16lsb(
    uint8_t const message[],
    size_t size,
    uint16_t polynomial,
    uint16_t init);
uint16_t subghz_protocol_blocks_crc16(
    uint8_t const message[],
    size_t size,
    uint16_t polynomial,
    uint16_t init);
uint8_t subghz_protocol_blocks_lfsr_digest8(
    uint8_t const message[],
    size_t size,
    uint8_t gen,
    uint8_t key);
uint8_t subghz_protocol_blocks_lfsr_digest8_reflect(
    uint8_t const message[],
    size_t size,
    uint8_t gen,
    uint8_t key);
uint16_t subghz_protocol_blocks_lfsr_digest16(
    uint8_t const message[],
    size_t size,
    uint16_t gen,
    uint16_t key);
uint8_t subghz_protocol_blocks_add_bytes(uint8_t const message[], size_t size);
uint8_t subghz_protocol_blocks_parity8(uint8_t byte);
uint8_t subghz_protocol_blocks_parity_bytes(uint8_t const message[], size_t size);
uint8_t subghz_protocol_blocks_xor_bytes(uint8_t const message[], size_t size);
       
#define SUBGHZ_SETTING_DEFAULT_PRESET_COUNT 4
typedef struct SubGhzSetting SubGhzSetting;
SubGhzSetting* subghz_setting_alloc(void);
void subghz_setting_free(SubGhzSetting* instance);
void subghz_setting_load(SubGhzSetting* instance, const char* file_path);
size_t subghz_setting_get_frequency_count(SubGhzSetting* instance);
size_t subghz_setting_get_hopper_frequency_count(SubGhzSetting* instance);
size_t subghz_setting_get_preset_count(SubGhzSetting* instance);
const char* subghz_setting_get_preset_name(SubGhzSetting* instance, size_t idx);
int subghz_setting_get_inx_preset_by_name(SubGhzSetting* instance, const char* preset_name);
uint8_t* subghz_setting_get_preset_data(SubGhzSetting* instance, size_t idx);
size_t subghz_setting_get_preset_data_size(SubGhzSetting* instance, size_t idx);
uint8_t* subghz_setting_get_preset_data_by_name(SubGhzSetting* instance, const char* preset_name);
_Bool subghz_setting_load_custom_preset(
    SubGhzSetting* instance,
    const char* preset_name,
    FlipperFormat* fff_data_file);
_Bool subghz_setting_delete_custom_preset(SubGhzSetting* instance, const char* preset_name);
uint32_t subghz_setting_get_frequency(SubGhzSetting* instance, size_t idx);
uint32_t subghz_setting_get_hopper_frequency(SubGhzSetting* instance, size_t idx);
uint32_t subghz_setting_get_frequency_default_index(SubGhzSetting* instance);
uint32_t subghz_setting_get_default_frequency(SubGhzSetting* instance);
void subghz_setting_set_default_frequency(SubGhzSetting* instance, uint32_t frequency_to_setup);
       
       
       
       
       
typedef struct Icon Icon;
uint8_t icon_get_width(const Icon* instance);
uint8_t icon_get_height(const Icon* instance);
const uint8_t* icon_get_data(const Icon* instance);
typedef struct IconAnimation IconAnimation;
typedef void (*IconAnimationCallback)(IconAnimation* instance, void* context);
IconAnimation* icon_animation_alloc(const Icon* icon);
void icon_animation_free(IconAnimation* instance);
void icon_animation_set_update_callback(
    IconAnimation* instance,
    IconAnimationCallback callback,
    void* context);
uint8_t icon_animation_get_width(IconAnimation* instance);
uint8_t icon_animation_get_height(IconAnimation* instance);
void icon_animation_start(IconAnimation* instance);
void icon_animation_stop(IconAnimation* instance);
_Bool icon_animation_is_last_frame(IconAnimation* instance);
typedef enum {
    ColorWhite = 0x00,
    ColorBlack = 0x01,
    ColorXOR = 0x02,
} Color;
typedef enum {
    FontPrimary,
    FontSecondary,
    FontKeyboard,
    FontBigNumbers,
    FontBatteryPercent,
    FontTotalNumber,
} Font;
typedef enum {
    AlignLeft,
    AlignRight,
    AlignTop,
    AlignBottom,
    AlignCenter,
} Align;
typedef enum {
    CanvasOrientationHorizontal,
    CanvasOrientationHorizontalFlip,
    CanvasOrientationVertical,
    CanvasOrientationVerticalFlip,
} CanvasOrientation;
typedef enum {
    CanvasDirectionLeftToRight,
    CanvasDirectionTopToBottom,
    CanvasDirectionRightToLeft,
    CanvasDirectionBottomToTop,
} CanvasDirection;
typedef struct {
    uint8_t leading_default;
    uint8_t leading_min;
    uint8_t height;
    uint8_t descender;
} CanvasFontParameters;
typedef struct Canvas Canvas;
void canvas_reset(Canvas* canvas);
void canvas_commit(Canvas* canvas);
uint8_t canvas_width(Canvas* canvas);
uint8_t canvas_height(Canvas* canvas);
uint8_t canvas_current_font_height(Canvas* canvas);
CanvasFontParameters* canvas_get_font_params(Canvas* canvas, Font font);
void canvas_clear(Canvas* canvas);
void canvas_set_color(Canvas* canvas, Color color);
void canvas_set_font_direction(Canvas* canvas, CanvasDirection dir);
void canvas_invert_color(Canvas* canvas);
void canvas_set_font(Canvas* canvas, Font font);
void canvas_draw_str(Canvas* canvas, uint8_t x, uint8_t y, const char* str);
void canvas_draw_str_aligned(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    Align horizontal,
    Align vertical,
    const char* str);
uint16_t canvas_string_width(Canvas* canvas, const char* str);
uint8_t canvas_glyph_width(Canvas* canvas, char symbol);
void canvas_draw_bitmap(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    uint8_t width,
    uint8_t height,
    const uint8_t* compressed_bitmap_data);
void canvas_draw_icon_animation(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    IconAnimation* icon_animation);
void canvas_draw_icon(Canvas* canvas, uint8_t x, uint8_t y, const Icon* icon);
void canvas_draw_xbm(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    uint8_t w,
    uint8_t h,
    const uint8_t* bitmap);
void canvas_draw_dot(Canvas* canvas, uint8_t x, uint8_t y);
void canvas_draw_box(Canvas* canvas, uint8_t x, uint8_t y, uint8_t width, uint8_t height);
void canvas_draw_frame(Canvas* canvas, uint8_t x, uint8_t y, uint8_t width, uint8_t height);
void canvas_draw_line(Canvas* canvas, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2);
void canvas_draw_circle(Canvas* canvas, uint8_t x, uint8_t y, uint8_t r);
void canvas_draw_disc(Canvas* canvas, uint8_t x, uint8_t y, uint8_t r);
void canvas_draw_triangle(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    uint8_t base,
    uint8_t height,
    CanvasDirection dir);
void canvas_draw_glyph(Canvas* canvas, uint8_t x, uint8_t y, uint16_t ch);
void canvas_set_bitmap_mode(Canvas* canvas, _Bool alpha);
void canvas_draw_rframe(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    uint8_t width,
    uint8_t height,
    uint8_t radius);
void canvas_draw_rbox(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    uint8_t width,
    uint8_t height,
    uint8_t radius);
void canvas_draw_icon_bitmap(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    int16_t w,
    int16_t h,
    const Icon* icon);
       
       
       
#define RECORD_INPUT_EVENTS "input_events"
typedef enum {
    InputTypePress,
    InputTypeRelease,
    InputTypeShort,
    InputTypeLong,
    InputTypeRepeat,
    InputTypeMAX,
} InputType;
typedef struct {
    uint32_t sequence;
    InputKey key;
    InputType type;
} InputEvent;
const char* input_get_key_name(InputKey key);
const char* input_get_type_name(InputType type);
#define VIEW_NONE 0xFFFFFFFF
#define VIEW_IGNORE 0xFFFFFFFE
typedef enum {
    ViewOrientationHorizontal,
    ViewOrientationHorizontalFlip,
    ViewOrientationVertical,
    ViewOrientationVerticalFlip,
} ViewOrientation;
typedef struct View View;
typedef void (*ViewDrawCallback)(Canvas* canvas, void* model);
typedef _Bool (*ViewInputCallback)(InputEvent* event, void* context);
typedef _Bool (*ViewCustomCallback)(uint32_t event, void* context);
typedef uint32_t (*ViewNavigationCallback)(void* context);
typedef void (*ViewCallback)(void* context);
typedef void (*ViewUpdateCallback)(View* view, void* context);
typedef enum {
    ViewModelTypeNone,
    ViewModelTypeLockFree,
    ViewModelTypeLocking,
} ViewModelType;
View* view_alloc();
void view_free(View* view);
void view_tie_icon_animation(View* view, IconAnimation* icon_animation);
void view_set_draw_callback(View* view, ViewDrawCallback callback);
void view_set_input_callback(View* view, ViewInputCallback callback);
void view_set_custom_callback(View* view, ViewCustomCallback callback);
void view_set_previous_callback(View* view, ViewNavigationCallback callback);
void view_set_enter_callback(View* view, ViewCallback callback);
void view_set_exit_callback(View* view, ViewCallback callback);
void view_set_update_callback(View* view, ViewUpdateCallback callback);
void view_set_update_callback_context(View* view, void* context);
void view_set_context(View* view, void* context);
void view_set_orientation(View* view, ViewOrientation orientation);
void view_allocate_model(View* view, ViewModelType type, size_t size);
void view_free_model(View* view);
void* view_get_model(View* view);
void view_commit_model(View* view, _Bool update);
#define with_view_model(view,type,code,update) { type = view_get_model(view); {code}; view_commit_model(view, update); }
typedef struct FileBrowser FileBrowser;
typedef void (*FileBrowserCallback)(void* context);
typedef _Bool (*FileBrowserLoadItemCallback)(
    FuriString* path,
    void* context,
    uint8_t** icon,
    FuriString* item_name);
FileBrowser* file_browser_alloc(FuriString* result_path);
void file_browser_free(FileBrowser* browser);
View* file_browser_get_view(FileBrowser* browser);
void file_browser_configure(
    FileBrowser* browser,
    const char* extension,
    const char* base_path,
    _Bool skip_assets,
    _Bool hide_dot_files,
    const Icon* file_icon,
    _Bool hide_ext);
void file_browser_start(FileBrowser* browser, FuriString* path);
void file_browser_stop(FileBrowser* browser);
void file_browser_set_callback(FileBrowser* browser, FileBrowserCallback callback, void* context);
void file_browser_set_item_callback(
    FileBrowser* browser,
    FileBrowserLoadItemCallback callback,
    void* context);
#define RECORD_DIALOGS "dialogs"
typedef struct DialogsApp DialogsApp;
typedef struct {
    const char* extension;
    const char* base_path;
    _Bool skip_assets;
    _Bool hide_dot_files;
    const Icon* icon;
    _Bool hide_ext;
    FileBrowserLoadItemCallback item_loader_callback;
    void* item_loader_context;
} DialogsFileBrowserOptions;
void dialog_file_browser_set_basic_options(
    DialogsFileBrowserOptions* options,
    const char* extension,
    const Icon* icon);
_Bool dialog_file_browser_show(
    DialogsApp* context,
    FuriString* result_path,
    FuriString* path,
    const DialogsFileBrowserOptions* options);
typedef enum {
    DialogMessageButtonBack,
    DialogMessageButtonLeft,
    DialogMessageButtonCenter,
    DialogMessageButtonRight,
} DialogMessageButton;
typedef struct DialogMessage DialogMessage;
DialogMessage* dialog_message_alloc();
void dialog_message_free(DialogMessage* message);
void dialog_message_set_text(
    DialogMessage* message,
    const char* text,
    uint8_t x,
    uint8_t y,
    Align horizontal,
    Align vertical);
void dialog_message_set_header(
    DialogMessage* message,
    const char* text,
    uint8_t x,
    uint8_t y,
    Align horizontal,
    Align vertical);
void dialog_message_set_icon(DialogMessage* message, const Icon* icon, uint8_t x, uint8_t y);
void dialog_message_set_buttons(
    DialogMessage* message,
    const char* left,
    const char* center,
    const char* right);
DialogMessageButton dialog_message_show(DialogsApp* context, const DialogMessage* message);
void dialog_message_show_storage_error(DialogsApp* context, const char* error_text);
       
typedef enum {
    MfClassicDictTypeUser,
    MfClassicDictTypeSystem,
    MfClassicDictTypeUnitTest,
} MfClassicDictType;
typedef struct MfClassicDict MfClassicDict;
_Bool mf_classic_dict_check_presence(MfClassicDictType dict_type);
MfClassicDict* mf_classic_dict_alloc(MfClassicDictType dict_type);
void mf_classic_dict_free(MfClassicDict* dict);
uint32_t mf_classic_dict_get_total_keys(MfClassicDict* dict);
_Bool mf_classic_dict_rewind(MfClassicDict* dict);
_Bool mf_classic_dict_is_key_present(MfClassicDict* dict, uint8_t* key);
_Bool mf_classic_dict_is_key_present_str(MfClassicDict* dict, FuriString* key);
_Bool mf_classic_dict_get_next_key(MfClassicDict* dict, uint64_t* key);
_Bool mf_classic_dict_get_next_key_str(MfClassicDict* dict, FuriString* key);
_Bool mf_classic_dict_get_key_at_index(MfClassicDict* dict, uint64_t* key, uint32_t target);
_Bool mf_classic_dict_get_key_at_index_str(MfClassicDict* dict, FuriString* key, uint32_t target);
_Bool mf_classic_dict_add_key(MfClassicDict* dict, uint8_t* key);
_Bool mf_classic_dict_add_key_str(MfClassicDict* dict, FuriString* key);
_Bool mf_classic_dict_find_index(MfClassicDict* dict, uint8_t* key, uint32_t* target);
_Bool mf_classic_dict_find_index_str(MfClassicDict* dict, FuriString* key, uint32_t* target);
_Bool mf_classic_dict_delete_index(MfClassicDict* dict, uint32_t target);
       
#define MAX_APDU_LEN 255
#define EMV_TAG_APP_TEMPLATE 0x61
#define EMV_TAG_AID 0x4F
#define EMV_TAG_PRIORITY 0x87
#define EMV_TAG_PDOL 0x9F38
#define EMV_TAG_CARD_NAME 0x50
#define EMV_TAG_FCI 0xBF0C
#define EMV_TAG_LOG_CTRL 0x9F4D
#define EMV_TAG_TRACK_1_EQUIV 0x56
#define EMV_TAG_TRACK_2_EQUIV 0x57
#define EMV_TAG_PAN 0x5A
#define EMV_TAG_AFL 0x94
#define EMV_TAG_EXP_DATE 0x5F24
#define EMV_TAG_COUNTRY_CODE 0x5F28
#define EMV_TAG_CURRENCY_CODE 0x9F42
#define EMV_TAG_CARDHOLDER_NAME 0x5F20
typedef struct {
    char name[32];
    uint8_t aid[16];
    uint16_t aid_len;
    uint8_t number[10];
    uint8_t number_len;
    uint8_t exp_mon;
    uint8_t exp_year;
    uint16_t country_code;
    uint16_t currency_code;
} EmvData;
typedef struct {
    uint16_t tag;
    uint8_t data[];
} PDOLValue;
typedef struct {
    uint8_t size;
    uint8_t data[255];
} APDU;
typedef struct {
    uint8_t priority;
    uint8_t aid[16];
    uint8_t aid_len;
    _Bool app_started;
    char name[32];
    _Bool name_found;
    uint8_t card_number[10];
    uint8_t card_number_len;
    uint8_t exp_month;
    uint8_t exp_year;
    uint16_t country_code;
    uint16_t currency_code;
    APDU pdol;
    APDU afl;
} EmvApplication;
_Bool emv_read_bank_card(FuriHalNfcTxRxContext* tx_rx, EmvApplication* emv_app);
_Bool emv_card_emulation(FuriHalNfcTxRxContext* tx_rx);
       
       
       
#define BER_CLASS_UNIVERSAL 0x0
#define BER_CLASS_APPLICATION 0x1
#define BER_CLASS_CONTEXT 0x2
#define BER_CLASS_PRIVATE 0x3
typedef struct {
    uint16_t tag;
    struct {
        uint16_t tag;
        uint8_t constructed : 1;
        uint8_t classVar : 2;
    } ber;
    size_t length;
    const uint8_t* value;
    const uint8_t* next;
} TlvInfo;
TlvInfo iso7816_tlv_parse(const uint8_t* data);
TlvInfo
    iso7816_tlv_select(const uint8_t* data, size_t length, const uint16_t tags[], size_t num_tags);
typedef struct {
    uint8_t year;
    uint8_t month;
    uint8_t day;
} MrtdDate;
#define MRTD_DOCNR_MAX_LENGTH 21
typedef enum {
    MrtdAuthMethodNone,
    MrtdAuthMethodAny,
    MrtdAuthMethodBac,
    MrtdAuthMethodPace,
} MrtdAuthMethod;
typedef enum {
    MrtdTypeUnknown,
    MrtdTypeTD1,
    MrtdTypeTD2,
    MrtdTypeTD3,
} MrtdType;
typedef struct {
    MrtdAuthMethod method;
    MrtdDate birth_date;
    MrtdDate expiry_date;
    char doc_number[21];
} MrtdAuthData;
typedef struct {
    mbedtls_des_context des;
    uint8_t key[16];
    uint8_t mac[8];
    uint8_t xormac[8];
    uint8_t buffer_in[8];
    uint8_t idx_in;
} mrtd_bac_mac_ctx;
typedef struct {
    const char* name;
    const uint8_t short_id;
    const uint16_t file_id;
    const uint8_t tag;
} EFFile;
struct EFFormat {
    const EFFile ATR;
    const EFFile DIR;
    const EFFile CardAccess;
    const EFFile CardSecurity;
    const EFFile COM;
    const EFFile SOD;
    const EFFile DG1;
    const EFFile DG2;
    const EFFile DG3;
    const EFFile DG4;
    const EFFile DG5;
    const EFFile DG6;
    const EFFile DG7;
    const EFFile DG8;
    const EFFile DG9;
    const EFFile DG10;
    const EFFile DG11;
    const EFFile DG12;
    const EFFile DG13;
    const EFFile DG14;
    const EFFile DG15;
    const EFFile DG16;
};
extern const struct EFFormat EF;
typedef uint8_t AIDValue[7];
struct AIDSet {
    AIDValue eMRTDApplication;
    AIDValue TravelRecords;
    AIDValue VisaRecords;
    AIDValue AdditionalBiometrics;
};
extern struct AIDSet AID;
#define MAX_EFDIR_APPS 4
typedef struct {
    AIDValue applications[4];
    uint8_t applications_count;
} EF_DIR_contents;
#define MAX_EFCOM_TAGS 18
typedef struct {
    uint16_t lds_version;
    uint32_t unicode_version;
    uint8_t tag_list[18];
} EF_COM_contents;
typedef struct {
    MrtdType type;
    uint8_t doctype[3];
    uint8_t issuing_state[4];
    uint8_t name[40];
    MrtdDate birth_date;
    uint8_t docnr[10];
    uint8_t nationality[4];
    uint8_t sex[2];
    MrtdDate expiry_date;
} EF_DG1_contents;
typedef struct {
    MrtdAuthData auth;
    _Bool auth_success;
    MrtdAuthMethod auth_method_used;
    struct {
        EF_DIR_contents EF_DIR;
        EF_COM_contents EF_COM;
        EF_DG1_contents DG1;
    } files;
} MrtdData;
const char* mrtd_auth_method_string(MrtdAuthMethod method);
_Bool mrtd_auth_method_parse_string(MrtdAuthMethod* method, const char* str);
uint8_t mrtd_bac_check_digit(const char* input, const uint8_t length);
void mrtd_print_date(char* output, MrtdDate* date);
void mrtd_parse_date(MrtdDate* date, const unsigned char* input);
_Bool mrtd_bac_get_kmrz(MrtdAuthData* auth, char* output, uint8_t output_size);
_Bool mrtd_bac_keys_from_seed(const uint8_t* kseed, uint8_t* ksenc, uint8_t* ksmac);
_Bool mrtd_bac_keys(MrtdAuthData* auth, uint8_t ksenc[16], uint8_t ksmac[16]);
_Bool mrtd_bac_encrypt(const uint8_t* data, size_t data_length, const uint8_t* key, uint8_t* output);
_Bool mrtd_bac_mac(const uint8_t* data, size_t data_length, const uint8_t* key, uint8_t* output);
_Bool mrtd_bac_mac_init(mrtd_bac_mac_ctx* ctx, const uint8_t key[16]);
_Bool mrtd_bac_mac_update(mrtd_bac_mac_ctx* ctx, const uint8_t* data, size_t data_length);
_Bool mrtd_bac_mac_finalize(mrtd_bac_mac_ctx* ctx, uint8_t output[8]);
_Bool mrtd_bac_mac_pad(mrtd_bac_mac_ctx* ctx);
_Bool mrtd_bac_padded_mac(const uint8_t* data, size_t data_length, uint8_t* key, uint8_t* output);
_Bool mrtd_bac_decrypt(const uint8_t* data, size_t data_length, uint8_t* key, uint8_t* output);
_Bool mrtd_bac_decrypt_verify(
    const uint8_t* data,
    size_t data_length,
    uint8_t* key_enc,
    uint8_t* key_mac,
    uint8_t* output);
uint16_t mrtd_bac_decrypt_verify_sm(
    const uint8_t* data,
    size_t data_length,
    uint8_t* key_enc,
    uint8_t* key_mac,
    uint64_t ssc,
    uint8_t* output,
    size_t* output_written);
#define _LITTLE_ENDIAN 1234
#define _BIG_ENDIAN 4321
#define _PDP_ENDIAN 3412
#define _BYTE_ORDER _LITTLE_ENDIAN
#define htonll(x) ((((uint64_t)__htonl(x)) << 32) + __htonl((x) >> 32))
static inline uint64_t mrtd_ssc_from_data(const uint8_t* rnd_ic, const uint8_t* rnd_ifd) {
    return (((uint64_t)rnd_ic[4] << 56) & 0xff00000000000000) |
           (((uint64_t)rnd_ic[5] << 48) & 0x00ff000000000000) |
           (((uint64_t)rnd_ic[6] << 40) & 0x0000ff0000000000) |
           (((uint64_t)rnd_ic[7] << 32) & 0x000000ff00000000) |
           (((uint64_t)rnd_ifd[4] << 24) & 0x00000000ff000000) |
           (((uint64_t)rnd_ifd[5] << 16) & 0x0000000000ff0000) |
           (((uint64_t)rnd_ifd[6] << 8) & 0x000000000000ff00) |
           (((uint64_t)rnd_ifd[7]) & 0x00000000000000ff);
}
size_t mrtd_protect_apdu(
    uint8_t cla,
    uint8_t ins,
    uint8_t p1,
    uint8_t p2,
    uint8_t lc,
    const void* data,
    int16_t le,
    const uint8_t* key_enc,
    const uint8_t* key_mac,
    uint64_t ssc,
    uint8_t* output);
int tlv_number(TlvInfo tlv);
const EFFile* mrtd_tag_to_file(uint8_t tag);
#define MRTD_APP_FOLDER "/any/nfc/mrtd"
#define MRTD_APP_EXTENSION ".mrtd"
typedef struct {
    FuriHalNfcTxRxContext* tx_rx;
    MrtdData* mrtd_data;
    uint16_t file_offset;
    uint8_t ksenc[16];
    uint8_t ksmac[16];
    uint64_t ssc_long;
    _Bool secure_messaging;
} MrtdApplication;
MrtdApplication* mrtd_alloc_init(FuriHalNfcTxRxContext* tx_rx, MrtdData* mrtd_data);
_Bool mrtd_select_app(MrtdApplication* app, AIDValue aid);
_Bool mrtd_authenticate(MrtdApplication* app);
_Bool mrtd_read_parse_file(MrtdApplication* app, EFFile file);
_Bool mrtd_auth_params_save(
    Storage* storage,
    DialogsApp* dialogs,
    MrtdAuthData* auth_data,
    const char* file_name);
_Bool mrtd_auth_params_save_file(
    Storage* storage,
    DialogsApp* dialogs,
    MrtdAuthData* auth_data,
    const char* file_name,
    const char* folder,
    const char* extension);
_Bool mrtd_auth_params_load(
    Storage* storage,
    DialogsApp* dialogs,
    MrtdAuthData* auth_data,
    const char* file_path,
    _Bool show_dialog);
       
#define MF_UL_MAX_DUMP_SIZE ((238 + 256 + 16) * 4)
#define MF_UL_TEARING_FLAG_DEFAULT (0xBD)
#define MF_UL_HALT_START (0x50)
#define MF_UL_GET_VERSION_CMD (0x60)
#define MF_UL_READ_CMD (0x30)
#define MF_UL_FAST_READ_CMD (0x3A)
#define MF_UL_WRITE (0xA2)
#define MF_UL_FAST_WRITE (0xA6)
#define MF_UL_COMP_WRITE (0xA0)
#define MF_UL_READ_CNT (0x39)
#define MF_UL_INC_CNT (0xA5)
#define MF_UL_AUTH (0x1B)
#define MF_UL_READ_SIG (0x3C)
#define MF_UL_CHECK_TEARING (0x3E)
#define MF_UL_READ_VCSL (0x4B)
#define MF_UL_SECTOR_SELECT (0xC2)
#define MF_UL_ACK (0xa)
#define MF_UL_NAK_INVALID_ARGUMENT (0x0)
#define MF_UL_NAK_AUTHLIM_REACHED (0x4)
#define MF_UL_NTAG203_COUNTER_PAGE (41)
#define MF_UL_DEFAULT_PWD (0xFFFFFFFF)
typedef enum {
    MfUltralightAuthMethodManual,
    MfUltralightAuthMethodAmeebo,
    MfUltralightAuthMethodXiaomi,
    MfUltralightAuthMethodAuto,
} MfUltralightAuthMethod;
typedef enum {
    MfUltralightTypeUnknown,
    MfUltralightTypeNTAG203,
    MfUltralightTypeUL11,
    MfUltralightTypeUL21,
    MfUltralightTypeNTAG213,
    MfUltralightTypeNTAG215,
    MfUltralightTypeNTAG216,
    MfUltralightTypeNTAGI2C1K,
    MfUltralightTypeNTAGI2C2K,
    MfUltralightTypeNTAGI2CPlus1K,
    MfUltralightTypeNTAGI2CPlus2K,
    MfUltralightTypeNum,
} MfUltralightType;
typedef enum {
    MfUltralightSupportNone = 0,
    MfUltralightSupportFastRead = 1 << 0,
    MfUltralightSupportTearingFlags = 1 << 1,
    MfUltralightSupportReadCounter = 1 << 2,
    MfUltralightSupportIncrCounter = 1 << 3,
    MfUltralightSupportSignature = 1 << 4,
    MfUltralightSupportFastWrite = 1 << 5,
    MfUltralightSupportCompatWrite = 1 << 6,
    MfUltralightSupportAuth = 1 << 7,
    MfUltralightSupportVcsl = 1 << 8,
    MfUltralightSupportSectorSelect = 1 << 9,
    MfUltralightSupportSingleCounter = 1 << 10,
    MfUltralightSupportAsciiMirror = 1 << 11,
    MfUltralightSupportCounterInMemory = 1 << 12,
} MfUltralightFeatures;
typedef enum {
    MfUltralightMirrorNone,
    MfUltralightMirrorUid,
    MfUltralightMirrorCounter,
    MfUltralightMirrorUidCounter,
} MfUltralightMirrorConf;
typedef struct {
    uint8_t header;
    uint8_t vendor_id;
    uint8_t prod_type;
    uint8_t prod_subtype;
    uint8_t prod_ver_major;
    uint8_t prod_ver_minor;
    uint8_t storage_size;
    uint8_t protocol_type;
} MfUltralightVersion;
typedef struct {
    uint8_t sn0[3];
    uint8_t btBCC0;
    uint8_t sn1[4];
    uint8_t btBCC1;
    uint8_t internal;
    uint8_t lock[2];
    uint8_t otp[4];
} MfUltralightManufacturerBlock;
typedef struct {
    MfUltralightType type;
    MfUltralightVersion version;
    uint8_t signature[32];
    uint32_t counter[3];
    uint8_t tearing[3];
    MfUltralightAuthMethod auth_method;
    uint8_t auth_key[4];
    _Bool auth_success;
    uint16_t curr_authlim;
    uint16_t data_size;
    uint8_t data[((238 + 256 + 16) * 4)];
    uint16_t data_read;
} MfUltralightData;
typedef struct {
    union {
        uint8_t raw[4];
        uint32_t value;
    } pwd;
    union {
        uint8_t raw[2];
        uint16_t value;
    } pack;
} MfUltralightAuth;
typedef struct {
    union {
        uint8_t value;
        struct {
            uint8_t rfui1 : 2;
            _Bool strg_mod_en : 1;
            _Bool rfui2 : 1;
            uint8_t mirror_byte : 2;
            MfUltralightMirrorConf mirror_conf : 2;
        };
    } mirror;
    uint8_t rfui1;
    uint8_t mirror_page;
    uint8_t auth0;
    union {
        uint8_t value;
        struct {
            uint8_t authlim : 3;
            _Bool nfc_cnt_pwd_prot : 1;
            _Bool nfc_cnt_en : 1;
            _Bool nfc_dis_sec1 : 1;
            _Bool cfglck : 1;
            _Bool prot : 1;
        };
    } access;
    uint8_t vctid;
    uint8_t rfui2[2];
    MfUltralightAuth auth_data;
    uint8_t rfui3[2];
} MfUltralightConfigPages;
typedef struct {
    uint16_t pages_to_read;
    int16_t pages_read;
    MfUltralightFeatures supported_features;
} MfUltralightReader;
typedef void (*MfUltralightAuthReceivedCallback)(MfUltralightAuth auth, void* context);
typedef struct {
    MfUltralightData data;
    MfUltralightConfigPages* config;
    MfUltralightConfigPages config_cache;
    MfUltralightFeatures supported_features;
    uint16_t page_num;
    _Bool data_changed;
    _Bool comp_write_cmd_started;
    uint8_t comp_write_page_addr;
    _Bool auth_success;
    uint8_t curr_sector;
    _Bool sector_select_cmd_started;
    _Bool ntag_i2c_plus_sector3_lockout;
    _Bool read_counter_incremented;
    _Bool auth_attempted;
    MfUltralightAuth auth_attempt;
    MfUltralightAuthReceivedCallback auth_received_callback;
    void* context;
} MfUltralightEmulator;
void mf_ul_reset(MfUltralightData* data);
_Bool mf_ul_check_card_type(uint8_t ATQA0, uint8_t ATQA1, uint8_t SAK);
_Bool mf_ultralight_read_version(
    FuriHalNfcTxRxContext* tx_rx,
    MfUltralightReader* reader,
    MfUltralightData* data);
_Bool mf_ultralight_read_pages_direct(
    FuriHalNfcTxRxContext* tx_rx,
    uint8_t start_index,
    uint8_t* data);
_Bool mf_ultralight_read_pages(
    FuriHalNfcTxRxContext* tx_rx,
    MfUltralightReader* reader,
    MfUltralightData* data);
_Bool mf_ultralight_fast_read_pages(
    FuriHalNfcTxRxContext* tx_rx,
    MfUltralightReader* reader,
    MfUltralightData* data);
_Bool mf_ultralight_read_signature(FuriHalNfcTxRxContext* tx_rx, MfUltralightData* data);
_Bool mf_ultralight_read_counters(FuriHalNfcTxRxContext* tx_rx, MfUltralightData* data);
_Bool mf_ultralight_read_tearing_flags(FuriHalNfcTxRxContext* tx_rx, MfUltralightData* data);
_Bool mf_ultralight_authenticate(FuriHalNfcTxRxContext* tx_rx, uint32_t key, uint16_t* pack);
MfUltralightConfigPages* mf_ultralight_get_config_pages(MfUltralightData* data);
_Bool mf_ul_read_card(
    FuriHalNfcTxRxContext* tx_rx,
    MfUltralightReader* reader,
    MfUltralightData* data);
void mf_ul_reset_emulation(MfUltralightEmulator* emulator, _Bool is_power_cycle);
void mf_ul_prepare_emulation(MfUltralightEmulator* emulator, MfUltralightData* data);
_Bool mf_ul_prepare_emulation_response(
    uint8_t* buff_rx,
    uint16_t buff_rx_len,
    uint8_t* buff_tx,
    uint16_t* buff_tx_len,
    uint32_t* data_type,
    void* context);
uint32_t mf_ul_pwdgen_amiibo(FuriHalNfcDevData* data);
uint32_t mf_ul_pwdgen_xiaomi(FuriHalNfcDevData* data);
_Bool mf_ul_is_full_capture(MfUltralightData* data);
       
       
typedef struct {
    uint32_t odd;
    uint32_t even;
} Crypto1;
void crypto1_reset(Crypto1* crypto1);
void crypto1_init(Crypto1* crypto1, uint64_t key);
uint8_t crypto1_bit(Crypto1* crypto1, uint8_t in, int is_encrypted);
uint8_t crypto1_byte(Crypto1* crypto1, uint8_t in, int is_encrypted);
uint32_t crypto1_word(Crypto1* crypto1, uint32_t in, int is_encrypted);
uint32_t crypto1_filter(uint32_t in);
uint32_t prng_successor(uint32_t x, uint32_t n);
void crypto1_decrypt(
    Crypto1* crypto,
    uint8_t* encrypted_data,
    uint16_t encrypted_data_bits,
    uint8_t* decrypted_data);
void crypto1_encrypt(
    Crypto1* crypto,
    uint8_t* keystream,
    uint8_t* plain_data,
    uint16_t plain_data_bits,
    uint8_t* encrypted_data,
    uint8_t* encrypted_parity);
#define MF_CLASSIC_BLOCK_SIZE (16)
#define MF_CLASSIC_TOTAL_BLOCKS_MAX (256)
#define MF_MINI_TOTAL_SECTORS_NUM (5)
#define MF_CLASSIC_1K_TOTAL_SECTORS_NUM (16)
#define MF_CLASSIC_4K_TOTAL_SECTORS_NUM (40)
#define MF_CLASSIC_SECTORS_MAX (40)
#define MF_CLASSIC_BLOCKS_IN_SECTOR_MAX (16)
#define MF_CLASSIC_NO_KEY (0xFFFFFFFFFFFFFFFF)
#define MF_CLASSIC_MAX_DATA_SIZE (16)
#define MF_CLASSIC_KEY_SIZE (6)
#define MF_CLASSIC_ACCESS_BYTES_SIZE (4)
typedef enum {
    MfClassicType1k,
    MfClassicType4k,
    MfClassicTypeMini,
} MfClassicType;
typedef enum {
    MfClassicKeyA,
    MfClassicKeyB,
} MfClassicKey;
typedef enum {
    MfClassicActionDataRead,
    MfClassicActionDataWrite,
    MfClassicActionDataInc,
    MfClassicActionDataDec,
    MfClassicActionKeyARead,
    MfClassicActionKeyAWrite,
    MfClassicActionKeyBRead,
    MfClassicActionKeyBWrite,
    MfClassicActionACRead,
    MfClassicActionACWrite,
} MfClassicAction;
typedef struct {
    uint8_t value[(16)];
} MfClassicBlock;
typedef struct {
    uint8_t key_a[(6)];
    uint8_t access_bits[(4)];
    uint8_t key_b[(6)];
} MfClassicSectorTrailer;
typedef struct {
    uint8_t total_blocks;
    MfClassicBlock block[(16)];
} MfClassicSector;
typedef struct {
    MfClassicType type;
    uint32_t block_read_mask[(256) / 32];
    uint64_t key_a_mask;
    uint64_t key_b_mask;
    MfClassicBlock block[(256)];
} MfClassicData;
typedef struct {
    uint8_t sector;
    uint64_t key_a;
    uint64_t key_b;
} MfClassicAuthContext;
typedef struct {
    uint8_t sector_num;
    uint64_t key_a;
    uint64_t key_b;
} MfClassicSectorReader;
typedef struct {
    MfClassicType type;
    Crypto1 crypto;
    uint8_t sectors_to_read;
    MfClassicSectorReader sector_reader[(40)];
} MfClassicReader;
typedef struct {
    uint32_t cuid;
    Crypto1 crypto;
    MfClassicData data;
    _Bool data_changed;
} MfClassicEmulator;
const char* mf_classic_get_type_str(MfClassicType type);
_Bool mf_classic_check_card_type(uint8_t ATQA0, uint8_t ATQA1, uint8_t SAK);
MfClassicType mf_classic_get_classic_type(uint8_t ATQA0, uint8_t ATQA1, uint8_t SAK);
uint8_t mf_classic_get_total_sectors_num(MfClassicType type);
uint16_t mf_classic_get_total_block_num(MfClassicType type);
uint8_t mf_classic_get_sector_trailer_block_num_by_sector(uint8_t sector);
_Bool mf_classic_is_sector_trailer(uint8_t block);
uint8_t mf_classic_get_sector_by_block(uint8_t block);
_Bool mf_classic_is_allowed_access_sector_trailer(
    MfClassicData* data,
    uint8_t block_num,
    MfClassicKey key,
    MfClassicAction action);
_Bool mf_classic_is_allowed_access_data_block(
    MfClassicData* data,
    uint8_t block_num,
    MfClassicKey key,
    MfClassicAction action);
_Bool mf_classic_is_key_found(MfClassicData* data, uint8_t sector_num, MfClassicKey key_type);
void mf_classic_set_key_found(
    MfClassicData* data,
    uint8_t sector_num,
    MfClassicKey key_type,
    uint64_t key);
void mf_classic_set_key_not_found(MfClassicData* data, uint8_t sector_num, MfClassicKey key_type);
_Bool mf_classic_is_block_read(MfClassicData* data, uint8_t block_num);
void mf_classic_set_block_read(MfClassicData* data, uint8_t block_num, MfClassicBlock* block_data);
_Bool mf_classic_is_sector_data_read(MfClassicData* data, uint8_t sector_num);
void mf_classic_set_sector_data_not_read(MfClassicData* data);
_Bool mf_classic_is_sector_read(MfClassicData* data, uint8_t sector_num);
_Bool mf_classic_is_card_read(MfClassicData* data);
void mf_classic_get_read_sectors_and_keys(
    MfClassicData* data,
    uint8_t* sectors_read,
    uint8_t* keys_found);
MfClassicSectorTrailer*
    mf_classic_get_sector_trailer_by_sector(MfClassicData* data, uint8_t sector);
void mf_classic_auth_init_context(MfClassicAuthContext* auth_ctx, uint8_t sector);
_Bool mf_classic_authenticate(
    FuriHalNfcTxRxContext* tx_rx,
    uint8_t block_num,
    uint64_t key,
    MfClassicKey key_type);
_Bool mf_classic_authenticate_skip_activate(
    FuriHalNfcTxRxContext* tx_rx,
    uint8_t block_num,
    uint64_t key,
    MfClassicKey key_type,
    _Bool skip_activate,
    uint32_t cuid);
_Bool mf_classic_auth_attempt(
    FuriHalNfcTxRxContext* tx_rx,
    MfClassicAuthContext* auth_ctx,
    uint64_t key);
void mf_classic_reader_add_sector(
    MfClassicReader* reader,
    uint8_t sector,
    uint64_t key_a,
    uint64_t key_b);
void mf_classic_read_sector(FuriHalNfcTxRxContext* tx_rx, MfClassicData* data, uint8_t sec_num);
uint8_t mf_classic_read_card(
    FuriHalNfcTxRxContext* tx_rx,
    MfClassicReader* reader,
    MfClassicData* data);
uint8_t mf_classic_update_card(FuriHalNfcTxRxContext* tx_rx, MfClassicData* data);
_Bool mf_classic_emulator(MfClassicEmulator* emulator, FuriHalNfcTxRxContext* tx_rx);
_Bool mf_classic_write_block(
    FuriHalNfcTxRxContext* tx_rx,
    MfClassicBlock* src_block,
    uint8_t block_num,
    MfClassicKey key_type,
    uint64_t key);
_Bool mf_classic_write_sector(
    FuriHalNfcTxRxContext* tx_rx,
    MfClassicData* dest_data,
    MfClassicData* src_data,
    uint8_t sec_num);
       
#define MF_DF_GET_VERSION (0x60)
#define MF_DF_GET_FREE_MEMORY (0x6E)
#define MF_DF_GET_KEY_SETTINGS (0x45)
#define MF_DF_GET_KEY_VERSION (0x64)
#define MF_DF_GET_APPLICATION_IDS (0x6A)
#define MF_DF_SELECT_APPLICATION (0x5A)
#define MF_DF_GET_FILE_IDS (0x6F)
#define MF_DF_GET_FILE_SETTINGS (0xF5)
#define MF_DF_READ_DATA (0xBD)
#define MF_DF_GET_VALUE (0x6C)
#define MF_DF_READ_RECORDS (0xBB)
typedef struct {
    uint8_t hw_vendor;
    uint8_t hw_type;
    uint8_t hw_subtype;
    uint8_t hw_major;
    uint8_t hw_minor;
    uint8_t hw_storage;
    uint8_t hw_proto;
    uint8_t sw_vendor;
    uint8_t sw_type;
    uint8_t sw_subtype;
    uint8_t sw_major;
    uint8_t sw_minor;
    uint8_t sw_storage;
    uint8_t sw_proto;
    uint8_t uid[7];
    uint8_t batch[5];
    uint8_t prod_week;
    uint8_t prod_year;
} MifareDesfireVersion;
typedef struct {
    uint32_t bytes;
} MifareDesfireFreeMemory;
typedef struct MifareDesfireKeyVersion {
    uint8_t id;
    uint8_t version;
    struct MifareDesfireKeyVersion* next;
} MifareDesfireKeyVersion;
typedef struct {
    uint8_t change_key_id;
    _Bool config_changeable;
    _Bool free_create_delete;
    _Bool free_directory_list;
    _Bool master_key_changeable;
    uint8_t flags;
    uint8_t max_keys;
    MifareDesfireKeyVersion* key_version_head;
} MifareDesfireKeySettings;
typedef enum {
    MifareDesfireFileTypeStandard = 0,
    MifareDesfireFileTypeBackup = 1,
    MifareDesfireFileTypeValue = 2,
    MifareDesfireFileTypeLinearRecord = 3,
    MifareDesfireFileTypeCyclicRecord = 4,
} MifareDesfireFileType;
typedef enum {
    MifareDesfireFileCommunicationSettingsPlaintext = 0,
    MifareDesfireFileCommunicationSettingsAuthenticated = 1,
    MifareDesfireFileCommunicationSettingsEnciphered = 3,
} MifareDesfireFileCommunicationSettings;
typedef struct MifareDesfireFile {
    uint8_t id;
    MifareDesfireFileType type;
    MifareDesfireFileCommunicationSettings comm;
    uint16_t access_rights;
    union {
        struct {
            uint32_t size;
        } data;
        struct {
            uint32_t lo_limit;
            uint32_t hi_limit;
            uint32_t limited_credit_value;
            _Bool limited_credit_enabled;
        } value;
        struct {
            uint32_t size;
            uint32_t max;
            uint32_t cur;
        } record;
    } settings;
    uint8_t* contents;
    struct MifareDesfireFile* next;
} MifareDesfireFile;
typedef struct MifareDesfireApplication {
    uint8_t id[3];
    MifareDesfireKeySettings* key_settings;
    MifareDesfireFile* file_head;
    struct MifareDesfireApplication* next;
} MifareDesfireApplication;
typedef struct {
    MifareDesfireVersion version;
    MifareDesfireFreeMemory* free_memory;
    MifareDesfireKeySettings* master_key_settings;
    MifareDesfireApplication* app_head;
} MifareDesfireData;
void mf_df_clear(MifareDesfireData* data);
void mf_df_cat_data(MifareDesfireData* data, FuriString* out);
void mf_df_cat_card_info(MifareDesfireData* data, FuriString* out);
void mf_df_cat_version(MifareDesfireVersion* version, FuriString* out);
void mf_df_cat_free_mem(MifareDesfireFreeMemory* free_mem, FuriString* out);
void mf_df_cat_key_settings(MifareDesfireKeySettings* ks, FuriString* out);
void mf_df_cat_application_info(MifareDesfireApplication* app, FuriString* out);
void mf_df_cat_application(MifareDesfireApplication* app, FuriString* out);
void mf_df_cat_file(MifareDesfireFile* file, FuriString* out);
_Bool mf_df_check_card_type(uint8_t ATQA0, uint8_t ATQA1, uint8_t SAK);
uint16_t mf_df_prepare_get_version(uint8_t* dest);
_Bool mf_df_parse_get_version_response(uint8_t* buf, uint16_t len, MifareDesfireVersion* out);
uint16_t mf_df_prepare_get_free_memory(uint8_t* dest);
_Bool mf_df_parse_get_free_memory_response(uint8_t* buf, uint16_t len, MifareDesfireFreeMemory* out);
uint16_t mf_df_prepare_get_key_settings(uint8_t* dest);
_Bool mf_df_parse_get_key_settings_response(
    uint8_t* buf,
    uint16_t len,
    MifareDesfireKeySettings* out);
uint16_t mf_df_prepare_get_key_version(uint8_t* dest, uint8_t key_id);
_Bool mf_df_parse_get_key_version_response(uint8_t* buf, uint16_t len, MifareDesfireKeyVersion* out);
uint16_t mf_df_prepare_get_application_ids(uint8_t* dest);
_Bool mf_df_parse_get_application_ids_response(
    uint8_t* buf,
    uint16_t len,
    MifareDesfireApplication** app_head);
uint16_t mf_df_prepare_select_application(uint8_t* dest, uint8_t id[3]);
_Bool mf_df_parse_select_application_response(uint8_t* buf, uint16_t len);
uint16_t mf_df_prepare_get_file_ids(uint8_t* dest);
_Bool mf_df_parse_get_file_ids_response(uint8_t* buf, uint16_t len, MifareDesfireFile** file_head);
uint16_t mf_df_prepare_get_file_settings(uint8_t* dest, uint8_t file_id);
_Bool mf_df_parse_get_file_settings_response(uint8_t* buf, uint16_t len, MifareDesfireFile* out);
uint16_t mf_df_prepare_read_data(uint8_t* dest, uint8_t file_id, uint32_t offset, uint32_t len);
uint16_t mf_df_prepare_get_value(uint8_t* dest, uint8_t file_id);
uint16_t mf_df_prepare_read_records(uint8_t* dest, uint8_t file_id, uint32_t offset, uint32_t len);
_Bool mf_df_parse_read_data_response(uint8_t* buf, uint16_t len, MifareDesfireFile* out);
_Bool mf_df_read_card(FuriHalNfcTxRxContext* tx_rx, MifareDesfireData* data);
       
       
#define PULSE_READER_NO_EDGE 0xFFFFFFFFUL
#define PULSE_READER_LOST_EDGE 0xFFFFFFFEUL
#define F_TIM2 64000000UL
typedef enum {
    PulseReaderUnit64MHz,
    PulseReaderUnitPicosecond,
    PulseReaderUnitNanosecond,
    PulseReaderUnitMicrosecond,
} PulseReaderUnit;
typedef struct PulseReader PulseReader;
PulseReader* pulse_reader_alloc(const GpioPin* gpio, uint32_t size);
void pulse_reader_free(PulseReader* signal);
void pulse_reader_start(PulseReader* signal);
void pulse_reader_stop(PulseReader* signal);
uint32_t pulse_reader_receive(PulseReader* signal, int timeout_us);
uint32_t pulse_reader_samples(PulseReader* signal);
void pulse_reader_set_timebase(PulseReader* signal, PulseReaderUnit unit);
void pulse_reader_set_bittime(PulseReader* signal, uint32_t bit_time);
void pulse_reader_set_pull(PulseReader* signal, GpioPull pull);
       
void nfc_util_num2bytes(uint64_t src, uint8_t len, uint8_t* dest);
uint64_t nfc_util_bytes2num(uint8_t* src, uint8_t len);
uint8_t nfc_util_even_parity32(uint32_t data);
uint8_t nfc_util_odd_parity8(uint8_t data);
#define NFCV_FC (13560000.0f)
#define NFCV_RESP_SUBC1_PULSE_32 (1.0f / (NFCV_FC / 32) / 2.0f)
#define NFCV_RESP_SUBC1_UNMOD_256 (256.0f / NFCV_FC)
#define PULSE_DURATION_NS (128.0f * 1000000000.0f / NFCV_FC)
#define DIGITAL_SIGNAL_UNIT_S (100000000000.0f)
#define DIGITAL_SIGNAL_UNIT_US (100000.0f)
#define NFCV_TOTAL_BLOCKS_MAX 256
#define NFCV_BLOCK_SIZE 4
#define NFCV_MAX_DUMP_SIZE (NFCV_BLOCK_SIZE * NFCV_TOTAL_BLOCKS_MAX)
#define NFCV_MAX_FRAME_SIZE 64
#define NFCV_LOG_STR_LEN 128
#define NFCV_FDT_USEC(usec) (usec * 64)
#define NFCV_FDT_FC(ticks) (ticks * 6400 / 1356)
#define NFCV_FRAME_STATE_SOF1 0
#define NFCV_FRAME_STATE_SOF2 1
#define NFCV_FRAME_STATE_CODING_4 2
#define NFCV_FRAME_STATE_CODING_256 3
#define NFCV_FRAME_STATE_EOF 4
#define NFCV_FRAME_STATE_RESET 5
#define NFCV_SIG_SOF 0
#define NFCV_SIG_BIT0 1
#define NFCV_SIG_BIT1 2
#define NFCV_SIG_EOF 3
#define NFCV_SIG_LOW_SOF 4
#define NFCV_SIG_LOW_BIT0 5
#define NFCV_SIG_LOW_BIT1 6
#define NFCV_SIG_LOW_EOF 7
#define ISO15693_INVENTORY 0x01
#define ISO15693_STAYQUIET 0x02
#define ISO15693_READBLOCK 0x20
#define ISO15693_WRITEBLOCK 0x21
#define ISO15693_LOCKBLOCK 0x22
#define ISO15693_READ_MULTI_BLOCK 0x23
#define ISO15693_WRITE_MULTI_BLOCK 0x24
#define ISO15693_SELECT 0x25
#define ISO15693_RESET_TO_READY 0x26
#define ISO15693_WRITE_AFI 0x27
#define ISO15693_LOCK_AFI 0x28
#define ISO15693_WRITE_DSFID 0x29
#define ISO15693_LOCK_DSFID 0x2A
#define ISO15693_GET_SYSTEM_INFO 0x2B
#define ISO15693_READ_MULTI_SECSTATUS 0x2C
#define ISO15693_NOERROR 0x00
#define ISO15693_ERROR_CMD_NOT_SUP 0x01
#define ISO15693_ERROR_CMD_NOT_REC 0x02
#define ISO15693_ERROR_CMD_OPTION 0x03
#define ISO15693_ERROR_GENERIC 0x0F
#define ISO15693_ERROR_BLOCK_UNAVAILABLE 0x10
#define ISO15693_ERROR_BLOCK_LOCKED_ALREADY 0x11
#define ISO15693_ERROR_BLOCK_LOCKED 0x12
#define ISO15693_ERROR_BLOCK_WRITE 0x13
#define ISO15693_ERROR_BLOCL_WRITELOCK 0x14
typedef enum {
    NfcVAuthMethodManual,
    NfcVAuthMethodTonieBox,
} NfcVAuthMethod;
typedef enum {
    NfcVTypePlain = 0,
    NfcVTypeSlix = 1,
    NfcVTypeSlixS = 2,
    NfcVTypeSlixL = 3,
    NfcVTypeSlix2 = 4,
} NfcVSubtype;
typedef enum {
    NfcVSendFlagsNormal = 0,
    NfcVSendFlagsSof = 1 << 0,
    NfcVSendFlagsCrc = 1 << 1,
    NfcVSendFlagsEof = 1 << 2,
    NfcVSendFlagsOneSubcarrier = 0,
    NfcVSendFlagsTwoSubcarrier = 1 << 3,
    NfcVSendFlagsLowRate = 0,
    NfcVSendFlagsHighRate = 1 << 4
} NfcVSendFlags;
typedef struct {
    uint8_t key_read[4];
    uint8_t key_write[4];
    uint8_t key_privacy[4];
    uint8_t key_destroy[4];
    uint8_t key_eas[4];
    uint8_t rand[2];
    _Bool privacy;
} NfcVSlixData;
typedef union {
    NfcVSlixData slix;
} NfcVSubtypeData;
typedef struct {
    DigitalSignal* nfcv_resp_sof;
    DigitalSignal* nfcv_resp_one;
    DigitalSignal* nfcv_resp_zero;
    DigitalSignal* nfcv_resp_eof;
} NfcVEmuAirSignals;
typedef struct {
    PulseReader* reader_signal;
    DigitalSignal* nfcv_resp_pulse;
    DigitalSignal* nfcv_resp_unmod;
    NfcVEmuAirSignals signals_high;
    NfcVEmuAirSignals signals_low;
    DigitalSequence* nfcv_signal;
} NfcVEmuAir;
typedef void (*NfcVEmuProtocolHandler)(
    FuriHalNfcTxRxContext* tx_rx,
    FuriHalNfcDevData* nfc_data,
    void* nfcv_data);
typedef _Bool (*NfcVEmuProtocolFilter)(
    FuriHalNfcTxRxContext* tx_rx,
    FuriHalNfcDevData* nfc_data,
    void* nfcv_data);
typedef struct {
    uint8_t flags;
    uint8_t command;
    _Bool addressed;
    _Bool advanced;
    uint8_t address_offset;
    uint8_t payload_offset;
    uint8_t response_buffer[64];
    NfcVSendFlags response_flags;
    uint32_t send_time;
    NfcVEmuProtocolFilter emu_protocol_filter;
} NfcVEmuProtocolCtx;
typedef struct {
    uint8_t dsfid;
    uint8_t afi;
    uint8_t ic_ref;
    uint16_t block_num;
    uint8_t block_size;
    uint8_t data[(4 * 256)];
    _Bool modified;
    NfcVSubtype sub_type;
    NfcVSubtypeData sub_data;
    NfcVAuthMethod auth_method;
    NfcVEmuAir emu_air;
    uint8_t frame[64];
    uint8_t frame_length;
    uint32_t eof_timestamp;
    NfcVEmuProtocolHandler emu_protocol_handler;
    void* emu_protocol_ctx;
    char last_command[128];
    char error[128];
} NfcVData;
typedef struct {
    uint16_t blocks_to_read;
    int16_t blocks_read;
} NfcVReader;
ReturnCode nfcv_read_blocks(NfcVReader* reader, NfcVData* data);
ReturnCode nfcv_read_sysinfo(FuriHalNfcDevData* nfc_data, NfcVData* data);
ReturnCode nfcv_inventory(uint8_t* uid);
_Bool nfcv_read_card(NfcVReader* reader, FuriHalNfcDevData* nfc_data, NfcVData* data);
void nfcv_emu_init(FuriHalNfcDevData* nfc_data, NfcVData* nfcv_data);
void nfcv_emu_deinit(NfcVData* nfcv_data);
_Bool nfcv_emu_loop(
    FuriHalNfcTxRxContext* tx_rx,
    FuriHalNfcDevData* nfc_data,
    NfcVData* nfcv_data,
    uint32_t timeout_ms);
void nfcv_emu_send(
    FuriHalNfcTxRxContext* tx_rx,
    NfcVData* nfcv,
    uint8_t* data,
    uint8_t length,
    NfcVSendFlags flags,
    uint32_t send_time);
#define NFC_DEV_NAME_MAX_LEN 22
#define NFC_READER_DATA_MAX_SIZE 64
#define NFC_DICT_KEY_BATCH_SIZE 10
#define NFC_APP_EXTENSION ".nfc"
#define NFC_APP_SHADOW_EXTENSION ".shd"
typedef void (*NfcLoadingCallback)(void* context, _Bool state);
typedef enum {
    NfcDeviceProtocolUnknown,
    NfcDeviceProtocolEMV,
    NfcDeviceProtocolMRTD,
    NfcDeviceProtocolMifareUl,
    NfcDeviceProtocolMifareClassic,
    NfcDeviceProtocolMifareDesfire,
    NfcDeviceProtocolNfcV
} NfcProtocol;
typedef enum {
    NfcDeviceSaveFormatUid,
    NfcDeviceSaveFormatBankCard,
    NfcDeviceSaveFormatMifareUl,
    NfcDeviceSaveFormatMifareClassic,
    NfcDeviceSaveFormatMifareDesfire,
    NfcDeviceSaveFormatNfcV,
} NfcDeviceSaveFormat;
typedef struct {
    uint8_t data[64];
    uint16_t size;
} NfcReaderRequestData;
typedef struct {
    MfClassicDict* dict;
    uint8_t current_sector;
} NfcMfClassicDictAttackData;
typedef enum {
    NfcReadModeAuto,
    NfcReadModeMfClassic,
    NfcReadModeMfUltralight,
    NfcReadModeMfDesfire,
    NfcReadModeEMV,
    NfcReadModeNFCA,
} NfcReadMode;
typedef struct {
    FuriHalNfcDevData nfc_data;
    NfcProtocol protocol;
    NfcReadMode read_mode;
    union {
        NfcReaderRequestData reader_data;
        NfcMfClassicDictAttackData mf_classic_dict_attack_data;
        MfUltralightAuth mf_ul_auth;
    };
    union {
        EmvData emv_data;
        MrtdData mrtd_data;
        MfUltralightData mf_ul_data;
        MfClassicData mf_classic_data;
        MifareDesfireData mf_df_data;
        NfcVData nfcv_data;
    };
    FuriString* parsed_data;
} NfcDeviceData;
typedef struct {
    Storage* storage;
    DialogsApp* dialogs;
    NfcDeviceData dev_data;
    char dev_name[22 + 1];
    FuriString* load_path;
    FuriString* folder;
    NfcDeviceSaveFormat format;
    _Bool shadow_file_exist;
    NfcLoadingCallback loading_cb;
    void* loading_cb_ctx;
} NfcDevice;
NfcDevice* nfc_device_alloc();
void nfc_device_free(NfcDevice* nfc_dev);
void nfc_device_set_name(NfcDevice* dev, const char* name);
_Bool nfc_device_save(NfcDevice* dev, const char* dev_name);
_Bool nfc_device_save_shadow(NfcDevice* dev, const char* dev_name);
_Bool nfc_device_load(NfcDevice* dev, const char* file_path, _Bool show_dialog);
_Bool nfc_device_load_key_cache(NfcDevice* dev);
_Bool nfc_file_select(NfcDevice* dev);
void nfc_device_data_clear(NfcDeviceData* dev);
void nfc_device_clear(NfcDevice* dev);
_Bool nfc_device_delete(NfcDevice* dev, _Bool use_load_path);
_Bool nfc_device_restore(NfcDevice* dev, _Bool use_load_path);
void nfc_device_set_loading_callback(NfcDevice* dev, NfcLoadingCallback callback, void* context);
#define _UECC_H_ 
#define uECC_arch_other 0
#define uECC_x86 1
#define uECC_x86_64 2
#define uECC_arm 3
#define uECC_arm_thumb 4
#define uECC_arm_thumb2 5
#define uECC_arm64 6
#define uECC_avr 7
#define uECC_OPTIMIZATION_LEVEL 2
#define uECC_SQUARE_FUNC 0
#define uECC_VLI_NATIVE_LITTLE_ENDIAN 0
#define uECC_SUPPORTS_secp160r1 1
#define uECC_SUPPORTS_secp192r1 1
#define uECC_SUPPORTS_secp224r1 1
#define uECC_SUPPORTS_secp256r1 1
#define uECC_SUPPORTS_secp256k1 1
#define uECC_SUPPORT_COMPRESSED_POINT 1
struct uECC_Curve_t;
typedef const struct uECC_Curve_t * uECC_Curve;
uECC_Curve uECC_secp160r1(void);
uECC_Curve uECC_secp192r1(void);
uECC_Curve uECC_secp224r1(void);
uECC_Curve uECC_secp256r1(void);
uECC_Curve uECC_secp256k1(void);
typedef int (*uECC_RNG_Function)(uint8_t *dest, unsigned size);
void uECC_set_rng(uECC_RNG_Function rng_function);
uECC_RNG_Function uECC_get_rng(void);
int uECC_curve_private_key_size(uECC_Curve curve);
int uECC_curve_public_key_size(uECC_Curve curve);
int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve);
int uECC_shared_secret(const uint8_t *public_key,
                       const uint8_t *private_key,
                       uint8_t *secret,
                       uECC_Curve curve);
void uECC_compress(const uint8_t *public_key, uint8_t *compressed, uECC_Curve curve);
void uECC_decompress(const uint8_t *compressed, uint8_t *public_key, uECC_Curve curve);
int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve);
int uECC_compute_public_key(const uint8_t *private_key, uint8_t *public_key, uECC_Curve curve);
int uECC_sign(const uint8_t *private_key,
              const uint8_t *message_hash,
              unsigned hash_size,
              uint8_t *signature,
              uECC_Curve curve);
typedef struct uECC_HashContext {
    void (*init_hash)(const struct uECC_HashContext *context);
    void (*update_hash)(const struct uECC_HashContext *context,
                        const uint8_t *message,
                        unsigned message_size);
    void (*finish_hash)(const struct uECC_HashContext *context, uint8_t *hash_result);
    unsigned block_size;
    unsigned result_size;
    uint8_t *tmp;
} uECC_HashContext;
int uECC_sign_deterministic(const uint8_t *private_key,
                            const uint8_t *message_hash,
                            unsigned hash_size,
                            const uECC_HashContext *hash_context,
                            uint8_t *signature,
                            uECC_Curve curve);
int uECC_verify(const uint8_t *public_key,
                const uint8_t *message_hash,
                unsigned hash_size,
                const uint8_t *signature,
                uECC_Curve curve);
       
       
       
#define LFRFID_T5577_BLOCK_COUNT 8
#define LFRFID_T5577_POR_DELAY 0x00000001
#define LFRFID_T5577_ST_TERMINATOR 0x00000008
#define LFRFID_T5577_PWD 0x00000010
#define LFRFID_T5577_MAXBLOCK_SHIFT 5
#define LFRFID_T5577_AOR 0x00000200
#define LFRFID_T5577_PSKCF_RF_2 0
#define LFRFID_T5577_PSKCF_RF_4 0x00000400
#define LFRFID_T5577_PSKCF_RF_8 0x00000800
#define LFRFID_T5577_MODULATION_DIRECT 0
#define LFRFID_T5577_MODULATION_PSK1 0x00001000
#define LFRFID_T5577_MODULATION_PSK2 0x00002000
#define LFRFID_T5577_MODULATION_PSK3 0x00003000
#define LFRFID_T5577_MODULATION_FSK1 0x00004000
#define LFRFID_T5577_MODULATION_FSK2 0x00005000
#define LFRFID_T5577_MODULATION_FSK1a 0x00006000
#define LFRFID_T5577_MODULATION_FSK2a 0x00007000
#define LFRFID_T5577_MODULATION_MANCHESTER 0x00008000
#define LFRFID_T5577_MODULATION_BIPHASE 0x00010000
#define LFRFID_T5577_MODULATION_DIPHASE 0x00018000
#define LFRFID_T5577_X_MODE 0x00020000
#define LFRFID_T5577_BITRATE_RF_8 0
#define LFRFID_T5577_BITRATE_RF_16 0x00040000
#define LFRFID_T5577_BITRATE_RF_32 0x00080000
#define LFRFID_T5577_BITRATE_RF_40 0x000C0000
#define LFRFID_T5577_BITRATE_RF_50 0x00100000
#define LFRFID_T5577_BITRATE_RF_64 0x00140000
#define LFRFID_T5577_BITRATE_RF_100 0x00180000
#define LFRFID_T5577_BITRATE_RF_128 0x001C0000
#define LFRFID_T5577_TESTMODE_DISABLED 0x60000000
typedef struct {
    uint32_t block[8];
    uint32_t blocks_to_write;
} LFRFIDT5577;
void t5577_write(LFRFIDT5577* data);
typedef enum {
    LFRFIDFeatureASK = 1 << 0,
    LFRFIDFeaturePSK = 1 << 1,
} LFRFIDFeature;
typedef enum {
    LFRFIDProtocolEM4100,
    LFRFIDProtocolH10301,
    LFRFIDProtocolIdteck,
    LFRFIDProtocolIndala26,
    LFRFIDProtocolIOProxXSF,
    LFRFIDProtocolAwid,
    LFRFIDProtocolFDXA,
    LFRFIDProtocolFDXB,
    LFRFIDProtocolHidGeneric,
    LFRFIDProtocolHidExGeneric,
    LFRFIDProtocolPyramid,
    LFRFIDProtocolViking,
    LFRFIDProtocolJablotron,
    LFRFIDProtocolParadox,
    LFRFIDProtocolPACStanley,
    LFRFIDProtocolKeri,
    LFRFIDProtocolGallagher,
    LFRFIDProtocolMax,
} LFRFIDProtocol;
extern const ProtocolBase* lfrfid_protocols[];
typedef enum {
    LFRFIDWriteTypeT5577,
} LFRFIDWriteType;
typedef struct {
    LFRFIDWriteType write_type;
    union {
        LFRFIDT5577 t5577;
    };
} LFRFIDWriteRequest;
typedef enum {
    LFRFIDWorkerWriteOK,
    LFRFIDWorkerWriteProtocolCannotBeWritten,
    LFRFIDWorkerWriteFobCannotBeWritten,
    LFRFIDWorkerWriteTooLongToWrite,
} LFRFIDWorkerWriteResult;
typedef enum {
    LFRFIDWorkerReadTypeAuto,
    LFRFIDWorkerReadTypeASKOnly,
    LFRFIDWorkerReadTypePSKOnly,
} LFRFIDWorkerReadType;
typedef enum {
    LFRFIDWorkerReadSenseStart,
    LFRFIDWorkerReadSenseEnd,
    LFRFIDWorkerReadSenseCardStart,
    LFRFIDWorkerReadSenseCardEnd,
    LFRFIDWorkerReadStartASK,
    LFRFIDWorkerReadStartPSK,
    LFRFIDWorkerReadDone,
} LFRFIDWorkerReadResult;
typedef enum {
    LFRFIDWorkerReadRawFileError,
    LFRFIDWorkerReadRawOverrun,
} LFRFIDWorkerReadRawResult;
typedef enum {
    LFRFIDWorkerEmulateRawFileError,
    LFRFIDWorkerEmulateRawOverrun,
} LFRFIDWorkerEmulateRawResult;
typedef void (
    *LFRFIDWorkerReadCallback)(LFRFIDWorkerReadResult result, ProtocolId protocol, void* context);
typedef void (*LFRFIDWorkerWriteCallback)(LFRFIDWorkerWriteResult result, void* context);
typedef void (*LFRFIDWorkerReadRawCallback)(LFRFIDWorkerReadRawResult result, void* context);
typedef void (*LFRFIDWorkerEmulateRawCallback)(LFRFIDWorkerEmulateRawResult result, void* context);
typedef struct LFRFIDWorker LFRFIDWorker;
LFRFIDWorker* lfrfid_worker_alloc(ProtocolDict* dict);
void lfrfid_worker_free(LFRFIDWorker* worker);
void lfrfid_worker_start_thread(LFRFIDWorker* worker);
void lfrfid_worker_stop_thread(LFRFIDWorker* worker);
void lfrfid_worker_read_start(
    LFRFIDWorker* worker,
    LFRFIDWorkerReadType type,
    LFRFIDWorkerReadCallback callback,
    void* context);
void lfrfid_worker_write_start(
    LFRFIDWorker* worker,
    LFRFIDProtocol protocol,
    LFRFIDWorkerWriteCallback callback,
    void* context);
void lfrfid_worker_emulate_start(LFRFIDWorker* worker, LFRFIDProtocol protocol);
void lfrfid_worker_read_raw_start(
    LFRFIDWorker* worker,
    const char* filename,
    LFRFIDWorkerReadType type,
    LFRFIDWorkerReadRawCallback callback,
    void* context);
void lfrfid_worker_emulate_raw_start(
    LFRFIDWorker* worker,
    const char* filename,
    LFRFIDWorkerEmulateRawCallback callback,
    void* context);
void lfrfid_worker_stop(LFRFIDWorker* worker);
       
typedef struct LFRFIDRawWorker LFRFIDRawWorker;
LFRFIDRawWorker* lfrfid_raw_worker_alloc();
void lfrfid_raw_worker_free(LFRFIDRawWorker* worker);
void lfrfid_raw_worker_start_read(
    LFRFIDRawWorker* worker,
    const char* file_path,
    float frequency,
    float duty_cycle,
    LFRFIDWorkerReadRawCallback callback,
    void* context);
void lfrfid_raw_worker_start_emulate(
    LFRFIDRawWorker* worker,
    const char* file_path,
    LFRFIDWorkerEmulateRawCallback callback,
    void* context);
void lfrfid_raw_worker_stop(LFRFIDRawWorker* worker);
       
typedef struct LFRFIDRawFile LFRFIDRawFile;
LFRFIDRawFile* lfrfid_raw_file_alloc(Storage* storage);
void lfrfid_raw_file_free(LFRFIDRawFile* file);
_Bool lfrfid_raw_file_open_write(LFRFIDRawFile* file, const char* file_path);
_Bool lfrfid_raw_file_open_read(LFRFIDRawFile* file, const char* file_path);
_Bool lfrfid_raw_file_write_header(
    LFRFIDRawFile* file,
    float frequency,
    float duty_cycle,
    uint32_t max_buffer_size);
_Bool lfrfid_raw_file_write_buffer(LFRFIDRawFile* file, uint8_t* buffer_data, size_t buffer_size);
_Bool lfrfid_raw_file_read_header(LFRFIDRawFile* file, float* frequency, float* duty_cycle);
_Bool lfrfid_raw_file_read_pair(
    LFRFIDRawFile* file,
    uint32_t* duration,
    uint32_t* pulse,
    _Bool* pass_end);
       
_Bool lfrfid_dict_file_save(ProtocolDict* dict, ProtocolId protocol, const char* filename);
ProtocolId lfrfid_dict_file_load(ProtocolDict* dict, const char* filename);
       
#define TOPBIT(X) (1 << ((X)-1))
typedef enum {
    BitLibParityEven,
    BitLibParityOdd,
    BitLibParityAlways0,
    BitLibParityAlways1,
} BitLibParity;
#define bit_lib_increment_index(index,length) (index = (((index) + 1) % (length)))
#define bit_lib_bit_is_set(data,index) (((data) & (1 << (index))) != 0)
#define bit_lib_bit_is_not_set(data,index) (((data) & (1 << (index))) == 0)
void bit_lib_push_bit(uint8_t* data, size_t data_size, _Bool bit);
void bit_lib_set_bit(uint8_t* data, size_t position, _Bool bit);
void bit_lib_set_bits(uint8_t* data, size_t position, uint8_t byte, uint8_t length);
_Bool bit_lib_get_bit(const uint8_t* data, size_t position);
uint8_t bit_lib_get_bits(const uint8_t* data, size_t position, uint8_t length);
uint16_t bit_lib_get_bits_16(const uint8_t* data, size_t position, uint8_t length);
uint32_t bit_lib_get_bits_32(const uint8_t* data, size_t position, uint8_t length);
_Bool bit_lib_test_parity_32(uint32_t bits, BitLibParity parity);
_Bool bit_lib_test_parity(
    const uint8_t* data,
    size_t position,
    uint8_t length,
    BitLibParity parity,
    uint8_t parity_length);
size_t bit_lib_add_parity(
    const uint8_t* data,
    size_t position,
    uint8_t* dest,
    size_t dest_position,
    uint8_t source_length,
    uint8_t parity_length,
    BitLibParity parity);
size_t bit_lib_remove_bit_every_nth(uint8_t* data, size_t position, uint8_t length, uint8_t n);
void bit_lib_copy_bits(
    uint8_t* data,
    size_t position,
    size_t length,
    const uint8_t* source,
    size_t source_position);
void bit_lib_reverse_bits(uint8_t* data, size_t position, uint8_t length);
uint8_t bit_lib_get_bit_count(uint32_t data);
void bit_lib_print_bits(const uint8_t* data, size_t length);
typedef struct {
    const char mark;
    const size_t start;
    const size_t length;
} BitLibRegion;
void bit_lib_print_regions(
    const BitLibRegion* regions,
    size_t region_count,
    const uint8_t* data,
    size_t length);
uint16_t bit_lib_reverse_16_fast(uint16_t data);
uint8_t bit_lib_reverse_8_fast(uint8_t byte);
uint16_t bit_lib_crc8(
    uint8_t const* data,
    size_t data_size,
    uint8_t polynom,
    uint8_t init,
    _Bool ref_in,
    _Bool ref_out,
    uint8_t xor_out);
uint16_t bit_lib_crc16(
    uint8_t const* data,
    size_t data_size,
    uint16_t polynom,
    uint16_t init,
    _Bool ref_in,
    _Bool ref_out,
    uint16_t xor_out);
       
       
       
#define _ELF_H 
typedef uint16_t Elf32_Half;
typedef uint16_t Elf64_Half;
typedef uint32_t Elf32_Word;
typedef int32_t Elf32_Sword;
typedef uint32_t Elf64_Word;
typedef int32_t Elf64_Sword;
typedef uint64_t Elf32_Xword;
typedef int64_t Elf32_Sxword;
typedef uint64_t Elf64_Xword;
typedef int64_t Elf64_Sxword;
typedef uint32_t Elf32_Addr;
typedef uint64_t Elf64_Addr;
typedef uint32_t Elf32_Off;
typedef uint64_t Elf64_Off;
typedef uint16_t Elf32_Section;
typedef uint16_t Elf64_Section;
typedef Elf32_Half Elf32_Versym;
typedef Elf64_Half Elf64_Versym;
#define EI_NIDENT (16)
typedef struct {
  unsigned char e_ident[(16)];
  Elf32_Half e_type;
  Elf32_Half e_machine;
  Elf32_Word e_version;
  Elf32_Addr e_entry;
  Elf32_Off e_phoff;
  Elf32_Off e_shoff;
  Elf32_Word e_flags;
  Elf32_Half e_ehsize;
  Elf32_Half e_phentsize;
  Elf32_Half e_phnum;
  Elf32_Half e_shentsize;
  Elf32_Half e_shnum;
  Elf32_Half e_shstrndx;
} Elf32_Ehdr;
typedef struct {
  unsigned char e_ident[(16)];
  Elf64_Half e_type;
  Elf64_Half e_machine;
  Elf64_Word e_version;
  Elf64_Addr e_entry;
  Elf64_Off e_phoff;
  Elf64_Off e_shoff;
  Elf64_Word e_flags;
  Elf64_Half e_ehsize;
  Elf64_Half e_phentsize;
  Elf64_Half e_phnum;
  Elf64_Half e_shentsize;
  Elf64_Half e_shnum;
  Elf64_Half e_shstrndx;
} Elf64_Ehdr;
#define EI_MAG0 0
#define ELFMAG0 0x7f
#define EI_MAG1 1
#define ELFMAG1 'E'
#define EI_MAG2 2
#define ELFMAG2 'L'
#define EI_MAG3 3
#define ELFMAG3 'F'
#define ELFMAG "\177ELF"
#define SELFMAG 4
#define EI_CLASS 4
#define ELFCLASSNONE 0
#define ELFCLASS32 1
#define ELFCLASS64 2
#define ELFCLASSNUM 3
#define EI_DATA 5
#define ELFDATANONE 0
#define ELFDATA2LSB 1
#define ELFDATA2MSB 2
#define ELFDATANUM 3
#define EI_VERSION 6
#define EI_OSABI 7
#define ELFOSABI_NONE 0
#define ELFOSABI_SYSV 0
#define ELFOSABI_HPUX 1
#define ELFOSABI_NETBSD 2
#define ELFOSABI_LINUX 3
#define ELFOSABI_GNU 3
#define ELFOSABI_SOLARIS 6
#define ELFOSABI_AIX 7
#define ELFOSABI_IRIX 8
#define ELFOSABI_FREEBSD 9
#define ELFOSABI_TRU64 10
#define ELFOSABI_MODESTO 11
#define ELFOSABI_OPENBSD 12
#define ELFOSABI_ARM 97
#define ELFOSABI_STANDALONE 255
#define EI_ABIVERSION 8
#define EI_PAD 9
#define ET_NONE 0
#define ET_REL 1
#define ET_EXEC 2
#define ET_DYN 3
#define ET_CORE 4
#define ET_NUM 5
#define ET_LOOS 0xfe00
#define ET_HIOS 0xfeff
#define ET_LOPROC 0xff00
#define ET_HIPROC 0xffff
#define EM_NONE 0
#define EM_M32 1
#define EM_SPARC 2
#define EM_386 3
#define EM_68K 4
#define EM_88K 5
#define EM_860 7
#define EM_MIPS 8
#define EM_S370 9
#define EM_MIPS_RS3_LE 10
#define EM_PARISC 15
#define EM_VPP500 17
#define EM_SPARC32PLUS 18
#define EM_960 19
#define EM_PPC 20
#define EM_PPC64 21
#define EM_S390 22
#define EM_V800 36
#define EM_FR20 37
#define EM_RH32 38
#define EM_RCE 39
#define EM_ARM 40
#define EM_FAKE_ALPHA 41
#define EM_SH 42
#define EM_SPARCV9 43
#define EM_TRICORE 44
#define EM_ARC 45
#define EM_H8_300 46
#define EM_H8_300H 47
#define EM_H8S 48
#define EM_H8_500 49
#define EM_IA_64 50
#define EM_MIPS_X 51
#define EM_COLDFIRE 52
#define EM_68HC12 53
#define EM_MMA 54
#define EM_PCP 55
#define EM_NCPU 56
#define EM_NDR1 57
#define EM_STARCORE 58
#define EM_ME16 59
#define EM_ST100 60
#define EM_TINYJ 61
#define EM_X86_64 62
#define EM_PDSP 63
#define EM_FX66 66
#define EM_ST9PLUS 67
#define EM_ST7 68
#define EM_68HC16 69
#define EM_68HC11 70
#define EM_68HC08 71
#define EM_68HC05 72
#define EM_SVX 73
#define EM_ST19 74
#define EM_VAX 75
#define EM_CRIS 76
#define EM_JAVELIN 77
#define EM_FIREPATH 78
#define EM_ZSP 79
#define EM_MMIX 80
#define EM_HUANY 81
#define EM_PRISM 82
#define EM_AVR 83
#define EM_FR30 84
#define EM_D10V 85
#define EM_D30V 86
#define EM_V850 87
#define EM_M32R 88
#define EM_MN10300 89
#define EM_MN10200 90
#define EM_PJ 91
#define EM_OR1K 92
#define EM_OPENRISC 92
#define EM_ARC_A5 93
#define EM_ARC_COMPACT 93
#define EM_XTENSA 94
#define EM_VIDEOCORE 95
#define EM_TMM_GPP 96
#define EM_NS32K 97
#define EM_TPC 98
#define EM_SNP1K 99
#define EM_ST200 100
#define EM_IP2K 101
#define EM_MAX 102
#define EM_CR 103
#define EM_F2MC16 104
#define EM_MSP430 105
#define EM_BLACKFIN 106
#define EM_SE_C33 107
#define EM_SEP 108
#define EM_ARCA 109
#define EM_UNICORE 110
#define EM_EXCESS 111
#define EM_DXP 112
#define EM_ALTERA_NIOS2 113
#define EM_CRX 114
#define EM_XGATE 115
#define EM_C166 116
#define EM_M16C 117
#define EM_DSPIC30F 118
#define EM_CE 119
#define EM_M32C 120
#define EM_TSK3000 131
#define EM_RS08 132
#define EM_SHARC 133
#define EM_ECOG2 134
#define EM_SCORE7 135
#define EM_DSP24 136
#define EM_VIDEOCORE3 137
#define EM_LATTICEMICO32 138
#define EM_SE_C17 139
#define EM_TI_C6000 140
#define EM_TI_C2000 141
#define EM_TI_C5500 142
#define EM_TI_ARP32 143
#define EM_TI_PRU 144
#define EM_MMDSP_PLUS 160
#define EM_CYPRESS_M8C 161
#define EM_R32C 162
#define EM_TRIMEDIA 163
#define EM_QDSP6 164
#define EM_8051 165
#define EM_STXP7X 166
#define EM_NDS32 167
#define EM_ECOG1X 168
#define EM_MAXQ30 169
#define EM_XIMO16 170
#define EM_MANIK 171
#define EM_CRAYNV2 172
#define EM_RX 173
#define EM_METAG 174
#define EM_MCST_ELBRUS 175
#define EM_ECOG16 176
#define EM_CR16 177
#define EM_ETPU 178
#define EM_SLE9X 179
#define EM_L10M 180
#define EM_K10M 181
#define EM_AARCH64 183
#define EM_AVR32 185
#define EM_STM8 186
#define EM_TILE64 187
#define EM_TILEPRO 188
#define EM_MICROBLAZE 189
#define EM_CUDA 190
#define EM_TILEGX 191
#define EM_CLOUDSHIELD 192
#define EM_COREA_1ST 193
#define EM_COREA_2ND 194
#define EM_ARC_COMPACT2 195
#define EM_OPEN8 196
#define EM_RL78 197
#define EM_VIDEOCORE5 198
#define EM_78KOR 199
#define EM_56800EX 200
#define EM_BA1 201
#define EM_BA2 202
#define EM_XCORE 203
#define EM_MCHP_PIC 204
#define EM_KM32 210
#define EM_KMX32 211
#define EM_EMX16 212
#define EM_EMX8 213
#define EM_KVARC 214
#define EM_CDP 215
#define EM_COGE 216
#define EM_COOL 217
#define EM_NORC 218
#define EM_CSR_KALIMBA 219
#define EM_Z80 220
#define EM_VISIUM 221
#define EM_FT32 222
#define EM_MOXIE 223
#define EM_AMDGPU 224
#define EM_RISCV 243
#define EM_BPF 247
#define EM_NUM 248
#define EM_ALPHA 0x9026
#define EV_NONE 0
#define EV_CURRENT 1
#define EV_NUM 2
typedef struct {
  Elf32_Word sh_name;
  Elf32_Word sh_type;
  Elf32_Word sh_flags;
  Elf32_Addr sh_addr;
  Elf32_Off sh_offset;
  Elf32_Word sh_size;
  Elf32_Word sh_link;
  Elf32_Word sh_info;
  Elf32_Word sh_addralign;
  Elf32_Word sh_entsize;
} Elf32_Shdr;
typedef struct {
  Elf64_Word sh_name;
  Elf64_Word sh_type;
  Elf64_Xword sh_flags;
  Elf64_Addr sh_addr;
  Elf64_Off sh_offset;
  Elf64_Xword sh_size;
  Elf64_Word sh_link;
  Elf64_Word sh_info;
  Elf64_Xword sh_addralign;
  Elf64_Xword sh_entsize;
} Elf64_Shdr;
#define SHN_UNDEF 0
#define SHN_LORESERVE 0xff00
#define SHN_LOPROC 0xff00
#define SHN_BEFORE 0xff00
#define SHN_AFTER 0xff01
#define SHN_HIPROC 0xff1f
#define SHN_LOOS 0xff20
#define SHN_HIOS 0xff3f
#define SHN_ABS 0xfff1
#define SHN_COMMON 0xfff2
#define SHN_XINDEX 0xffff
#define SHN_HIRESERVE 0xffff
#define SHT_NULL 0
#define SHT_PROGBITS 1
#define SHT_SYMTAB 2
#define SHT_STRTAB 3
#define SHT_RELA 4
#define SHT_HASH 5
#define SHT_DYNAMIC 6
#define SHT_NOTE 7
#define SHT_NOBITS 8
#define SHT_REL 9
#define SHT_SHLIB 10
#define SHT_DYNSYM 11
#define SHT_INIT_ARRAY 14
#define SHT_FINI_ARRAY 15
#define SHT_PREINIT_ARRAY 16
#define SHT_GROUP 17
#define SHT_SYMTAB_SHNDX 18
#define SHT_NUM 19
#define SHT_LOOS 0x60000000
#define SHT_GNU_ATTRIBUTES 0x6ffffff5
#define SHT_GNU_HASH 0x6ffffff6
#define SHT_GNU_LIBLIST 0x6ffffff7
#define SHT_CHECKSUM 0x6ffffff8
#define SHT_LOSUNW 0x6ffffffa
#define SHT_SUNW_move 0x6ffffffa
#define SHT_SUNW_COMDAT 0x6ffffffb
#define SHT_SUNW_syminfo 0x6ffffffc
#define SHT_GNU_verdef 0x6ffffffd
#define SHT_GNU_verneed 0x6ffffffe
#define SHT_GNU_versym 0x6fffffff
#define SHT_HISUNW 0x6fffffff
#define SHT_HIOS 0x6fffffff
#define SHT_LOPROC 0x70000000
#define SHT_HIPROC 0x7fffffff
#define SHT_LOUSER 0x80000000
#define SHT_HIUSER 0x8fffffff
#define SHF_WRITE (1 << 0)
#define SHF_ALLOC (1 << 1)
#define SHF_EXECINSTR (1 << 2)
#define SHF_MERGE (1 << 4)
#define SHF_STRINGS (1 << 5)
#define SHF_INFO_LINK (1 << 6)
#define SHF_LINK_ORDER (1 << 7)
#define SHF_OS_NONCONFORMING (1 << 8)
#define SHF_GROUP (1 << 9)
#define SHF_TLS (1 << 10)
#define SHF_COMPRESSED (1 << 11)
#define SHF_MASKOS 0x0ff00000
#define SHF_MASKPROC 0xf0000000
#define SHF_ORDERED (1 << 30)
#define SHF_EXCLUDE (1U << 31)
typedef struct {
  Elf32_Word ch_type;
  Elf32_Word ch_size;
  Elf32_Word ch_addralign;
} Elf32_Chdr;
typedef struct {
  Elf64_Word ch_type;
  Elf64_Word ch_reserved;
  Elf64_Xword ch_size;
  Elf64_Xword ch_addralign;
} Elf64_Chdr;
#define ELFCOMPRESS_ZLIB 1
#define ELFCOMPRESS_LOOS 0x60000000
#define ELFCOMPRESS_HIOS 0x6fffffff
#define ELFCOMPRESS_LOPROC 0x70000000
#define ELFCOMPRESS_HIPROC 0x7fffffff
#define GRP_COMDAT 0x1
typedef struct {
  Elf32_Word st_name;
  Elf32_Addr st_value;
  Elf32_Word st_size;
  unsigned char st_info;
  unsigned char st_other;
  Elf32_Section st_shndx;
} Elf32_Sym;
typedef struct {
  Elf64_Word st_name;
  unsigned char st_info;
  unsigned char st_other;
  Elf64_Section st_shndx;
  Elf64_Addr st_value;
  Elf64_Xword st_size;
} Elf64_Sym;
typedef struct {
  Elf32_Half si_boundto;
  Elf32_Half si_flags;
} Elf32_Syminfo;
typedef struct {
  Elf64_Half si_boundto;
  Elf64_Half si_flags;
} Elf64_Syminfo;
#define SYMINFO_BT_SELF 0xffff
#define SYMINFO_BT_PARENT 0xfffe
#define SYMINFO_BT_LOWRESERVE 0xff00
#define SYMINFO_FLG_DIRECT 0x0001
#define SYMINFO_FLG_PASSTHRU 0x0002
#define SYMINFO_FLG_COPY 0x0004
#define SYMINFO_FLG_LAZYLOAD 0x0008
#define SYMINFO_NONE 0
#define SYMINFO_CURRENT 1
#define SYMINFO_NUM 2
#define ELF32_ST_BIND(val) (((unsigned char) (val)) >> 4)
#define ELF32_ST_TYPE(val) ((val) & 0xf)
#define ELF32_ST_INFO(bind,type) (((bind) << 4) + ((type) & 0xf))
#define ELF64_ST_BIND(val) ELF32_ST_BIND (val)
#define ELF64_ST_TYPE(val) ELF32_ST_TYPE (val)
#define ELF64_ST_INFO(bind,type) ELF32_ST_INFO ((bind), (type))
#define STB_LOCAL 0
#define STB_GLOBAL 1
#define STB_WEAK 2
#define STB_NUM 3
#define STB_LOOS 10
#define STB_GNU_UNIQUE 10
#define STB_HIOS 12
#define STB_LOPROC 13
#define STB_HIPROC 15
#define STT_NOTYPE 0
#define STT_OBJECT 1
#define STT_FUNC 2
#define STT_SECTION 3
#define STT_FILE 4
#define STT_COMMON 5
#define STT_TLS 6
#define STT_NUM 7
#define STT_LOOS 10
#define STT_GNU_IFUNC 10
#define STT_HIOS 12
#define STT_LOPROC 13
#define STT_HIPROC 15
#define STN_UNDEF 0
#define ELF32_ST_VISIBILITY(o) ((o) & 0x03)
#define ELF64_ST_VISIBILITY(o) ELF32_ST_VISIBILITY (o)
#define STV_DEFAULT 0
#define STV_INTERNAL 1
#define STV_HIDDEN 2
#define STV_PROTECTED 3
typedef struct {
  Elf32_Addr r_offset;
  Elf32_Word r_info;
} Elf32_Rel;
typedef struct {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
} Elf64_Rel;
typedef struct {
  Elf32_Addr r_offset;
  Elf32_Word r_info;
  Elf32_Sword r_addend;
} Elf32_Rela;
typedef struct {
  Elf64_Addr r_offset;
  Elf64_Xword r_info;
  Elf64_Sxword r_addend;
} Elf64_Rela;
#define ELF32_R_SYM(val) ((val) >> 8)
#define ELF32_R_TYPE(val) ((val) & 0xff)
#define ELF32_R_INFO(sym,type) (((sym) << 8) + ((type) & 0xff))
#define ELF64_R_SYM(i) ((i) >> 32)
#define ELF64_R_TYPE(i) ((i) & 0xffffffff)
#define ELF64_R_INFO(sym,type) ((((Elf64_Xword) (sym)) << 32) + (type))
typedef struct {
  Elf32_Word p_type;
  Elf32_Off p_offset;
  Elf32_Addr p_vaddr;
  Elf32_Addr p_paddr;
  Elf32_Word p_filesz;
  Elf32_Word p_memsz;
  Elf32_Word p_flags;
  Elf32_Word p_align;
} Elf32_Phdr;
typedef struct {
  Elf64_Word p_type;
  Elf64_Word p_flags;
  Elf64_Off p_offset;
  Elf64_Addr p_vaddr;
  Elf64_Addr p_paddr;
  Elf64_Xword p_filesz;
  Elf64_Xword p_memsz;
  Elf64_Xword p_align;
} Elf64_Phdr;
#define PT_NULL 0
#define PT_LOAD 1
#define PT_DYNAMIC 2
#define PT_INTERP 3
#define PT_NOTE 4
#define PT_SHLIB 5
#define PT_PHDR 6
#define PT_TLS 7
#define PT_NUM 8
#define PT_LOOS 0x60000000
#define PT_GNU_EH_FRAME 0x6474e550
#define PT_GNU_STACK 0x6474e551
#define PT_GNU_RELRO 0x6474e552
#define PT_LOSUNW 0x6ffffffa
#define PT_SUNWBSS 0x6ffffffa
#define PT_SUNWSTACK 0x6ffffffb
#define PT_HISUNW 0x6fffffff
#define PT_HIOS 0x6fffffff
#define PT_LOPROC 0x70000000
#define PT_HIPROC 0x7fffffff
#define PN_XNUM 0xffff
#define PF_X (1 << 0)
#define PF_W (1 << 1)
#define PF_R (1 << 2)
#define PF_MASKOS 0x0ff00000
#define PF_MASKPROC 0xf0000000
#define NT_PRSTATUS 1
#define NT_FPREGSET 2
#define NT_PRPSINFO 3
#define NT_PRXREG 4
#define NT_TASKSTRUCT 4
#define NT_PLATFORM 5
#define NT_AUXV 6
#define NT_GWINDOWS 7
#define NT_ASRS 8
#define NT_PSTATUS 10
#define NT_PSINFO 13
#define NT_PRCRED 14
#define NT_UTSNAME 15
#define NT_LWPSTATUS 16
#define NT_LWPSINFO 17
#define NT_PRFPXREG 20
#define NT_SIGINFO 0x53494749
#define NT_FILE 0x46494c45
#define NT_PRXFPREG 0x46e62b7f
#define NT_PPC_VMX 0x100
#define NT_PPC_SPE 0x101
#define NT_PPC_VSX 0x102
#define NT_386_TLS 0x200
#define NT_386_IOPERM 0x201
#define NT_X86_XSTATE 0x202
#define NT_S390_HIGH_GPRS 0x300
#define NT_S390_TIMER 0x301
#define NT_S390_TODCMP 0x302
#define NT_S390_TODPREG 0x303
#define NT_S390_CTRS 0x304
#define NT_S390_PREFIX 0x305
#define NT_S390_LAST_BREAK 0x306
#define NT_S390_SYSTEM_CALL 0x307
#define NT_S390_TDB 0x308
#define NT_ARM_VFP 0x400
#define NT_ARM_TLS 0x401
#define NT_ARM_HW_BREAK 0x402
#define NT_ARM_HW_WATCH 0x403
#define NT_ARM_SYSTEM_CALL 0x404
#define NT_ARM_SVE 0x405
#define NT_METAG_CBUF 0x500
#define NT_METAG_RPIPE 0x501
#define NT_METAG_TLS 0x502
#define NT_VERSION 1
typedef struct {
  Elf32_Sword d_tag;
  union {
      Elf32_Word d_val;
      Elf32_Addr d_ptr;
  } d_un;
} Elf32_Dyn;
typedef struct {
  Elf64_Sxword d_tag;
  union {
      Elf64_Xword d_val;
      Elf64_Addr d_ptr;
  } d_un;
} Elf64_Dyn;
#define DT_NULL 0
#define DT_NEEDED 1
#define DT_PLTRELSZ 2
#define DT_PLTGOT 3
#define DT_HASH 4
#define DT_STRTAB 5
#define DT_SYMTAB 6
#define DT_RELA 7
#define DT_RELASZ 8
#define DT_RELAENT 9
#define DT_STRSZ 10
#define DT_SYMENT 11
#define DT_INIT 12
#define DT_FINI 13
#define DT_SONAME 14
#define DT_RPATH 15
#define DT_SYMBOLIC 16
#define DT_REL 17
#define DT_RELSZ 18
#define DT_RELENT 19
#define DT_PLTREL 20
#define DT_DEBUG 21
#define DT_TEXTREL 22
#define DT_JMPREL 23
#define DT_BIND_NOW 24
#define DT_INIT_ARRAY 25
#define DT_FINI_ARRAY 26
#define DT_INIT_ARRAYSZ 27
#define DT_FINI_ARRAYSZ 28
#define DT_RUNPATH 29
#define DT_FLAGS 30
#define DT_ENCODING 32
#define DT_PREINIT_ARRAY 32
#define DT_PREINIT_ARRAYSZ 33
#define DT_NUM 34
#define DT_LOOS 0x6000000d
#define DT_HIOS 0x6ffff000
#define DT_LOPROC 0x70000000
#define DT_HIPROC 0x7fffffff
#define DT_PROCNUM DT_MIPS_NUM
#define DT_VALRNGLO 0x6ffffd00
#define DT_GNU_PRELINKED 0x6ffffdf5
#define DT_GNU_CONFLICTSZ 0x6ffffdf6
#define DT_GNU_LIBLISTSZ 0x6ffffdf7
#define DT_CHECKSUM 0x6ffffdf8
#define DT_PLTPADSZ 0x6ffffdf9
#define DT_MOVEENT 0x6ffffdfa
#define DT_MOVESZ 0x6ffffdfb
#define DT_FEATURE_1 0x6ffffdfc
#define DT_POSFLAG_1 0x6ffffdfd
#define DT_SYMINSZ 0x6ffffdfe
#define DT_SYMINENT 0x6ffffdff
#define DT_VALRNGHI 0x6ffffdff
#define DT_VALTAGIDX(tag) (DT_VALRNGHI - (tag))
#define DT_VALNUM 12
#define DT_ADDRRNGLO 0x6ffffe00
#define DT_GNU_HASH 0x6ffffef5
#define DT_TLSDESC_PLT 0x6ffffef6
#define DT_TLSDESC_GOT 0x6ffffef7
#define DT_GNU_CONFLICT 0x6ffffef8
#define DT_GNU_LIBLIST 0x6ffffef9
#define DT_CONFIG 0x6ffffefa
#define DT_DEPAUDIT 0x6ffffefb
#define DT_AUDIT 0x6ffffefc
#define DT_PLTPAD 0x6ffffefd
#define DT_MOVETAB 0x6ffffefe
#define DT_SYMINFO 0x6ffffeff
#define DT_ADDRRNGHI 0x6ffffeff
#define DT_ADDRTAGIDX(tag) (DT_ADDRRNGHI - (tag))
#define DT_ADDRNUM 11
#define DT_VERSYM 0x6ffffff0
#define DT_RELACOUNT 0x6ffffff9
#define DT_RELCOUNT 0x6ffffffa
#define DT_FLAGS_1 0x6ffffffb
#define DT_VERDEF 0x6ffffffc
#define DT_VERDEFNUM 0x6ffffffd
#define DT_VERNEED 0x6ffffffe
#define DT_VERNEEDNUM 0x6fffffff
#define DT_VERSIONTAGIDX(tag) (DT_VERNEEDNUM - (tag))
#define DT_VERSIONTAGNUM 16
#define DT_AUXILIARY 0x7ffffffd
#define DT_FILTER 0x7fffffff
#define DT_EXTRATAGIDX(tag) ((Elf32_Word)-((Elf32_Sword) (tag) <<1>>1)-1)
#define DT_EXTRANUM 3
#define DF_ORIGIN 0x00000001
#define DF_SYMBOLIC 0x00000002
#define DF_TEXTREL 0x00000004
#define DF_BIND_NOW 0x00000008
#define DF_STATIC_TLS 0x00000010
#define DF_1_NOW 0x00000001
#define DF_1_GLOBAL 0x00000002
#define DF_1_GROUP 0x00000004
#define DF_1_NODELETE 0x00000008
#define DF_1_LOADFLTR 0x00000010
#define DF_1_INITFIRST 0x00000020
#define DF_1_NOOPEN 0x00000040
#define DF_1_ORIGIN 0x00000080
#define DF_1_DIRECT 0x00000100
#define DF_1_TRANS 0x00000200
#define DF_1_INTERPOSE 0x00000400
#define DF_1_NODEFLIB 0x00000800
#define DF_1_NODUMP 0x00001000
#define DF_1_CONFALT 0x00002000
#define DF_1_ENDFILTEE 0x00004000
#define DF_1_DISPRELDNE 0x00008000
#define DF_1_DISPRELPND 0x00010000
#define DF_1_NODIRECT 0x00020000
#define DF_1_IGNMULDEF 0x00040000
#define DF_1_NOKSYMS 0x00080000
#define DF_1_NOHDR 0x00100000
#define DF_1_EDITED 0x00200000
#define DF_1_NORELOC 0x00400000
#define DF_1_SYMINTPOSE 0x00800000
#define DF_1_GLOBAUDIT 0x01000000
#define DF_1_SINGLETON 0x02000000
#define DTF_1_PARINIT 0x00000001
#define DTF_1_CONFEXP 0x00000002
#define DF_P1_LAZYLOAD 0x00000001
#define DF_P1_GROUPPERM 0x00000002
typedef struct {
  Elf32_Half vd_version;
  Elf32_Half vd_flags;
  Elf32_Half vd_ndx;
  Elf32_Half vd_cnt;
  Elf32_Word vd_hash;
  Elf32_Word vd_aux;
  Elf32_Word vd_next;
} Elf32_Verdef;
typedef struct {
  Elf64_Half vd_version;
  Elf64_Half vd_flags;
  Elf64_Half vd_ndx;
  Elf64_Half vd_cnt;
  Elf64_Word vd_hash;
  Elf64_Word vd_aux;
  Elf64_Word vd_next;
} Elf64_Verdef;
#define VER_DEF_NONE 0
#define VER_DEF_CURRENT 1
#define VER_DEF_NUM 2
#define VER_FLG_BASE 0x1
#define VER_FLG_WEAK 0x2
#define VER_NDX_LOCAL 0
#define VER_NDX_GLOBAL 1
#define VER_NDX_LORESERVE 0xff00
#define VER_NDX_ELIMINATE 0xff01
typedef struct {
  Elf32_Word vda_name;
  Elf32_Word vda_next;
} Elf32_Verdaux;
typedef struct {
  Elf64_Word vda_name;
  Elf64_Word vda_next;
} Elf64_Verdaux;
typedef struct {
  Elf32_Half vn_version;
  Elf32_Half vn_cnt;
  Elf32_Word vn_file;
  Elf32_Word vn_aux;
  Elf32_Word vn_next;
} Elf32_Verneed;
typedef struct {
  Elf64_Half vn_version;
  Elf64_Half vn_cnt;
  Elf64_Word vn_file;
  Elf64_Word vn_aux;
  Elf64_Word vn_next;
} Elf64_Verneed;
#define VER_NEED_NONE 0
#define VER_NEED_CURRENT 1
#define VER_NEED_NUM 2
typedef struct {
  Elf32_Word vna_hash;
  Elf32_Half vna_flags;
  Elf32_Half vna_other;
  Elf32_Word vna_name;
  Elf32_Word vna_next;
} Elf32_Vernaux;
typedef struct {
  Elf64_Word vna_hash;
  Elf64_Half vna_flags;
  Elf64_Half vna_other;
  Elf64_Word vna_name;
  Elf64_Word vna_next;
} Elf64_Vernaux;
#define VER_FLG_WEAK 0x2
typedef struct {
  uint32_t a_type;
  union {
      uint32_t a_val;
  } a_un;
} Elf32_auxv_t;
typedef struct {
  uint64_t a_type;
  union {
      uint64_t a_val;
  } a_un;
} Elf64_auxv_t;
#define AT_NULL 0
#define AT_IGNORE 1
#define AT_EXECFD 2
#define AT_PHDR 3
#define AT_PHENT 4
#define AT_PHNUM 5
#define AT_PAGESZ 6
#define AT_BASE 7
#define AT_FLAGS 8
#define AT_ENTRY 9
#define AT_NOTELF 10
#define AT_UID 11
#define AT_EUID 12
#define AT_GID 13
#define AT_EGID 14
#define AT_CLKTCK 17
#define AT_PLATFORM 15
#define AT_HWCAP 16
#define AT_FPUCW 18
#define AT_DCACHEBSIZE 19
#define AT_ICACHEBSIZE 20
#define AT_UCACHEBSIZE 21
#define AT_IGNOREPPC 22
#define AT_SECURE 23
#define AT_BASE_PLATFORM 24
#define AT_RANDOM 25
#define AT_HWCAP2 26
#define AT_EXECFN 31
#define AT_SYSINFO 32
#define AT_SYSINFO_EHDR 33
#define AT_L1I_CACHESHAPE 34
#define AT_L1D_CACHESHAPE 35
#define AT_L2_CACHESHAPE 36
#define AT_L3_CACHESHAPE 37
typedef struct {
  Elf32_Word n_namesz;
  Elf32_Word n_descsz;
  Elf32_Word n_type;
} Elf32_Nhdr;
typedef struct {
  Elf64_Word n_namesz;
  Elf64_Word n_descsz;
  Elf64_Word n_type;
} Elf64_Nhdr;
#define ELF_NOTE_SOLARIS "SUNW Solaris"
#define ELF_NOTE_GNU "GNU"
#define ELF_NOTE_PAGESIZE_HINT 1
#define NT_GNU_ABI_TAG 1
#define ELF_NOTE_ABI NT_GNU_ABI_TAG
#define ELF_NOTE_OS_LINUX 0
#define ELF_NOTE_OS_GNU 1
#define ELF_NOTE_OS_SOLARIS2 2
#define ELF_NOTE_OS_FREEBSD 3
#define NT_GNU_BUILD_ID 3
#define NT_GNU_GOLD_VERSION 4
typedef struct {
  Elf32_Xword m_value;
  Elf32_Word m_info;
  Elf32_Word m_poffset;
  Elf32_Half m_repeat;
  Elf32_Half m_stride;
} Elf32_Move;
typedef struct {
  Elf64_Xword m_value;
  Elf64_Xword m_info;
  Elf64_Xword m_poffset;
  Elf64_Half m_repeat;
  Elf64_Half m_stride;
} Elf64_Move;
#define ELF32_M_SYM(info) ((info) >> 8)
#define ELF32_M_SIZE(info) ((unsigned char) (info))
#define ELF32_M_INFO(sym,size) (((sym) << 8) + (unsigned char) (size))
#define ELF64_M_SYM(info) ELF32_M_SYM (info)
#define ELF64_M_SIZE(info) ELF32_M_SIZE (info)
#define ELF64_M_INFO(sym,size) ELF32_M_INFO (sym, size)
#define EF_CPU32 0x00810000
#define R_68K_NONE 0
#define R_68K_32 1
#define R_68K_16 2
#define R_68K_8 3
#define R_68K_PC32 4
#define R_68K_PC16 5
#define R_68K_PC8 6
#define R_68K_GOT32 7
#define R_68K_GOT16 8
#define R_68K_GOT8 9
#define R_68K_GOT32O 10
#define R_68K_GOT16O 11
#define R_68K_GOT8O 12
#define R_68K_PLT32 13
#define R_68K_PLT16 14
#define R_68K_PLT8 15
#define R_68K_PLT32O 16
#define R_68K_PLT16O 17
#define R_68K_PLT8O 18
#define R_68K_COPY 19
#define R_68K_GLOB_DAT 20
#define R_68K_JMP_SLOT 21
#define R_68K_RELATIVE 22
#define R_68K_NUM 23
#define R_386_NONE 0
#define R_386_32 1
#define R_386_PC32 2
#define R_386_GOT32 3
#define R_386_PLT32 4
#define R_386_COPY 5
#define R_386_GLOB_DAT 6
#define R_386_JMP_SLOT 7
#define R_386_RELATIVE 8
#define R_386_GOTOFF 9
#define R_386_GOTPC 10
#define R_386_32PLT 11
#define R_386_TLS_TPOFF 14
#define R_386_TLS_IE 15
#define R_386_TLS_GOTIE 16
#define R_386_TLS_LE 17
#define R_386_TLS_GD 18
#define R_386_TLS_LDM 19
#define R_386_16 20
#define R_386_PC16 21
#define R_386_8 22
#define R_386_PC8 23
#define R_386_TLS_GD_32 24
#define R_386_TLS_GD_PUSH 25
#define R_386_TLS_GD_CALL 26
#define R_386_TLS_GD_POP 27
#define R_386_TLS_LDM_32 28
#define R_386_TLS_LDM_PUSH 29
#define R_386_TLS_LDM_CALL 30
#define R_386_TLS_LDM_POP 31
#define R_386_TLS_LDO_32 32
#define R_386_TLS_IE_32 33
#define R_386_TLS_LE_32 34
#define R_386_TLS_DTPMOD32 35
#define R_386_TLS_DTPOFF32 36
#define R_386_TLS_TPOFF32 37
#define R_386_SIZE32 38
#define R_386_TLS_GOTDESC 39
#define R_386_TLS_DESC_CALL 40
#define R_386_TLS_DESC 41
#define R_386_IRELATIVE 42
#define R_386_GOT32X 43
#define R_386_NUM 44
#define STT_SPARC_REGISTER 13
#define EF_SPARCV9_MM 3
#define EF_SPARCV9_TSO 0
#define EF_SPARCV9_PSO 1
#define EF_SPARCV9_RMO 2
#define EF_SPARC_LEDATA 0x800000
#define EF_SPARC_EXT_MASK 0xFFFF00
#define EF_SPARC_32PLUS 0x000100
#define EF_SPARC_SUN_US1 0x000200
#define EF_SPARC_HAL_R1 0x000400
#define EF_SPARC_SUN_US3 0x000800
#define R_SPARC_NONE 0
#define R_SPARC_8 1
#define R_SPARC_16 2
#define R_SPARC_32 3
#define R_SPARC_DISP8 4
#define R_SPARC_DISP16 5
#define R_SPARC_DISP32 6
#define R_SPARC_WDISP30 7
#define R_SPARC_WDISP22 8
#define R_SPARC_HI22 9
#define R_SPARC_22 10
#define R_SPARC_13 11
#define R_SPARC_LO10 12
#define R_SPARC_GOT10 13
#define R_SPARC_GOT13 14
#define R_SPARC_GOT22 15
#define R_SPARC_PC10 16
#define R_SPARC_PC22 17
#define R_SPARC_WPLT30 18
#define R_SPARC_COPY 19
#define R_SPARC_GLOB_DAT 20
#define R_SPARC_JMP_SLOT 21
#define R_SPARC_RELATIVE 22
#define R_SPARC_UA32 23
#define R_SPARC_PLT32 24
#define R_SPARC_HIPLT22 25
#define R_SPARC_LOPLT10 26
#define R_SPARC_PCPLT32 27
#define R_SPARC_PCPLT22 28
#define R_SPARC_PCPLT10 29
#define R_SPARC_10 30
#define R_SPARC_11 31
#define R_SPARC_64 32
#define R_SPARC_OLO10 33
#define R_SPARC_HH22 34
#define R_SPARC_HM10 35
#define R_SPARC_LM22 36
#define R_SPARC_PC_HH22 37
#define R_SPARC_PC_HM10 38
#define R_SPARC_PC_LM22 39
#define R_SPARC_WDISP16 40
#define R_SPARC_WDISP19 41
#define R_SPARC_GLOB_JMP 42
#define R_SPARC_7 43
#define R_SPARC_5 44
#define R_SPARC_6 45
#define R_SPARC_DISP64 46
#define R_SPARC_PLT64 47
#define R_SPARC_HIX22 48
#define R_SPARC_LOX10 49
#define R_SPARC_H44 50
#define R_SPARC_M44 51
#define R_SPARC_L44 52
#define R_SPARC_REGISTER 53
#define R_SPARC_UA64 54
#define R_SPARC_UA16 55
#define R_SPARC_TLS_GD_HI22 56
#define R_SPARC_TLS_GD_LO10 57
#define R_SPARC_TLS_GD_ADD 58
#define R_SPARC_TLS_GD_CALL 59
#define R_SPARC_TLS_LDM_HI22 60
#define R_SPARC_TLS_LDM_LO10 61
#define R_SPARC_TLS_LDM_ADD 62
#define R_SPARC_TLS_LDM_CALL 63
#define R_SPARC_TLS_LDO_HIX22 64
#define R_SPARC_TLS_LDO_LOX10 65
#define R_SPARC_TLS_LDO_ADD 66
#define R_SPARC_TLS_IE_HI22 67
#define R_SPARC_TLS_IE_LO10 68
#define R_SPARC_TLS_IE_LD 69
#define R_SPARC_TLS_IE_LDX 70
#define R_SPARC_TLS_IE_ADD 71
#define R_SPARC_TLS_LE_HIX22 72
#define R_SPARC_TLS_LE_LOX10 73
#define R_SPARC_TLS_DTPMOD32 74
#define R_SPARC_TLS_DTPMOD64 75
#define R_SPARC_TLS_DTPOFF32 76
#define R_SPARC_TLS_DTPOFF64 77
#define R_SPARC_TLS_TPOFF32 78
#define R_SPARC_TLS_TPOFF64 79
#define R_SPARC_GOTDATA_HIX22 80
#define R_SPARC_GOTDATA_LOX10 81
#define R_SPARC_GOTDATA_OP_HIX22 82
#define R_SPARC_GOTDATA_OP_LOX10 83
#define R_SPARC_GOTDATA_OP 84
#define R_SPARC_H34 85
#define R_SPARC_SIZE32 86
#define R_SPARC_SIZE64 87
#define R_SPARC_GNU_VTINHERIT 250
#define R_SPARC_GNU_VTENTRY 251
#define R_SPARC_REV32 252
#define R_SPARC_NUM 253
#define DT_SPARC_REGISTER 0x70000001
#define DT_SPARC_NUM 2
#define EF_MIPS_NOREORDER 1
#define EF_MIPS_PIC 2
#define EF_MIPS_CPIC 4
#define EF_MIPS_XGOT 8
#define EF_MIPS_64BIT_WHIRL 16
#define EF_MIPS_ABI2 32
#define EF_MIPS_ABI_ON32 64
#define EF_MIPS_FP64 512
#define EF_MIPS_NAN2008 1024
#define EF_MIPS_ARCH 0xf0000000
#define EF_MIPS_ARCH_1 0x00000000
#define EF_MIPS_ARCH_2 0x10000000
#define EF_MIPS_ARCH_3 0x20000000
#define EF_MIPS_ARCH_4 0x30000000
#define EF_MIPS_ARCH_5 0x40000000
#define EF_MIPS_ARCH_32 0x50000000
#define EF_MIPS_ARCH_64 0x60000000
#define EF_MIPS_ARCH_32R2 0x70000000
#define EF_MIPS_ARCH_64R2 0x80000000
#define E_MIPS_ARCH_1 0x00000000
#define E_MIPS_ARCH_2 0x10000000
#define E_MIPS_ARCH_3 0x20000000
#define E_MIPS_ARCH_4 0x30000000
#define E_MIPS_ARCH_5 0x40000000
#define E_MIPS_ARCH_32 0x50000000
#define E_MIPS_ARCH_64 0x60000000
#define SHN_MIPS_ACOMMON 0xff00
#define SHN_MIPS_TEXT 0xff01
#define SHN_MIPS_DATA 0xff02
#define SHN_MIPS_SCOMMON 0xff03
#define SHN_MIPS_SUNDEFINED 0xff04
#define SHT_MIPS_LIBLIST 0x70000000
#define SHT_MIPS_MSYM 0x70000001
#define SHT_MIPS_CONFLICT 0x70000002
#define SHT_MIPS_GPTAB 0x70000003
#define SHT_MIPS_UCODE 0x70000004
#define SHT_MIPS_DEBUG 0x70000005
#define SHT_MIPS_REGINFO 0x70000006
#define SHT_MIPS_PACKAGE 0x70000007
#define SHT_MIPS_PACKSYM 0x70000008
#define SHT_MIPS_RELD 0x70000009
#define SHT_MIPS_IFACE 0x7000000b
#define SHT_MIPS_CONTENT 0x7000000c
#define SHT_MIPS_OPTIONS 0x7000000d
#define SHT_MIPS_SHDR 0x70000010
#define SHT_MIPS_FDESC 0x70000011
#define SHT_MIPS_EXTSYM 0x70000012
#define SHT_MIPS_DENSE 0x70000013
#define SHT_MIPS_PDESC 0x70000014
#define SHT_MIPS_LOCSYM 0x70000015
#define SHT_MIPS_AUXSYM 0x70000016
#define SHT_MIPS_OPTSYM 0x70000017
#define SHT_MIPS_LOCSTR 0x70000018
#define SHT_MIPS_LINE 0x70000019
#define SHT_MIPS_RFDESC 0x7000001a
#define SHT_MIPS_DELTASYM 0x7000001b
#define SHT_MIPS_DELTAINST 0x7000001c
#define SHT_MIPS_DELTACLASS 0x7000001d
#define SHT_MIPS_DWARF 0x7000001e
#define SHT_MIPS_DELTADECL 0x7000001f
#define SHT_MIPS_SYMBOL_LIB 0x70000020
#define SHT_MIPS_EVENTS 0x70000021
#define SHT_MIPS_TRANSLATE 0x70000022
#define SHT_MIPS_PIXIE 0x70000023
#define SHT_MIPS_XLATE 0x70000024
#define SHT_MIPS_XLATE_DEBUG 0x70000025
#define SHT_MIPS_WHIRL 0x70000026
#define SHT_MIPS_EH_REGION 0x70000027
#define SHT_MIPS_XLATE_OLD 0x70000028
#define SHT_MIPS_PDR_EXCEPTION 0x70000029
#define SHF_MIPS_GPREL 0x10000000
#define SHF_MIPS_MERGE 0x20000000
#define SHF_MIPS_ADDR 0x40000000
#define SHF_MIPS_STRINGS 0x80000000
#define SHF_MIPS_NOSTRIP 0x08000000
#define SHF_MIPS_LOCAL 0x04000000
#define SHF_MIPS_NAMES 0x02000000
#define SHF_MIPS_NODUPE 0x01000000
#define STO_MIPS_DEFAULT 0x0
#define STO_MIPS_INTERNAL 0x1
#define STO_MIPS_HIDDEN 0x2
#define STO_MIPS_PROTECTED 0x3
#define STO_MIPS_PLT 0x8
#define STO_MIPS_SC_ALIGN_UNUSED 0xff
#define STB_MIPS_SPLIT_COMMON 13
typedef union {
  struct {
      Elf32_Word gt_current_g_value;
      Elf32_Word gt_unused;
  } gt_header;
  struct {
      Elf32_Word gt_g_value;
      Elf32_Word gt_bytes;
  } gt_entry;
} Elf32_gptab;
typedef struct {
  Elf32_Word ri_gprmask;
  Elf32_Word ri_cprmask[4];
  Elf32_Sword ri_gp_value;
} Elf32_RegInfo;
typedef struct {
  unsigned char kind;
  unsigned char size;
  Elf32_Section section;
  Elf32_Word info;
} Elf_Options;
#define ODK_NULL 0
#define ODK_REGINFO 1
#define ODK_EXCEPTIONS 2
#define ODK_PAD 3
#define ODK_HWPATCH 4
#define ODK_FILL 5
#define ODK_TAGS 6
#define ODK_HWAND 7
#define ODK_HWOR 8
#define OEX_FPU_MIN 0x1f
#define OEX_FPU_MAX 0x1f00
#define OEX_PAGE0 0x10000
#define OEX_SMM 0x20000
#define OEX_FPDBUG 0x40000
#define OEX_PRECISEFP OEX_FPDBUG
#define OEX_DISMISS 0x80000
#define OEX_FPU_INVAL 0x10
#define OEX_FPU_DIV0 0x08
#define OEX_FPU_OFLO 0x04
#define OEX_FPU_UFLO 0x02
#define OEX_FPU_INEX 0x01
#define OHW_R4KEOP 0x1
#define OHW_R8KPFETCH 0x2
#define OHW_R5KEOP 0x4
#define OHW_R5KCVTL 0x8
#define OPAD_PREFIX 0x1
#define OPAD_POSTFIX 0x2
#define OPAD_SYMBOL 0x4
typedef struct {
  Elf32_Word hwp_flags1;
  Elf32_Word hwp_flags2;
} Elf_Options_Hw;
#define OHWA0_R4KEOP_CHECKED 0x00000001
#define OHWA1_R4KEOP_CLEAN 0x00000002
#define R_MIPS_NONE 0
#define R_MIPS_16 1
#define R_MIPS_32 2
#define R_MIPS_REL32 3
#define R_MIPS_26 4
#define R_MIPS_HI16 5
#define R_MIPS_LO16 6
#define R_MIPS_GPREL16 7
#define R_MIPS_LITERAL 8
#define R_MIPS_GOT16 9
#define R_MIPS_PC16 10
#define R_MIPS_CALL16 11
#define R_MIPS_GPREL32 12
#define R_MIPS_SHIFT5 16
#define R_MIPS_SHIFT6 17
#define R_MIPS_64 18
#define R_MIPS_GOT_DISP 19
#define R_MIPS_GOT_PAGE 20
#define R_MIPS_GOT_OFST 21
#define R_MIPS_GOT_HI16 22
#define R_MIPS_GOT_LO16 23
#define R_MIPS_SUB 24
#define R_MIPS_INSERT_A 25
#define R_MIPS_INSERT_B 26
#define R_MIPS_DELETE 27
#define R_MIPS_HIGHER 28
#define R_MIPS_HIGHEST 29
#define R_MIPS_CALL_HI16 30
#define R_MIPS_CALL_LO16 31
#define R_MIPS_SCN_DISP 32
#define R_MIPS_REL16 33
#define R_MIPS_ADD_IMMEDIATE 34
#define R_MIPS_PJUMP 35
#define R_MIPS_RELGOT 36
#define R_MIPS_JALR 37
#define R_MIPS_TLS_DTPMOD32 38
#define R_MIPS_TLS_DTPREL32 39
#define R_MIPS_TLS_DTPMOD64 40
#define R_MIPS_TLS_DTPREL64 41
#define R_MIPS_TLS_GD 42
#define R_MIPS_TLS_LDM 43
#define R_MIPS_TLS_DTPREL_HI16 44
#define R_MIPS_TLS_DTPREL_LO16 45
#define R_MIPS_TLS_GOTTPREL 46
#define R_MIPS_TLS_TPREL32 47
#define R_MIPS_TLS_TPREL64 48
#define R_MIPS_TLS_TPREL_HI16 49
#define R_MIPS_TLS_TPREL_LO16 50
#define R_MIPS_GLOB_DAT 51
#define R_MIPS_COPY 126
#define R_MIPS_JUMP_SLOT 127
#define R_MIPS_NUM 128
#define PT_MIPS_REGINFO 0x70000000
#define PT_MIPS_RTPROC 0x70000001
#define PT_MIPS_OPTIONS 0x70000002
#define PT_MIPS_ABIFLAGS 0x70000003
#define PF_MIPS_LOCAL 0x10000000
#define DT_MIPS_RLD_VERSION 0x70000001
#define DT_MIPS_TIME_STAMP 0x70000002
#define DT_MIPS_ICHECKSUM 0x70000003
#define DT_MIPS_IVERSION 0x70000004
#define DT_MIPS_FLAGS 0x70000005
#define DT_MIPS_BASE_ADDRESS 0x70000006
#define DT_MIPS_MSYM 0x70000007
#define DT_MIPS_CONFLICT 0x70000008
#define DT_MIPS_LIBLIST 0x70000009
#define DT_MIPS_LOCAL_GOTNO 0x7000000a
#define DT_MIPS_CONFLICTNO 0x7000000b
#define DT_MIPS_LIBLISTNO 0x70000010
#define DT_MIPS_SYMTABNO 0x70000011
#define DT_MIPS_UNREFEXTNO 0x70000012
#define DT_MIPS_GOTSYM 0x70000013
#define DT_MIPS_HIPAGENO 0x70000014
#define DT_MIPS_RLD_MAP 0x70000016
#define DT_MIPS_DELTA_CLASS 0x70000017
#define DT_MIPS_DELTA_CLASS_NO 0x70000018
#define DT_MIPS_DELTA_INSTANCE 0x70000019
#define DT_MIPS_DELTA_INSTANCE_NO 0x7000001a
#define DT_MIPS_DELTA_RELOC 0x7000001b
#define DT_MIPS_DELTA_RELOC_NO 0x7000001c
#define DT_MIPS_DELTA_SYM 0x7000001d
#define DT_MIPS_DELTA_SYM_NO 0x7000001e
#define DT_MIPS_DELTA_CLASSSYM 0x70000020
#define DT_MIPS_DELTA_CLASSSYM_NO 0x70000021
#define DT_MIPS_CXX_FLAGS 0x70000022
#define DT_MIPS_PIXIE_INIT 0x70000023
#define DT_MIPS_SYMBOL_LIB 0x70000024
#define DT_MIPS_LOCALPAGE_GOTIDX 0x70000025
#define DT_MIPS_LOCAL_GOTIDX 0x70000026
#define DT_MIPS_HIDDEN_GOTIDX 0x70000027
#define DT_MIPS_PROTECTED_GOTIDX 0x70000028
#define DT_MIPS_OPTIONS 0x70000029
#define DT_MIPS_INTERFACE 0x7000002a
#define DT_MIPS_DYNSTR_ALIGN 0x7000002b
#define DT_MIPS_INTERFACE_SIZE 0x7000002c
#define DT_MIPS_RLD_TEXT_RESOLVE_ADDR 0x7000002d
#define DT_MIPS_PERF_SUFFIX 0x7000002e
#define DT_MIPS_COMPACT_SIZE 0x7000002f
#define DT_MIPS_GP_VALUE 0x70000030
#define DT_MIPS_AUX_DYNAMIC 0x70000031
#define DT_MIPS_PLTGOT 0x70000032
#define DT_MIPS_RWPLT 0x70000034
#define DT_MIPS_RLD_MAP_REL 0x70000035
#define DT_MIPS_NUM 0x36
#define RHF_NONE 0
#define RHF_QUICKSTART (1 << 0)
#define RHF_NOTPOT (1 << 1)
#define RHF_NO_LIBRARY_REPLACEMENT (1 << 2)
#define RHF_NO_MOVE (1 << 3)
#define RHF_SGI_ONLY (1 << 4)
#define RHF_GUARANTEE_INIT (1 << 5)
#define RHF_DELTA_C_PLUS_PLUS (1 << 6)
#define RHF_GUARANTEE_START_INIT (1 << 7)
#define RHF_PIXIE (1 << 8)
#define RHF_DEFAULT_DELAY_LOAD (1 << 9)
#define RHF_REQUICKSTART (1 << 10)
#define RHF_REQUICKSTARTED (1 << 11)
#define RHF_CORD (1 << 12)
#define RHF_NO_UNRES_UNDEF (1 << 13)
#define RHF_RLD_ORDER_SAFE (1 << 14)
typedef struct {
  Elf32_Word l_name;
  Elf32_Word l_time_stamp;
  Elf32_Word l_checksum;
  Elf32_Word l_version;
  Elf32_Word l_flags;
} Elf32_Lib;
typedef struct {
  Elf64_Word l_name;
  Elf64_Word l_time_stamp;
  Elf64_Word l_checksum;
  Elf64_Word l_version;
  Elf64_Word l_flags;
} Elf64_Lib;
#define LL_NONE 0
#define LL_EXACT_MATCH (1 << 0)
#define LL_IGNORE_INT_VER (1 << 1)
#define LL_REQUIRE_MINOR (1 << 2)
#define LL_EXPORTS (1 << 3)
#define LL_DELAY_LOAD (1 << 4)
#define LL_DELTA (1 << 5)
typedef Elf32_Addr Elf32_Conflict;
typedef struct {
  Elf32_Half version;
  unsigned char isa_level;
  unsigned char isa_rev;
  unsigned char gpr_size;
  unsigned char cpr1_size;
  unsigned char cpr2_size;
  unsigned char fp_abi;
  Elf32_Word isa_ext;
  Elf32_Word ases;
  Elf32_Word flags1;
  Elf32_Word flags2;
} Elf_MIPS_ABIFlags_v0;
#define MIPS_AFL_REG_NONE 0x00
#define MIPS_AFL_REG_32 0x01
#define MIPS_AFL_REG_64 0x02
#define MIPS_AFL_REG_128 0x03
#define MIPS_AFL_ASE_DSP 0x00000001
#define MIPS_AFL_ASE_DSPR2 0x00000002
#define MIPS_AFL_ASE_EVA 0x00000004
#define MIPS_AFL_ASE_MCU 0x00000008
#define MIPS_AFL_ASE_MDMX 0x00000010
#define MIPS_AFL_ASE_MIPS3D 0x00000020
#define MIPS_AFL_ASE_MT 0x00000040
#define MIPS_AFL_ASE_SMARTMIPS 0x00000080
#define MIPS_AFL_ASE_VIRT 0x00000100
#define MIPS_AFL_ASE_MSA 0x00000200
#define MIPS_AFL_ASE_MIPS16 0x00000400
#define MIPS_AFL_ASE_MICROMIPS 0x00000800
#define MIPS_AFL_ASE_XPA 0x00001000
#define MIPS_AFL_ASE_MASK 0x00001fff
#define MIPS_AFL_EXT_XLR 1
#define MIPS_AFL_EXT_OCTEON2 2
#define MIPS_AFL_EXT_OCTEONP 3
#define MIPS_AFL_EXT_LOONGSON_3A 4
#define MIPS_AFL_EXT_OCTEON 5
#define MIPS_AFL_EXT_5900 6
#define MIPS_AFL_EXT_4650 7
#define MIPS_AFL_EXT_4010 8
#define MIPS_AFL_EXT_4100 9
#define MIPS_AFL_EXT_3900 10
#define MIPS_AFL_EXT_10000 11
#define MIPS_AFL_EXT_SB1 12
#define MIPS_AFL_EXT_4111 13
#define MIPS_AFL_EXT_4120 14
#define MIPS_AFL_EXT_5400 15
#define MIPS_AFL_EXT_5500 16
#define MIPS_AFL_EXT_LOONGSON_2E 17
#define MIPS_AFL_EXT_LOONGSON_2F 18
#define MIPS_AFL_FLAGS1_ODDSPREG 1
enum
{
  Val_GNU_MIPS_ABI_FP_ANY = 0,
  Val_GNU_MIPS_ABI_FP_DOUBLE = 1,
  Val_GNU_MIPS_ABI_FP_SINGLE = 2,
  Val_GNU_MIPS_ABI_FP_SOFT = 3,
  Val_GNU_MIPS_ABI_FP_OLD_64 = 4,
  Val_GNU_MIPS_ABI_FP_XX = 5,
  Val_GNU_MIPS_ABI_FP_64 = 6,
  Val_GNU_MIPS_ABI_FP_64A = 7,
  Val_GNU_MIPS_ABI_FP_MAX = 7
};
#define EF_PARISC_TRAPNIL 0x00010000
#define EF_PARISC_EXT 0x00020000
#define EF_PARISC_LSB 0x00040000
#define EF_PARISC_WIDE 0x00080000
#define EF_PARISC_NO_KABP 0x00100000
#define EF_PARISC_LAZYSWAP 0x00400000
#define EF_PARISC_ARCH 0x0000ffff
#define EFA_PARISC_1_0 0x020b
#define EFA_PARISC_1_1 0x0210
#define EFA_PARISC_2_0 0x0214
#define SHN_PARISC_ANSI_COMMON 0xff00
#define SHN_PARISC_HUGE_COMMON 0xff01
#define SHT_PARISC_EXT 0x70000000
#define SHT_PARISC_UNWIND 0x70000001
#define SHT_PARISC_DOC 0x70000002
#define SHF_PARISC_SHORT 0x20000000
#define SHF_PARISC_HUGE 0x40000000
#define SHF_PARISC_SBP 0x80000000
#define STT_PARISC_MILLICODE 13
#define STT_HP_OPAQUE (STT_LOOS + 0x1)
#define STT_HP_STUB (STT_LOOS + 0x2)
#define R_PARISC_NONE 0
#define R_PARISC_DIR32 1
#define R_PARISC_DIR21L 2
#define R_PARISC_DIR17R 3
#define R_PARISC_DIR17F 4
#define R_PARISC_DIR14R 6
#define R_PARISC_PCREL32 9
#define R_PARISC_PCREL21L 10
#define R_PARISC_PCREL17R 11
#define R_PARISC_PCREL17F 12
#define R_PARISC_PCREL14R 14
#define R_PARISC_DPREL21L 18
#define R_PARISC_DPREL14R 22
#define R_PARISC_GPREL21L 26
#define R_PARISC_GPREL14R 30
#define R_PARISC_LTOFF21L 34
#define R_PARISC_LTOFF14R 38
#define R_PARISC_SECREL32 41
#define R_PARISC_SEGBASE 48
#define R_PARISC_SEGREL32 49
#define R_PARISC_PLTOFF21L 50
#define R_PARISC_PLTOFF14R 54
#define R_PARISC_LTOFF_FPTR32 57
#define R_PARISC_LTOFF_FPTR21L 58
#define R_PARISC_LTOFF_FPTR14R 62
#define R_PARISC_FPTR64 64
#define R_PARISC_PLABEL32 65
#define R_PARISC_PLABEL21L 66
#define R_PARISC_PLABEL14R 70
#define R_PARISC_PCREL64 72
#define R_PARISC_PCREL22F 74
#define R_PARISC_PCREL14WR 75
#define R_PARISC_PCREL14DR 76
#define R_PARISC_PCREL16F 77
#define R_PARISC_PCREL16WF 78
#define R_PARISC_PCREL16DF 79
#define R_PARISC_DIR64 80
#define R_PARISC_DIR14WR 83
#define R_PARISC_DIR14DR 84
#define R_PARISC_DIR16F 85
#define R_PARISC_DIR16WF 86
#define R_PARISC_DIR16DF 87
#define R_PARISC_GPREL64 88
#define R_PARISC_GPREL14WR 91
#define R_PARISC_GPREL14DR 92
#define R_PARISC_GPREL16F 93
#define R_PARISC_GPREL16WF 94
#define R_PARISC_GPREL16DF 95
#define R_PARISC_LTOFF64 96
#define R_PARISC_LTOFF14WR 99
#define R_PARISC_LTOFF14DR 100
#define R_PARISC_LTOFF16F 101
#define R_PARISC_LTOFF16WF 102
#define R_PARISC_LTOFF16DF 103
#define R_PARISC_SECREL64 104
#define R_PARISC_SEGREL64 112
#define R_PARISC_PLTOFF14WR 115
#define R_PARISC_PLTOFF14DR 116
#define R_PARISC_PLTOFF16F 117
#define R_PARISC_PLTOFF16WF 118
#define R_PARISC_PLTOFF16DF 119
#define R_PARISC_LTOFF_FPTR64 120
#define R_PARISC_LTOFF_FPTR14WR 123
#define R_PARISC_LTOFF_FPTR14DR 124
#define R_PARISC_LTOFF_FPTR16F 125
#define R_PARISC_LTOFF_FPTR16WF 126
#define R_PARISC_LTOFF_FPTR16DF 127
#define R_PARISC_LORESERVE 128
#define R_PARISC_COPY 128
#define R_PARISC_IPLT 129
#define R_PARISC_EPLT 130
#define R_PARISC_TPREL32 153
#define R_PARISC_TPREL21L 154
#define R_PARISC_TPREL14R 158
#define R_PARISC_LTOFF_TP21L 162
#define R_PARISC_LTOFF_TP14R 166
#define R_PARISC_LTOFF_TP14F 167
#define R_PARISC_TPREL64 216
#define R_PARISC_TPREL14WR 219
#define R_PARISC_TPREL14DR 220
#define R_PARISC_TPREL16F 221
#define R_PARISC_TPREL16WF 222
#define R_PARISC_TPREL16DF 223
#define R_PARISC_LTOFF_TP64 224
#define R_PARISC_LTOFF_TP14WR 227
#define R_PARISC_LTOFF_TP14DR 228
#define R_PARISC_LTOFF_TP16F 229
#define R_PARISC_LTOFF_TP16WF 230
#define R_PARISC_LTOFF_TP16DF 231
#define R_PARISC_GNU_VTENTRY 232
#define R_PARISC_GNU_VTINHERIT 233
#define R_PARISC_TLS_GD21L 234
#define R_PARISC_TLS_GD14R 235
#define R_PARISC_TLS_GDCALL 236
#define R_PARISC_TLS_LDM21L 237
#define R_PARISC_TLS_LDM14R 238
#define R_PARISC_TLS_LDMCALL 239
#define R_PARISC_TLS_LDO21L 240
#define R_PARISC_TLS_LDO14R 241
#define R_PARISC_TLS_DTPMOD32 242
#define R_PARISC_TLS_DTPMOD64 243
#define R_PARISC_TLS_DTPOFF32 244
#define R_PARISC_TLS_DTPOFF64 245
#define R_PARISC_TLS_LE21L R_PARISC_TPREL21L
#define R_PARISC_TLS_LE14R R_PARISC_TPREL14R
#define R_PARISC_TLS_IE21L R_PARISC_LTOFF_TP21L
#define R_PARISC_TLS_IE14R R_PARISC_LTOFF_TP14R
#define R_PARISC_TLS_TPREL32 R_PARISC_TPREL32
#define R_PARISC_TLS_TPREL64 R_PARISC_TPREL64
#define R_PARISC_HIRESERVE 255
#define PT_HP_TLS (PT_LOOS + 0x0)
#define PT_HP_CORE_NONE (PT_LOOS + 0x1)
#define PT_HP_CORE_VERSION (PT_LOOS + 0x2)
#define PT_HP_CORE_KERNEL (PT_LOOS + 0x3)
#define PT_HP_CORE_COMM (PT_LOOS + 0x4)
#define PT_HP_CORE_PROC (PT_LOOS + 0x5)
#define PT_HP_CORE_LOADABLE (PT_LOOS + 0x6)
#define PT_HP_CORE_STACK (PT_LOOS + 0x7)
#define PT_HP_CORE_SHM (PT_LOOS + 0x8)
#define PT_HP_CORE_MMF (PT_LOOS + 0x9)
#define PT_HP_PARALLEL (PT_LOOS + 0x10)
#define PT_HP_FASTBIND (PT_LOOS + 0x11)
#define PT_HP_OPT_ANNOT (PT_LOOS + 0x12)
#define PT_HP_HSL_ANNOT (PT_LOOS + 0x13)
#define PT_HP_STACK (PT_LOOS + 0x14)
#define PT_PARISC_ARCHEXT 0x70000000
#define PT_PARISC_UNWIND 0x70000001
#define PF_PARISC_SBP 0x08000000
#define PF_HP_PAGE_SIZE 0x00100000
#define PF_HP_FAR_SHARED 0x00200000
#define PF_HP_NEAR_SHARED 0x00400000
#define PF_HP_CODE 0x01000000
#define PF_HP_MODIFY 0x02000000
#define PF_HP_LAZYSWAP 0x04000000
#define PF_HP_SBP 0x08000000
#define EF_ALPHA_32BIT 1
#define EF_ALPHA_CANRELAX 2
#define SHT_ALPHA_DEBUG 0x70000001
#define SHT_ALPHA_REGINFO 0x70000002
#define SHF_ALPHA_GPREL 0x10000000
#define STO_ALPHA_NOPV 0x80
#define STO_ALPHA_STD_GPLOAD 0x88
#define R_ALPHA_NONE 0
#define R_ALPHA_REFLONG 1
#define R_ALPHA_REFQUAD 2
#define R_ALPHA_GPREL32 3
#define R_ALPHA_LITERAL 4
#define R_ALPHA_LITUSE 5
#define R_ALPHA_GPDISP 6
#define R_ALPHA_BRADDR 7
#define R_ALPHA_HINT 8
#define R_ALPHA_SREL16 9
#define R_ALPHA_SREL32 10
#define R_ALPHA_SREL64 11
#define R_ALPHA_GPRELHIGH 17
#define R_ALPHA_GPRELLOW 18
#define R_ALPHA_GPREL16 19
#define R_ALPHA_COPY 24
#define R_ALPHA_GLOB_DAT 25
#define R_ALPHA_JMP_SLOT 26
#define R_ALPHA_RELATIVE 27
#define R_ALPHA_TLS_GD_HI 28
#define R_ALPHA_TLSGD 29
#define R_ALPHA_TLS_LDM 30
#define R_ALPHA_DTPMOD64 31
#define R_ALPHA_GOTDTPREL 32
#define R_ALPHA_DTPREL64 33
#define R_ALPHA_DTPRELHI 34
#define R_ALPHA_DTPRELLO 35
#define R_ALPHA_DTPREL16 36
#define R_ALPHA_GOTTPREL 37
#define R_ALPHA_TPREL64 38
#define R_ALPHA_TPRELHI 39
#define R_ALPHA_TPRELLO 40
#define R_ALPHA_TPREL16 41
#define R_ALPHA_NUM 46
#define LITUSE_ALPHA_ADDR 0
#define LITUSE_ALPHA_BASE 1
#define LITUSE_ALPHA_BYTOFF 2
#define LITUSE_ALPHA_JSR 3
#define LITUSE_ALPHA_TLS_GD 4
#define LITUSE_ALPHA_TLS_LDM 5
#define DT_ALPHA_PLTRO (DT_LOPROC + 0)
#define DT_ALPHA_NUM 1
#define EF_PPC_EMB 0x80000000
#define EF_PPC_RELOCATABLE 0x00010000
#define EF_PPC_RELOCATABLE_LIB 0x00008000
#define R_PPC_NONE 0
#define R_PPC_ADDR32 1
#define R_PPC_ADDR24 2
#define R_PPC_ADDR16 3
#define R_PPC_ADDR16_LO 4
#define R_PPC_ADDR16_HI 5
#define R_PPC_ADDR16_HA 6
#define R_PPC_ADDR14 7
#define R_PPC_ADDR14_BRTAKEN 8
#define R_PPC_ADDR14_BRNTAKEN 9
#define R_PPC_REL24 10
#define R_PPC_REL14 11
#define R_PPC_REL14_BRTAKEN 12
#define R_PPC_REL14_BRNTAKEN 13
#define R_PPC_GOT16 14
#define R_PPC_GOT16_LO 15
#define R_PPC_GOT16_HI 16
#define R_PPC_GOT16_HA 17
#define R_PPC_PLTREL24 18
#define R_PPC_COPY 19
#define R_PPC_GLOB_DAT 20
#define R_PPC_JMP_SLOT 21
#define R_PPC_RELATIVE 22
#define R_PPC_LOCAL24PC 23
#define R_PPC_UADDR32 24
#define R_PPC_UADDR16 25
#define R_PPC_REL32 26
#define R_PPC_PLT32 27
#define R_PPC_PLTREL32 28
#define R_PPC_PLT16_LO 29
#define R_PPC_PLT16_HI 30
#define R_PPC_PLT16_HA 31
#define R_PPC_SDAREL16 32
#define R_PPC_SECTOFF 33
#define R_PPC_SECTOFF_LO 34
#define R_PPC_SECTOFF_HI 35
#define R_PPC_SECTOFF_HA 36
#define R_PPC_TLS 67
#define R_PPC_DTPMOD32 68
#define R_PPC_TPREL16 69
#define R_PPC_TPREL16_LO 70
#define R_PPC_TPREL16_HI 71
#define R_PPC_TPREL16_HA 72
#define R_PPC_TPREL32 73
#define R_PPC_DTPREL16 74
#define R_PPC_DTPREL16_LO 75
#define R_PPC_DTPREL16_HI 76
#define R_PPC_DTPREL16_HA 77
#define R_PPC_DTPREL32 78
#define R_PPC_GOT_TLSGD16 79
#define R_PPC_GOT_TLSGD16_LO 80
#define R_PPC_GOT_TLSGD16_HI 81
#define R_PPC_GOT_TLSGD16_HA 82
#define R_PPC_GOT_TLSLD16 83
#define R_PPC_GOT_TLSLD16_LO 84
#define R_PPC_GOT_TLSLD16_HI 85
#define R_PPC_GOT_TLSLD16_HA 86
#define R_PPC_GOT_TPREL16 87
#define R_PPC_GOT_TPREL16_LO 88
#define R_PPC_GOT_TPREL16_HI 89
#define R_PPC_GOT_TPREL16_HA 90
#define R_PPC_GOT_DTPREL16 91
#define R_PPC_GOT_DTPREL16_LO 92
#define R_PPC_GOT_DTPREL16_HI 93
#define R_PPC_GOT_DTPREL16_HA 94
#define R_PPC_TLSGD 95
#define R_PPC_TLSLD 96
#define R_PPC_EMB_NADDR32 101
#define R_PPC_EMB_NADDR16 102
#define R_PPC_EMB_NADDR16_LO 103
#define R_PPC_EMB_NADDR16_HI 104
#define R_PPC_EMB_NADDR16_HA 105
#define R_PPC_EMB_SDAI16 106
#define R_PPC_EMB_SDA2I16 107
#define R_PPC_EMB_SDA2REL 108
#define R_PPC_EMB_SDA21 109
#define R_PPC_EMB_MRKREF 110
#define R_PPC_EMB_RELSEC16 111
#define R_PPC_EMB_RELST_LO 112
#define R_PPC_EMB_RELST_HI 113
#define R_PPC_EMB_RELST_HA 114
#define R_PPC_EMB_BIT_FLD 115
#define R_PPC_EMB_RELSDA 116
#define R_PPC_DIAB_SDA21_LO 180
#define R_PPC_DIAB_SDA21_HI 181
#define R_PPC_DIAB_SDA21_HA 182
#define R_PPC_DIAB_RELSDA_LO 183
#define R_PPC_DIAB_RELSDA_HI 184
#define R_PPC_DIAB_RELSDA_HA 185
#define R_PPC_IRELATIVE 248
#define R_PPC_REL16 249
#define R_PPC_REL16_LO 250
#define R_PPC_REL16_HI 251
#define R_PPC_REL16_HA 252
#define R_PPC_TOC16 255
#define DT_PPC_GOT (DT_LOPROC + 0)
#define DT_PPC_OPT (DT_LOPROC + 1)
#define DT_PPC_NUM 2
#define PPC_OPT_TLS 1
#define R_PPC64_NONE R_PPC_NONE
#define R_PPC64_ADDR32 R_PPC_ADDR32
#define R_PPC64_ADDR24 R_PPC_ADDR24
#define R_PPC64_ADDR16 R_PPC_ADDR16
#define R_PPC64_ADDR16_LO R_PPC_ADDR16_LO
#define R_PPC64_ADDR16_HI R_PPC_ADDR16_HI
#define R_PPC64_ADDR16_HA R_PPC_ADDR16_HA
#define R_PPC64_ADDR14 R_PPC_ADDR14
#define R_PPC64_ADDR14_BRTAKEN R_PPC_ADDR14_BRTAKEN
#define R_PPC64_ADDR14_BRNTAKEN R_PPC_ADDR14_BRNTAKEN
#define R_PPC64_REL24 R_PPC_REL24
#define R_PPC64_REL14 R_PPC_REL14
#define R_PPC64_REL14_BRTAKEN R_PPC_REL14_BRTAKEN
#define R_PPC64_REL14_BRNTAKEN R_PPC_REL14_BRNTAKEN
#define R_PPC64_GOT16 R_PPC_GOT16
#define R_PPC64_GOT16_LO R_PPC_GOT16_LO
#define R_PPC64_GOT16_HI R_PPC_GOT16_HI
#define R_PPC64_GOT16_HA R_PPC_GOT16_HA
#define R_PPC64_COPY R_PPC_COPY
#define R_PPC64_GLOB_DAT R_PPC_GLOB_DAT
#define R_PPC64_JMP_SLOT R_PPC_JMP_SLOT
#define R_PPC64_RELATIVE R_PPC_RELATIVE
#define R_PPC64_UADDR32 R_PPC_UADDR32
#define R_PPC64_UADDR16 R_PPC_UADDR16
#define R_PPC64_REL32 R_PPC_REL32
#define R_PPC64_PLT32 R_PPC_PLT32
#define R_PPC64_PLTREL32 R_PPC_PLTREL32
#define R_PPC64_PLT16_LO R_PPC_PLT16_LO
#define R_PPC64_PLT16_HI R_PPC_PLT16_HI
#define R_PPC64_PLT16_HA R_PPC_PLT16_HA
#define R_PPC64_SECTOFF R_PPC_SECTOFF
#define R_PPC64_SECTOFF_LO R_PPC_SECTOFF_LO
#define R_PPC64_SECTOFF_HI R_PPC_SECTOFF_HI
#define R_PPC64_SECTOFF_HA R_PPC_SECTOFF_HA
#define R_PPC64_ADDR30 37
#define R_PPC64_ADDR64 38
#define R_PPC64_ADDR16_HIGHER 39
#define R_PPC64_ADDR16_HIGHERA 40
#define R_PPC64_ADDR16_HIGHEST 41
#define R_PPC64_ADDR16_HIGHESTA 42
#define R_PPC64_UADDR64 43
#define R_PPC64_REL64 44
#define R_PPC64_PLT64 45
#define R_PPC64_PLTREL64 46
#define R_PPC64_TOC16 47
#define R_PPC64_TOC16_LO 48
#define R_PPC64_TOC16_HI 49
#define R_PPC64_TOC16_HA 50
#define R_PPC64_TOC 51
#define R_PPC64_PLTGOT16 52
#define R_PPC64_PLTGOT16_LO 53
#define R_PPC64_PLTGOT16_HI 54
#define R_PPC64_PLTGOT16_HA 55
#define R_PPC64_ADDR16_DS 56
#define R_PPC64_ADDR16_LO_DS 57
#define R_PPC64_GOT16_DS 58
#define R_PPC64_GOT16_LO_DS 59
#define R_PPC64_PLT16_LO_DS 60
#define R_PPC64_SECTOFF_DS 61
#define R_PPC64_SECTOFF_LO_DS 62
#define R_PPC64_TOC16_DS 63
#define R_PPC64_TOC16_LO_DS 64
#define R_PPC64_PLTGOT16_DS 65
#define R_PPC64_PLTGOT16_LO_DS 66
#define R_PPC64_TLS 67
#define R_PPC64_DTPMOD64 68
#define R_PPC64_TPREL16 69
#define R_PPC64_TPREL16_LO 70
#define R_PPC64_TPREL16_HI 71
#define R_PPC64_TPREL16_HA 72
#define R_PPC64_TPREL64 73
#define R_PPC64_DTPREL16 74
#define R_PPC64_DTPREL16_LO 75
#define R_PPC64_DTPREL16_HI 76
#define R_PPC64_DTPREL16_HA 77
#define R_PPC64_DTPREL64 78
#define R_PPC64_GOT_TLSGD16 79
#define R_PPC64_GOT_TLSGD16_LO 80
#define R_PPC64_GOT_TLSGD16_HI 81
#define R_PPC64_GOT_TLSGD16_HA 82
#define R_PPC64_GOT_TLSLD16 83
#define R_PPC64_GOT_TLSLD16_LO 84
#define R_PPC64_GOT_TLSLD16_HI 85
#define R_PPC64_GOT_TLSLD16_HA 86
#define R_PPC64_GOT_TPREL16_DS 87
#define R_PPC64_GOT_TPREL16_LO_DS 88
#define R_PPC64_GOT_TPREL16_HI 89
#define R_PPC64_GOT_TPREL16_HA 90
#define R_PPC64_GOT_DTPREL16_DS 91
#define R_PPC64_GOT_DTPREL16_LO_DS 92
#define R_PPC64_GOT_DTPREL16_HI 93
#define R_PPC64_GOT_DTPREL16_HA 94
#define R_PPC64_TPREL16_DS 95
#define R_PPC64_TPREL16_LO_DS 96
#define R_PPC64_TPREL16_HIGHER 97
#define R_PPC64_TPREL16_HIGHERA 98
#define R_PPC64_TPREL16_HIGHEST 99
#define R_PPC64_TPREL16_HIGHESTA 100
#define R_PPC64_DTPREL16_DS 101
#define R_PPC64_DTPREL16_LO_DS 102
#define R_PPC64_DTPREL16_HIGHER 103
#define R_PPC64_DTPREL16_HIGHERA 104
#define R_PPC64_DTPREL16_HIGHEST 105
#define R_PPC64_DTPREL16_HIGHESTA 106
#define R_PPC64_TLSGD 107
#define R_PPC64_TLSLD 108
#define R_PPC64_TOCSAVE 109
#define R_PPC64_ADDR16_HIGH 110
#define R_PPC64_ADDR16_HIGHA 111
#define R_PPC64_TPREL16_HIGH 112
#define R_PPC64_TPREL16_HIGHA 113
#define R_PPC64_DTPREL16_HIGH 114
#define R_PPC64_DTPREL16_HIGHA 115
#define R_PPC64_JMP_IREL 247
#define R_PPC64_IRELATIVE 248
#define R_PPC64_REL16 249
#define R_PPC64_REL16_LO 250
#define R_PPC64_REL16_HI 251
#define R_PPC64_REL16_HA 252
#define EF_PPC64_ABI 3
#define DT_PPC64_GLINK (DT_LOPROC + 0)
#define DT_PPC64_OPD (DT_LOPROC + 1)
#define DT_PPC64_OPDSZ (DT_LOPROC + 2)
#define DT_PPC64_OPT (DT_LOPROC + 3)
#define DT_PPC64_NUM 4
#define PPC64_OPT_TLS 1
#define PPC64_OPT_MULTI_TOC 2
#define STO_PPC64_LOCAL_BIT 5
#define STO_PPC64_LOCAL_MASK 0xe0
#define PPC64_LOCAL_ENTRY_OFFSET(x) (1 << (((x)&0xe0)>>5) & 0xfc)
#define EF_ARM_RELEXEC 0x01
#define EF_ARM_HASENTRY 0x02
#define EF_ARM_INTERWORK 0x04
#define EF_ARM_APCS_26 0x08
#define EF_ARM_APCS_FLOAT 0x10
#define EF_ARM_PIC 0x20
#define EF_ARM_ALIGN8 0x40
#define EF_ARM_NEW_ABI 0x80
#define EF_ARM_OLD_ABI 0x100
#define EF_ARM_SOFT_FLOAT 0x200
#define EF_ARM_VFP_FLOAT 0x400
#define EF_ARM_MAVERICK_FLOAT 0x800
#define EF_ARM_ABI_FLOAT_SOFT 0x200
#define EF_ARM_ABI_FLOAT_HARD 0x400
#define EF_ARM_SYMSARESORTED 0x04
#define EF_ARM_DYNSYMSUSESEGIDX 0x08
#define EF_ARM_MAPSYMSFIRST 0x10
#define EF_ARM_EABIMASK 0XFF000000
#define EF_ARM_BE8 0x00800000
#define EF_ARM_LE8 0x00400000
#define EF_ARM_EABI_VERSION(flags) ((flags) & EF_ARM_EABIMASK)
#define EF_ARM_EABI_UNKNOWN 0x00000000
#define EF_ARM_EABI_VER1 0x01000000
#define EF_ARM_EABI_VER2 0x02000000
#define EF_ARM_EABI_VER3 0x03000000
#define EF_ARM_EABI_VER4 0x04000000
#define EF_ARM_EABI_VER5 0x05000000
#define STT_ARM_TFUNC STT_LOPROC
#define STT_ARM_16BIT STT_HIPROC
#define SHF_ARM_ENTRYSECT 0x10000000
#define SHF_ARM_COMDEF 0x80000000
#define PF_ARM_SB 0x10000000
#define PF_ARM_PI 0x20000000
#define PF_ARM_ABS 0x40000000
#define PT_ARM_EXIDX (PT_LOPROC + 1)
#define SHT_ARM_EXIDX (SHT_LOPROC + 1)
#define SHT_ARM_PREEMPTMAP (SHT_LOPROC + 2)
#define SHT_ARM_ATTRIBUTES (SHT_LOPROC + 3)
#define R_AARCH64_NONE 0
#define R_AARCH64_P32_ABS32 1
#define R_AARCH64_P32_COPY 180
#define R_AARCH64_P32_GLOB_DAT 181
#define R_AARCH64_P32_JUMP_SLOT 182
#define R_AARCH64_P32_RELATIVE 183
#define R_AARCH64_P32_TLS_DTPMOD 184
#define R_AARCH64_P32_TLS_DTPREL 185
#define R_AARCH64_P32_TLS_TPREL 186
#define R_AARCH64_P32_TLSDESC 187
#define R_AARCH64_P32_IRELATIVE 188
#define R_AARCH64_ABS64 257
#define R_AARCH64_ABS32 258
#define R_AARCH64_ABS16 259
#define R_AARCH64_PREL64 260
#define R_AARCH64_PREL32 261
#define R_AARCH64_PREL16 262
#define R_AARCH64_MOVW_UABS_G0 263
#define R_AARCH64_MOVW_UABS_G0_NC 264
#define R_AARCH64_MOVW_UABS_G1 265
#define R_AARCH64_MOVW_UABS_G1_NC 266
#define R_AARCH64_MOVW_UABS_G2 267
#define R_AARCH64_MOVW_UABS_G2_NC 268
#define R_AARCH64_MOVW_UABS_G3 269
#define R_AARCH64_MOVW_SABS_G0 270
#define R_AARCH64_MOVW_SABS_G1 271
#define R_AARCH64_MOVW_SABS_G2 272
#define R_AARCH64_LD_PREL_LO19 273
#define R_AARCH64_ADR_PREL_LO21 274
#define R_AARCH64_ADR_PREL_PG_HI21 275
#define R_AARCH64_ADR_PREL_PG_HI21_NC 276
#define R_AARCH64_ADD_ABS_LO12_NC 277
#define R_AARCH64_LDST8_ABS_LO12_NC 278
#define R_AARCH64_TSTBR14 279
#define R_AARCH64_CONDBR19 280
#define R_AARCH64_JUMP26 282
#define R_AARCH64_CALL26 283
#define R_AARCH64_LDST16_ABS_LO12_NC 284
#define R_AARCH64_LDST32_ABS_LO12_NC 285
#define R_AARCH64_LDST64_ABS_LO12_NC 286
#define R_AARCH64_MOVW_PREL_G0 287
#define R_AARCH64_MOVW_PREL_G0_NC 288
#define R_AARCH64_MOVW_PREL_G1 289
#define R_AARCH64_MOVW_PREL_G1_NC 290
#define R_AARCH64_MOVW_PREL_G2 291
#define R_AARCH64_MOVW_PREL_G2_NC 292
#define R_AARCH64_MOVW_PREL_G3 293
#define R_AARCH64_LDST128_ABS_LO12_NC 299
#define R_AARCH64_MOVW_GOTOFF_G0 300
#define R_AARCH64_MOVW_GOTOFF_G0_NC 301
#define R_AARCH64_MOVW_GOTOFF_G1 302
#define R_AARCH64_MOVW_GOTOFF_G1_NC 303
#define R_AARCH64_MOVW_GOTOFF_G2 304
#define R_AARCH64_MOVW_GOTOFF_G2_NC 305
#define R_AARCH64_MOVW_GOTOFF_G3 306
#define R_AARCH64_GOTREL64 307
#define R_AARCH64_GOTREL32 308
#define R_AARCH64_GOT_LD_PREL19 309
#define R_AARCH64_LD64_GOTOFF_LO15 310
#define R_AARCH64_ADR_GOT_PAGE 311
#define R_AARCH64_LD64_GOT_LO12_NC 312
#define R_AARCH64_LD64_GOTPAGE_LO15 313
#define R_AARCH64_TLSGD_ADR_PREL21 512
#define R_AARCH64_TLSGD_ADR_PAGE21 513
#define R_AARCH64_TLSGD_ADD_LO12_NC 514
#define R_AARCH64_TLSGD_MOVW_G1 515
#define R_AARCH64_TLSGD_MOVW_G0_NC 516
#define R_AARCH64_TLSLD_ADR_PREL21 517
#define R_AARCH64_TLSLD_ADR_PAGE21 518
#define R_AARCH64_TLSLD_ADD_LO12_NC 519
#define R_AARCH64_TLSLD_MOVW_G1 520
#define R_AARCH64_TLSLD_MOVW_G0_NC 521
#define R_AARCH64_TLSLD_LD_PREL19 522
#define R_AARCH64_TLSLD_MOVW_DTPREL_G2 523
#define R_AARCH64_TLSLD_MOVW_DTPREL_G1 524
#define R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC 525
#define R_AARCH64_TLSLD_MOVW_DTPREL_G0 526
#define R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC 527
#define R_AARCH64_TLSLD_ADD_DTPREL_HI12 528
#define R_AARCH64_TLSLD_ADD_DTPREL_LO12 529
#define R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC 530
#define R_AARCH64_TLSLD_LDST8_DTPREL_LO12 531
#define R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC 532
#define R_AARCH64_TLSLD_LDST16_DTPREL_LO12 533
#define R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC 534
#define R_AARCH64_TLSLD_LDST32_DTPREL_LO12 535
#define R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC 536
#define R_AARCH64_TLSLD_LDST64_DTPREL_LO12 537
#define R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC 538
#define R_AARCH64_TLSIE_MOVW_GOTTPREL_G1 539
#define R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC 540
#define R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21 541
#define R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC 542
#define R_AARCH64_TLSIE_LD_GOTTPREL_PREL19 543
#define R_AARCH64_TLSLE_MOVW_TPREL_G2 544
#define R_AARCH64_TLSLE_MOVW_TPREL_G1 545
#define R_AARCH64_TLSLE_MOVW_TPREL_G1_NC 546
#define R_AARCH64_TLSLE_MOVW_TPREL_G0 547
#define R_AARCH64_TLSLE_MOVW_TPREL_G0_NC 548
#define R_AARCH64_TLSLE_ADD_TPREL_HI12 549
#define R_AARCH64_TLSLE_ADD_TPREL_LO12 550
#define R_AARCH64_TLSLE_ADD_TPREL_LO12_NC 551
#define R_AARCH64_TLSLE_LDST8_TPREL_LO12 552
#define R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC 553
#define R_AARCH64_TLSLE_LDST16_TPREL_LO12 554
#define R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC 555
#define R_AARCH64_TLSLE_LDST32_TPREL_LO12 556
#define R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC 557
#define R_AARCH64_TLSLE_LDST64_TPREL_LO12 558
#define R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC 559
#define R_AARCH64_TLSDESC_LD_PREL19 560
#define R_AARCH64_TLSDESC_ADR_PREL21 561
#define R_AARCH64_TLSDESC_ADR_PAGE21 562
#define R_AARCH64_TLSDESC_LD64_LO12 563
#define R_AARCH64_TLSDESC_ADD_LO12 564
#define R_AARCH64_TLSDESC_OFF_G1 565
#define R_AARCH64_TLSDESC_OFF_G0_NC 566
#define R_AARCH64_TLSDESC_LDR 567
#define R_AARCH64_TLSDESC_ADD 568
#define R_AARCH64_TLSDESC_CALL 569
#define R_AARCH64_TLSLE_LDST128_TPREL_LO12 570
#define R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC 571
#define R_AARCH64_TLSLD_LDST128_DTPREL_LO12 572
#define R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC 573
#define R_AARCH64_COPY 1024
#define R_AARCH64_GLOB_DAT 1025
#define R_AARCH64_JUMP_SLOT 1026
#define R_AARCH64_RELATIVE 1027
#define R_AARCH64_TLS_DTPMOD 1028
#define R_AARCH64_TLS_DTPMOD64 1028
#define R_AARCH64_TLS_DTPREL 1029
#define R_AARCH64_TLS_DTPREL64 1029
#define R_AARCH64_TLS_TPREL 1030
#define R_AARCH64_TLS_TPREL64 1030
#define R_AARCH64_TLSDESC 1031
#define R_ARM_NONE 0
#define R_ARM_PC24 1
#define R_ARM_ABS32 2
#define R_ARM_REL32 3
#define R_ARM_PC13 4
#define R_ARM_ABS16 5
#define R_ARM_ABS12 6
#define R_ARM_THM_ABS5 7
#define R_ARM_ABS8 8
#define R_ARM_SBREL32 9
#define R_ARM_THM_PC22 10
#define R_ARM_THM_PC8 11
#define R_ARM_AMP_VCALL9 12
#define R_ARM_TLS_DESC 13
#define R_ARM_THM_SWI8 14
#define R_ARM_XPC25 15
#define R_ARM_THM_XPC22 16
#define R_ARM_TLS_DTPMOD32 17
#define R_ARM_TLS_DTPOFF32 18
#define R_ARM_TLS_TPOFF32 19
#define R_ARM_COPY 20
#define R_ARM_GLOB_DAT 21
#define R_ARM_JUMP_SLOT 22
#define R_ARM_RELATIVE 23
#define R_ARM_GOTOFF 24
#define R_ARM_GOTPC 25
#define R_ARM_GOT32 26
#define R_ARM_PLT32 27
#define R_ARM_CALL 28
#define R_ARM_JUMP24 29
#define R_ARM_THM_JUMP24 30
#define R_ARM_BASE_ABS 31
#define R_ARM_ALU_PCREL_7_0 32
#define R_ARM_ALU_PCREL_15_8 33
#define R_ARM_ALU_PCREL_23_15 34
#define R_ARM_LDR_SBREL_11_0 35
#define R_ARM_ALU_SBREL_19_12 36
#define R_ARM_ALU_SBREL_27_20 37
#define R_ARM_TARGET1 38
#define R_ARM_SBREL31 39
#define R_ARM_V4BX 40
#define R_ARM_TARGET2 41
#define R_ARM_PREL31 42
#define R_ARM_MOVW_ABS_NC 43
#define R_ARM_MOVT_ABS 44
#define R_ARM_MOVW_PREL_NC 45
#define R_ARM_MOVT_PREL 46
#define R_ARM_THM_MOVW_ABS_NC 47
#define R_ARM_THM_MOVT_ABS 48
#define R_ARM_THM_MOVW_PREL_NC 49
#define R_ARM_THM_MOVT_PREL 50
#define R_ARM_THM_JUMP19 51
#define R_ARM_THM_JUMP6 52
#define R_ARM_THM_ALU_PREL_11_0 53
#define R_ARM_THM_PC12 54
#define R_ARM_ABS32_NOI 55
#define R_ARM_REL32_NOI 56
#define R_ARM_ALU_PC_G0_NC 57
#define R_ARM_ALU_PC_G0 58
#define R_ARM_ALU_PC_G1_NC 59
#define R_ARM_ALU_PC_G1 60
#define R_ARM_ALU_PC_G2 61
#define R_ARM_LDR_PC_G1 62
#define R_ARM_LDR_PC_G2 63
#define R_ARM_LDRS_PC_G0 64
#define R_ARM_LDRS_PC_G1 65
#define R_ARM_LDRS_PC_G2 66
#define R_ARM_LDC_PC_G0 67
#define R_ARM_LDC_PC_G1 68
#define R_ARM_LDC_PC_G2 69
#define R_ARM_ALU_SB_G0_NC 70
#define R_ARM_ALU_SB_G0 71
#define R_ARM_ALU_SB_G1_NC 72
#define R_ARM_ALU_SB_G1 73
#define R_ARM_ALU_SB_G2 74
#define R_ARM_LDR_SB_G0 75
#define R_ARM_LDR_SB_G1 76
#define R_ARM_LDR_SB_G2 77
#define R_ARM_LDRS_SB_G0 78
#define R_ARM_LDRS_SB_G1 79
#define R_ARM_LDRS_SB_G2 80
#define R_ARM_LDC_SB_G0 81
#define R_ARM_LDC_SB_G1 82
#define R_ARM_LDC_SB_G2 83
#define R_ARM_MOVW_BREL_NC 84
#define R_ARM_MOVT_BREL 85
#define R_ARM_MOVW_BREL 86
#define R_ARM_THM_MOVW_BREL_NC 87
#define R_ARM_THM_MOVT_BREL 88
#define R_ARM_THM_MOVW_BREL 89
#define R_ARM_TLS_GOTDESC 90
#define R_ARM_TLS_CALL 91
#define R_ARM_TLS_DESCSEQ 92
#define R_ARM_THM_TLS_CALL 93
#define R_ARM_PLT32_ABS 94
#define R_ARM_GOT_ABS 95
#define R_ARM_GOT_PREL 96
#define R_ARM_GOT_BREL12 97
#define R_ARM_GOTOFF12 98
#define R_ARM_GOTRELAX 99
#define R_ARM_GNU_VTENTRY 100
#define R_ARM_GNU_VTINHERIT 101
#define R_ARM_THM_PC11 102
#define R_ARM_THM_PC9 103
#define R_ARM_TLS_GD32 104
#define R_ARM_TLS_LDM32 105
#define R_ARM_TLS_LDO32 106
#define R_ARM_TLS_IE32 107
#define R_ARM_TLS_LE32 108
#define R_ARM_TLS_LDO12 109
#define R_ARM_TLS_LE12 110
#define R_ARM_TLS_IE12GP 111
#define R_ARM_ME_TOO 128
#define R_ARM_THM_TLS_DESCSEQ 129
#define R_ARM_THM_TLS_DESCSEQ16 129
#define R_ARM_THM_TLS_DESCSEQ32 130
#define R_ARM_THM_GOT_BREL12 131
#define R_ARM_IRELATIVE 160
#define R_ARM_RXPC25 249
#define R_ARM_RSBREL32 250
#define R_ARM_THM_RPC22 251
#define R_ARM_RREL32 252
#define R_ARM_RABS22 253
#define R_ARM_RPC24 254
#define R_ARM_RBASE 255
#define R_ARM_NUM 256
#define EF_IA_64_MASKOS 0x0000000f
#define EF_IA_64_ABI64 0x00000010
#define EF_IA_64_ARCH 0xff000000
#define PT_IA_64_ARCHEXT (PT_LOPROC + 0)
#define PT_IA_64_UNWIND (PT_LOPROC + 1)
#define PT_IA_64_HP_OPT_ANOT (PT_LOOS + 0x12)
#define PT_IA_64_HP_HSL_ANOT (PT_LOOS + 0x13)
#define PT_IA_64_HP_STACK (PT_LOOS + 0x14)
#define PF_IA_64_NORECOV 0x80000000
#define SHT_IA_64_EXT (SHT_LOPROC + 0)
#define SHT_IA_64_UNWIND (SHT_LOPROC + 1)
#define SHF_IA_64_SHORT 0x10000000
#define SHF_IA_64_NORECOV 0x20000000
#define DT_IA_64_PLT_RESERVE (DT_LOPROC + 0)
#define DT_IA_64_NUM 1
#define R_IA64_NONE 0x00
#define R_IA64_IMM14 0x21
#define R_IA64_IMM22 0x22
#define R_IA64_IMM64 0x23
#define R_IA64_DIR32MSB 0x24
#define R_IA64_DIR32LSB 0x25
#define R_IA64_DIR64MSB 0x26
#define R_IA64_DIR64LSB 0x27
#define R_IA64_GPREL22 0x2a
#define R_IA64_GPREL64I 0x2b
#define R_IA64_GPREL32MSB 0x2c
#define R_IA64_GPREL32LSB 0x2d
#define R_IA64_GPREL64MSB 0x2e
#define R_IA64_GPREL64LSB 0x2f
#define R_IA64_LTOFF22 0x32
#define R_IA64_LTOFF64I 0x33
#define R_IA64_PLTOFF22 0x3a
#define R_IA64_PLTOFF64I 0x3b
#define R_IA64_PLTOFF64MSB 0x3e
#define R_IA64_PLTOFF64LSB 0x3f
#define R_IA64_FPTR64I 0x43
#define R_IA64_FPTR32MSB 0x44
#define R_IA64_FPTR32LSB 0x45
#define R_IA64_FPTR64MSB 0x46
#define R_IA64_FPTR64LSB 0x47
#define R_IA64_PCREL60B 0x48
#define R_IA64_PCREL21B 0x49
#define R_IA64_PCREL21M 0x4a
#define R_IA64_PCREL21F 0x4b
#define R_IA64_PCREL32MSB 0x4c
#define R_IA64_PCREL32LSB 0x4d
#define R_IA64_PCREL64MSB 0x4e
#define R_IA64_PCREL64LSB 0x4f
#define R_IA64_LTOFF_FPTR22 0x52
#define R_IA64_LTOFF_FPTR64I 0x53
#define R_IA64_LTOFF_FPTR32MSB 0x54
#define R_IA64_LTOFF_FPTR32LSB 0x55
#define R_IA64_LTOFF_FPTR64MSB 0x56
#define R_IA64_LTOFF_FPTR64LSB 0x57
#define R_IA64_SEGREL32MSB 0x5c
#define R_IA64_SEGREL32LSB 0x5d
#define R_IA64_SEGREL64MSB 0x5e
#define R_IA64_SEGREL64LSB 0x5f
#define R_IA64_SECREL32MSB 0x64
#define R_IA64_SECREL32LSB 0x65
#define R_IA64_SECREL64MSB 0x66
#define R_IA64_SECREL64LSB 0x67
#define R_IA64_REL32MSB 0x6c
#define R_IA64_REL32LSB 0x6d
#define R_IA64_REL64MSB 0x6e
#define R_IA64_REL64LSB 0x6f
#define R_IA64_LTV32MSB 0x74
#define R_IA64_LTV32LSB 0x75
#define R_IA64_LTV64MSB 0x76
#define R_IA64_LTV64LSB 0x77
#define R_IA64_PCREL21BI 0x79
#define R_IA64_PCREL22 0x7a
#define R_IA64_PCREL64I 0x7b
#define R_IA64_IPLTMSB 0x80
#define R_IA64_IPLTLSB 0x81
#define R_IA64_COPY 0x84
#define R_IA64_SUB 0x85
#define R_IA64_LTOFF22X 0x86
#define R_IA64_LDXMOV 0x87
#define R_IA64_TPREL14 0x91
#define R_IA64_TPREL22 0x92
#define R_IA64_TPREL64I 0x93
#define R_IA64_TPREL64MSB 0x96
#define R_IA64_TPREL64LSB 0x97
#define R_IA64_LTOFF_TPREL22 0x9a
#define R_IA64_DTPMOD64MSB 0xa6
#define R_IA64_DTPMOD64LSB 0xa7
#define R_IA64_LTOFF_DTPMOD22 0xaa
#define R_IA64_DTPREL14 0xb1
#define R_IA64_DTPREL22 0xb2
#define R_IA64_DTPREL64I 0xb3
#define R_IA64_DTPREL32MSB 0xb4
#define R_IA64_DTPREL32LSB 0xb5
#define R_IA64_DTPREL64MSB 0xb6
#define R_IA64_DTPREL64LSB 0xb7
#define R_IA64_LTOFF_DTPREL22 0xba
#define EF_SH_MACH_MASK 0x1f
#define EF_SH_UNKNOWN 0x0
#define EF_SH1 0x1
#define EF_SH2 0x2
#define EF_SH3 0x3
#define EF_SH_DSP 0x4
#define EF_SH3_DSP 0x5
#define EF_SH4AL_DSP 0x6
#define EF_SH3E 0x8
#define EF_SH4 0x9
#define EF_SH2E 0xb
#define EF_SH4A 0xc
#define EF_SH2A 0xd
#define EF_SH4_NOFPU 0x10
#define EF_SH4A_NOFPU 0x11
#define EF_SH4_NOMMU_NOFPU 0x12
#define EF_SH2A_NOFPU 0x13
#define EF_SH3_NOMMU 0x14
#define EF_SH2A_SH4_NOFPU 0x15
#define EF_SH2A_SH3_NOFPU 0x16
#define EF_SH2A_SH4 0x17
#define EF_SH2A_SH3E 0x18
#define R_SH_NONE 0
#define R_SH_DIR32 1
#define R_SH_REL32 2
#define R_SH_DIR8WPN 3
#define R_SH_IND12W 4
#define R_SH_DIR8WPL 5
#define R_SH_DIR8WPZ 6
#define R_SH_DIR8BP 7
#define R_SH_DIR8W 8
#define R_SH_DIR8L 9
#define R_SH_SWITCH16 25
#define R_SH_SWITCH32 26
#define R_SH_USES 27
#define R_SH_COUNT 28
#define R_SH_ALIGN 29
#define R_SH_CODE 30
#define R_SH_DATA 31
#define R_SH_LABEL 32
#define R_SH_SWITCH8 33
#define R_SH_GNU_VTINHERIT 34
#define R_SH_GNU_VTENTRY 35
#define R_SH_TLS_GD_32 144
#define R_SH_TLS_LD_32 145
#define R_SH_TLS_LDO_32 146
#define R_SH_TLS_IE_32 147
#define R_SH_TLS_LE_32 148
#define R_SH_TLS_DTPMOD32 149
#define R_SH_TLS_DTPOFF32 150
#define R_SH_TLS_TPOFF32 151
#define R_SH_GOT32 160
#define R_SH_PLT32 161
#define R_SH_COPY 162
#define R_SH_GLOB_DAT 163
#define R_SH_JMP_SLOT 164
#define R_SH_RELATIVE 165
#define R_SH_GOTOFF 166
#define R_SH_GOTPC 167
#define R_SH_GOT20 201
#define R_SH_GOTOFF20 202
#define R_SH_GOTFUNCDESC 203
#define R_SH_GOTFUNCDEST20 204
#define R_SH_GOTOFFFUNCDESC 205
#define R_SH_GOTOFFFUNCDEST20 206
#define R_SH_FUNCDESC 207
#define R_SH_FUNCDESC_VALUE 208
#define R_SH_NUM 256
#define R_390_NONE 0
#define R_390_8 1
#define R_390_12 2
#define R_390_16 3
#define R_390_32 4
#define R_390_PC32 5
#define R_390_GOT12 6
#define R_390_GOT32 7
#define R_390_PLT32 8
#define R_390_COPY 9
#define R_390_GLOB_DAT 10
#define R_390_JMP_SLOT 11
#define R_390_RELATIVE 12
#define R_390_GOTOFF32 13
#define R_390_GOTPC 14
#define R_390_GOT16 15
#define R_390_PC16 16
#define R_390_PC16DBL 17
#define R_390_PLT16DBL 18
#define R_390_PC32DBL 19
#define R_390_PLT32DBL 20
#define R_390_GOTPCDBL 21
#define R_390_64 22
#define R_390_PC64 23
#define R_390_GOT64 24
#define R_390_PLT64 25
#define R_390_GOTENT 26
#define R_390_GOTOFF16 27
#define R_390_GOTOFF64 28
#define R_390_GOTPLT12 29
#define R_390_GOTPLT16 30
#define R_390_GOTPLT32 31
#define R_390_GOTPLT64 32
#define R_390_GOTPLTENT 33
#define R_390_PLTOFF16 34
#define R_390_PLTOFF32 35
#define R_390_PLTOFF64 36
#define R_390_TLS_LOAD 37
#define R_390_TLS_GDCALL 38
#define R_390_TLS_LDCALL 39
#define R_390_TLS_GD32 40
#define R_390_TLS_GD64 41
#define R_390_TLS_GOTIE12 42
#define R_390_TLS_GOTIE32 43
#define R_390_TLS_GOTIE64 44
#define R_390_TLS_LDM32 45
#define R_390_TLS_LDM64 46
#define R_390_TLS_IE32 47
#define R_390_TLS_IE64 48
#define R_390_TLS_IEENT 49
#define R_390_TLS_LE32 50
#define R_390_TLS_LE64 51
#define R_390_TLS_LDO32 52
#define R_390_TLS_LDO64 53
#define R_390_TLS_DTPMOD 54
#define R_390_TLS_DTPOFF 55
#define R_390_TLS_TPOFF 56
#define R_390_20 57
#define R_390_GOT20 58
#define R_390_GOTPLT20 59
#define R_390_TLS_GOTIE20 60
#define R_390_NUM 61
#define R_CRIS_NONE 0
#define R_CRIS_8 1
#define R_CRIS_16 2
#define R_CRIS_32 3
#define R_CRIS_8_PCREL 4
#define R_CRIS_16_PCREL 5
#define R_CRIS_32_PCREL 6
#define R_CRIS_GNU_VTINHERIT 7
#define R_CRIS_GNU_VTENTRY 8
#define R_CRIS_COPY 9
#define R_CRIS_GLOB_DAT 10
#define R_CRIS_JUMP_SLOT 11
#define R_CRIS_RELATIVE 12
#define R_CRIS_16_GOT 13
#define R_CRIS_32_GOT 14
#define R_CRIS_16_GOTPLT 15
#define R_CRIS_32_GOTPLT 16
#define R_CRIS_32_GOTREL 17
#define R_CRIS_32_PLT_GOTREL 18
#define R_CRIS_32_PLT_PCREL 19
#define R_CRIS_NUM 20
#define R_X86_64_NONE 0
#define R_X86_64_64 1
#define R_X86_64_PC32 2
#define R_X86_64_GOT32 3
#define R_X86_64_PLT32 4
#define R_X86_64_COPY 5
#define R_X86_64_GLOB_DAT 6
#define R_X86_64_JUMP_SLOT 7
#define R_X86_64_RELATIVE 8
#define R_X86_64_GOTPCREL 9
#define R_X86_64_32 10
#define R_X86_64_32S 11
#define R_X86_64_16 12
#define R_X86_64_PC16 13
#define R_X86_64_8 14
#define R_X86_64_PC8 15
#define R_X86_64_DTPMOD64 16
#define R_X86_64_DTPOFF64 17
#define R_X86_64_TPOFF64 18
#define R_X86_64_TLSGD 19
#define R_X86_64_TLSLD 20
#define R_X86_64_DTPOFF32 21
#define R_X86_64_GOTTPOFF 22
#define R_X86_64_TPOFF32 23
#define R_X86_64_PC64 24
#define R_X86_64_GOTOFF64 25
#define R_X86_64_GOTPC32 26
#define R_X86_64_GOT64 27
#define R_X86_64_GOTPCREL64 28
#define R_X86_64_GOTPC64 29
#define R_X86_64_GOTPLT64 30
#define R_X86_64_PLTOFF64 31
#define R_X86_64_SIZE32 32
#define R_X86_64_SIZE64 33
#define R_X86_64_GOTPC32_TLSDESC 34
#define R_X86_64_TLSDESC_CALL 35
#define R_X86_64_TLSDESC 36
#define R_X86_64_IRELATIVE 37
#define R_X86_64_RELATIVE64 38
#define R_X86_64_GOTPCRELX 41
#define R_X86_64_REX_GOTPCRELX 42
#define R_X86_64_NUM 43
#define R_MN10300_NONE 0
#define R_MN10300_32 1
#define R_MN10300_16 2
#define R_MN10300_8 3
#define R_MN10300_PCREL32 4
#define R_MN10300_PCREL16 5
#define R_MN10300_PCREL8 6
#define R_MN10300_GNU_VTINHERIT 7
#define R_MN10300_GNU_VTENTRY 8
#define R_MN10300_24 9
#define R_MN10300_GOTPC32 10
#define R_MN10300_GOTPC16 11
#define R_MN10300_GOTOFF32 12
#define R_MN10300_GOTOFF24 13
#define R_MN10300_GOTOFF16 14
#define R_MN10300_PLT32 15
#define R_MN10300_PLT16 16
#define R_MN10300_GOT32 17
#define R_MN10300_GOT24 18
#define R_MN10300_GOT16 19
#define R_MN10300_COPY 20
#define R_MN10300_GLOB_DAT 21
#define R_MN10300_JMP_SLOT 22
#define R_MN10300_RELATIVE 23
#define R_MN10300_NUM 24
#define R_M32R_NONE 0
#define R_M32R_16 1
#define R_M32R_32 2
#define R_M32R_24 3
#define R_M32R_10_PCREL 4
#define R_M32R_18_PCREL 5
#define R_M32R_26_PCREL 6
#define R_M32R_HI16_ULO 7
#define R_M32R_HI16_SLO 8
#define R_M32R_LO16 9
#define R_M32R_SDA16 10
#define R_M32R_GNU_VTINHERIT 11
#define R_M32R_GNU_VTENTRY 12
#define R_M32R_16_RELA 33
#define R_M32R_32_RELA 34
#define R_M32R_24_RELA 35
#define R_M32R_10_PCREL_RELA 36
#define R_M32R_18_PCREL_RELA 37
#define R_M32R_26_PCREL_RELA 38
#define R_M32R_HI16_ULO_RELA 39
#define R_M32R_HI16_SLO_RELA 40
#define R_M32R_LO16_RELA 41
#define R_M32R_SDA16_RELA 42
#define R_M32R_RELA_GNU_VTINHERIT 43
#define R_M32R_RELA_GNU_VTENTRY 44
#define R_M32R_REL32 45
#define R_M32R_GOT24 48
#define R_M32R_26_PLTREL 49
#define R_M32R_COPY 50
#define R_M32R_GLOB_DAT 51
#define R_M32R_JMP_SLOT 52
#define R_M32R_RELATIVE 53
#define R_M32R_GOTOFF 54
#define R_M32R_GOTPC24 55
#define R_M32R_GOT16_HI_ULO 56
#define R_M32R_GOT16_HI_SLO 57
#define R_M32R_GOT16_LO 58
#define R_M32R_GOTPC_HI_ULO 59
#define R_M32R_GOTPC_HI_SLO 60
#define R_M32R_GOTPC_LO 61
#define R_M32R_GOTOFF_HI_ULO 62
#define R_M32R_GOTOFF_HI_SLO 63
#define R_M32R_GOTOFF_LO 64
#define R_M32R_NUM 256
#define R_MICROBLAZE_NONE 0
#define R_MICROBLAZE_32 1
#define R_MICROBLAZE_32_PCREL 2
#define R_MICROBLAZE_64_PCREL 3
#define R_MICROBLAZE_32_PCREL_LO 4
#define R_MICROBLAZE_64 5
#define R_MICROBLAZE_32_LO 6
#define R_MICROBLAZE_SRO32 7
#define R_MICROBLAZE_SRW32 8
#define R_MICROBLAZE_64_NONE 9
#define R_MICROBLAZE_32_SYM_OP_SYM 10
#define R_MICROBLAZE_GNU_VTINHERIT 11
#define R_MICROBLAZE_GNU_VTENTRY 12
#define R_MICROBLAZE_GOTPC_64 13
#define R_MICROBLAZE_GOT_64 14
#define R_MICROBLAZE_PLT_64 15
#define R_MICROBLAZE_REL 16
#define R_MICROBLAZE_JUMP_SLOT 17
#define R_MICROBLAZE_GLOB_DAT 18
#define R_MICROBLAZE_GOTOFF_64 19
#define R_MICROBLAZE_GOTOFF_32 20
#define R_MICROBLAZE_COPY 21
#define R_MICROBLAZE_TLS 22
#define R_MICROBLAZE_TLSGD 23
#define R_MICROBLAZE_TLSLD 24
#define R_MICROBLAZE_TLSDTPMOD32 25
#define R_MICROBLAZE_TLSDTPREL32 26
#define R_MICROBLAZE_TLSDTPREL64 27
#define R_MICROBLAZE_TLSGOTTPREL32 28
#define R_MICROBLAZE_TLSTPREL32 29
#define DT_NIOS2_GP 0x70000002
#define R_NIOS2_NONE 0
#define R_NIOS2_S16 1
#define R_NIOS2_U16 2
#define R_NIOS2_PCREL16 3
#define R_NIOS2_CALL26 4
#define R_NIOS2_IMM5 5
#define R_NIOS2_CACHE_OPX 6
#define R_NIOS2_IMM6 7
#define R_NIOS2_IMM8 8
#define R_NIOS2_HI16 9
#define R_NIOS2_LO16 10
#define R_NIOS2_HIADJ16 11
#define R_NIOS2_BFD_RELOC_32 12
#define R_NIOS2_BFD_RELOC_16 13
#define R_NIOS2_BFD_RELOC_8 14
#define R_NIOS2_GPREL 15
#define R_NIOS2_GNU_VTINHERIT 16
#define R_NIOS2_GNU_VTENTRY 17
#define R_NIOS2_UJMP 18
#define R_NIOS2_CJMP 19
#define R_NIOS2_CALLR 20
#define R_NIOS2_ALIGN 21
#define R_NIOS2_GOT16 22
#define R_NIOS2_CALL16 23
#define R_NIOS2_GOTOFF_LO 24
#define R_NIOS2_GOTOFF_HA 25
#define R_NIOS2_PCREL_LO 26
#define R_NIOS2_PCREL_HA 27
#define R_NIOS2_TLS_GD16 28
#define R_NIOS2_TLS_LDM16 29
#define R_NIOS2_TLS_LDO16 30
#define R_NIOS2_TLS_IE16 31
#define R_NIOS2_TLS_LE16 32
#define R_NIOS2_TLS_DTPMOD 33
#define R_NIOS2_TLS_DTPREL 34
#define R_NIOS2_TLS_TPREL 35
#define R_NIOS2_COPY 36
#define R_NIOS2_GLOB_DAT 37
#define R_NIOS2_JUMP_SLOT 38
#define R_NIOS2_RELATIVE 39
#define R_NIOS2_GOTOFF 40
#define R_NIOS2_CALL26_NOAT 41
#define R_NIOS2_GOT_LO 42
#define R_NIOS2_GOT_HA 43
#define R_NIOS2_CALL_LO 44
#define R_NIOS2_CALL_HA 45
#define R_OR1K_NONE 0
#define R_OR1K_32 1
#define R_OR1K_16 2
#define R_OR1K_8 3
#define R_OR1K_LO_16_IN_INSN 4
#define R_OR1K_HI_16_IN_INSN 5
#define R_OR1K_INSN_REL_26 6
#define R_OR1K_GNU_VTENTRY 7
#define R_OR1K_GNU_VTINHERIT 8
#define R_OR1K_32_PCREL 9
#define R_OR1K_16_PCREL 10
#define R_OR1K_8_PCREL 11
#define R_OR1K_GOTPC_HI16 12
#define R_OR1K_GOTPC_LO16 13
#define R_OR1K_GOT16 14
#define R_OR1K_PLT26 15
#define R_OR1K_GOTOFF_HI16 16
#define R_OR1K_GOTOFF_LO16 17
#define R_OR1K_COPY 18
#define R_OR1K_GLOB_DAT 19
#define R_OR1K_JMP_SLOT 20
#define R_OR1K_RELATIVE 21
#define R_OR1K_TLS_GD_HI16 22
#define R_OR1K_TLS_GD_LO16 23
#define R_OR1K_TLS_LDM_HI16 24
#define R_OR1K_TLS_LDM_LO16 25
#define R_OR1K_TLS_LDO_HI16 26
#define R_OR1K_TLS_LDO_LO16 27
#define R_OR1K_TLS_IE_HI16 28
#define R_OR1K_TLS_IE_LO16 29
#define R_OR1K_TLS_LE_HI16 30
#define R_OR1K_TLS_LE_LO16 31
#define R_OR1K_TLS_TPOFF 32
#define R_OR1K_TLS_DTPOFF 33
#define R_OR1K_TLS_DTPMOD 34
#define R_BPF_NONE 0
#define R_BPF_MAP_FD 1
#define ELF_INVALID_ADDRESS 0xFFFFFFFF
typedef struct {
    uint16_t api_version_major;
    uint16_t api_version_minor;
    _Bool (*resolver_callback)(const char* name, Elf32_Addr* address);
} ElfApiInterface;
#define FAP_MANIFEST_MAGIC 0x52474448
#define FAP_MANIFEST_SUPPORTED_VERSION 1
#define FAP_MANIFEST_MAX_APP_NAME_LENGTH 32
#define FAP_MANIFEST_MAX_ICON_SIZE 32
#pragma pack(push, 1)
typedef struct {
    uint32_t manifest_magic;
    uint32_t manifest_version;
    union {
        struct {
            uint16_t minor;
            uint16_t major;
        };
        uint32_t version;
    } api_version;
    uint16_t hardware_target_id;
} FlipperApplicationManifestBase;
typedef struct {
    FlipperApplicationManifestBase base;
    uint16_t stack_size;
    uint32_t app_version;
    char name[32];
    char has_icon;
    char icon[32];
} FlipperApplicationManifestV1;
typedef FlipperApplicationManifestV1 FlipperApplicationManifest;
#pragma pack(pop)
_Bool flipper_application_manifest_is_valid(const FlipperApplicationManifest* manifest);
_Bool flipper_application_manifest_is_compatible(
    const FlipperApplicationManifest* manifest,
    const ElfApiInterface* api_interface);
typedef enum {
    FlipperApplicationPreloadStatusSuccess = 0,
    FlipperApplicationPreloadStatusUnspecifiedError,
    FlipperApplicationPreloadStatusInvalidFile,
    FlipperApplicationPreloadStatusInvalidManifest,
    FlipperApplicationPreloadStatusApiMismatch,
    FlipperApplicationPreloadStatusTargetMismatch,
} FlipperApplicationPreloadStatus;
typedef enum {
    FlipperApplicationLoadStatusSuccess = 0,
    FlipperApplicationLoadStatusUnspecifiedError,
    FlipperApplicationLoadStatusNoFreeMemory,
    FlipperApplicationLoadStatusMissingImports,
} FlipperApplicationLoadStatus;
const char* flipper_application_preload_status_to_string(FlipperApplicationPreloadStatus status);
const char* flipper_application_load_status_to_string(FlipperApplicationLoadStatus status);
typedef struct FlipperApplication FlipperApplication;
typedef struct {
    const char* name;
    uint32_t address;
} FlipperApplicationMemoryMapEntry;
typedef struct {
    uint32_t mmap_entry_count;
    FlipperApplicationMemoryMapEntry* mmap_entries;
    uint32_t debug_link_size;
    uint8_t* debug_link;
} FlipperApplicationState;
FlipperApplication*
    flipper_application_alloc(Storage* storage, const ElfApiInterface* api_interface);
void flipper_application_free(FlipperApplication* app);
FlipperApplicationPreloadStatus
    flipper_application_preload(FlipperApplication* app, const char* path);
FlipperApplicationPreloadStatus
    flipper_application_preload_manifest(FlipperApplication* app, const char* path);
const FlipperApplicationManifest* flipper_application_get_manifest(FlipperApplication* app);
FlipperApplicationLoadStatus flipper_application_map_to_memory(FlipperApplication* app);
FuriThread* flipper_application_spawn(FlipperApplication* app, void* args);
       
void furi_hal_bt_hid_start();
void furi_hal_bt_hid_stop();
_Bool furi_hal_bt_hid_kb_press(uint16_t button);
_Bool furi_hal_bt_hid_kb_release(uint16_t button);
_Bool furi_hal_bt_hid_kb_release_all();
_Bool furi_hal_bt_hid_mouse_move(int8_t dx, int8_t dy);
_Bool furi_hal_bt_hid_mouse_press(uint8_t button);
_Bool furi_hal_bt_hid_mouse_release(uint8_t button);
_Bool furi_hal_bt_hid_mouse_release_all();
_Bool furi_hal_bt_hid_mouse_scroll(int8_t delta);
_Bool furi_hal_bt_hid_consumer_key_press(uint16_t button);
_Bool furi_hal_bt_hid_consumer_key_release(uint16_t button);
_Bool furi_hal_bt_hid_consumer_key_release_all();
       
void furi_hal_memory_init();
void* furi_hal_memory_alloc(size_t size);
size_t furi_hal_memory_get_free();
size_t furi_hal_memory_max_pool_block();
       
typedef enum {
    FuriHalMpuRegionNULL = 0x00,
    FuriHalMpuRegionStack = 0x01,
    FuriHalMpuRegion2 = 0x02,
    FuriHalMpuRegion3 = 0x03,
    FuriHalMpuRegion4 = 0x04,
    FuriHalMpuRegion5 = 0x05,
    FuriHalMpuRegion6 = 0x06,
    FuriHalMpuRegion7 = 0x07,
} FuriHalMpuRegion;
typedef enum {
    FuriHalMPURegionSize32B = 0x04U,
    FuriHalMPURegionSize64B = 0x05U,
    FuriHalMPURegionSize128B = 0x06U,
    FuriHalMPURegionSize256B = 0x07U,
    FuriHalMPURegionSize512B = 0x08U,
    FuriHalMPURegionSize1KB = 0x09U,
    FuriHalMPURegionSize2KB = 0x0AU,
    FuriHalMPURegionSize4KB = 0x0BU,
    FuriHalMPURegionSize8KB = 0x0CU,
    FuriHalMPURegionSize16KB = 0x0DU,
    FuriHalMPURegionSize32KB = 0x0EU,
    FuriHalMPURegionSize64KB = 0x0FU,
    FuriHalMPURegionSize128KB = 0x10U,
    FuriHalMPURegionSize256KB = 0x11U,
    FuriHalMPURegionSize512KB = 0x12U,
    FuriHalMPURegionSize1MB = 0x13U,
    FuriHalMPURegionSize2MB = 0x14U,
    FuriHalMPURegionSize4MB = 0x15U,
    FuriHalMPURegionSize8MB = 0x16U,
    FuriHalMPURegionSize16MB = 0x17U,
    FuriHalMPURegionSize32MB = 0x18U,
    FuriHalMPURegionSize64MB = 0x19U,
    FuriHalMPURegionSize128MB = 0x1AU,
    FuriHalMPURegionSize256MB = 0x1BU,
    FuriHalMPURegionSize512MB = 0x1CU,
    FuriHalMPURegionSize1GB = 0x1DU,
    FuriHalMPURegionSize2GB = 0x1EU,
    FuriHalMPURegionSize4GB = 0x1FU,
} FuriHalMPURegionSize;
void furi_hal_mpu_init();
void furi_hal_mpu_enable();
void furi_hal_mpu_disable();
void furi_hal_mpu_protect_no_access(
    FuriHalMpuRegion region,
    uint32_t address,
    FuriHalMPURegionSize size);
void furi_hal_mpu_protect_read_only(
    FuriHalMpuRegion region,
    uint32_t address,
    FuriHalMPURegionSize size);
void furi_hal_mpu_protect_disable(FuriHalMpuRegion region);
       
#define HID_U2F_PACKET_LEN 64
typedef enum {
    HidU2fDisconnected,
    HidU2fConnected,
    HidU2fRequest,
} HidU2fEvent;
typedef void (*HidU2fCallback)(HidU2fEvent ev, void* context);
_Bool furi_hal_hid_u2f_is_connected();
void furi_hal_hid_u2f_set_callback(HidU2fCallback cb, void* ctx);
uint32_t furi_hal_hid_u2f_get_request(uint8_t* data);
void furi_hal_hid_u2f_send_response(uint8_t* data, uint8_t len);
       
#define FURI_HAL_IDLE_TIMER_MAX 0xFFFF
#define FURI_HAL_IDLE_TIMER LPTIM1
#define FURI_HAL_IDLE_TIMER_IRQ LPTIM1_IRQn
static inline void furi_hal_idle_timer_init() {
    LL_RCC_SetLPTIMClockSource((uint32_t)((0x3UL << (18U)) | ((0x3UL << (18U)) >> 16)));
    LL_APB1_GRP1_EnableClockSleep((0x1UL << (31U)));
    __NVIC_SetPriority(
        LPTIM1_IRQn, NVIC_EncodePriority(__NVIC_GetPriorityGrouping(), 15, 0));
    __NVIC_EnableIRQ(LPTIM1_IRQn);
}
static inline void furi_hal_idle_timer_start(uint32_t count) {
    count--;
    LL_LPTIM_Enable(((LPTIM_TypeDef *) ((0x40000000UL) + 0x00007C00UL)));
    while(!LL_LPTIM_IsEnabled(((LPTIM_TypeDef *) ((0x40000000UL) + 0x00007C00UL))))
        ;
    LL_LPTIM_EnableIT_CMPM(((LPTIM_TypeDef *) ((0x40000000UL) + 0x00007C00UL)));
    LL_LPTIM_SetCompare(((LPTIM_TypeDef *) ((0x40000000UL) + 0x00007C00UL)), count - 3);
    LL_LPTIM_SetAutoReload(((LPTIM_TypeDef *) ((0x40000000UL) + 0x00007C00UL)), count);
    LL_LPTIM_StartCounter(((LPTIM_TypeDef *) ((0x40000000UL) + 0x00007C00UL)), (0x1UL << (1U)));
}
static inline void furi_hal_idle_timer_reset() {
    LL_LPTIM_DeInit(((LPTIM_TypeDef *) ((0x40000000UL) + 0x00007C00UL)));
    __NVIC_ClearPendingIRQ(LPTIM1_IRQn);
}
static inline uint32_t furi_hal_idle_timer_get_cnt() {
    uint32_t counter = LL_LPTIM_GetCounter(((LPTIM_TypeDef *) ((0x40000000UL) + 0x00007C00UL)));
    uint32_t counter_shadow = LL_LPTIM_GetCounter(((LPTIM_TypeDef *) ((0x40000000UL) + 0x00007C00UL)));
    while(counter != counter_shadow) {
        counter = counter_shadow;
        counter_shadow = LL_LPTIM_GetCounter(((LPTIM_TypeDef *) ((0x40000000UL) + 0x00007C00UL)));
    }
    return counter;
}
       
typedef enum {
    FuriHalPwmOutputIdTim1PA7,
    FuriHalPwmOutputIdLptim2PA4,
} FuriHalPwmOutputId;
void furi_hal_pwm_start(FuriHalPwmOutputId channel, uint32_t freq, uint8_t duty);
void furi_hal_pwm_stop(FuriHalPwmOutputId channel);
void furi_hal_pwm_set_params(FuriHalPwmOutputId channel, uint32_t freq, uint8_t duty);
       
       
       
#define CC1101_QUARTZ 26000000
#define CC1101_FMASK 0xFFFFFF
#define CC1101_FDIV 0x10000
#define CC1101_IFDIV 0x400
#define CC1101_TIMEOUT 500
#define CC1101_READ (1 << 7)
#define CC1101_BURST (1 << 6)
#define CC1101_IOCFG2 0x00
#define CC1101_IOCFG1 0x01
#define CC1101_IOCFG0 0x02
#define CC1101_FIFOTHR 0x03
#define CC1101_SYNC1 0x04
#define CC1101_SYNC0 0x05
#define CC1101_PKTLEN 0x06
#define CC1101_PKTCTRL1 0x07
#define CC1101_PKTCTRL0 0x08
#define CC1101_ADDR 0x09
#define CC1101_CHANNR 0x0A
#define CC1101_FSCTRL1 0x0B
#define CC1101_FSCTRL0 0x0C
#define CC1101_FREQ2 0x0D
#define CC1101_FREQ1 0x0E
#define CC1101_FREQ0 0x0F
#define CC1101_MDMCFG4 0x10
#define CC1101_MDMCFG3 0x11
#define CC1101_MDMCFG2 0x12
#define CC1101_MDMCFG1 0x13
#define CC1101_MDMCFG0 0x14
#define CC1101_DEVIATN 0x15
#define CC1101_MCSM2 0x16
#define CC1101_MCSM1 0x17
#define CC1101_MCSM0 0x18
#define CC1101_FOCCFG 0x19
#define CC1101_BSCFG 0x1A
#define CC1101_AGCCTRL2 0x1B
#define CC1101_AGCCTRL1 0x1C
#define CC1101_AGCCTRL0 0x1D
#define CC1101_WOREVT1 0x1E
#define CC1101_WOREVT0 0x1F
#define CC1101_WORCTRL 0x20
#define CC1101_FREND1 0x21
#define CC1101_FREND0 0x22
#define CC1101_FSCAL3 0x23
#define CC1101_FSCAL2 0x24
#define CC1101_FSCAL1 0x25
#define CC1101_FSCAL0 0x26
#define CC1101_RCCTRL1 0x27
#define CC1101_RCCTRL0 0x28
#define CC1101_FSTEST 0x29
#define CC1101_PTEST 0x2A
#define CC1101_AGCTEST 0x2B
#define CC1101_TEST2 0x2C
#define CC1101_TEST1 0x2D
#define CC1101_TEST0 0x2E
#define CC1101_STROBE_SRES 0x30
#define CC1101_STROBE_SFSTXON 0x31
#define CC1101_STROBE_SXOFF 0x32
#define CC1101_STROBE_SCAL 0x33
#define CC1101_STROBE_SRX 0x34
#define CC1101_STROBE_STX 0x35
#define CC1101_STROBE_SIDLE 0x36
#define CC1101_STROBE_SWOR 0x38
#define CC1101_STROBE_SPWD 0x39
#define CC1101_STROBE_SFRX 0x3A
#define CC1101_STROBE_SFTX 0x3B
#define CC1101_STROBE_SWORRST 0x3C
#define CC1101_STROBE_SNOP 0x3D
#define CC1101_STATUS_PARTNUM 0x30
#define CC1101_STATUS_VERSION 0x31
#define CC1101_STATUS_FREQEST 0x32
#define CC1101_STATUS_LQI 0x33
#define CC1101_STATUS_RSSI 0x34
#define CC1101_STATUS_MARCSTATE 0x35
#define CC1101_STATUS_WORTIME1 0x36
#define CC1101_STATUS_WORTIME0 0x37
#define CC1101_STATUS_PKTSTATUS 0x38
#define CC1101_STATUS_VCO_VC_DAC 0x39
#define CC1101_STATUS_TXBYTES 0x3A
#define CC1101_STATUS_RXBYTES 0x3B
#define CC1101_STATUS_RCCTRL1_STATUS 0x3C
#define CC1101_STATUS_RCCTRL0_STATUS 0x3D
#define CC1101_PATABLE 0x3E
#define CC1101_FIFO 0x3F
#define CC1101_IOCFG_INV (1 << 6)
typedef enum {
    CC1101IocfgRxFifoThreshold = 0x00,
    CC1101IocfgRxFifoThresholdOrPacket = 0x01,
    CC1101IocfgTxFifoThreshold = 0x02,
    CC1101IocfgTxFifoFull = 0x03,
    CC1101IocfgRxOverflow = 0x04,
    CC1101IocfgTxUnderflow = 0x05,
    CC1101IocfgSyncWord = 0x06,
    CC1101IocfgPacket = 0x07,
    CC1101IocfgPreamble = 0x08,
    CC1101IocfgClearChannel = 0x09,
    CC1101IocfgLockDetector = 0x0A,
    CC1101IocfgSerialClock = 0x0B,
    CC1101IocfgSerialSynchronousDataOutput = 0x0C,
    CC1101IocfgSerialDataOutput = 0x0D,
    CC1101IocfgCarrierSense = 0x0E,
    CC1101IocfgCrcOk = 0x0F,
    CC1101IocfgRxHardData1 = 0x16,
    CC1101IocfgRxHardData0 = 0x17,
    CC1101IocfgPaPd = 0x1B,
    CC1101IocfgLnaPd = 0x1C,
    CC1101IocfgRxSymbolTick = 0x1D,
    CC1101IocfgWorEvnt0 = 0x24,
    CC1101IocfgWorEvnt1 = 0x25,
    CC1101IocfgClk256 = 0x26,
    CC1101IocfgClk32k = 0x27,
    CC1101IocfgChpRdyN = 0x29,
    CC1101IocfgXoscStable = 0x2B,
    CC1101IocfgHighImpedance = 0x2E,
    CC1101IocfgHW = 0x2F,
    CC1101IocfgClkXosc1 = 0x30,
    CC1101IocfgClkXosc1_5 = 0x31,
    CC1101IocfgClkXosc2 = 0x32,
    CC1101IocfgClkXosc3 = 0x33,
    CC1101IocfgClkXosc4 = 0x34,
    CC1101IocfgClkXosc6 = 0x35,
    CC1101IocfgClkXosc8 = 0x36,
    CC1101IocfgClkXosc12 = 0x37,
    CC1101IocfgClkXosc16 = 0x38,
    CC1101IocfgClkXosc24 = 0x39,
    CC1101IocfgClkXosc32 = 0x3A,
    CC1101IocfgClkXosc48 = 0x3B,
    CC1101IocfgClkXosc64 = 0x3C,
    CC1101IocfgClkXosc96 = 0x3D,
    CC1101IocfgClkXosc128 = 0x3E,
    CC1101IocfgClkXosc192 = 0x3F,
} CC1101Iocfg;
typedef enum {
    CC1101StateIDLE = 0b000,
    CC1101StateRX = 0b001,
    CC1101StateTX = 0b010,
    CC1101StateFSTXON = 0b011,
    CC1101StateCALIBRATE = 0b100,
    CC1101StateSETTLING = 0b101,
    CC1101StateRXFIFO_OVERFLOW =
        0b110,
    CC1101StateTXFIFO_UNDERFLOW = 0b111,
} CC1101State;
typedef struct {
    uint8_t FIFO_BYTES_AVAILABLE : 4;
    CC1101State STATE : 3;
    _Bool CHIP_RDYn : 1;
} CC1101Status;
typedef union {
    CC1101Status status;
    uint8_t status_raw;
} CC1101StatusRaw;
typedef struct {
    uint8_t NUM_TXBYTES : 7;
    _Bool TXFIFO_UNDERFLOW : 1;
} CC1101TxBytes;
typedef struct {
    uint8_t NUM_RXBYTES : 7;
    _Bool RXFIFO_OVERFLOW : 1;
} CC1101RxBytes;
CC1101Status cc1101_strobe(FuriHalSpiBusHandle* handle, uint8_t strobe);
CC1101Status cc1101_write_reg(FuriHalSpiBusHandle* handle, uint8_t reg, uint8_t data);
CC1101Status cc1101_read_reg(FuriHalSpiBusHandle* handle, uint8_t reg, uint8_t* data);
void cc1101_reset(FuriHalSpiBusHandle* handle);
CC1101Status cc1101_get_status(FuriHalSpiBusHandle* handle);
void cc1101_shutdown(FuriHalSpiBusHandle* handle);
uint8_t cc1101_get_partnumber(FuriHalSpiBusHandle* handle);
uint8_t cc1101_get_version(FuriHalSpiBusHandle* handle);
uint8_t cc1101_get_rssi(FuriHalSpiBusHandle* handle);
void cc1101_calibrate(FuriHalSpiBusHandle* handle);
void cc1101_switch_to_idle(FuriHalSpiBusHandle* handle);
void cc1101_switch_to_rx(FuriHalSpiBusHandle* handle);
void cc1101_switch_to_tx(FuriHalSpiBusHandle* handle);
void cc1101_flush_rx(FuriHalSpiBusHandle* handle);
void cc1101_flush_tx(FuriHalSpiBusHandle* handle);
uint32_t cc1101_set_frequency(FuriHalSpiBusHandle* handle, uint32_t value);
uint32_t cc1101_set_intermediate_frequency(FuriHalSpiBusHandle* handle, uint32_t value);
void cc1101_set_pa_table(FuriHalSpiBusHandle* handle, const uint8_t value[8]);
uint8_t cc1101_write_fifo(FuriHalSpiBusHandle* handle, const uint8_t* data, uint8_t size);
uint8_t cc1101_read_fifo(FuriHalSpiBusHandle* handle, uint8_t* data, uint8_t* size);
static const uint8_t furi_hal_subghz_preset_ook_270khz_async_regs[][2] = {
    {0x02, 0x0D},
    {0x03, 0x47},
    {0x08, 0x32},
    {0x0B, 0x06},
    {0x14, 0x00},
    {0x13, 0x00},
    {0x12, 0x30},
    {0x11, 0x32},
    {0x10, 0x67},
    {0x18, 0x18},
    {0x19,
     0x18},
    {0x1D,
     0x40},
    {0x1C,
     0x00},
    {0x1B, 0x03},
    {0x20, 0xFB},
    {0x22, 0x11},
    {0x21, 0xB6},
    {0, 0},
};
static const uint8_t furi_hal_subghz_preset_ook_650khz_async_regs[][2] = {
    {0x02, 0x0D},
    {0x03, 0x07},
    {0x08, 0x32},
    {0x0B, 0x06},
    {0x14, 0x00},
    {0x13, 0x00},
    {0x12, 0x30},
    {0x11, 0x32},
    {0x10, 0x17},
    {0x18, 0x18},
    {0x19,
     0x18},
    {0x1D,
     0x91},
    {0x1C,
     0x0},
    {0x1B, 0x07},
    {0x20, 0xFB},
    {0x22, 0x11},
    {0x21, 0xB6},
    {0, 0},
};
static const uint8_t furi_hal_subghz_preset_2fsk_dev2_38khz_async_regs[][2] = {
    {0x02, 0x0D},
    {0x0B, 0x06},
    {0x08, 0x32},
    {0x07, 0x04},
    {0x14, 0x00},
    {0x13, 0x02},
    {0x12, 0x04},
    {0x11, 0x83},
    {0x10, 0x67},
    {0x15, 0x04},
    {0x18, 0x18},
    {0x19,
     0x16},
    {0x1D,
     0x91},
    {0x1C,
     0x00},
    {0x1B, 0x07},
    {0x20, 0xFB},
    {0x22, 0x10},
    {0x21, 0x56},
    {0, 0},
};
static const uint8_t furi_hal_subghz_preset_2fsk_dev47_6khz_async_regs[][2] = {
    {0x02, 0x0D},
    {0x0B, 0x06},
    {0x08, 0x32},
    {0x07, 0x04},
    {0x14, 0x00},
    {0x13, 0x02},
    {0x12, 0x04},
    {0x11, 0x83},
    {0x10, 0x67},
    {0x15, 0x47},
    {0x18, 0x18},
    {0x19,
     0x16},
    {0x1D,
     0x91},
    {0x1C,
     0x00},
    {0x1B, 0x07},
    {0x20, 0xFB},
    {0x22, 0x10},
    {0x21, 0x56},
    {0, 0},
};
static const uint8_t furi_hal_subghz_preset_msk_99_97kb_async_regs[][2] = {
    {0x02, 0x06},
    {0x03, 0x07},
    {0x04, 0x46},
    {0x05, 0x4C},
    {0x09, 0x00},
    {0x06, 0x00},
    {0x0A, 0x00},
    {0x08, 0x05},
    {0x0C, 0x23},
    {0x0B, 0x06},
    {0x14, 0xF8},
    {0x13, 0x22},
    {0x12, 0x72},
    {0x11, 0xF8},
    {0x10, 0x5B},
    {0x15, 0x47},
    {0x18, 0x18},
    {0x19, 0x16},
    {0x1D, 0xB2},
    {0x1C, 0x00},
    {0x1B, 0xC7},
    {0x22, 0x10},
    {0x21, 0x56},
    {0x1A, 0x1C},
    {0x29, 0x59},
    {0, 0},
};
static const uint8_t furi_hal_subghz_preset_gfsk_9_99kb_async_regs[][2] = {
    {0x02, 0x06},
    {0x03, 0x47},
    {0x08, 0x05},
    {0x0B, 0x06},
    {0x04, 0x46},
    {0x05, 0x4C},
    {0x09, 0x00},
    {0x06, 0x00},
    {0x10, 0xC8},
    {0x11, 0x93},
    {0x12, 0x12},
    {0x15, 0x34},
    {0x18, 0x18},
    {0x19, 0x16},
    {0x1B, 0x43},
    {0x1C, 0x40},
    {0x1D, 0x91},
    {0x20, 0xFB},
    {0, 0},
};
static const uint8_t furi_hal_subghz_preset_ook_async_patable[8] = {
    0x00,
    0xC0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00};
static const uint8_t furi_hal_subghz_preset_ook_async_patable_au[8] = {
    0x00,
    0x37,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00};
static const uint8_t furi_hal_subghz_preset_2fsk_async_patable[8] = {
    0xC0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00};
static const uint8_t furi_hal_subghz_preset_msk_async_patable[8] = {
    0xC0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00};
static const uint8_t furi_hal_subghz_preset_gfsk_async_patable[8] = {
    0xC0,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00};
       
#define CDC_DATA_SZ 64
typedef struct {
    void (*tx_ep_callback)(void* context);
    void (*rx_ep_callback)(void* context);
    void (*state_callback)(void* context, uint8_t state);
    void (*ctrl_line_callback)(void* context, uint8_t state);
    void (*config_callback)(void* context, struct usb_cdc_line_coding* config);
} CdcCallbacks;
void furi_hal_cdc_set_callbacks(uint8_t if_num, CdcCallbacks* cb, void* context);
struct usb_cdc_line_coding* furi_hal_cdc_get_port_settings(uint8_t if_num);
uint8_t furi_hal_cdc_get_ctrl_line_state(uint8_t if_num);
void furi_hal_cdc_send(uint8_t if_num, uint8_t* buf, uint16_t len);
int32_t furi_hal_cdc_receive(uint8_t if_num, uint8_t* buf, uint16_t max_len);
#define __ERRNO_H__ 
typedef int error_t;
#define __error_t_defined 1
#define _SYS_ERRNO_H_ 
#define errno (*__errno())
extern int *__errno (void);
extern const char * const _sys_errlist[];
extern int _sys_nerr;
#define __errno_r(ptr) ((ptr)->_errno)
#define EPERM 1
#define ENOENT 2
#define ESRCH 3
#define EINTR 4
#define EIO 5
#define ENXIO 6
#define E2BIG 7
#define ENOEXEC 8
#define EBADF 9
#define ECHILD 10
#define EAGAIN 11
#define ENOMEM 12
#define EACCES 13
#define EFAULT 14
#define EBUSY 16
#define EEXIST 17
#define EXDEV 18
#define ENODEV 19
#define ENOTDIR 20
#define EISDIR 21
#define EINVAL 22
#define ENFILE 23
#define EMFILE 24
#define ENOTTY 25
#define ETXTBSY 26
#define EFBIG 27
#define ENOSPC 28
#define ESPIPE 29
#define EROFS 30
#define EMLINK 31
#define EPIPE 32
#define EDOM 33
#define ERANGE 34
#define ENOMSG 35
#define EIDRM 36
#define EDEADLK 45
#define ENOLCK 46
#define ENOSTR 60
#define ENODATA 61
#define ETIME 62
#define ENOSR 63
#define ENOLINK 67
#define EPROTO 71
#define EMULTIHOP 74
#define EBADMSG 77
#define EFTYPE 79
#define ENOSYS 88
#define ENOTEMPTY 90
#define ENAMETOOLONG 91
#define ELOOP 92
#define EOPNOTSUPP 95
#define EPFNOSUPPORT 96
#define ECONNRESET 104
#define ENOBUFS 105
#define EAFNOSUPPORT 106
#define EPROTOTYPE 107
#define ENOTSOCK 108
#define ENOPROTOOPT 109
#define ECONNREFUSED 111
#define EADDRINUSE 112
#define ECONNABORTED 113
#define ENETUNREACH 114
#define ENETDOWN 115
#define ETIMEDOUT 116
#define EHOSTDOWN 117
#define EHOSTUNREACH 118
#define EINPROGRESS 119
#define EALREADY 120
#define EDESTADDRREQ 121
#define EMSGSIZE 122
#define EPROTONOSUPPORT 123
#define EADDRNOTAVAIL 125
#define ENETRESET 126
#define EISCONN 127
#define ENOTCONN 128
#define ETOOMANYREFS 129
#define EDQUOT 132
#define ESTALE 133
#define ENOTSUP 134
#define EILSEQ 138
#define EOVERFLOW 139
#define ECANCELED 140
#define ENOTRECOVERABLE 141
#define EOWNERDEAD 142
#define EWOULDBLOCK EAGAIN
#define __ELASTERROR 2000
void __clear_cache(void*, void*);
       
#define RECORD_BT "bt"
typedef struct Bt Bt;
typedef enum {
    BtStatusUnavailable,
    BtStatusOff,
    BtStatusAdvertising,
    BtStatusConnected,
} BtStatus;
typedef enum {
    BtProfileSerial,
    BtProfileHidKeyboard,
} BtProfile;
typedef void (*BtStatusChangedCallback)(BtStatus status, void* context);
_Bool bt_set_profile(Bt* bt, BtProfile profile);
void bt_disconnect(Bt* bt);
void bt_set_status_changed_callback(Bt* bt, BtStatusChangedCallback callback, void* context);
void bt_forget_bonded_devices(Bt* bt);
void bt_keys_storage_set_storage_path(Bt* bt, const char* keys_storage_path);
void bt_keys_storage_set_default_path(Bt* bt);
       
typedef enum {
    CliSymbolAsciiSOH = 0x01,
    CliSymbolAsciiETX = 0x03,
    CliSymbolAsciiEOT = 0x04,
    CliSymbolAsciiBell = 0x07,
    CliSymbolAsciiBackspace = 0x08,
    CliSymbolAsciiTab = 0x09,
    CliSymbolAsciiLF = 0x0A,
    CliSymbolAsciiCR = 0x0D,
    CliSymbolAsciiEsc = 0x1B,
    CliSymbolAsciiUS = 0x1F,
    CliSymbolAsciiSpace = 0x20,
    CliSymbolAsciiDel = 0x7F,
} CliSymbols;
typedef enum {
    CliCommandFlagDefault = 0,
    CliCommandFlagParallelSafe =
        (1 << 0),
    CliCommandFlagInsomniaSafe = (1 << 1),
} CliCommandFlag;
#define RECORD_CLI "cli"
typedef struct Cli Cli;
typedef void (*CliCallback)(Cli* cli, FuriString* args, void* context);
void cli_add_command(
    Cli* cli,
    const char* name,
    CliCommandFlag flags,
    CliCallback callback,
    void* context);
void cli_print_usage(const char* cmd, const char* usage, const char* arg);
void cli_delete_command(Cli* cli, const char* name);
size_t cli_read(Cli* cli, uint8_t* buffer, size_t size);
size_t cli_read_timeout(Cli* cli, uint8_t* buffer, size_t size, uint32_t timeout);
_Bool cli_cmd_interrupt_received(Cli* cli);
void cli_write(Cli* cli, const uint8_t* buffer, size_t size);
char cli_getc(Cli* cli);
void cli_nl();
void cli_session_open(Cli* cli, void* session);
void cli_session_close(Cli* cli);
_Bool cli_is_connected(Cli* cli);
       
typedef struct CliSession CliSession;
extern CliSession cli_vcp;
       
       
typedef enum {
    DolphinAppSubGhz,
    DolphinAppRfid,
    DolphinAppNfc,
    DolphinAppIr,
    DolphinAppIbutton,
    DolphinAppBadusb,
    DolphinAppPlugin,
    DolphinAppMAX,
} DolphinApp;
typedef enum {
    DolphinDeedSubGhzReceiverInfo,
    DolphinDeedSubGhzSave,
    DolphinDeedSubGhzRawRec,
    DolphinDeedSubGhzAddManually,
    DolphinDeedSubGhzSend,
    DolphinDeedSubGhzFrequencyAnalyzer,
    DolphinDeedRfidRead,
    DolphinDeedRfidReadSuccess,
    DolphinDeedRfidSave,
    DolphinDeedRfidEmulate,
    DolphinDeedRfidAdd,
    DolphinDeedNfcRead,
    DolphinDeedNfcReadSuccess,
    DolphinDeedNfcSave,
    DolphinDeedNfcDetectReader,
    DolphinDeedNfcEmulate,
    DolphinDeedNfcMfcAdd,
    DolphinDeedNfcAddSave,
    DolphinDeedNfcAddEmulate,
    DolphinDeedIrSend,
    DolphinDeedIrLearnSuccess,
    DolphinDeedIrSave,
    DolphinDeedIbuttonRead,
    DolphinDeedIbuttonReadSuccess,
    DolphinDeedIbuttonSave,
    DolphinDeedIbuttonEmulate,
    DolphinDeedIbuttonAdd,
    DolphinDeedBadUsbPlayScript,
    DolphinDeedU2fAuthorized,
    DolphinDeedGpioUartBridge,
    DolphinDeedPluginStart,
    DolphinDeedPluginGameStart,
    DolphinDeedPluginGameWin,
    DolphinDeedMAX,
    DolphinDeedTestLeft,
    DolphinDeedTestRight,
} DolphinDeed;
typedef struct {
    uint8_t icounter;
    DolphinApp app;
} DolphinDeedWeight;
typedef struct {
    DolphinApp app;
    uint8_t icounter_limit;
} DolphinDeedLimits;
DolphinApp dolphin_deed_get_app(DolphinDeed deed);
uint8_t dolphin_deed_get_app_limit(DolphinApp app);
uint8_t dolphin_deed_get_weight(DolphinDeed deed);
#define RECORD_DOLPHIN "dolphin"
typedef struct Dolphin Dolphin;
typedef struct {
    uint32_t icounter;
    uint32_t butthurt;
    uint64_t timestamp;
    uint8_t level;
    _Bool level_up_is_pending;
} DolphinStats;
typedef enum {
    DolphinPubsubEventUpdate,
} DolphinPubsubEvent;
#define DOLPHIN_DEED(deed) do { Dolphin* dolphin = (Dolphin*)furi_record_open("dolphin"); dolphin_deed(dolphin, deed); furi_record_close("dolphin"); } while(0)
void dolphin_deed(Dolphin* dolphin, DolphinDeed deed);
DolphinStats dolphin_stats(Dolphin* dolphin);
DolphinDeed getRandomDeed();
void dolphin_flush(Dolphin* dolphin);
void dolphin_upgrade_level(Dolphin* dolphin);
FuriPubSub* dolphin_get_pubsub(Dolphin* dolphin);
       
       
typedef struct ViewPort ViewPort;
typedef enum {
    ViewPortOrientationHorizontal,
    ViewPortOrientationHorizontalFlip,
    ViewPortOrientationVertical,
    ViewPortOrientationVerticalFlip,
    ViewPortOrientationMAX,
} ViewPortOrientation;
typedef void (*ViewPortDrawCallback)(Canvas* canvas, void* context);
typedef void (*ViewPortInputCallback)(InputEvent* event, void* context);
ViewPort* view_port_alloc();
void view_port_free(ViewPort* view_port);
void view_port_set_width(ViewPort* view_port, uint8_t width);
uint8_t view_port_get_width(ViewPort* view_port);
void view_port_set_height(ViewPort* view_port, uint8_t height);
uint8_t view_port_get_height(ViewPort* view_port);
void view_port_enabled_set(ViewPort* view_port, _Bool enabled);
_Bool view_port_is_enabled(ViewPort* view_port);
void view_port_draw_callback_set(ViewPort* view_port, ViewPortDrawCallback callback, void* context);
void view_port_input_callback_set(
    ViewPort* view_port,
    ViewPortInputCallback callback,
    void* context);
void view_port_update(ViewPort* view_port);
void view_port_set_orientation(ViewPort* view_port, ViewPortOrientation orientation);
ViewPortOrientation view_port_get_orientation(const ViewPort* view_port);
typedef enum {
    GuiLayerDesktop,
    GuiLayerWindow,
    GuiLayerStatusBarLeft,
    GuiLayerStatusBarRight,
    GuiLayerFullscreen,
    GuiLayerMAX
} GuiLayer;
typedef void (*GuiCanvasCommitCallback)(uint8_t* data, size_t size, void* context);
#define RECORD_GUI "gui"
typedef struct Gui Gui;
void gui_add_view_port(Gui* gui, ViewPort* view_port, GuiLayer layer);
void gui_remove_view_port(Gui* gui, ViewPort* view_port);
void gui_view_port_send_to_front(Gui* gui, ViewPort* view_port);
void gui_view_port_send_to_back(Gui* gui, ViewPort* view_port);
void gui_add_framebuffer_callback(Gui* gui, GuiCanvasCommitCallback callback, void* context);
void gui_remove_framebuffer_callback(Gui* gui, GuiCanvasCommitCallback callback, void* context);
size_t gui_get_framebuffer_size(Gui* gui);
void gui_set_lockdown(Gui* gui, _Bool lockdown);
Canvas* gui_direct_draw_acquire(Gui* gui);
void gui_direct_draw_release(Gui* gui);
       
struct Icon {
    const uint8_t width;
    const uint8_t height;
    const uint8_t frame_count;
    const uint8_t frame_rate;
    const uint8_t* const* frames;
};
       
#define ELEMENTS_MAX_LINES_NUM (7)
#define ELEMENTS_BOLD_MARKER '#'
#define ELEMENTS_MONO_MARKER '*'
#define ELEMENTS_INVERSED_MARKER '!'
void elements_progress_bar(Canvas* canvas, uint8_t x, uint8_t y, uint8_t width, float progress);
void elements_progress_bar_with_text(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    uint8_t width,
    float progress,
    const char* text);
void elements_scrollbar_pos(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    uint8_t height,
    uint16_t pos,
    uint16_t total);
void elements_scrollbar(Canvas* canvas, uint16_t pos, uint16_t total);
void elements_frame(Canvas* canvas, uint8_t x, uint8_t y, uint8_t width, uint8_t height);
void elements_button_left(Canvas* canvas, const char* str);
void elements_button_right(Canvas* canvas, const char* str);
void elements_button_center(Canvas* canvas, const char* str);
void elements_multiline_text_aligned(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    Align horizontal,
    Align vertical,
    const char* text);
void elements_multiline_text(Canvas* canvas, uint8_t x, uint8_t y, const char* text);
void elements_multiline_text_framed(Canvas* canvas, uint8_t x, uint8_t y, const char* text);
void elements_slightly_rounded_frame(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    uint8_t width,
    uint8_t height);
void elements_slightly_rounded_box(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    uint8_t width,
    uint8_t height);
void elements_bold_rounded_frame(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    uint8_t width,
    uint8_t height);
void elements_bubble(Canvas* canvas, uint8_t x, uint8_t y, uint8_t width, uint8_t height);
void elements_bubble_str(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    const char* text,
    Align horizontal,
    Align vertical);
void elements_string_fit_width(Canvas* canvas, FuriString* string, uint8_t width);
void elements_scrollable_text_line(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    uint8_t width,
    FuriString* string,
    size_t scroll,
    _Bool ellipsis);
void elements_text_box(
    Canvas* canvas,
    uint8_t x,
    uint8_t y,
    uint8_t width,
    uint8_t height,
    Align horizontal,
    Align vertical,
    const char* text,
    _Bool strip_to_dots);
       
struct Canvas {
    u8g2_t fb;
    CanvasOrientation orientation;
    uint8_t offset_x;
    uint8_t offset_y;
    uint8_t width;
    uint8_t height;
};
Canvas* canvas_init();
void canvas_free(Canvas* canvas);
uint8_t* canvas_get_buffer(Canvas* canvas);
size_t canvas_get_buffer_size(Canvas* canvas);
void canvas_frame_set(
    Canvas* canvas,
    uint8_t offset_x,
    uint8_t offset_y,
    uint8_t width,
    uint8_t height);
void canvas_set_orientation(Canvas* canvas, CanvasOrientation orientation);
CanvasOrientation canvas_get_orientation(const Canvas* canvas);
       
       
typedef enum {
    SceneManagerEventTypeCustom,
    SceneManagerEventTypeBack,
    SceneManagerEventTypeTick,
} SceneManagerEventType;
typedef struct {
    SceneManagerEventType type;
    uint32_t event;
} SceneManagerEvent;
typedef void (*AppSceneOnEnterCallback)(void* context);
typedef _Bool (*AppSceneOnEventCallback)(void* context, SceneManagerEvent event);
typedef void (*AppSceneOnExitCallback)(void* context);
typedef struct {
    const AppSceneOnEnterCallback* on_enter_handlers;
    const AppSceneOnEventCallback* on_event_handlers;
    const AppSceneOnExitCallback* on_exit_handlers;
    const uint32_t scene_num;
} SceneManagerHandlers;
typedef struct SceneManager SceneManager;
void scene_manager_set_scene_state(SceneManager* scene_manager, uint32_t scene_id, uint32_t state);
uint32_t scene_manager_get_scene_state(SceneManager* scene_manager, uint32_t scene_id);
SceneManager* scene_manager_alloc(const SceneManagerHandlers* app_scene_handlers, void* context);
void scene_manager_free(SceneManager* scene_manager);
_Bool scene_manager_handle_custom_event(SceneManager* scene_manager, uint32_t custom_event);
_Bool scene_manager_handle_back_event(SceneManager* scene_manager);
void scene_manager_handle_tick_event(SceneManager* scene_manager);
void scene_manager_next_scene(SceneManager* scene_manager, uint32_t next_scene_id);
_Bool scene_manager_previous_scene(SceneManager* scene_manager);
_Bool scene_manager_has_previous_scene(SceneManager* scene_manager, uint32_t scene_id);
_Bool scene_manager_search_and_switch_to_previous_scene(
    SceneManager* scene_manager,
    uint32_t scene_id);
_Bool scene_manager_search_and_switch_to_previous_scene_one_of(
    SceneManager* scene_manager,
    const uint32_t* scene_ids,
    size_t scene_ids_size);
_Bool scene_manager_search_and_switch_to_another_scene(
    SceneManager* scene_manager,
    uint32_t scene_id);
void scene_manager_stop(SceneManager* scene_manager);
typedef enum {
    ViewDispatcherTypeDesktop,
    ViewDispatcherTypeWindow,
    ViewDispatcherTypeFullscreen
} ViewDispatcherType;
typedef struct ViewDispatcher ViewDispatcher;
typedef _Bool (*ViewDispatcherCustomEventCallback)(void* context, uint32_t event);
typedef _Bool (*ViewDispatcherNavigationEventCallback)(void* context);
typedef void (*ViewDispatcherTickEventCallback)(void* context);
ViewDispatcher* view_dispatcher_alloc();
void view_dispatcher_free(ViewDispatcher* view_dispatcher);
void view_dispatcher_enable_queue(ViewDispatcher* view_dispatcher);
void view_dispatcher_send_custom_event(ViewDispatcher* view_dispatcher, uint32_t event);
void view_dispatcher_set_custom_event_callback(
    ViewDispatcher* view_dispatcher,
    ViewDispatcherCustomEventCallback callback);
void view_dispatcher_set_navigation_event_callback(
    ViewDispatcher* view_dispatcher,
    ViewDispatcherNavigationEventCallback callback);
void view_dispatcher_set_tick_event_callback(
    ViewDispatcher* view_dispatcher,
    ViewDispatcherTickEventCallback callback,
    uint32_t tick_period);
void view_dispatcher_set_event_callback_context(ViewDispatcher* view_dispatcher, void* context);
void view_dispatcher_run(ViewDispatcher* view_dispatcher);
void view_dispatcher_stop(ViewDispatcher* view_dispatcher);
void view_dispatcher_add_view(ViewDispatcher* view_dispatcher, uint32_t view_id, View* view);
void view_dispatcher_remove_view(ViewDispatcher* view_dispatcher, uint32_t view_id);
void view_dispatcher_switch_to_view(ViewDispatcher* view_dispatcher, uint32_t view_id);
void view_dispatcher_send_to_front(ViewDispatcher* view_dispatcher);
void view_dispatcher_send_to_back(ViewDispatcher* view_dispatcher);
void view_dispatcher_attach_to_gui(
    ViewDispatcher* view_dispatcher,
    Gui* gui,
    ViewDispatcherType type);
       
typedef struct ViewStack ViewStack;
ViewStack* view_stack_alloc(void);
void view_stack_free(ViewStack* view_stack);
View* view_stack_get_view(ViewStack* view_stack);
void view_stack_add_view(ViewStack* view_stack, View* view);
void view_stack_remove_view(ViewStack* view_stack, View* view);
       
typedef struct ButtonMenu ButtonMenu;
typedef struct ButtonMenuItem ButtonMenuItem;
typedef void (*ButtonMenuItemCallback)(void* context, int32_t index, InputType type);
typedef enum {
    ButtonMenuItemTypeCommon,
    ButtonMenuItemTypeControl,
} ButtonMenuItemType;
View* button_menu_get_view(ButtonMenu* button_menu);
void button_menu_reset(ButtonMenu* button_menu);
ButtonMenuItem* button_menu_add_item(
    ButtonMenu* button_menu,
    const char* label,
    int32_t index,
    ButtonMenuItemCallback callback,
    ButtonMenuItemType type,
    void* callback_context);
ButtonMenu* button_menu_alloc(void);
void button_menu_free(ButtonMenu* button_menu);
void button_menu_set_header(ButtonMenu* button_menu, const char* header);
void button_menu_set_selected_item(ButtonMenu* button_menu, uint32_t index);
       
typedef struct ByteInput ByteInput;
typedef void (*ByteInputCallback)(void* context);
typedef void (*ByteChangedCallback)(void* context);
ByteInput* byte_input_alloc();
void byte_input_free(ByteInput* byte_input);
View* byte_input_get_view(ByteInput* byte_input);
void byte_input_set_result_callback(
    ByteInput* byte_input,
    ByteInputCallback input_callback,
    ByteChangedCallback changed_callback,
    void* callback_context,
    uint8_t* bytes,
    uint8_t bytes_count);
void byte_input_set_header_text(ByteInput* byte_input, const char* text);
       
typedef struct Popup Popup;
typedef void (*PopupCallback)(void* context);
Popup* popup_alloc();
void popup_free(Popup* popup);
View* popup_get_view(Popup* popup);
void popup_set_callback(Popup* popup, PopupCallback callback);
void popup_set_context(Popup* popup, void* context);
void popup_set_header(
    Popup* popup,
    const char* text,
    uint8_t x,
    uint8_t y,
    Align horizontal,
    Align vertical);
void popup_set_text(
    Popup* popup,
    const char* text,
    uint8_t x,
    uint8_t y,
    Align horizontal,
    Align vertical);
void popup_set_icon(Popup* popup, uint8_t x, uint8_t y, const Icon* icon);
void popup_set_timeout(Popup* popup, uint32_t timeout_in_ms);
void popup_enable_timeout(Popup* popup);
void popup_disable_timeout(Popup* popup);
void popup_reset(Popup* popup);
       
       
typedef struct ValidatorIsFile ValidatorIsFile;
ValidatorIsFile* validator_is_file_alloc_init(
    const char* app_path_folder,
    const char* app_extension,
    const char* current_name);
void validator_is_file_free(ValidatorIsFile* instance);
_Bool validator_is_file_callback(const char* text, FuriString* error, void* context);
typedef struct TextInput TextInput;
typedef void (*TextInputCallback)(void* context);
typedef _Bool (*TextInputValidatorCallback)(const char* text, FuriString* error, void* context);
TextInput* text_input_alloc();
void text_input_free(TextInput* text_input);
void text_input_reset(TextInput* text_input);
View* text_input_get_view(TextInput* text_input);
void text_input_set_result_callback(
    TextInput* text_input,
    TextInputCallback callback,
    void* callback_context,
    char* text_buffer,
    size_t text_buffer_size,
    _Bool clear_default_text);
void text_input_set_validator(
    TextInput* text_input,
    TextInputValidatorCallback callback,
    void* callback_context);
TextInputValidatorCallback text_input_get_validator_callback(TextInput* text_input);
void* text_input_get_validator_callback_context(TextInput* text_input);
void text_input_set_header_text(TextInput* text_input, const char* text);
       
       
typedef enum {
    GuiButtonTypeLeft,
    GuiButtonTypeCenter,
    GuiButtonTypeRight,
} GuiButtonType;
typedef void (*ButtonCallback)(GuiButtonType result, InputType type, void* context);
typedef struct Widget Widget;
typedef struct WidgetElement WidgetElement;
Widget* widget_alloc();
void widget_free(Widget* widget);
void widget_reset(Widget* widget);
View* widget_get_view(Widget* widget);
void widget_add_string_multiline_element(
    Widget* widget,
    uint8_t x,
    uint8_t y,
    Align horizontal,
    Align vertical,
    Font font,
    const char* text);
void widget_add_string_element(
    Widget* widget,
    uint8_t x,
    uint8_t y,
    Align horizontal,
    Align vertical,
    Font font,
    const char* text);
void widget_add_text_box_element(
    Widget* widget,
    uint8_t x,
    uint8_t y,
    uint8_t width,
    uint8_t height,
    Align horizontal,
    Align vertical,
    const char* text,
    _Bool strip_to_dots);
void widget_add_text_scroll_element(
    Widget* widget,
    uint8_t x,
    uint8_t y,
    uint8_t width,
    uint8_t height,
    const char* text);
void widget_add_button_element(
    Widget* widget,
    GuiButtonType button_type,
    const char* text,
    ButtonCallback callback,
    void* context);
void widget_add_icon_element(Widget* widget, uint8_t x, uint8_t y, const Icon* icon);
void widget_add_frame_element(
    Widget* widget,
    uint8_t x,
    uint8_t y,
    uint8_t width,
    uint8_t height,
    uint8_t radius);
       
typedef struct ButtonPanel ButtonPanel;
typedef void (*ButtonItemCallback)(void* context, uint32_t index);
ButtonPanel* button_panel_alloc(void);
void button_panel_free(ButtonPanel* button_panel);
void button_panel_reset(ButtonPanel* button_panel);
void button_panel_reset_selection(ButtonPanel* button_panel);
void button_panel_reserve(ButtonPanel* button_panel, size_t reserve_x, size_t reserve_y);
void button_panel_add_item(
    ButtonPanel* button_panel,
    uint32_t index,
    uint16_t matrix_place_x,
    uint16_t matrix_place_y,
    uint16_t x,
    uint16_t y,
    const Icon* icon_name,
    const Icon* icon_name_selected,
    ButtonItemCallback callback,
    void* callback_context);
View* button_panel_get_view(ButtonPanel* button_panel);
void button_panel_add_label(
    ButtonPanel* button_panel,
    uint16_t x,
    uint16_t y,
    Font font,
    const char* label_str);
       
typedef struct VariableItemList VariableItemList;
typedef struct VariableItem VariableItem;
typedef void (*VariableItemChangeCallback)(VariableItem* item);
typedef void (*VariableItemListEnterCallback)(void* context, uint32_t index);
VariableItemList* variable_item_list_alloc();
void variable_item_list_free(VariableItemList* variable_item_list);
void variable_item_list_reset(VariableItemList* variable_item_list);
View* variable_item_list_get_view(VariableItemList* variable_item_list);
VariableItem* variable_item_list_add(
    VariableItemList* variable_item_list,
    const char* label,
    uint8_t values_count,
    VariableItemChangeCallback change_callback,
    void* context);
void variable_item_list_set_enter_callback(
    VariableItemList* variable_item_list,
    VariableItemListEnterCallback callback,
    void* context);
void variable_item_list_set_selected_item(VariableItemList* variable_item_list, uint8_t index);
uint8_t variable_item_list_get_selected_item_index(VariableItemList* variable_item_list);
void variable_item_set_current_value_index(VariableItem* item, uint8_t current_value_index);
void variable_item_set_values_count(VariableItem* item, uint8_t values_count);
void variable_item_set_current_value_text(VariableItem* item, const char* current_value_text);
uint8_t variable_item_get_current_value_index(VariableItem* item);
void* variable_item_get_context(VariableItem* item);
       
typedef struct BrowserWorker BrowserWorker;
typedef void (*BrowserWorkerFolderOpenCallback)(
    void* context,
    uint32_t item_cnt,
    int32_t file_idx,
    _Bool is_root);
typedef void (*BrowserWorkerListLoadCallback)(void* context, uint32_t list_load_offset);
typedef void (*BrowserWorkerListItemCallback)(
    void* context,
    FuriString* item_path,
    _Bool is_folder,
    _Bool is_last);
typedef void (*BrowserWorkerLongLoadCallback)(void* context);
BrowserWorker* file_browser_worker_alloc(
    FuriString* path,
    const char* base_path,
    const char* filter_ext,
    _Bool skip_assets,
    _Bool hide_dot_files);
void file_browser_worker_free(BrowserWorker* browser);
void file_browser_worker_set_callback_context(BrowserWorker* browser, void* context);
void file_browser_worker_set_folder_callback(
    BrowserWorker* browser,
    BrowserWorkerFolderOpenCallback cb);
void file_browser_worker_set_list_callback(
    BrowserWorker* browser,
    BrowserWorkerListLoadCallback cb);
void file_browser_worker_set_item_callback(
    BrowserWorker* browser,
    BrowserWorkerListItemCallback cb);
void file_browser_worker_set_long_load_callback(
    BrowserWorker* browser,
    BrowserWorkerLongLoadCallback cb);
void file_browser_worker_set_config(
    BrowserWorker* browser,
    FuriString* path,
    const char* filter_ext,
    _Bool skip_assets,
    _Bool hide_dot_files);
void file_browser_worker_folder_enter(BrowserWorker* browser, FuriString* path, int32_t item_idx);
_Bool file_browser_worker_is_in_start_folder(BrowserWorker* browser);
void file_browser_worker_folder_exit(BrowserWorker* browser);
void file_browser_worker_folder_refresh(BrowserWorker* browser, int32_t item_idx);
void file_browser_worker_load(BrowserWorker* browser, uint32_t offset, uint32_t count);
       
typedef struct Menu Menu;
typedef void (*MenuItemCallback)(void* context, uint32_t index);
Menu* menu_alloc();
void menu_free(Menu* menu);
View* menu_get_view(Menu* menu);
void menu_add_item(
    Menu* menu,
    const char* label,
    const Icon* icon,
    uint32_t index,
    MenuItemCallback callback,
    void* context);
void menu_reset(Menu* menu);
void menu_set_selected_item(Menu* menu, uint32_t index);
       
typedef struct DialogEx DialogEx;
typedef enum {
    DialogExResultLeft,
    DialogExResultCenter,
    DialogExResultRight,
    DialogExPressLeft,
    DialogExPressCenter,
    DialogExPressRight,
    DialogExReleaseLeft,
    DialogExReleaseCenter,
    DialogExReleaseRight,
} DialogExResult;
typedef void (*DialogExResultCallback)(DialogExResult result, void* context);
DialogEx* dialog_ex_alloc();
void dialog_ex_free(DialogEx* dialog_ex);
View* dialog_ex_get_view(DialogEx* dialog_ex);
void dialog_ex_set_result_callback(DialogEx* dialog_ex, DialogExResultCallback callback);
void dialog_ex_set_context(DialogEx* dialog_ex, void* context);
void dialog_ex_set_header(
    DialogEx* dialog_ex,
    const char* text,
    uint8_t x,
    uint8_t y,
    Align horizontal,
    Align vertical);
void dialog_ex_set_text(
    DialogEx* dialog_ex,
    const char* text,
    uint8_t x,
    uint8_t y,
    Align horizontal,
    Align vertical);
void dialog_ex_set_icon(DialogEx* dialog_ex, uint8_t x, uint8_t y, const Icon* icon);
void dialog_ex_set_left_button_text(DialogEx* dialog_ex, const char* text);
void dialog_ex_set_center_button_text(DialogEx* dialog_ex, const char* text);
void dialog_ex_set_right_button_text(DialogEx* dialog_ex, const char* text);
void dialog_ex_reset(DialogEx* dialog_ex);
void dialog_ex_enable_extended_events(DialogEx* dialog_ex);
void dialog_ex_disable_extended_events(DialogEx* dialog_ex);
       
typedef struct Loading Loading;
Loading* loading_alloc();
void loading_free(Loading* instance);
View* loading_get_view(Loading* instance);
       
typedef struct TextBox TextBox;
typedef enum {
    TextBoxFontText,
    TextBoxFontHex,
} TextBoxFont;
typedef enum {
    TextBoxFocusStart,
    TextBoxFocusEnd,
} TextBoxFocus;
TextBox* text_box_alloc();
void text_box_free(TextBox* text_box);
View* text_box_get_view(TextBox* text_box);
void text_box_reset(TextBox* text_box);
void text_box_set_text(TextBox* text_box, const char* text);
void text_box_set_font(TextBox* text_box, TextBoxFont font);
void text_box_set_focus(TextBox* text_box, TextBoxFocus focus);
       
typedef struct Submenu Submenu;
typedef void (*SubmenuItemCallback)(void* context, uint32_t index);
Submenu* submenu_alloc();
void submenu_free(Submenu* submenu);
View* submenu_get_view(Submenu* submenu);
void submenu_add_item(
    Submenu* submenu,
    const char* label,
    uint32_t index,
    SubmenuItemCallback callback,
    void* callback_context);
void submenu_reset(Submenu* submenu);
void submenu_set_selected_item(Submenu* submenu, uint32_t index);
void submenu_set_header(Submenu* submenu, const char* header);
       
typedef struct EmptyScreen EmptyScreen;
EmptyScreen* empty_screen_alloc();
void empty_screen_free(EmptyScreen* empty_screen);
View* empty_screen_get_view(EmptyScreen* empty_screen);
       
#define RECORD_LOADER "loader"
typedef struct Loader Loader;
typedef enum {
    LoaderStatusOk,
    LoaderStatusErrorAppStarted,
    LoaderStatusErrorUnknownApp,
    LoaderStatusErrorInternal,
} LoaderStatus;
typedef enum {
    LoaderEventTypeApplicationStarted,
    LoaderEventTypeApplicationStopped
} LoaderEventType;
typedef struct {
    LoaderEventType type;
} LoaderEvent;
LoaderStatus loader_start(Loader* instance, const char* name, const char* args);
_Bool loader_lock(Loader* instance);
void loader_unlock(Loader* instance);
_Bool loader_is_locked(Loader* instance);
void loader_show_menu();
void loader_update_menu();
FuriPubSub* loader_get_pubsub(Loader* instance);
       
typedef enum {
    LocaleMeasurementUnitsMetric = 0,
    LocaleMeasurementUnitsImperial = 1,
} LocaleMeasurementUnits;
typedef enum {
    LocaleTimeFormat24h = 0,
    LocaleTimeFormat12h = 1,
} LocaleTimeFormat;
typedef enum {
    LocaleDateFormatDMY = 0,
    LocaleDateFormatMDY = 1,
    LocaleDateFormatYMD = 2,
} LocaleDateFormat;
LocaleMeasurementUnits locale_get_measurement_unit();
void locale_set_measurement_unit(LocaleMeasurementUnits format);
float locale_fahrenheit_to_celsius(float temp_f);
float locale_celsius_to_fahrenheit(float temp_c);
LocaleTimeFormat locale_get_time_format();
void locale_set_time_format(LocaleTimeFormat format);
void locale_format_time(
    FuriString* out_str,
    const FuriHalRtcDateTime* datetime,
    const LocaleTimeFormat format,
    const _Bool show_seconds);
LocaleDateFormat locale_get_date_format();
void locale_set_date_format(LocaleDateFormat format);
void locale_format_date(
    FuriString* out_str,
    const FuriHalRtcDateTime* datetime,
    const LocaleDateFormat format,
    const char* separator);
       
#define RECORD_NOTIFICATION "notification"
typedef struct NotificationApp NotificationApp;
typedef struct {
    float frequency;
    float volume;
} NotificationMessageDataSound;
typedef struct {
    uint8_t value;
} NotificationMessageDataLed;
typedef struct {
    _Bool on;
} NotificationMessageDataVibro;
typedef struct {
    uint32_t length;
} NotificationMessageDataDelay;
typedef struct {
    float speaker_volume;
    _Bool vibro;
    float display_brightness;
} NotificationMessageDataForcedSettings;
typedef struct {
    uint16_t on_time;
    uint16_t period;
    Light color;
} NotificationMessageDataLedBlink;
typedef union {
    NotificationMessageDataSound sound;
    NotificationMessageDataLed led;
    NotificationMessageDataLedBlink led_blink;
    NotificationMessageDataVibro vibro;
    NotificationMessageDataDelay delay;
    NotificationMessageDataForcedSettings forced_settings;
} NotificationMessageData;
typedef enum {
    NotificationMessageTypeVibro,
    NotificationMessageTypeSoundOn,
    NotificationMessageTypeSoundOff,
    NotificationMessageTypeLedRed,
    NotificationMessageTypeLedGreen,
    NotificationMessageTypeLedBlue,
    NotificationMessageTypeLedBlinkStart,
    NotificationMessageTypeLedBlinkStop,
    NotificationMessageTypeLedBlinkColor,
    NotificationMessageTypeDelay,
    NotificationMessageTypeLedDisplayBacklight,
    NotificationMessageTypeLedDisplayBacklightEnforceOn,
    NotificationMessageTypeLedDisplayBacklightEnforceAuto,
    NotificationMessageTypeDoNotReset,
    NotificationMessageTypeForceSpeakerVolumeSetting,
    NotificationMessageTypeForceVibroSetting,
    NotificationMessageTypeForceDisplayBrightnessSetting,
    NotificationMessageTypeLedBrightnessSettingApply,
} NotificationMessageType;
typedef struct {
    NotificationMessageType type;
    NotificationMessageData data;
} NotificationMessage;
typedef const NotificationMessage* NotificationSequence[];
void notification_message(NotificationApp* app, const NotificationSequence* sequence);
void notification_message_block(NotificationApp* app, const NotificationSequence* sequence);
void notification_internal_message(NotificationApp* app, const NotificationSequence* sequence);
void notification_internal_message_block(
    NotificationApp* app,
    const NotificationSequence* sequence);
       
       
extern const NotificationMessage message_click;
extern const NotificationMessage message_note_c0;
extern const NotificationMessage message_note_cs0;
extern const NotificationMessage message_note_d0;
extern const NotificationMessage message_note_ds0;
extern const NotificationMessage message_note_e0;
extern const NotificationMessage message_note_f0;
extern const NotificationMessage message_note_fs0;
extern const NotificationMessage message_note_g0;
extern const NotificationMessage message_note_gs0;
extern const NotificationMessage message_note_a0;
extern const NotificationMessage message_note_as0;
extern const NotificationMessage message_note_b0;
extern const NotificationMessage message_note_c1;
extern const NotificationMessage message_note_cs1;
extern const NotificationMessage message_note_d1;
extern const NotificationMessage message_note_ds1;
extern const NotificationMessage message_note_e1;
extern const NotificationMessage message_note_f1;
extern const NotificationMessage message_note_fs1;
extern const NotificationMessage message_note_g1;
extern const NotificationMessage message_note_gs1;
extern const NotificationMessage message_note_a1;
extern const NotificationMessage message_note_as1;
extern const NotificationMessage message_note_b1;
extern const NotificationMessage message_note_c2;
extern const NotificationMessage message_note_cs2;
extern const NotificationMessage message_note_d2;
extern const NotificationMessage message_note_ds2;
extern const NotificationMessage message_note_e2;
extern const NotificationMessage message_note_f2;
extern const NotificationMessage message_note_fs2;
extern const NotificationMessage message_note_g2;
extern const NotificationMessage message_note_gs2;
extern const NotificationMessage message_note_a2;
extern const NotificationMessage message_note_as2;
extern const NotificationMessage message_note_b2;
extern const NotificationMessage message_note_c3;
extern const NotificationMessage message_note_cs3;
extern const NotificationMessage message_note_d3;
extern const NotificationMessage message_note_ds3;
extern const NotificationMessage message_note_e3;
extern const NotificationMessage message_note_f3;
extern const NotificationMessage message_note_fs3;
extern const NotificationMessage message_note_g3;
extern const NotificationMessage message_note_gs3;
extern const NotificationMessage message_note_a3;
extern const NotificationMessage message_note_as3;
extern const NotificationMessage message_note_b3;
extern const NotificationMessage message_note_c4;
extern const NotificationMessage message_note_cs4;
extern const NotificationMessage message_note_d4;
extern const NotificationMessage message_note_ds4;
extern const NotificationMessage message_note_e4;
extern const NotificationMessage message_note_f4;
extern const NotificationMessage message_note_fs4;
extern const NotificationMessage message_note_g4;
extern const NotificationMessage message_note_gs4;
extern const NotificationMessage message_note_a4;
extern const NotificationMessage message_note_as4;
extern const NotificationMessage message_note_b4;
extern const NotificationMessage message_note_c5;
extern const NotificationMessage message_note_cs5;
extern const NotificationMessage message_note_d5;
extern const NotificationMessage message_note_ds5;
extern const NotificationMessage message_note_e5;
extern const NotificationMessage message_note_f5;
extern const NotificationMessage message_note_fs5;
extern const NotificationMessage message_note_g5;
extern const NotificationMessage message_note_gs5;
extern const NotificationMessage message_note_a5;
extern const NotificationMessage message_note_as5;
extern const NotificationMessage message_note_b5;
extern const NotificationMessage message_note_c6;
extern const NotificationMessage message_note_cs6;
extern const NotificationMessage message_note_d6;
extern const NotificationMessage message_note_ds6;
extern const NotificationMessage message_note_e6;
extern const NotificationMessage message_note_f6;
extern const NotificationMessage message_note_fs6;
extern const NotificationMessage message_note_g6;
extern const NotificationMessage message_note_gs6;
extern const NotificationMessage message_note_a6;
extern const NotificationMessage message_note_as6;
extern const NotificationMessage message_note_b6;
extern const NotificationMessage message_note_c7;
extern const NotificationMessage message_note_cs7;
extern const NotificationMessage message_note_d7;
extern const NotificationMessage message_note_ds7;
extern const NotificationMessage message_note_e7;
extern const NotificationMessage message_note_f7;
extern const NotificationMessage message_note_fs7;
extern const NotificationMessage message_note_g7;
extern const NotificationMessage message_note_gs7;
extern const NotificationMessage message_note_a7;
extern const NotificationMessage message_note_as7;
extern const NotificationMessage message_note_b7;
extern const NotificationMessage message_note_c8;
extern const NotificationMessage message_note_cs8;
extern const NotificationMessage message_note_d8;
extern const NotificationMessage message_note_ds8;
extern const NotificationMessage message_note_e8;
extern const NotificationMessage message_note_f8;
extern const NotificationMessage message_note_fs8;
extern const NotificationMessage message_note_g8;
extern const NotificationMessage message_note_gs8;
extern const NotificationMessage message_note_a8;
extern const NotificationMessage message_note_as8;
extern const NotificationMessage message_note_b8;
extern const NotificationMessage message_display_backlight_on;
extern const NotificationMessage message_display_backlight_off;
extern const NotificationMessage message_display_backlight_enforce_on;
extern const NotificationMessage message_display_backlight_enforce_auto;
extern const NotificationMessage message_red_255;
extern const NotificationMessage message_green_255;
extern const NotificationMessage message_blue_255;
extern const NotificationMessage message_red_0;
extern const NotificationMessage message_green_0;
extern const NotificationMessage message_blue_0;
extern const NotificationMessage message_blink_start_10;
extern const NotificationMessage message_blink_start_100;
extern const NotificationMessage message_blink_stop;
extern const NotificationMessage message_blink_set_color_red;
extern const NotificationMessage message_blink_set_color_green;
extern const NotificationMessage message_blink_set_color_blue;
extern const NotificationMessage message_blink_set_color_cyan;
extern const NotificationMessage message_blink_set_color_magenta;
extern const NotificationMessage message_blink_set_color_yellow;
extern const NotificationMessage message_blink_set_color_white;
extern const NotificationMessage message_delay_1;
extern const NotificationMessage message_delay_10;
extern const NotificationMessage message_delay_25;
extern const NotificationMessage message_delay_50;
extern const NotificationMessage message_delay_100;
extern const NotificationMessage message_delay_250;
extern const NotificationMessage message_delay_500;
extern const NotificationMessage message_delay_1000;
extern const NotificationMessage message_sound_off;
extern const NotificationMessage message_vibro_on;
extern const NotificationMessage message_vibro_off;
extern const NotificationMessage message_do_not_reset;
extern const NotificationMessage message_force_speaker_volume_setting_1f;
extern const NotificationMessage message_force_vibro_setting_on;
extern const NotificationMessage message_force_vibro_setting_off;
extern const NotificationMessage message_force_display_brightness_setting_1f;
extern const NotificationSequence sequence_reset_red;
extern const NotificationSequence sequence_reset_green;
extern const NotificationSequence sequence_reset_blue;
extern const NotificationSequence sequence_reset_rgb;
extern const NotificationSequence sequence_reset_display;
extern const NotificationSequence sequence_reset_sound;
extern const NotificationSequence sequence_reset_vibro;
extern const NotificationSequence sequence_set_vibro_on;
extern const NotificationSequence sequence_display_backlight_on;
extern const NotificationSequence sequence_display_backlight_off;
extern const NotificationSequence sequence_display_backlight_off_delay_1000;
extern const NotificationSequence sequence_display_backlight_enforce_on;
extern const NotificationSequence sequence_display_backlight_enforce_auto;
extern const NotificationSequence sequence_charging;
extern const NotificationSequence sequence_charged;
extern const NotificationSequence sequence_not_charging;
extern const NotificationSequence sequence_set_only_red_255;
extern const NotificationSequence sequence_set_only_green_255;
extern const NotificationSequence sequence_set_only_blue_255;
extern const NotificationSequence sequence_set_red_255;
extern const NotificationSequence sequence_set_green_255;
extern const NotificationSequence sequence_set_blue_255;
extern const NotificationSequence sequence_solid_yellow;
extern const NotificationSequence sequence_blink_blue_10;
extern const NotificationSequence sequence_blink_red_10;
extern const NotificationSequence sequence_blink_green_10;
extern const NotificationSequence sequence_blink_yellow_10;
extern const NotificationSequence sequence_blink_cyan_10;
extern const NotificationSequence sequence_blink_magenta_10;
extern const NotificationSequence sequence_blink_red_100;
extern const NotificationSequence sequence_blink_green_100;
extern const NotificationSequence sequence_blink_blue_100;
extern const NotificationSequence sequence_blink_yellow_100;
extern const NotificationSequence sequence_blink_cyan_100;
extern const NotificationSequence sequence_blink_magenta_100;
extern const NotificationSequence sequence_blink_white_100;
extern const NotificationSequence sequence_blink_start_blue;
extern const NotificationSequence sequence_blink_start_red;
extern const NotificationSequence sequence_blink_start_green;
extern const NotificationSequence sequence_blink_start_yellow;
extern const NotificationSequence sequence_blink_start_cyan;
extern const NotificationSequence sequence_blink_start_magenta;
extern const NotificationSequence sequence_blink_stop;
extern const NotificationSequence sequence_single_vibro;
extern const NotificationSequence sequence_double_vibro;
extern const NotificationSequence sequence_success;
extern const NotificationSequence sequence_error;
extern const NotificationSequence sequence_audiovisual_alert;
       
#define RECORD_POWER "power"
typedef struct Power Power;
typedef enum {
    PowerBootModeNormal,
    PowerBootModeDfu,
    PowerBootModeUpdateStart,
} PowerBootMode;
typedef enum {
    PowerEventTypeStopCharging,
    PowerEventTypeStartCharging,
    PowerEventTypeFullyCharged,
    PowerEventTypeBatteryLevelChanged,
} PowerEventType;
typedef union {
    uint8_t battery_level;
} PowerEventData;
typedef struct {
    PowerEventType type;
    PowerEventData data;
} PowerEvent;
typedef struct {
    _Bool gauge_is_ok;
    _Bool is_charging;
    float current_charger;
    float current_gauge;
    float voltage_battery_charging;
    float voltage_charger;
    float voltage_gauge;
    float voltage_vbus;
    uint32_t capacity_remaining;
    uint32_t capacity_full;
    float temperature_charger;
    float temperature_gauge;
    uint8_t charge;
    uint8_t health;
} PowerInfo;
void power_off(Power* power);
void power_reboot(PowerBootMode mode);
void power_get_info(Power* power, PowerInfo* info);
FuriPubSub* power_get_pubsub(Power* power);
FuriPubSub* power_get_settings_events_pubsub(Power* power);
_Bool power_is_battery_healthy(Power* power);
void power_enable_low_battery_level_notification(Power* power, _Bool enable);
       
       
#define RPC_BUFFER_SIZE (1024)
#define RPC_MAX_MESSAGE_SIZE (1536)
#define RECORD_RPC "rpc"
typedef struct Rpc Rpc;
typedef struct RpcSession RpcSession;
typedef void (*RpcSendBytesCallback)(void* context, uint8_t* bytes, size_t bytes_len);
typedef void (*RpcBufferIsEmptyCallback)(void* context);
typedef void (*RpcSessionClosedCallback)(void* context);
typedef void (*RpcSessionTerminatedCallback)(void* context);
RpcSession* rpc_session_open(Rpc* rpc);
void rpc_session_close(RpcSession* session);
void rpc_session_set_context(RpcSession* session, void* context);
void rpc_session_set_send_bytes_callback(RpcSession* session, RpcSendBytesCallback callback);
void rpc_session_set_buffer_is_empty_callback(
    RpcSession* session,
    RpcBufferIsEmptyCallback callback);
void rpc_session_set_close_callback(RpcSession* session, RpcSessionClosedCallback callback);
void rpc_session_set_terminated_callback(
    RpcSession* session,
    RpcSessionTerminatedCallback callback);
size_t rpc_session_feed(RpcSession* session, uint8_t* buffer, size_t size, TickType_t timeout);
size_t rpc_session_get_available_size(RpcSession* session);
typedef enum {
    RpcAppEventSessionClose,
    RpcAppEventAppExit,
    RpcAppEventLoadFile,
    RpcAppEventButtonPress,
    RpcAppEventButtonRelease,
} RpcAppSystemEvent;
typedef void (*RpcAppSystemCallback)(RpcAppSystemEvent event, void* context);
typedef void (
    *RpcAppSystemDataExchangeCallback)(const uint8_t* data, size_t data_size, void* context);
typedef struct RpcAppSystem RpcAppSystem;
void rpc_system_app_set_callback(RpcAppSystem* rpc_app, RpcAppSystemCallback callback, void* ctx);
void rpc_system_app_send_started(RpcAppSystem* rpc_app);
void rpc_system_app_send_exited(RpcAppSystem* rpc_app);
const char* rpc_system_app_get_data(RpcAppSystem* rpc_app);
void rpc_system_app_confirm(RpcAppSystem* rpc_app, RpcAppSystemEvent event, _Bool result);
void rpc_system_app_set_error_code(RpcAppSystem* rpc_app, uint32_t error_code);
void rpc_system_app_set_error_text(RpcAppSystem* rpc_app, const char* error_text);
void rpc_system_app_error_reset(RpcAppSystem* rpc_app);
void rpc_system_app_set_data_exchange_callback(
    RpcAppSystem* rpc_app,
    RpcAppSystemDataExchangeCallback callback,
    void* ctx);
void rpc_system_app_exchange_data(RpcAppSystem* rpc_app, const uint8_t* data, size_t data_size);
